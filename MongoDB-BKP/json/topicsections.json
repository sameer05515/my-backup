{"_id":{"$oid":"66695770c08c059aa3e302ef"},"uniqueId":"fe0fe54b-7662-440a-9238-787a7de8b93a","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What is the definition of this \"test table\"? or What is \"test table\"?","smartContent":{"content":"What is the definition of this \"test table\"? or What is \"test table\"?123","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T08:08:16.244Z"},"updatedDate":{"$date":"2024-06-12T15:39:02.152Z"},"__v":0}
{"_id":{"$oid":"6669873706d4a2f791270a5c"},"uniqueId":"130b466f-027f-403c-b754-bc9a77232812","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What are the key components or concepts within this \"test table\"?","smartContent":{"content":"What are the key components or concepts within this \"test table\"?","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T11:32:07.531Z"},"updatedDate":{"$date":"2024-06-12T11:32:07.531Z"},"__v":0}
{"_id":{"$oid":"6669c2e92394c9096be565f3"},"uniqueId":"6296e52f-2184-4e15-88b5-60c4bae98277","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What are the primary uses or applications of this \"test table\"?","smartContent":{"content":"What are the primary uses or applications of this \"test table\"?","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T15:46:49.495Z"},"updatedDate":{"$date":"2024-06-12T15:46:49.495Z"},"__v":0}
{"_id":{"$oid":"6669c3e72394c9096be5660d"},"uniqueId":"1c3e0bff-10f8-491d-9bce-545b70a0ea84","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What are the main challenges or issues associated with this \"test table\"?","smartContent":{"content":"What are the main challenges or issues associated with this \"test table\"?","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T15:51:03.506Z"},"updatedDate":{"$date":"2024-06-12T15:51:03.506Z"},"__v":0}
{"_id":{"$oid":"6669c4122394c9096be56627"},"uniqueId":"8370bb1a-0460-4cc1-b3f2-4d1a6e2fc060","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What are alternatives of \"test table\"?","smartContent":{"content":"What are alternatives of \"test table\"?","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T15:51:46.502Z"},"updatedDate":{"$date":"2024-06-12T15:51:46.502Z"},"__v":0}
{"_id":{"$oid":"6669c42f2394c9096be56641"},"uniqueId":"b90722eb-fc04-4098-b0ef-ce54c944d91c","linkedTopicUniqueId":"3bc4f4d5-519f-4f07-b2c4-07f165e686a6","name":"What is a workaround, if I choose not to use this \"test table\"?","smartContent":{"content":"What is a workaround, if I choose not to use this \"test table\"?","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-12T15:52:15.19Z"},"updatedDate":{"$date":"2024-06-12T15:52:15.19Z"},"__v":0}
{"_id":{"$oid":"6669d0982394c9096be5cb78"},"uniqueId":"1670f51c-d661-4fe1-8d81-7798521e82d2","linkedTopicUniqueId":"1203d550-0351-4af0-a88f-a8d0b1d6ae21","name":"Some buzzwords and terms commonly associated with Node.js","smartContent":{"content":"Here are some buzzwords and terms commonly associated with Node.js:\n\n1. **Event-Driven**: A programming paradigm where the flow of the program is determined by events such as user actions or messages from other programs.\n2. **Non-Blocking I/O**: Input/output operations that do not block the execution of the program, allowing it to continue other tasks while waiting for the I/O operation to complete.\n3. **Asynchronous Programming**: A form of programming where tasks are executed asynchronously, allowing the program to handle multiple operations concurrently.\n4. **JavaScript Runtime**: Node.js is a runtime environment that allows JavaScript to be executed on the server-side.\n5. **Single-Threaded**: Node.js operates on a single thread using non-blocking I/O calls, allowing it to handle multiple operations concurrently.\n6. **NPM (Node Package Manager)**: A package manager for JavaScript, which is the default for Node.js. It allows developers to share and reuse code.\n7. **Callback Functions**: Functions that are passed as arguments to other functions and are executed after some operation has been completed.\n8. **Promises**: Objects representing the eventual completion or failure of an asynchronous operation, providing a more readable and manageable way to handle async operations compared to callbacks.\n9. **Async/Await**: Syntax for writing asynchronous code in a synchronous manner, making it easier to read and write.\n10. **Middleware**: Functions that have access to the request and response objects in an application’s request-response cycle and can modify them.\n11. **Express.js**: A minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.\n12. **RESTful APIs**: Architectural style for designing networked applications that rely on stateless, client-server, cacheable communications.\n13. **Microservices**: An architectural style that structures an application as a collection of loosely coupled services, which implement business capabilities.\n14. **Socket.io**: A library that enables real-time, bidirectional, and event-based communication between the browser and the server.\n15. **Cluster Module**: A module that allows Node.js to create child processes that share the same server port, enabling the creation of a multi-threaded server.\n16. **Streams**: Objects that facilitate reading data from a source or writing data to a destination in a continuous fashion.\n17. **Buffer**: A temporary holding spot for data being moved from one place to another.\n18. **V8 Engine**: The JavaScript engine developed by Google that Node.js uses to execute JavaScript code.\n19. **REPL (Read-Eval-Print Loop)**: An interactive shell that processes Node.js expressions.\n20. **CommonJS**: A standard for module definition in JavaScript, which Node.js uses to manage dependencies.\n21. **ES Modules**: ECMAScript modules, a standard for working with modules in JavaScript.\n22. **TypeScript**: A superset of JavaScript that adds static types, improving development experience and code quality.\n23. **Mongoose**: An ODM (Object Data Modeling) library for MongoDB and Node.js, providing a schema-based solution to model data.\n24. **JWT (JSON Web Tokens)**: A compact, URL-safe means of representing claims to be transferred between two parties.\n25. **Webpack**: A module bundler that takes modules with dependencies and generates static assets representing those modules.\n26. **Babel**: A JavaScript compiler that allows you to use next-generation JavaScript, today.\n27. **MEAN Stack**: A collection of JavaScript-based technologies (MongoDB, Express.js, Angular, Node.js) used for web development.\n28. **NestJS**: A framework for building efficient, reliable, and scalable server-side applications using Node.js.\n29. **GraphQL**: A query language for APIs and a runtime for executing those queries by using a type system you define for your data.\n30. **Docker**: A tool designed to make it easier to create, deploy, and run applications by using containers.\n\nThese buzzwords encapsulate key concepts, tools, and practices associated with Node.js development.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["af08d032-da97-46ee-8c62-f035cf0d07c5"],"createdDate":{"$date":"2024-06-12T16:45:12.529Z"},"updatedDate":{"$date":"2024-07-02T06:20:40.893Z"},"__v":1}
{"_id":{"$oid":"6669d3a42394c9096be5f241"},"uniqueId":"39213712-2ab4-4020-adc4-0b947f04cb3f","linkedTopicUniqueId":"dd07d5a9-b6d1-460f-a76b-c62c6125fcb3","name":"What is Java?","smartContent":{"content":"Java is a widely-used, high-level, object-oriented programming language and platform that was originally developed by Sun Microsystems, which has since been acquired by Oracle Corporation. Here are some key aspects of Java:\n\n1. **Object-Oriented**: Java is based on the object-oriented programming (OOP) paradigm, which organizes software design around data, or objects, rather than functions and logic. Key concepts of OOP include classes, objects, inheritance, polymorphism, encapsulation, and abstraction.\n\n2. **Platform Independence**: One of Java's most significant features is its platform independence. Java programs are compiled into bytecode, which can be executed on any system equipped with the Java Virtual Machine (JVM). This \"write once, run anywhere\" capability makes Java a versatile and portable language.\n\n3. **Syntax and Semantics**: Java's syntax is similar to C and C++, but with fewer low-level facilities. This makes it easier to learn for those familiar with these languages while still providing powerful features.\n\n4. **Robustness and Security**: Java is designed to be a robust language with strong memory management, exception handling, and type checking at both compile and runtime. Java also has built-in security features, such as the Java security manager and bytecode verification, which make it suitable for building secure applications.\n\n5. **Multi-threading**: Java has built-in support for multi-threading, allowing developers to write programs that can perform multiple tasks simultaneously. This makes it well-suited for building high-performance applications, such as server-side applications and real-time systems.\n\n6. **Rich Standard Library**: Java comes with a comprehensive standard library (Java API) that provides many useful classes and methods for performing common tasks, such as string manipulation, data structures, networking, file I/O, database connectivity, and graphical user interface (GUI) development.\n\n7. **Enterprise Applications**: Java is widely used in enterprise environments, thanks to frameworks like Java EE (Enterprise Edition) which provide tools for building large-scale, distributed, and component-based applications. Java EE includes technologies like Servlets, JavaServer Pages (JSP), Enterprise JavaBeans (EJB), and Java Message Service (JMS).\n\n8. **Community and Ecosystem**: Java has a large and active community of developers, as well as a rich ecosystem of libraries, frameworks, and tools. Popular frameworks include Spring, Hibernate, and Apache Struts, which simplify enterprise application development.\n\n9. **Performance**: Although Java is an interpreted language, the JVM uses Just-In-Time (JIT) compilation to convert bytecode into native machine code at runtime, improving performance.\n\n10. **Development Tools**: There are many development tools available for Java, including integrated development environments (IDEs) like Eclipse, IntelliJ IDEA, and NetBeans, which provide features like code editing, debugging, and project management.\n\n### Example Code\n\nHere’s a simple example of a Java program:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nThis program defines a class `HelloWorld` with a `main` method that prints \"Hello, World!\" to the console. The `main` method is the entry point of a Java application.\n\nIn summary, Java is a versatile, powerful, and widely-adopted programming language that is well-suited for building a wide range of applications, from simple desktop applications to large-scale enterprise systems.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["20cb5b8d-adb1-43c7-9b00-4ee77bcbd3f2"],"createdDate":{"$date":"2024-06-12T16:58:12.083Z"},"updatedDate":{"$date":"2024-07-11T07:58:35.128Z"},"__v":1}
{"_id":{"$oid":"6669d40a2394c9096be5fec3"},"uniqueId":"eedca22d-3386-428a-b7f9-5b8682b3da26","linkedTopicUniqueId":"dd07d5a9-b6d1-460f-a76b-c62c6125fcb3","name":"Buzzwords related to Java","smartContent":{"content":"Java, programming language, JVM, object-oriented, class, method, variable, inheritance, polymorphism, encapsulation, abstraction, syntax, platform-independent, JDK, JRE, bytecode, IDE, Eclipse, NetBeans, IntelliJ, data types, loops, conditional statements, exception handling, collections, arrays, strings, threads, GUI, Swing, JavaFX, serialization, JDBC, Spring framework.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["af08d032-da97-46ee-8c62-f035cf0d07c5","9f07fea6-7eeb-4ec0-8adc-b8e4fc387a38"],"createdDate":{"$date":"2024-06-12T16:59:54.865Z"},"updatedDate":{"$date":"2024-06-29T22:44:49.933Z"},"__v":2}
{"_id":{"$oid":"666b1a5691eed106d6544a90"},"uniqueId":"aea03313-b8e1-445d-821b-75936200cd64","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"What is Angular?","smartContent":{"content":"Angular is a platform and framework for building single-page client applications using HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your applications.\n\nHere are some key points:\n\n- **Component-based architecture**: Angular applications are built using components which are the basic building blocks of the application.\n- **Two-way data binding**: Angular allows for synchronization between the model and the view.\n- **Dependency injection**: Angular has a built-in dependency injection system that allows for better modularity and testing.\n- **Directives**: Angular provides directives to manipulate the DOM.\n- **Routing**: Angular includes a powerful router for building single-page applications with multiple views.\n- **Services**: Angular services are used to share data and functionality among components.\n\nHere’s a simple example of an Angular component:\n\n**app.component.ts:**\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'My Angular App';\n}\n```\n\n**app.component.html:**\n\n```html\n<div>\n  <h1>{{ title }}</h1>\n</div>\n```\n\n**app.module.ts:**\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\nTo get started with Angular, you typically use the Angular CLI, which simplifies development tasks such as creating a new project, generating components, and building the application.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:12:06.473Z"},"updatedDate":{"$date":"2024-06-13T16:12:06.473Z"},"__v":0}
{"_id":{"$oid":"666b1b7f91eed106d6544aaa"},"uniqueId":"f9381172-1063-4b95-ad4b-ed3858d1492f","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"commonly used commands in Angular","smartContent":{"content":"\n\nTo install Angular CLI globally on your machine, use the following command:\n\n```bash\nnpm install -g @angular/cli\n```\n\nOnce the installation is complete, you can verify it by checking the Angular CLI version:\n\n```bash\nng version\n```\n\nAfter installing Angular CLI, you can create a new Angular project with:\n\n```bash\nng new project-name\n```\n\nReplace `project-name` with the desired name of your project. This command will set up a new Angular project with all the necessary configurations.\n\n\nHere are some commonly used Angular CLI commands:\n\n1. **Creating a New Angular Project:**\n\n```bash\nng new project-name\n```\n\n2. **Serving the Application:**\n\n```bash\nng serve\n```\n\n3. **Generating Components:**\n\n```bash\nng generate component component-name\n# or\nng g c component-name\n```\n\n4. **Generating Services:**\n\n```bash\nng generate service service-name\n# or\nng g s service-name\n```\n\n5. **Generating Modules:**\n\n```bash\nng generate module module-name\n# or\nng g m module-name\n```\n\n6. **Generating Directives:**\n\n```bash\nng generate directive directive-name\n# or\nng g d directive-name\n```\n\n7. **Generating Pipes:**\n\n```bash\nng generate pipe pipe-name\n# or\nng g p pipe-name\n```\n\n8. **Building the Application:**\n\n```bash\nng build\n```\n\n9. **Running Tests:**\n\n```bash\nng test\n```\n\n10. **Running End-to-End Tests:**\n\n```bash\nng e2e\n```\n\n11. **Linting the Application:**\n\n```bash\nng lint\n```\n\n12. **Updating Angular CLI and Core Dependencies:**\n\n```bash\nng update @angular/cli @angular/core\n```\n\n13. **Adding a New Library or Package:**\n\n```bash\nng add package-name\n```\n\n14. **Running a Custom Schematic:**\n\n```bash\nng run project-name:target\n```\n\nThese commands help streamline various tasks in Angular development, from project setup and scaffolding to building and testing the application.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:17:03.781Z"},"updatedDate":{"$date":"2024-06-13T16:17:03.781Z"},"__v":0}
{"_id":{"$oid":"666b1e0891eed106d6544ac4"},"uniqueId":"0cd64f20-e0f5-4048-98c0-9369237ef598","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"version history of angular with major changes","smartContent":{"content":"Here's a brief version history of Angular along with major changes introduced in each version:\n\n### AngularJS (1.x)\n- **AngularJS**: The original version of Angular, also known as Angular 1.x. It was released in 2010 and is based on JavaScript.\n\n### Angular 2\n- **Released**: September 2016\n- **Major Changes**:\n  - Complete rewrite from AngularJS.\n  - Uses TypeScript.\n  - Component-based architecture.\n  - Improved performance and speed.\n  - Dependency injection enhancements.\n\n### Angular 4\n- **Released**: March 2017\n- **Major Changes**:\n  - Backward-compatible with Angular 2.\n  - Reduced size of generated code by about 60%.\n  - Animation package extracted to `@angular/animations`.\n  - Introduced `ngIf` and `ngFor` with `else` syntax.\n\n### Angular 5\n- **Released**: November 2017\n- **Major Changes**:\n  - Build optimizer tool.\n  - Angular Universal State Transfer API and DOM support.\n  - Improved compiler to reduce the size of JavaScript bundles.\n  - Enhanced RxJS compatibility.\n\n### Angular 6\n- **Released**: May 2018\n- **Major Changes**:\n  - Angular Elements for integrating Angular components into other apps.\n  - Tree Shakable Providers.\n  - Component Dev Kit (CDK) improvements.\n  - New CLI commands: `ng update` and `ng add`.\n\n### Angular 7\n- **Released**: October 2018\n- **Major Changes**:\n  - Improved application performance.\n  - Virtual scrolling and drag-and-drop in the Angular Material CDK.\n  - CLI prompts to help with common commands.\n  - Improved accessibility of select options.\n\n### Angular 8\n- **Released**: May 2019\n- **Major Changes**:\n  - Ivy compiler (preview) and runtime.\n  - Differential loading for modern JavaScript.\n  - Web workers support.\n  - Lazy loading with dynamic imports.\n\n### Angular 9\n- **Released**: February 2020\n- **Major Changes**:\n  - Ivy compiler and runtime as default.\n  - Improved type-checking in templates.\n  - Smaller bundle sizes.\n  - Better debugging and error reporting.\n\n### Angular 10\n- **Released**: June 2020\n- **Major Changes**:\n  - New default browser configuration.\n  - Optional stricter settings in `ng new`.\n  - Warnings for CommonJS imports.\n  - Updated TypeScript and TSLint versions.\n\n### Angular 11\n- **Released**: November 2020\n- **Major Changes**:\n  - Automatic font inlining.\n  - Improved Hot Module Replacement (HMR) support.\n  - Component Test Harnesses.\n  - Updated language service preview.\n\n### Angular 12\n- **Released**: May 2021\n- **Major Changes**:\n  - Nullish Coalescing in templates.\n  - Improvements to the Ivy ecosystem.\n  - Support for Webpack 5.\n  - Deprecation of support for IE11.\n\n### Angular 13\n- **Released**: November 2021\n- **Major Changes**:\n  - View Engine removal.\n  - Enhancements in Angular Tests.\n  - Improved Angular CLI.\n  - TypeScript 4.4 support.\n\n### Angular 14\n- **Released**: June 2022\n- **Major Changes**:\n  - Standalone components, directives, and pipes.\n  - Typed reactive forms.\n  - Angular DevTools enhancements.\n  - Improved diagnostics in templates.\n\n### Angular 15\n- **Released**: November 2022\n- **Major Changes**:\n  - Enhanced Standalone APIs.\n  - Improvements to Angular Material.\n  - Directive composition API.\n  - Enhanced build performance.\n\n### Angular 16\n- **Released**: May 2023\n- **Major Changes**:\n  - Signal-based reactivity model.\n  - Dependency injection improvements.\n  - Enhanced performance for large applications.\n  - TypeScript 4.9 support.\n\nThis history highlights the evolution of Angular, showcasing the continuous improvements in performance, developer experience, and new features that make building web applications more efficient and powerful.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:27:52.809Z"},"updatedDate":{"$date":"2024-06-13T16:39:02.605Z"},"__v":0}
{"_id":{"$oid":"666b1f7a91eed106d6544ade"},"uniqueId":"778000db-70cc-46df-8224-32470f7eb34d","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"version history from wikipedia","smartContent":{"content":"<figure class=\"table\"><table><thead><tr><th>Version</th><th>Release date</th><th>New features</th><th>Notes</th></tr></thead><tbody><tr><td><strong>Angular 18</strong></td><td>May 22, 2024</td><td>Experimental zoneless change detection support and server-side rendering improvements.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-21\">[21]</a></td><td>&nbsp;</td></tr><tr><td>Angular 17</td><td>November 8, 2023<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:1-22\">[22]</a></td><td>Application builder, a new syntax for control flow, and a re-worked learning and documentation website.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:1-22\">[22]</a></td><td>&nbsp;</td></tr><tr><td>Angular 16</td><td>3 May 2023</td><td>Partial hydration for Angular Universal's <a href=\"https://en.wikipedia.org/wiki/Server-side_rendering\">Server-side rendering</a>, experimental Jest support, and <a href=\"https://en.wikipedia.org/wiki/Esbuild\">Esbuild</a>-based build system for development servers.</td><td>&nbsp;</td></tr><tr><td>Angular 15</td><td>November 18, 2022</td><td>Standalone APIs, directive composition API.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-23\">[23]</a></td><td>&nbsp;</td></tr><tr><td>Angular 14</td><td>2 June 2022</td><td>Typed forms, standalone components, and new primitives in the Angular CDK (component dev kit).</td><td>&nbsp;</td></tr><tr><td>Angular 13</td><td>4 November 2021<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:2-24\">[24]</a></td><td>Removed deprecated View Engine renderer.</td><td>&nbsp;</td></tr><tr><td>Angular 12</td><td>12 May 2021<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:3-25\">[25]</a></td><td>Deprecated support for Internet Explorer 11.</td><td>&nbsp;</td></tr><tr><td>Angular 11</td><td>11 November 2020<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:4-26\">[26]</a></td><td>Experimental <a href=\"https://en.wikipedia.org/wiki/Webpack\">Webpack</a> 5 support</td><td>&nbsp;</td></tr><tr><td>Angular 10</td><td>24 June 2020<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:5-27\">[27]</a></td><td>New Date Range Picker (Material UI library).</td><td>&nbsp;</td></tr><tr><td>Angular 9</td><td>6 February 2020</td><td>Improved build times, enabling <a href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\">AOT</a> on by default</td><td>&nbsp;</td></tr><tr><td>Angular 8</td><td>28 May 2019</td><td>Differential loading for all application code, Dynamic imports for lazy routes, Web workers, TypeScript 3.4 support, and Angular Ivy as an opt-in preview.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:0-28\">[28]</a></td><td>&nbsp;</td></tr><tr><td>Angular 7</td><td>18 October 2018</td><td>Updates regarding Application Performance, Angular Material &amp; CDK, Virtual Scrolling, Improved Accessibility of Selects. Support for Content Projection using web standard for custom elements, and dependency updates regarding Typescript 3.1, RxJS 6.3 and Node.js 10.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:10-29\">[29]</a></td><td>&nbsp;</td></tr><tr><td>Angular 6</td><td>4 May 2018<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:6-30\">[30]</a></td><td>Experimental custom element support</td><td>&nbsp;</td></tr><tr><td>Angular 5</td><td>1 November 2017<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:7-31\">[31]</a></td><td>Support for <a href=\"https://en.wikipedia.org/wiki/Progressive_web_app\">progressive web apps</a>, a build optimizer and improvements related to Material Design.<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:8-32\">[32]</a></td><td>&nbsp;</td></tr><tr><td>Angular 4.3</td><td>18 July 2017</td><td>HttpClient for making HTTP requests, conditionally disabling animations, new router life cycle events for Guards and Resolvers.</td><td>Minor release, meaning that it contains no breaking changes and that it is a drop-in replacement for Angular 4.x.x.</td></tr><tr><td>Angular 4</td><td>23 March 2017<a href=\"https://en.wikipedia.org/wiki/Angular_(web_framework)#cite_note-:9-33\">[33]</a></td><td>Added ng update command</td><td><a href=\"https://en.wikipedia.org/wiki/Backward_compatibility\">Backward compatible</a> with Angular 2.</td></tr><tr><td>Angular 2</td><td>14 September 2016</td><td>Initial release</td><td>&nbsp;</td></tr></tbody></table></figure>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:34:02.286Z"},"updatedDate":{"$date":"2024-06-13T16:34:02.286Z"},"__v":0}
{"_id":{"$oid":"666b202d91eed106d6544b12"},"uniqueId":"8b262015-814e-498c-85e6-502e1bc9083d","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"decorators in angular","smartContent":{"content":"Decorators in Angular are special functions that can modify the behavior of classes, methods, or properties. They are used to attach metadata to these entities, which Angular uses to understand how to process them. Here are the most commonly used decorators in Angular:\n\n### @Component\nDefines a component and its metadata.\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'My Angular App';\n}\n```\n\n### @Directive\nDefines a directive and its metadata.\n\n```typescript\nimport { Directive, ElementRef, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(el: ElementRef, renderer: Renderer2) {\n    renderer.setStyle(el.nativeElement, 'backgroundColor', 'yellow');\n  }\n}\n```\n\n### @Injectable\nDefines a service and its metadata.\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  getData() {\n    return ['data1', 'data2', 'data3'];\n  }\n}\n```\n\n### @NgModule\nDefines an Angular module and its metadata.\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n### @Input\nMarks a property as an input property, which allows data to be passed from a parent component to a child component.\n\n```typescript\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: '<p>{{childMessage}}</p>'\n})\nexport class ChildComponent {\n  @Input() childMessage: string;\n}\n```\n\n### @Output\nMarks a property as an output property, which allows data to be passed from a child component to a parent component using events.\n\n```typescript\nimport { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: '<button (click)=\"sendMessage()\">Send Message</button>'\n})\nexport class ChildComponent {\n  @Output() messageEvent = new EventEmitter<string>();\n\n  sendMessage() {\n    this.messageEvent.emit('Hello from Child');\n  }\n}\n```\n\n### @HostListener\nDeclares a DOM event to listen for and provides a handler method to run when that event occurs.\n\n```typescript\nimport { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appClick]'\n})\nexport class ClickDirective {\n  @HostListener('click', ['$event'])\n  onClick(event: Event) {\n    alert('Element clicked!');\n  }\n}\n```\n\n### @HostBinding\nBinds a DOM property to a host element property.\n\n```typescript\nimport { Directive, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: '[appToggle]'\n})\nexport class ToggleDirective {\n  private isOpen = false;\n\n  @HostBinding('class.open') get opened() {\n    return this.isOpen;\n  }\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n}\n```\n\n### @ContentChild and @ContentChildren\nUsed to query for a single or multiple projected content elements.\n\n```typescript\nimport { Component, ContentChild, AfterContentInit } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: '<ng-content></ng-content>'\n})\nexport class ChildComponent implements AfterContentInit {\n  @ContentChild('projectedContent') content;\n\n  ngAfterContentInit() {\n    console.log(this.content);\n  }\n}\n```\n\n```typescript\nimport { Component, ContentChildren, QueryList, AfterContentInit } from '@angular/core';\n\n@Component({\n  selector: 'app-child',\n  template: '<ng-content></ng-content>'\n})\nexport class ChildComponent implements AfterContentInit {\n  @ContentChildren('projectedContent') contents: QueryList<any>;\n\n  ngAfterContentInit() {\n    this.contents.forEach(content => console.log(content));\n  }\n}\n```\n\nThese decorators are essential for building Angular applications, enabling you to define components, directives, services, modules, and manage data flow and event handling within your application.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:37:01.839Z"},"updatedDate":{"$date":"2024-06-13T16:37:01.839Z"},"__v":0}
{"_id":{"$oid":"666b208d91eed106d6544b2c"},"uniqueId":"7cdf5abd-3453-4387-a479-86653021c399","linkedTopicUniqueId":"0e660140-ff0b-4a3b-99ac-97533da09d3a","name":"buzzwords in angular","smartContent":{"content":"Here are some key buzzwords and terms commonly associated with Angular:\n\n### Angular Buzzwords\n\n1. **Component**: A fundamental building block in Angular, representing a portion of the UI.\n2. **Directive**: Custom HTML attributes used to extend the power of HTML by applying custom behaviors to DOM elements.\n3. **Service**: A class with specific functionality that can be shared across components.\n4. **Module**: A logical boundary in your application, containing components, directives, services, etc.\n5. **Decorator**: Special functions that can be attached to a class, property, method, or parameter to modify its behavior.\n6. **Two-way Data Binding**: Synchronizes data between the model and the view.\n7. **Dependency Injection (DI)**: A design pattern used to implement IoC (Inversion of Control), allowing a class to receive its dependencies from an external source rather than creating them itself.\n8. **RxJS (Reactive Extensions for JavaScript)**: A library for reactive programming using Observables, extensively used in Angular for handling asynchronous operations.\n9. **Observables**: A powerful way of managing asynchronous data streams and events in Angular, provided by RxJS.\n10. **Ivy**: The latest rendering engine in Angular, offering improved performance and smaller bundle sizes.\n11. **AOT (Ahead-of-Time) Compilation**: Compiling the Angular application at build time, resulting in faster rendering in the browser.\n12. **Lazy Loading**: A design pattern used to load JavaScript components asynchronously when a specific route is activated.\n13. **Routing**: The mechanism in Angular to navigate between different views or components.\n14. **Angular CLI (Command Line Interface)**: A powerful command-line tool to scaffold, build, and maintain Angular applications.\n15. **Forms Module**: A module for building and handling forms in Angular, includes both template-driven and reactive forms.\n16. **HTTPClient**: A modern, easy-to-use HTTP client for making HTTP requests.\n17. **Angular Universal**: A technology for server-side rendering of Angular applications to improve performance and SEO.\n18. **NgZone**: A service that provides an execution context for running Angular change detection.\n19. **Webpack**: A module bundler used by Angular CLI to bundle the application.\n20. **Angular Material**: A UI component library for Angular based on Material Design principles.\n21. **Pipes**: A way to transform data in the template (e.g., formatting dates or currency).\n22. **NgRx**: A state management library for Angular applications, inspired by Redux.\n23. **Animations**: The Angular package that provides support for animation in Angular applications.\n24. **Tree Shaking**: A technique to remove unused code from the final JavaScript bundle.\n25. **Angular Elements**: A package to create custom elements (web components) from Angular components.\n\n### Example Usage of Buzzwords in Code\n\n**Component:**\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<h1>{{ title }}</h1>',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'My Angular App';\n}\n```\n\n**Service with Dependency Injection:**\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  getData() {\n    return ['data1', 'data2', 'data3'];\n  }\n}\n```\n\n**Routing Module:**\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'about', component: AboutComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\n**Using HTTPClient:**\n\n```typescript\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any> {\n    return this.http.get('https://api.example.com/data');\n  }\n}\n```\n\n**Lazy Loading Module:**\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'feature', loadChildren: () => import('./feature/feature.module').then(m => m.FeatureModule) }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\nUnderstanding these buzzwords and concepts is crucial for effectively working with Angular and leveraging its full potential.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-13T16:38:37.384Z"},"updatedDate":{"$date":"2024-06-13T16:38:37.384Z"},"__v":0}
{"_id":{"$oid":"666bd232999837d176bd8cea"},"uniqueId":"663f4a5b-010c-4a05-b40e-d74b10e87143","linkedTopicUniqueId":"9be98392-2be9-49b8-85aa-2fe01ba70854","name":"What is ReactJS?","smartContent":{"content":"ReactJS is a JavaScript library for building user interfaces, primarily for single-page applications. It allows developers to create reusable UI components and manage the view layer of web applications efficiently.\n\nHere's a simple example to illustrate ReactJS usage:\n\n```javascript\n// Import React and ReactDOM libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Create a functional component\nconst App = () => {\n  return (\n    <div>\n      <h1>Hello, World!</h1>\n      <p>Welcome to ReactJS</p>\n    </div>\n  );\n};\n\n// Render the component to the DOM\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\nKey points:\n- `React` is used to create components.\n- `ReactDOM` is used to render components to the DOM.\n- Components can be functional or class-based.\n\nTo get started with a new React project, you can use `create-react-app`:\n\n```bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\nThis sets up a new React project with a development server. The default project structure will have an `App.js` file where you can start building your components.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:16:34.8Z"},"updatedDate":{"$date":"2024-06-14T05:16:34.8Z"},"__v":0}
{"_id":{"$oid":"666bd2a1999837d176bd8d10"},"uniqueId":"5b8f9c68-8a2f-471d-9bb7-9470f88d384d","linkedTopicUniqueId":"9be98392-2be9-49b8-85aa-2fe01ba70854","name":"commonly used commands in ReactJS","smartContent":{"content":"Here are some commonly used commands and scripts in ReactJS:\n\n### Setting Up a New React Project\n```bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n### Running the Development Server\n```bash\nnpm start\n```\n\n### Building the Project for Production\n```bash\nnpm run build\n```\n\n### Running Tests\n```bash\nnpm test\n```\n\n### Installing Dependencies\nTo install a new package:\n```bash\nnpm install <package-name>\n```\nFor example:\n```bash\nnpm install axios\n```\n\n### Removing Dependencies\nTo remove a package:\n```bash\nnpm uninstall <package-name>\n```\nFor example:\n```bash\nnpm uninstall axios\n```\n\n### Updating Dependencies\nTo update a package:\n```bash\nnpm update <package-name>\n```\nFor example:\n```bash\nnpm update axios\n```\n\n### Running ESLint\n```bash\nnpx eslint <file-or-directory>\n```\n\n### Running Prettier\n```bash\nnpx prettier --write <file-or-directory>\n```\n\n### Starting a React Project with TypeScript\n```bash\nnpx create-react-app my-app --template typescript\n```\n\n### Commonly Used NPM Scripts in `package.json`\n```json\n\"scripts\": {\n  \"start\": \"react-scripts start\",\n  \"build\": \"react-scripts build\",\n  \"test\": \"react-scripts test\",\n  \"eject\": \"react-scripts eject\",\n  \"lint\": \"eslint .\",\n  \"prettify\": \"prettier --write .\"\n}\n```\n\n### Example Commands Using `package.json` Scripts\nTo start the development server:\n```bash\nnpm run start\n```\n\nTo build the project:\n```bash\nnpm run build\n```\n\nTo run tests:\n```bash\nnpm run test\n```\n\nTo lint the code:\n```bash\nnpm run lint\n```\n\nTo format the code with Prettier:\n```bash\nnpm run prettify\n```\n\nThese commands and scripts cover most of the common tasks you'll encounter when developing with ReactJS.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:18:25.243Z"},"updatedDate":{"$date":"2024-06-14T05:18:25.243Z"},"__v":0}
{"_id":{"$oid":"666bd3d6999837d176bd9e5c"},"uniqueId":"35497f4f-cade-4594-87a5-6e4962c6f50a","linkedTopicUniqueId":"9be98392-2be9-49b8-85aa-2fe01ba70854","name":"version history of ReactJS with major changes","smartContent":{"content":"Here's a brief overview of the major versions of ReactJS and the key changes introduced in each:\n\n### React v0.3 (July 2013)\n- Initial public release.\n- Basic component model and rendering.\n\n### React v0.9 (May 2014)\n- Added support for mixins.\n- Improved performance and debugging.\n\n### React v0.12 (October 2014)\n- Introduced `React.createClass`.\n- Added `componentDidUpdate`.\n\n### React v0.13 (March 2015)\n- Introduced ES6 class components.\n- Deprecated `React.createClass`.\n\n### React v0.14 (October 2015)\n- Split into `react` and `react-dom` packages.\n- Introduced stateless functional components.\n\n### React v15.0 (April 2016)\n- Improved error messages.\n- Major changes in internal architecture.\n\n### React v15.5 (April 2017)\n- Deprecated `React.createClass` in favor of ES6 classes.\n- Moved PropTypes to a separate package `prop-types`.\n\n### React v16.0 (September 2017)\n- Introduced Fiber architecture for better rendering performance.\n- Added error boundaries.\n- Added `Fragments`, `Portals`, and `Async Rendering`.\n\n### React v16.3 (March 2018)\n- Introduced new lifecycle methods: `getDerivedStateFromProps` and `getSnapshotBeforeUpdate`.\n- Added context API with `React.createContext`.\n\n### React v16.6 (October 2018)\n- Introduced `React.memo` for memoizing functional components.\n- Added `React.lazy` and `Suspense` for code splitting and lazy loading.\n\n### React v16.8 (February 2019)\n- Introduced Hooks API (`useState`, `useEffect`, etc.) allowing functional components to use state and other features.\n\n### React v16.9 (August 2019)\n- Added `React.Profiler` for performance profiling.\n- Introduced `useReducer` and `useCallback` hooks.\n\n### React v16.10 (September 2019)\n- Added `act` utility for testing.\n\n### React v17.0 (October 2020)\n- No new features, but focused on making upgrades easier.\n- Improved support for gradual updates.\n\n### React v18.0 (March 2022)\n- Introduced concurrent rendering.\n- Added `Suspense` improvements.\n- Introduced automatic batching of updates.\n\n### React v18.2 (June 2022)\n- Minor updates and bug fixes.\n- Improved compatibility with the concurrent features.\n\nEach of these versions brought significant improvements and changes to the React library, making it more powerful and flexible for developers. The introduction of features like Hooks and concurrent rendering have been particularly impactful in modern React development.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["97f66e7c-9a1a-47f0-804a-10d06c4aa4c0"],"createdDate":{"$date":"2024-06-14T05:23:34.557Z"},"updatedDate":{"$date":"2024-07-03T19:34:06.409Z"},"__v":1}
{"_id":{"$oid":"666bd44f999837d176bd9e82"},"uniqueId":"2c6b85ae-3569-4a15-9a5d-4c7aa236aae9","linkedTopicUniqueId":"9be98392-2be9-49b8-85aa-2fe01ba70854","name":"buzzwords in ReactJS","smartContent":{"content":"Here are some key buzzwords and concepts commonly associated with ReactJS:\n\n### 1. **Components**\nReusable pieces of UI, the building blocks of React applications.\n\n### 2. **JSX**\nJavaScript XML, a syntax extension that allows writing HTML-like code in JavaScript.\n\n### 3. **Virtual DOM**\nA lightweight in-memory representation of the real DOM, enabling efficient updates and rendering.\n\n### 4. **Props**\nShort for properties, these are inputs passed to components to configure and display dynamic data.\n\n### 5. **State**\nAn object within a component that holds dynamic data and determines how the component behaves and renders.\n\n### 6. **Lifecycle Methods**\nMethods in class components that allow executing code at specific points in a component's lifecycle (e.g., `componentDidMount`, `componentDidUpdate`).\n\n### 7. **Hooks**\nFunctions that let you use state and other React features in functional components (e.g., `useState`, `useEffect`).\n\n### 8. **Context API**\nA way to pass data through the component tree without having to pass props down manually at every level.\n\n### 9. **Redux**\nA state management library often used with React for managing complex state across the application.\n\n### 10. **Reducer**\nA function used in `useReducer` hook or Redux to manage state transitions based on actions.\n\n### 11. **React Router**\nA library for handling routing in React applications, enabling navigation between different views or pages.\n\n### 12. **Higher-Order Components (HOCs)**\nFunctions that take a component and return a new component with additional props or behavior.\n\n### 13. **Render Props**\nA technique for sharing code between React components using a prop that is a function.\n\n### 14. **Suspense**\nA component that lets you wait for some code to load and declaratively specify a loading state.\n\n### 15. **Lazy Loading**\nA technique to load components only when they are needed, improving performance and reducing initial load time.\n\n### 16. **Contextual Component**\nComponents that get their behavior or appearance based on the context they are used in.\n\n### 17. **Babel**\nA JavaScript compiler that transforms JSX and ES6+ code into backwards-compatible JavaScript.\n\n### 18. **Webpack**\nA module bundler for JavaScript applications, often used in React projects to bundle assets and dependencies.\n\n### 19. **Fiber**\nThe reimplementation of React's core algorithm for rendering, improving performance and providing features like concurrent rendering.\n\n### 20. **Concurrent Mode**\nA set of new features in React that help applications stay responsive and gracefully adjust to the user's device capabilities and network speed.\n\n### 21. **Profiler**\nA tool for measuring the performance of React components to identify performance bottlenecks.\n\n### 22. **Error Boundaries**\nComponents that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.\n\n### 23. **Fragments**\nA way to group a list of children without adding extra nodes to the DOM.\n\n### 24. **Portal**\nA method to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\n### 25. **StrictMode**\nA tool for highlighting potential problems in an application by intentionally double-invoking certain methods and functions to identify unsafe or legacy practices.\n\nThese buzzwords represent core concepts, tools, and techniques in ReactJS, each contributing to the library's flexibility and power in building modern web applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["af08d032-da97-46ee-8c62-f035cf0d07c5"],"createdDate":{"$date":"2024-06-14T05:25:35.728Z"},"updatedDate":{"$date":"2024-07-03T19:35:34.779Z"},"__v":1}
{"_id":{"$oid":"666bd835999837d176bdcbff"},"uniqueId":"1b246314-5655-4f84-8102-c24796e93897","linkedTopicUniqueId":"88d45ec8-56d1-4edd-9d23-f3727d1a4cd9","name":"What is CSS?","smartContent":{"content":"CSS (Cascading Style Sheets) is a stylesheet language used for describing the presentation of a document written in HTML or XML. CSS defines how HTML elements should be displayed, enabling the separation of content and presentation.\n\nHere's a basic example:\n\n**HTML (index.html):**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Example</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is a paragraph.</p>\n</body>\n</html>\n```\n\n**CSS (styles.css):**\n```css\nbody {\n    background-color: #f0f0f0;\n    font-family: Arial, sans-serif;\n}\n\nh1 {\n    color: #333;\n    text-align: center;\n}\n\np {\n    color: #666;\n    font-size: 16px;\n}\n```","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:42:13.776Z"},"updatedDate":{"$date":"2024-06-14T05:42:13.776Z"},"__v":0}
{"_id":{"$oid":"666bd870999837d176bdcc19"},"uniqueId":"e8efb73e-57a8-4c39-b84d-0a2f66a16286","linkedTopicUniqueId":"88d45ec8-56d1-4edd-9d23-f3727d1a4cd9","name":"version history of CSS with major changes","smartContent":{"content":"Here's a brief overview of the CSS version history along with major changes:\n\n### CSS1 (1996)\n- **Introduction**: First official version.\n- **Features**:\n  - Basic style properties (fonts, colors, margins, borders, etc.).\n  - Simple selectors (element, class, ID).\n  - Box model.\n\n### CSS2 (1998)\n- **New Features**:\n  - Positioning (absolute, relative, fixed).\n  - Media types (print, screen).\n  - Expanded selectors (child, adjacent sibling).\n  - Table layout.\n  - Improved support for accessibility.\n\n### CSS2.1 (2011)\n- **Refinement**: CSS2.1 refined CSS2 by fixing errors, removing deprecated features, and aligning with actual browser implementations.\n- **New Features**:\n  - Improved handling of floats and overflow.\n  - Inline-block display.\n  - Min/max width and height properties.\n\n### CSS3 (Ongoing)\n- **Modularization**: CSS3 is divided into modules, allowing for faster and more manageable development.\n- **New Features**:\n  - Selectors Level 3: Attribute selectors, pseudo-classes (e.g., `:nth-child`, `:not`), pseudo-elements (e.g., `::before`, `::after`).\n  - Box model enhancements: Box-sizing, flexbox, grid.\n  - Color and background: RGBA, HSLA, gradients, multiple backgrounds.\n  - Fonts: @font-face rule, Web Fonts.\n  - Transitions and animations.\n  - Media queries for responsive design.\n  - Transforms (2D and 3D).\n  - Flexible Box Layout (Flexbox).\n  - Grid Layout.\n\n### CSS4 (Emerging)\n- **Ongoing Development**: CSS4 is not a single specification but a collection of modules being developed with new features.\n- **Potential New Features**:\n  - Selectors Level 4: Enhanced pseudo-classes (e.g., `:is()`, `:where()`, `:has()`).\n  - Improved media queries: Interaction features (e.g., pointer, hover).\n  - Container queries: Style based on the container's size, not the viewport.\n  - CSS Custom Properties (Variables).\n\n### Example Usage of Modern CSS Features\n\n**HTML (index.html):**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Hello, World!</h1>\n        <p>This is a paragraph with modern CSS features.</p>\n        <button>Click Me</button>\n    </div>\n</body>\n</html>\n```\n\n**CSS (styles.css):**\n```css\nbody {\n    background-color: #f0f0f0;\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.container {\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    text-align: center;\n}\n\nh1 {\n    color: #333;\n}\n\np {\n    color: #666;\n    font-size: 16px;\n}\n\n/* Flexbox example */\nbutton {\n    background-color: #007BFF;\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n```","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:43:12.83Z"},"updatedDate":{"$date":"2024-06-14T05:43:12.83Z"},"__v":0}
{"_id":{"$oid":"666bdb44999837d176bdcc33"},"uniqueId":"da649d1b-965a-4148-b409-68326a884576","linkedTopicUniqueId":"88d45ec8-56d1-4edd-9d23-f3727d1a4cd9","name":"buzzwords in CSS","smartContent":{"content":"Here are some common buzzwords and concepts in CSS that are often discussed in the web development community:\n\n### Layout\n- **Flexbox**: A layout model designed to provide a more efficient way to lay out, align, and distribute space among items in a container, even when their size is unknown or dynamic.\n- **Grid**: A powerful two-dimensional layout system that allows developers to create complex responsive web design layouts more easily and consistently across browsers.\n\n### Styling\n- **Variables (Custom Properties)**: CSS variables allow you to store values that can be reused throughout a document.\n- **Responsive Design**: Designing websites to work well on a variety of devices and screen sizes, often using media queries.\n- **CSS Resets/Normalize.css**: Techniques and libraries to ensure consistent styling across different browsers by resetting or normalizing default styles.\n\n### Animation and Effects\n- **Transitions**: CSS properties that allow you to change values smoothly (over a given duration).\n- **Transforms**: Functions to rotate, scale, skew, or translate elements.\n- **Keyframe Animations**: A way to animate elements over a sequence of steps using the `@keyframes` rule.\n- **Parallax Scrolling**: An effect where background content (i.e., an image) moves at a different speed than the foreground content while scrolling.\n\n### Modern Features\n- **Media Queries**: Techniques to apply CSS styles based on the device's characteristics, such as screen size, resolution, or orientation.\n- **Viewport Units (vh, vw, vmin, vmax)**: Units that are a percentage of the viewport's dimensions.\n- **CSS Grid**: A powerful layout system for creating complex, responsive grid-based layouts.\n\n### Performance and Optimization\n- **Critical CSS**: A technique for extracting the CSS for above-the-fold content and loading it inline to improve the initial page load performance.\n- **Lazy Loading**: A technique to delay loading of non-critical resources (like images) until they are needed.\n\n### Preprocessors and Frameworks\n- **Sass/SCSS**: A CSS preprocessor that adds features like variables, nested rules, and functions.\n- **Less**: Another preprocessor that extends CSS with dynamic behavior such as variables, mixins, and functions.\n- **PostCSS**: A tool for transforming CSS with JavaScript plugins.\n- **Tailwind CSS**: A utility-first CSS framework for rapidly building custom user interfaces.\n- **Bootstrap**: A popular front-end framework for developing responsive, mobile-first projects with CSS and JS components.\n\n### Example Usage of Some Buzzwords\n\n**HTML (index.html):**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Buzzwords Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Welcome to the CSS Buzzwords Example</h1>\n        </header>\n        <main>\n            <section class=\"hero\">\n                <h2>Hero Section</h2>\n            </section>\n            <section class=\"content\">\n                <p>This is a paragraph demonstrating various CSS buzzwords and features.</p>\n                <button>Click Me</button>\n            </section>\n        </main>\n    </div>\n</body>\n</html>\n```\n\n**CSS (styles.css):**\n```css\n:root {\n    --primary-color: #007BFF;\n    --secondary-color: #0056b3;\n    --font-stack: Arial, sans-serif;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: var(--font-stack);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f0f0;\n}\n\n.container {\n    width: 80%;\n    max-width: 1200px;\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    text-align: center;\n}\n\n/* Flexbox example */\nheader, main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n/* Grid example */\n.main {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    gap: 20px;\n}\n\n.hero {\n    background-color: var(--primary-color);\n    color: white;\n    padding: 20px;\n    border-radius: 8px;\n}\n\n/* Transitions and hover effects */\nbutton {\n    background-color: var(--primary-color);\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\nbutton:hover {\n    background-color: var(--secondary-color);\n}\n```","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:55:16.032Z"},"updatedDate":{"$date":"2024-06-14T05:55:16.032Z"},"__v":0}
{"_id":{"$oid":"666bdbd1999837d176bddc5f"},"uniqueId":"c82dff8c-e0b3-4f28-b48c-8f07b9f67b9e","linkedTopicUniqueId":"647ffccb-8260-4ed7-b63a-242c27f97e69","name":"What is HTML or HTML5?","smartContent":{"content":"HTML (HyperText Markup Language) is the standard markup language used to create and design documents on the web. HTML5 is the fifth and latest major version of HTML, providing new features and capabilities to enhance the performance and structure of web pages.\n\n### Basic HTML5 Structure\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HTML5 Example</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to HTML5</h1>\n    </header>\n    <nav>\n        <ul>\n            <li><a href=\"#section1\">Section 1</a></li>\n            <li><a href=\"#section2\">Section 2</a></li>\n        </ul>\n    </nav>\n    <main>\n        <section id=\"section1\">\n            <h2>Section 1</h2>\n            <p>This is the first section.</p>\n        </section>\n        <section id=\"section2\">\n            <h2>Section 2</h2>\n            <p>This is the second section.</p>\n        </section>\n    </main>\n    <footer>\n        <p>Footer content here.</p>\n    </footer>\n</body>\n</html>\n```\n\n### Key Features of HTML5\n\n- **New Semantic Elements**: `<header>`, `<footer>`, `<article>`, `<section>`, etc.\n- **Form Enhancements**: New input types like `email`, `date`, `number`, etc.\n- **Multimedia Support**: `<audio>`, `<video>`, `<canvas>`.\n- **APIs**: Geolocation, Web Storage, Web Workers, etc.\n\nHTML5 aims to improve the language with support for the latest multimedia while keeping it easily readable by humans and consistently understood by computers and devices (web browsers, parsers, etc.).","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T05:57:37.398Z"},"updatedDate":{"$date":"2024-06-14T05:57:37.398Z"},"__v":0}
{"_id":{"$oid":"666bdc77999837d176bddc79"},"uniqueId":"6a8fa583-e56a-4695-9170-fa02e1d12ee2","linkedTopicUniqueId":"647ffccb-8260-4ed7-b63a-242c27f97e69","name":"version history of HTML with major changes","smartContent":{"content":"Here's a brief version history of HTML along with the major changes introduced in each version:\n\n### HTML 1.0 (1991)\n- **Introduction**: The first version of HTML, created by Tim Berners-Lee.\n- **Features**: Basic structure with elements like `<title>`, `<h1>`, `<p>`, `<a>`, `<img>`, and `<form>`.\n\n### HTML 2.0 (1995)\n- **Standardization**: First standardized HTML version by the IETF.\n- **Features**: Included all elements and attributes of HTML 1.0, with some improvements and bug fixes.\n\n### HTML 3.2 (1997)\n- **W3C Standard**: Developed by the World Wide Web Consortium (W3C).\n- **Features**: Added support for tables (`<table>`), applets (`<applet>`), text flow around images (`<img align>`), and scripting with JavaScript.\n\n### HTML 4.01 (1999)\n- **Major Revision**: Significant update from HTML 3.2.\n- **Features**:\n  - **Strict, Transitional, and Frameset DOCTYPES**: Different document types for varied levels of backward compatibility.\n  - **Support for CSS**: Enhanced support for styling with Cascading Style Sheets.\n  - **Improved Accessibility**: Better support for internationalization and accessibility.\n  - **Deprecated Elements**: Gradual phasing out of presentation-related elements like `<font>` and `<center>`.\n\n### XHTML 1.0 (2000)\n- **XML-Based**: Reformulated HTML 4.01 in XML.\n- **Features**:\n  - **Stricter Syntax**: Enforced stricter coding practices (well-formed documents).\n  - **Three DOCTYPEs**: XHTML 1.0 Strict, Transitional, and Frameset.\n\n### HTML5 (2014)\n- **Modern Update**: Comprehensive revision to address modern web needs.\n- **Features**:\n  - **New Semantic Elements**: `<header>`, `<footer>`, `<article>`, `<section>`, `<nav>`.\n  - **Multimedia**: Native support for `<audio>`, `<video>`, and `<canvas>`.\n  - **Form Enhancements**: New input types like `email`, `date`, `number`, `url`, `range`, and new attributes like `placeholder` and `required`.\n  - **APIs**: Geolocation, Web Storage (localStorage and sessionStorage), Web Workers, WebSocket, and more.\n  - **Deprecated Elements**: Removed elements like `<font>`, `<center>`, `<big>`, `<basefont>`, `<strike>`.\n\n### HTML5.1 (2016)\n- **Incremental Update**: Enhancements and bug fixes to HTML5.\n- **Features**:\n  - **New Elements and Attributes**: `<picture>` element for responsive images, `<menuitem>` (though later removed).\n  - **APIs**: Further refinement and additions to existing APIs.\n\n### HTML5.2 (2017)\n- **Further Refinements**: Continued enhancements and standardization.\n- **Features**:\n  - **New Elements and Attributes**: Introduction of the `slot` element for Web Components, and other minor adjustments.\n  - **Security Improvements**: Better support for features like Content Security Policy (CSP).\n\n### HTML Living Standard\n- **Continuous Updates**: HTML has transitioned to a living standard maintained by WHATWG.\n- **Features**:\n  - **Ongoing Enhancements**: Continuous updates and improvements without version numbers.\n  - **Responsive Design**: Improved support for responsive and adaptive designs.\n  - **Modern Web Features**: Integration of new web technologies and APIs as they evolve.\n\nThis timeline highlights the major milestones and changes in HTML development, reflecting its evolution from a simple markup language to a comprehensive and robust web standard.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T06:00:23.777Z"},"updatedDate":{"$date":"2024-06-14T06:00:23.777Z"},"__v":0}
{"_id":{"$oid":"666bdd0d999837d176bddc93"},"uniqueId":"b5ea278d-3054-468c-9fe7-a5b31d0c2057","linkedTopicUniqueId":"647ffccb-8260-4ed7-b63a-242c27f97e69","name":"buzzwords in HTML","smartContent":{"content":"Here are some commonly used buzzwords and concepts related to HTML, especially HTML5:\n\n### Buzzwords in HTML\n\n1. **Responsive Design**:\n   - **Definition**: Designing web pages that adjust seamlessly to different screen sizes and devices.\n   - **Related HTML Elements**: `<meta name=\"viewport\">`, `<picture>`, `<source>`.\n\n2. **Semantic HTML**:\n   - **Definition**: Using HTML elements that convey meaning about the content they contain.\n   - **Related HTML Elements**: `<header>`, `<footer>`, `<article>`, `<section>`, `<nav>`, `<aside>`.\n\n3. **Accessibility (a11y)**:\n   - **Definition**: Designing web content that is usable by people with disabilities.\n   - **Related HTML Elements/Attributes**: `<a href=\"#maincontent\" class=\"skip-link\">`, `<button>`, `aria-` attributes.\n\n4. **Multimedia**:\n   - **Definition**: Integration of audio and video content in web pages.\n   - **Related HTML Elements**: `<audio>`, `<video>`, `<track>`.\n\n5. **Canvas**:\n   - **Definition**: An HTML element used for rendering graphics via scripting (usually JavaScript).\n   - **Related HTML Element**: `<canvas>`.\n\n6. **Web Components**:\n   - **Definition**: A suite of technologies allowing the creation of reusable custom elements.\n   - **Related HTML Elements/Technologies**: `<template>`, `<slot>`, Shadow DOM.\n\n7. **APIs**:\n   - **Definition**: Application Programming Interfaces available in HTML5 for various functionalities.\n   - **Examples**: Geolocation API, Web Storage API (localStorage, sessionStorage), Web Workers, WebSocket API.\n\n8. **Form Enhancements**:\n   - **Definition**: Improved form elements and attributes for better user input handling.\n   - **Related HTML Elements/Attributes**: `<input type=\"email\">`, `<input type=\"date\">`, `required`, `pattern`.\n\n9. **Microdata**:\n   - **Definition**: A way to nest metadata within existing content to improve machine readability.\n   - **Related HTML Attributes**: `itemscope`, `itemtype`, `itemprop`.\n\n10. **Polyfills**:\n    - **Definition**: Code that provides modern functionality on older browsers that do not natively support it.\n    - **Examples**: Scripts that add support for HTML5 elements and APIs in older browsers.\n\n11. **Progressive Enhancement**:\n    - **Definition**: Strategy of building web content to ensure it works on basic browsers and enhances on advanced browsers.\n    - **Related HTML Practices**: Using semantic elements and graceful degradation.\n\n12. **SVG (Scalable Vector Graphics)**:\n    - **Definition**: An XML-based format for vector graphics.\n    - **Related HTML Elements**: `<svg>`, `<path>`, `<circle>`, `<rect>`.\n\n13. **WebRTC (Web Real-Time Communication)**:\n    - **Definition**: A collection of technologies enabling real-time communication of audio, video, and data in web pages.\n    - **Related HTML Elements/Technologies**: `<video>`, `getUserMedia()`, `RTCPeerConnection`.\n\n14. **Progressive Web Apps (PWA)**:\n    - **Definition**: Web applications that use modern web capabilities to deliver an app-like experience.\n    - **Related HTML Features**: Service Workers, Web App Manifests, `<link rel=\"manifest\">`.\n\n15. **Service Workers**:\n    - **Definition**: A script that runs in the background and enables features like offline caching and push notifications.\n    - **Related Technologies**: `navigator.serviceWorker`, Cache API.\n\n16. **Shadow DOM**:\n    - **Definition**: A web standard that encapsulates the internal structure of a web component.\n    - **Related HTML Concepts**: `<template>`, `<slot>`, custom elements.\n\nThese buzzwords highlight some of the key concepts and technologies associated with modern HTML development.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T06:02:53.412Z"},"updatedDate":{"$date":"2024-06-14T06:02:53.412Z"},"__v":0}
{"_id":{"$oid":"666bdd60999837d176bddcb2"},"uniqueId":"31a78116-9a0c-4c05-b7e1-06fd9be0e4e5","linkedTopicUniqueId":"d203e3e9-7f7b-45f1-aff0-231d7b8951c0","name":"What is TypeScript?","smartContent":{"content":"TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It was developed and is maintained by Microsoft. TypeScript adds optional static types to JavaScript, which helps in catching errors early during development and makes the code more predictable and easier to understand, especially in larger codebases.\n\n### Key Features of TypeScript:\n\n1. **Static Typing**:\n   - Allows defining types for variables, function parameters, return types, and more.\n   - Helps in identifying type-related errors during development.\n\n2. **Enhanced IDE Support**:\n   - Provides better auto-completion, navigation, and refactoring capabilities in editors that support TypeScript.\n\n3. **Modern JavaScript Features**:\n   - Supports ECMAScript features (ES6 and beyond) before they are supported natively in browsers.\n\n4. **Interfaces and Classes**:\n   - Supports object-oriented programming concepts such as interfaces, classes, inheritance, and access modifiers.\n\n5. **Type Inference**:\n   - Infers types when they are not explicitly specified, reducing the need for explicit type annotations.\n\n6. **Compatibility**:\n   - TypeScript code can be compiled down to any version of JavaScript, making it compatible with all browsers and environments.\n\n7. **Tooling and Community**:\n   - Strong ecosystem with tools like TypeScript compiler (tsc), TypeScript Language Service, and support from major IDEs like Visual Studio Code.\n\n### Example of TypeScript Syntax:\n\n```typescript\n// Example of a TypeScript class\nclass Greeter {\n    greeting: string;\n\n    constructor(message: string) {\n        this.greeting = message;\n    }\n\n    greet() {\n        return \"Hello, \" + this.greeting;\n    }\n}\n\nlet greeter = new Greeter(\"world\");\nconsole.log(greeter.greet()); // Output: Hello, world\n```\n\nIn the example above:\n- `greeting: string;` specifies that `greeting` is of type `string`.\n- `constructor(message: string)` defines a constructor that takes a parameter of type `string`.\n- `greet()` method returns a string concatenation of `\"Hello, \"` and the `greeting`.\n\nTypeScript helps developers write more robust and maintainable JavaScript applications by leveraging the advantages of static typing while maintaining compatibility with existing JavaScript codebases.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["20cb5b8d-adb1-43c7-9b00-4ee77bcbd3f2"],"createdDate":{"$date":"2024-06-14T06:04:16.759Z"},"updatedDate":{"$date":"2024-07-03T05:20:51.143Z"},"__v":1}
{"_id":{"$oid":"666bddeb999837d176bddccc"},"uniqueId":"9bd8b57b-eb1f-4abb-b2ac-0c6073540f3d","linkedTopicUniqueId":"d203e3e9-7f7b-45f1-aff0-231d7b8951c0","name":"version history of TypeScript along with major changes","smartContent":{"content":"Here's a version history of TypeScript along with major changes introduced in each version:\n\n### TypeScript Version History\n\n1. **TypeScript 0.9 (June 2013)**\n   - **Features**:\n     - Introduction of generics.\n     - Improved type inference.\n     - Enums became const.\n     - Modules aligned with ECMAScript 6.\n\n2. **TypeScript 1.0 (April 2014)**\n   - **Features**:\n     - Stable release.\n     - Support for classes, modules, and interfaces.\n     - Definition files (`*.d.ts`) for external libraries.\n     - Improved tooling and IDE support.\n\n3. **TypeScript 1.4 (February 2015)**\n   - **Features**:\n     - Union types.\n     - Type aliases (`type` keyword).\n     - `let` and `const` keywords.\n     - Support for `--declaration` flag to generate declaration files.\n\n4. **TypeScript 1.6 (September 2015)**\n   - **Features**:\n     - ECMAScript 6 support (`--target es6`).\n     - Abstract classes and class expressions.\n     - React JSX support (`--jsx react`).\n\n5. **TypeScript 2.0 (September 2016)**\n   - **Features**:\n     - Non-nullable types (`strictNullChecks`).\n     - Control flow based type analysis.\n     - Simplified declaration file acquisition (`@types`).\n     - Readonly properties.\n\n6. **TypeScript 2.1 (December 2016)**\n   - **Features**:\n     - `keyof` operator.\n     - Async/await support for ES3/ES5 targets.\n     - Mapped types.\n     - Improved inference for literal types.\n\n7. **TypeScript 2.2 (February 2017)**\n   - **Features**:\n     - Mixin classes.\n     - Improved support for `this` in functions.\n     - Object type improvements (`--strictFunctionTypes`).\n\n8. **TypeScript 2.3 (April 2017)**\n   - **Features**:\n     - Default declarations for `npm` packages (`--declaration`).\n     - Strict parameter contravariance for callback types.\n     - Support for `--strict` flag to enable all strict type-checking options.\n\n9. **TypeScript 2.4 (June 2017)**\n   - **Features**:\n     - Dynamic import expressions.\n     - `--strictFunctionTypes` now defaults to `true`.\n     - String enums.\n\n10. **TypeScript 2.5 (August 2017)**\n    - **Features**:\n      - `--strict` null checks and `--strict` function types.\n      - `catch` clause variable type inference.\n      - Improved `import` inference from CommonJS modules.\n\n11. **TypeScript 2.6 (October 2017)**\n    - **Features**:\n      - Stricter checking for `--noImplicitAny`.\n      - `--strict` `propertyInitialization` flag.\n      - `import()` type import syntax.\n\n12. **TypeScript 2.7 (February 2018)**\n    - **Features**:\n      - `strict` `classInitialization` flag.\n      - `Set` and `Map` type improvements.\n      - Definite assignment assertions (`!` operator).\n\n13. **TypeScript 2.8 (March 2018)**\n    - **Features**:\n      - Conditional types.\n      - `readonly` array types.\n      - Improved `error` messages and tooling.\n\n14. **TypeScript 3.0 (July 2018)**\n    - **Features**:\n      - Project references.\n      - `unknown` type.\n      - Tuples in rest parameters and spread expressions.\n\n15. **TypeScript 3.1 (September 2018)**\n    - **Features**:\n      - `keyof` and lookup types improvements.\n      - `import.meta`.\n\n16. **TypeScript 3.2 (November 2018)**\n    - **Features**:\n      - `--strictBindCallApply` flag.\n      - Smarter object literal inference.\n      - Support for `BigInt`.\n\n17. **TypeScript 3.3 (February 2019)**\n    - **Features**:\n      - `--resolveJsonModule` flag.\n      - Faster `--watch` mode.\n      - `import()` type improvements.\n\n18. **TypeScript 3.4 (March 2019)**\n    - **Features**:\n      - Faster incremental builds (`--incremental` flag).\n      - `readonly` arrays and tuples.\n      - `const` assertions.\n\n19. **TypeScript 3.5 (May 2019)**\n    - **Features**:\n      - `omit` and `extract` mapped types.\n      - Improved `unknown` handling.\n      - `--allowUmdGlobalAccess` flag.\n\n20. **TypeScript 3.6 (August 2019)**\n    - **Features**:\n      - `--strictNullChecks` improvements.\n      - `readonly` modifiers on array spreads.\n      - Improved `.d.ts` emit.\n\n21. **TypeScript 3.7 (November 2019)**\n    - **Features**:\n      - Optional chaining (`?.`) and nullish coalescing (`??`) operators.\n      - Assertion functions.\n      - Better recursive type alias resolution.\n\n22. **TypeScript 3.8 (February 2020)**\n    - **Features**:\n      - `export * as ns` syntax.\n      - `import.meta` improvements.\n      - `--esModuleInterop` default.\n\n23. **TypeScript 4.0 (August 2020)**\n    - **Features**:\n      - Variadic tuple types.\n      - Labeled tuple elements.\n      - `unknown` on catch clauses.\n\n24. **TypeScript 4.1 (November 2020)**\n    - **Features**:\n      - Template literal types.\n      - Key remapping in mapped types.\n      - `--noUncheckedIndexedAccess` flag.\n\n25. **TypeScript 4.2 (February 2021)**\n    - **Features**:\n      - Leading/trailing separator support in tuple types.\n      - `strict` `PropertyInitialization` improvements.\n      - `--noImplicitOverride` flag.\n\n26. **TypeScript 4.3 (May 2021)**\n    - **Features**:\n      - `override` and `--noPropertyAccessFromIndexSignature` flags.\n      - `allow` `LabelsOnLabeledStatements` flag.\n      - Smart text selection in template string literals.\n\n27. **TypeScript 4.4 (August 2021)**\n    - **Features**:\n      - Control flow analysis for destructured variables.\n      - Improved `--useDefineForClassFields` handling.\n      - `--incremental` and `--watch` improvements.\n\n28. **TypeScript 4.5 (October 2021)**\n    - **Features**:\n      - `await` in `JSDoc` comments.\n      - `this` types in callbacks.\n      - Smarter type checking for default type arguments.\n\n29. **TypeScript 4.6 (December 2021)**\n    - **Features**:\n      - `disallow` `UncheckedIndexedAccess` flag.\n      - Improved `watch` mode for build systems.\n      - `JSDoc` support for enums.\n\n30. **TypeScript 4.7 (February 2022)**\n    - **Features**:\n      - Smarter type aliases for computed properties.\n      - Improved `--watch` mode performance.\n      - `import` type inference.\n\n31. **TypeScript 4.8 (May 2022)**\n    - **Features**:\n      - Performance improvements for `--watch` mode.\n      - Improved type errors and diagnostics.\n      - Experimental `@jsdoc2tsx/react` transform.\n\n32. **TypeScript 4.9 (July 2022)**\n    - **Features**:\n      - Improved diagnostics for `try`/`catch` blocks.\n      - `switch`/`case` improvements for `nullish` expressions.\n      - `--noImplicitOverrides` flag enhancements.\n\n33. **TypeScript 4.10 (September 2022)**\n    - **Features**:\n      - Improved `--noUncheckedIndexedAccess` flag handling.\n      - `private` fields in abstract classes.\n      - Extended support for `@jsdoc2tsx/react`.\n\n34. **TypeScript 4.11 (November 2022)**\n    - **Features**:\n      - Experimental support for `auto-ambient` modules.\n      - `node` library type improvements.\n      - Enhanced support for custom JSX transforms.\n\n35. **TypeScript 4.12 (January 2023)**\n    - **Features**:\n      - Support for conditional checks in indexed access types.\n      - Improved JSX auto-imports.\n      - Faster `--watch` mode startup.\n\n36. **TypeScript 4.13 (March 2023)**\n    - **Features**:\n      - Support for recursive declarations in `namespace` modules.\n      - Enhanced error reporting for `tuples`.\n      - Experimental `JsxFragment` support in JSX.\n\n37. **TypeScript 4.14 (May 2023)**\n    - **Features**:\n      - Improved inference for property accesses on literals.\n      - Support for accessing `private` fields from sub-classes.\n      - Better type propagation in `do` and `while` loops.\n\n38. **TypeScript 4.15 (July 2023)**\n    - **Features**:\n      - Support for conditional types in static members.\n      - Improved error","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["97f66e7c-9a1a-47f0-804a-10d06c4aa4c0"],"createdDate":{"$date":"2024-06-14T06:06:35.046Z"},"updatedDate":{"$date":"2024-07-03T05:20:24.411Z"},"__v":1}
{"_id":{"$oid":"666bde37999837d176bddce7"},"uniqueId":"019c9c9d-2a03-4a4b-99c5-24fa2c6a4549","linkedTopicUniqueId":"d203e3e9-7f7b-45f1-aff0-231d7b8951c0","name":"buzzwords in TypeScript","smartContent":{"content":"Here are some commonly used buzzwords and concepts related to TypeScript:\n\n1. **Static Typing**:\n   - Definition: Type annotations that are checked at compile-time to catch errors early.\n   - Example: `let name: string = \"John\";`\n\n2. **Type Inference**:\n   - Definition: TypeScript's ability to infer types based on initialization.\n   - Example: `let age = 30; // TypeScript infers 'age' as 'number'`\n\n3. **Interfaces**:\n   - Definition: Defines the structure of objects in TypeScript.\n   - Example: \n     ```typescript\n     interface Person {\n         name: string;\n         age: number;\n     }\n     ```\n\n4. **Generics**:\n   - Definition: Enables writing reusable code with type parameters.\n   - Example: \n     ```typescript\n     function identity<T>(arg: T): T {\n         return arg;\n     }\n     ```\n\n5. **Enums**:\n   - Definition: A way to define a set of named constants.\n   - Example: \n     ```typescript\n     enum Color {\n         Red,\n         Green,\n         Blue,\n     }\n     let myColor: Color = Color.Red;\n     ```\n\n6. **Union Types**:\n   - Definition: Allows a variable to have one of multiple types.\n   - Example: \n     ```typescript\n     let result: number | string;\n     result = 10; // Valid\n     result = \"Error\"; // Also valid\n     ```\n\n7. **Type Guards**:\n   - Definition: Techniques to narrow down the type of a variable within a conditional block.\n   - Example: \n     ```typescript\n     function printValue(value: number | string) {\n         if (typeof value === 'number') {\n             console.log(`Number: ${value}`);\n         } else {\n             console.log(`String: ${value}`);\n         }\n     }\n     ```\n\n8. **Intersection Types**:\n   - Definition: Combines multiple types into one.\n   - Example: \n     ```typescript\n     interface Printable {\n         print(): void;\n     }\n     interface Loggable {\n         log(): void;\n     }\n     type LoggableAndPrintable = Printable & Loggable;\n     ```\n\n9. **Decorators**:\n   - Definition: Provides a way to add metadata to class declarations and members.\n   - Example: \n     ```typescript\n     function logged(target: Function) {\n         console.log(`Class ${target.name} is instantiated.`);\n     }\n     @logged\n     class MyClass {\n         // Class definition\n     }\n     ```\n\n10. **Type Assertion**:\n    - Definition: Allows overriding TypeScript's inferred types.\n    - Example: \n      ```typescript\n      let value: any = \"Hello, TypeScript!\";\n      let length: number = (value as string).length;\n      ```\n\n11. **TypeScript Compiler (`tsc`)**:\n    - Definition: The TypeScript compiler that converts TypeScript code into JavaScript.\n    - Example usage: `tsc myfile.ts`\n\n12. **Module Resolution**:\n    - Definition: Strategies used by TypeScript to find and load modules.\n    - Example: `import { SomeModule } from './somemodule';`\n\nThese buzzwords highlight the key concepts and features of TypeScript that make it powerful for building scalable and maintainable JavaScript applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T06:07:51.516Z"},"updatedDate":{"$date":"2024-06-14T06:07:51.516Z"},"__v":0}
{"_id":{"$oid":"666bde9a999837d176bddd01"},"uniqueId":"5c7d67e0-66da-4af0-ba7f-9471e4624d82","linkedTopicUniqueId":"d203e3e9-7f7b-45f1-aff0-231d7b8951c0","name":"commonly used commands in TypeScript","smartContent":{"content":"Here are some commonly used commands and options when working with TypeScript:\n\n1. **Compile TypeScript file(s) (`tsc`)**:\n   - Compile one TypeScript file:\n     ```bash\n     tsc filename.ts\n     ```\n   - Compile all TypeScript files in a directory:\n     ```bash\n     tsc\n     ```\n   - Watch mode (automatically recompiles on file changes):\n     ```bash\n     tsc -w\n     ```\n\n2. **Project Initialization (`tsc --init`)**:\n   - Generates a `tsconfig.json` file with default settings:\n     ```bash\n     tsc --init\n     ```\n\n3. **Check TypeScript version (`tsc -v`)**:\n   - Displays the TypeScript compiler version:\n     ```bash\n     tsc -v\n     ```\n\n4. **Watch mode (`tsc -w`)**:\n   - Watches for changes in TypeScript files and recompiles automatically:\n     ```bash\n     tsc -w\n     ```\n\n5. **Compile with specific `tsconfig.json` (`tsc -p <tsconfig.json>`)**:\n   - Compile using a specific `tsconfig.json` file:\n     ```bash\n     tsc -p tsconfig.json\n     ```\n\n6. **Generate declaration files (`tsc --declaration`)**:\n   - Generates `.d.ts` declaration files:\n     ```bash\n     tsc --declaration\n     ```\n\n7. **Output directory (`tsc --outDir <directory>`)**:\n   - Specify the output directory for compiled JavaScript files:\n     ```bash\n     tsc --outDir dist\n     ```\n\n8. **No Emit (`tsc --noEmit`)**:\n   - Checks TypeScript code without generating JavaScript files:\n     ```bash\n     tsc --noEmit\n     ```\n\n9. **Strict Mode (`tsc --strict`)**:\n   - Enables all strict type-checking options:\n     ```bash\n     tsc --strict\n     ```\n\n10. **Help (`tsc --help`)**:\n    - Displays help information about TypeScript compiler options:\n      ```bash\n      tsc --help\n      ```\n\nThese commands and options are essential for compiling TypeScript code, managing TypeScript projects, and controlling various aspects of TypeScript compilation and type-checking.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T06:09:30.717Z"},"updatedDate":{"$date":"2024-06-14T06:09:30.717Z"},"__v":0}
{"_id":{"$oid":"666c11b4fcb741e34e8ab4ed"},"uniqueId":"340ac0fd-4f2c-44ce-8bbf-6557529d3cae","linkedTopicUniqueId":"6f9dfb47-9fea-4dff-b4bb-ddedfa82675e","name":"few popular libraries frequently used in Node.js","smartContent":{"content":"Here are a few popular libraries frequently used in Node.js:\n\n1. **Express.js**:\n   - A fast, unopinionated, minimalist web framework for Node.js.\n   - Simplifies the process of creating web applications and APIs.\n   - Provides robust routing, middleware support, and HTTP utility methods.\n   - **Installation**:\n     ```bash\n     npm install express\n     ```\n   - **Basic Usage**:\n     ```javascript\n     const express = require('express');\n     const app = express();\n     const port = 3000;\n\n     app.get('/', (req, res) => {\n       res.send('Hello World!');\n     });\n\n     app.listen(port, () => {\n       console.log(`Example app listening at http://localhost:${port}`);\n     });\n     ```\n\n2. **Lodash**:\n   - A modern JavaScript utility library delivering modularity, performance, and extras.\n   - Provides utility functions for common programming tasks like manipulating arrays, objects, strings, etc.\n   - **Installation**:\n     ```bash\n     npm install lodash\n     ```\n   - **Basic Usage**:\n     ```javascript\n     const _ = require('lodash');\n\n     const array = [1, 2, 3, 4];\n     console.log(_.reverse(array)); // [4, 3, 2, 1]\n     ```\n\n3. **Axios**:\n   - A promise-based HTTP client for the browser and Node.js.\n   - Makes HTTP requests from node.js and XMLHttpRequests from the browser.\n   - **Installation**:\n     ```bash\n     npm install axios\n     ```\n   - **Basic Usage**:\n     ```javascript\n     const axios = require('axios');\n\n     axios.get('https://jsonplaceholder.typicode.com/todos/1')\n       .then(response => {\n         console.log(response.data);\n       })\n       .catch(error => {\n         console.error('Error fetching data:', error);\n       });\n     ```\n\n4. **jsonwebtoken**:\n   - An implementation of JSON Web Tokens for authentication and information exchange.\n   - **Installation**:\n     ```bash\n     npm install jsonwebtoken\n     ```\n   - **Basic Usage**:\n     ```javascript\n     const jwt = require('jsonwebtoken');\n     const secretKey = 'your-256-bit-secret';\n\n     const token = jwt.sign({ userId: 123 }, secretKey, { expiresIn: '1h' });\n     console.log('Generated Token:', token);\n\n     try {\n       const decoded = jwt.verify(token, secretKey);\n       console.log('Decoded Token:', decoded);\n     } catch (err) {\n       console.error('Invalid Token:', err);\n     }\n     ```\n\n5. **Moment.js** (Note: It's now in maintenance mode and they suggest using alternatives like date-fns or Luxon):\n   - A library for parsing, validating, manipulating, and formatting dates.\n   - **Installation**:\n     ```bash\n     npm install moment\n     ```\n   - **Basic Usage**:\n     ```javascript\n     const moment = require('moment');\n\n     const now = moment();\n     console.log(now.format('YYYY-MM-DD HH:mm:ss'));\n     ```\n\n6. **dotenv**:\n   - Loads environment variables from a `.env` file into `process.env`.\n   - **Installation**:\n     ```bash\n     npm install dotenv\n     ```\n   - **Basic Usage**:\n     ```javascript\n     require('dotenv').config();\n\n     console.log(process.env.MY_ENV_VARIABLE);\n     ```\n\nThese libraries are essential for various tasks in Node.js development, ranging from web server creation and HTTP requests to date manipulation and environment variable management.\n\nSure, here are a few commonly used libraries in Node.js:\n\n1. **Express**: For building web applications and APIs.\n   ```javascript\n   const express = require('express');\n   ```\n\n2. **Mongoose**: MongoDB object modeling for Node.js.\n   ```javascript\n   const mongoose = require('mongoose');\n   ```\n\n3. **Axios**: Promise-based HTTP client for making HTTP requests.\n   ```javascript\n   const axios = require('axios');\n   ```\n\n4. **Socket.io**: Real-time bidirectional event-based communication.\n   ```javascript\n   const io = require('socket.io')(http);\n   ```\n\n5. **Lodash**: Utility library for working with arrays, objects, and functions.\n   ```javascript\n   const _ = require('lodash');\n   ```\n\n6. **Moment**: Date and time manipulation library.\n   ```javascript\n   const moment = require('moment');\n   ```\n\n7. **jsonwebtoken**: JSON Web Token implementation for Node.js.\n   ```javascript\n   const jwt = require('jsonwebtoken');\n   ```\n\n8. **Body-parser**: Middleware to parse request body.\n   ```javascript\n   const bodyParser = require('body-parser');\n   ```\n\n9. **Multer**: Middleware for handling multipart/form-data, especially for file uploads.\n   ```javascript\n   const multer = require('multer');\n   ```\n\n10. **Bcrypt**: Library for hashing passwords.\n    ```javascript\n    const bcrypt = require('bcrypt');\n    ```\n\nThese libraries are frequently used in Node.js applications for various purposes such as web development, database interaction, HTTP requests, real-time communication, and more.\n\nCertainly! Here are a few more commonly used libraries in Node.js:\n\n1. **Joi**: Object schema validation library.\n   ```javascript\n   const Joi = require('joi');\n   ```\n\n2. **Cors**: Middleware for enabling Cross-Origin Resource Sharing (CORS).\n   ```javascript\n   const cors = require('cors');\n   ```\n\n3. **dotenv**: Loads environment variables from a .env file into process.env.\n   ```javascript\n   require('dotenv').config();\n   ```\n\n4. **Request**: Simplified HTTP request client.\n   ```javascript\n   const request = require('request');\n   ```\n\n5. **Passport**: Authentication middleware for Node.js.\n   ```javascript\n   const passport = require('passport');\n   ```\n\n6. **Express-validator**: Middleware for validating and sanitizing input.\n   ```javascript\n   const { validationResult } = require('express-validator');\n   ```\n\n7. **Nodemailer**: Send emails from Node.js applications.\n   ```javascript\n   const nodemailer = require('nodemailer');\n   ```\n\n8. **Sequelize**: Promise-based ORM for Node.js, supporting multiple SQL databases.\n   ```javascript\n   const Sequelize = require('sequelize');\n   ```\n\n9. **Socket.io-client**: Client-side library for Socket.io.\n   ```javascript\n   const io = require('socket.io-client');\n   ```\n\n10. **Debug**: Utility to log debug messages.\n    ```javascript\n    const debug = require('debug')('app:debug');\n    ```\n\nThese libraries cover a wide range of functionalities such as validation, authentication, email handling, database ORM, debugging, and more, making them essential for building robust Node.js applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T09:47:32.641Z"},"updatedDate":{"$date":"2024-06-14T09:47:32.641Z"},"__v":0}
{"_id":{"$oid":"666c11ebfcb741e34e8ab519"},"uniqueId":"064ce28f-7c19-4da1-b678-2e3813c802c7","linkedTopicUniqueId":"9ef68582-de6c-4ab6-b50b-17a743d04f15","name":"What is mongoose?","smartContent":{"content":"Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It provides a schema-based solution to model your application data, allowing you to define the structure and types of the data within your MongoDB collections. Here are the key features and uses of Mongoose:\n\n1. **Schema Definition**: Mongoose allows you to define schemas for your data models. Schemas outline the structure of the documents within a MongoDB collection, including field types, default values, validation rules, and more.\n\n2. **Data Validation**: With Mongoose, you can enforce data validation rules directly within your schemas. This ensures that only valid data is saved to your MongoDB database.\n\n3. **Type Casting**: Mongoose automatically casts data to the appropriate types defined in the schema before storing it in the database.\n\n4. **Query Building**: Mongoose provides a rich query API that allows you to build complex queries using a fluent interface. You can chain query methods to filter, sort, limit, and modify the data you retrieve.\n\n5. **Middleware**: Mongoose supports middleware functions that can be executed at various stages of the lifecycle of a document (e.g., before saving, after removing). This is useful for implementing business logic, logging, and other operations.\n\n6. **Relationships and Population**: Mongoose supports document references and population, allowing you to establish relationships between different collections and fetch related data in a single query.\n\n7. **Plugins**: Mongoose supports plugins that can add custom behavior to your schemas and models. There are many community-contributed plugins available for various functionalities.\n\n8. **Built-in Support for Promises**: Mongoose queries return thenables, which can be used with promises and async/await syntax, making it easier to handle asynchronous operations.\n\n### Example Usage\n\nHere is a basic example to illustrate how Mongoose is used:\n\n```javascript\nconst mongoose = require('mongoose');\n\nasync function main() {\n  await mongoose.connect('mongodb://127.0.0.1:27017/test');\n\n  // Define a schema\n  const kittySchema = new mongoose.Schema({\n    name: String\n  });\n\n  // Compile the schema into a model\n  const Kitten = mongoose.model('Kitten', kittySchema);\n\n  // Create a document\n  const silence = new Kitten({ name: 'Silence' });\n\n  // Save the document to the database\n  await silence.save();\n\n  // Find documents\n  const kittens = await Kitten.find();\n  console.log(kittens);\n}\n\nmain().catch(err => console.log(err));\n```\n\nFor more detailed information, you can visit the [official Mongoose documentation](https://mongoosejs.com/docs/)【6†source】【7†source】【8†source】【9†source】.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T09:48:27.665Z"},"updatedDate":{"$date":"2024-06-14T09:48:27.665Z"},"__v":0}
{"_id":{"$oid":"666c1240fcb741e34e8ab537"},"uniqueId":"85e7ddce-0fb0-4ef7-b878-62f62a443cad","linkedTopicUniqueId":"9ef68582-de6c-4ab6-b50b-17a743d04f15","name":"Mongoose documentation","smartContent":{"content":"For comprehensive Mongoose documentation, you can refer to the official Mongoose documentation [here](https://mongoosejs.com/docs/)【6†source】【9†source】. Below is a brief overview to help you get started:\n\n### Getting Started with Mongoose\n1. **Installation**:\n   ```bash\n   npm install mongoose --save\n   ```\n\n2. **Basic Usage**:\n   ```javascript\n   const mongoose = require('mongoose');\n\n   async function main() {\n     await mongoose.connect('mongodb://127.0.0.1:27017/test');\n   }\n\n   main().catch(err => console.log(err));\n   ```\n\n### Defining a Schema and Model\n1. **Schema Definition**:\n   ```javascript\n   const kittySchema = new mongoose.Schema({\n     name: String\n   });\n   ```\n\n2. **Model Compilation**:\n   ```javascript\n   const Kitten = mongoose.model('Kitten', kittySchema);\n   ```\n\n3. **Creating and Saving a Document**:\n   ```javascript\n   const silence = new Kitten({ name: 'Silence' });\n   await silence.save();\n   ```\n\n4. **Querying**:\n   ```javascript\n   const kittens = await Kitten.find();\n   console.log(kittens);\n   ```\n\n### Connecting to MongoDB\n- **Event Listeners for Connections**:\n   ```javascript\n   mongoose.connection.on('connected', () => console.log('connected'));\n   mongoose.connection.on('disconnected', () => console.log('disconnected'));\n   mongoose.connection.on('reconnected', () => console.log('reconnected'));\n\n   mongoose.connect('mongodb://127.0.0.1:27017/mongoose_test');\n   ```\n\n### Querying and CRUD Operations\n1. **Finding Documents**:\n   ```javascript\n   const person = await Person.findOne({ 'name.last': 'Ghost' }, 'name occupation');\n   console.log('%s %s is a %s.', person.name.first, person.name.last, person.occupation);\n   ```\n\n2. **Updating Documents**:\n   ```javascript\n   await Person.updateOne({ name: 'Old Name' }, { name: 'New Name' });\n   ```\n\n3. **Deleting Documents**:\n   ```javascript\n   await Person.deleteOne({ name: 'Name to Delete' });\n   ```\n\nFor more detailed information and advanced usage, including working with schemas, validations, middleware, and population, refer to the [Mongoose guides](https://mongoosejs.com/docs/guides.html) and the [API documentation](https://mongoosejs.com/docs/api.html).","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T09:49:52.402Z"},"updatedDate":{"$date":"2024-06-14T09:49:52.402Z"},"__v":0}
{"_id":{"$oid":"666c17fbfcb741e34e8ad0a9"},"uniqueId":"8d5735a2-1da2-4eca-9df0-abc57663d7e4","linkedTopicUniqueId":"9ef68582-de6c-4ab6-b50b-17a743d04f15","name":"buzzwords in mongoose","smartContent":{"content":"Sure, here are some key buzzwords and concepts frequently associated with Mongoose:\n\n1. **Schema**: Defines the structure of the documents within a collection.\n  ```javascript\n  const mongoose = require('mongoose');\n  const Schema = mongoose.Schema;\n\n  const userSchema = new Schema({\n    name: String,\n    email: String,\n    password: String\n  });\n  ```\n\n2. **Model**: Provides an interface to the database for creating, querying, updating, and deleting records.\n  ```javascript\n  const User = mongoose.model('User', userSchema);\n  ```\n\n3. **Document**: An instance of a model representing a single record in the database.\n  ```javascript\n  const newUser = new User({ name: 'John', email: 'john@example.com', password: 'password123' });\n  ```\n\n4. **Query**: An object that allows for the construction and execution of database queries.\n  ```javascript\n  User.find({ name: 'John' }, (err, users) => {\n    if (err) console.error(err);\n    console.log(users);\n  });\n  ```\n\n5. **Middleware**: Functions that run at specific stages in the lifecycle of a model (e.g., pre-save, post-save).\n  ```javascript\n  userSchema.pre('save', function(next) {\n    // do something before saving\n    next();\n  });\n  ```\n\n6. **Population**: The process of automatically replacing specific paths in a document with documents from other collections.\n  ```javascript\n  userSchema.virtual('posts', {\n    ref: 'Post',\n    localField: '_id',\n    foreignField: 'author'\n  });\n  ```\n\n7. **Validation**: Schema-based validation of documents.\n  ```javascript\n  const userSchema = new Schema({\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true }\n  });\n  ```\n\n8. **Indexing**: Creating indexes on fields to improve query performance.\n  ```javascript\n  userSchema.index({ email: 1 });\n  ```\n\n9. **Aggregation**: A framework for performing advanced data processing and analysis on MongoDB collections.\n  ```javascript\n  User.aggregate([\n    { $match: { age: { $gt: 18 } } },\n    { $group: { _id: '$country', total: { $sum: 1 } } }\n  ]);\n  ```\n\n10. **Discriminator**: A way to create sub-models from a base model, useful for schema inheritance.\n   ```javascript\n   const options = { discriminatorKey: 'kind' };\n\n   const eventSchema = new Schema({ name: String }, options);\n   const Event = mongoose.model('Event', eventSchema);\n\n   const ClickedLinkEvent = Event.discriminator('ClickedLink', new Schema({ url: String }));\n   ```\n\nThese concepts are integral to working effectively with Mongoose and MongoDB, helping to manage and manipulate data efficiently.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:14:19.615Z"},"updatedDate":{"$date":"2024-06-14T10:14:19.615Z"},"__v":0}
{"_id":{"$oid":"666c1a86fcb741e34e8ad0c9"},"uniqueId":"5ca160af-c461-4890-bbde-41f447121c6d","linkedTopicUniqueId":"9ef68582-de6c-4ab6-b50b-17a743d04f15","name":"commands related to mongoose","smartContent":{"content":"Here are some commonly used commands and methods in Mongoose:\n\n1. **Connecting to MongoDB**:\n   ```javascript\n   const mongoose = require('mongoose');\n   \n   mongoose.connect('mongodb://localhost:27017/mydatabase', {\n     useNewUrlParser: true,\n     useUnifiedTopology: true\n   }).then(() => console.log('Connected to MongoDB'))\n     .catch(err => console.error('Connection error', err));\n   ```\n\n2. **Defining a Schema**:\n   ```javascript\n   const Schema = mongoose.Schema;\n   \n   const userSchema = new Schema({\n     name: { type: String, required: true },\n     email: { type: String, required: true, unique: true },\n     password: { type: String, required: true }\n   });\n   ```\n\n3. **Creating a Model**:\n   ```javascript\n   const User = mongoose.model('User', userSchema);\n   ```\n\n4. **Creating a Document**:\n   ```javascript\n   const newUser = new User({ name: 'John', email: 'john@example.com', password: 'password123' });\n   newUser.save().then(user => console.log(user)).catch(err => console.error(err));\n   ```\n\n5. **Finding Documents**:\n   ```javascript\n   User.find({ name: 'John' }).then(users => console.log(users)).catch(err => console.error(err));\n   ```\n\n6. **Finding a Single Document**:\n   ```javascript\n   User.findOne({ email: 'john@example.com' }).then(user => console.log(user)).catch(err => console.error(err));\n   ```\n\n7. **Finding by ID**:\n   ```javascript\n   User.findById('60d0fe4f5311236168a109ca').then(user => console.log(user)).catch(err => console.error(err));\n   ```\n\n8. **Updating a Document**:\n   ```javascript\n   User.updateOne({ email: 'john@example.com' }, { name: 'John Doe' }).then(result => console.log(result)).catch(err => console.error(err));\n   ```\n\n9. **Updating a Document by ID**:\n   ```javascript\n   User.findByIdAndUpdate('60d0fe4f5311236168a109ca', { name: 'John Doe' }, { new: true })\n     .then(user => console.log(user))\n     .catch(err => console.error(err));\n   ```\n\n10. **Deleting a Document**:\n    ```javascript\n    User.deleteOne({ email: 'john@example.com' }).then(result => console.log(result)).catch(err => console.error(err));\n    ```\n\n11. **Deleting a Document by ID**:\n    ```javascript\n    User.findByIdAndDelete('60d0fe4f5311236168a109ca').then(result => console.log(result)).catch(err => console.error(err));\n    ```\n\n12. **Creating an Index**:\n    ```javascript\n    userSchema.index({ email: 1 });\n    ```\n\n13. **Populating References**:\n    ```javascript\n    User.findOne({ email: 'john@example.com' }).populate('posts').then(user => console.log(user)).catch(err => console.error(err));\n    ```\n\n14. **Using Middleware (Pre-save Hook)**:\n    ```javascript\n    userSchema.pre('save', function(next) {\n      if (this.isModified('password')) {\n        this.password = hashPassword(this.password); // Assume hashPassword is a function that hashes the password\n      }\n      next();\n    });\n    ```\n\n15. **Aggregation**:\n    ```javascript\n    User.aggregate([\n      { $match: { age: { $gt: 18 } } },\n      { $group: { _id: '$country', total: { $sum: 1 } } }\n    ]).then(result => console.log(result)).catch(err => console.error(err));\n    ```\n\nThese commands cover a wide range of Mongoose functionalities, including connecting to the database, defining schemas, creating and manipulating documents, and using advanced features like middleware and aggregation.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:25:10.035Z"},"updatedDate":{"$date":"2024-06-14T10:25:10.035Z"},"__v":0}
{"_id":{"$oid":"666c1b88fcb741e34e8ad104"},"uniqueId":"7e037fc9-109c-4c5f-918b-949dff44c54f","linkedTopicUniqueId":"cb4ce74e-ecb9-45af-a33f-6c7dc7a0a999","name":"What is Express.js","smartContent":{"content":"Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It simplifies the process of building server-side applications, offering various tools and utilities for handling HTTP requests, routing, middleware, and more.\n\n### Key Features of Express.js\n\n1. **Routing**:\n   ```javascript\n   const express = require('express');\n   const app = express();\n\n   app.get('/', (req, res) => {\n     res.send('Hello World!');\n   });\n\n   app.post('/submit', (req, res) => {\n     res.send('Form submitted');\n   });\n\n   app.listen(3000, () => {\n     console.log('Server is running on port 3000');\n   });\n   ```\n\n2. **Middleware**:\n   Middleware functions are functions that have access to the request object (`req`), the response object (`res`), and the next middleware function in the application’s request-response cycle.\n   ```javascript\n   app.use((req, res, next) => {\n     console.log('Time:', Date.now());\n     next();\n   });\n\n   app.use(express.json()); // Built-in middleware for parsing JSON\n   ```\n\n3. **Static Files**:\n   Serve static files such as images, CSS, and JavaScript files.\n   ```javascript\n   app.use(express.static('public'));\n   ```\n\n4. **Template Engines**:\n   Use template engines to generate HTML dynamically.\n   ```javascript\n   app.set('view engine', 'pug');\n\n   app.get('/hello', (req, res) => {\n     res.render('index', { title: 'Hey', message: 'Hello there!' });\n   });\n   ```\n\n5. **Error Handling**:\n   Custom error handling middleware.\n   ```javascript\n   app.use((err, req, res, next) => {\n     console.error(err.stack);\n     res.status(500).send('Something broke!');\n   });\n   ```\n\n6. **Routing Parameters and Query Strings**:\n   Access route parameters and query strings.\n   ```javascript\n   app.get('/users/:userId', (req, res) => {\n     res.send(`User ID: ${req.params.userId}`);\n   });\n\n   app.get('/search', (req, res) => {\n     res.send(`Search query: ${req.query.q}`);\n   });\n   ```\n\n### Example of a Basic Express Application\n\n```javascript\nconst express = require('express');\nconst app = express();\n\n// Middleware to parse JSON bodies\napp.use(express.json());\n\n// Define a route\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\n// Define another route with parameters\napp.get('/users/:userId', (req, res) => {\n  const userId = req.params.userId;\n  res.send(`User ID: ${userId}`);\n});\n\n// Handle POST request\napp.post('/users', (req, res) => {\n  const user = req.body;\n  res.send(`User ${user.name} added!`);\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n### Why Use Express.js?\n\n1. **Simplicity**: Easy to set up and use.\n2. **Flexibility**: Can be used for single-page, multi-page, and hybrid web applications.\n3. **Middleware Support**: A wide range of middleware available to extend the functionality.\n4. **Performance**: Minimalistic and performant.\n5. **Community and Ecosystem**: Large community support and a vast ecosystem of plugins and tools.\n\nExpress.js is widely used in the Node.js ecosystem for building efficient and scalable web applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:29:28.91Z"},"updatedDate":{"$date":"2024-06-14T10:29:28.91Z"},"__v":0}
{"_id":{"$oid":"666c1c27fcb741e34e8ad122"},"uniqueId":"8cb8fed8-296b-4c9c-bf7c-edd4eb163a4a","linkedTopicUniqueId":"cb4ce74e-ecb9-45af-a33f-6c7dc7a0a999","name":"commonly used commands in Express.js","smartContent":{"content":"Here are some commonly used commands and methods in Express.js:\n\n1. **Setting up an Express application**:\n   ```javascript\n   const express = require('express');\n   const app = express();\n   const port = 3000;\n\n   app.listen(port, () => {\n     console.log(`Server is running on http://localhost:${port}`);\n   });\n   ```\n\n2. **Defining Routes**:\n   ```javascript\n   // GET request\n   app.get('/', (req, res) => {\n     res.send('Hello, World!');\n   });\n\n   // POST request\n   app.post('/submit', (req, res) => {\n     res.send('Form Submitted');\n   });\n\n   // PUT request\n   app.put('/update/:id', (req, res) => {\n     res.send(`Update item with id ${req.params.id}`);\n   });\n\n   // DELETE request\n   app.delete('/delete/:id', (req, res) => {\n     res.send(`Delete item with id ${req.params.id}`);\n   });\n   ```\n\n3. **Middleware**:\n   ```javascript\n   // Built-in middleware to parse JSON bodies\n   app.use(express.json());\n\n   // Custom middleware\n   app.use((req, res, next) => {\n     console.log(`Request Method: ${req.method}, Request URL: ${req.url}`);\n     next();\n   });\n   ```\n\n4. **Serving Static Files**:\n   ```javascript\n   app.use(express.static('public'));\n   ```\n\n5. **Handling Form Data**:\n   ```javascript\n   const bodyParser = require('body-parser');\n   app.use(bodyParser.urlencoded({ extended: true }));\n   ```\n\n6. **Routing with Express Router**:\n   ```javascript\n   const router = express.Router();\n\n   router.get('/users', (req, res) => {\n     res.send('List of users');\n   });\n\n   router.post('/users', (req, res) => {\n     res.send('Create a new user');\n   });\n\n   app.use('/api', router);\n   ```\n\n7. **Setting up Template Engines**:\n   ```javascript\n   app.set('view engine', 'ejs');\n\n   app.get('/profile', (req, res) => {\n     res.render('profile', { name: 'John Doe' });\n   });\n   ```\n\n8. **Error Handling Middleware**:\n   ```javascript\n   app.use((err, req, res, next) => {\n     console.error(err.stack);\n     res.status(500).send('Something broke!');\n   });\n   ```\n\n9. **Redirects**:\n   ```javascript\n   app.get('/old-route', (req, res) => {\n     res.redirect('/new-route');\n   });\n   ```\n\n10. **Sending JSON Responses**:\n    ```javascript\n    app.get('/data', (req, res) => {\n      res.json({ name: 'John Doe', age: 30 });\n    });\n    ```\n\n11. **Setting HTTP Headers**:\n    ```javascript\n    app.get('/set-header', (req, res) => {\n      res.set('Content-Type', 'text/plain');\n      res.send('Header set');\n    });\n    ```\n\n12. **Handling File Uploads**:\n    ```javascript\n    const multer = require('multer');\n    const upload = multer({ dest: 'uploads/' });\n\n    app.post('/upload', upload.single('file'), (req, res) => {\n      res.send('File uploaded successfully');\n    });\n    ```\n\nThese commands cover the essential functionalities of Express.js, such as routing, middleware, handling requests and responses, serving static files, and error handling.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:32:07.3Z"},"updatedDate":{"$date":"2024-06-14T10:32:07.3Z"},"__v":0}
{"_id":{"$oid":"666c1c81fcb741e34e8ad140"},"uniqueId":"e66e2b0d-7a57-4da6-b3e6-93a7648b3ae0","linkedTopicUniqueId":"cb4ce74e-ecb9-45af-a33f-6c7dc7a0a999","name":"version history of Express.js with major changes","smartContent":{"content":"Here is a brief overview of the version history of Express.js along with major changes introduced in each version:\n\n1. **Express 1.x**:\n   - Initial release.\n   - Basic routing and middleware support.\n   - Introduction of basic features for handling HTTP requests and responses.\n\n2. **Express 2.x**:\n   - Added support for `app.configure()` for environment-specific configuration.\n   - Introduction of `app.locals` and `res.locals` for view data.\n\n3. **Express 3.x**:\n   - Enhanced routing with `app.route()` and `express.Router()`.\n   - Support for better error handling with error middleware.\n   - Deprecation of `app.configure()`.\n\n4. **Express 4.x (2014)**:\n   - Middleware functions extracted into separate modules (`body-parser`, `cookie-parser`, `session`, etc.).\n   - Introduction of `Router` instances for better modularity.\n   - Removal of the built-in middleware, requiring explicit installation.\n   - Enhanced error handling and routing capabilities.\n   - Full separation from Connect middleware.\n\n5. **Express 5.x (Alpha)**:\n   - As of my last update, Express 5.x is still in alpha and not officially released.\n   - Major updates include support for Promises and async/await in route handlers and middleware.\n   - Improvements in router and routing logic.\n   - Improved error handling with more standardized error responses.\n\n### Key Changes and Features by Version\n\n#### Express 4.x\n- **Middleware Changes**: Core middleware was moved to separate modules.\n  ```javascript\n  const bodyParser = require('body-parser');\n  app.use(bodyParser.json());\n  ```\n- **Router Improvements**: More robust and modular routing with `express.Router()`.\n  ```javascript\n  const router = express.Router();\n  router.get('/', (req, res) => res.send('Hello World!'));\n  app.use('/api', router);\n  ```\n\n#### Express 5.x (Alpha)\n- **Async/Await Support**: Native support for async functions in route handlers and middleware.\n  ```javascript\n  app.get('/async-route', async (req, res) => {\n    const data = await someAsyncFunction();\n    res.send(data);\n  });\n  ```\n- **Promise-Based Error Handling**: Improved error handling capabilities.\n  ```javascript\n  app.use(async (err, req, res, next) => {\n    console.error(err);\n    res.status(500).send('Something went wrong!');\n  });\n  ```\n\n#### Notable Deprecated Features\n- **`app.configure()`**: Removed in Express 4.x. Environment-specific configuration should use `process.env`.\n  ```javascript\n  if (process.env.NODE_ENV === 'development') {\n    // Development-specific settings\n  }\n  ```\n\n### How to Upgrade\n- **From 3.x to 4.x**:\n  - Install separate middleware modules.\n  - Refactor routing to use `express.Router()`.\n- **From 4.x to 5.x (when stable)**:\n  - Refactor to use async/await if leveraging Promises.\n  - Update middleware and error handling to comply with new standards.\n\n### Example Upgrade from 3.x to 4.x\nBefore (3.x):\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.configure(function(){\n  app.use(express.bodyParser());\n  app.use(app.router);\n});\n\napp.get('/', function(req, res) {\n  res.send('Hello World');\n});\n\napp.listen(3000);\n```\n\nAfter (4.x):\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\nExpress.js has evolved significantly from its initial versions, improving modularity, error handling, and support for modern JavaScript features. Each version has focused on making the framework more robust, flexible, and easy to use.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:33:37.977Z"},"updatedDate":{"$date":"2024-06-14T10:33:37.977Z"},"__v":0}
{"_id":{"$oid":"666c1cf5fcb741e34e8ad15e"},"uniqueId":"20036ccc-1944-403c-a815-061bdb33e7c0","linkedTopicUniqueId":"cb4ce74e-ecb9-45af-a33f-6c7dc7a0a999","name":"buzzwords in Express.js","smartContent":{"content":"Sure! Here are some commonly used buzzwords and concepts associated with Express.js:\n\n1. **Middleware**: Functions that execute during the lifecycle of a request to the server, enabling you to modify the request and response objects, end the request-response cycle, and call the next middleware in the stack.\n   ```javascript\n   app.use((req, res, next) => {\n     console.log('Middleware function');\n     next();\n   });\n   ```\n\n2. **Routing**: Mechanism for handling different HTTP methods and URL patterns, directing incoming requests to the appropriate handler.\n   ```javascript\n   app.get('/users', (req, res) => {\n     res.send('Get users');\n   });\n   ```\n\n3. **Router**: A mini-express application capable only of performing middleware and routing functions, which makes it perfect for organizing routes.\n   ```javascript\n   const router = express.Router();\n   router.get('/users', (req, res) => {\n     res.send('User list');\n   });\n   app.use('/api', router);\n   ```\n\n4. **Static Files**: Serving static assets like HTML, CSS, JavaScript, and images.\n   ```javascript\n   app.use(express.static('public'));\n   ```\n\n5. **Template Engines**: Render dynamic content on the web by combining templates with data.\n   ```javascript\n   app.set('view engine', 'ejs');\n   ```\n\n6. **Error Handling**: Middleware to handle errors in the application.\n   ```javascript\n   app.use((err, req, res, next) => {\n     console.error(err.stack);\n     res.status(500).send('Something broke!');\n   });\n   ```\n\n7. **Request Object (`req`)**: Represents the HTTP request and contains properties for the request query string, parameters, body, HTTP headers, and more.\n   ```javascript\n   app.get('/user/:id', (req, res) => {\n     res.send(`User ID: ${req.params.id}`);\n   });\n   ```\n\n8. **Response Object (`res`)**: Represents the HTTP response that an Express app sends when it gets an HTTP request.\n   ```javascript\n   app.get('/user/:id', (req, res) => {\n     res.send(`User ID: ${req.params.id}`);\n   });\n   ```\n\n9. **Body Parser**: Middleware to parse the body of incoming requests, making it available under `req.body`.\n   ```javascript\n   const bodyParser = require('body-parser');\n   app.use(bodyParser.json());\n   ```\n\n10. **App Settings**: Configurable properties that determine how the application behaves.\n    ```javascript\n    app.set('port', 3000);\n    ```\n\n11. **Environment Variables**: Variables that change the behavior of the app depending on the environment (development, production, etc.).\n    ```javascript\n    if (process.env.NODE_ENV === 'development') {\n      // Development settings\n    }\n    ```\n\n12. **CORS (Cross-Origin Resource Sharing)**: Middleware to allow or restrict requested resources on a web server depending on where the HTTP request was initiated.\n    ```javascript\n    const cors = require('cors');\n    app.use(cors());\n    ```\n\n13. **Session Management**: Techniques and middleware for managing user sessions.\n    ```javascript\n    const session = require('express-session');\n    app.use(session({\n      secret: 'your-secret-key',\n      resave: false,\n      saveUninitialized: true\n    }));\n    ```\n\n14. **Logging**: Middleware for logging HTTP requests and responses.\n    ```javascript\n    const morgan = require('morgan');\n    app.use(morgan('combined'));\n    ```\n\n15. **API**: Application Programming Interface; Express is often used to build RESTful APIs.\n    ```javascript\n    app.get('/api/users', (req, res) => {\n      res.json([{ id: 1, name: 'John' }]);\n    });\n    ```\n\nThese buzzwords are fundamental concepts and features in Express.js, which facilitate building and managing web applications and APIs efficiently.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T10:35:33.839Z"},"updatedDate":{"$date":"2024-06-14T10:35:33.839Z"},"__v":0}
{"_id":{"$oid":"666c42d4b774496aabf074ff"},"uniqueId":"f54fedee-9112-43d9-983d-c34f56965d5f","linkedTopicUniqueId":"5e798240-7d07-4dd6-988e-7f2cc8c58feb","name":"what is spring framework?","smartContent":{"content":"The Spring Framework is a comprehensive, open-source framework for building enterprise-level applications in Java. It provides a wide range of functionalities and tools to simplify the development process, making it easier to create robust, scalable, and maintainable applications. Here are some key features and concepts of the Spring Framework:\n\n1. **Inversion of Control (IoC)**:\n   - Uses dependency injection to manage the components of an application.\n   - Promotes loose coupling by removing the need for components to directly instantiate their dependencies.\n   ```java\n   @Service\n   public class MyService {\n       private final MyRepository repository;\n\n       @Autowired\n       public MyService(MyRepository repository) {\n           this.repository = repository;\n       }\n   }\n   ```\n\n2. **Aspect-Oriented Programming (AOP)**:\n   - Supports separating cross-cutting concerns (like logging, security, and transaction management) from the application's business logic.\n   ```java\n   @Aspect\n   public class LoggingAspect {\n       @Before(\"execution(* com.example.service.*.*(..))\")\n       public void logBefore(JoinPoint joinPoint) {\n           System.out.println(\"Method called: \" + joinPoint.getSignature().getName());\n       }\n   }\n   ```\n\n3. **Spring MVC**:\n   - A powerful and flexible framework for building web applications and RESTful services.\n   - Uses a model-view-controller (MVC) architecture.\n   ```java\n   @Controller\n   public class MyController {\n       @GetMapping(\"/hello\")\n       public String hello(Model model) {\n           model.addAttribute(\"message\", \"Hello, World!\");\n           return \"hello\";\n       }\n   }\n   ```\n\n4. **Spring Data**:\n   - Simplifies data access and persistence with various database technologies (e.g., relational databases, NoSQL databases).\n   - Provides repositories with built-in CRUD operations.\n   ```java\n   public interface UserRepository extends JpaRepository<User, Long> {\n       List<User> findByLastName(String lastName);\n   }\n   ```\n\n5. **Spring Boot**:\n   - A project within the Spring ecosystem that simplifies the setup and development of new Spring applications.\n   - Provides out-of-the-box configurations and embedded servers.\n   ```java\n   @SpringBootApplication\n   public class Application {\n       public static void main(String[] args) {\n           SpringApplication.run(Application.class, args);\n       }\n   }\n   ```\n\n6. **Spring Security**:\n   - A comprehensive security framework for authentication, authorization, and protection against common security threats.\n   ```java\n   @Configuration\n   @EnableWebSecurity\n   public class SecurityConfig extends WebSecurityConfigurerAdapter {\n       @Override\n       protected void configure(HttpSecurity http) throws Exception {\n           http\n               .authorizeRequests()\n               .antMatchers(\"/public/**\").permitAll()\n               .anyRequest().authenticated()\n               .and()\n               .formLogin().loginPage(\"/login\").permitAll();\n       }\n   }\n   ```\n\n7. **Spring Cloud**:\n   - Provides tools for building distributed systems and microservices.\n   - Integrates with various cloud platforms and supports service discovery, configuration management, and more.\n   ```java\n   @EnableEurekaClient\n   @SpringBootApplication\n   public class Application {\n       public static void main(String[] args) {\n           SpringApplication.run(Application.class, args);\n       }\n   }\n   ```\n\n8. **Transaction Management**:\n   - Simplifies transaction management with annotations.\n   ```java\n   @Service\n   public class MyService {\n       @Transactional\n       public void performTransaction() {\n           // business logic here\n       }\n   }\n   ```\n\nThe Spring Framework is known for its extensive documentation, active community, and a wide array of projects that extend its core capabilities, making it a popular choice for Java developers.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T13:17:08.782Z"},"updatedDate":{"$date":"2024-06-14T13:17:08.782Z"},"__v":0}
{"_id":{"$oid":"666c4398b774496aabf075c1"},"uniqueId":"48899d20-9108-4a52-86a0-84ced7342d6e","linkedTopicUniqueId":"5e798240-7d07-4dd6-988e-7f2cc8c58feb","name":"commonly used commands in spring framework","smartContent":{"content":"Here are some commonly used commands and annotations in the Spring Framework:\n\n### Core Annotations and Commands\n\n1. **@Component**: Marks a Java class as a bean.\n   ```java\n   @Component\n   public class MyComponent {\n       // code here\n   }\n   ```\n\n2. **@Service**: A specialized version of @Component, used for service layer classes.\n   ```java\n   @Service\n   public class MyService {\n       // service code here\n   }\n   ```\n\n3. **@Repository**: A specialized version of @Component, used for DAO (Data Access Object) classes.\n   ```java\n   @Repository\n   public class MyRepository {\n       // data access code here\n   }\n   ```\n\n4. **@Controller**: Marks a class as a Spring MVC controller.\n   ```java\n   @Controller\n   public class MyController {\n       // controller code here\n   }\n   ```\n\n5. **@RestController**: A combination of @Controller and @ResponseBody, used for RESTful web services.\n   ```java\n   @RestController\n   public class MyRestController {\n       @GetMapping(\"/hello\")\n       public String hello() {\n           return \"Hello, World!\";\n       }\n   }\n   ```\n\n6. **@Autowired**: Automatically injects dependencies.\n   ```java\n   @Service\n   public class MyService {\n       @Autowired\n       private MyRepository repository;\n   }\n   ```\n\n7. **@Qualifier**: Specifies which bean to inject when there are multiple beans of the same type.\n   ```java\n   @Service\n   public class MyService {\n       @Autowired\n       @Qualifier(\"mySpecificBean\")\n       private MyRepository repository;\n   }\n   ```\n\n8. **@Value**: Injects values from properties files.\n   ```java\n   @Component\n   public class MyComponent {\n       @Value(\"${my.property}\")\n       private String myProperty;\n   }\n   ```\n\n9. **@Configuration**: Indicates that a class declares one or more @Bean methods.\n   ```java\n   @Configuration\n   public class MyConfig {\n       @Bean\n       public MyBean myBean() {\n           return new MyBean();\n       }\n   }\n   ```\n\n10. **@Bean**: Marks a method as a bean producer.\n    ```java\n    @Bean\n    public MyBean myBean() {\n        return new MyBean();\n    }\n    ```\n\n11. **@PropertySource**: Specifies the location of properties files.\n    ```java\n    @Configuration\n    @PropertySource(\"classpath:application.properties\")\n    public class MyConfig {\n        // configuration code here\n    }\n    ```\n\n### Spring Boot Specific Annotations\n\n1. **@SpringBootApplication**: A combination of @Configuration, @EnableAutoConfiguration, and @ComponentScan.\n   ```java\n   @SpringBootApplication\n   public class Application {\n       public static void main(String[] args) {\n           SpringApplication.run(Application.class, args);\n       }\n   }\n   ```\n\n2. **application.properties**: Commonly used properties file for configuration.\n   ```properties\n   server.port=8080\n   spring.datasource.url=jdbc:mysql://localhost:3306/mydb\n   spring.datasource.username=root\n   spring.datasource.password=password\n   ```\n\n3. **SpringApplication.run()**: Bootstraps a Spring application from the main method.\n   ```java\n   SpringApplication.run(Application.class, args);\n   ```\n\n### Spring Data JPA\n\n1. **@Entity**: Marks a class as a JPA entity.\n   ```java\n   @Entity\n   public class User {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n       private String name;\n       // getters and setters\n   }\n   ```\n\n2. **@Repository**: Indicates that a class is a repository.\n   ```java\n   @Repository\n   public interface UserRepository extends JpaRepository<User, Long> {\n       List<User> findByName(String name);\n   }\n   ```\n\n### Spring Security\n\n1. **@EnableWebSecurity**: Enables Spring Security’s web security support.\n   ```java\n   @Configuration\n   @EnableWebSecurity\n   public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n       @Override\n       protected void configure(HttpSecurity http) throws Exception {\n           http\n               .authorizeRequests()\n               .anyRequest().authenticated()\n               .and()\n               .formLogin().permitAll();\n       }\n   }\n   ```\n\n2. **UserDetailsService**: Custom implementation for loading user-specific data.\n   ```java\n   @Service\n   public class MyUserDetailsService implements UserDetailsService {\n       @Override\n       public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n           // load user from database\n       }\n   }\n   ```\n\n### Transaction Management\n\n1. **@Transactional**: Marks a method or class as transactional.\n   ```java\n   @Service\n   public class MyService {\n       @Transactional\n       public void performTransaction() {\n           // transactional code here\n       }\n   }\n   ```\n\n### Scheduling\n\n1. **@EnableScheduling**: Enables Spring’s scheduled task execution capability.\n   ```java\n   @Configuration\n   @EnableScheduling\n   public class SchedulingConfig {\n       // scheduling configuration\n   }\n   ```\n\n2. **@Scheduled**: Schedules a method to be executed at fixed intervals.\n   ```java\n   @Component\n   public class ScheduledTasks {\n       @Scheduled(fixedRate = 5000)\n       public void reportCurrentTime() {\n           System.out.println(\"The time is now \" + new Date());\n       }\n   }\n   ```\n\nThese commands and annotations are essential for working with the Spring Framework, providing a powerful set of tools for building enterprise-grade applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T13:20:24.103Z"},"updatedDate":{"$date":"2024-06-14T13:20:24.103Z"},"__v":0}
{"_id":{"$oid":"666c441fb774496aabf07683"},"uniqueId":"c7e0afea-a000-4752-bc99-9f9fe5cadd0c","linkedTopicUniqueId":"5e798240-7d07-4dd6-988e-7f2cc8c58feb","name":"version history of spring framework with major changes","smartContent":{"content":"The Spring Framework has undergone significant evolution since its inception, with each major release introducing new features, enhancements, and improvements. Here's an overview of the version history with major changes:\n\n### Spring Framework 1.x (2004)\n- **Initial Release**: Provided a comprehensive programming and configuration model.\n- **Key Features**:\n  - Inversion of Control (IoC) container.\n  - Aspect-Oriented Programming (AOP) framework.\n  - Simple JDBC and ORM integration.\n  - Basic support for MVC and web applications.\n\n### Spring Framework 2.x (2006)\n- **Major Enhancements**:\n  - Introduction of the XML-based configuration.\n  - Improved AOP capabilities.\n  - New Spring Web Flow for defining web application flows.\n  - Enhanced support for annotations.\n  - Improved ORM support, including JPA.\n\n### Spring Framework 3.x (2009)\n- **Major Enhancements**:\n  - Java 5+ features, such as generics and annotations, became a requirement.\n  - Introduction of Java-based configuration with `@Configuration` and `@Bean`.\n  - RESTful web services support.\n  - Comprehensive support for Spring Expression Language (SpEL).\n  - Enhanced integration with modern Java EE standards (JPA 2.0, JSF 2.0).\n\n### Spring Framework 4.x (2013)\n- **Major Enhancements**:\n  - Full compatibility with Java 8, including lambdas and `java.time` package.\n  - Introduction of WebSocket support.\n  - Asynchronous task execution and scheduling improvements.\n  - Groovy and dynamic language support.\n  - Enhanced testing support, including mock objects and test context framework.\n  - New `spring-webmvc` module for simplified web development.\n\n### Spring Framework 5.x (2017)\n- **Major Enhancements**:\n  - Full support for Java 8, 9, 10, and 11.\n  - Reactive programming model introduced with Spring WebFlux.\n  - Support for Kotlin language.\n  - Functional web framework.\n  - Enhanced support for cloud-native development.\n  - Improved integration with modern libraries and frameworks (e.g., Reactor, Netty).\n\n### Spring Framework 6.x (Upcoming in 2022-2023)\n- **Major Enhancements**:\n  - Baseline for Java 17 (or higher).\n  - Support for virtual threads (Project Loom).\n  - GraalVM native image support.\n  - A focus on modern deployment scenarios including Kubernetes and serverless.\n  - New and updated support for reactive programming and microservices architecture.\n\n### Key Changes and Features by Version\n\n#### Spring 2.x\n- **XML Configuration Enhancements**: Easier bean configuration.\n- **Improved AOP**: More robust support for aspect-oriented programming.\n- **New Modules**: Spring Web Flow, Spring Security.\n\n#### Spring 3.x\n- **Java-Based Configuration**: Shift from XML to Java annotations.\n- **REST Support**: First-class support for RESTful services.\n- **SpEL**: Spring Expression Language for dynamic bean definitions.\n\n#### Spring 4.x\n- **Java 8 Features**: Lambda expressions, `java.time`.\n- **WebSocket Support**: Real-time communication capabilities.\n- **Groovy Support**: Dynamic language support.\n- **Testing Enhancements**: Better integration with modern testing frameworks.\n\n#### Spring 5.x\n- **Reactive Programming**: Spring WebFlux for reactive web applications.\n- **Kotlin Support**: Full support for Kotlin.\n- **Functional Endpoints**: Functional style for web and router configurations.\n- **Cloud-Native**: Enhanced support for cloud deployments.\n\n### Example Configuration Changes\n\n#### Spring 2.x (XML Configuration)\n```xml\n<bean id=\"myBean\" class=\"com.example.MyBean\">\n    <property name=\"name\" value=\"example\"/>\n</bean>\n```\n\n#### Spring 3.x (Java Configuration)\n```java\n@Configuration\npublic class AppConfig {\n    @Bean\n    public MyBean myBean() {\n        return new MyBean(\"example\");\n    }\n}\n```\n\n#### Spring 4.x (Java 8 Features)\n```java\n@Bean\npublic Supplier<MyBean> myBeanSupplier() {\n    return () -> new MyBean(\"example\");\n}\n```\n\n#### Spring 5.x (Reactive Programming)\n```java\n@Bean\npublic RouterFunction<ServerResponse> route() {\n    return RouterFunctions.route(RequestPredicates.GET(\"/hello\"),\n        request -> ServerResponse.ok().body(BodyInserters.fromValue(\"Hello, world!\")));\n}\n```\n\nEach major version of the Spring Framework has built on its predecessors, adding new features and improving existing ones to keep up with the evolving landscape of enterprise Java development.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T13:22:39.92Z"},"updatedDate":{"$date":"2024-06-14T13:22:39.92Z"},"__v":0}
{"_id":{"$oid":"666c4471b774496aabf07745"},"uniqueId":"59398a4a-14bb-4bf3-95e7-68ac5b0da894","linkedTopicUniqueId":"5e798240-7d07-4dd6-988e-7f2cc8c58feb","name":"buzzwords in spring framework","smartContent":{"content":"Certainly! Here are some buzzwords and key concepts associated with the Spring Framework:\n\n1. **Dependency Injection (DI)**:\n   - Inversion of Control (IoC) container manages object dependencies.\n   - **Example**: `@Autowired`, `@Inject`\n\n2. **Aspect-Oriented Programming (AOP)**:\n   - Separates cross-cutting concerns from business logic.\n   - **Example**: `@Aspect`, Advice, Pointcut\n\n3. **Spring Boot**:\n   - Simplifies setup and development of Spring applications.\n   - **Example**: Auto-configuration, Embedded servers, `@SpringBootApplication`\n\n4. **Spring MVC**:\n   - Model-View-Controller architecture for building web applications.\n   - **Example**: `@Controller`, `@RequestMapping`, `@RequestParam`\n\n5. **Spring Data**:\n   - Simplifies database access and persistence in Spring applications.\n   - **Example**: Repositories (`JpaRepository`, `MongoRepository`), Query Methods\n\n6. **Spring Security**:\n   - Provides authentication, authorization, and protection against common security threats.\n   - **Example**: `@EnableWebSecurity`, `@Secured`, `@PreAuthorize`\n\n7. **Spring Cloud**:\n   - Provides tools for building and deploying cloud-native applications.\n   - **Example**: Service Discovery (Eureka), Configuration Management (Config Server), Circuit Breaker (Hystrix)\n\n8. **RESTful Web Services**:\n   - Supports building RESTful APIs in Spring applications.\n   - **Example**: `@RestController`, `@GetMapping`, `@PostMapping`\n\n9. **Transactional Management**:\n   - Manages transactions in Spring applications.\n   - **Example**: `@Transactional`, `@EnableTransactionManagement`\n\n10. **Spring Integration**:\n    - Provides support for enterprise integration patterns.\n    - **Example**: Messaging (`@MessagingGateway`, `@ServiceActivator`), Integration Flows\n\n11. **Spring Testing**:\n    - Provides support for testing Spring applications.\n    - **Example**: `@RunWith(SpringRunner.class)`, `@SpringBootTest`, Mocking (`@MockBean`, `@MockitoJUnitRunner`)\n\n12. **Spring Batch**:\n    - Framework for batch processing within Spring applications.\n    - **Example**: Jobs, Steps, ItemReader, ItemProcessor, ItemWriter\n\n13. **Spring WebFlux**:\n    - Reactive programming support in Spring for non-blocking applications.\n    - **Example**: `@RestController`, `@GetMapping`, `Flux`, `Mono`\n\n14. **Spring Profiles**:\n    - Allows defining different configurations for different environments.\n    - **Example**: `@Profile`, `application-{profile}.properties`\n\n15. **Spring Initializr**:\n    - Web-based tool for generating a starter Spring Boot project.\n    - **Example**: [start.spring.io](https://start.spring.io/)\n\nThese buzzwords encapsulate the key features and capabilities of the Spring Framework, making it a versatile and powerful platform for developing enterprise Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T13:24:01.749Z"},"updatedDate":{"$date":"2024-06-14T13:24:01.749Z"},"__v":0}
{"_id":{"$oid":"666c4634b774496aabf07807"},"uniqueId":"6e317b6b-e1b6-4916-84b0-d59d6d5b0505","linkedTopicUniqueId":"5e798240-7d07-4dd6-988e-7f2cc8c58feb","name":"annotations in spring framework","smartContent":{"content":"Certainly! Here are some core annotations commonly used in the Spring Framework:\n\n1. **@Component**:\n   - Indicates that a class is a Spring component.\n   - **Example**:\n     ```java\n     @Component\n     public class MyComponent {\n         // component code here\n     }\n     ```\n\n2. **@Repository**:\n   - Specialization of @Component, used for DAO classes.\n   - **Example**:\n     ```java\n     @Repository\n     public class MyRepository {\n         // repository code here\n     }\n     ```\n\n3. **@Service**:\n   - Specialization of @Component, used for service layer classes.\n   - **Example**:\n     ```java\n     @Service\n     public class MyService {\n         // service code here\n     }\n     ```\n\n4. **@Controller**:\n   - Marks a class as a Spring MVC controller.\n   - **Example**:\n     ```java\n     @Controller\n     public class MyController {\n         // controller code here\n     }\n     ```\n\n5. **@RestController**:\n   - Combination of @Controller and @ResponseBody, used for RESTful controllers.\n   - **Example**:\n     ```java\n     @RestController\n     public class MyRestController {\n         @GetMapping(\"/hello\")\n         public String hello() {\n             return \"Hello, World!\";\n         }\n     }\n     ```\n\n6. **@Autowired**:\n   - Injects dependencies automatically.\n   - **Example**:\n     ```java\n     @Service\n     public class MyService {\n         @Autowired\n         private MyRepository repository;\n     }\n     ```\n\n7. **@Qualifier**:\n   - Used with @Autowired to specify which bean to inject when multiple beans of the same type are present.\n   - **Example**:\n     ```java\n     @Service\n     public class MyService {\n         @Autowired\n         @Qualifier(\"specificBean\")\n         private MyInterface bean;\n     }\n     ```\n\n8. **@Value**:\n   - Injects values from properties files into fields.\n   - **Example**:\n     ```java\n     @Component\n     public class MyComponent {\n         @Value(\"${my.property}\")\n         private String myProperty;\n     }\n     ```\n\n9. **@Configuration**:\n   - Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime.\n   - **Example**:\n     ```java\n     @Configuration\n     public class AppConfig {\n         @Bean\n         public MyBean myBean() {\n             return new MyBean();\n         }\n     }\n     ```\n\n10. **@Primary**:\n    - Indicates that a bean should be given preference when multiple beans of the same type are candidates for autowiring.\n    - **Example**:\n      ```java\n      @Component\n      @Primary\n      public class PrimaryBean implements MyInterface {\n          // bean implementation\n      }\n      ```\n\n11. **@Scope**:\n    - Specifies the scope of a bean (singleton, prototype, etc.).\n    - **Example**:\n      ```java\n      @Component\n      @Scope(\"prototype\")\n      public class PrototypeBean {\n          // bean implementation\n      }\n      ```\n\n12. **@PostConstruct** and **@PreDestroy**:\n    - @PostConstruct is used on a method that needs to be executed after dependency injection is done to perform any initialization. @PreDestroy is used on methods as a callback notification to signal that the instance is in the process of being removed by the container.\n    - **Example**:\n      ```java\n      @Component\n      public class MyComponent {\n          @PostConstruct\n          public void init() {\n              // initialization logic\n          }\n\n          @PreDestroy\n          public void cleanup() {\n              // cleanup logic\n          }\n      }\n      ```\n\nThese annotations play a crucial role in configuring and managing beans, dependencies, and aspects within the Spring Framework, enhancing productivity and flexibility in application development.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-14T13:31:32.18Z"},"updatedDate":{"$date":"2024-06-14T13:38:53.199Z"},"__v":0}
{"_id":{"$oid":"666d2b11d9acd1e7a889b17f"},"uniqueId":"cf9b22c9-82bd-4afd-97e4-27a655bd1bd8","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Interview Preparation Plan","smartContent":{"content":"# Interview Preparation Plan\n\n## Step 1: Introduction About Myself (Candidate)\n\n## Step 2: Last Company and Project\n\n## Step 3: Previous All Companies and Projects\n\n## Step 4: Tech Stack Consolidated\n\n## Step 5: My expectations from next job opportunity\n\n## Step 6: My values and preferred working style\n\n\n\n## Step 5: Update Details in Job Portal\n- Resume\n- Company\n- Projects\n- Last CTC\n- Expected CTC\n\n## Step 6: Deep Dive into Each Topic of Tech Stack\n- Concept\n- Installation/Configuration\n- Related Programs for Use Cases\n- Concepts and implementation\n  - Concepts and code with Java, Java 8, JavaScript, ReactJS, Python, Typescript\n  - Design patterns - Core Java, J2EE, Microservices\n  - System Design\n  - Team Lead\n  - Algorithms\n  - Unit testing, Integration testing\n  - Deployment\n\n## Step 7: Give Interviews\n- Collect Questions\n- Take Direction from Lastly Asked Interview Questions\n\n## Step 8: Review","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T05:48:01.115Z"},"updatedDate":{"$date":"2024-06-15T05:48:01.115Z"},"__v":0}
{"_id":{"$oid":"666d2bc0d9acd1e7a889b1a3"},"uniqueId":"d104faf7-cad6-4c97-91ac-17e25afbb903","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"How to introduce yourself","smartContent":{"content":"<p>Introducing oneself in an interview is a critical moment to make a positive first impression. It's an opportunity to present a concise narrative of one's professional journey, highlighting experiences and skills that are relevant to the position being sought. A well-crafted introduction should include a brief mention of one's current role, key accomplishments, and a glimpse into future aspirations that align with the company's goals. It's essential to tailor this introduction to the job at hand, showcasing how one's unique background makes them the ideal candidate for the role. For instance, starting with a statement like, \"I am a dedicated professional with a proven track record in [industry/field], and I am excited about the opportunity to bring my [specific skills] to [company name] to contribute to [specific company goal or project].\" This approach not only conveys enthusiasm for the position but also demonstrates an understanding of the company's objectives and how one's skills can be of service.</p><p>During a self-introduction in an interview, it's crucial to avoid common pitfalls that can undermine one's first impression. One should steer clear of delving too deeply into personal life, as the focus should be on professional qualifications and experiences relevant to the job. Being unprepared or uncertain about what to say can come across as a lack of confidence or interest, so it's important to prepare and practice one's introduction beforehand. Tailoring the introduction to the specific job and company shows that one has done their homework and understands the role they are applying for. Avoiding a generic introduction by highlighting unique skills and experiences can help set one apart from other candidates. Additionally, speaking negatively about former employers or colleagues, being overly boastful, or using inappropriate language are all behaviors that should be avoided. Keeping the introduction concise, relevant, and professional will help make a strong and positive first impression.</p><p>Overcoming nervousness during a self-introduction in an interview can be achieved through a combination of preparation and mental strategies. Researching the organization and industry thoroughly can alleviate anxiety by making you feel prepared for questions about the company and its field. Practicing your introduction and potential interview questions with a friend or mentor can build confidence in your delivery. On the day of the interview, ensure you know the route and arrive early to avoid the stress of being late. Engaging in a light physical activity, like a walk before the interview, can help calm your nerves. Remember to breathe deeply and maintain a positive mindset; smiling can also help reduce stress and project confidence. Lastly, remember that it's normal to feel nervous, and it can even be a sign that you care about the opportunity. With these strategies, you can turn nervous energy into a dynamic presentation of your professional self.</p><p>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T05:50:56.408Z"},"updatedDate":{"$date":"2024-06-15T05:50:56.408Z"},"__v":0}
{"_id":{"$oid":"666d2c62d9acd1e7a889b1bd"},"uniqueId":"645a8a5a-a1e9-4dd7-9be1-f1ae3064288c","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Learning path for your interview preparation","smartContent":{"content":"Based on your introduction, I suggest the following learning path for your interview preparation:\n\n**Week 1-4: Core Concepts and Fundamentals**\n\n* Review and practice core data structures and algorithms, focusing on Java and related technologies.\n* Use resources like Coding Ninja, Codecademy, and CodePath to learn and practice coding concepts.\n\n**Week 5-8: In-Depth Practice**\n\n* Practice a variety of coding questions across all topics, using resources like Grind 75 and CodePath's Technical Interview Prep course.\n* Focus on high-priority topics and practice questions that are commonly asked in coding interviews.\n\n**Week 9-12: Specialized Knowledge and Soft Skills**\n\n* Review and practice specialized knowledge related to your experience, such as AWS services, containerization, and orchestration with Docker and Kubernetes.\n* Focus on developing soft skills, such as writing test cases, migrating project codebases, and working as a Team Lead.\n* Prepare to answer behavioral questions and demonstrate your ability to work in a team and lead projects.\n\n**Additional Tips**\n\n* Use a combination of breadth-first and depth-first preparation strategies to ensure you cover all topics and practice a variety of questions.\n* Set aside dedicated time for practice and review, aiming for at least 11 hours a week.\n* Utilize online resources, such as GitHub repositories and Reddit forums, to access a wide range of study materials and connect with others preparing for coding interviews.\n* Consider taking courses or tutorials that focus on technical interview practice, such as those offered by Codecademy and CodePath.\n\nBy following this learning path, you can ensure a comprehensive preparation for your coding interviews, covering both technical skills and soft skills.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T05:53:38.496Z"},"updatedDate":{"$date":"2024-06-15T05:53:38.496Z"},"__v":0}
{"_id":{"$oid":"666d460ed9acd1e7a889d9fc"},"uniqueId":"8059ac84-51f3-42bb-9992-91bbb680163e","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"detailed roadmap for refining your resume","smartContent":{"content":"<p>Sure, let's further break down each sub-step into smaller sub-sub-steps:</p><p><strong>Enhance Resume:</strong></p><ol><li>Update Contact Information:<ol><li>Verify current phone number, email address, and physical address.</li></ol></li><li>Add Detailed Job Descriptions:<ol><li>List company names, positions held, and dates of employment for each job.</li><li>Provide a brief overview of each company's industry and size.</li><li>Detail specific responsibilities and achievements for each position.</li></ol></li><li>Include Achievements:<ol><li>Highlight significant accomplishments, such as exceeding targets, receiving awards, or leading successful projects.</li></ol></li><li>Incorporate Skills and Certifications:<ol><li>Include relevant technical skills, soft skills, and certifications related to the desired job.</li></ol></li><li>Format Professionally:<ol><li>Choose a clean and professional layout.</li><li>Use consistent formatting for headings, bullet points, and spacing.</li></ol></li></ol><p><strong>Articulate Career Aspirations:</strong></p><ol><li>Reflect on Goals:<ol><li>Consider personal strengths, interests, and values.</li><li>Evaluate previous experiences to identify patterns and preferences.</li></ol></li><li>Define Short-term and Long-term Objectives:<ol><li>Determine specific career milestones for the short term (1-2 years) and long term (3-5 years).</li></ol></li><li>Align with Job Roles and Industries:<ol><li>Research different job roles and industries to identify potential matches with career aspirations.</li></ol></li><li>Practice Expression:<ol><li>Draft and rehearse concise statements about career goals and aspirations.</li></ol></li></ol><p><strong>Document Phone Calls and Prepare Responses:</strong></p><ol><li>Log Call Details:<ol><li>Record date, time, duration, caller's name, company, and position.</li></ol></li><li>Note Questions Asked:<ol><li>Document any questions asked by the interviewer or recruiter during the call.</li></ol></li><li>Review Unanswered Questions:<ol><li>Reflect on any questions from previous interviews that were left unanswered or could be improved.</li></ol></li><li>Develop Responses:<ol><li>Craft clear and concise responses to common interview questions, focusing on showcasing skills and experiences.</li></ol></li></ol><p><strong>Continuous Resume Refinement and Job Search:</strong></p><ol><li>Update Regularly:<ol><li>Set a schedule for updating the resume (e.g., monthly or after significant achievements).</li></ol></li><li>Tailor to Each Application:<ol><li>Customize the resume for each job application by highlighting relevant experiences and skills.</li></ol></li><li>Utilize Job Search Platforms:<ol><li>Explore online job boards, company websites, and professional networking sites to find open positions.</li></ol></li><li>Set Application Goals:<ol><li>Determine a target number of applications to submit each week or month.</li></ol></li><li>Track Deadlines and Follow-Up:<ol><li>Keep a calendar or spreadsheet to track application deadlines.</li><li>Follow up on submitted applications after a reasonable period if no response is received.</li></ol></li></ol><p>Breaking down each sub-step into smaller components provides a detailed roadmap for refining your resume, articulating career aspirations, documenting communication, and conducting an effective job search. This level of granularity helps ensure thoroughness and clarity in each aspect of the job preparation process.</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T07:43:10.167Z"},"updatedDate":{"$date":"2024-06-15T07:43:59.891Z"},"__v":0}
{"_id":{"$oid":"666d5c74d9acd1e7a88a39d8"},"uniqueId":"2d378345-d4e2-4a2e-b119-7e35e950e188","linkedTopicUniqueId":"b851d17d-bc36-4eee-abcd-e3b32523b82f","name":"Overall Metadata","smartContent":{"content":"From this section, the expected information is\n  - Overall normalized tech-stacks, with duration.\n  - For each tech-stack, which topics I have worked on\n  - Overall Role and Responsibilities I have worked\n  - Total duration in years,months and days for which I have worked.\n  - Identify all gaps and their reasons\n  - Overall causes of job-switches (Actual as well as forHR)","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T09:18:44.249Z"},"updatedDate":{"$date":"2024-06-15T09:28:16.501Z"},"__v":0}
{"_id":{"$oid":"666d5efbd9acd1e7a88a3cd3"},"uniqueId":"e7494d3d-0888-4758-a9bd-90b37fd0c937","linkedTopicUniqueId":"b851d17d-bc36-4eee-abcd-e3b32523b82f","name":"Company level metadata","smartContent":{"content":"From each company topic, the expected information is\n - Overall normalized tech-stacks, with duration.\n - For each tech-stack, which topics I have worked on\n - Overall Role and Responsibilities I have worked\n - Total duration in years,months and days for which I have worked.\n - Achevements/Rewards recieved","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T09:29:31.881Z"},"updatedDate":{"$date":"2024-06-15T09:29:31.881Z"},"__v":0}
{"_id":{"$oid":"666d5f5bd9acd1e7a88a3d91"},"uniqueId":"938baba4-ec5f-4ea5-9970-49c61059e6ab","linkedTopicUniqueId":"b851d17d-bc36-4eee-abcd-e3b32523b82f","name":"Project level metadata","smartContent":{"content":"\n\nFrom each Project topic, the expected information is\n - Overall normalized tech-stacks, with duration.\n - For each tech-stack, which topics I have worked on\n - Overall Role and Responsibilities I have worked\n - Total duration in years,months and days for which I have worked.\n - Achevements/Rewards recieved","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T09:31:07.75Z"},"updatedDate":{"$date":"2024-06-15T09:31:07.75Z"},"__v":0}
{"_id":{"$oid":"666d857ad9acd1e7a88a9e9a"},"uniqueId":"c7622f75-b61e-4456-a82a-70cb78c875e4","linkedTopicUniqueId":"bc5aef05-ea9a-4185-8721-6f7cb6d7fefa","name":"Name all 16+ projects with company name, duration, tech stack, role and responsibility","smartContent":{"content":"# Projects\n## ESG Lythouse\n## IITD Admin\n## Ephesoft Transact\n## TReDS\n## SFTP\n## KRA\n## JasperReports\n## Notis API\n## ShubhWeb\n## ZVR4\n## GIP\n## Gain Manager\n## UnI\n## ResolveJiffy\n## Zetta\n## Econvey\n## Webdots\n## QAA\n## KnowledgeBase\n## Survey\n## iAgent 4.0\n## CIPRUS\n## OSCART","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T12:13:46.251Z"},"updatedDate":{"$date":"2024-06-15T12:13:46.251Z"},"__v":0}
{"_id":{"$oid":"666d917575c5c0681ef91d89"},"uniqueId":"abe5cee7-20bf-4f87-8d4b-24a1892f84f5","linkedTopicUniqueId":"bc5aef05-ea9a-4185-8721-6f7cb6d7fefa","name":"List all companies with name, duration, tech stack","smartContent":{"content":"List all companies with name, duration, tech stack","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T13:04:53.051Z"},"updatedDate":{"$date":"2024-06-15T13:04:53.051Z"},"__v":0}
{"_id":{"$oid":"666d926c75c5c0681ef91dab"},"uniqueId":"0bfe3e15-c80f-4d29-b6f8-869006903d8e","linkedTopicUniqueId":"bc5aef05-ea9a-4185-8721-6f7cb6d7fefa","name":"Tech stack elements with total experience, last used year, used in projects, currently using","smartContent":{"content":"Tech stack elements with total experience, last used year, used in projects, currently using","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-15T13:09:00.77Z"},"updatedDate":{"$date":"2024-06-15T13:09:00.77Z"},"__v":0}
{"_id":{"$oid":"66715fe654993f9c615f6b9d"},"uniqueId":"0c490ceb-dd11-4ec8-95e9-b43ccfaf3f54","linkedTopicUniqueId":"95f50cca-d418-48ff-9e9e-8d4a818d2da9","name":"[18-june-2024] [Mauni] [Techstar] [7207937968]","smartContent":{"content":"# Initial discussion\n\nMauni  \nTechstar  \nNoida/Gurgaon\n60 tech/40 team lead  \n14.3   \n6 year  \nAWS 6 years  \n22 feb 2024  \n32.8 years  \n40 LPA  \nnoida sector 94 800 okhla  \nsec 18 gurgaon  \n\n## initial round of discussion\non 19th June around 2-5 PM. Link will be shared in sometime.\n\n\n## History\n- Interview happened on 19th June. As per HR, my candidature is on hold. I need to brush up my Java and React skills for 2nd round.\n- 2nd round of interview happened on 27 June 2024. Waiting for further response.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-18T10:22:30.185Z"},"updatedDate":{"$date":"2024-06-27T13:14:15.963Z"},"__v":0}
{"_id":{"$oid":"667297266cf74d0e43f8e7c5"},"uniqueId":"9fddbaaa-b52c-4a27-86f7-782bd398b4c4","linkedTopicUniqueId":"dfaf04f6-0a7a-457f-a120-503a3d6a3ed5","name":"Style 1","smartContent":{"content":"## Architecture\nMonolith or Modular Monolith\n\n### Frontend\nJSP to create GUIs\n\n### Backend \nServlets\n\n### Database\nMySQL\n\n### Application Server\nTomcat\n\n### Code and Configurations\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-19T08:30:30.39Z"},"updatedDate":{"$date":"2024-06-23T05:47:21.048Z"},"__v":0}
{"_id":{"$oid":"667297b16cf74d0e43f8eb1e"},"uniqueId":"6a4a588b-fba2-4dc2-a1da-019c4a513298","linkedTopicUniqueId":"dd07d5a9-b6d1-460f-a76b-c62c6125fcb3","name":"Summary","smartContent":{"content":"Summary","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-19T08:32:49.653Z"},"updatedDate":{"$date":"2024-06-19T08:32:49.653Z"},"__v":0}
{"_id":{"$oid":"667732be220b74e552ad5735"},"uniqueId":"608c36bb-d989-45a9-a42d-e6b5f44d830c","linkedTopicUniqueId":"95e46b69-bb96-4c98-ba64-d07c8208c26c","name":"Some Freelancer Profile Descriptions","smartContent":{"content":"## Shyam V. @shyamvijaywargiy\nMy experience and skills will bring delight to you. I have valuable and practical experience in Mobile Native & Hybrid Developing.\nWhile working on a project, I focus on the clients' needs and requirements, and support some good idea.\nMy goal is building good and long term relationship by offering what you need\n\nSkills\n* Native Android/ iOS : JAVA, Kotlin, Swift, Objective-C\n* Hybrid Mobile Apps : React Native , Ionic\n* Google Maps Api\n* Payment Gateway Integration\n* Push Notifications\n* Geolocation\n\n## Thomas T. @ThomasTracy12\n### Full Stack Mobile And Web Application Developer\nExpert in MERN stack for website development and hybrid & native frameworks for mobile application development.\nI have 4+ years of experience developing different applications. Hit me up so we can discuss further.\n\n## Digital Innovations @pksaini1990\n### Web | Mobile | Php | MERN | Python | Java | AI-ML\nDigital Innovations providing development services for digital transformation, our service web development, mobile app development, software development, AI-ML based solution. We are working from past many years. We are a reliable development partner for all types of digital solutions.\n\nWhy Choose us-\nWorking from past 12 years.\nRanked on top 7% profiles on freelancer.com 96% project completion rate.\nWorked on more than 300+ projects.\nWorked for more than 50+ startups\nGood quality work on time delivery.\n24x7 Support\n\n100% client satisfaction and project success is our goal, had worked with more than 50+ startups having different concepts.\n\nServices:-\nWebsite development\nWeb App Development\nMobile App Development\nCRM and ERP Development\nSAAS platform Development\nIoT Application Development\nAI - ML Based solutions\nSoftware Development\n\nFull-Stack Web & Mobile App Developer | MEAN/MEARN, PWA, CMS, Security | Trusted Partner\n\nWe help businesses thrive online with powerful web and mobile app solutions.\n\nOur Expertise:\n\nFull-Stack Development: Leverage the power of MEAN/MEARN stacks (expert in AngularJS & ReactJS) to craft robust and dynamic web applications.\n\nProgressive Web Apps (PWAs): Build high-performance PWAs that deliver a seamless user experience across devices.\n\nContent Management Systems (CMS): I'm proficient in industry-leading CMS platforms like WordPress, Shopify, Magento, Joomla, and more, enabling you to easily manage your website content.\n\nCustomisation: Whether it's custom themes, plugins, or website functionalities, I can tailor solutions to your specific needs.\n\nCRM-ERP and Data Automation - CRM Development, ERP development solution and other data automation solutions, Zoho customisation, V-tiger CRM.\n\nSecurity & Performance: Protect your website with expert security measures and optimize performance for a faster, more reliable user experience.\n\nMobile App Development: Bring your mobile app vision to life with my expertise in native Android and iOS development.\n\nYour Trusted Partner:\n\nI believe in building long-term partnerships – not just completing projects. My focus is on exceeding your expectations and becoming your trusted advisor for all your web and mobile development needs.\n\nLet's discuss your project and how I can help you achieve your goals!\n\nSkills: AngularJS, ReactJS, PWA, MEAN Stack, MEARN Stack, WordPress, Shopify, Magento, Php Development, Laravel Development, Java Springboot Development, Joomla, Custom CMS, Security, Performance, Mobile App Development, Android App , Flutter Development, Java Kotlin Development, Swift Development, iOS App Development, Zoho customisation, V-tiger, Cs Cart, IoT Development, Webrtc, Agora Apis, SaaS Platform Development, Real Time Streaming Application,","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T20:23:26.149Z"},"updatedDate":{"$date":"2024-06-22T20:29:29.381Z"},"__v":0}
{"_id":{"$oid":"66773517220b74e552ad577b"},"uniqueId":"2e682a0a-9df0-4b1e-a673-3ff19b683a81","linkedTopicUniqueId":"95e46b69-bb96-4c98-ba64-d07c8208c26c","name":"Preferred Freelancer Program Service Level Agreement","smartContent":{"content":"<p>&nbsp;</p><ul><li>Offsite Communication</li><li>Availability</li><li>Upfront Payments</li><li>Fees</li><li>Communication</li><li>Minimum Requirements</li><li>Milestones</li><li>Quotes</li></ul><p>As a Preferred Freelancer, we ask that you adhere to the following agreement.</p><h2>You will:</h2><ol><li>Be able to apply for the Program, which is subject to evaluation. Please note that acceptance into the Program is based on our assessment. Additionally, participants should understand that admission to and continued participation in the Program is at the discretion of the organizers, and you may be asked to leave without prior notice.</li><li>Maintain the minimum requirements of entry to the Program. We reserve the right to remove you from the Program if your performance falls below our minimum requirements. These include the following:<ul><li>Successfully passing the Preferred Freelancer SLA Exam with a score of 80% or higher.</li><li>Completion of at least 10 projects.</li><li>Email, Phone, and KYC verified.</li><li>Absence of active penalties.</li><li>Achieving a review rate of 4.8 or higher.</li><li>Having received fewer than three 1-star reviews in the past 365 days.</li><li>Ranking within the top 3% percentile in one or more of your skills.</li></ul></li><li>You will have a complete profile, including a professional headline, photo, detailed bio and a portfolio displaying your best work.</li><li>Maintain a paid membership.</li><li>Remain a Verified by Freelancer member.</li><li>Respond to messages in a timely manner, as this increases your chances of being recommended. If you bid on a Recruiter project, let the Recruiter know that you are interested and why you should be recommended.</li><li>Inform the client of your availability and ensure that you are responsive during those times.</li><li>Provide an outstanding level of customer service at all times (we expect you to be polite, not demanding, easy to deal with).</li><li>Help to guide your client through the process of completing a project and ensure that they have an excellent customer service experience.</li><li>Provide work of excellent quality.</li><li>Deliver work on time.</li><li>Maintain an 85% project acceptance rate.</li><li>Maintain a dispute rate below 10% (with no more than 3 serious disputes in the last 6 months).</li><li>Maintain a completion rate no lower than 85%.</li><li>Keep communications and payments on-site only.<ul><li>Any cases of communication or payment going off-site will result in expulsion from Freelancer.</li></ul></li><li>Maintain a good relationship with all Recruiters; make sure you respond politely, accurately and with a high degree of professionalism. Any language abuse, spamming or threatening statements will not be tolerated.</li><li>Switch off your Preferred badge whenever you are unavailable to take projects, too busy, or wishing to take a break from the Program. If you are planning to take a break from the Program for more than two weeks, please contact <a href=\"mailto:preferred@freelancer.com\">preferred@freelancer.com</a>.</li><li>Contact Preferred Freelancer Support and your Recruiter, should you have any problem with your client.</li></ol><h2>You will not:</h2><ol><li>Communicate with clients in any unprofessional way, for example speaking badly about a Recruiter, Freelancer, or other freelancers.<ol><li>Unprofessional communication, spamming, rude or threatening behavior, or blackmail of a client will result in your immediate removal from Freelancer.</li></ol></li><li>Discuss fees with clients (project fees or Recruiter project fees).</li><li>Request upfront payments from your clients.<ol><li>If for any reason you break this condition and request upfront payments, we reserve the right to freeze withdrawals on your account until work has been delivered to the client or the funds have been returned.</li></ol></li><li>Request ratings &amp; reviews before project completion.</li><li>Exchange personal email addresses, phone numbers, Skype, or any other form of off-site communication.</li><li>Mention your profile on any other freelancing site or attempt to bring a client over to any other site. If you have your own portfolio site that you'd like to share with the client, please send it to your Recruiter and have them share it.</li><li>Bid on projects you are not able to complete, either because of skill or time constraints.</li></ol><p><strong>If your initial connection with a client was established on a Recruiter project, any subsequent projects connected to the original work will also need to be Recruiter upgraded.</strong></p><p><strong>Any attempt to circumvent or avoid the 15% project fee will result in a 30% penalty fee and a warning. Repeated attempts will result in expulsion from the Program. If in doubt, check with the recruiter or Preferred Freelancer Support.</strong></p><h3>Further Information:</h3><ul><li><a href=\"https://www.freelancer.com/preferred-freelancer-program/user-guide\">Preferred Freelancer Program SLA User Guide</a></li><li><a href=\"https://www.freelancer.com/exam/exams/buy.php?id=533\">Preferred Freelancer Program SLA Exam</a></li><li><a href=\"https://www.freelancer.com/preferred-freelancer-program\">Preferred Freelancer Program Home Page</a></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T20:33:27.578Z"},"updatedDate":{"$date":"2024-06-22T20:51:09.613Z"},"__v":0}
{"_id":{"$oid":"66773c1b220b74e552ad658e"},"uniqueId":"8ac3c6bd-4213-4fb1-8f67-c8d83363b19c","linkedTopicUniqueId":"789e0710-0f03-4492-8d05-ce5df8e28c28","name":"PART 1: Introduction to Freelancer.com","smartContent":{"content":"<p><a href=\"https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-introduction-to-freelancer-com\">https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-introduction-to-freelancer-com</a></p><h2><strong>PART&nbsp;1: Introduction to Freelancer.com</strong></h2><h2><strong>Welcome!</strong></h2><p>Freelancer.com allows you to work with employers, both for online and offline projects. Work opportunities are available on the site without you having to deal with the troubles of advertising and self-promotion.</p><p>Signing up is free, and everyone is welcome to join.</p><p>&nbsp;</p><h2><strong>Why Freelancer.com?</strong></h2><ul><li><strong>Find just about any job.</strong> We have projects ranging from website development to babysitting. Work on projects that suit your skills and interests.</li><li><strong>Tools to manage your business are provided.</strong> Stay up-to-date and keep in touch with your employers using our native Messenger both on desktop and mobile. Easily track worked hours for hourly projects as well via the Freelancer Desktop App.</li><li><strong>Great performance is recognized.</strong> Get invited to join our Preferred Freelancer program for exemplary performance and for consistently providing high employer satisfaction.</li><li><strong>Secure payments.</strong> Our Milestone Payment System gives you and your employers equal control over created payments for projects.</li></ul><p>&nbsp;</p><h2><strong>Who can work on Freelancer.com?</strong></h2><p>Whether you are an independent freelancer or you run a team, you are welcome to join Freelancer.com for <strong>free</strong>. By default, all users are given a personal (individual) account upon sign up, but depending on the demands of your business, you can subscribe to Freelancer Corporate for a Corporate account after signup.</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T21:03:23.532Z"},"updatedDate":{"$date":"2024-06-22T21:03:23.532Z"},"__v":0}
{"_id":{"$oid":"66773c93220b74e552ad65a8"},"uniqueId":"34991ceb-2ca0-4ff6-a1b4-6cddb4aa96c0","linkedTopicUniqueId":"789e0710-0f03-4492-8d05-ce5df8e28c28","name":"PART 2: Getting started at Freelancer.com","smartContent":{"content":"<p><a href=\"https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-getting-started\">https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-getting-started</a></p><h2><strong>PART&nbsp;2: Getting started at Freelancer.com</strong></h2><h2><strong>Setting up your Freelancer.com account</strong></h2><p><strong>Sign up and verify your email address.</strong> Create your account for free, and verify your registered email address to keep yourself up-to-date with the marketplace and to be notified for latest projects, contests, and features. Also choose a unique username. It will be your unique ID on Freelancer.com. This cannot be changed once set.</p><p><strong>Complete your account details.</strong> Provide your full name and address. Your first name and the initial of your last name will be your public display name on the site. Also make sure that your account’s country of registration is correct so we can notify you for available projects within your locale. Update your Language Settings as well.</p><p><strong>Complete your profile details.</strong> Upload a professional&nbsp;<a href=\"http://www.freelancer.com/support/Profile/profile-picture-guidelines\">profile picture</a>, and add a profile headline. Highlight your skills and experience in your summary, and don’t forget to input your hourly rate.</p><p><strong>Add skills to your profile.</strong> You can only bid on a project if you have at least one of the skills required for it, so add relevant skills to your profile so you can start bidding on projects that match your expertise.</p><p>&nbsp;</p><h2><strong>Membership plans</strong></h2><p>We offer five paid membership plans for you to choose from for added features and benefits.</p><p>All freelancers are automatically subscribed to a free account upon sign up. You can subscribe to any of our paid membership plans to unlock the different features and benefits you can use in successful freelancing on the site.</p><p>&nbsp;</p><p>All of these paid memberships offer more bids and allow you to add more skills to your profile, which both boost your chances of working on more projects on the site.</p><p>&nbsp;</p><h2><strong>Building a great profile</strong></h2><p>Your profile is your storefront as it gives employers insights about you and the quality of your work. First impressions are everything, and successful profiles are always polished to perfection. Make sure yours is too.</p><p><strong>Profile Picture</strong></p><p>It should be a clear portrait photo of yourself, from the shoulder up.</p><p>Resolution should be at least 280x280 pixels. File size should be up to 2MB.</p><p><strong>Professional Headline</strong></p><p>It should indicate your profession / field. It can include your trade / brand name.</p><p>Keep it short and professional.</p><p><strong>Profile Summary</strong></p><p>Emphasize your skills and experience.</p><p>Be specific (if you have a niche market/technology).</p><p>Accurately represent your abilities and/or resources.</p><p>Observe proper grammar and acceptable formatting.</p><p>You can write up to a maximum of 1000 characters.</p><p><strong>Hourly Rate</strong></p><p>Indicate your hourly rate, and be hired directly for hourly projects.</p><p><strong>Portfolio</strong></p><p>Add your past work samples and studies.</p><p>Quality is preferred over quantity.</p><p>You may ask permission from your past clients.</p><p><strong>Experience and Education</strong></p><p>Add your education details, and include employment history.</p><p><strong>Skills</strong></p><p>Maximize the allowed number of skills you can add, but only add the skills you have the expertise on.</p><p><strong>Qualifications and Publications</strong></p><p>Highlight licenses and special awards/recognition you’ve received.</p><p>Include your professional certifications.</p><p>List your published work.</p><p><strong>Certifications</strong></p><p>Take Skills Tests to certify your expertise.</p><p>All passing exam scores will be included here.</p><p><strong>Verifications</strong></p><p>Verify your email address, phone number, and payment method.</p><p>Link external accounts (LinkedIn and Facebook) to improve your Trust Score.</p><p>&nbsp;</p><p><img src=\"https://cdn3.f-cdn.com/files/download/66826277/e9c96f.jpg\" alt=\"Profile Guidelines\" width=\"690\"></p><p>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T21:05:23.429Z"},"updatedDate":{"$date":"2024-06-22T21:05:23.429Z"},"__v":0}
{"_id":{"$oid":"66773ce3220b74e552ad65c2"},"uniqueId":"894d3e44-ea57-4269-8740-7b85d3abce11","linkedTopicUniqueId":"789e0710-0f03-4492-8d05-ce5df8e28c28","name":"PART 3: Finding Work and Submitting Proposals","smartContent":{"content":"<p><a href=\"https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-finding-work-and-submitting-proposals\">https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-finding-work-and-submitting-proposals</a></p><p>&nbsp;</p><h2><strong>PART&nbsp;3: Finding Work and Submitting Proposals</strong></h2><h2><strong>Looking for and getting hired for work</strong></h2><p>Getting work on the website can be done in a number of ways.</p><p>&nbsp;</p><h3><strong>From the&nbsp;Browse Menu</strong></h3><p>Click&nbsp;the <strong>Browse</strong>&nbsp;menu, and choose from&nbsp;a predefined list for what you wish to browse:</p><p>under <strong>Search By Type</strong>:&nbsp;</p><p><strong>Projects.</strong> All available projects</p><p><strong>Contests.</strong> All open contests</p><p>under <strong>Discover Our Products:</strong></p><p><strong>Local Jobs.</strong> Projects within your area</p><p><strong>Bookmarks.</strong>&nbsp;Projects and contests you bookmarked.</p><p>&nbsp;</p><h3><strong>From the Project Feed</strong></h3><p>Live notifications regarding projects and contests related to your added skills will be pushed to you via the <strong>Project Feed</strong>. It is located on the top right part of your Dashboard, above your chats.</p><p>&nbsp;</p><h3><strong>From email notifications of latest projects posted</strong></h3><p>We send a list of new projects and contests related to the skills added to your profile, so you are updated with opportunities available even if you are not logged in on your Freelancer.com account.</p><p>&nbsp;</p><h2><strong>Projects vs. Contests</strong></h2><p>You have the option to choose between working on projects or contests on Freelancer.com.</p><h3><strong>Projects</strong></h3><p>While usually awarded to a single freelancer, projects can be worked on by several freelancers, depending on the demands of the task. Employers get to choose whom to hire for their project, basing on the freelancer’s experience or previous work samples.</p><p>Projects have two types.</p><p><strong>Fixed-price</strong></p><p>Usually one-time projects with fixed budgets</p><p>You will be paid for a predetermined amount for a defined output/goal</p><p><strong>Hourly</strong></p><p>Usually continuous work (full-time) with no specified deadlines</p><p>Paid by the hour and is perfect for projects that are flexible in nature</p><h3><strong>Contests</strong></h3><p>Contests are based on a brief by the contest holder. Freelancers get to submit entries and actually show what they are capable of. The chosen entry receives the prize money.</p><p>&nbsp;</p><h2><strong>Bidding on projects</strong></h2><p>Now that your account is set up, you can start bidding on projects.</p><p>1. Look for a project that you wish to work on from the <a href=\"http://www.freelancer.com/search/projects/\">Browse Projects</a> page. Click the project's title to view its details.&nbsp;Just below the project description is the bidding section.</p><p>2. Input your bid amount:</p><p><strong>Fixed-price project.</strong> Enter an amount you wish to be paid for delivering the output and completing the project.</p><p><strong>Hourly project.</strong> Enter the hourly payment that you wish to receive for the duration of the project.</p><p>3. Indicate how many days it will take you to deliver.</p><p>4. Compose a detailed proposal. Include your experience, credentials, portfolio, etc.</p><p>5. Suggest a milestone. Set tasks and assign a Milestone Payment for each task. The total of the Milestone Payments should equal your bid amount.</p><p>6. Upgrade your bid to boost your chance of getting hired. This is optional. Click <strong>Place Bid&nbsp;</strong>to complete.</p><p>7. The employer will review the bids they received and contact freelancers to further discuss the project. Take advantage of this opportunity to clarify the scope and the details of the project, and to request for the creation of Milestone Payments.</p><p>8. If the employer requests for sample work related to the project, you may send them through our native Messenger. You can also refer employers to specific items on your profile portfolio.</p><p>9. After the details have been clarified and if you both agree on the payment and deadline, you will be awarded the project, which you will have 36 hours to accept. Within the 36-hour window, make sure that the terms of the project and the payment have been finalized before you accept the award.</p><p>10. If everything is good, accept the award, and start working on the project.</p><p>&nbsp;</p><h3><strong>Tips for writing a winning proposal</strong></h3><p>No matter what kind of project you are bidding on, a poorly-written proposal suggests lack of attention to details and poor work habits, neither of which is going to work in your favor.</p><p>Here are some things that you can easily implement to help you submit quality proposals:</p><p><strong>Be concise.</strong></p><p>Make your bid proposal short but meaty. Mention your relevant experience and past work examples related to the project that you are bidding on. If the employer requests for specific details, don’t forget to include those.</p><p><strong>Probe for details.</strong></p><p>Ask questions to better define the scope of the project. Show that you have an understanding of what the employer needs, and that you have enough interest to pay extra attention to what the task may demand.</p><p><strong>Do not oversell yourself.</strong></p><p>A little self-confidence is a good thing, but over-the-top claims is not likely to impress anyone. Being honest about your skills will get you much further than a lot of hype.</p><p><strong>Proofread before you submit your proposal.</strong></p><p>Double check if you have provided all important information to the project. Review your grammar and spelling before clicking <strong>Finish</strong>.</p><p>&nbsp;</p><p><img src=\"https://cdn6.f-cdn.com/files/download/66826561/db3b52.jpg\" alt=\"Bidding Reminders\" width=\"690\"></p><p>&nbsp;</p><h2><strong>Joining contests</strong></h2><p>Participate in contests to showcase your skills to employers upfront.</p><p><a href=\"http://www.freelancer.com/search/contests/\">Browse for the contest</a> that you wish to join, and make sure to read its brief.</p><p>Use the Public Clarification Board on the lower part of the contest page to ask the contest holder for clarifications.</p><p>Click <strong>Submit My Entry</strong>, and:</p><ul><li>&nbsp;</li></ul><p>Add a title and a description for your entry.</p><p>Click <strong>Add Files</strong> to upload your entry.</p><p>Declare whether your entry is entirely your own or if it contains any stock content.</p><p>Enter its <strong>Sell Price</strong>. This is for how much the contest holder can purchase your entry in case it is not chosen as the winner.</p><p>You may promote your entry by Highlighting it to make it stand out, or by Sealing it to make sure your idea is unique.</p><p>Click <strong>Submit Entry</strong>.</p><p>The contest holder will be rating/rejecting and giving feedback to entries. Make sure to accommodate the requested revisions if you want your work to be chosen as the winning entry.</p><p>Your entry will be awarded as the winner if the contest holder likes it best. Both you and the contest holder will then undergo the Contest Handover, which includes signing the Intellectual Property Transfer Agreement, to transfer the entry’s rights and to release the contest prize to you.</p><p>&nbsp;</p><p><img src=\"https://cdn5.f-cdn.com/files/download/66826784/1ea10d.jpg\" alt=\"Dos and Don'ts in Joining Contests\" width=\"690\"></p><p>&nbsp;</p><h2><strong>Fees and charges</strong></h2><p><strong>Project fees</strong></p><p>When you accept to work on a project, we charge a small project fee relative to your bid’s value. The cost and how this fee is charged depend on the type of project you accept.</p><p><strong>Fixed-price projects.</strong> The fee is 10% of your bid or $5 USD (or equivalent in other currencies)—whichever is greater. This is charged when you accept the project. Subsequent payments made to you in excess of your bid amount will each incur a 10% project fee.</p><p><strong>Hourly projects.</strong> The fee is 10% of the payments released to you. This is charged for every payment made on the project.</p><p><strong>Contest fees</strong></p><p>The winning freelancer in contests are charged 10% of the contest prize or $5 USD (or equivalent in other currencies)—whichever is greater, once the Contest Handover is completed.</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T21:06:43.096Z"},"updatedDate":{"$date":"2024-06-22T21:06:43.096Z"},"__v":0}
{"_id":{"$oid":"66773d38220b74e552ad65dd"},"uniqueId":"dbf569bb-f6e3-4f95-bd17-03bb82ac2a1d","linkedTopicUniqueId":"789e0710-0f03-4492-8d05-ce5df8e28c28","name":"PART 4: Doing the Work and Getting Paid","smartContent":{"content":"<p><a href=\"https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-doing-the-work-and-getting-paid\">https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-doing-the-work-and-getting-paid</a></p><h2><strong>PART&nbsp;4: Doing the Work and Getting Paid</strong></h2><h2><strong>Managing your project</strong></h2><p>Getting selected to work on a project means that the employer is convinced that you have what it takes to deliver what they need. We highly recommend doing the following best practices:</p><p><strong>Report.</strong> Regularly update them with your progress to keep them in the loop.</p><p><strong>Clarify.</strong> Do not hesitate to ask questions if some details are not clear.</p><p><strong>Deliver on time.</strong> Keep the deadline in mind. Make sure to progress as scheduled.</p><p>&nbsp;</p><h3><strong>Fixed-price projects</strong></h3><p>Request a Milestone Payment to be released each time a task or a project phase is completed until the project gets fully paid.</p><p>&nbsp;</p><h3><strong>Hourly projects</strong></h3><p>Download the Freelancer Desktop App. It leaves the guesswork out of collaborating with your employer by tracking your hourly project, logging the hours you worked, taking screenshots of your work, and generating your payments through Milestone Payments.</p><h4><strong>The Freelancer Desktop App</strong></h4><p>The Freelancer Desktop App helps track your time spent working on hourly projects. It lists all your ongoing hourly projects, along with their tracked hours to date and their corresponding&nbsp;payment.</p><p><i><strong>Time Tracking</strong></i></p><p>The maximum number of hours you can track in a week (from 1 to 168 hours, set by your employer) will be available on the app to let you know how much you can work for every week. The last day for weekly tracking is Sunday.</p><p><i><strong>Managing screenshots</strong></i></p><p>Screenshots of your work are randomly taken by the app and are automatically saved. Deleting screenshots from the Desktop App is possible. Deleted screenshots and their logged time will be deducted from the tracked hours.</p><p><i><strong>Automatic invoicing and payment</strong></i></p><p>Before a Milestone Payment and invoice is automatically generated on Monday, review your logged hours and the screenshots from the previous week. Your employer will be able to review them as well.</p><p>Milestone Payments will be automatically released every Wedenesday, and the invoice that came with&nbsp;the Milestone will be marked as paid.</p><p><i><strong>Messaging</strong></i></p><p>The app allows you to directly message your employers and attach/download project files.</p><p>&nbsp;</p><h2><strong>Getting paid</strong></h2><h3><strong>Projects</strong></h3><p><strong>Milestone Payments</strong></p><p>The Milestone Payment System is the recommended mode of payment for projects on the site. It offers protection to both employers and freelancers by giving equal control over created payments for awarded projects.</p><ul><li>Only employers can create and release them.</li><li>Only you can cancel and return the funds to your employers.</li></ul><p>After winning a project, request your employer to create or pre-fund a Milestone Payment for you. The funds will be held until&nbsp;your&nbsp;employer chooses to release them. Make sure to deliver quality output before requesting for the release of the Milestone Payment.</p><p>&nbsp;</p><p><strong>Dispute Resolution Service</strong></p><p>Through the Milestone Payment System, you will have access to the Dispute Resolution Service in the unlikely event that your project does not go as planned. It allows you to contest the release of in-progress Milestone Payments if issues arise between you and your employer.</p><p>The dispute process will first encourage both you and your employer to mutually come to a resolution regarding the release of the funds held in Milestone. If, however, no resolution is arrived upon, the option to seek help from our dispute arbitrators will be made available.</p><p>&nbsp;</p><h3><strong>Contests</strong></h3><p>Once your entry is awarded as the winner, you and the contest holder will undergo the Contest Handover for the transfer of rights and ownership of the work from you to the contest holder. The contest prize will be released after your submitted files are reviewed and accepted by the contest holder.</p><p>&nbsp;</p><p><img src=\"https://cdn5.f-cdn.com/files/download/66827023/744fbd.jpg\" alt=\"Offsiting\" width=\"690\"></p><p>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T21:08:08.318Z"},"updatedDate":{"$date":"2024-06-22T21:08:08.318Z"},"__v":0}
{"_id":{"$oid":"66773dbb220b74e552ad65f8"},"uniqueId":"ff301694-cbe7-4e55-b035-0562a568aee8","linkedTopicUniqueId":"789e0710-0f03-4492-8d05-ce5df8e28c28","name":"PART 5: Conclusion and Takeaways","smartContent":{"content":"<p><a href=\"https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-conclusion-and-takeaways\">https://www.freelancer.com/community/articles/a-freelancer-s-guide-to-freelancer-com-conclusion-and-takeaways</a></p><p>&nbsp;</p><h2><strong>PART&nbsp;5: Conclusion and Takeaways</strong></h2><h2><strong>How projects are concluded</strong></h2><h3><strong>Projects</strong></h3><p><strong>Fixed-price projects.</strong> Fixed-price projects are automatically marked complete once your bid amount is paid in full.</p><p><strong>Hourly projects.</strong> Hourly projects have to be ended manually by your employer before they are marked complete. Feel free to ask your employer for the project’s completion after your submitted work is reviewed and paid for.</p><h3><strong>Contests</strong></h3><p>Contests are completed after both parties finish the Contest Handover, which also means that the contest prize money has been released to the winner.</p><p>&nbsp;</p><p><img src=\"https://cdn3.f-cdn.com/files/download/66827417/80b1f8.jpg\" alt=\"Ensuring project completion\" width=\"690\"></p><p>&nbsp;</p><h2><strong>Build your Reputation from Project Feedback</strong></h2><p>Both you and your employer will have the opportunity to leave each other feedback once your project or contest is completed. The feedback will include a 1 to 5 star rating, as well as a comment about your experience on working with each other.</p><p>Leaving feedback is optional, but each review that you receive is an opportunity for you to build your reputation and credibility as a freelancer on the site.&nbsp;</p><p><strong>Best practices to receive good reviews</strong></p><p>Communicate clearly and on a timely manner.</p><p>Deliver quality work.</p><p>Maintain a professional relationship with your employers throughout the project.</p><h3><strong>Your review summary</strong></h3><p>You will see the summary of your received reviews from all completed projects and contests on your profile page.</p><p>The <strong>overall star rating</strong> is the average of all the star ratings you received.</p><p>The <strong>Jobs Completed</strong> is the percentage of the projects you have successfully completed versus the total number of awarded projects you accepted.</p><p>The <strong>On Budget</strong> and <strong>On Time</strong> percentages reflect your previous employers’ feedback on whether or not you completed their projects for the agreed price and on the agreed deadline.</p><p>The <strong>Repeat Hire Rate</strong> shows the percentage of your rehires from previous employers.</p><p>The higher your stats, the better your reputation would be for potential employers.</p><p>&nbsp;</p><p><img src=\"https://cdn3.f-cdn.com/files/download/66827412/f1a1c9.jpg\" alt=\"Reminder about getting feedback\" width=\"690\"></p><p>&nbsp;</p><h2><strong>Be an Elite Freelancer through the Preferred Freelancer Program</strong></h2><p>The Preferred Freelancer Program pools the best talent on Freelancer.com, creating a community of elite freelancers whom we call <strong>Preferred Freelancers</strong>. If you get accepted into the program, you will receive exclusive invitations to work on high-value projects, and you will get the Preferred Freelancer badge to make your profile stand out, among other perks.</p><p>Keep on satisfying employers by providing quality work, by communicating punctually, and by maintaining professional relations to help you meet the <a href=\"http://www.freelancer.com/preferred-freelancer-program/apply\">minimum requirements to apply</a> for the program.</p><p>&nbsp;</p><p><img src=\"https://cdn5.f-cdn.com/files/download/66827414/ee027a.jpg\" alt=\"PFP reminder\" width=\"690\"></p><p>&nbsp;</p><h2><strong>Upholding Freelancer.com Standards</strong></h2><p>To preserve trust and respect on Freelancer.com, we have set community standards which are also the best practices we have observed from successful freelancers.</p><p><strong>Get in touch with your employer closely until the project is complete.</strong></p><p>The key to project success is clear and timely communication.</p><p><strong>Maintain your communication and payment within the platform.</strong></p><p>This will help ensure that you will get paid for your hard work using our Milestone payments.</p><p><strong>Impress employers with quality output.</strong></p><p>This is the best way to get good reviews. The better your reputation, the higher your chances of earning big.</p><p><strong>Provide true and accurate information.</strong></p><p>Starting from your profile details to your bid proposals, show your employers that you can be trusted.</p><p><strong>Look out for projects that are in violation of the site terms.</strong></p><p>Avoid projects that require you to send money offsite, to give out your personal / contact details, and to bypass security checks, among other potentially dangerous activities. In the unlikely event that you encounter one, let us know.</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-22T21:10:19.116Z"},"updatedDate":{"$date":"2024-06-22T21:10:19.116Z"},"__v":0}
{"_id":{"$oid":"6679a49e992cd1dc1ba032e5"},"uniqueId":"e623237a-d479-4d10-8635-f02318a0df95","linkedTopicUniqueId":"79399072-80e6-4a6e-ac10-e93df28e5b03","name":"Old Content [Will be purged soon]","smartContent":{"content":"<p><a href=\"https://www.quora.com/What-are-some-interesting-possible-applications-of-machine-learning\"><strong>What are some interesting possible applications of machine learning?</strong></a><br><br>There are numerous applications of machine learning. It's actually hard to realize how much machine learning has achieved in real world applications.<br><br>&nbsp;</p><p>Machine learning is generally just a way of fine tuning a system with tunable parameters. It is a way of making a system better with examples, usually in a supervised or unsupervised manner.<br><br>&nbsp;</p><p>Machine learning is normally applied in the offline training phase.Thus machine learning is used to improve the following applications.<br><br>&nbsp;</p><ol><li><strong>Face detection</strong>: The face detection feature in mobile cameras is an example of what machine learning can do. Cameras can automatically snap a photo when someone smiles more accurately now than ever before because of advances in machine learning algorithms.</li><li><strong>Face recognition</strong>: This is where a computer program can identify an individual from a photo. You can find this feature on Facebook for automatically tagging people in photos where they appear. Advances in machine learning means more accurate auto-face tagging softwares.</li><li><strong>Image classification</strong>: A good example is the application of deep learning to improve image classification or image categorization in apps such as Google photos. Google photos would not be possible without advances in deep learning.</li><li><strong>Speech recognition</strong>: Another good example is Google now. Improvements in speech recognition systems has been made possible by, you guessed right, machine learning specifically deep learning.</li><li><strong>Google</strong>: Google defines itself as a machine learning company now. It is also a leader in this area because machine learning is a very important component to it's core advertising and search businesses. It applies machine learning to improve search results and search suggestions.</li><li><strong>Anti-virus</strong>: Machine learning is used in Anti-virus softwares to improve detection of malicious software on computer devices.</li><li><strong>Anti-spam</strong>: machine learning is also used to train better anti-spam software systems.</li><li><strong>Genetics</strong>: Classical data mining or clustering algorithms in machine learning such as agglomerative clustering algorithms are used in genetics to help find genes associated with a particular disease.</li><li><strong>Signal denoising:</strong>&nbsp;Machine learning algorithms such as the K-SVD which is just a generalization of k-means clustering are used to find a dictionary of vectors that can be sparsely linearly combined to approximate any given input signal. Thus such a technique is used in video compression and denoising.</li><li><strong>Weather forecast</strong>: Machine learning is applied in weather forecasting software to improve the quality of the forecast.</li></ol><p>Machine learning makes it relatively easier to develop sophisticated software systems without much effort on the human side. Instead of spending years handcrafting features or fine tuning a system with a lot of parameters, machine learning does that quicker. It also only requires training data to learn better features or parameters needed to improve a given system.<br><br>&nbsp;</p><p>The only drawback is that machine learning doesn't work well for non-convex problems or problems with discrete parameters that are not differentiable.<br><br>&nbsp;</p><p>Machine learning algorithms are applicable to many real-life problems. Due to it being mainly an offline system applied only during training, it is hard to realize it's importance and contributions in reality.<br><br>-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br><br><a href=\"http://www.forbes.com/sites/85broads/2014/01/06/six-novel-machine-learning-applications/#327c381e67bf\">Six Novel Machine Learning Applications</a><br><br><br>Machine Learning (CS 229) is&nbsp;<a href=\"http://www.forbes.com/sites/anthonykosner/2013/12/29/why-is-machine-learning-cs-229-the-most-popular-course-at-stanford/\">the most popular course at Stanford</a>. Why? Because, increasingly, machine learning is eating the world. Machine learning is a powerful artificial intelligence tool that enables us to crunch petabytes of data and make sense of a complicated world. And it’s transforming a wide variety of industries. It’s solving previously unsolved problems.</p><p><br>&nbsp;</p><p><br>&nbsp;</p><p><br>&nbsp;</p><p>You probably already know that your email provider uses a machine learning algorithm to identify spam. And that&nbsp;<a href=\"http://www.lauradhamilton.com/how-google-uses-machine-learning-to-detect-spam-blogs-maybe\">Google uses machine learning to identify and deindex webspam</a>. And that ecommerce and technology companies like Braintree are&nbsp;<a href=\"http://www.lauradhamilton.com/how-to-secure-your-web-application-and-fight-fraud-with-repsheet\">using machine learning in conjunction with other tools</a>&nbsp;to stop credit card fraud.</p><p>Cutting-edge startups (as well as established tech companies and Universities) are increasingly finding new, novel, and exciting ways to apply powerful machine learning tools such as neural networks to existing problems in many different industries.</p><p><strong>Recommended by Forbes</strong><a href=\"http://www.forbes.com/pictures/fflf45fkhe/the-richest-person-in-ev/\"><strong>MOST POPULAR</strong>Photos: The Richest Person In Every State</a><a href=\"http://www.forbes.com/sites/lizryan/2016/10/24/my-co-workers-hate-me-because-i-do-my-job/\"><strong>+168,904 VIEWS</strong>My Co-Workers Hate Me -- Because I Do My Job</a>Cargill<i>Voice</i>: An Innovative Way To Reduce Sodium In Packaged Foods<br><br><br>&nbsp;</p><p><strong>Below is a list of 10 of the most interesting applications.</strong></p><p><strong>#1: Automating Employee Access Control</strong></p><p>Amazon, one of the pioneers of machine-learning based recommendation engines and price discrimination algorithms, launched a machine learning contest on Kaggle to&nbsp;<a href=\"http://www.lauradhamilton.com/amazon-seeks-to-automate-access-control\">determine whether it was possible to automate employee access granting and revocation</a>. Amazon has a considerable dataset of employee roles and employee access levels. They’re trying to develop a computer algorithm that will predict which employees should be granted access to what resources. According to Amazon, “These auto-access models seek to minimize the human involvement required to grant or revoke employee access.”</p><p>#2: Protecting Animals</p><p><a href=\"http://www.forbes.com/colleges/cornell-university/\">Cornell University</a>&nbsp;is working on an algorithm to&nbsp;<a href=\"http://www.lauradhamilton.com/10-surprising-machine-learning-applications\">identify whales in the ocean based on audio recordings</a>&nbsp;so that ships can avoid hitting them. Also,&nbsp;<a href=\"http://www.forbes.com/colleges/oregon-state-university/\">Oregon State University</a>&nbsp;is working on software that will&nbsp;<a href=\"http://www.kaggle.com/c/mlsp-2013-birds\">determine which bird species is/are on a given audio recording</a>&nbsp;collected in field conditions.</p><p><strong>#3: Predicting Emergency Room Wait Times</strong></p><p>Healthtech companies and healthcare organizations are using a technique called Discrete Event Simulation to&nbsp;<a href=\"http://www.additiveanalytics.com/blog/modeling-methods-healthcare/\">predict wait times for patients in emergency department waiting rooms</a>. The models use factors such as staffing levels, patient data, emergency department charts, and even the layout of the emergency room itself to predict wait times.</p><p><br>&nbsp;</p><p>Image credit:&nbsp;<a href=\"https://www.coursera.org/course/healthinformatics\">Health Informatics in the Cloud</a>&nbsp;class by Mark Braunstein</p><p><strong>#4: Identifying Heart Failure</strong></p><p><a href=\"http://www.forbes.com/companies/ibm\">IBM</a>&nbsp;<a href=\"http://www.forbes.com/companies/ibm\">IBM +0.09%</a>&nbsp;researchers have found a way to&nbsp;<a href=\"http://www.additiveanalytics.com/blog/new-research-predicts-heart-failure-happens/\">extract heart failure diagnosis criteria from free-text physician notes</a>. They developed a machine learning algorithm that combs through physicians free-form text notes (in the electronic&nbsp;<a href=\"http://www.forbes.com/health/\">health</a>&nbsp;records) and synthesize the text using a technique called “Natural Language Processing” (NLP). Similar to the way a cardiologist can read through another physician’s notes and figure out whether a patient has heart failure, computers can now do the same.</p><p><br>&nbsp;</p><p>Image credit:&nbsp;<a href=\"http://www.ncbi.nlm.nih.gov/pubmed/23317809\">Automatic identification of heart failure diagnostic criteria,using text analysis of clinical notes from electronic healthrecords</a></p><p><strong>#5: Predicting Strokes and Seizures</strong></p><p>Singapore-based startup&nbsp;<a href=\"http://www.healint.com/\">Healint</a>&nbsp;launched an app called JustShakeIt that&nbsp;<a href=\"http://www.additiveanalytics.com/blog/healint-launches-emergency-alert-app-justshakeit/\">enables a user to send an emergency alert to emergency contacts and/or caregivers</a>&nbsp;simply by shaking the phone with one hand. The program uses a machine learning algorithm to distinguish between actual emergency shakes and everyday jostling. In addition to the JustShakeIt app, Healint is working on a model that analyzes patients’ cell phone accelerometer data to&nbsp;<a href=\"http://techcrunch.com/2013/12/23/933897/\">help identify warning signs for chronic neurological conditions</a>.</p><p><strong>#6: Predicting Hospital Readmissions</strong></p><p>My own startup,&nbsp;<a href=\"http://www.additiveanalytics.com/\">Additive Analytics</a>, is working on a machine learning model that&nbsp;<a href=\"http://www.additiveanalytics.com/\">identifies which patients are at high risk of readmission.</a>&nbsp;Using our proprietary predictive model, hospitals can predict emergency room admissions&nbsp;<i>before</i>&nbsp;they happen—improving care outcomes and reducing costs.</p><p>In the ’90s and 2000s, software and the internet transformed the way that companies do business. Cutting-edge, tech-savvy companies such as Amazon and&nbsp;<a href=\"http://www.forbes.com/companies/google\">Google</a>&nbsp;<a href=\"http://www.forbes.com/companies/google\">GOOG -0.75%</a>&nbsp;grew rapidly. Old, stodgy companies like Blockbuster and Borders failed to keep up.</p><p>In the 2010s and 2020s, powerful analytics and machine learning are transforming industries again, just as software transformed the world over the past 30 years.<br><br>-------------------------------------------------------------------------------------------------------------------<br><br><a href=\"https://www.linkedin.com/pulse/interesting-applications-machine-learning-polly-mitchell-guthrie\"><strong>Interesting applications of machine learning</strong></a><br><br><br>Is it a Hermit Thrush or a Swainson's Thrush? A few of us have been debating this question at work, because we agreed to help Fulbright Scholar and Duke University PhD student&nbsp;<a href=\"https://www.linkedin.com/profile/view?id=AAkAAAhM_5kB0eq0ubsdyMFAdtbcUpIlrCibUlI&amp;authType=NAME_SEARCH&amp;authToken=L715&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A139263897%2CauthType%3ANAME_SEARCH%2Cidx%3A1-1-1%2CtarId%3A1444411958023%2Ctas%3Anatalia%20oc\">Natalia Ocampo-Peñuela</a>&nbsp;with research she is doing related to&nbsp;<a href=\"http://sites.duke.edu/birdcollisions/\">bird collisions with windows</a>. A sad little band of us at SAS have spent the last three weeks doing daily perambulations of multiple buildings on campus to look around the perimeter for dead birds, casualties of run-ins with our shiny pretty glass buildings. We record the species if we can (sometimes predators leave us scanty evidence), hence the need for identification. I can tell you that a Hermit Thrush and Swainson's Thrush look very similar. As an avid birdwatcher myself, I have several field guide apps on my iPhone, but it got me wondering what algorithmic magic was behind the search tools most apps now have. You input features like state, the month, size, color, etc. and they offer you a filtered list of possibilities likely to be seen. But a new app, Merlin Bird Photo ID, developed in collaboration with the Cornell Lab of Ornithology and others, takes this flow a step further with&nbsp;<a href=\"http://phys.org/news/2015-06-website-birds-photos.html\">machine learning techniques from computer vision</a>&nbsp;to help identify birds. You upload an image of the bird you've seen and Merlin compares features in the photo to those expected to be seen on that day in your location, based on a data set supplied by birders who report their sightings to a site called&nbsp;<a href=\"http://ebird.org/content/ebird/about/\">eBird</a>&nbsp;(9.5 million observations were reported in the month of May alone!).<br><br>&nbsp;</p><p>A quick search identified many papers on machine learning for bird identification. &nbsp;<a href=\"http://ceur-ws.org/Vol-1391/160-CR.pdf\">Improved Automatic Bird Identification through Decision Tree based Feature Selection and Bagging</a>&nbsp;uses audio recordings instead of images for identification. Two researchers at Queen Mary University London argue that&nbsp;<a href=\"https://peerj.com/articles/488/\">Automatic large-scale classification of bird sounds is strongly improved by unsupervised feature learning</a>, and they are even raising money in Kickstarter to build Warblr, a&nbsp;<a href=\"http://phys.org/news/2015-08-birdsong-recognition-app.html\">birdsong recognition app</a>. It will use machine learning to help you figure out which bird just serenaded you (or a prospective mate, really, but you can consider it a gift anyhow). In their larger study they trained and tested a random forest classifer, which is more than ironic given that certainly many of the birdsongs were recorded in forests! Of course, birdsong doesn't work in the case of our task identifying a limp little bird, but many birds are more commonly heard than seen, so this approach offers great advantages.&nbsp;<br><br>&nbsp;</p><p>Technical challenges include noise (you can't exactly get birds into a sound studio) and scalability, given the computational intensity. But some kinds of pattern identification pose even greater challenges. What if you just had a footprint to use? The bird survey at SAS was initiated by a connection with the great folks at&nbsp;<a href=\"http://www.jmp.com/en_us/success/wildtrack.html\">Wildtrack</a>, who use JMP Software from SAS to analyze data for their Footprint Identification Technique, a non-invasive method&nbsp; used to track elusive endangered animals. Wildtrack's&nbsp;<a href=\"https://www.linkedin.com/profile/view?id=AAkAAACcVBgBCUhhmNqWswXKc27A8qsGEaoccLc&amp;authType=NAME_SEARCH&amp;authToken=oBwr&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A10245144%2CauthType%3ANAME_SEARCH%2Cidx%3A1-1-1%2CtarId%3A1444415687463%2Ctas%3Azoe%20jew\">Zoe Jewell</a>&nbsp;and Sky&nbsp; Allibhai have partnered with researchers from NC State University to improve upon footprint identification, and some of their work includes a&nbsp;<a href=\"http://ieeexplore.ieee.org/search/searchresult.jsp?searchWithin=%22Authors%22:.QT.Allibhai,%20S..QT.&amp;newsearch=true\">Manifold learning approach to curve identification with applications to footprint segmentation</a>. It's a tough nut but they keep working to crack it.<br><br>&nbsp;</p><p>My own colleagues in SAS Advanced Analytics R&amp;D are doing interesting work on pattern recognition. &nbsp;<a href=\"https://www.linkedin.com/profile/view?id=AAkAAAZMefcB9WO8wYY2uT3N3luqcPjHo_LAjrk&amp;authType=NAME_SEARCH&amp;authToken=RaZE&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A105675255%2CauthType%3ANAME_SEARCH%2Cidx%3A1-1-1%2CtarId%3A1444417049098%2Ctas%3Apatrick%20\">Patrick Hall</a>,&nbsp;<a href=\"https://www.linkedin.com/profile/view?id=AAkAAAe6GtQBJ6bdEW2tblCIJkIGOIyBrgH5YwI&amp;authType=NAME_SEARCH&amp;authToken=QF3u&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A129637076%2CauthType%3ANAME_SEARCH%2Cidx%3A1-1-1%2CtarId%3A1444417222329%2Ctas%3Ailknur\">Ilknur Kaynar Kabul</a>, and&nbsp;<a href=\"https://www.linkedin.com/profile/view?id=AAkAAAP3CL8BEG7_-6V6sx5bUXppjXJE8iALB3s&amp;authType=NAME_SEARCH&amp;authToken=pxDf&amp;locale=en_US&amp;trk=tyah&amp;trkInfo=clickedVertical%3Amynetwork%2CclickedEntityId%3A66521279%2CauthType%3ANAME_SEARCH%2Cidx%3A1-1-1%2CtarId%3A1444417237177%2Ctas%3Ajorge%20silv\">Jorge Silva</a>&nbsp;used PROC NEURAL in SAS Enterprise Miner to extract representative features from a training set for digit recognition. They built a stacked denoising autoencoder from the Mixed National Institute of Standards and Technologies (MNIST) digits data, which they describe in this paper on&nbsp;<a href=\"https://support.sas.com/resources/papers/proceedings14/SAS313-2014.pdf\">Machine Learning in SAS Enterprise Miner</a>. The code is in&nbsp;<a href=\"https://support.sas.com/resources/papers/proceedings14/SAS313-2014.pdf\">Patrick's GitHub repo</a>. Now if I can just get them interested in bird recognition maybe we'll be able to settle the debate about Hermit vs. Swainson's Thrush......<br><br><br><strong>---------------------------------------------------------------------------</strong><br><br><a href=\"https://www.quora.com/What-are-some-real-world-examples-of-applications-of-machine-learning-in-the-field\"><strong>What are some real-world examples of applications of machine learning in the field?</strong></a><br><br><strong>Author has&nbsp;</strong>been working on machine learning full-time at Microsoft, Facebook , Quora and AirBnB since early 2007, and built as a team member the following real world applications:&nbsp;</p><ol><li>Web page classification: various spam and junk pages, like soft404, parked domain, etc. It runs inside Bing index generation pipeline processing billions of pages.</li><li>Entity extraction from web page and queries, like names, addresses. It was running inside IE toolbar, Bing index generation and query processing.</li><li>Speller correction, running on each queries into Bing.</li><li>Search ranking, optimize for NDCG.</li><li>Facebook Ads ranking: various events prediction, like CTR, negative feedback, conversion, etc. It serves ?1010?1010 page views daily.</li><li>Facebook news feed ranking, with daily ?1011?1011 impression.</li><li>Facebook PYMK (People You Might Know), aka friend suggestions.</li><li>Quora home page feed that you are reading now.</li><li>Quora digest email</li><li>Quora related questions</li><li>AirBnB Search Ranking</li></ol><p><br>Over the years, I have coworkers who had worked on other machine learning problems like: face detection, object recognition, speech recognition, hand writing recognition, machine translation, email spam classification, Xbox game player matching, Amazon shopping recommendation, Netflix movie recommendation, YouTube video recommendations, AdWords, AdSense, etc.&nbsp;<br><br>Quoting an old colleague of mine from MSR, \"it is now the golden age of machine learning.\"<br><br><strong>-----------------------------------------------------------------------------------------</strong><br><br>Actually, there are many. In fact many applications / products we use daily applies ML to serve us. Here's a very small list for you.<br><br><br>&nbsp;</p><ol><li>Search (Google, Bing, Yahoo etc)</li><li>Identification of spam messages</li><li>Recommendations that you get when you go on websites like Amazon, Flipkart, Netflix etc</li><li>Google Now / Siri</li><li>Google News</li><li>Ranking of facebook posts</li><li>Google+ auto tagging the posts (and also ranking of Google+ posts)</li><li>Handwriting classification (smartphone does this)</li><li>Voice Commands / Speech recognition</li><li>Auto identification of faces in photos posted in FB/G+.</li></ol><p><strong>-----------------------------------------------------------------------------------------------------------------------</strong><br><br>Machine Learning usage are abound. They make up core or difficult parts of the software you use on the web or on your desktop everyday. Think of the “do you want to follow” suggestions on twitter and the speech understanding in Apple’s Siri.<br><br>&nbsp;</p><p>Below are some real world examples of machine learning that really ground what machine learning is all about.<br><br>&nbsp;</p><ul><li><strong>Spam Detection</strong>: Given email in an inbox, identify those email messages that are spam and those that are not. Having a model of this problem would allow a program to leave non-spam emails in the inbox and move spam emails to a spam folder. We should all be familiar with this example.</li><li><strong>Face Detection</strong>: Given a digital photo album of many hundreds of digital photographs, identify those photos that include a given person. A model of this decision process would allow a program to organize photos by person. Some cameras and software like iPhoto and facebook has this capability.</li><li><strong>Credit Card Fraud Detection</strong>: Given credit card transactions for a customer in a month, identify those transactions that were made by the customer and those that were not. A program with a model of this decision could refund those transactions that were fraudulent.</li><li><strong>Digit Recognition</strong>: Given a zip codes hand written on envelops, identify the digit for each hand written character. A model of this problem would allow a computer program to read and understand handwritten zip codes and sort envelops by geographic region.</li><li><strong>Speech Understanding</strong>: Given an utterance from a user, identify the specific request made by the user. A model of this problem would allow a program to understand and make an attempt to fulfill that request. The iPhone with Siri, cortana, google now has this capability.</li><li><strong>Product Recommendation</strong>: Given a purchase history for a customer and a large inventory of products, identify those products in which that customer will be interested and likely to purchase. A model of this decision process would allow a program to make recommendations to a customer and motivate product purchases. Amazon has this capability. Also think of Facebook, GooglePlus and Facebook that recommend users to connect with you after you sign-up.</li><li><strong>Medical Diagnosis</strong>: Given the symptoms exhibited in a patient and a database of anonymized patient records, predict whether the patient is likely to have an illness. A model of this decision problem could be used by a program to provide decision support to medical professionals.</li><li><strong>Stock Trading</strong>: Given the current and past price movements for a stock, determine whether the stock should be bought, held or sold. A model of this decision problem could provide decision support to financial analysts.</li><li><strong>Customer Segmentation</strong>: Given the pattern of behavior by a user during a trial period and the past behaviors of all users, identify those users that will convert to the paid version of the product and those that will not. A model of this decision problem would allow a program to trigger customer interventions to persuade the customer to covert early or better engage in the trial.</li><li><strong>Shape Detection</strong>: Given a user hand drawing a shape on a touch screen and a database of known shapes, determine which shape the user was trying to draw. A model of this decision would allow a program to show the platonic version of that shape the user drew to make crisp diagrams. The Instaviz iPhone app does this.</li></ul><p>These examples give a good sense of usage of machine learning. There is a corpus of historic examples, there is a decision that needs to be modeled and a business or domain benefit to having that decision modeled and efficaciously made automatically.<br><br>&nbsp;</p><p>Some of these problems are some of the hardest problems in Artificial Intelligence, such as Natural Language Processing and Machine Vision (doing things that humans do easily). Others are still difficult, but are classic examples of machine learning such as spam detection and credit card fraud detection.<br><br>&nbsp;</p><p>Think about some of your interactions with online and offline software in the last week. I’m sure you could easily guess at another ten or twenty examples of machine learning you have directly or indirectly used.<br><br><br><strong>-----------------------------------------------------------------------------------------------------------------------</strong><br><br>Some additions to the lists:<br><br>Stock Trading Systems<br>Traffic Control Systems<br>Tactical Weapons Control Systems<br>Fraud Prevention (i.e. Credit Cards)<br>Risk Management<br>Medical Diagnosis<br>Robotics (Self-Driving Cars for example)<br>Games Software</p><p><br><br><strong>-----------------------------------------------------------------------------------------------------------------------</strong></p><p><br>Some of the new applications being developed are:<br><br>&nbsp;</p><ul><li>Animal Protection: Cornell University working on detecting whales in the ocean based on audio recordings (<a href=\"http://www.birds.cornell.edu/Page.aspx?pid=1694\">Listening to Endangered Whales</a>)</li><li>Amazon's employee access control mechanism: Amazon is attempting to create an automated system for deciding the level of access allowed to its employees</li><li>Autonomous vehicles: It is being used in autonomous vehicles which use machine vision for controlling the steering mechanism (<a href=\"http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=5548086&amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5548086\">Road detection using support vector machine based on online learning and evaluation</a>)</li></ul><p>There are number of Kaggle contests where the prize money is being offered by large corporations:<br>1. The diabetic Retinopathy detection challenge (<a href=\"https://www.kaggle.com/c/diabetic-retinopathy-detection\">Diabetic Retinopathy Detection</a>)<br>2. The west nile virus detection (<a href=\"https://www.kaggle.com/c/predict-west-nile-virus\">West Nile Virus Prediction</a>)<br>3. Recognising mobile user based on accelerometer data (<a href=\"http://www.kaggle.com/c/accelerometer-biometric-competition\">Accelerometer Biometric Competition</a>)<br><br>and the list goes on and on.<br><br><strong>-----------------------------------------------------------------------------------------------------------------------</strong><br><br><strong>By some anonymous writer on Quora</strong><br><br>I am currently using the Twitter dataset to predict the outcome of the US elections, using sentiment analysis of the tweets. The idea is that positive words being said about say Obama on Twitter perhaps translates to a positive signal for the Democrats, and so on. We used this to predict the outcomes of the primary elections, and the accuracy was somewhere around 80%, which is reasonably good, I'd say.<br><br>If you want a quick usage of the Twitter data without worrying about the sentiment analysis bit, you can use off-the-shelf libraries for that, or you can explore that by yourself as well. It has some very interesting applications on the Twitter data, since you can effectively gauge the views of a large set of population. Which in turn can tell you, for eg, how are the reviews of a particular product or company, or if you are doing this just for fun, how are the reviews of the latest movie, or your favorite rock band. :)<br><br><strong>-----------------------------------------------------------------------------------------------------------------------</strong></p><p><br><br>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-24T16:53:50.544Z"},"updatedDate":{"$date":"2024-06-24T16:53:50.544Z"},"__v":0}
{"_id":{"$oid":"6679af3dad1e724390ad2f11"},"uniqueId":"9bb52d04-4552-452a-b3b6-49190718b9f2","linkedTopicUniqueId":"2b36d61a-e470-4f98-9f50-ed6bd1a38759","name":"Sample Schema","smartContent":{"content":"# Sample Schema\n**Below is sample schema, to be used in mongoose**\n\n``` javascript\nconst mongoose = require('mongoose');\nconst { v4: uuidv4 } = require('uuid'); // Import the v4 function from the uuid library\nconst smartContentSchema = require('./common/SmartContent.schema'); // Import the smartContentSchema\n\n// const smartContentSchema = new mongoose.Schema({\n//   content: {\n//     type: String,\n//     required: true,\n//   },\n//   textOutputType: {\n//     type: String,\n//     enum: ['html', 'yaml', 'markdown', 'text'], // Assuming possible values are 'html' and 'plaintext'\n//     required: true,\n//   },\n//   textInputType: {\n//     type: String,\n//     enum: ['CKEditor', 'TextArea'], // Assuming possible values are 'CKEditor', 'Markdown', and 'Raw'\n//     required: true,\n//   }\n// }, { _id: false });\n\nconst topicSectionSchema = new mongoose.Schema({\n  uniqueId: {\n    type: String,\n    unique: true,\n    default: () => uuidv4(),\n  },\n  linkedTopicUniqueId: { type: String, required: true },\n  name: {\n    type: String,\n    required: true,\n  },\n  smartContent: {\n    type: smartContentSchema,\n    required: true,\n  },\n  order: {type:Number, required:true},\n  tags: [String],\n  createdDate: {\n    type: Date,\n    default: Date.now,\n  },\n  updatedDate: {\n    type: Date,\n    default: Date.now,\n  }\n});\n\nconst topicSchema = new mongoose.Schema({\n  uniqueId: {\n    type: String,\n    unique: true,\n    default: () => uuidv4(),\n    validate: {\n      validator: function(v) {\n        return v.trim().length > 0;\n      },\n      message: 'uniqueId cannot be an empty string or a string that trims to zero length'\n    }\n  },\n  parentId: { type: String, default: '' },\n  name: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return v.trim().length > 0;\n      },\n      message: 'Name cannot be an empty string or a string that trims to zero length'\n    }\n  },\n  description: {\n    type: String,\n  },\n  smartContent: {\n    type: smartContentSchema,\n    //required: true,\n  },\n  tags: [String],\n  occurenceDate: {\n    type: Date, // Assuming you want to store dates\n    default: Date.now, // Default value is the current date and time\n  },\n  createdDate: {\n    type: Date,\n    default: Date.now,\n  },\n  updatedDate: {\n    type: Date,\n    default: Date.now,\n  }\n});\n\n\n\n// Middleware to update the 'updatedDate' field before each 'update' operation\n// topicSchema.pre(\"update\", function (next) {\n//   this.updatedDate = new Date();\n//   next();\n// });\n\n\n\nconst Topic = mongoose.model('Topic', topicSchema);\nconst TopicSection=mongoose.model('TopicSection', topicSectionSchema)\n\nmodule.exports = {Topic,TopicSection};\n\n```","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-24T17:39:09.688Z"},"updatedDate":{"$date":"2024-06-24T17:39:09.688Z"},"__v":0}
{"_id":{"$oid":"667ae88038e689fa7ac1dd18"},"uniqueId":"2d85fbda-066c-49a5-a7e0-f3b94f14a239","linkedTopicUniqueId":"bf4846d2-558a-48fd-a014-0d0e6d9fb2d9","name":"some useful sites for answering development queries","smartContent":{"content":"Here are some useful sites for answering development queries:\n\n- **Stack Overflow** - [https://stackoverflow.com/](https://stackoverflow.com/)\n- **ChatGPT** - [https://chatgpt.com/](https://chatgpt.com/)\n- **GitHub** - [https://github.com/](https://github.com/)\n- **MDN Web Docs** - [https://developer.mozilla.org/](https://developer.mozilla.org/)\n- **W3Schools** - [https://www.w3schools.com/](https://www.w3schools.com/)\n- **GeeksforGeeks** - [https://www.geeksforgeeks.org/](https://www.geeksforgeeks.org/)\n- **Java Documentation** - [https://docs.oracle.com/en/java/](https://docs.oracle.com/en/java/)\n- **ReactJS Documentation** - [https://reactjs.org/docs/getting-started.html](https://reactjs.org/docs/getting-started.html)\n- **Dev.to** - [https://dev.to/](https://dev.to/)\n- **Reddit Programming Subreddits** - [https://www.reddit.com/r/programming/](https://www.reddit.com/r/programming/)\n- **CSS-Tricks** - [https://css-tricks.com/](https://css-tricks.com/)\n- **Design Patterns- Refactoring Guru** - [https://refactoring.guru/design-patterns](https://refactoring.guru/design-patterns)\n- **mkyong** - [https://mkyong.com/](https://mkyong.com/)\n- **Java2Blog** - [https://java2blog.com/](https://java2blog.com/)","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["0baa12aa-483c-4c66-8498-ae4f84e3c453"],"createdDate":{"$date":"2024-06-25T15:55:44.25Z"},"updatedDate":{"$date":"2024-07-11T18:29:48.515Z"},"__v":1}
{"_id":{"$oid":"667d572a6ee82c55d1bb9749"},"uniqueId":"926d4505-7995-4902-b10b-cf7e847af973","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"My weak topics: Needs to prepare","smartContent":{"content":"<ul><li>Communication skills</li><li>My introduction, more focusing on what I did, how I did</li><li>Java 8 Stream programs</li><li>Spring security</li><li>Javascript core concepts&nbsp;<ul><li>Clousure&nbsp;</li><li>Promises</li><li>Prototypes</li></ul></li><li>Practice programs, configurations</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-27T12:12:26.482Z"},"updatedDate":{"$date":"2024-06-27T12:14:31.156Z"},"__v":0}
{"_id":{"$oid":"66811ab3ebb6357c8fe13750"},"uniqueId":"93c3af5e-5079-4432-b736-fd4f65a98f9c","linkedTopicUniqueId":"bf4846d2-558a-48fd-a014-0d0e6d9fb2d9","name":"Java Programs links","smartContent":{"content":"- [How to parse JSON string with Jackson](https://mkyong.com/java/jackson-how-to-parse-json/)\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["9f07fea6-7eeb-4ec0-8adc-b8e4fc387a38","1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-06-30T08:43:31.475Z"},"updatedDate":{"$date":"2024-07-11T18:30:21.975Z"},"__v":1}
{"_id":{"$oid":"66817ac7d87413b76d8efc2b"},"uniqueId":"7d96c123-057f-42df-bc4c-c13481fd022f","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Recent FAQs in interview calls","smartContent":{"content":"# FAQs or Sections\n- Java\n  - Java 8 Stream API\n    - For a given String, please print all characters in descending order with its occurrence count.\n    - For 2 given String containing integers, please sum and print the result.\n  - Exception Handling\n  - Java Memory Management. \n    - Where the member functions of a class resides in memory?\n  - Collection API, HashMap, HashTable, Stack Queue\n  - Spring Rest annotations, Spring Doc, Global Exceptions\n  - Why GraphQL preferred over Rest\n\n- What was your Role and Responsibilities in Last company Zycus\n- What all design patterns you have worked upon\n- Core Java, J2EE, Microservices design patterns\n- How much you can rate yourself in Java, JavaScript, React, Java 8, Design Patterns\n\n- Spring Boot Security\n  - @PreAuthorize, @Secure, @PostAuthorize\n  - Spring Boot Security with JWT implementation\n\n- Asynchronous communication among Microservices\n- Kafka and RabbitMQ implementation\n\n- JavaScript\n  - What is closure\n  - What is promise\n- ReactJS\n  - What is hook?\n  - Compare Angular and ReactJS\n\n- AWS services on which you have worked. Also related use cases and code/configuration examples\n\n- DevOps knowledge and what all things you have done?","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["ba274d1f-19d5-44cd-be6c-71ecf8ed514b","c2423357-5c11-4014-8000-0d9426ede054","b7c634d6-07f3-4cd3-8cc7-1c8c851a55f3","879aecaa-127b-4f1f-ad3a-de0c92bc5900"],"createdDate":{"$date":"2024-06-30T15:33:27.939Z"},"updatedDate":{"$date":"2024-06-30T19:53:08.509Z"},"__v":0}
{"_id":{"$oid":"6681aa15d87413b76d8fcd6b"},"uniqueId":"fd51af2f-6a80-47c7-a22a-78b94d9090e4","linkedTopicUniqueId":"548d21ce-5a2e-4600-9299-a5a1595b1ce3","name":"Old Content [Will be purged soon]","smartContent":{"content":"<p><a href=\"https://www.javatpoint.com/jee-or-j2ee-design-patterns\"><i><strong>JEE or J2EE Design Patterns</strong></i></a><br><br><i><strong>===========================================</strong></i><br><br>J2EE design patterns are built for the developing the Enterprise Web-based Applications.<br><br>&nbsp;</p><p>In J2EE , there are mainly three types of design patterns, which are further divided into their sub-parts:<br><br>&nbsp;</p><p><br>1. Presentation Layer Design Pattern<br><br>&nbsp;</p><ol><li><a href=\"https://www.javatpoint.com/intercepting-filter-pattern\">Intercepting Filter Pattern</a></li><li><a href=\"https://www.javatpoint.com/front-controller-pattern\">Front Controller Pattern</a></li><li>View Helper Pattern</li><li>Composite View Pattern</li></ol><p><br>2. Business Layer Design Pattern<br><br>&nbsp;</p><ol><li>Business Delegate Pattern</li><li>Service Locator Pattern</li><li>Session Facade Pattern</li><li>Transfer Object Pattern</li></ol><p><br>3. Integration Layer Design Pattern<br><br>&nbsp;</p><ol><li>Data Access Object Pattern</li><li>Web Service Broker Pattern</li></ol><p><br><br><i><strong>===========================================</strong></i><br><br><i><strong>Design Patterns</strong></i><br><br><i><strong>Java Design Patterns&nbsp;</strong></i><br><i><strong>1) Creational Pattern&nbsp;</strong></i><br><i><strong>Factory Method Pattern&nbsp;</strong></i><br><i><strong>Abstract Factory Pattern&nbsp;</strong></i><br><i><strong>Singleton Pattern&nbsp;</strong></i><br><i><strong>Prototype Pattern&nbsp;</strong></i><br><i><strong>Builder Pattern&nbsp;</strong></i><br><i><strong>Object Pool Pattern&nbsp;</strong></i><br><i><strong>2) Structural Pattern&nbsp;</strong></i><br><i><strong>Adapter Pattern&nbsp;</strong></i><br><i><strong>Bridge Pattern&nbsp;</strong></i><br><i><strong>Composite Pattern&nbsp;</strong></i><br><i><strong>Decorator Pattern&nbsp;</strong></i><br><i><strong>Facade Pattern&nbsp;</strong></i><br><i><strong>Flyweight Pattern&nbsp;</strong></i><br><i><strong>proxy Pattern&nbsp;</strong></i><br><i><strong>3) Behavioral Pattern&nbsp;</strong></i><br><i><strong>Chain of Responsibility&nbsp;</strong></i><br><i><strong>Command Pattern&nbsp;</strong></i><br><i><strong>Interpreter Pattern&nbsp;</strong></i><br><i><strong>Iterator Pattern&nbsp;</strong></i><br><i><strong>Mediator Pattern&nbsp;</strong></i><br><i><strong>Memento Pattern&nbsp;</strong></i><br><i><strong>Observer Pattern&nbsp;</strong></i><br><i><strong>State Pattern&nbsp;</strong></i><br><i><strong>Strategy Pattern&nbsp;</strong></i><br><i><strong>Template Pattern&nbsp;</strong></i><br><br><i><strong>J2EE Patterns&nbsp;</strong></i><br><i><strong>JEE or J2EE Patterns&nbsp;</strong></i><br><br><i><strong>Presentation Layer&nbsp;</strong></i><br><i><strong>Intercepting Filter Pattern&nbsp;</strong></i><br><i><strong>Front Controller Pattern</strong></i><br><br><i><strong>===========================================</strong></i></p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-30T18:55:17.718Z"},"updatedDate":{"$date":"2024-06-30T18:55:17.718Z"},"__v":0}
{"_id":{"$oid":"6681ae5ed87413b76d8fd863"},"uniqueId":"f9a28783-2230-4b60-9c71-3d9916a45746","linkedTopicUniqueId":"548d21ce-5a2e-4600-9299-a5a1595b1ce3","name":"Another Old Content [Will be purged soon]","smartContent":{"content":"<p><a href=\"https://www.dineshonjava.com/category/design-pattern/\"><i><strong>Design Pattern Archive</strong></i></a><br><br><br><strong>Creational GoF Design Patterns</strong></p><p><a href=\"https://www.dineshonjava.com/creational-design-patterns/\"><strong>Creational Patterns</strong></a><br><a href=\"https://www.dineshonjava.com/factory-method-design-pattern/\"><strong>Factory Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/abstract-factory-design-pattern/\"><strong>Abstract Factory Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/builder-design-pattern/\"><strong>Builder Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/singleton-design-pattern/\"><strong>Singleton Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/prototype-design-pattern/\"><strong>Prototype Pattern</strong></a><br><br><strong>Structural GoF Design Patterns</strong><br><a href=\"https://www.dineshonjava.com/structural-design-patterns/\"><strong>Structural Patterns</strong></a><br><a href=\"https://www.dineshonjava.com/adapter-design-pattern/\"><strong>Adapter Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/bridge-design-patterns/\"><strong>Bridge Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/composite-pattern-design-patterns-java/\"><strong>Composite Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/decorator-design-pattern/\"><strong>Decorator Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/facade-design-pattern/\"><strong>Façade Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/flyweight-pattern-design-patterns-java/\"><strong>Flyweight Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/proxy-pattern-design-patterns-java/\"><strong>Proxy Pattern</strong></a><br><br><strong>Behavioral GoF Design Patterns</strong><br><a href=\"https://www.dineshonjava.com/behavioral-design-pattern/\"><strong>Behavioral Patterns</strong></a><br><a href=\"https://www.dineshonjava.com/observer-pattern-design-patterns-java/\"><strong>Observer Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/chain-responsibility-pattern/\"><strong>Chain of responsibility</strong></a><br><a href=\"https://www.dineshonjava.com/command-pattern-design-patterns-java/\"><strong>Command Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/interpreter-pattern-design-patterns-java/\"><strong>Interpreter Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/iterator-pattern-design-patterns-java/\"><strong>Iterator Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/mediator-pattern-design-patterns-java/\"><strong>Mediator Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/memento-pattern-design-patterns-java/\"><strong>Memento Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/null-object-pattern/\"><strong>Null Object Pattern</strong></a><strong>&nbsp;&nbsp;</strong><br><a href=\"https://www.dineshonjava.com/strategy-pattern-design-patterns-java/\"><strong>Strategy Pattern</strong></a><strong>&nbsp;</strong><br><a href=\"https://www.dineshonjava.com/template-method-pattern-design-java/\"><strong>Template Method</strong></a><strong>&nbsp;</strong><br><a href=\"https://www.dineshonjava.com/visitor-pattern/\"><strong>Visitor Pattern</strong></a><strong>&nbsp;</strong><br><br><strong>Presentation Layer J2EE Patterns</strong><br><a href=\"https://www.dineshonjava.com/intercepting-filter-design-pattern/\"><strong>Intercepting Filter Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/context-object-design-pattern/\"><strong>Context Object Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/front-controller-design-pattern/\"><strong>Front Controller Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/application-controller-design-pattern/\"><strong>Application Controller Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/view-helper-design-pattern/\"><strong>View Helper Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/composite-view-design-pattern/\"><strong>Composite View Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/dispatcher-view-design-pattern/\"><strong>Dispatcher View Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/service-to-worker/\"><strong>Service to Worker Pattern</strong></a><br><br><strong>Business Layer J2EE Patterns</strong><br><a href=\"https://www.dineshonjava.com/business-delegate/\"><strong>Business Delegate Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/service-locator/\"><strong>Service Locator Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/session-facade/\"><strong>Session Facade Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/business-object/\"><strong>Business Object Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/composite-entity-pattern/\"><strong>Composite Entity Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/transfer-object/\"><strong>Transfer Object Pattern</strong></a><br><br><strong>Integration Layer J2EE Patterns</strong><br><a href=\"https://www.dineshonjava.com/data-access-object/\"><strong>Data Access Object</strong></a><br><a href=\"https://www.dineshonjava.com/service-activator/\"><strong>Service Activator Pattern</strong></a><br><a href=\"https://www.dineshonjava.com/web-service-broker/\"><strong>Web Service Broker</strong></a></p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-30T19:13:34.15Z"},"updatedDate":{"$date":"2024-06-30T19:13:34.15Z"},"__v":0}
{"_id":{"$oid":"6681b02bd87413b76d8ff0e5"},"uniqueId":"e79204f4-1f09-4a2d-a16f-3f1f6110c607","linkedTopicUniqueId":"4ad13e04-8da6-4109-a9fe-4782c9c0ca24","name":"Design Patterns Used in Struts and Spring Frameworks","smartContent":{"content":"**Design Patterns Used in Struts and Spring Frameworks**\n\n**Struts Framework:**\n- **Model-View-Controller (MVC)**: Struts is based on the MVC architecture.\n- **Command Pattern**: Used by Struts controller.\n- **Adapter Pattern**: Used by action classes.\n- **Template Method Pattern**: Utilized by the `process()` method of the `RequestProcessor`.\n- **Service to Worker, Dispatcher View, Composite View (Struts Tiles), Front Controller, View Helper, Synchronizer Token**: J2EE design patterns implemented in Struts.\n\n**Struts 2:**\n- **Inversion of Control (IoC)**: Also known as dependency injection.\n- **Front Controller**: Continues to follow the Front Controller pattern.\n- **Command Pattern**: Used by Action classes.\n- **Context Object**: Form Beans act like Context Objects.\n- **Factory Pattern**: Used for loading beans via `BeanFactory` and `ApplicationContext`.\n\n**Spring Framework:**\n- **Inversion of Control (IoC)**: Central to the framework.\n- **Model-View-Controller (MVC)**: Controllers are POJOs, easier for testing.\n- **Front Controller**: Uses `DispatcherServlet`.\n- **View Helper**: Custom JSP tags and velocity macros.\n- **Proxy Pattern**: Used extensively in AOP and remoting.\n- **Singleton Pattern**: Default scope of beans defined in Spring config files.\n- **Template Method Pattern**: Used by classes like `JdbcTemplate`, `JmsTemplate`, `JpaTemplate`.\n\n**Common Java Design Patterns:**\n- **Strategy or Visitor**: Used for algorithms.\n- **Command**: Used for actions.\n- **Bridge**: Used in implementations.\n- **Observer**: Used for request and response handling.\n- **Factory, Abstract Factory, Prototype**: Used for object creation.\n- **Builder**: Used for structuring.\n- **Iterator**: Used for traversal algorithms.\n- **Adapter**: Used for object interfaces.\n- **Decorator, State**: Used for object behavior.\n\n**JSF Framework:**\n- **Singleton**: FacesServlet, Application, and LifeCycle instances.\n- **Model-View-Controller (MVC)**: FacesServlet acts as the controller.\n- **Factory Method**: Used to create objects like `LifeCycleFactory`.\n- **State**: LifeCycle phases.\n- **Composite**: UI components.\n- **Decorator**: Extends behavior of objects dynamically.\n- **Strategy**: Used for rendering UI components.\n- **Template Method**: Provided by PhaseListeners.\n- **Observer**: ActionEvent and ValueChangedEvent.\n\n**Java API Design Patterns:**\n- **MVC**: Extensively used in Swing API.\n- **Factory Method**: `getInstance()` method in `java.util.Calendar`.\n- **Singleton**: `java.lang.System`, `java.sql.DriverManager`.\n- **Prototype**: `clone()` method and `java.lang.Cloneable` interface.\n- **Command**: Supported by `Action` interface and `AbstractAction` class in Swing.\n- **Observer**: Event model in Java 1.1, `java.util.Observable` and `java.util.Observer`.\n- **Adapter**: Used by adapter classes in `java.awt.event`.\n- **Proxy**: Implemented in Java's RMI and IDL features.\n- **Composite**: `Component` and `Container` classes in `java.awt`.\n- **Bridge**: Separation of components in `java.awt` and their counterparts in `java.awt.peer`.\n\n**Enterprise JavaBeans (EJB) Model Patterns:**\n- **Factory Method**: Used in EJB creation model.\n- **Singleton**: Example is `javax.naming.NamingManager`.\n- **Abstract Factory**: `InitialContext`, `InitialContextFactory`.\n- **Builder**: `InitialContextFactoryBuilder`.\n- **Adapter**: Implementation of EJBs that adapt to EJBObject interface.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-30T19:21:15.312Z"},"updatedDate":{"$date":"2024-08-05T15:47:55.792Z"},"__v":0}
{"_id":{"$oid":"6681b0d0d87413b76d900267"},"uniqueId":"6876fe84-0c45-4277-81ac-56a655ce821c","linkedTopicUniqueId":"b9894f64-df1f-4d58-bacb-541360b72b7b","name":"Few more Examples","smartContent":{"content":"<ol><li><strong>Observer&nbsp;</strong>pattern throughout whole swing (Observable, Observer)</li><li><strong>MVC&nbsp;</strong>also in swing</li><li><strong>Adapter pattern:</strong>&nbsp;InputStreamReader and OutputStreamWriter NOTE: ContainerAdapter, ComponentAdapter, FocusAdapter, KeyAdapter, MouseAdapter are&nbsp;<i>not</i>&nbsp;adapters; they are actually Null Objects. Poor naming choice by Sun.</li><li>Decorator pattern (BufferedInputStream can decorate other streams such as FilterInputStream)</li><li>AbstractFactory Pattern for the AWT Toolkit and the Swing pluggable look-and-feel classes</li><li>java.lang.Runtime#getRuntime() is Singleton</li><li>ButtonGroup for Mediator pattern</li><li>Action, AbstractAction may be used for different visual represntations to execute same code -&gt; Command pattern</li><li>Interned Strings or CellRender in JTable for Flyweight Pattern (Also think about various pools - Thread pools, connection pools, EJB object pools - Flyweight is really about management of shared resources)</li><li>The Java 1.0 event model is an example of Chain of Responsibility, as are Servlet Filters.</li><li>Iterator pattern in Collections Framework</li><li>Nested containers in AWT/Swing use the Composite pattern</li><li>Layout Managers in AWT/Swing are an example of Strategy</li></ol><p><br>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-06-30T19:24:00.045Z"},"updatedDate":{"$date":"2024-06-30T19:24:00.045Z"},"__v":0}
{"_id":{"$oid":"66826d5831a904f332dcfd23"},"uniqueId":"4b1f2917-ab9d-4f2d-91c9-e726da3c1a51","linkedTopicUniqueId":"e975e33a-2fa1-4198-a783-9ef1476c3842","name":"Java String coding questions","smartContent":{"content":"Here are a few Java String coding questions:\n\n- Write a method to reverse a given string without using the built-in reverse() function.\n\n```public static String reverseString(String str) { ... }```\n\n- Check if a given string is a palindrome (reads the same backward as forward).\n\n```public static boolean isPalindrome(String str) { ... }```\n\n- Find the first non-repeated character in a given string.\n\n```public static char findFirstNonRepeatedChar(String str) { ... }```\n\n- Write a method to remove all white spaces from a given string.\n\n```public static String removeWhiteSpaces(String str) { ... }```\n\n- Check if two given strings are anagrams of each other (contain the same characters in a different order).\n\n```public static boolean areAnagrams(String str1, String str2) { ... }```\n\n- Find the maximum occurring character in a given string.\n\n```public static char findMaxOccurringChar(String str) { ... }```\n\n- Write a method to convert a given string to snake case (lowercase with underscores separating words).\n\n```public static String toSnakeCase(String str) { ... }```\n\n- Check if a given string contains only digits.\n\n```public static boolean isNumeric(String str) { ... }```\n\nThese questions cover various string manipulation and analysis tasks in Java. Good luck!\n\n```\npackage com.p.examples.util;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class StringUtil {\n\n    public static Map<Character, Integer> countCharacterOccurrences(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n        return charCountMap;\n    }\n\n    /**\n     * a method to reverse a given string without using the built-in reverse() function\n     */\n    public static String reverseString(String str) {\n        StringBuilder reversedString = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            reversedString.append(str.charAt(i));\n        }\n        return reversedString.toString();\n    }\n\n    /**\n     * Check if a given string is a palindrome (reads the same backward as forward)\n     */\n    public static boolean isPalindrome(String str) {\n        boolean result = false;\n        if (str != null && str.trim().length() > 0) {\n            int strLength = str.trim().length();\n            int itr = 0;\n            while (itr <= strLength / 2) {\n                if (str.charAt(itr) != str.charAt(strLength - itr - 1)) {\n                    result = false;\n                    break;\n                }\n                result = true;\n                itr++;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Find the first non-repeated character in a given string\n     */\n    public static char findFirstNonRepeatedChar(String str) {\n        Map<Character, Integer> charCountMap = new LinkedHashMap<>();\n\n        // Populate the character count map\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n\n        // Find the first non-repeated character\n        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n\n        // Return a default value if no non-repeated character is found\n        return '\\0';\n    }\n\n    /**\n     * a method to remove all white spaces from a given string\n     */\n    public static String removeWhiteSpaces(String str) {\n        return str.replaceAll(\"\\\\s\", \"\");\n    }\n\n    /**\n     * Check if two given strings are anagrams of each other (contain the same characters in a different order)\n     * <p>\n     * anagrams require not only the same set of characters but also the same number of each character.\n     * <p>\n     * Here is a simple counterexample:\n     * <p>\n     * str1 = \"aabbcc\"\n     * str2 = \"abc\"\n     * Both strings have the same distinct characters {'a', 'b', 'c'}, \n     * but they are clearly not anagrams because str1 contains more 'a's, 'b's, and 'c's than str2.\n     * <p>\n     * The correct approach should involve counting the frequency of each character in both strings and ensuring these frequencies match. \n      * Here’s an implementation using HashMap for better clarity:\n     */\n\n    public static boolean areAnagrams(String str1, String str2) {\n        if (str1 == null || str2 == null || str1.length() != str2.length()) {\n            return false;\n        }\n\n        Map<Character, Integer> charCountMap1 = getCharCountMap(str1);\n        Map<Character, Integer> charCountMap2 = getCharCountMap(str2);\n\n        return charCountMap1.equals(charCountMap2);\n    }\n    private static Map<Character, Integer> getCharCountMap(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n        return charCountMap;\n    }\n\n    /**\n     * Find the maximum occurring character in a given string.\n     * */\n    public static char findMaxOccurringChar(String str) {\n        if (str == null || str.isEmpty()) {\n            throw new IllegalArgumentException(\"Input string cannot be null or empty\");\n        }\n\n        Map<Character, Integer> charCountMap = new HashMap<>();\n\n        // Populate the character count map\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n\n        // Find the character with the maximum count\n        char maxChar = '\\0';\n        int maxCount = 0;\n        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {\n            if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n                maxChar = entry.getKey();\n            }\n        }\n\n        return maxChar;\n    }\n\n    /**\n     * Write a method to convert a given string to snake case (lowercase with underscores separating words)\n     * */\n    /**\n     * Converts a given string to snake case (lowercase with underscores separating words).\n     *\n     * <p>A string is considered to be in snake case if:\n     * <ul>\n     * <li>It consists entirely of lowercase letters (a-z).</li>\n     * <li>It may contain underscores (_) to separate words or parts of words.</li>\n     * <li>There should be no spaces in the string.</li>\n     * <li>It may contain alphanumeric characters (a-z, 0-9).</li>\n     * <li>It should not start or end with an underscore.</li>\n     * </ul>\n     *\n     * @param str the input string to convert to snake case\n     * @return the input string converted to snake case\n     */\n    public static String toSnakeCase1(String str) {\n        if (str == null || str.isEmpty()) {\n            return str;\n        }\n\n        // Replace all non-alphanumeric characters (except underscores) with underscores\n        String snakeCase = str.replaceAll(\"[^a-zA-Z0-9_]+\", \"_\");\n\n        // Remove leading and trailing underscores\n        snakeCase = snakeCase.replaceAll(\"^_+|_+$\", \"\");\n\n        // Convert to lowercase\n        return snakeCase.toLowerCase();\n    }\n\n    public static String toSnakeCase2(String input) {\n        if (input == null || input.isEmpty()) {\n            return \"\"; // or throw an IllegalArgumentException\n        }\n\n        StringBuilder result = new StringBuilder();\n        boolean first = true;\n\n        for (char c : input.toCharArray()) {\n            if (Character.isWhitespace(c)) {\n                result.append('_');\n                first = true;\n            } else if (Character.isUpperCase(c)) {\n                if (!first) {\n                    result.append('_');\n                }\n                result.append(Character.toLowerCase(c));\n                first = false;\n            } else {\n                result.append(c);\n                first = false;\n            }\n        }\n\n        return result.toString();\n    }\n\n    /**\n     * Checks if a given string contains only digits (0-9).\n     *\n     * @param str the input string to check\n     * @return true if the string contains only digits, false otherwise\n     */\n    public static boolean containsOnlyDigits(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        // Check each character in the string\n        for (char c : str.toCharArray()) {\n            if (!Character.isDigit(c)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if a given string contains only digits (0-9).\n     *\n     * @param str the input string to check\n     * @return true if the string contains only digits, false otherwise\n     */\n    public static boolean containsOnlyDigits2(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        // Use regex to check if the string contains only digits\n        return str.matches(\"\\\\d+\");\n    }\n\n    public static void main(String[] args) {\n        String input = \"123\";\n        boolean res = containsOnlyDigits(input);\n        System.out.println(\"containsOnlyDigits \" + res); // Output: convert_this_string_to_snake_case\n    }\n\n\n}\n\n```\n\n## few coding questions involving `String`, `StringBuffer`, and `StringBuilder`\n\nSure, here are a few coding questions involving `String`, `StringBuffer`, and `StringBuilder`:\n\n### String Questions\n\n1. **Reverse a String**:\n   Write a method to reverse a given string without using any built-in reverse methods.\n\n   ```java\n   public static String reverseString(String str) {\n       // Your code here\n   }\n   ```\n\n2. **Check if a String is a Palindrome**:\n   Write a method to check if a given string is a palindrome (reads the same backward as forward).\n\n   ```java\n   public static boolean isPalindrome(String str) {\n       // Your code here\n   }\n   ```\n\n3. **Count the Number of Vowels and Consonants**:\n   Write a method to count the number of vowels and consonants in a given string.\n\n   ```java\n   public static int[] countVowelsAndConsonants(String str) {\n       // Your code here\n   }\n   ```\n\n4. **Find All Substrings of a String**:\n   Write a method to find and print all substrings of a given string.\n\n   ```java\n   public static void printSubstrings(String str) {\n       // Your code here\n   }\n   ```\n\n5. **Remove a Given Character from a String**:\n   Write a method to remove all occurrences of a given character from a string.\n\n   ```java\n   public static String removeCharacter(String str, char ch) {\n       // Your code here\n   }\n   ```\n\n### StringBuffer Questions\n\n1. **Append a String to Another String**:\n   Write a method that appends one string to another using `StringBuffer`.\n\n   ```java\n   public static StringBuffer appendString(StringBuffer sb, String str) {\n       // Your code here\n   }\n   ```\n\n2. **Insert a Substring at a Specific Position**:\n   Write a method to insert a substring into a given string at a specified position using `StringBuffer`.\n\n   ```java\n   public static StringBuffer insertSubstring(StringBuffer sb, String subStr, int pos) {\n       // Your code here\n   }\n   ```\n\n3. **Replace a Substring**:\n   Write a method to replace a substring in a given string with another substring using `StringBuffer`.\n\n   ```java\n   public static StringBuffer replaceSubstring(StringBuffer sb, String oldSubStr, String newSubStr) {\n       // Your code here\n   }\n   ```\n\n4. **Reverse a String Using StringBuffer**:\n   Write a method to reverse a string using `StringBuffer`.\n\n   ```java\n   public static StringBuffer reverseStringBuffer(StringBuffer sb) {\n       // Your code here\n   }\n   ```\n\n5. **Delete Characters from a String**:\n   Write a method to delete a specified range of characters from a given string using `StringBuffer`.\n\n   ```java\n   public static StringBuffer deleteCharacters(StringBuffer sb, int start, int end) {\n       // Your code here\n   }\n   ```\n\n### StringBuilder Questions\n\n1. **Convert StringBuilder to String**:\n   Write a method to convert a `StringBuilder` object to a `String`.\n\n   ```java\n   public static String convertToString(StringBuilder sb) {\n       // Your code here\n   }\n   ```\n\n2. **Append Characters to StringBuilder**:\n   Write a method to append an array of characters to a `StringBuilder` object.\n\n   ```java\n   public static StringBuilder appendChars(StringBuilder sb, char[] chars) {\n       // Your code here\n   }\n   ```\n\n3. **Find the Capacity of StringBuilder**:\n   Write a method to find and return the current capacity of a `StringBuilder` object.\n\n   ```java\n   public static int getCapacity(StringBuilder sb) {\n       // Your code here\n   }\n   ```\n\n4. **Convert StringBuilder to Uppercase**:\n   Write a method to convert the contents of a `StringBuilder` object to uppercase.\n\n   ```java\n   public static StringBuilder toUpperCase(StringBuilder sb) {\n       // Your code here\n   }\n   ```\n\n5. **Insert a Character at a Specific Position**:\n   Write a method to insert a character at a specified position in a `StringBuilder` object.\n\n   ```java\n   public static StringBuilder insertChar(StringBuilder sb, char ch, int pos) {\n       // Your code here\n   }\n   ```\n\nThese questions cover a range of operations that can be performed on `String`, `StringBuffer`, and `StringBuilder` objects, and they provide a good mix of basic and more challenging tasks.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-07-01T08:48:24.667Z"},"updatedDate":{"$date":"2024-07-02T18:47:51.813Z"},"__v":0}
{"_id":{"$oid":"66826f5331a904f332dd1f2c"},"uniqueId":"c7154490-8b22-4d85-b639-6fb7b6bed2b0","linkedTopicUniqueId":"7c583c12-5141-41fa-b8a8-2357248578ce","name":"Java 8 Stream coding questions","smartContent":{"content":"Here are some Java 8 Stream coding questions:\n\n- Use Streams to find the average age of a list of Person objects.\n\n```public static double averageAge(List<Person> people) { ... }```\n\n- Write a method to filter out strings that contain a specific substring from a list of strings.\n\n```public static List<String> filterStrings(List<String> strings, String substring) { ... }```\n\n- Use Streams to find the maximum value in a list of integers.\n\n```public static int findMax(List<Integer> numbers) { ... }```\n\n- Write a method to group a list of objects by a specific attribute and count the number of objects in each group.\n\n```public static Map<String, Long> groupAndCount(List<Person> people, Function<Person, String> classifier) { ... }```\n\n- Use Streams to find the first n elements of a list.\n\n```public static List<T> findFirstNElements(List<T> list, int n) { ... }```\n\n- Write a method to flatten a list of lists into a single list.\n\n```public static <T> List<T> flatten(List<List<T>> lists) { ... }```\n\n- Use Streams to find the longest string in a list.\n\n```public static String findLongestString(List<String> strings) { ... }```\n\n- Write a method to convert a list of objects to a map where the key is a specific attribute and the value is the object itself.\n\n```public static <T> Map<String, T> toMap(List<T> list, Function<T, String> keyMapper) { ... }```\n\n- Use Streams to find the sum of squares of a list of integers.\n\n```public static int sumOfSquares(List<Integer> numbers) { ... }```\n\n- Write a method to filter out null values from a list of objects.\n\n```public static <T> List<T> filterNulls(List<T> list) { ... }```\n\nThese questions cover various Stream operations like filtering, mapping, reducing, collecting, and more. Good luck!\n\n```\npackage com.p.examples.util;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n@Component\npublic class StreamProcessor {\n\n    /**\n     * Calculates the average age of a list of Person objects.\n     *\n     * @param people the list of Person objects\n     * @return the average age of the people in the list, or 0.0 if the list is empty\n     */\n    public double averageAge(List<Person> people) {\n        return people.stream()\n                .mapToInt(Person::getAge)\n                .average()\n                .orElse(0.0);\n    }\n\n    /**\n     * Groups a list of Person objects by a specific attribute and counts the number of objects in each group.\n     *\n     * @param people     the list of Person objects to be grouped\n     * @param classifier the function to classify the Person objects by a specific attribute\n     * @return a map where the keys are the attribute values and the values are the counts of Person objects in each group\n     */\n    public Map<String, Long> groupAndCount(List<Person> people, Function<Person, String> classifier) {\n        return people.stream()\n                .collect(Collectors.groupingBy(classifier, Collectors.counting()));\n    }\n\n    /**\n     * Filters out strings that contain a specific substring from a list of strings.\n     *\n     * @param strings   the list of strings to be filtered\n     * @param substring the substring to filter out\n     * @return a list of strings that do not contain the specified substring\n     */\n    public List<String> filterStrings(List<String> strings, String substring) {\n        return strings.stream()\n                .filter(s -> s.contains(substring))\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Finds the maximum value in a list of integers.\n     *\n     * @param numbers the list of integers\n     * @return the maximum value in the list, or Integer.MIN_VALUE if the list is empty\n     */\n    public int findMax(List<Integer> numbers) {\n        return numbers.stream()\n                .max(Integer::compareTo)\n                .orElse(Integer.MIN_VALUE);\n    }\n\n    /**\n     * Finds the first n elements of a list.\n     *\n     * @param list the list from which to extract the elements\n     * @param n    the number of elements to extract\n     * @param <T>  the type of elements in the list\n     * @return a list containing the first n elements of the input list\n     */\n    public <T> List<T> findFirstNElements(List<T> list, int n) {\n        return list.stream()\n                .limit(n)\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Flattens a list of lists into a single list.\n     *\n     * @param lists the list of lists to be flattened\n     * @param <T>   the type of elements in the lists\n     * @return a single list containing all the elements from the nested lists\n     */\n    public <T> List<T> flatten(List<List<T>> lists) {\n        return lists.stream()\n                .flatMap(List::stream)\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Finds the longest string in a list of strings.\n     *\n     * @param strings the list of strings\n     * @return the longest string in the list, or null if the list is empty\n     */\n    public String findLongestString(List<String> strings) {\n//        return strings.stream().max((s1, s2) -> Integer.compare(s1.length(), s2.length()))\n//                .orElse(null);\n        return strings.stream().max(Comparator.comparingInt(String::length))\n                .orElse(null);\n    }\n\n    /**\n     * Converts a list of objects to a map where the key is a specific attribute and the value is the object itself.\n     *\n     * @param list      the list of objects to be converted\n     * @param keyMapper the function to extract the key from the object\n     * @param <T>       the type of objects in the list\n     * @return a map where the keys are the specified attribute values and the values are the objects themselves\n     */\n    public <T> Map<String, T> toMap(List<T> list, Function<T, String> keyMapper) {\n        return list.stream()\n                .collect(Collectors.toMap(keyMapper, Function.identity()));\n    }\n\n    /**\n     * Calculates the sum of squares of a list of integers.\n     *\n     * @param numbers the list of integers\n     * @return the sum of squares of the integers in the list\n     */\n    public int sumOfSquares(List<Integer> numbers) {\n        return numbers.stream()\n                .mapToInt(n -> n * n)\n                .sum();\n    }\n\n    /**\n     * Filters out null values from a list of objects.\n     *\n     * @param list the list of objects\n     * @param <T>  the type of objects in the list\n     * @return a list containing only non-null objects from the input list\n     */\n    public <T> List<T> filterNulls(List<T> list) {\n        return list.stream()\n                .filter(item -> item != null)\n                .collect(Collectors.toList());\n    }\n\n}\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\nclass Person {\n    private int age;\n    private String attribute;\n}\n\n```\n\n```\npackage com.p.examples.util;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n\n@SpringBootTest\npublic class StreamProcessorTest {\n\n    @Autowired\n    StreamProcessor streamProcessor;\n\n    @Test\n    void test_averageAge() {\n        List<Person> people = List.of(\n                Person.builder().age(25).build(),\n                Person.builder().age(30).build(),\n                Person.builder().age(35).build()\n        );\n        System.out.println(streamProcessor.averageAge(people)); // Output: 30.0\n    }\n\n    @Test\n    void test_filterStrings() {\n        List<String> strings = List.of(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\");\n        String substring = \"ap\";\n        List<String> filteredStrings = streamProcessor.filterStrings(strings, substring);\n        filteredStrings.forEach(System.out::println); // Output: cherry, elderberry\n    }\n\n    @Test\n    void test_findMax() {\n        List<Integer> numbers = List.of(3, 5, 7, 2, 8);\n        System.out.println(streamProcessor.findMax(numbers)); // Output: 8\n    }\n\n    @Test\n    void test_groupAndCount() {\n        List<Person> people = List.of(\n                Person.builder().attribute(\"group1\").build(),\n                Person.builder().attribute(\"group1\").build(),\n                Person.builder().attribute(\"group2\").build(),\n                Person.builder().attribute(\"group3\").build());\n        Map<String, Long> result = streamProcessor.groupAndCount(people, Person::getAttribute);\n\n        result.forEach((key, count) -> System.out.println(key + \": \" + count));\n        // Output:\n        // group1: 2\n        // group2: 1\n        // group3: 1\n    }\n\n    @Test\n    void test_findFirstNElements() {\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> firstFive = streamProcessor.findFirstNElements(numbers, 5);\n        System.out.println(firstFive); // Output: [1, 2, 3, 4, 5]\n    }\n\n    @Test\n    void test_flatten() {\n        List<List<Integer>> listOfLists = List.of(\n                List.of(1, 2, 3),\n                List.of(4, 5),\n                List.of(6, 7, 8, 9)\n        );\n        List<Integer> flattenedList = streamProcessor.flatten(listOfLists);\n        System.out.println(flattenedList); // Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    }\n\n    @Test\n    void test_findLongestString() {\n        List<String> strings = List.of(\"apple\", \"cherry\", \"banana\", \"date\");\n        System.out.println(streamProcessor.findLongestString(strings)); // Output: \"banana\"\n    }\n\n    @Test\n    void test_toMap() {\n        class Person {\n            private String id;\n            private String name;\n\n            public Person(String id, String name) {\n                this.id = id;\n                this.name = name;\n            }\n\n            public String getId() {\n                return id;\n            }\n\n            public String getName() {\n                return name;\n            }\n\n            @Override\n            public String toString() {\n                return \"Person{id='\" + id + \"', name='\" + name + \"'}\";\n            }\n        }\n\n        List<Person> people = List.of(\n                new Person(\"1\", \"Alice\"),\n                new Person(\"2\", \"Bob\"),\n                new Person(\"3\", \"Charlie\")\n        );\n\n       // ListToMapConverter converter = new ListToMapConverter();\n        Map<String, Person> personMap = streamProcessor.toMap(people, Person::getId);\n\n        personMap.forEach((key, value) -> System.out.println(key + \": \" + value));\n        // Output:\n        // 1: Person{id='1', name='Alice'}\n        // 2: Person{id='2', name='Bob'}\n        // 3: Person{id='3', name='Charlie'}\n    }\n\n    @Test\n    void test_sumOfSquares(){\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5);\n        System.out.println(streamProcessor.sumOfSquares(numbers)); // Output: 55\n    }\n\n    @Test\n    void test_filterNulls(){\n//        List<String> strings = List.of(\"apple\", null, \"banana\", null, \"cherry\");\n        List<String> strings = new ArrayList<>();\n        strings.add(\"apple\");\n        strings.add(null);\n        strings.add(\"banana\");\n        strings.add(null);\n        strings.add(\"cherry\");\n        List<String> filteredStrings = streamProcessor.filterNulls(strings);\n        System.out.println(filteredStrings); // Output: [apple, banana, cherry]\n    }\n}\n\n\n\n```","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-07-01T08:56:51.389Z"},"updatedDate":{"$date":"2024-07-08T19:59:43.221Z"},"__v":0}
{"_id":{"$oid":"668288a531a904f332dd5c48"},"uniqueId":"ffd41a14-9386-44d5-9a2a-c77f8513bef4","linkedTopicUniqueId":"bb5cf245-3735-447f-b2fa-e94be7740ef4","name":"Further questions to consume 3rd party APIs","smartContent":{"content":"- How to convert results in some java response pojo\n- Suppose my 3rd party is failing and giving some 4xx response, how to notify this in my application using my end point\n- Suppose my 3rd party API is configured with some authentication mechanism, like it requires valid Bearer Authorization token in its header. How to design my endpoint to deal with this code change?","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["d6569013-8755-43d0-b878-ceca9068e9a6"],"createdDate":{"$date":"2024-07-01T10:44:53.426Z"},"updatedDate":{"$date":"2024-07-01T10:53:50.428Z"},"__v":1}
{"_id":{"$oid":"6682d30931a904f332ddcea0"},"uniqueId":"af9a2517-6c79-4c9c-9ad2-8ddcdb99ee17","linkedTopicUniqueId":"870cb610-b6e6-4c6f-8394-11809ca11fc6","name":"112 Node.js Interview Questions to Ace Your Interviews","smartContent":{"content":"**Reference Link:** [https://www.simplilearn.com/tutorials/nodejs-tutorial/nodejs-interview-questions](https://www.simplilearn.com/tutorials/nodejs-tutorial/nodejs-interview-questions)\n\n# [Node.js Interview Questions and Answers For Freshers](#q-1)\n[1 What is Node.js? Where can you use it?](#q-1)  \n[2 Why use Node.js?](#q-2)  \n[3 How does Node.js work?](q-3)  \n[4 Why is Node.js Single-threaded?](q-4)  \n[5 If Node.js is single-threaded, then how does it handle concurrency?](q-5)  \n\n\n \n## Q 1\n**1 What is Node.js? Where can you use it?**\n\nNode.js is an open-source, cross-platform JavaScript runtime environment and library to run web applications outside the client’s browser. It is used to create server-side web applications.\n\nNode.js is perfect for data-intensive applications as it uses an asynchronous, event-driven model. You can use  I/O intensive web applications like video streaming sites. You can also use it for developing: Real-time web applications, Network applications, General-purpose applications, and Distributed systems.\n\n## Q 2 \n**2 Why use Node.js?**\nNode.js makes building scalable network programs easy. Some of its advantages include:\n\nIt is generally fast\nIt rarely blocks\nIt offers a unified programming language and data type\nEverything is asynchronous \nIt yields great concurrency\n\n\n## Q 3\nHow does Node.js work?\n\nA web server using Node.js typically has a workflow that is quite similar to the diagram illustrated below. Let’s explore this flow of operations in detail.\n\nTo see the image click this link: [Node.js Architecture Workflow](https://drive.google.com/file/d/1S9FHNBvkyA9AokLEFmrD1YDRV6qdMzZg/view){target=\"_blank\"}  \n\n- Clients send requests to the webserver to interact with the web application. Requests can be non-blocking or blocking:\n- Querying for data\n- Deleting data \n- Updating the data\n- Node.js retrieves the incoming requests and adds those to the Event Queue\n- The requests are then passed one-by-one through the Event Loop. It checks if the requests are simple enough not to require any external resources\n- The Event Loop processes simple requests (non-blocking operations), such as I/O Polling, and returns the responses to the corresponding clients\n\nA single thread from the Thread Pool is assigned to a single complex request. This thread is responsible for completing a particular blocking request by accessing external resources, such as computation, database, file system, etc.\n\nOnce the task is carried out completely, the response is sent to the Event Loop that sends that response back to the client.\n\n## Q 4\n\n\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["c2423357-5c11-4014-8000-0d9426ede054"],"createdDate":{"$date":"2024-07-01T16:02:17.699Z"},"updatedDate":{"$date":"2024-07-01T18:50:12.194Z"},"__v":0}
{"_id":{"$oid":"6683983ccd76ced35fd82a36"},"uniqueId":"b0506e9c-1ee8-423b-965b-f5d56357bb1a","linkedTopicUniqueId":"1203d550-0351-4af0-a88f-a8d0b1d6ae21","name":"Understanding JWT Authentication With Node.js","smartContent":{"content":"# Understanding JWT Authentication With Node.js\n\n> This tutorial on Node.js authentication with JWT will help you learn how to add a security layer when accessing different routes within a Node.js web application. First, we will discuss the basics of JWT (JSON Web Token) and then cover its implementation within a Node.js application.\n\n## Table of Contents\n[What is JSON Web Token?]()  \n[Advantages of Node.js authentication with JWT]()  \n[The Need for JSON Web Token]()  \n[Structure of a JWT]()  \n[JWT Use Cases]()  \n\n\n## What is JSON Web Token?\nJSON Web Token (JWT) is a standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. The compact size makes the tokens easy to transfer through an URL, POST parameter, or inside an HTTP header. The information in a JWT is digitally signed using a secret or public/private key pair.\n\nJWTs can be signed using a secret or a public/private key pair.\n\nJWTs are mainly used for authentication. After a user signs in to an application, the application then assigns JWT to that user. Subsequent requests by the user will include the assigned JWT. This token tells the server what routes, services, and resources the user is allowed to access.\n\n## Advantages of Node.js authentication with JWT\n\nNode.js authentication with JWT has several advantages over the traditional authentication process, primarily the scalability of stateless applications. And since it’s becoming popular among such heavyweights as Facebook and Google, it’s adoption across the industry likely will continue to grow. \n\nOther advantages include:\n\n- Simple verification through a JSON Web Token \n- You can use an authentication service or outsource it\n- Provides more trustworthiness than cookies or sessions\n\n\n## The Need for JSON Web Token\n\nThere are several reasons why applications use JSON Web Tokens for authentication:\n- JWT is an excellent choice to be passed in HTML and HTTP environments due to its smaller footprint when compared to other types of tokens\n- JSON Web Tokens can be signed using a shared secret and also by using public/private key pairs\n- It is easier to work with JWT as JSON parsers are standard in most programming languages\n- JWT is also suitable for implementing authorization in large-scale web applications\n\n\n## Structure of a JWT\nA JSON Web Token consists of:\n\n- Header – Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)\nheader\n\n```\n{\n  \"alg\": \"HS512\",\n  \"typ\": \"JWT\"\n}\n```\n\n- Payload – Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time\npayload\n\n```\n{\n  \"sub\": \"0987654321\",\n  \"name\": \"Prem Chopra\",\n  \"admin\": \"true\"\n}\n\n```\n\n\n- Signature – Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret\n\n```\nHMACSMA512(\n  base64UrlEncode(header) + \".\" + \n  base64UrlEncode(payload), secret\n)\n```\n\n## JWT Use Cases\n\nSome scenarios where JSON Web Tokens are useful:\n\n- **Authorization** - This is the most common scenario for using JWT. Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token.\n\n- **Information Exchange** - JSON Web Tokens are a good way of securely transmitting information between parties.\n\n\n## Node.js Application with JWT\n\nThe following application uses JWT authentication allowing users to access routes by logging in.\n\n**index.js**\n\nCreate a file called index.js in the project directory. This is the only file that we create and work on in this project in order to keep things simple. Our main goal is to understand how JWTs work in a Node.js application.\n\nSo, let’s go ahead and understand what each snippet of code does in this file.\n\n- We are importing a couple of modules that we will be needing in the application: express, and jwt.\n\n```\nconst express = require(\"express\");\n\nconst jwt = require(\"jsonwebtoken\");\n```\n\n- We can add these modules using the terminal inside VSCode.\n- After that, we create an express application variable.\n\n```const app = express();```\n\n- We then define an app.get() method to create a json string with the desired message. \n\n```\napp.get(\"/api\", (req, res) => {\n\n  res.json({\n\n    message: \"Hey, there! Welcome to this API service\"\n\n  });\n\n});\n```\n\n- app.post() is a POST request and in the method parameters, we add URL, verifyToken, and request and response values.\n- verify() method then takes the request token as input and verifies whether it is correct. We set it to print an error message if it doesn’t match; otherwise, we print a message on the screen stating that the post was created.\n\n```\napp.post(\"/api/posts\", verifyToken, (req, res) => {\n\n  jwt.verify(req.token, \"secretkey\", (err, authData) => {\n\n    if (err) {\n\n      res.sendStatus(403);\n\n    } else {\n\n      res.json({\n\n        message: \"POST created...\",\n\n        authData\n\n      });\n\n    }\n\n  });\n\n});\n```\n\n\n- We define another POST method that creates a route for user login at the specified URL.\nJWT then uses the sign() method to create a JSON Web Token for that user and returns the token in the form of a JSON string.\n\n```\napp.post(\"/api/login\", (req, res) => {\n\n  const user = {\n\n    id: 1,\n\n    username: \"john\",\n\n    email: \"john@gmail.com\"\n\n  };\n\n  jwt.sign({ user: user }, \"secretkey\", (err, token) => {\n\n    res.json({\n\n      token\n\n    });\n\n  });\n\n});\n\n```\n\n- Finally, we define the method verifyToken() that takes care of the token verification process. \n- bearerHeader variable contains the token that is passed in the authorization field of request header.\n- We add an if condition that checks whether the token exists in the authorization field; if not, we send an error status to the user.\n\n```\nfunction verifyToken(req, res, next) {\n\n  const bearerHeader = req.headers[\"authorization\"];\n\n  if (typeof bearerHeader !== \"undefined\") {\n\n    const bearerToken = bearerHeader.split(\" \")[1];\n\n    req.token = bearerToken;\n\n    next();\n\n  } else {\n\n    res.sendStatus(403);\n\n  }\n\n}\n```\n\n- In the end, we set the server to listen to Port 3000.\n\n```app.listen(3000, () => console.log(\"Server started\"));```\n\n- That’s all the code we are going to write to develop this application. Next, we’ll run the application by using the command node index.js in the terminal of the VS Code.\n\n- The terminal should look like this after using the above command:\n\n- If your terminal also displays Server started, it means that the server is running properly. \n\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["d6569013-8755-43d0-b878-ceca9068e9a6"],"createdDate":{"$date":"2024-07-02T06:03:40.473Z"},"updatedDate":{"$date":"2024-07-02T06:37:38.029Z"},"__v":1}
{"_id":{"$oid":"66842f0100a02cb7f1c2b031"},"uniqueId":"3b903767-9403-4274-9412-f7feb18a8e34","linkedTopicUniqueId":"e975e33a-2fa1-4198-a783-9ef1476c3842","name":"Old Content [Will be purged soon]","smartContent":{"content":"<p>Java Strings<br><br>&nbsp;</p><ul><li><a href=\"http://tutorials.jenkov.com/java/strings.html#creating-a-string\">Creating a String</a><ul><li><a href=\"http://tutorials.jenkov.com/java/strings.html#java-string-literals\">Java String Literals</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#escape-characters\">Escape Characters</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#string-literals-as-constants-or-singletons\">String Literals as Constants or Singletons</a></li></ul></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#concatenating-strings\">Concatenating Strings</a><ul><li><a href=\"http://tutorials.jenkov.com/java/strings.html#string-concatenation-performance\">String Concatenation Performance</a></li></ul></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#string-length\">String Length</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#substring\">Substrings</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#indexof\">Searching in Strings With indexOf()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#comparing-strings\">Comparing Strings</a><ul><li><a href=\"http://tutorials.jenkov.com/java/strings.html#equals\">equals()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#equalsIgnoreCase\">equalsIgnoreCase()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#startswith-endswith\">startsWith() and endsWith()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#compareto\">compareTo()</a></li></ul></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#trimming-strings-with-trim\">Trimming Strings With trim()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#replacing-characters-in-strings-with-replace\">Replacing Characters in Strings With replace()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#splitting-strings\">Splitting Strings With split()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#converting-numbers-to-strings-with-valueof\">Converting Numbers to Strings With valueOf()</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#converting-objects-to-strings\">Converting Objects to Strings</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#getting-characters-and-bytes\">Getting Characters and Bytes</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#converting-to-uppercase-and-lowercase\">Converting to Uppercase and Lowercase</a></li><li><a href=\"http://tutorials.jenkov.com/java/strings.html#additional-methods\">Additional Methods</a></li></ul><p><br>&nbsp;</p><p>The&nbsp;<i>Java String</i>&nbsp;data type can contain a sequence (string) of characters, like pearls on a string. Strings are how you work with text in Java.<br><br>&nbsp;</p><p>Strings in Java are represented internally using bytes, encoded as UTF-16. UTF-16 uses 2 bytes to represent a single character. UTF is a character encoding that can represent characters from a lot of different languages (alphabets).<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Creating a String</p><p>Strings in Java are objects. Therefore you need to use the new operator to create a new Java String object. Here is a Java String instantiation (creation) example:<br><br>&nbsp;</p><p>String myString = new String(\"Hello World\");&nbsp;<br>&nbsp;</p><p>The text inside the quotes is the text the String object will contain.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Java String Literals<br><br>&nbsp;</p><p>Java has a shorter way of creating a new String:<br><br>&nbsp;</p><p>String myString = \"Hello World\";&nbsp;<br>&nbsp;</p><p>Instead of passing the text \"Hello World\" as a parameter to the String constructor, you can just write the text itself inside the double quote characters. This is called a String literal. The Java compiler will internally figure out how to create a new Java String representing the given text.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Escape Characters<br><br>&nbsp;</p><p>Java Strings literals accepts a set of&nbsp;<i>escape characters</i>&nbsp;which are translated into special characters in the created String. These escape characters are:<br><br>&nbsp;</p><p><strong>Esc. CharDescription</strong><br>\\\\ | Translated into a single \\ character in the String<br>\\t | Translated into a single tab character in the string<br>\\r | Translated into a single carriage return character in the string<br>\\n | Translated into a single new line character in the string</p><p>Here is an example of creating a Java String using escape characters:<br><br>&nbsp;</p><p>String text = \"\\tThis text is one tab in.\\r\\n\";&nbsp;<br>&nbsp;</p><p>This String literal will result in a String that starts with a tab character and ends with a carriage return and a new line character.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>String Literals as Constants or Singletons<br><br>&nbsp;</p><p>If you use the same string (e.g. \"Hello World\") in other String variable declarations, the Java virtual machine may only create a single String instance in memory. The string literal thus becomes a de facto constant or singleton. The various different variables initialized to the same constant string will point to the same String instance in memory. Here is a Java String constant / singleton example:<br><br>&nbsp;</p><p>String myString1 = \"Hello World\"; String myString2 = \"Hello World\";&nbsp;<br>&nbsp;</p><p>In this case the Java virtual machine will make both myString1 and myString2 point to the same String object.<br><br>&nbsp;</p><p>More precisely, objects representing Java String literals are obtained from a constant String pool which the Java virtual machine keeps internally. That means, that even classes from different projects compiled separately, but which are used in the same application may share constant String objects. The sharing happens at runtime. It is not a compile time feature.<br><br>&nbsp;</p><p>If you want to be sure that two String variables point to separate String objects, use the new operator like this:<br><br>&nbsp;</p><p>String myString1 = new String(\"Hello World\"); String myString2 = new String(\"Hello World\");&nbsp;<br>&nbsp;</p><p>Even though the value (text) of the two Java Strings created is the same, the Java virtual machine will create two different objects in memory to represent them.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Concatenating Strings</p><p>Concatenating Strings means appending one string to another. Strings in Java are immutable meaning they cannot be changed once created. Therefore, when concatenating two Java String objects to each other, the result is actually put into a third String object.<br><br>&nbsp;</p><p>Here is a Java String concatenation example:<br><br>&nbsp;</p><p>String one = \"Hello\"; String two = \"World\"; String three = one + \" \" + two;&nbsp;<br>&nbsp;</p><p>The content of the String referenced by the variable three will be Hello World; The two other Strings objects are untouched.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>String Concatenation Performance<br><br>&nbsp;</p><p>When concatenating Strings you have to watch out for possible performance problems. Concatenating two Strings in Java will be translated by the Java compiler to something like this:<br><br>&nbsp;</p><p>String one = \"Hello\"; String two = \" World\"; String three = new StringBuilder(one).append(two).toString();&nbsp;<br>&nbsp;</p><p>As you can see, a new StringBuilder is created, passing along the first String to its constructor, and the second String to its append() method, before finally calling the toString() method. This code actually creates two objects: A StringBuilder instance and a new String instance returned from the toString()method.<br><br>&nbsp;</p><p>When executed by itself as a single statement, this extra object creation overhead is insignificant. When executed inside a loop, however, it is a different story.<br><br>&nbsp;</p><p>Here is a loop containing the above type of String concatenation:<br><br>&nbsp;</p><p>String[] strings = new String[]{\"one\", \"two\", \"three\", \"four\", \"five\" }; String result = null; for(String string : strings) { &nbsp; &nbsp;result = result + string; }&nbsp;<br>&nbsp;</p><p>This code will be compiled into something similar to this:<br><br>&nbsp;</p><p>String[] strings = new String[]{\"one\", \"two\", \"three\", \"four\", \"five\" }; String result = null; for(String string : strings) { &nbsp; &nbsp;result = new StringBuilder(result).append(string).toString(); }&nbsp;<br>&nbsp;</p><p>Now, for every iteration in this loop a new StringBuilder is created. Additionally, a String object is created by the toString() method. This results in a small object instantiation overhead per iteration: One StringBuilder object and one String object. This by itself is not the real performance killer though. But something else related to the creation of these objects is.<br><br>&nbsp;</p><p>Every time the new StringBuilder(result) code is executed, the StringBuilder constructor copies all characters from the result String into the StringBuilder. The more iterations the loop has, the bigger the result String grows. The bigger the result String grows, the longer it takes to copy the characters from it into a new StringBuilder, and again copy the characters from the StringBuilder into the temporary String created by the toString() method. In other words, the more iterations the slower each iteration becomes.<br><br>&nbsp;</p><p>The fastest way of concatenating Strings is to create a StringBuilder once, and reuse the same instance inside the loop. Here is how that looks:<br><br>&nbsp;</p><p>String[] strings = new String[]{\"one\", \"two\", \"three\", \"four\", \"five\" }; StringBuilder temp &nbsp;= new StringBuilder(); for(String string : strings) { &nbsp; &nbsp;temp.append(string); } String result = temp.toString();&nbsp;<br>&nbsp;</p><p>This code avoids both the StringBuilder and String object instantiations inside the loop, and therefore also avoids the two times copying of the characters, first into the StringBuilder and then into a String again.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>String Length</p><p>You can obtain the length of a String using the length() method. The length of a String is the number of characters the String contains - not the number of bytes used to represent the String. Here is an example:<br><br>&nbsp;</p><p>String string = \"Hello World\"; int length = string.length();&nbsp;<br>&nbsp;</p><p><br>&nbsp;</p><p><br>Substrings</p><p>You can extract a part of a String. This is called a substring. You do so using the substring() method of the String class. Here is an example:<br><br>&nbsp;</p><p>String string1 = \"Hello World\"; String substring = string1.substring(0,5);&nbsp;<br>&nbsp;</p><p>After this code is executed the substring variable will contain the string Hello.<br><br>&nbsp;</p><p>The substring() method takes two parameters. The first is the character index of the first character to be included in the substring. The second is the index of the character&nbsp;<i>after</i>&nbsp;the last character to be included in the substring. Remember that. The parameters mean \"from - including, to -&nbsp;<i>excluding</i>\". This can be a little confusing until you memorize it.<br><br>&nbsp;</p><p>The first character in a String has index 0, the second character has index 1 etc. The last character in the string has has the index String.length() - 1.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Searching in Strings With indexOf()</p><p>You can search for substrings in Strings using the indexOf() method. Here is an example:<br><br>&nbsp;</p><p>String string1 = \"Hello World\"; int index = string1.indexOf(\"World\");&nbsp;<br>&nbsp;</p><p>The index variable will contain the value 6 after this code is executed. The indexOf() method returns the index of where the first character in the first matching substring is found. In this case the W of the matched substring World was found at index 6.<br><br>&nbsp;</p><p>If the substring is not found within the string, the indexOf() method returns -1;<br><br>&nbsp;</p><p>There is a version of the indexOf() method that takes an index from which the search is to start. That way you can search through a string to find more than one occurrence of a substring. Here is an example:<br><br>&nbsp;</p><p>String theString = \"is this good or is this bad?\"; String substring = \"is\"; int index = theString.indexOf(substring); while(index != -1) { &nbsp; &nbsp;System.out.println(index); &nbsp; &nbsp;index = theString.indexOf(substring, index + 1); }&nbsp;<br>&nbsp;</p><p>This code searches through the string \"is this good or is this bad?\" for occurrences of the substring \"is\". It does so using the indexOf(substring, index) method. The index parameter tells what character index in the String to start the search from. In this example the search is to start 1 character after the index where the previous occurrence was found. This makes sure that you do not just keep finding the same occurrence.<br><br>&nbsp;</p><p>The output printed from this code would be:<br><br>&nbsp;</p><p>0 5 16 21&nbsp;<br>&nbsp;</p><p>The substring \"is\" is found in four places. Two times in the words \"is\", and two times inside the word \"this\".<br><br>&nbsp;</p><p>The Java String class also has a lastIndexOf() method which finds the last occurrence of a substring. Here is an example:<br><br>&nbsp;</p><p>String theString = \"is this good or is this bad?\"; String substring = \"is\"; int index = theString.lastIndexOf(substring); System.out.println(index);&nbsp;<br>&nbsp;</p><p>The output printed from this code would be 21 which is the index of the last occurrence of the substring \"is\".<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Comparing Strings</p><p>Java Strings also have a set of methods used to compare Strings. These methods are:<br><br>&nbsp;</p><ul><li>equals()</li><li>equalsIgnoreCase()</li><li>startsWith()</li><li>endsWith()</li><li>compareTo()</li></ul><p><br>&nbsp;</p><p><br>equals()<br><br>&nbsp;</p><p>The equals() method tests if two Strings are exactly equal to each other. If they are, the equals() method returns true. If not, it returns false. Here is an example:<br><br>&nbsp;</p><p>String one &nbsp; = \"abc\"; String two &nbsp; = \"def\"; String three = \"abc\"; String four &nbsp;= \"ABC\"; System.out.println( one.equals(two) ); System.out.println( one.equals(three) ); System.out.println( one.equals(four) );&nbsp;<br>&nbsp;</p><p>The two strings one and three are equal, but one is not equal to two or to four. The case of the characters must match exactly too, so lowercase characters are not equal to uppercase characters.<br><br>&nbsp;</p><p>The output printed from the code above would be:<br><br>&nbsp;</p><p>false true false&nbsp;<br>&nbsp;</p><p><br>&nbsp;</p><p><br>equalsIgnoreCase()<br><br>&nbsp;</p><p>The String class also has a method called equalsIgnoreCase() which compares two strings but ignores the case of the characters. Thus, uppercase characters are considered to be equal to their lowercase equivalents.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>startsWith() and endsWith()<br><br>&nbsp;</p><p>The startsWith() and endsWith() methods check if the String starts with a certain substring. Here are a few examples:<br><br>&nbsp;</p><p>String one = \"This is a good day to code\"; System.out.println( one.startsWith(\"This\") &nbsp; &nbsp;); System.out.println( one.startsWith(\"This\", 5) ); System.out.println( one.endsWith &nbsp;(\"code\") &nbsp; &nbsp;); System.out.println( one.endsWith &nbsp;(\"shower\") &nbsp;);&nbsp;<br>&nbsp;</p><p>This example creates a String and checks if it starts and ends with various substrings.<br><br>&nbsp;</p><p>The first line (after the String declaration) checks if the String starts with the substring \"This\". Since it does, the startsWith() method returns true.<br><br>&nbsp;</p><p>The second line checks if the String starts with the substring \"This\" when starting the comparison from the character with index 5. The result is false, since the character at index 5 is \"i\".<br><br>&nbsp;</p><p>The third line checks if the String ends with the substring \"code\". Since it does, the endsWith() method returns true.<br><br>&nbsp;</p><p>The fourth line checks if the String ends with the substring \"shower\". Since it does not, the endsWith()method returns false.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>compareTo()<br><br>&nbsp;</p><p>The compareTo() method compares the String to another String and returns an int telling whether this String is smaller, equal to or larger than the other String. If the String is earlier in sorting order than the other String, compareTo() returns a negative number. If the String is equal in sorting order to the other String, compareTo() returns 0. If the String is after the other String in sorting order, the compareTo() metod returns a positive number.<br><br>&nbsp;</p><p>Here is an example:<br><br>&nbsp;</p><p>String one &nbsp; = \"abc\"; String two &nbsp; = \"def\"; String three = \"abd\"; System.out.println( one.compareTo(two) &nbsp; ); System.out.println( one.compareTo(three) );&nbsp;<br>&nbsp;</p><p>This example compares the one String to two other Strings. The output printed from this code would be:<br><br>&nbsp;</p><p>-3 -1&nbsp;<br>&nbsp;</p><p>The numbers are negative because the one String is earlier in sorting order than the two other Strings.<br><br>&nbsp;</p><p>The compareTo() method actually belongs to the Comparable interface. This interface is described in more detail in my tutorial about&nbsp;<a href=\"http://tutorials.jenkov.com/java-collections/sorting.html\"><strong>Sorting</strong></a>.<br><br>&nbsp;</p><p>You should be aware that the compareTo() method may not work correctly for Strings in different languages than English. To sort Strings correctly in a specific language, use a&nbsp;<a href=\"http://tutorials.jenkov.com/java-internationalization/collator.html\"><strong>Collator</strong></a>.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Trimming Strings With trim()</p><p>The Java String class contains a method called trim() which can trim a string object. By&nbsp;<i>trim</i>&nbsp;is meant to remove white space characters at the beginning and end of the string. White space characters include space, tab and new lines. Here is a Java String trim() example:<br><br>&nbsp;</p><p>String text &nbsp; &nbsp;= \" &nbsp;And he ran across the field &nbsp; \"; String trimmed = text.trim();&nbsp;<br>&nbsp;</p><p>After executing this code the trimmed variable will point to a String instance with the value<br><br>&nbsp;</p><p>\"And he ran across the field\"&nbsp;<br>&nbsp;</p><p>The white space characters at the beginning and end of the String object have been removed. The white space character inside the String have not been touched. By&nbsp;<i>inside</i>&nbsp;is meant between the first and last non-white-space character.<br><br>&nbsp;</p><p>The trim() method does not modify the String instance. Instead it returns a new Java String object which is equal to the String object it was created from, but with the white space in the beginning and end of the String removed.<br><br>&nbsp;</p><p>The trim() method can be very useful to trim text typed into input fields by a user. For instance, the user may type in his or her name and accidentally put an extra space after the last word, or before the first word. The trim() method is an easy way to remove such extra white space characters.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Replacing Characters in Strings With replace()</p><p>The Java String class contains a method named replace() which can replace characters in a String. The replace() method does not actually replace characters in the existing String. Rather, it returns a new String instance which is equal to the String instance it was created from, but with the given characters replaced. Here is a Java String replace() example:<br><br>&nbsp;</p><p>String source &nbsp; = \"123abc\"; String replaced = source.replace('a', '@');&nbsp;<br>&nbsp;</p><p>After executing this code the replaced variable will point to a String with the text:<br><br>&nbsp;</p><p>123@bc&nbsp;<br>&nbsp;</p><p>The replace() method will replace all character matching the character passed as first parameter to the method, with the second character passed as parameter to the replace() method.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Splitting Strings With split()</p><p>The Java String class contains a split() method which can be used to split a String into an&nbsp;<a href=\"http://tutorials.jenkov.com/java/arrays.html\"><strong>array</strong></a>&nbsp;of String objects. Here is a Java String split() example:<br><br>&nbsp;</p><p>String &nbsp; source = \"A man drove with a car.\"; String[] occurrences = source.split(\"a\");&nbsp;<br>&nbsp;</p><p>After executing this Java code the occurrences array would contain the String instances:<br><br>&nbsp;</p><p>\"A m\" \"n drove with \" \" c\" \"r.\"&nbsp;<br>&nbsp;</p><p>The source String has been split on the a characters. The Strings returned do not contain the a characters. The a characters are considered delimiters to split the String by, and the delimiters are not returned in the resulting String array.<br><br>&nbsp;</p><p>The parameter passed to the split() method is actually a&nbsp;<a href=\"http://tutorials.jenkov.com/java-regex/index.html\"><strong>Java regular expression</strong></a>. Regular expressions can be quite advanced. The regular expression above just matched all a characters. It even only matched lowercase a characters.<br><br>&nbsp;</p><p>The String split() method exists in a version that takes a limit as a second parameter. Here is a Java String split() example using the limit parameter:<br><br>&nbsp;</p><p>String &nbsp; source = \"A man drove with a car.\"; int &nbsp; &nbsp; &nbsp;limit &nbsp;= 2; String[] occurrences = source.split(\"a\", limit);&nbsp;<br>&nbsp;</p><p>The limit parameter sets the maximum number of elements that can be in the returned array. If there are more matches of the regular expression in the String than the given limit, then the array will contain limit - 1 matches, and the last element will be the rest of the String from the last of the limit - 1matches. So, in the example above the returned array would contain these two Strings:<br><br>&nbsp;</p><p>\"A m\" \"n drove with a car.\"&nbsp;<br>&nbsp;</p><p>The first String is a match of the a regular expression. The second String is the rest of the String after the first match.<br><br>&nbsp;</p><p>Running the example with a limit of 3 instead of 2 would result in these Strings being returned in the resulting String array:<br><br>&nbsp;</p><p>\"A m\" \"n drove with \" \" car.\"&nbsp;<br>&nbsp;</p><p>Notice how the last String still contains the a character in the middle. That is because this String represents the rest of the String after the last match (the a after 'n drove with ').<br><br>&nbsp;</p><p>Running the example above with a limit of 4 or higher would result in only the Split strings being returned, since there are only 4 matches of the regular expression a in the String.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Converting Numbers to Strings With valueOf()</p><p>The Java String class contains a set of overloaded static methods named valueOf() which can be used to convert a number to a String. Here are some simple Java String valueOf() examples:<br><br>&nbsp;</p><p>String intStr = String.valueOf(10); System.out.println(\"intStr = \" + intStr); String flStr = String.valueOf(9.99); System.out.println(\"flStr = \" + flStr);&nbsp;<br>&nbsp;</p><p>The output printed from this code would be:<br><br>&nbsp;</p><p>intStr = 10 flStr = 9.99&nbsp;<br>&nbsp;</p><p><br>&nbsp;</p><p><br>Converting Objects to Strings</p><p>The Object class contains a method named toString(). Since all Java classes extends (inherits from) the Object class, all objects have a toString() method. This method can be used to create a String representation of the given object. Here is a Java toString() example:<br><br>&nbsp;</p><p>Integer integer = new Integer(123); String intStr = integer.toString();&nbsp;<br>&nbsp;</p><p>Note: For the toString() method to return a sane String representation of the given object, the class of the object must have overridden the toString() method. If not, the default toString() method (inherited from the Object class) will get called. The default toString() method does not provide that much useful information. Many built-in Java classes have a sensible toString() method already.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Getting Characters and Bytes</p><p>It is possible to get a character at a certain index in a String using the charAt() method. Here is an example:<br><br>&nbsp;</p><p>String theString = \"This is a good day to code\"; System.out.println( theString.charAt(0) ); System.out.println( theString.charAt(3) );&nbsp;<br>&nbsp;</p><p>This code will print out:<br><br>&nbsp;</p><p>T s&nbsp;<br>&nbsp;</p><p>since these are the characters located at index 0 and 3 in the String.<br><br>&nbsp;</p><p>You can also get the byte representation of the String method using the getBytes() method. Here are two examples:<br><br>&nbsp;</p><p>String theString = \"This is a good day to code\"; byte[] bytes1 = theString.getBytes(); byte[] bytes2 = theString.getBytes(Charset.forName(\"UTF-8\");&nbsp;<br>&nbsp;</p><p>The first getBytes() call return a byte representation of the String using the default character set encoding on the machine. What the default character set is depends on the machine on which the code is executed. Therefore it is generally better to explicitly specify a character set to use to create the byte representation (as in the next line).<br><br>&nbsp;</p><p>The second getBytes() call return a UTF-8 byte representation of the String.<br><br>&nbsp;</p><p><br>&nbsp;</p><p><br>Converting to Uppercase and Lowercase</p><p>You can convert Strings to uppercase and lowercase using the methods toUpperCase() and toLowerCase(). Here are two examples:<br><br>&nbsp;</p><p>String theString = \"This IS a mix of UPPERcase and lowerCASE\"; String uppercase = theString.toUpperCase(); String lowercase = theString.toLowerCase();&nbsp;<br>&nbsp;</p><p><br>&nbsp;</p><p><br>Additional Methods</p><p>The String class has several other useful methods than the ones described in this tutorial. You can find them all in the String JavaDoc.<br><br>&nbsp;</p><p><br>&nbsp;</p><p>Next:&nbsp;<a href=\"http://tutorials.jenkov.com/java/operations.html\"><strong>Java Operations</strong></a></p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-07-02T16:46:57.356Z"},"updatedDate":{"$date":"2024-07-02T16:46:57.356Z"},"__v":0}
{"_id":{"$oid":"66853eb597533536c342cf5a"},"uniqueId":"55772b48-876a-4413-9010-4964ae0afce5","linkedTopicUniqueId":"86f3ba20-6d99-45b3-9b7d-b012dac6eca2","name":"Differences Between Static and Instance Initializer Block","smartContent":{"content":"<div style=\"width: 50%; margin: 20px auto;\">\n    <table style=\"width: 100%; border-collapse: collapse;\">\n        <tr>\n            <th style=\"border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;\">Static Block</th>\n            <th style=\"border: 1px solid #ddd; padding: 8px; background-color: #f2f2f2;\">Instance Initializer Block</th>\n        </tr>\n        <tr>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It executes during class loading</td>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It executes during class instantiation</td>\n        </tr>\n        <tr>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It can only use static variables</td>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It can use static or non-static (instance variables).</td>\n        </tr>\n        <tr>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It can not use `this`</td>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It can use `this`</td>\n        </tr>\n        <tr>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It executes only once during the entire execution of the program when the class loads into the memory</td>\n            <td style=\"border: 1px solid #ddd; padding: 8px;\">It can run many times whenever there is a call to the constructor</td>\n        </tr>\n    </table>\n</div>","textOutputType":"html","textInputType":"TextArea"},"order":9999,"tags":["89a404ed-7bd7-41e4-9a16-fa96ffea1b70"],"createdDate":{"$date":"2024-07-03T12:06:13.731Z"},"updatedDate":{"$date":"2024-07-03T12:06:13.731Z"},"__v":0}
{"_id":{"$oid":"66854c4dc0211d1fe707a2f4"},"uniqueId":"754fa28e-6dcb-4778-a738-bab1cd079e86","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Pre-requisite for key-skills mentioned in Introduction","smartContent":{"content":"Here are the prerequisites for each of the topics mentioned in key-skills:\n\n### Spring Boot\n- Java (Core)\n- Spring Framework Basics (Dependency Injection, Aspect-Oriented Programming)\n- Maven or Gradle\n- Basic understanding of web development (HTTP, REST, MVC)\n\n### J2EE\n- Core Java\n- Servlets and JSP\n- JDBC (Java Database Connectivity)\n- EJB (Enterprise JavaBeans)\n- Understanding of web protocols (HTTP, HTTPS)\n- Basic understanding of XML and JSON\n\n### Microservices\n- Core Java\n- Spring Boot (for building microservices)\n- RESTful Web Services\n- Understanding of JSON\n- Docker and Kubernetes (for containerization and orchestration)\n- Basic knowledge of message brokers (e.g., RabbitMQ, Kafka)\n- DevOps practices and tools (CI/CD)\n\n### Maven\n- Basic understanding of Java\n- XML (for configuring POM files)\n- Dependency management concepts\n- Familiarity with the command line\n\n### Java\n- Object-Oriented Programming (OOP) principles\n- Core Java concepts (Collections, Multithreading, Exceptions, etc.)\n- Basic understanding of JVM, JRE, and JDK\n- Familiarity with development tools (Eclipse, IntelliJ IDEA)\n\n### ReactJS\n- JavaScript (ES6+)\n- HTML/CSS\n- Basic understanding of Node.js (for development environment setup)\n- Familiarity with npm/yarn\n- Basics of frontend development (DOM, Events, AJAX)\n\n### Node.js\n- JavaScript (ES6+)\n- Understanding of asynchronous programming (callbacks, promises, async/await)\n- Basic knowledge of HTTP and RESTful services\n- npm (Node Package Manager)\n- Basic understanding of web servers and networking\n\n### TypeScript\n- JavaScript (ES6+)\n- Basic understanding of object-oriented programming\n- Familiarity with a code editor (Visual Studio Code is recommended)\n- Basic knowledge of type systems\n\n### AWS Services\n- Basic understanding of cloud computing concepts\n- Core Java (if using AWS SDK for Java)\n- Familiarity with web services and APIs\n- Basic knowledge of networking\n- AWS CLI and SDKs\n\n### Team Leading\n- Effective communication skills\n- Basic understanding of project management methodologies (Agile, Scrum, Kanban)\n- Conflict resolution skills\n- Time management\n- Delegation and empowerment\n\n### Team Collaboration\n- Proficiency in collaboration tools (e.g., Jira, Confluence, Slack)\n- Understanding of version control systems (e.g., Git)\n- Basic knowledge of Agile methodologies\n- Active listening and effective communication skills\n- Conflict resolution skills","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["032ee612-7315-4e97-82f3-690609d1dd0d","57776f70-72ac-48b3-afea-ebdc2cec0a65"],"createdDate":{"$date":"2024-07-03T13:04:13.838Z"},"updatedDate":{"$date":"2024-07-03T18:31:16.8Z"},"__v":1}
{"_id":{"$oid":"66854ceac0211d1fe707a5ef"},"uniqueId":"5f3de718-92b6-4ac9-a543-f01ee4fe4108","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"prerequisites for DevOps","smartContent":{"content":"Sure, here are the prerequisites for DevOps:\n\n### DevOps\n- **Basic Programming/Scripting Knowledge**\n  - Shell scripting (Bash)\n  - Python or Ruby\n\n- **Operating Systems**\n  - Proficiency in Linux/Unix\n  - Basic understanding of Windows OS (optional but beneficial)\n\n- **Version Control Systems**\n  - Git (branches, merges, pull requests)\n\n- **Continuous Integration/Continuous Deployment (CI/CD)**\n  - Jenkins, GitLab CI, CircleCI, or similar tools\n  - Understanding of CI/CD pipelines\n\n- **Configuration Management**\n  - Ansible, Puppet, Chef, or SaltStack\n\n- **Containerization**\n  - Docker (Dockerfiles, images, containers)\n  - Docker Compose\n\n- **Container Orchestration**\n  - Kubernetes (clusters, pods, services)\n\n- **Infrastructure as Code (IaC)**\n  - Terraform or CloudFormation\n\n- **Monitoring and Logging**\n  - Prometheus, Grafana, ELK stack (Elasticsearch, Logstash, Kibana), Splunk\n\n- **Cloud Platforms**\n  - AWS, Azure, or Google Cloud Platform (GCP)\n  - Basic cloud services (EC2, S3, IAM for AWS or equivalent)\n\n- **Networking**\n  - Basic networking concepts (TCP/IP, DNS, Load Balancers, Firewalls)\n\n- **Security**\n  - Basic security practices (SSL/TLS, encryption, authentication/authorization)\n\n- **Soft Skills**\n  - Effective communication and collaboration skills\n  - Problem-solving and troubleshooting abilities\n  - Understanding of Agile methodologies\n\n- **Build Tools**\n  - Maven or Gradle for Java projects\n  - NPM/Yarn for JavaScript projects\n\n- **Database Management**\n  - Basic knowledge of SQL and NoSQL databases\n\nThese prerequisites will help you get started with DevOps practices and tools effectively.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["032ee612-7315-4e97-82f3-690609d1dd0d","57776f70-72ac-48b3-afea-ebdc2cec0a65"],"createdDate":{"$date":"2024-07-03T13:06:50.709Z"},"updatedDate":{"$date":"2024-07-03T18:31:40.786Z"},"__v":1}
{"_id":{"$oid":"66854d7bc0211d1fe707bc03"},"uniqueId":"e0766e9d-9c4f-4b8f-b4fa-6e6cb89f59cd","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Pre-requisites for Angular, Html, css, bootstrap","smartContent":{"content":"Sure, here are the prerequisites for each of the topics mentioned:\n\n### Angular\n- **JavaScript (ES6+)**\n  - Understanding of modern JavaScript features (e.g., classes, modules, arrow functions)\n  - Basic familiarity with TypeScript (Angular is written in TypeScript)\n  \n- **TypeScript**\n  - Understanding of type annotations, interfaces, and classes\n  - Basic TypeScript configuration and compilation\n\n- **HTML/CSS**\n  - Strong understanding of HTML5 semantics\n  - Proficiency in CSS3, including selectors, flexbox, grid, and responsive design\n\n- **Node.js and npm/yarn**\n  - Basic knowledge of Node.js (for setting up the development environment)\n  - Familiarity with npm or yarn for managing packages\n\n- **RxJS (Reactive Extensions for JavaScript)**\n  - Basic understanding of Observables, operators, and subscriptions\n  - Knowledge of reactive programming concepts\n\n- **Basic Web Development Concepts**\n  - DOM manipulation\n  - AJAX and Fetch API for making HTTP requests\n\n### HTML\n- **HTML5**\n  - Understanding of HTML tags and attributes\n  - Knowledge of semantic HTML elements (e.g., `<header>`, `<footer>`, `<article>`, `<section>`)\n\n- **Forms and Inputs**\n  - Creating and managing forms (e.g., `<form>`, `<input>`, `<textarea>`, `<select>`)\n  - Basic form validation techniques\n\n- **Media Elements**\n  - Embedding images, videos, and audio using HTML5 tags\n\n### CSS\n- **CSS Basics**\n  - Understanding of CSS syntax and selectors\n  - Knowledge of the box model (margin, border, padding, content)\n\n- **Layout Techniques**\n  - Flexbox\n  - CSS Grid\n\n- **Responsive Design**\n  - Media queries\n  - Mobile-first design principles\n\n- **Styling Elements**\n  - Pseudo-classes and pseudo-elements (e.g., `:hover`, `::before`, `::after`)\n  - CSS transitions and animations\n\n### Bootstrap\n- **HTML/CSS**\n  - Strong foundation in HTML and CSS\n\n- **Bootstrap Grid System**\n  - Understanding of Bootstrap's responsive grid system (e.g., `.container`, `.row`, `.col-` classes)\n\n- **Bootstrap Components**\n  - Familiarity with Bootstrap's pre-built components (e.g., buttons, forms, navbars, modals)\n\n- **Customization**\n  - Basic knowledge of customizing Bootstrap using CSS and Bootstrap's utility classes\n\n- **JavaScript Integration**\n  - Understanding of how to use Bootstrap's JavaScript components (e.g., modals, carousels, dropdowns)\n  - Basic knowledge of jQuery (optional, as Bootstrap 5 has removed the jQuery dependency)\n\nThese prerequisites will help you get started with Angular, HTML, CSS, and Bootstrap effectively.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["032ee612-7315-4e97-82f3-690609d1dd0d","57776f70-72ac-48b3-afea-ebdc2cec0a65"],"createdDate":{"$date":"2024-07-03T13:09:15.594Z"},"updatedDate":{"$date":"2024-07-03T18:40:14.92Z"},"__v":1}
{"_id":{"$oid":"66854e47c0211d1fe707befd"},"uniqueId":"856eecdf-77df-41ee-b0ab-1ccedee6579c","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"Pre-requisites for software architect","smartContent":{"content":"Sure, here are the prerequisites for becoming a software architect:\n\n### Technical Skills\n- **Programming Languages**\n  - Proficiency in one or more programming languages (e.g., Java, C#, Python, JavaScript)\n\n- **Software Development**\n  - Strong understanding of software development methodologies (Agile, Scrum, Waterfall)\n  - Experience with version control systems (e.g., Git)\n\n- **Design Patterns**\n  - Knowledge of common design patterns (e.g., Singleton, Factory, Observer)\n  - Understanding of architectural patterns (e.g., MVC, Microservices, Event-Driven Architecture)\n\n- **System Design**\n  - Proficiency in system design principles (scalability, reliability, availability)\n  - Ability to design and document software architectures\n\n- **Databases**\n  - Knowledge of SQL and NoSQL databases\n  - Understanding of database design and normalization\n\n- **Web Technologies**\n  - Understanding of front-end and back-end technologies\n  - Familiarity with web services (REST, SOAP)\n\n- **Cloud Computing**\n  - Experience with cloud platforms (e.g., AWS, Azure, Google Cloud)\n  - Understanding of cloud architecture and services\n\n- **DevOps**\n  - Knowledge of CI/CD pipelines\n  - Familiarity with containerization (Docker) and orchestration (Kubernetes)\n\n### Soft Skills\n- **Communication**\n  - Excellent verbal and written communication skills\n  - Ability to explain complex technical concepts to non-technical stakeholders\n\n- **Leadership**\n  - Experience leading development teams\n  - Ability to mentor and guide junior developers\n\n- **Problem-Solving**\n  - Strong analytical and problem-solving skills\n  - Ability to make decisions under pressure\n\n- **Project Management**\n  - Understanding of project management principles\n  - Experience with project management tools (e.g., JIRA, Trello)\n\n### Additional Knowledge Areas\n- **Enterprise Architecture**\n  - Familiarity with enterprise architecture frameworks (e.g., TOGAF, Zachman)\n\n- **Security**\n  - Knowledge of security principles and best practices\n  - Understanding of application security, data protection, and compliance\n\n- **Performance Tuning**\n  - Ability to identify and address performance bottlenecks\n  - Experience with performance testing and optimization\n\n- **Integration**\n  - Understanding of system integration techniques and middleware\n  - Knowledge of APIs, message brokers, and enterprise service buses (ESBs)\n\nThese prerequisites will help you prepare for the role of a software architect, ensuring you have the necessary technical and soft skills to design and lead the development of complex software systems.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["032ee612-7315-4e97-82f3-690609d1dd0d","57776f70-72ac-48b3-afea-ebdc2cec0a65"],"createdDate":{"$date":"2024-07-03T13:12:39.701Z"},"updatedDate":{"$date":"2024-07-03T18:40:54.152Z"},"__v":1}
{"_id":{"$oid":"66855307c0211d1fe7080a47"},"uniqueId":"bf9cd1f2-4e5b-447f-827e-ad0bf14a0ee3","linkedTopicUniqueId":"0aa16b49-bb85-4b93-97f8-3c5ba5eb8f6d","name":"My expectations from next job opportunity","smartContent":{"content":"# My expectations from next job opportunity","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-07-03T13:32:55.616Z"},"updatedDate":{"$date":"2024-07-03T13:32:55.616Z"},"__v":0}
{"_id":{"$oid":"668588476841aaaaead462e8"},"uniqueId":"bca2d3b7-5516-4cd8-98ab-8c7550cfa672","linkedTopicUniqueId":"2d6ff3de-7146-47c2-9c1a-9003aad05d6d","name":"Commonly used tools in DevOps, categorized by their function","smartContent":{"content":"Certainly! Here is a list of commonly used tools in DevOps, categorized by their function:\n\n### Continuous Integration/Continuous Deployment (CI/CD)\n- **Jenkins**\n- **GitLab CI/CD**\n- **CircleCI**\n- **Travis CI**\n- **Bitbucket Pipelines**\n- **GitHub Actions**\n- **Azure DevOps**\n\n### Configuration Management\n- **Chef**\n- **Puppet**\n- **Ansible**\n- **SaltStack**\n\n### Containerization and Orchestration\n- **Docker**\n- **Kubernetes**\n- **OpenShift**\n- **Docker Swarm**\n\n### Version Control\n- **Git**\n- **Bitbucket**\n- **GitHub**\n- **GitLab**\n\n### Monitoring and Logging\n- **Prometheus**\n- **Grafana**\n- **ELK Stack (Elasticsearch, Logstash, Kibana)**\n- **Splunk**\n- **Nagios**\n- **Datadog**\n- **New Relic**\n\n### Infrastructure as Code (IaC)\n- **Terraform**\n- **CloudFormation**\n- **Pulumi**\n\n### Collaboration and Communication\n- **Slack**\n- **Microsoft Teams**\n- **Jira**\n- **Trello**\n- **Confluence**\n\n### Security and Compliance\n- **HashiCorp Vault**\n- **Aqua Security**\n- **Twistlock**\n- **Anchore**\n- **SonarQube**\n\n### Build Automation\n- **Maven**\n- **Gradle**\n- **Ant**\n\n### Artifact Management\n- **Nexus Repository**\n- **Artifactory**\n- **Harbor**\n\n### Cloud Providers\n- **Amazon Web Services (AWS)**\n- **Microsoft Azure**\n- **Google Cloud Platform (GCP)**\n- **IBM Cloud**\n\n### Testing\n- **Selenium**\n- **JUnit**\n- **TestNG**\n- **Cucumber**\n\n### Networking and Service Mesh\n- **Istio**\n- **Consul**\n- **Linkerd**\n\nThis list encompasses a wide range of tools commonly used in the DevOps ecosystem to automate, manage, and optimize different stages of the software development lifecycle.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["223357cb-50a9-4ac0-9977-db83f67cab93"],"createdDate":{"$date":"2024-07-03T17:20:07.055Z"},"updatedDate":{"$date":"2024-07-03T17:21:48.235Z"},"__v":1}
{"_id":{"$oid":"6686437dd9f32869c3ace654"},"uniqueId":"c126b669-fd78-44ed-a3e5-6db5b1fc6aa2","linkedTopicUniqueId":"34f39e28-5a7d-4c2e-ad93-11b4c4332663","name":"Different VCS","smartContent":{"content":"# Version Control\n- Git\n- Bitbucket\n- GitHub\n- GitLab","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["223357cb-50a9-4ac0-9977-db83f67cab93"],"createdDate":{"$date":"2024-07-04T06:38:53.569Z"},"updatedDate":{"$date":"2024-07-04T06:38:53.569Z"},"__v":0}
{"_id":{"$oid":"668c45edf5d93c2ef217b363"},"uniqueId":"ee65e632-0bcc-4d7a-8c8a-b3d4f188d89b","linkedTopicUniqueId":"7c583c12-5141-41fa-b8a8-2357248578ce","name":"Few more coding questions that leverage Java 8 features","smartContent":{"content":"Here are a few more coding questions that leverage Java 8 features:\n\n### Question 1: Using Streams to Convert a List of Strings to Uppercase\nWrite a method that converts all the strings in a list to uppercase.\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StringProcessor {\n    /**\n     * Converts all strings in the list to uppercase.\n     *\n     * @param strings the list of strings\n     * @return a list of uppercase strings\n     */\n    public List<String> toUppercase(List<String> strings) {\n        return strings.stream()\n                      .map(String::toUpperCase)\n                      .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = List.of(\"apple\", \"banana\", \"cherry\");\n        StringProcessor processor = new StringProcessor();\n        List<String> uppercaseStrings = processor.toUppercase(strings);\n        System.out.println(uppercaseStrings); // Output: [APPLE, BANANA, CHERRY]\n    }\n}\n```\n\n### Question 2: Using Optional to Handle Potential Null Values\nWrite a method that finds a person by name from a list of people and returns an Optional<Person>.\n```java\nimport java.util.List;\nimport java.util.Optional;\n\npublic class PersonFinder {\n\n    public static class Person {\n        private String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person{name='\" + name + \"'}\";\n        }\n    }\n\n    /**\n     * Finds a person by name.\n     *\n     * @param people the list of people\n     * @param name   the name of the person to find\n     * @return an Optional containing the found person, or an empty Optional if no person was found\n     */\n    public Optional<Person> findPersonByName(List<Person> people, String name) {\n        return people.stream()\n                     .filter(person -> person.getName().equals(name))\n                     .findFirst();\n    }\n\n    public static void main(String[] args) {\n        List<Person> people = List.of(new Person(\"Alice\"), new Person(\"Bob\"), new Person(\"Charlie\"));\n        PersonFinder finder = new PersonFinder();\n        Optional<Person> person = finder.findPersonByName(people, \"Bob\");\n        person.ifPresent(System.out::println); // Output: Person{name='Bob'}\n    }\n}\n```\n\n### Question 3: Using Streams to Find the Distinct Elements in a List\nWrite a method that returns a list of distinct elements from the input list.\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class DistinctElementsFinder {\n\n    /**\n     * Finds distinct elements in the list.\n     *\n     * @param list the list of elements\n     * @param <T>  the type of elements in the list\n     * @return a list of distinct elements\n     */\n    public <T> List<T> findDistinctElements(List<T> list) {\n        return list.stream()\n                   .distinct()\n                   .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = List.of(\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\");\n        DistinctElementsFinder finder = new DistinctElementsFinder();\n        List<String> distinctStrings = finder.findDistinctElements(strings);\n        System.out.println(distinctStrings); // Output: [apple, banana, cherry]\n    }\n}\n```\n\n### Question 4: Using Streams to Sort a List of Objects\nWrite a method that sorts a list of Person objects by their names.\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class PersonSorter {\n\n    public static class Person {\n        private String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person{name='\" + name + \"'}\";\n        }\n    }\n\n    /**\n     * Sorts a list of persons by their names.\n     *\n     * @param people the list of persons\n     * @return a list of persons sorted by their names\n     */\n    public List<Person> sortPersonsByName(List<Person> people) {\n        return people.stream()\n                     .sorted((p1, p2) -> p1.getName().compareTo(p2.getName()))\n                     .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        List<Person> people = List.of(new Person(\"Charlie\"), new Person(\"Alice\"), new Person(\"Bob\"));\n        PersonSorter sorter = new PersonSorter();\n        List<Person> sortedPeople = sorter.sortPersonsByName(people);\n        sortedPeople.forEach(System.out::println);\n        // Output:\n        // Person{name='Alice'}\n        // Person{name='Bob'}\n        // Person{name='Charlie'}\n    }\n}\n```\n\n### Question 5: Using Streams to Partition a List by a Predicate\nWrite a method that partitions a list of integers into two lists: one containing even numbers and the other containing odd numbers.\n```java\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class PartitionByPredicate {\n\n    /**\n     * Partitions a list of integers into even and odd numbers.\n     *\n     * @param numbers the list of integers\n     * @return a map with two entries: one for even numbers and one for odd numbers\n     */\n    public Map<Boolean, List<Integer>> partitionByEvenOdd(List<Integer> numbers) {\n        return numbers.stream()\n                      .collect(Collectors.partitioningBy(n -> n % 2 == 0));\n    }\n\n    public static void main(String[] args) {\n        PartitionByPredicate partitioner = new PartitionByPredicate();\n        List<Integer> numbers = List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        Map<Boolean, List<Integer>> partitioned = partitioner.partitionByEvenOdd(numbers);\n        System.out.println(\"Even: \" + partitioned.get(true));  // Output: Even: [2, 4, 6, 8, 10]\n        System.out.println(\"Odd: \" + partitioned.get(false));  // Output: Odd: [1, 3, 5, 7, 9]\n    }\n}\n```\n\nThese questions cover a range of Java 8 features including Streams, Optional, functional interfaces, and method references.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-07-08T20:02:53.209Z"},"updatedDate":{"$date":"2024-07-08T20:02:53.209Z"},"__v":0}
{"_id":{"$oid":"668c477ff5d93c2ef217c97f"},"uniqueId":"d9717c7c-414c-4d4a-889b-80585bf420ce","linkedTopicUniqueId":"7c583c12-5141-41fa-b8a8-2357248578ce","name":"Partition a list of integers into five lists based on their remainders when divided by 5","smartContent":{"content":"Here's a method to partition a list of integers into five lists based on their remainders when divided by 5, including the Javadoc:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class PartitionByRemainder {\n\n    /**\n     * Partitions a list of integers into five lists based on their remainders when divided by 5.\n     *\n     * @param numbers the list of integers\n     * @return a map with keys 0 to 4, where each key corresponds to a list of numbers with that remainder\n     */\n    public Map<Integer, List<Integer>> partitionByRemainder(List<Integer> numbers) {\n        return numbers.stream()\n                      .collect(Collectors.groupingBy(n -> n % 5));\n    }\n\n    public static void main(String[] args) {\n        PartitionByRemainder partitioner = new PartitionByRemainder();\n        List<Integer> numbers = IntStream.rangeClosed(1, 20).boxed().collect(Collectors.toList());\n        Map<Integer, List<Integer>> partitioned = partitioner.partitionByRemainder(numbers);\n\n        for (int i = 0; i < 5; i++) {\n            System.out.println(\"Remainder \" + i + \": \" + partitioned.getOrDefault(i, new ArrayList<>()));\n        }\n        // Output:\n        // Remainder 0: [5, 10, 15, 20]\n        // Remainder 1: [1, 6, 11, 16]\n        // Remainder 2: [2, 7, 12, 17]\n        // Remainder 3: [3, 8, 13, 18]\n        // Remainder 4: [4, 9, 14, 19]\n    }\n}\n```\n\nIn this code:\n- `collect(Collectors.groupingBy(n -> n % 5))` partitions the stream of integers into groups based on their remainders when divided by 5.\n- `getOrDefault(i, new ArrayList<>())` ensures that if a particular remainder group is empty, an empty list is returned.\n\nThis method creates a map where each key is a remainder (0 through 4), and the corresponding value is a list of integers that have that remainder when divided by 5.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-07-08T20:09:35.182Z"},"updatedDate":{"$date":"2024-07-08T20:09:35.182Z"},"__v":0}
{"_id":{"$oid":"668c564ef5d93c2ef217d314"},"uniqueId":"cd88c4b3-d873-49c3-a6f5-2a9a2083d05a","linkedTopicUniqueId":"77703686-8964-4aa1-9b87-5a9892a18630","name":"Few coding questions for JavaScript","smartContent":{"content":"Sure, here are some JavaScript coding questions:\n\n1. Write a function that takes a string and returns the first non-repeated character.\n\n2. Create a function that checks if a given string is a palindrome.\n\n3. Implement a function to flatten a nested array.\n\n4. Write a function that finds the longest word in a string.\n\n5. Create a function to remove all duplicates from an array.\n\n6. Write a function that reverses a string.\n\n7. Implement a function to find the factorial of a number.\n\n8. Create a function that sorts an array of numbers in ascending order.\n\n9. Write a function that finds the intersection of two arrays.\n\n10. Implement a function to convert a given number to its Roman numeral representation.\n\n11. Write a function that takes an array of integers and returns the sum of all the positive numbers.\n\n12. Create a function to merge two sorted arrays into a single sorted array.\n\n13. Write a function that checks if a number is a prime number.\n\n14. Implement a function to find the greatest common divisor (GCD) of two numbers.\n\n15. Write a function that calculates the nth Fibonacci number.\n\n16. Write a function that capitalizes the first letter of each word in a string.\n\n17. Create a function to find the largest difference between any two numbers in an array.\n\n18. Implement a function that counts the number of vowels in a string.\n\n19. Write a function that checks if a given string contains only unique characters.\n\n20. Create a function to find the maximum sum of a contiguous subarray.\n\n21. Implement a function to generate all permutations of a string.\n\n22. Write a function to check if two strings are anagrams.\n\n23. Create a function that converts a given string to snake_case.\n\n24. Write a function that takes two dates and calculates the number of days between them.\n\n25. Implement a function to determine if a given year is a leap year.\n\n26. Create a function to deep clone an object.\n\n27. Write a function to find the second largest number in an array.\n\n28. Implement a function to convert a binary string to a decimal number.\n\n29. Write a function that groups an array of objects by a given property.\n\n30. Create a function to rotate a 2D matrix by 90 degrees clockwise.\n\n31. Implement a function to check if a given string is a valid email address.\n\n32. Write a function to generate a random integer between two given numbers.\n\n33. Create a function that removes all falsy values from an array.\n\n34. Implement a function to find the missing number in an array of integers from 1 to n.\n\n35. Write a function to convert an array of objects to a CSV string.\n\n36. Write a function that calculates the sum of all the numbers in a given range.\n\n37. Implement a function to find the longest substring without repeating characters.\n\n38. Create a function to count the occurrences of each character in a string.\n\n39. Write a function that converts a given string to camelCase.\n\n40. Implement a function to check if a given number is an Armstrong number.\n\n41. Create a function that returns the largest prime factor of a given number.\n\n42. Write a function to find the median of an array of numbers.\n\n43. Implement a function to remove a specific element from an array.\n\n44. Create a function that determines if a given string is a valid palindrome, ignoring spaces and punctuation.\n\n45. Write a function that generates the first n numbers in the Pascal's triangle.\n\n46. Implement a function to find the common elements in three sorted arrays.\n\n47. Create a function to calculate the power of a number without using the built-in `Math.pow()` method.\n\n48. Write a function that merges two objects, giving precedence to the values of the second object in case of key conflicts.\n\n49. Implement a function to calculate the digital root of a number.\n\n50. Create a function to find the longest common prefix string amongst an array of strings.\n\n51. Write a function that converts a given time in 12-hour AM/PM format to 24-hour military time.\n\n52. Implement a function to determine if two rectangles overlap.\n\n53. Create a function to generate all combinations of a string.\n\n54. Write a function that returns the n-th digit of the Fibonacci sequence.\n\n55. Implement a function to perform a binary search on a sorted array.\n\n56. Create a function that returns the sum of all even numbers in the Fibonacci sequence up to a given number.\n\n57. Write a function to find the majority element in an array (the element that appears more than half the times).\n\n58. Implement a function to determine if a string is a valid IPv4 address.\n\n59. Create a function that finds the shortest path between two nodes in a graph.\n\n60. Write a function to convert an integer to its English words representation.\n\n61. Write a function to find the longest increasing subsequence in an array.\n\n62. Create a function to convert an array of strings to an array of objects with `id` and `value` properties.\n\n63. Implement a function that validates a given credit card number using the Luhn algorithm.\n\n64. Write a function that takes a nested object and returns a flattened version of it.\n\n65. Create a function to determine if a given number is a perfect number.\n\n66. Implement a function to reverse the words in a given sentence.\n\n67. Write a function that removes all instances of a given value from a linked list.\n\n68. Create a function to find the length of the longest balanced parentheses substring.\n\n69. Implement a function to count the number of set bits in a binary representation of a number.\n\n70. Write a function that converts a given number to binary, octal, and hexadecimal.\n\n71. Create a function to find the product of all elements in an array except the current element without using division.\n\n72. Implement a function to find the first missing positive integer in an unsorted array.\n\n73. Write a function that determines if a string contains a valid number (integer or float).\n\n74. Create a function to determine if a given string is a valid hexadecimal color code.\n\n75. Implement a function that returns the longest palindromic substring in a given string.\n\n76. Write a function to perform matrix multiplication.\n\n77. Create a function that calculates the square root of a number without using the built-in `Math.sqrt()` method.\n\n78. Implement a function to check if a binary tree is height-balanced.\n\n79. Write a function that finds all unique triplets in an array that sum up to zero.\n\n80. Create a function to implement the merge sort algorithm.\n\n81. Implement a function to find the diameter of a binary tree.\n\n82. Write a function to convert an array of objects into a nested tree structure based on parent-child relationships.\n\n83. Create a function that implements a simple version of the UNIX `grep` command.\n\n84. Implement a function to calculate the area of a polygon given its vertices.\n\n85. Write a function to find the shortest path in a binary matrix (0s and 1s) from the top-left to the bottom-right corner.\n\n86. Create a function that simulates a basic calculator with addition, subtraction, multiplication, and division.\n\n87. Implement a function to find the longest common subsequence between two strings.\n\n88. Write a function to perform the Depth-First Search (DFS) traversal of a graph.\n\n89. Create a function to implement the Quick Sort algorithm.\n\n90. Implement a function to find the largest rectangle in a histogram.\n\n91. Write a function to determine if a linked list has a cycle and find the starting node of the cycle.\n\n92. Create a function to validate if a given string is a valid JSON string.\n\n93. Implement a function to find the maximum product subarray in an array of integers.\n\n94. Write a function to serialize and deserialize a binary tree.\n\n95. Create a function that checks if a given string can be segmented into words from a dictionary.\n\n96. Implement a function to find all paths from the root to leaves in a binary tree.\n\n97. Write a function to calculate the edit distance between two strings.\n\n98. Create a function that simulates the behavior of the `Array.prototype.reduce` method.\n\n99. Implement a function to find the number of islands in a 2D grid.\n\n100. Write a function that finds the k-th largest element in an unsorted array.\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-07-08T21:12:46.634Z"},"updatedDate":{"$date":"2024-07-08T21:12:46.634Z"},"__v":0}
{"_id":{"$oid":"669de2db10ffb82c7d9c4aaf"},"uniqueId":"971f5cd9-f695-4776-a93b-92ed3c8e1af9","linkedTopicUniqueId":"bf4846d2-558a-48fd-a014-0d0e6d9fb2d9","name":"My revision plan","smartContent":{"content":"# My revision plan\n\n- **Topic MGMT** \n  - D:\\GIT\\react-projects\\learn-react\\TweetApp\\backend\n  - D:\\GIT\\react-projects\\learn-react\\TweetApp\\frontend\n  - **Repo link** : [https://github.com/sameer05515/react-projects/tree/master/learn-react/TweetApp](https://github.com/sameer05515/react-projects/tree/master/learn-react/TweetApp)\n\n- **Javascript Promise Practice**\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\dependency-injection-practice-with-es6-modules-and-http-server\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\d3-charts-es6-modules-with-webpack-dev-server\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\dependency-injection-practice-with-es6-modules-and-webpack-dev-server\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\nodejs-backend\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\promise-practice\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\promise-practice-in-react\n  - D:\\GIT\\unit-testing-playground\\example-base-03\\promise-practice-with-commonjs-webpack\n  - **Repo link** - [https://github.com/sameer05515/unit-testing-playground/tree/main/example-base-03](https://github.com/sameer05515/unit-testing-playground/tree/main/example-base-03)\n\n- **chat-gpt-conversation**\n  - D:\\GIT\\microservices-playground\\example-base-03\\fontend\\chat-gpt-conversation\n\n- **Interview-questions-metadata**\n  - D:\\GIT\\react-projects\\Interview-questions-metadata\n\n- **resume-service**\n  - D:\\GIT\\microservices-playground\\example-base-03\\backend\\resume-service\n  - D:\\GIT\\microservices-playground\\example-base-03\\fontend\\gui-project-01\n","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["b7c634d6-07f3-4cd3-8cc7-1c8c851a55f3"],"createdDate":{"$date":"2024-07-22T04:40:59.842Z"},"updatedDate":{"$date":"2024-07-22T04:57:46.526Z"},"__v":0}
{"_id":{"$oid":"66b2097badf4729133dc7d11"},"uniqueId":"0e70a22a-4d55-4e27-8aa3-83c64705e901","linkedTopicUniqueId":"f2e6fdab-0f52-4d25-a52c-34b97248621c","name":"What is Gang of Four (GoF) Design Patterns","smartContent":{"content":"The Gang of Four (GoF) Design Patterns refer to 23 foundational design patterns introduced in the book *\"Design Patterns: Elements of Reusable Object-Oriented Software,\"* authored by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. These patterns are categorized into three main groups: Creational, Structural, and Behavioral, each addressing common problems in software design.\n\n### Creational Patterns\n1. **Singleton:** Ensures a class has only one instance and provides a global point of access to it.\n2. **Factory Method:** Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.\n3. **Abstract Factory:** Provides an interface for creating families of related or dependent objects without specifying their concrete classes.\n4. **Builder:** Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.\n5. **Prototype:** Creates new objects by copying an existing object, known as the prototype.\n\n### Structural Patterns\n1. **Adapter:** Allows incompatible interfaces to work together by converting one interface into another.\n2. **Bridge:** Decouples an abstraction from its implementation, allowing the two to vary independently.\n3. **Composite:** Composes objects into tree structures to represent part-whole hierarchies, enabling clients to treat individual objects and compositions uniformly.\n4. **Decorator:** Adds additional responsibilities to an object dynamically, providing a flexible alternative to subclassing for extending functionality.\n5. **Facade:** Provides a simplified interface to a complex subsystem, making it easier to use.\n6. **Flyweight:** Reduces the cost of creating and manipulating a large number of similar objects by sharing common data.\n7. **Proxy:** Provides a surrogate or placeholder for another object to control access to it.\n\n### Behavioral Patterns\n1. **Chain of Responsibility:** Passes a request along a chain of handlers, allowing multiple objects the opportunity to handle the request.\n2. **Command:** Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n3. **Interpreter:** Defines a grammatical representation for a language and provides an interpreter to process sentences in that language.\n4. **Iterator:** Provides a way to access the elements of a collection sequentially without exposing its underlying representation.\n5. **Mediator:** Defines an object that encapsulates how a set of objects interact, promoting loose coupling.\n6. **Memento:** Captures and externalizes an object's internal state so that the object can be restored to this state later.\n7. **Observer:** Defines a one-to-many dependency between objects, so that when one object changes state, all its dependents are notified.\n8. **State:** Allows an object to alter its behavior when its internal state changes, appearing as if the object changed its class.\n9. **Strategy:** Defines a family of algorithms, encapsulates each one, and makes them interchangeable.\n10. **Template Method:** Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n11. **Visitor:** Represents an operation to be performed on the elements of an object structure, allowing new operations to be defined without changing the classes of the elements.\n\nThese patterns provide general, reusable solutions to common design problems and form a crucial part of object-oriented design best practices.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["20cb5b8d-adb1-43c7-9b00-4ee77bcbd3f2","4fa40bfd-7a4f-4fb0-8746-94126ed0aeec"],"createdDate":{"$date":"2024-08-06T11:31:07.646Z"},"updatedDate":{"$date":"2024-08-06T11:31:07.646Z"},"__v":0}
{"_id":{"$oid":"66b20c2eadf4729133dc9749"},"uniqueId":"2e8568c6-8364-4071-8571-9e889b8043de","linkedTopicUniqueId":"4ad13e04-8da6-4109-a9fe-4782c9c0ca24","name":"What are Design Patterns?","smartContent":{"content":"### What are Design Patterns?\n\nDesign patterns are established solutions to common software design challenges. In object-oriented programming, they primarily address issues related to object creation and interaction, rather than broader architectural concerns. They provide generalized, reusable solutions in the form of templates that can be applied to real-world problems.\n\nDesign patterns are a valuable tool for software developers, offering a framework for tackling common issues. However, they should not be viewed as rigid specifications. Understanding the underlying concepts is more important than memorizing specific classes, methods, or properties. It's crucial to apply design patterns judiciously, as using the wrong pattern or overcomplicating simple solutions can lead to code that is difficult to maintain.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["20cb5b8d-adb1-43c7-9b00-4ee77bcbd3f2","84bcd83d-b556-4302-96ed-c4ea67d14e71"],"createdDate":{"$date":"2024-08-06T11:42:38.698Z"},"updatedDate":{"$date":"2024-08-06T11:42:38.698Z"},"__v":0}
{"_id":{"$oid":"66bf898e87f67056679ba65f"},"uniqueId":"be6c72a2-dd03-4e5a-b0d5-f4f41b0c657a","linkedTopicUniqueId":"bf4846d2-558a-48fd-a014-0d0e6d9fb2d9","name":"Steps to process an indented String to transform it into Tree Data","smartContent":{"content":"To create an indented string that represents the steps to process an indented string and transform it into tree data, you can structure it as follows:\n\n```plaintext\n1. Validate Input String\n    1.1 Ensure input is a string\n    1.2 Validate the string contains lines of text\n        1.2.1 Trim each line of unnecessary whitespace\n        1.2.2 Filter out any empty lines\n2. Determine Indentation Levels\n    2.1 Calculate indentation level for each line\n    2.2 Store indentation levels in an array\n3. Validate Indentation Consistency\n    3.1 Check if all indentation levels are equal\n        3.1.1 If equal, create a flat hierarchy with level 0\n    3.2 Calculate the difference between consecutive indentation levels\n    3.3 Validate consistency of indentation differences\n        3.3.1 If inconsistent, return an error\n4. Build Tree Structure\n    4.1 Compute levels for each line based on indentation\n    4.2 Append each line with its computed level and initialize children array\n    4.3 Fill in parent IDs for each line based on computed levels\n    4.4 Transform the flat structure into a hierarchical tree\n5. Return Tree Data\n    5.1 If all steps are successful, return the tree data\n    5.2 If any step fails, return the corresponding error message\n```\n\n### Explanation:\n- The above string is structured hierarchically, with each step and sub-step represented by increasing indentation.\n- The steps mirror the logic described in the code, providing a clear, ordered list of actions to transform an indented string into tree data.\n- Each major step corresponds to a section of the code, ensuring that the process is easy to follow and debug.\n\nYou can use this indented string as a guide or documentation for understanding the process of converting an indented string into a hierarchical tree structure.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-08-16T17:17:02.019Z"},"updatedDate":{"$date":"2024-08-16T17:17:02.019Z"},"__v":0}
{"_id":{"$oid":"66c6be7917cdaf8a07648ac3"},"uniqueId":"9ad8b1db-c199-402d-81f1-96518862193a","linkedTopicUniqueId":"dc532595-5082-4c1c-ae2d-f7b7a050cbc1","name":"8 New Java 8 Features","smartContent":{"content":"<p><a href=\"http://www.instanceofjava.com/2015/02/8-new-java-8-features.html\">8 New Java 8 Features</a><br><br>&nbsp;</p><p><a href=\"http://2.bp.blogspot.com/-0xJ98WQyp7M/VOHXKN_pBoI/AAAAAAAAAKk/21oNrLUKOqs/s1600/java88.jpg\">?<img src=\"http://2.bp.blogspot.com/-0xJ98WQyp7M/VOHXKN_pBoI/AAAAAAAAAKk/21oNrLUKOqs/s1600/java88.jpg\" width=\"490\" height=\"474\">?</a><br><br>&nbsp;</p><ol><li><i><strong>Default and Static methods in Interface</strong></i></li><li><i><strong>Lambda Expressions</strong></i></li><li><i><strong>Optional</strong></i></li><li><i><strong>Streams</strong></i></li><li><i><strong>Method References</strong></i></li><li><i><strong>Data Time API</strong></i></li><li><i><strong>Nashorn Javascript Engine</strong></i></li><li><i><strong>Parallel Arrays</strong></i></li></ol><p><br><br><strong>1. Default and Static methods in Interface :</strong></p><ul><li>Java 8 introduces new features to interfaces.</li><li>Before java 8 interface having only abstract methods but now java 8 added two more type of methods to interface !.</li><li>First one is default method. A method which is having a default keyword with method body.</li><li>Actually interfaces wont have any implemented methods&nbsp; but now with java 8 default method we can add a method with default implementation by using \"default \" keyword.</li><li>The classes which are implementing this interface can use these default method and same time it can override the existing method. But its not mandatory to override.</li></ul><p>package com.instanceofjava; interface Java8InterfaceDemo{ abstract void add(); &nbsp; default void display(){ System.out.println(\"default method of interface\"); } }</p><p><br>&nbsp;</p><ul><li>The second new method introduced in java 8 is static method.</li><li>Yes like in classes now we can define a static methods inside interface by using \"static\".</li><li>Basically static methods which are defined in interface are interface level only. if we want to call these static methods which are defined in interfaces we need to use interface name so that we can access these methods.</li></ul><p>package com.instanceofjava; interface Java8InterfaceDemo{ abstract void add(); &nbsp; default void display(){ System.out.println(\"default method of interface\"); } public static void show(){ System.out.println(\"static method of interface\"); } }</p><p><br>&nbsp;</p><p><br><strong>2.Lambda Expressions&nbsp;</strong></p><ul><li>One of the most awaited and biggest release in java 8 is lamda expressions.</li><li>Ability to pass functionality/ behavior&nbsp; to methods as arguments.</li><li>Allows us to write a method in the same place we are going to use it.</li></ul><p>package com.instanceofjava; interface JavalamdaExpression{ public static void main(String[] args){ Arrays.asList( \"j\", \"a\", \"v\" ,\"a\",\"8\").forEach( e -&gt; System.out.print( e ) ); // java8 } }</p><p><br><strong>3.java.util.Optional:</strong></p><ul><li>One of the best and cool feature of java 8 is Optional class. Which is a final calls from java.util package.</li><li>The major repeating statement in every project is checking \"<strong>NullPointerException</strong>\". Before using any object we need to check whether it is null or not if its not null then only we need to proceed.</li><li>Optional is just like a container which holds a value of type &lt;T&gt; or \"null\". By using isPresent() method of Optional class we can check particular object is null not not.</li></ul><p>package com.instanceofjava; import java.util.Optional: class Java8OptionalDemo{ public static void main(String[] args ){ Optional&lt; String &gt; str = Optional.ofNullable( null ); System.out.println( \"str having value ? \" + str.isPresent() ); // output : str having value ? <strong>false</strong> } }</p><p><br><strong>4.Streams:</strong></p><ul><li>One of the excellent feature from java 8 as java.util.stream.</li><li>Stream API&nbsp; introduces real-world functional-style programming into the Java.</li><li>Provides functional operations on stream of elements such as list , set and map&nbsp;</li><li>Supports filtering, mapping and removal of duplicates of elements in collections, are implemented lazily.</li><li>Now we can get Streams from collections, arrays and bufferedReaders etc.</li></ul><p>package com.instanceofjava; import java.util.Arrays; class Java8StreamsDemo{ public static void main(String[] args ){ &nbsp;Arrays.stream(new int[] {1, 2, 3,4,5}) &nbsp; &nbsp;.map(n -&gt; 2 * n + 1) &nbsp; .average() &nbsp; &nbsp;.ifPresent(System.out::println); // output: 7.0 } }</p><p><br><strong>5.Method Reference:</strong></p><ul><li>We can use lambda expressions to create anonymous methods.&nbsp;</li><li>Sometimes, however, a lambda expression does nothing but call an existing method.&nbsp;<br>In those cases, it's often clearer to refer to the existing method by name.</li><li>Using Method references refer to the existing method by name, they are compact, easy-to-read lambda expressions for methods that already have a name</li></ul><p>package com.instanceofjava; import java.util.Arrays; class Java8MethodRef{ &nbsp;public &nbsp;void show(String str){ &nbsp; &nbsp; &nbsp; &nbsp;System.out.println(str); &nbsp; } public static void main(String[] args ){ &nbsp; Arrays.asList(\"a\", \"b\", \"c\").forEach(new A()::show); // a b c } }</p><p><br><strong>6.Data Time API &nbsp;</strong><br><br>&nbsp;</p><ul><li>The next cool feature from java 8 is new date time API(jsr 310) added within java.time package.</li><li>Before java 8 if we want to&nbsp;<a href=\"http://www.instanceofjava.com/2014/12/convert-string-to-date-in-java.html\">format dates</a>&nbsp;we use SimpleDateFormatter class in java 8 while declaring date itself it has constructor to pass format of date.</li><li>&nbsp;Some of the new classes introduced in java 8 date time are as follows.</li></ul><ol><li>LocalTime</li><li>LocalDate&nbsp;</li><li>LocalDateTime</li><li>OffsetDate</li><li>OffsetTime</li><li>OffsetDateTime</li></ol><p><br>&nbsp;</p><p>package com.instanceofjava; import java.util.Arrays; class Java8DateTimeAPI{ public static void main(String[] args ){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;LocalDate currentDate = LocalDate.now(); &nbsp; &nbsp;System.out.println(currentDate); &nbsp; &nbsp; &nbsp; &nbsp;LocalDate twentyMarch2015 = LocalDate.of(2015, Month.MARCH, 06); &nbsp; &nbsp;System.out.println(twentyMarch2015); &nbsp;//<strong>2015-03-06</strong> &nbsp; &nbsp; LocalDate firstApril2015 = LocalDate.of(2015, 4, 1); &nbsp; &nbsp; System.out.println(firstApril2015);//<strong>2015-04-01</strong> } }</p><p><br>&nbsp;<strong>7.Nashorn Javascript Engine</strong></p><ul><li>&nbsp;Java 8 come with new Nashorn Javascript Engine which is allowing us to develop and run JavaScript applications.</li></ul><p>package com.instanceofjava; import javax.script.ScriptEngine; import javax.script.ScriptEngineManager; import javax.script.ScriptException; import java.util.Arrays; class Java8JavaScript{ public static void main(String[] args ){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ScriptEngineManager manager = new ScriptEngineManager(); &nbsp;ScriptEngine engine = manager.getEngineByName( \"JavaScript\" ); &nbsp;System.out.println( engine.getClass().getName() ); &nbsp;System.out.println( \"output:\" + engine.eval( \"function show() { return 10; }; show();\" ) ); } }</p><p><br>&nbsp;</p><p>jdk.nashorn.api.scripting.NashornScriptEngine output:10</p><p><br><br><br>&nbsp;</p><p><br><strong>8.Parallel Array Sorting</strong></p><ul><li>As of now java 7 we already having Arrays.sort() method to sort objects now java 8 introduced parallel sorting which has more speed than arrays.sort() and follows Fork/Join framework introduced in Java 7 to assign the sorting tasks to multiple threads that are available in the thread pool.</li><li>Java 8 added parallel sorting functionalities to java.util.Arrays to take advantage of multithread machines&nbsp;</li></ul><p>package com.instanceofjava; import java.util.Arrays; class Java8JavaScript{ public static void main(String[] args ){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int arr[]={1,4,2,8,5}; &nbsp; &nbsp; &nbsp; &nbsp; Arrays.parallelSort(arr); &nbsp; &nbsp; &nbsp; &nbsp; for(int i:arr){ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(i); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } } }</p><p><br>&nbsp;</p>","textOutputType":"html","textInputType":"CKEditor"},"order":9999,"tags":[],"createdDate":{"$date":"2024-08-22T04:28:41.103Z"},"updatedDate":{"$date":"2024-08-22T04:29:13.645Z"},"__v":0}
{"_id":{"$oid":"66c86d7ab00cb696d1831aeb"},"uniqueId":"deecc6c6-e7f5-4c10-8cef-785f6fbd8a98","linkedTopicUniqueId":"7c583c12-5141-41fa-b8a8-2357248578ce","name":"using java 8, Write a program to get value having maximum occurence in given array say, {2,1,2, 1, 2,3,4,2,4}","smartContent":{"content":"Here's a Java 8 program to find the value with the maximum occurrence in the given array:\n\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class MaxOccurrence {\n    public static void main(String[] args) {\n        int[] arr = {2, 1, 2, 1, 2, 3, 4, 2, 4};\n\n        // Convert array to a list\n        List<Integer> list = Arrays.stream(arr).boxed().collect(Collectors.toList());\n\n        // Find the element with the maximum occurrence\n        int maxOccurrenceValue = list.stream()\n            .collect(Collectors.groupingBy(e -> e, Collectors.counting())) // Group by element and count occurrences\n            .entrySet()\n            .stream()\n            .max(Map.Entry.comparingByValue()) // Find the entry with the maximum count\n            .get()\n            .getKey(); // Get the element (key)\n\n        System.out.println(\"Value with maximum occurrence: \" + maxOccurrenceValue);\n    }\n}\n```\n\n### Explanation:\n- **`Arrays.stream(arr).boxed().collect(Collectors.toList())`**: Converts the `int[]` array to a `List<Integer>`.\n- **`collect(Collectors.groupingBy(e -> e, Collectors.counting()))`**: Groups elements by value and counts their occurrences.\n- **`max(Map.Entry.comparingByValue())`**: Finds the entry with the maximum count.\n- **`get().getKey()`**: Retrieves the key (the element with the maximum occurrence) from the entry.\n\nRunning this code will output the value `2`, as it has the maximum occurrences in the given array.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["1abf1b60-a188-40ea-b4e1-a81ba23436e2"],"createdDate":{"$date":"2024-08-23T11:07:38.881Z"},"updatedDate":{"$date":"2024-08-23T11:07:38.881Z"},"__v":0}
{"_id":{"$oid":"66d145273bdfbcf4f68ae99c"},"uniqueId":"9576f503-86bd-412d-b7b0-1c79c4327cc5","linkedTopicUniqueId":"1d84f201-0ab4-4b62-8d5a-db4d6ba26ec6","name":"different versions of JDBC.","smartContent":{"content":"Here’s an overview of the different versions of JDBC along with their major features:\n\n### **JDBC Versions and Major Features**\n\n1. **JDBC 1.0 (Java 1.1)**\n   - **Introduction:** The first version of JDBC, introduced in JDK 1.1.\n   - **Core Features:** Basic API for database connectivity, executing SQL queries, and processing results using `Statement` and `ResultSet`.\n\n2. **JDBC 2.0 (Java 1.2, 1.3)**\n   - **Scrollable ResultSet:** Introduced support for `ScrollableResultSet`, allowing navigation through the result set in both forward and backward directions.\n   - **Batch Updates:** Added the ability to execute batch updates, improving performance when executing multiple SQL statements.\n   - **DataSource:** Introduced the `DataSource` interface for more flexible and efficient database connections.\n   - **Connection Pooling:** Support for connection pooling through `DataSource` implementations.\n\n3. **JDBC 3.0 (Java 1.4)**\n   - **Savepoints:** Introduced savepoints in transactions, allowing partial rollbacks.\n   - **Connection Pooling Enhancements:** Enhanced connection pooling features for better performance and resource management.\n   - **ResultSet Holdability:** Allowed a `ResultSet` to be held open across multiple transactions.\n\n4. **JDBC 4.0 (Java 6)**\n   - **Auto-loading of JDBC Driver:** Simplified driver loading with the automatic discovery of JDBC drivers.\n   - **SQL Exception Handling Enhancements:** Introduced chained exceptions and improved diagnostics.\n   - **Annotation-Based SQL Queries:** Support for `@Sql` annotation in Enterprise Java Beans (EJBs).\n\n5. **JDBC 4.1 (Java 7)**\n   - **Try-with-Resources:** Improved resource management with the try-with-resources statement, automatically closing `Connection`, `Statement`, and `ResultSet`.\n   - **Enhanced CallableStatement:** Support for using `getObject` with custom mapping of SQL types to Java objects.\n\n6. **JDBC 4.2 (Java 8)**\n   - **Support for Java 8 Types:** Added support for `LocalDate`, `LocalTime`, and `LocalDateTime` in `ResultSet` and `PreparedStatement`.\n   - **Updated SQL Types:** Support for the new SQL types such as `REF_CURSOR`.\n\n7. **JDBC 4.3 (Java 9, 10, 11)**\n   - **Improved Integration with Java 9 Modules:** Enhanced integration with Java Platform Module System (JPMS).\n   - **Multi-Release JARs:** Support for multi-release JAR files to take advantage of Java 9 features.\n\n8. **JDBC 4.4 (Java 12, 13, 14)**\n   - **Minor Updates:** Minor enhancements and updates for compatibility with newer versions of Java.\n\n9. **JDBC 4.5+ (Java 15+)**\n   - **Compatibility Updates:** Ongoing updates to maintain compatibility with the latest Java features and improvements.\n\nThese versions reflect the evolution of JDBC in enhancing database connectivity, performance, and integration with the Java platform.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":["b7c634d6-07f3-4cd3-8cc7-1c8c851a55f3"],"createdDate":{"$date":"2024-08-30T04:05:59.962Z"},"updatedDate":{"$date":"2024-08-30T04:05:59.962Z"},"__v":0}
{"_id":{"$oid":"66f31184cc835ef2d116f61e"},"uniqueId":"78ea4518-8a76-4b16-be14-d5740fc8d623","linkedTopicUniqueId":"8fa9c7d3-69e5-4b75-bd58-1557e7f3aba1","name":"Buzzwords related to ESG Lythouse","smartContent":{"content":"- AWS Databrew - ETL Tool\n- AWS Quickside\n- AWS Lambda\n- Frontend React\n- Database - MongoDB, Postgres, Cassandra\n- ReactJS AWS\n- Figma Components\n- Components, \n- Amplify Responsive CSS\n- Internationalization\n- Unit test case\n- Sonar cube\n- Copilot, ChatGPT","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-09-24T19:22:44.158Z"},"updatedDate":{"$date":"2024-09-24T19:22:44.158Z"},"__v":0}
{"_id":{"$oid":"66f31284cc835ef2d116f9e0"},"uniqueId":"4edffc77-418b-4524-bb0b-f1d94b0bc3f5","linkedTopicUniqueId":"8fa9c7d3-69e5-4b75-bd58-1557e7f3aba1","name":"About my last project","smartContent":{"content":"In my last project, I was responsible for developing and deploying a comprehensive application using a range of AWS services and modern web technologies. My primary role was to create **REST** and **GraphQL** services and integrate them seamlessly with the **ReactJS** frontend. I utilized tools like **AWS DataBrew** for ETL processes and **AWS QuickSight** for data visualization. For serverless functions, I worked with **AWS Lambda**, while the deployment of the application to **AWS EKS** was an essential part of my responsibilities.\n\nThe application architecture involved working with multiple databases, including **MongoDB**, **Postgres**, and **Cassandra**, ensuring smooth interactions across services. On the frontend, I utilized **Figma components** to build responsive UI elements and incorporated **Amplify Responsive CSS** for mobile compatibility and design scalability. I also focused on **internationalization** to support a global user base.\n\nQuality assurance was a critical part of my role, where I implemented **unit test cases** and maintained code quality through **SonarQube**. I also explored tools like **GitHub Copilot** and **ChatGPT** for code generation and productivity enhancement.\n\nThis project has strengthened my expertise in full-stack development, leveraging **AWS services**, and delivering scalable, cloud-native solutions.","textOutputType":"markdown","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-09-24T19:27:00.523Z"},"updatedDate":{"$date":"2024-09-24T19:27:00.523Z"},"__v":0}
{"_id":{"$oid":"670d2c6a7be5c9322bdcdd1c"},"uniqueId":"bdc5e715-f778-4909-be38-60cc8eb5a26d","linkedTopicUniqueId":"da4fadd8-2485-44e2-b535-a5309a0d2a89","name":"Self-realization about my career","smartContent":{"content":"Self-realization about my career\n\tAs a Developer\n\t\tIn Backend Development, I have worked on\n\t\t\tcreating\n\t\t\t\tAPIs\n\t\t\t\t\t(REST/GraphQL/Façade APIs to be consumed by Flex applications)\n\t\t\t\tServices\n\t\t\t\t\tto communicate with databases (MongoDB, MySQL, PostgreSQL, H2, SQLite) to perform CRUD operations on business entities\n\t\t\t\tUtilities\n\t\t\t\t\tto send emails\n\t\t\t\t\tto generate Jasper reports\n\t\t\t\t\tto perform ETL processes for transforming and loading data from source to target databases\n\t\t\t\t\t\n\t\tIn Frontend Development, I have worked on\n\t\t\tcreating\n\t\t\t\tUIs \n\t\t\t\t\tusing\n\t\t\t\t\t\tHTML, CSS, JavaScript, Flex4, Struts, JSPs, AngularJS, ReactJS\n\t\t\tintegrating\n\t\t\t\tBackend APIs for dynamic data fetching and UI rendering\n\t\t\t\n\tAs a Team Lead\n\t\tI performed Technical Design for\n\t\t\tEntity design for given APIs\n\t\t\tPage design for newly developed APIs\n\t\tI created and executed plans\n\t\t\tto perform ETL processes efficiently\n\t\t\tto migrate codebases from SVN to GitHub (without old histories)\n\t\tIn ShubhWeb Application\n\t\t\tSuccessfully integrated 3rd party APIs (NSDL, CDSL) for EDIS functionality\n\t\tIn ESG Lythouse\n\t\t\tSuccessfully created and integrated GMI (Goals, Metrics, Initiatives) into Next.js pages\n\t\t\t\n\tAs a Scrum Master\n\t\tI successfully managed the team to deliver features within tight schedules and deadlines\n\t\t\tensured smooth collaboration between cross-functional teams\n\t\t\tkept sprint goals aligned with project objectives\n\t\t\torganized daily stand-ups and sprint planning sessions to maintain workflow efficiency\n","textOutputType":"skeleton","textInputType":"TextArea"},"order":9999,"tags":[],"createdDate":{"$date":"2024-10-14T14:36:26.743Z"},"updatedDate":{"$date":"2024-10-14T14:36:26.743Z"},"__v":0}
