{"_id":{"$oid":"66b51d092e502e2a11d670a7"},"uniqueId":"bc871eee-edee-49ab-8ec2-43410153a4c9","parentId":"","name":"**[Task]**: Plan to Add \"Skeleton\" Field in a Memory Map","details":[],"references":[],"createdDate":{"$date":"2024-08-08T19:31:21.521Z"},"updatedDate":{"$date":"2024-10-19T16:40:22.988Z"},"__v":0,"skeleton":"Plan to Add \"Skeleton\" Field in a Memory Map\n\tRequirements\n\t\tPhase 1: Basic Skeleton Integration [Done]\n\t\t\t1. Memory Map Creation:\n\t\t\t\t- Initially, the \"skeleton\" field should not be added to the Memory Map during its creation.\n\t\t\t2. Add/Edit Skeleton Option:\n\t\t\t\t- Introduce an option in the Memory Map \"actions\" to Add/Edit Skeleton.\n\t\t\t\t- This option should allow users to input and update the \"skeleton\" field.\n\t\t\t3. Skeleton Storage:\n\t\t\t\t- In this phase, the \"skeleton\" field is a simple string.\n\t\t\t\t- The skeleton string will be saved directly in the existing Memory Map object.\n\t\t\t4. UI/UX Considerations:\n\t\t\t\t- Ensure the UI for the \"actions\" menu clearly differentiates the option for managing the skeleton.\n\t\t\t5. Validation:\n\t\t\t\t- Validate that the skeleton string meets any length or format requirements before saving.\n\t\tPhase 2: Advanced Skeleton Management\n\t\t\t1. Memory Map Creation:\n\t\t\t\t- As in Phase 1, the \"skeleton\" field should not be initially added during the creation of a new Memory Map.\n\t\t\t2. Enhanced Add/Edit Skeleton Option:\n\t\t\t\t- The Memory Map \"actions\" should allow users to Add/Edit the skeleton.\n\t\t\t\t- Conditional Actions:\n\t\t\t\t\t- If a skeleton object exists, the action should present an \"Edit\" option.\n\t\t\t\t\t- If the skeleton is missing or null, the action should present a \"Create\" option.\n\t\t\t3. Separate Skeleton Storage:\n\t\t\t\t- The skeleton should be stored in a separate collection (e.g., a database collection or a separate table).\n\t\t\t\t- Reference Linking:\n\t\t\t\t\t- Link the Memory Map to its corresponding skeleton object using a unique identifier.\n\t\t\t4. Skeleton Object Fields:\n\t\t\t\t- uniqueId: A unique identifier for the skeleton object, used to link with the Memory Map.\n\t\t\t\t- content: A string containing the skeleton's content.\n\t\t\t\t- version: A version identifier to handle updates and changes to the skeleton content.\n\t\t\t5. Versioning System:\n\t\t\t\t- Implement a versioning system for the skeleton content to track changes over time.\n\t\t\t\t- Provide options to revert to previous versions if needed.\n\t\t\t6. API Integration:\n\t\t\t\t- Ensure API endpoints are updated to support the creation, updating, and retrieval of skeletons.\n\t\t\t\t- The API should handle the linking between Memory Maps and skeleton objects.\n\t\t\t7. Data Migration (if applicable):\n\t\t\t\t- Plan for data migration if existing Memory Maps need to transition to using a separate skeleton collection.\n\t\t\t8. Security Considerations:\n\t\t\t\t- Implement security measures to protect the skeleton data, such as access controls and data encryption.\n\t\t\t9. Testing and Validation:\n\t\t\t\t- Conduct thorough testing for both phases, including unit tests, integration tests, and user acceptance testing (UAT).\n\t\t\t\t- Validate the performance impact of the additional data storage and retrieval for skeleton objects.\n\t\tAdditional Considerations\n\t\t\t1. User Permissions:\n\t\t\t\t- Define user roles and permissions for who can create, edit, or delete skeletons within a Memory Map.\n\t\t\t2. Notifications:\n\t\t\t\t- Consider adding notifications or alerts when a skeleton is added, updated, or deleted.\n\t\t\t3. Backup and Recovery:\n\t\t\t\t- Implement backup and recovery procedures for skeleton data to prevent data loss.\n\t\t\t4. Documentation:\n\t\t\t\t- Update the project documentation to reflect the new features and how they integrate with existing systems.\n\t\t\t\t- Include examples of API usage and UI interactions.\n\t\t\t5. Performance Monitoring:\n\t\t\t\t- Monitor the system's performance after implementing these changes to ensure there are no regressions.\n\t[08-Oct-2024]: Upgradation of MemoryMap skeleton\n\t\tso that we can\n\t\t\t- store skeleton string in either [\"indented-string\", \"json-array\",]\n\t\t\t- store multiline text (in Markdown format) for a node\n\t\tSteps\n\t\t\t- Add `skeletonTextType` with default value `\"indented-string\"`\n","skeletonTextType":"indented-string"}
{"_id":{"$oid":"66b51d102e502e2a11d670ab"},"uniqueId":"ed092d42-5be1-4484-8b00-d5dbbdd49d3f","parentId":"","name":"JavaScript: Probable interview questions","details":[],"references":[],"createdDate":{"$date":"2024-08-08T19:31:28.051Z"},"updatedDate":{"$date":"2024-08-20T05:32:11.902Z"},"__v":0,"skeleton":"Probable Interview Questions for JavaScript\n\tCore JavaScript Concepts\n\t\tWhat are the different data types available in JavaScript?\n\t\tExplain the difference between `var`, `let`, and `const`.\n\t\tWhat is hoisting in JavaScript?\n\t\tExplain the concept of closures in JavaScript.\n\t\tWhat is the difference between `==` and `===` operators?\n\t\tHow does JavaScript handle asynchronous code?\n\t\tWhat is the `this` keyword in JavaScript?\n\t\tExplain the concept of scope and scope chain in JavaScript.\n\tFunctions and Objects\n\t\tWhat are first-class functions in JavaScript?\n\t\tExplain the difference between function declarations and function expressions.\n\t\tWhat is a callback function, and how is it used?\n\t\tExplain the concept of higher-order functions.\n\t\tWhat is the purpose of arrow functions in JavaScript?\n\t\tHow do you create and use objects in JavaScript?\n\t\tWhat are prototypes, and how do they work in JavaScript?\n\t\tExplain the difference between `Object.create()` and class-based inheritance.\n\tAsynchronous JavaScript\n\t\tWhat is the event loop in JavaScript, and how does it work?\n\t\tExplain the concept of Promises in JavaScript.\n\t\tWhat is async/await, and how does it simplify working with Promises?\n\t\tHow do you handle errors in asynchronous code?\n\t\tWhat are microtasks and macrotasks in JavaScript?\n\t\tExplain how `setTimeout` and `setInterval` work in JavaScript.\n\tJavaScript ES6+ Features\n\t\tWhat are template literals in JavaScript, and how do you use them?\n\t\tExplain the concept of destructuring in JavaScript.\n\t\tWhat are spread and rest operators, and how are they used?\n\t\tWhat is the purpose of `let` and `const` in ES6?\n\t\tExplain the use of default parameters in JavaScript functions.\n\t\tWhat is the module system in ES6, and how does it work?\n\t\tHow do classes work in JavaScript, and what is their purpose?\n\tJavaScript DOM Manipulation\n\t\tWhat is the Document Object Model (DOM) in JavaScript?\n\t\tHow do you select elements from the DOM?\n\t\tWhat is event delegation, and how is it implemented?\n\t\tExplain the difference between `event.preventDefault()` and `event.stopPropagation()`.\n\t\tHow do you create and insert elements into the DOM?\n\t\tWhat is the difference between `innerHTML` and `textContent`?\n\t\tHow do you handle events in JavaScript?\n\tJavaScript Best Practices\n\t\tWhat are some best practices for writing clean and efficient JavaScript code?\n\t\tHow do you optimize the performance of a JavaScript application?\n\t\tWhat are the best practices for handling asynchronous code?\n\t\tHow do you structure and organize JavaScript code?\n\t\tWhat are the best practices for working with objects and functions?\n\t\tHow do you avoid common pitfalls and bugs in JavaScript?\n\tJavaScript Debugging and Testing\n\t\tHow do you debug JavaScript code?\n\t\tWhat tools and techniques are available for debugging JavaScript?\n\t\tWhat are some common JavaScript errors, and how do you handle them?\n\t\tHow do you write unit tests for JavaScript code?\n\t\tWhat testing frameworks are available for JavaScript?\n\t\tHow do you mock dependencies in JavaScript tests?\n\tJavaScript Frameworks and Libraries\n\t\tWhat is the difference between a JavaScript framework and a library?\n\t\tExplain the purpose of React in JavaScript development.\n\t\tWhat are the core concepts of Angular in JavaScript?\n\t\tHow does Vue.js differ from React and Angular?\n\t\tWhat is jQuery, and how is it used in JavaScript projects?\n\t\tWhat are some popular state management libraries in JavaScript?\n\tJavaScript Security\n\t\tWhat are the common security vulnerabilities in JavaScript?\n\t\tHow do you prevent Cross-Site Scripting (XSS) attacks?\n\t\tWhat is Cross-Site Request Forgery (CSRF), and how do you prevent it?\n\t\tHow do you secure data in transit in a JavaScript application?\n\t\tWhat are some best practices for securing a JavaScript codebase?\n\t\tHow do you handle sensitive data in JavaScript?\n\tJavaScript Performance Optimization\n\t\tHow do you improve the load time of a JavaScript application?\n\t\tWhat techniques can be used to optimize JavaScript code execution?\n\t\tHow does lazy loading work in JavaScript?\n\t\tWhat is the role of caching in improving JavaScript performance?\n\t\tHow do you minimize the impact of JavaScript on page rendering?\n\t\tWhat are web workers, and how do they enhance performance?\n","skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66b51d1d2e502e2a11d670b3"},"uniqueId":"bdf1f99d-d476-4d4b-bc68-eb039587e636","parentId":"","name":"Java: Probable interview questions","details":[],"references":[],"createdDate":{"$date":"2024-08-08T19:31:41.367Z"},"updatedDate":{"$date":"2024-08-20T05:32:27.095Z"},"__v":0,"skeleton":"Probable Interview Questions for Java\n\tCore Java Concepts\n\t\tWhat is the difference between JDK, JRE, and JVM?\n\t\tExplain the concept of object-oriented programming (OOP) in Java.\n\t\tWhat are the main principles of OOP?\n\t\tHow does Java achieve platform independence?\n\t\tWhat is the difference between `==` and `equals()` in Java?\n\t\tExplain the concept of inheritance in Java.\n\t\tWhat is polymorphism, and how is it implemented in Java?\n\t\tWhat are abstract classes and interfaces in Java?\n\t\tWhat is the difference between abstract classes and interfaces?\n\tJava Memory Management\n\t\tHow does Java handle memory management?\n\t\tWhat is the purpose of the garbage collector in Java?\n\t\tExplain the difference between stack memory and heap memory in Java.\n\t\tWhat are memory leaks in Java, and how can they be avoided?\n\t\tWhat is the significance of the `finalize()` method?\n\t\tWhat are strong, weak, soft, and phantom references in Java?\n\tMultithreading and Concurrency\n\t\tWhat is multithreading in Java?\n\t\tExplain the difference between `Thread` class and `Runnable` interface.\n\t\tHow do you create a thread-safe class in Java?\n\t\tWhat is the purpose of the `synchronized` keyword in Java?\n\t\tExplain the concept of a deadlock, and how can it be avoided?\n\t\tWhat are `volatile` variables in Java?\n\t\tWhat is the difference between `wait()` and `sleep()` in Java?\n\t\tWhat is the `java.util.concurrent` package, and why is it important?\n\tCollections Framework\n\t\tWhat is the Java Collections Framework?\n\t\tExplain the difference between `ArrayList` and `LinkedList`.\n\t\tWhat is the difference between `HashSet` and `TreeSet`?\n\t\tHow does `HashMap` work in Java?\n\t\tWhat is the difference between `HashMap` and `Hashtable`?\n\t\tExplain the concept of generics in Java.\n\t\tWhat are `Comparator` and `Comparable` interfaces?\n\t\tHow do you sort a collection in Java?\n\tException Handling\n\t\tWhat is exception handling in Java?\n\t\tExplain the difference between checked and unchecked exceptions.\n\t\tWhat is the purpose of the `try`, `catch`, and `finally` blocks?\n\t\tWhat is the `throws` keyword used for in Java?\n\t\tHow do you create a custom exception in Java?\n\t\tExplain the concept of exception chaining in Java.\n\t\tWhat are the best practices for exception handling in Java?\n\tInput/Output (I/O)\n\t\tExplain the Java I/O stream hierarchy.\n\t\tWhat is the difference between byte streams and character streams in Java?\n\t\tHow does Java handle file I/O operations?\n\t\tWhat is serialization, and how is it implemented in Java?\n\t\tWhat is the purpose of the `transient` keyword in Java?\n\t\tHow do you handle file reading and writing using `BufferedReader` and `BufferedWriter`?\n\t\tExplain the concept of `NIO` (New I/O) in Java.\n\tJVM Internals\n\t\tExplain the JVM architecture.\n\t\tWhat is the purpose of the classloader in Java?\n\t\tWhat is the `Just-In-Time` (JIT) compiler in Java?\n\t\tHow does the JVM handle method invocation and execution?\n\t\tWhat are the different types of class loaders in Java?\n\t\tWhat is the `JVM memory model`, and why is it important?\n\t\tExplain the different types of garbage collectors available in the JVM.\n\tJava 8 and Beyond\n\t\tWhat are the new features introduced in Java 8?\n\t\tExplain the concept of lambda expressions in Java.\n\t\tWhat is the Stream API, and how is it used?\n\t\tWhat are default methods in interfaces?\n\t\tHow does the `Optional` class help in handling null values?\n\t\tExplain the concept of functional interfaces in Java.\n\t\tWhat is the significance of the `java.time` package in Java 8?\n\t\tWhat are some key features introduced in Java 9, 10, 11, or later?\n\tAdvanced Java Topics\n\t\tWhat is reflection in Java, and how is it used?\n\t\tExplain the concept of annotations in Java.\n\t\tHow do you implement dependency injection in Java?\n\t\tWhat is the purpose of the `Proxy` class in Java?\n\t\tWhat is the difference between `Serializable` and `Externalizable` interfaces?\n\t\tWhat is the use of the `volatile` keyword in multithreading?\n\t\tHow does the `Fork/Join` framework work in Java?\n\tJava Best Practices\n\t\tWhat are some best practices for writing clean and efficient Java code?\n\t\tHow do you optimize the performance of a Java application?\n\t\tWhat are the best practices for exception handling?\n\t\tHow do you handle large amounts of data in Java?\n\t\tWhat are the security best practices in Java?\n\t\tHow do you write unit tests for Java applications?\n\t\tWhat are the best practices for working with collections in Java?\n","skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66b5211d2e502e2a11d69199"},"uniqueId":"61e0a97e-f36b-4c92-bbb1-a04c0de1a0c1","parentId":"","name":"Last project: Probable interview questions","details":[],"references":[],"createdDate":{"$date":"2024-08-08T19:48:45.276Z"},"updatedDate":{"$date":"2024-08-20T05:32:56.303Z"},"__v":0,"skeleton":"Probable Interview Questions for Last Project\n\tProject Overview\n\t\tWhat was the main objective of the project?\n\t\tCan you describe the key deliverables of the project?\n\t\tWho were the primary stakeholders involved?\n\t\tWhat was the timeline for the project?\n\t\tWhat tools and technologies did you use?\n\t\tHow did this project align with the company's overall goals?\n\t\tWhat were the critical success factors for this project?\n\tYour Role and Responsibilities\n\t\tWhat was your specific role in the project?\n\t\tWhat were your main responsibilities and tasks?\n\t\tHow did you contribute to the project's overall success?\n\t\tDid you lead any parts of the project, and if so, how?\n\t\tHow did you ensure the project stayed on track?\n\t\tCan you describe how you managed your time and resources during the project?\n\tTechnical Challenges and Solutions\n\t\tWhat were the main technical challenges you faced?\n\t\tHow did you approach problem-solving during the project?\n\t\tCan you provide an example of a specific challenge and how you overcame it?\n\t\tHow did you ensure the quality and performance of the deliverables?\n\t\tWhat strategies did you use for testing and debugging?\n\t\tDid you encounter any performance issues, and how did you resolve them?\n\t\tHow did you ensure the project was scalable and maintainable?\n\tCollaboration and Communication\n\t\tHow did you collaborate with other team members?\n\t\tWhat tools or platforms did you use for team communication?\n\t\tHow did you handle conflicts or disagreements within the team?\n\t\tHow did you ensure everyone was aligned with the project's goals?\n\t\tCan you discuss how you communicated progress and challenges to stakeholders?\n\t\tWhat was your approach to code reviews and feedback?\n\tProject Management\n\t\tHow did you manage the project timeline and milestones?\n\t\tWhat project management methodologies did you use?\n\t\tHow did you handle changes in scope or requirements?\n\t\tWhat was your approach to risk management in the project?\n\t\tHow did you track the project's progress?\n\t\tCan you discuss any tools you used for project management?\n\t\tHow did you ensure the project met its deadlines?\n\tImpact and Results\n\t\tWhat were the final outcomes of the project?\n\t\tHow did the project impact the company or the clients?\n\t\tCan you discuss any specific metrics or KPIs that were met?\n\t\tWhat feedback did you receive from stakeholders or users?\n\t\tHow did your work contribute to the project's success?\n\t\tWhat did you learn from the project's results?\n\tChallenges and Lessons Learned\n\t\tWhat was the most challenging aspect of the project?\n\t\tHow did you overcome obstacles during the project?\n\t\tWhat lessons did you learn from working on this project?\n\t\tWhat would you have done differently in hindsight?\n\t\tCan you discuss any unexpected issues that arose and how you handled them?\n\t\tHow did this project contribute to your professional growth?\n\tTransitioning and Wrap-Up\n\t\tHow did you transition out of the project once it was completed?\n\t\tWhat steps did you take to ensure a smooth handover?\n\t\tWhat documentation or training did you provide for future maintenance?\n\t\tHow did you evaluate the success of the project after completion?\n\t\tWhat feedback did you receive during the project post-mortem?\n\t\tWhat were the key takeaways from this project for future work?\n","skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c221f82e59e933a354a78a"},"uniqueId":"dd4e3523-ceda-4790-91dc-e5e200598d7c","parentId":"","name":"Last company: probable interview questions","skeleton":"Probable Interview Questions for Last Company\n\tCompany Overview\n\t\tWhat was the mission and vision of your last company?\n\t\tCan you describe the products or services your last company provided?\n\t\tWho were the main competitors in your industry, and how did your company differentiate itself?\n\t\tWhat were the primary target markets for your company's products or services?\n\t\tHow did your company’s culture impact your work?\n\tYour Role and Responsibilities\n\t\tWhat was your official job title and department?\n\t\tWhat were your main responsibilities in your last role?\n\t\tHow did your role contribute to the overall goals of the company?\n\t\tCan you describe a typical day at work in your last role?\n\t\tHow did you prioritize your tasks and manage your time effectively?\n\t\tWhat tools or technologies did you use regularly?\n\t\tHow did you collaborate with other teams or departments?\n\t\tWhat was the most challenging aspect of your role?\n\t\tCan you discuss a significant project you led or contributed to?\n\tTechnical Challenges and Solutions\n\t\tWhat were the main technical challenges you faced in your last role?\n\t\tHow did you approach problem-solving and troubleshooting?\n\t\tCan you provide an example of a complex problem you solved?\n\t\tWhat tools or methods did you use for debugging and optimizing code?\n\t\tHow did you ensure the scalability and performance of the systems you worked on?\n\t\tCan you describe any innovations or improvements you introduced?\n\tTeam Collaboration and Leadership\n\t\tHow did you collaborate with your team members on projects?\n\t\tWhat role did you play in team meetings and discussions?\n\t\tHow did you handle conflicts or disagreements within the team?\n\t\tCan you provide an example of a successful team project?\n\t\tHow did you mentor or guide junior developers or new team members?\n\t\tWhat was your approach to code reviews and feedback?\n\t\tHow did you contribute to maintaining or improving team morale?\n\tImpact and Achievements\n\t\tWhat were your most significant achievements in your last role?\n\t\tCan you discuss any specific metrics or results that highlight your impact?\n\t\tHow did your work directly contribute to the company’s success?\n\t\tDid you receive any recognition or awards for your work?\n\t\tWhat project or accomplishment are you most proud of?\n\t\tHow did you measure the success of your projects?\n\tLearning and Growth\n\t\tWhat skills did you develop or improve during your time at the company?\n\t\tHow did the company support your professional growth?\n\t\tCan you describe any training or certifications you pursued?\n\t\tHow did you stay updated with industry trends and new technologies?\n\t\tWhat did you learn from the challenges you faced in your role?\n\t\tHow did your role evolve over time, and what new responsibilities did you take on?\n\t\tWhat would you have done differently if given the chance?\n\tCompany Challenges and Environment\n\t\tWhat were the biggest challenges facing your company, and how did it respond?\n\t\tHow did the company adapt to changes in the market or industry?\n\t\tCan you discuss any significant changes or transitions during your time there?\n\t\tWhat was the company’s approach to innovation and staying competitive?\n\t\tHow did the company handle economic downturns or other external challenges?\n\t\tWhat was your experience with the company's management and leadership?\n\tTransitioning and Leaving\n\t\tWhat led to your decision to leave the company?\n\t\tHow did you handle the transition out of your role?\n\t\tWhat was the company's response when you announced your departure?\n\t\tWhat did you take away from your experience at the company?\n\t\tHow do you think your departure impacted the team or company?\n\t\tWhat have you done since leaving the company to continue your professional development?\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T16:31:52.22Z"},"updatedDate":{"$date":"2024-08-20T05:33:22.752Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c222c42e59e933a354a7b8"},"uniqueId":"abe31f1f-8c68-4efe-9943-e86702a8dda2","parentId":"","name":"Identification of my niche programming skills: Steps","skeleton":"Identify Your Niche Programming Skills\n\tSelf-Assessment\n\t\tReflect on your past projects and their impact\n\t\tIdentify the programming languages and technologies you enjoy working with\n\t\tEvaluate your problem-solving approaches and strengths\n\t\tAssess the types of problems you are naturally drawn to solve\n\t\tConsider feedback from peers, mentors, and supervisors\n\tSkill Inventory\n\t\tList all the programming languages and frameworks you are proficient in\n\t\tIdentify the domains or industries you have experience in (e.g., fintech, healthcare, gaming)\n\t\tNote any specialized tools or libraries you are comfortable using\n\t\tHighlight any certifications or courses you've completed\n\tReview Market Trends\n\t\tResearch in-demand programming skills in your industry\n\t\tIdentify emerging technologies or methodologies that interest you\n\t\tExplore job listings to understand the skills employers are seeking\n\t\tAnalyze the intersection of your skills with market demand\n\tDetermine Your Unique Value Proposition\n\t\tIdentify your key differentiators (e.g., deep knowledge in a niche technology)\n\t\tUnderstand how your unique skills can solve specific problems\n\t\tConsider how your skills can be applied to create innovative solutions\n\tAlign with Your Passion\n\t\tReflect on the areas of programming you are most passionate about\n\t\tIdentify the types of projects that excite you and motivate you to learn\n\t\tConsider how your interests align with your existing skills\n\t\tExplore how you can deepen your expertise in these areas\n\tExperiment and Explore\n\t\tEngage in side projects or open-source contributions to test your skills\n\t\tTake on challenging tasks that push your boundaries\n\t\tExplore new frameworks or languages that complement your existing skills\n\t\tAttend hackathons or coding competitions to test your niche skills\n\tSeek Mentorship and Feedback\n\t\tConnect with experts in the areas you’re interested in\n\t\tAsk for feedback on your work and areas for improvement\n\t\tSeek advice on how to specialize further in your chosen niche\n\t\tEvaluate your progress based on mentor guidance\n\tContinual Learning and Specialization\n\t\tEnroll in advanced courses or certifications in your niche area\n\t\tStay updated with the latest trends and best practices in your niche\n\t\tDeep dive into specialized topics and master them\n\t\tExpand your knowledge by exploring related subdomains\n\tValidate Your Niche\n\t\tTest your skills in real-world scenarios (freelance, consulting, etc.)\n\t\tSeek validation through successful projects or satisfied clients\n\t\tMeasure the impact of your skills in solving specific problems\n\t\tRefine your niche based on experiences and feedback\n\tDevelop Your Personal Brand\n\t\tShowcase your niche expertise through blogs, talks, or workshops\n\t\tContribute to forums, communities, or publications in your niche\n\t\tBuild a portfolio that highlights your niche skills and projects\n\t\tNetwork with professionals in your chosen niche to build connections\n\tMonitor and Adapt\n\t\tRegularly review the relevance of your niche skills in the market\n\t\tAdapt to new tools or technologies that complement your niche\n\t\tStay open to evolving your niche as the industry changes\n\t\tSeek new opportunities to apply and expand your niche skills\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T16:35:16.353Z"},"updatedDate":{"$date":"2024-08-20T05:35:06.526Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c224672e59e933a354a7ed"},"uniqueId":"b63c76b0-7a1f-4a54-833e-4079f0c0dfd4","parentId":"","name":"Interview preparation: Steps","skeleton":"Interview Preparation\n\tResearch the Company\n\t\tUnderstand the company’s mission and values\n\t\tReview recent news and press releases\n\t\tLearn about the company's products or services\n\t\tStudy the company culture through employee reviews\n\t\tIdentify the key players or leaders in the company\n\tResume and Portfolio Preparation\n\t\tUpdate your resume to reflect relevant skills and experiences\n\t\tTailor your resume to the specific job you're applying for\n\t\tPrepare a portfolio of work if applicable (projects, writing samples, etc.)\n\t\tCreate or update your LinkedIn profile\n\tTechnical Skills Preparation\n\t\tReview key concepts and fundamentals in your field\n\t\tPractice coding problems (LeetCode, HackerRank, etc.)\n\t\tStudy common algorithms and data structures\n\t\tWork on system design problems\n\t\tPrepare for technical tools and languages mentioned in the job description\n\tBehavioral and Soft Skills Preparation\n\t\tPrepare answers for common behavioral interview questions\n\t\tReflect on your past experiences and how they align with the job role\n\t\tPractice the STAR method (Situation, Task, Action, Result) for structuring answers\n\t\tWork on communication skills, including active listening and clear articulation\n\t\tDevelop stories that showcase your problem-solving and teamwork abilities\n\tMock Interviews\n\t\tParticipate in mock interviews with friends, colleagues, or mentors\n\t\tUse online platforms for mock interviews and feedback\n\t\tSimulate the interview environment (timing, format, etc.)\n\tPractice Problem Solving\n\t\tRegularly solve problems in a timed setting\n\t\tReview past solved problems and improve your approach\n\t\tPractice whiteboard or paper coding to simulate in-person technical interviews\n\t\tEngage in pair programming sessions to improve collaboration skills\nPrepare Questions for the Interviewer\n\t\tPrepare insightful questions about the company culture\n\t\tAsk about the team structure and workflow\n\t\tEnquire about growth opportunities and career development\n\t\tUnderstand the challenges and expectations of the role\n\t\tSeek clarification on the company's product roadmap or future goals\nDay of the Interview Preparation\n\t\tEnsure all necessary documents (resume, portfolio) are ready\n\t\tPlan your route and logistics if the interview is in person\n\t\tTest your technology setup if the interview is virtual\n\t\tReview your notes and key points before the interview\n\t\tStay calm and focused; practice relaxation techniques if needed\nPost-Interview Follow-Up\n\t\tSend a thank-you email to the interviewer(s)\n\t\tReflect on your performance and areas for improvement\n\t\tKeep track of follow-up timelines and responses\n\t\tStay prepared for possible next rounds of interviews\n\t\tContinue practicing and refining your skills\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T16:42:15.563Z"},"updatedDate":{"$date":"2024-08-20T05:36:20.052Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c224f52e59e933a354a819"},"uniqueId":"d66d0da6-af98-459f-8b12-6572b823c3b5","parentId":"","name":"Junit: Key Terminologies","skeleton":"JUnit Key Terminologies\n\n\tCore Concepts\n\t\t- JUnit: A unit testing framework for Java that helps to write and run repeatable tests.\n\t\t- Test Case: A single unit of testing, typically a method in a test class.\n\t\t- Test Suite: A collection of test cases that are executed together.\n\t\t- Test Runner: A tool that runs test cases and provides feedback on their execution.\n\n\tAnnotations\n\t\t- @Test: Marks a method as a test method.\n\t\t- @Before: Indicates that the annotated method should run before each test.\n\t\t- @After: Indicates that the annotated method should run after each test.\n\t\t- @BeforeClass: Indicates that the annotated method should run once before all tests in the class.\n\t\t- @AfterClass: Indicates that the annotated method should run once after all tests in the class.\n\t\t- @Ignore: Marks a test method or class to be ignored during the test run.\n\t\t- @RunWith: Specifies a custom runner to control the execution of tests.\n\n\tAssertions\n\t\t- assertEquals(expected, actual): Asserts that two values are equal.\n\t\t- assertNotEquals(expected, actual): Asserts that two values are not equal.\n\t\t- assertTrue(condition): Asserts that a condition is true.\n\t\t- assertFalse(condition): Asserts that a condition is false.\n\t\t- assertNull(object): Asserts that an object is null.\n\t\t- assertNotNull(object): Asserts that an object is not null.\n\t\t- assertThrows(expectedType, executable): Asserts that an executable block throws an exception of the expected type.\n\n\tTest Fixtures\n\t\t- Fixture: The setup needed for testing, including the initialization of objects and data.\n\t\t- Mock: A simulated object that mimics the behavior of real objects in controlled ways.\n\t\t- Stub: An object that provides predefined responses to method calls used in tests.\n\n\tExecution\n\t\t- Parameterized Test: A test that is run multiple times with different inputs.\n\t\t- Assumption: A condition that must be true for a test to execute.\n\n\tTest Configuration\n\t\t- @Nested: Indicates a nested test class which can be used to organize tests into hierarchical groups.\n\t\t- @Tag: Assigns tags to tests which can be used for filtering and organizing test execution.\n\t\t- @DisplayName: Provides a custom display name for a test class or method for better readability in test reports.\n\n\tTest Execution\n\t\t- Test Order: The order in which test methods are executed, which can be controlled using annotations like `@Order`.\n\t\t- Test Execution Listener: A component that listens to test lifecycle events and can be used for custom processing before or after tests.\n\n\tAdvanced Assertions\n\t\t- assertAll: Asserts that all the given assertions are true, allowing multiple assertions to be grouped and evaluated together.\n\t\t- assertThat: A flexible assertion mechanism provided by Hamcrest, which allows for expressive and readable assertions.\n\n\tTest Lifecycle\n\t\t- Test Context: The context or environment in which tests are executed, including setup and teardown operations.\n\t\t- Test Phase: Different stages of test execution, including setup, execution, and verification.\n\n\tTest Documentation\n\t\t- Test Report: A document or log that summarizes the results of test executions, including passed and failed tests.\n\t\t- Test History: The record of previous test executions and their outcomes, used to track changes and identify regressions.\n\n\tCode Coverage Tools\n\t\t- Jacoco: A code coverage tool that integrates with JUnit to provide detailed coverage metrics.\n\t\t- Cobertura: Another code coverage tool used to measure how much of the code is tested by JUnit tests.\n\n\tDependency Injection for Testing\n\t\t- @Autowired: Used for automatic dependency injection in tests to provide the necessary components.\n\t\t- @MockBean: Allows the replacement of a bean in the application context with a mock for testing purposes.\n\n\tIntegration Testing\n\t\t- @SpringBootTest: Used for loading the full application context in Spring Boot tests, useful for integration tests.\n\t\t- @DataJpaTest: A specialized test annotation for testing JPA repositories with an embedded database.\n\t\t\n\tOthers\n\t\t- Test Category: A group of tests that can be executed together based on certain characteristics or requirements.\n\t\t- Test Coverage: A measure of how much of the code is exercised by the test cases.\n\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T16:44:37.239Z"},"updatedDate":{"$date":"2024-08-20T05:36:54.114Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c22e3d2e59e933a354da93"},"uniqueId":"4b3b84a9-a786-413a-a56c-56fce61daa39","parentId":"","name":"Angular: Key Terminologies","skeleton":"Angular\n    Core Concepts\n        Component\tA building block of Angular applications, consisting of a TypeScript class, HTML template, and CSS styles.\n        Module\tA container for a group of related components, services, and other code, typically organized into functional units.\n        Directive\tA class that adds behavior to elements in the Angular application (e.g., `*ngIf`, `*ngFor`).\n        Service\tA class that handles business logic, data management, and communication between components.\n        Dependency Injection\tA design pattern in Angular that provides dependencies to components and services.\n        Data Binding\tBinding data between the component class and the template, including one-way and two-way binding.\n        Pipe\tA way to transform data in templates, such as formatting dates or currency.\n        Template\tA part of the component that defines the view or UI, using HTML and Angular directives.\n        Metadata\tDecorators used to add additional information to components, modules, and other classes (e.g., `@Component`, `@NgModule`).\n    \n    Angular Features\n        Angular CLI\tA command-line interface tool for scaffolding, building, and managing Angular applications.\n        Angular Router\tA module that handles navigation and routing between different views or pages in an Angular application.\n        Reactive Forms\tForms that use observables and reactive programming to manage form inputs and validation.\n        Template-Driven Forms\tA way to manage forms using Angular's directives in the template, with less emphasis on reactive programming.\n        RxJS\tA library for reactive programming using observables, commonly used in Angular for handling asynchronous operations.\n        Change Detection\tThe mechanism Angular uses to update the view when the application's state changes.\n        AOT Compilation\tAhead-of-Time compilation that compiles Angular templates and components during the build process for faster rendering.\n        JIT Compilation\tJust-in-Time compilation that compiles Angular templates and components in the browser at runtime.\n        Angular Universal\tServer-side rendering of Angular applications for improved performance and SEO.\n        Modules (NgModule)\tOrganizing Angular code into modules, each with its own components, directives, pipes, and services.\n\n    Angular Architecture\n        NgModule\tA class with the `@NgModule` decorator that defines a module, its components, directives, pipes, and services.\n        Component Decorator\tAn `@Component` decorator that defines metadata for a component, including its selector, template, and styles.\n        Dependency Injection System\tA system that provides instances of services and other dependencies to components and services.\n        Lifecycle Hooks\tMethods that allow you to tap into key moments of a component’s lifecycle (e.g., `ngOnInit`, `ngOnDestroy`).\n        Observables\tA pattern for handling asynchronous data streams, used extensively with RxJS in Angular applications.\n        Services\tA class designed to handle business logic and data management, typically injected into components or other services.\n\n    Angular Tools\n        Angular DevTools\tA browser extension that provides debugging and profiling tools for Angular applications.\n        Angular Elements\tA package that allows Angular components to be used as custom elements (web components) in other frameworks.\n        Angular Material\tA UI component library that provides a set of reusable, well-designed components following Material Design principles.\n        Angular Schematics\tA tool used by Angular CLI for generating or modifying Angular projects and code with custom templates.\n\n    Angular Testing\n        Jasmine\tA testing framework used for writing unit tests for Angular applications.\n        Karma\tA test runner that executes unit tests in multiple browsers for Angular applications.\n        TestBed\tA testing utility provided by Angular to configure and initialize a testing environment for Angular components and services.\n        Mock Service\tA technique to simulate the behavior of real services in unit tests, allowing isolated testing of components.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:24:13.378Z"},"updatedDate":{"$date":"2024-08-20T05:37:08.172Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c230332e59e933a354dac9"},"uniqueId":"f1a5673e-f06b-4127-a29f-2c8dbe913ff5","parentId":"","name":"ReactJS: Key Terminologies","skeleton":"ReactJS Terminologies:\n    Components:\n        A reusable piece of UI, typically a function or class, that renders some output.\n    JSX:\n        A syntax extension that looks similar to XML, used to describe UI elements in React.\n    Props:\n        Short for properties, these are read-only inputs passed to components to control their behavior.\n    State:\n        An object that holds dynamic data specific to a component and can change over time.\n    Lifecycle Methods:\n        Special methods in class components that allow you to hook into different phases of a component's lifecycle.\n    Hooks:\n        Functions that let you use state and other React features in functional components.\n    Virtual DOM:\n        A lightweight in-memory representation of the real DOM that React uses to efficiently update the UI.\n    Context API:\n        A way to pass data through the component tree without manually passing props down at every level.\n    Redux:\n        A state management library commonly used with React to manage and centralize application state.\n    Refs:\n        A way to access and interact with DOM elements or React elements directly in a component.\n    Keys:\n        Unique identifiers used to help React identify which items have changed, are added, or removed in lists.\n    React Router:\n        A library for handling routing in React applications, allowing for navigation between different components/views.\n    Higher-Order Components (HOC):\n        A function that takes a component and returns a new component, typically used for reusing component logic.\n    PureComponent:\n        A React component that implements `shouldComponentUpdate` with a shallow prop and state comparison.\n    Concurrent Mode:\n        An experimental feature that helps React apps stay responsive and gracefully adjust to the user’s device capabilities and network speed.\n    Portals:\n        A method of rendering children into a DOM node outside the parent component’s DOM hierarchy.\n    Error Boundaries:\n        Components that catch JavaScript errors anywhere in their child component tree and display a fallback UI instead of crashing.\n    Fragments:\n        A way to group multiple elements without adding extra nodes to the DOM.\n    Memoization:\n        A technique to optimize performance by caching the output of a function based on its inputs.\n    React.lazy:\n        A function that lets you render a dynamic import as a regular component, enabling code splitting.\n    Suspense:\n        A component that allows you to display a fallback while waiting for a component to load, often used with `React.lazy`.\n    PropTypes:\n        A type-checking library for ensuring that components receive the correct props.\n    Render Props:\n        A pattern where a component uses a function prop to control what to render, enabling code reuse.\n    useEffect:\n        A hook that lets you perform side effects in function components, replacing lifecycle methods in class components.\n    useContext:\n        A hook that lets you subscribe to React context without needing to wrap components in a consumer.\n    useReducer:\n        A hook similar to `useState` but more suited for managing complex state logic, especially when it involves multiple sub-values.\n    useMemo:\n        A hook that memoizes the result of a computation to optimize performance by avoiding unnecessary recalculations.\n    useRef:\n        A hook that returns a mutable ref object whose `.current` property can hold a DOM element or any other value.\n    useCallback:\n        A hook that returns a memoized callback function, useful for passing stable functions as props.\n    StrictMode:\n        A tool for highlighting potential problems in an application, such as deprecated APIs or side effects outside `useEffect`.\n    Hydration:\n        The process of attaching React's event listeners to existing HTML from a server-rendered page.\n    ReactDOM:\n        The library responsible for rendering React components into the DOM.\n    Prop Drilling:\n        The process of passing props down multiple layers of components, often seen as a code smell when overused.\n    Code Splitting:\n        The practice of breaking down your application into smaller bundles, which can be loaded on demand to improve performance.\n\nReactJS Terminologies:\n    Core Concepts:\n        React: Library for building user interfaces.\n        JSX: Syntax extension for JavaScript, used with React.\n        Components: Reusable UI elements in React.\n        Props: Data passed to components.\n        State: Local data storage for components.\n        Virtual DOM: Lightweight in-memory representation of the real DOM.\n\n    Component Types:\n        Functional Components: Stateless components as functions.\n        Class Components: Stateful components using ES6 classes.\n        Higher-Order Components: Components that return other components.\n        Pure Components: Components optimized for performance by shallow comparison.\n\n    Hooks:\n        useState: Hook for adding state to functional components.\n        useEffect: Hook for side effects in functional components.\n        useContext: Hook for accessing context in components.\n        useReducer: Hook for complex state management.\n        useMemo: Hook for memoizing expensive calculations.\n\n    Routing:\n        React Router: Library for routing in React applications.\n        Route: Component for defining individual routes.\n        Link: Component for navigation between routes.\n        useParams: Hook for accessing route parameters.\n\n    State Management:\n        Redux: State management library for React.\n        Reducers: Functions for handling state transitions in Redux.\n        Actions: Payloads of information sent to the store.\n        Store: Centralized state container in Redux.\n        Context API: React's built-in way for passing state globally.\n\n    Performance Optimization:\n        React.memo: Higher-order component for memoizing functional components.\n        useCallback: Hook for memoizing callback functions.\n        Lazy Loading: Loading components only when needed.\n        React Suspense: Component for handling lazy loading and waiting states.\n\n    Testing:\n        Jest: JavaScript testing framework for React.\n        Enzyme: Testing utility for React components.\n        React Testing Library: Lightweight library for testing React components.\n\n    Build Tools:\n        Create React App: Tool for bootstrapping React applications.\n        Webpack: Module bundler for React applications.\n        Babel: JavaScript compiler for transforming modern JS code.\n\n    Styling:\n        CSS Modules: Locally scoped CSS for React components.\n        Styled Components: Library for styling React components using tagged template literals.\n        Emotion: Library for writing CSS styles with JavaScript.\n\nReactJS\n    Component\tA reusable piece of UI that can be a class or functional component.\n    JSX\tJavaScript XML, a syntax extension that allows writing HTML-like code within JavaScript.\n    Props\tShort for properties, these are inputs passed to components to configure their behavior or render dynamic data.\n    State\tA mechanism to store and manage dynamic data within a component, causing re-renders when updated.\n    Lifecycle Methods\tMethods that allow you to hook into different stages of a component's lifecycle (e.g., `componentDidMount`).\n    Functional Component\tA component defined as a JavaScript function that takes props as an argument and returns JSX.\n    Class Component\tA component defined as a class that extends `React.Component` and has lifecycle methods.\n    Hooks\tFunctions that let you use state and other React features in functional components (e.g., `useState`, `useEffect`).\n    useState\tHook for managing state in functional components.\n    useEffect\tHook for performing side effects in functional components, such as fetching data or subscribing to events.\n    Context API\tA way to pass data through the component tree without having to pass props down manually at every level.\n    Redux\tA state management library often used with React to manage application state in a predictable way.\n    React Router\tA library for handling routing and navigation within a React application.\n    Virtual DOM\tA lightweight in-memory representation of the real DOM used by React to optimize updates and rendering.\n    Reconciliation\tThe process by which React updates the DOM to match the latest virtual DOM.\n    Key\tA special attribute used to uniquely identify elements in a list, helping React optimize rendering.\n    Error Boundaries\tComponents that catch JavaScript errors in their child component tree and display a fallback UI.\n    Suspense\tA feature for handling asynchronous operations and code splitting, allowing components to wait for data before rendering.\n    Fragments\tA component that allows grouping of multiple elements without adding extra nodes to the DOM.\n    Higher-Order Component\tA function that takes a component and returns a new component with additional props or functionality.\n    Render Props\tA technique for sharing code between components using a function as a prop that returns a React element.\n    Portals\tA way to render children into a DOM node that exists outside the parent component's hierarchy.\n    React Fiber\tA complete rewrite of React's reconciliation algorithm to improve performance and enable new features.\n    Concurrent Mode\tA set of new features that help React apps stay responsive and gracefully adjust to the user’s device capabilities.\n    Server-Side Rendering (SSR)\tRendering React components on the server to generate HTML content before sending it to the client.\n    Static Site Generation (SSG)\tGenerating static HTML pages at build time rather than on each request, improving performance and SEO.\n    ComponentDidCatch\tMethod used to catch JavaScript errors anywhere in the component tree and log them.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:32:35.656Z"},"updatedDate":{"$date":"2024-08-20T05:37:22.297Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c2317d2e59e933a354db6b"},"uniqueId":"8690c0d9-8aa7-4fa1-8e44-a56ef4585c7d","parentId":"","name":"ES6+ (ECMAScript 2015 and beyond) features: Key Terminologies","skeleton":"**[Key Terminologies]**: ES6+ (ECMAScript 2015 and beyond) features\n\tES6+ Features\n\t\tArrow Functions\tConcise syntax for writing functions using `() => {}`.\n\t\tTemplate Literals\tString literals allowing embedded expressions and multi-line strings, using backticks `` ` ``.\n\t\tDestructuring Assignment\tSyntax for extracting values from arrays or properties from objects into variables.\n\t\tSpread Operator\tExpands elements of an iterable (e.g., array) into individual elements.\n\t\tRest Operator\tCollects multiple elements into an array, used in function parameters.\n\t\tClasses\tSyntax for defining classes with constructors, methods, and inheritance.\n\t\tModules\tStandardized module system for importing and exporting code with `import` and `export`.\n\t\tDefault Parameters\tAllows functions to have default values for parameters if no value or `undefined` is provided.\n\t\tEnhanced Object Literals\tShorter syntax for defining methods and properties in objects, and computed property names.\n\t\tPromises\tA mechanism for handling asynchronous operations, providing a `then()` method to handle success and failure.\n\t\t`async`/`await`\tSyntax for working with promises in a more readable and synchronous-like fashion.\n\t\tSymbols\tA unique and immutable primitive value used as an identifier for object properties.\n\t\tMap Data Structure\tA collection of key-value pairs with key uniqueness and insertion order.\n\t\tSet Data Structure\tA collection of unique values that allows for operations such as union, intersection, and difference.\n\t\tWeakMap and WeakSet\tSimilar to `Map` and `Set`, but with key/value pairs that are weakly held, allowing for garbage collection.\n\t\t`for...of` Loop\tIterates over iterable objects like arrays and strings, providing a more straightforward way to loop through values.\n\t\tObject.assign()\tCopies properties from one or more source objects to a target object, merging them.\n\t\tObject.entries()\tReturns an array of a given object's own enumerable string-keyed property `[key, value]` pairs.\n\t\tObject.values()\tReturns an array of a given object's own enumerable string-keyed property values.\n\t\tProxy\tObject that allows for creating a proxy for another object to define custom behavior for fundamental operations (e.g., property access).\n\t\tReflect\tObject that provides methods for interceptable JavaScript operations, complementing `Proxy`.\n\tVariables and Scoping\n\t\tlet: Block-scoped variable declaration.\n\t\tconst: Block-scoped, read-only variable declaration.\n\t\tvar: Function-scoped variable declaration (legacy).\n\tFunctions and Arrow Functions\n\t\tarrow functions: Shorter syntax for function expressions, inherits `this` from the surrounding context.\n\t\tdefault parameters: Function parameters with default values if not provided.\n\t\trest parameters: Gathers remaining arguments into an array.\n\tObject and Array Destructuring\n\t\tobject destructuring: Extract properties from objects and assign them to variables.\n\t\tarray destructuring: Extract values from arrays and assign them to variables.\n\tTemplate Literals\n\t\ttemplate literals: String literals allowing embedded expressions with `${}`.\n\t\ttagged templates: Allows pre-processing of template literals.\n\tModules\n\t\timport: Import functions, objects, or primitives from another module.\n\t\texport: Export functions, objects, or primitives from a module.\n\tClasses and Inheritance\n\t\tclass: Blueprint for creating objects with encapsulated data and methods.\n\t\tconstructor: Special method for initializing objects created with a class.\n\t\textends: Establishes inheritance between classes.\n\t\tsuper: Calls the constructor of a parent class.\n\tPromises and Asynchronous Programming\n\t\tpromises: Objects representing eventual completion or failure of an asynchronous operation.\n\t\tasync/await: Syntactic sugar for handling promises in a synchronous-like fashion.\n\t\tPromise.all: Resolves when all provided promises resolve.\n\tIterators and Generators\n\t\titerators: Objects with a `next()` method returning an iteration result.\n\t\tgenerators: Functions that can be paused and resumed, yielding multiple values.\n\tSymbols and Well-Known Symbols\n\t\tsymbol: Unique and immutable value used as object property keys.\n\t\twell-known symbols: Predefined `Symbol` values influencing object behavior.\n\tCollections\n\t\tmap: Collection of key-value pairs with keys of any type.\n\t\tset: Collection of unique values of any type.\n\t\tweakmap: Collection of key-value pairs with weakly-held keys.\n\t\tweakset: Collection of unique values weakly-held.\n\tEnhanced Object Literals\n\t\tshorthand property names: Concise syntax for defining object properties.\n\t\tcomputed property names: Dynamic property names in object literals.\n\tProxies and Reflection\n\t\tproxy: Object that intercepts operations on another object.\n\t\treflect: Built-in object providing methods for interceptable JavaScript operations.\n\tEnhanced Regular Expressions\n\t\tsticky flag (y): Matches only from the current position in the target string.\n\t\tunicode flag (u): Enables full Unicode matching in regular expressions.\n\tBigInt\n\t\tbigint: Arbitrary-precision integers for handling large numbers.\n**[Metadata]**:\n\t**[Purpose]**: Why this key terminology section created?\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:38:05.106Z"},"updatedDate":{"$date":"2024-10-19T03:58:48.339Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c233fd2e59e933a354ec5b"},"uniqueId":"1ef4b4a7-d779-4ce0-a4f9-2b8b9c3dcde6","parentId":"","name":"JavaScript: Key Terminologies","skeleton":"JavaScript\n\tCore Concepts\n\t\tVariable\tA named storage location in memory used to hold data. Variables are declared using `var`, `let`, or `const`.\n\t\tData Types\tThe different types of values that can be represented in JavaScript, including `undefined`, `null`, `boolean`, `number`, `string`, `symbol`, and `object`.\n\t\tFunctions\tA block of code designed to perform a particular task. Functions can be declared using the `function` keyword or as arrow functions `() => {}`.\n\t\tObjects\tA collection of key-value pairs where keys are strings (or Symbols) and values can be any data type.\n\t\tArrays\tA special type of object used for storing ordered collections of values.\n\t\tScope\tThe context in which variables and functions are accessible. Includes global scope, function scope, and block scope.\n\n\tControl Flow\n\t\tConditionals\tStatements that perform different actions based on different conditions, using `if`, `else if`, and `else`.\n\t\tSwitch Statement\tA control flow statement that evaluates an expression and executes code blocks based on matching case labels.\n\t\tLoops\tStatements that execute a block of code repeatedly based on a condition, including `for`, `while`, and `do...while` loops.\n\t\t`break` and `continue`\tStatements used within loops to control the flow of execution, where `break` exits the loop and `continue` skips to the next iteration.\n\n\tObject-Oriented Programming\n\t\tClasses\tA blueprint for creating objects with shared properties and methods. Introduced in ES6 using the `class` keyword.\n\t\tInheritance\tA mechanism where one class inherits properties and methods from another class.\n\t\tEncapsulation\tThe bundling of data and methods that operate on that data into a single unit or class.\n\t\tPolymorphism\tThe ability of different classes to be treated as instances of the same class through a common interface.\n\t\t\n\tClosure\n\t\tIn JavaScript, a closure is a feature where a function retains access to its lexical scope even after the function has finished executing. This means that a function defined inside another function has access to the variables and parameters of the outer function, even when the outer function has returned.\n\n\tAsynchronous Programming\n\t\tCallbacks\tA function passed as an argument to another function, which is invoked once the asynchronous operation completes.\n\t\tPromises\tAn object representing the eventual completion or failure of an asynchronous operation. Promises have `then()`, `catch()`, and `finally()` methods.\n\t\t`async`/`await`\tSyntax for working with asynchronous code, allowing asynchronous code to be written in a synchronous style.\n\n\tModules\n\t\tCommonJS\tA module system used in Node.js where modules are loaded using `require()` and exported using `module.exports`.\n\t\tES Modules (ESM)\tA standardized module system where modules are imported using `import` and exported using `export`.\n\n\tError Handling\n\t\t`try...catch`\tA construct used to handle exceptions. The `try` block contains code that may throw an error, and the `catch` block contains code that handles the error.\n\t\tError Object\tA built-in object that represents an error. Includes properties such as `name`, `message`, and `stack`.\n\n\tEvents\n\t\tEvent Listeners\tA function that is executed when a specific event occurs, such as a user interaction or an API response.\n\t\tEvent Bubbling\tThe process by which events propagate from the innermost element to the outer elements.\n\t\tEvent Delegation\tA technique where a single event listener is added to a parent element to manage events for multiple child elements.\n\n\tDOM Manipulation\n\t\tDocument Object Model (DOM)\tA hierarchical representation of the web page structure. JavaScript can interact with the DOM to modify content and structure.\n\t\t`querySelector()` and `querySelectorAll()`\tMethods used to select elements from the DOM based on CSS selectors.\n\t\t`getElementById()` and `getElementsByClassName()`\tMethods used to select elements by their ID or class name.\n\n\tES6+ Features\n\t\tArrow Functions\tA concise syntax for writing functions using `() => {}`.\n\t\tTemplate Literals\tA way to create strings with embedded expressions using backticks \\`` `\\`.\n\t\tDestructuring Assignment\tA syntax for unpacking values from arrays or properties from objects into distinct variables.\n\t\tSpread and Rest Operators\tThe spread operator (`...`) expands elements of an iterable, and the rest operator collects multiple elements into an array.\n\n\tEvent Loop\n\t\tEvent Queue\tA queue that stores events and their associated callbacks to be processed by the event loop.\n\t\tMicrotasks and Macrotasks\tTwo types of tasks in the event loop. Microtasks are handled before macrotasks, and include promises and mutation observers.\n\n\tWeb APIs\n\t\tFetch API\tA modern API for making network requests similar to `XMLHttpRequest`, but with a simpler and more powerful interface.\n\t\tXMLHttpRequest\tA legacy API for making network requests. It is less powerful compared to the Fetch API but still widely used.\n\n\tFrameworks and Libraries\n\t\tReact\tA JavaScript library for building user interfaces, focusing on component-based architecture and efficient rendering.\n\t\tAngular\tA front-end framework for building single-page applications, featuring two-way data binding and dependency injection.\n\t\tVue.js\tA progressive framework for building user interfaces with an emphasis on simplicity and flexibility.\n\n\tTesting\n\t\tJest\tA testing framework developed by Facebook, with built-in support for mocking and assertion.\n\t\tMocha\tA testing framework that provides a flexible and customizable environment for writing tests.\n\t\tChai\tA BDD/TDD assertion library used in combination with testing frameworks like Mocha.\n\n\tDevelopment Tools\n\t\tBabel\tA JavaScript compiler that converts ES6+ code into a backwards-compatible version of JavaScript.\n\t\tWebpack\tA module bundler that packages JavaScript files and their dependencies into a single bundle.\n\t\tESLint\tA tool for identifying and reporting on patterns found in JavaScript code, helping to maintain code quality and consistency.\n\t\t\n\t","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:48:45.872Z"},"updatedDate":{"$date":"2024-09-05T10:58:22Z"},"__v":0,"softDelete":false,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c234dc2e59e933a354eca0"},"uniqueId":"ef5aac3a-a7a4-4968-867d-b82c8469c988","parentId":"","name":"Node.js: Key Terminologies","skeleton":"Node.js\n    Core Concepts\n        Event Loop\tThe mechanism that handles asynchronous operations in Node.js, allowing non-blocking I/O operations.\n        Asynchronous Programming\tA programming model that enables operations to run in the background and continue execution without waiting for the operation to complete.\n        Non-blocking I/O\tA feature that allows Node.js to handle multiple I/O operations concurrently without blocking the execution of other operations.\n        Callback Functions\tA function passed as an argument to another function, which is executed once a task is completed.\n        Streams\tA sequence of data that can be read from or written to in a continuous manner. Includes readable, writable, and transform streams.\n\n    Modules\n        CommonJS\tA module system used by Node.js where modules are loaded using `require()` and exported using `module.exports`.\n        ES Modules (ESM)\tA module system based on ECMAScript standards, where modules are imported using `import` and exported using `export`.\n        `require()`\tA function used to load and use modules in CommonJS format.\n        `module.exports`\tAn object used to export functions, objects, or values from a module in CommonJS.\n        `import`\tAn ES Module syntax used to load and use modules.\n        `export`\tAn ES Module syntax used to define what a module exports.\n\n    Package Management\n        npm (Node Package Manager)\tThe default package manager for Node.js, used to install and manage Node.js packages.\n        `package.json`\tA file that holds metadata about the project and its dependencies. Includes scripts, dependencies, and project configuration.\n        Dependencies\tExternal libraries or modules required by a project. Listed in the `dependencies` or `devDependencies` sections of `package.json`.\n        `node_modules`\tDirectory where installed Node.js packages are stored.\n\n    Web Server\n        HTTP Module\tA core Node.js module that allows for the creation of HTTP servers and clients.\n        Express\tA popular web application framework for Node.js that simplifies routing, middleware, and handling HTTP requests and responses.\n        Middleware\tFunctions in Express that process requests before they reach the route handlers. They can modify request and response objects, end requests, or call the next middleware function.\n\n    Error Handling\n        `try...catch`\tAn error handling construct in JavaScript used to catch and handle exceptions that occur during execution.\n        Error Object\tAn object representing an error that contains properties such as `name`, `message`, and `stack`.\n\n    Debugging\n        `console.log()`\tA function used for logging messages to the console for debugging purposes.\n        Node Inspector\tA tool that provides debugging capabilities for Node.js applications. Can be used through the command line or with integrated development environments.\n\n    Development Tools\n        Nodemon\tA development tool that automatically restarts a Node.js application when file changes are detected.\n        PM2\tA process manager for Node.js applications that handles process management, load balancing, and monitoring.\n\n    Networking\n        TCP/UDP Protocols\tProtocols for low-level network communication. Node.js provides modules like `net` for TCP and `dgram` for UDP.\n        WebSocket\tA protocol for full-duplex communication channels over a single TCP connection. Node.js supports WebSocket via modules like `ws`.\n\n    Security\n        Environment Variables\tA way to securely store configuration settings and sensitive information. Managed via `process.env`.\n        Authentication and Authorization\tMechanisms to verify user identity and control access to resources. Commonly implemented using libraries such as `passport`.\n\n    File System\n        `fs` Module\tA core Node.js module that provides file system operations such as reading and writing files.\n        Asynchronous File Operations\tFile operations that do not block the execution of other code, using methods like `fs.readFile()` and `fs.writeFile()`.\n\n    Database Connectivity\n        MongoDB\tA NoSQL database often used with Node.js. Node.js provides libraries like `mongoose` for interacting with MongoDB.\n        SQL Databases\tNode.js can connect to SQL databases using libraries such as `sequelize` or `knex`.\n\n    Frameworks and Libraries\n        Koa\tA lightweight web framework for Node.js, created by the same team that built Express, focusing on modern JavaScript features.\n        Hapi\tA rich framework for building applications and services with a focus on configuration-driven development.\n\n    Testing\n        Mocha\tA testing framework for Node.js that supports various assertion libraries and test reporting.\n        Chai\tA BDD/TDD assertion library for Node.js that can be used with Mocha for writing tests.\n        Jest\tA testing framework developed by Facebook with a focus on simplicity and support for mocking.\n\n    Deployment\n        Docker\tA tool for containerizing Node.js applications, allowing them to be run in isolated environments.\n        Heroku\tA cloud platform that supports deploying Node.js applications with built-in scaling and monitoring features.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:52:28.731Z"},"updatedDate":{"$date":"2024-08-20T05:38:18.647Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c235b72e59e933a354ecea"},"uniqueId":"b3fe3817-b367-42cb-be85-64b1c857efe0","parentId":"","name":"Maven: Key Terminologies","skeleton":"Maven\n    Core Concepts\n        Build Lifecycle\tA sequence of phases that define the order in which goals are executed. Phases include validate, compile, test, package, and deploy.\n        Goals\tA specific task or unit of work within a phase of the build lifecycle, such as compile, test, or package.\n        Plugins\tExtensions that add functionality to the Maven build process. Plugins are configured in the `pom.xml` file and are executed during specific build phases.\n        Archetype\tA template for creating a new Maven project. Archetypes provide a structured starting point for different types of projects.\n\n    POM (Project Object Model)\n        `pom.xml`\tThe configuration file for a Maven project. It defines project dependencies, build settings, plugins, and other configuration.\n        Dependencies\tExternal libraries or components required by the project. Defined in the `dependencies` section of the `pom.xml`.\n        Dependency Management\tA mechanism to control the versions of dependencies across multiple projects. Configured in the `dependencyManagement` section of the `pom.xml`.\n        Properties\tA set of key-value pairs used to define project-specific settings or configurations. Defined in the `properties` section of the `pom.xml`.\n        Profiles\tA set of configuration settings that can be activated under specific conditions, such as different environments or build scenarios. Defined in the `profiles` section of the `pom.xml`.\n\n    Build Phases\n        Validate\tChecks if the project is correct and all necessary information is available.\n        Compile\tCompiles the source code of the project.\n        Test\tTests the compiled source code using a testing framework (e.g., JUnit).\n        Package\tPackages the compiled code into a distributable format, such as a JAR or WAR file.\n        Install\tInstalls the packaged code into the local Maven repository for use in other projects.\n        Deploy\tUploads the packaged code to a remote repository for sharing with other developers or projects.\n\n    Repository\n        Local Repository\tThe local cache of Maven artifacts stored on the developer's machine. Typically located in the `.m2/repository` directory.\n        Remote Repository\tA repository located on a remote server where Maven artifacts are stored and retrieved. Commonly used for sharing artifacts with other projects.\n        Central Repository\tThe default remote repository provided by Maven Central, which contains a vast collection of commonly used libraries and artifacts.\n\n    Dependency Management\n        Transitive Dependencies\tDependencies that are required by other dependencies. Maven automatically includes transitive dependencies.\n        Scope\tDefines the classpath of a dependency (e.g., compile, test, runtime). Scopes determine when and where a dependency is available.\n\n    Maven Commands\n        `mvn clean`\tCleans the project by removing the `target` directory, which contains compiled files and packaged artifacts.\n        `mvn compile`\tCompiles the source code of the project.\n        `mvn test`\tRuns the tests defined in the project.\n        `mvn package`\tPackages the compiled code into a distributable format.\n        `mvn install`\tInstalls the packaged code into the local repository.\n        `mvn deploy`\tDeploys the packaged code to a remote repository.\n\n    Repository Management\n        Nexus\tA popular repository manager that supports storing and managing Maven artifacts. Can be used as a proxy for remote repositories.\n        Artifactory\tA universal repository manager that supports multiple package formats, including Maven. Provides features for managing and distributing artifacts.\n\n    Maven Configuration\n        Settings.xml\tA configuration file for Maven, typically located in the `.m2` directory. Defines global settings, such as repository locations and proxy settings.\n        Profiles\tA set of configuration settings that can be activated under specific conditions, allowing for different build configurations.\n\n    Advanced Concepts\n        Multi-module Projects\tA project structure where multiple Maven projects are organized in a parent-child relationship. The parent project manages common configuration and dependencies.\n        Custom Plugins\tA plugin developed specifically for a project's needs, extending Maven's capabilities beyond the default plugins.\n        Maven Wrapper\tA script that ensures a specific version of Maven is used for the build, making the build process more consistent across different environments.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T17:56:07Z"},"updatedDate":{"$date":"2024-08-20T05:38:41.569Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c236a12e59e933a354ed39"},"uniqueId":"54304d12-dd3f-415f-a170-8e7b0fe45cec","parentId":"","name":"Java memory management: Key Terminologies","skeleton":"Java Memory Management\n    Core Concepts\n        Heap Memory\tThe runtime data area from which memory for all class instances and arrays is allocated.\n        Stack Memory\tThe runtime data area used for method calls and local variables.\n        Metaspace\tA memory area that stores class metadata and replaces the PermGen space in Java 8 and later.\n        PermGen Space\t(Pre-Java 8) The memory area used to store class metadata and other static data.\n\n    Garbage Collection\n        Garbage Collector\tThe process of automatically identifying and reclaiming memory that is no longer in use.\n        Generational Garbage Collection\tA technique that divides heap memory into generations (Young, Old) to optimize garbage collection.\n        Young Generation\tHeap memory area where new objects are allocated and most garbage collection occurs.\n        Old Generation\tHeap memory area where long-lived objects are eventually moved after surviving several garbage collections in the Young Generation.\n        Survivor Spaces\tTwo smaller areas in the Young Generation where objects are moved between each other during garbage collection.\n        Minor GC\tThe garbage collection process that collects objects from the Young Generation.\n        Major GC\tThe garbage collection process that collects objects from the Old Generation.\n        Full GC\tA garbage collection process that performs garbage collection on both the Young and Old Generations.\n\n    Memory Leaks\n        Memory Leak\tA situation where memory that is no longer needed is not released due to lingering references.\n        Weak References\tReferences that do not prevent an object from being collected by garbage collection.\n        Soft References\tReferences that are used for objects that are likely to be needed but can be collected if memory is low.\n        Phantom References\tReferences that are used to perform cleanup after an object has been finalized but before its memory is reclaimed.\n\n    JVM Tuning\n        Heap Size\tConfiguration parameters (e.g., `-Xms`, `-Xmx`) that set the initial and maximum heap size.\n        Garbage Collection Algorithms\tAlgorithms used for garbage collection, such as G1, CMS, and Parallel GC.\n        JVM Flags\tOptions used to configure the behavior of the JVM, such as garbage collection and heap size settings.\n\n    Memory Management Tools\n        JVisualVM\tA monitoring, troubleshooting, and profiling tool for Java applications that can track memory usage.\n        JConsole\tA Java monitoring and management console that provides information about memory usage and garbage collection.\n        Java Mission Control\tA tool for monitoring, profiling, and analyzing Java applications with low overhead.\n        Eclipse Memory Analyzer Tool (MAT)\tA tool for analyzing memory dumps and identifying memory leaks.\n\n    Finalization and Cleanup\n        Finalization\tThe process of executing the `finalize()` method on objects before they are garbage collected (deprecated in newer Java versions).\n        AutoCloseable\tAn interface for objects that need to release resources (e.g., file handles) when they are no longer needed.\n        try-with-resources\tA Java construct that ensures resources are closed automatically when done, reducing the risk of resource leaks.\n\n    JVM Memory Model\n        Stack Frame\tA data structure containing local variables, method parameters, and intermediate results for each method call.\n        Native Memory\tMemory allocated by the JVM that is not managed by the Java heap, used for native code and JNI operations.\n        Direct Memory\tMemory allocated outside of the Java heap that can be accessed directly by the JVM, often used for I/O operations.\n\n    Memory Allocation\n        Object Allocation\tThe process of allocating memory for objects in the heap.\n        Memory Pool\tA subset of heap memory used to manage different types of memory allocation (e.g., Eden, Survivor, Old Gen).\n\n    Common JVM Options\n        -Xms\tInitial heap size.\n        -Xmx\tMaximum heap size.\n        -XX:+UseG1GC\tEnable the G1 garbage collector.\n        -XX:+UseConcMarkSweepGC\tEnable the Concurrent Mark-Sweep garbage collector.\n        -XX:+PrintGCDetails\tPrint detailed information about garbage collection events.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:00:01.075Z"},"updatedDate":{"$date":"2024-08-20T05:38:59.114Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c237342e59e933a354ed8d"},"uniqueId":"a4dee9ee-7634-451e-a578-1a5862c20bc3","parentId":"","name":"Spring Boot for GraphQL: Key Terminologies","skeleton":"Spring Boot for GraphQL\n    Core Concepts\n        @GraphQLApi\tAn annotation used to mark a class as a GraphQL API provider.\n        @Query\t\tA method-level annotation for defining GraphQL queries.\n        @Mutation\tA method-level annotation for defining GraphQL mutations.\n        @Subscription\tA method-level annotation for defining GraphQL subscriptions.\n        GraphQL\tSchema language used to define the structure of GraphQL queries, mutations, and types.\n\n    Schema Definition\n        Schema Definition Language (SDL)\tA language for defining GraphQL schemas, including types, queries, mutations, and subscriptions.\n        Type Definition\tObject types, input types, and interfaces defined in GraphQL schemas.\n        Query Type\tThe entry point for queries in a GraphQL schema, specifying what data can be queried.\n        Mutation Type\tThe entry point for mutations in a GraphQL schema, specifying what data can be modified.\n        Subscription Type\tThe entry point for subscriptions in a GraphQL schema, specifying real-time updates.\n\n    Data Fetching\n        DataFetcher\tA component responsible for fetching data for GraphQL queries and mutations.\n        GraphQLResolver\tAn interface for resolving fields in a GraphQL schema, providing the data for queries and mutations.\n\n    Configuration\n        graphql.schema.file\tA property to specify the location of the GraphQL schema file(s).\n        graphql.servlet.mapping\tProperty to configure the URL mapping for GraphQL endpoints.\n        graphql.servlet.enabled\tProperty to enable or disable the GraphQL servlet.\n\n    Execution\n        GraphQLExecutionInput\tAn object representing the input for executing a GraphQL query, including query, variables, and context.\n        GraphQL\tAn object for executing GraphQL queries and mutations, and for managing schema and data fetchers.\n\n    Error Handling\n        GraphQLError\tA class representing errors that occur during the execution of a GraphQL query or mutation.\n        ExceptionHandlingConfigurer\tConfigurer for customizing how exceptions are handled in GraphQL.\n\n    Security\n        GraphQLSecurityConfigurer\tA configuration class for securing GraphQL endpoints using Spring Security.\n        @PreAuthorize\tA method-level annotation for securing GraphQL resolvers based on Spring Security expressions.\n\n    Testing\n        @GraphQLTest\tA Spring Boot test annotation for testing GraphQL queries and mutations in isolation.\n        GraphQLTestTemplate\tA test utility for sending GraphQL requests and validating responses.\n\n    Documentation\n        GraphQL Playground\tA graphical interface for testing GraphQL queries and mutations, integrated with Spring Boot applications.\n        GraphiQL\tA graphical tool for exploring and testing GraphQL APIs, often used with Spring Boot for development.\n\n    Integration\n        Spring Boot Starter GraphQL\tA Spring Boot starter dependency for integrating GraphQL with Spring Boot applications.\n        Apollo Client\tA popular GraphQL client library for integrating with GraphQL APIs from frontend applications.\n\n    Advanced Features\n        Custom Scalars\tDefining custom scalar types in GraphQL schemas for handling non-standard data types.\n        Batch Data Loading\tTechniques for optimizing data fetching in GraphQL using tools like DataLoader.\n        Schema Stitching\tCombining multiple GraphQL schemas into a single schema to aggregate data from different sources.\n        Federation\tAn approach for building a distributed GraphQL architecture with multiple services.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:02:28.717Z"},"updatedDate":{"$date":"2024-08-20T05:39:23.448Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c237a22e59e933a354ede6"},"uniqueId":"bb46cd2d-64cb-4160-be0f-e88fcd149306","parentId":"","name":"Spring Boot REST: Key Terminologies","skeleton":"Spring Boot REST\n    Core Concepts\n        @RestController\tA specialized version of the `@Controller` annotation that includes `@ResponseBody`, used for defining RESTful web services.\n        @RequestMapping\tAn annotation used to map HTTP requests to handler methods in REST controllers.\n        @GetMapping\tA shortcut for `@RequestMapping` with HTTP GET method, used to handle GET requests.\n        @PostMapping\tA shortcut for `@RequestMapping` with HTTP POST method, used to handle POST requests.\n        @PutMapping\tA shortcut for `@RequestMapping` with HTTP PUT method, used to handle PUT requests.\n        @DeleteMapping\tA shortcut for `@RequestMapping` with HTTP DELETE method, used to handle DELETE requests.\n        @RequestParam\tA method parameter annotation for extracting query parameters from HTTP requests.\n        @PathVariable\tA method parameter annotation for extracting path variables from the URL.\n\n    Request & Response\n        @RequestBody\tA method parameter annotation for binding HTTP request body to a Java object.\n        @ResponseBody\tA method return annotation that binds the method return value to the HTTP response body.\n        ResponseEntity\tA class that represents the entire HTTP response, including status code, headers, and body.\n        HttpHeaders\tA class representing HTTP headers used in requests and responses.\n\n    Exception Handling\n        @ExceptionHandler\tA method-level annotation for handling exceptions thrown by request-handling methods.\n        @ControllerAdvice\tA class-level annotation for global exception handling and providing advice to multiple controllers.\n        ResponseStatusException\tA class representing HTTP response status and custom exception messages.\n\n    Validation\n        @Valid\tA method parameter annotation for validating request bodies or query parameters using JSR-380 (Bean Validation 2.0).\n        @Validated\tA class-level annotation for validating method parameters in Spring components.\n\n    Security\n        @PreAuthorize\tA method-level annotation used to restrict access based on Spring Security expressions.\n        @Secured\tA method-level annotation used to restrict access based on roles or authorities.\n\n    Documentation\n        Swagger\t\tA framework for API documentation and testing that integrates with Spring Boot to provide interactive API documentation.\n        OpenAPI\t\tA specification for defining RESTful APIs, often used with tools like Swagger for generating API documentation.\n\n    Testing\n        @WebMvcTest\tA Spring Boot test annotation for testing Spring MVC controllers and REST APIs with mock environments.\n        MockMvc\tA class for performing HTTP requests and asserting results in Spring MVC tests.\n\n    Configuration\n        application.properties\tConfiguration file used to set various properties for Spring Boot applications, including REST configurations.\n        spring.mvc.pathmatch.matching-strategy\tProperty to configure path matching strategies for REST controllers.\n\n    Content Negotiation\n        @RequestHeader\tA method parameter annotation for extracting HTTP headers from requests.\n        @ResponseHeader\tA method parameter annotation for adding HTTP headers to responses.\n\n    Hypermedia\n        HATEOAS\tA principle for building REST APIs that includes hyperlinks in responses to navigate related resources.\n\n    Advanced Features\n        Async Controller Methods\tMethods annotated with `@Async` to perform asynchronous processing in REST endpoints.\n        @RequestMapping\tA general-purpose annotation for handling different HTTP methods with flexible configuration options.\n        Custom Exception Handling\tCustom implementations of `ExceptionHandler` for handling specific exceptions and customizing responses.\n        CORS (Cross-Origin Resource Sharing)\tConfiguration for allowing or restricting requests from different origins in REST APIs.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:04:18.177Z"},"updatedDate":{"$date":"2024-08-20T05:39:41.22Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c238492e59e933a354ee44"},"uniqueId":"e32f0475-75fd-4567-9d0a-c669fd88e308","parentId":"","name":"Spring Data JPA for MongoDB: Key Terminologies","skeleton":"Spring Data JPA for MongoDB\n    Core Concepts\n        Document\tA class that represents a MongoDB document. Annotated with `@Document` and maps to a MongoDB collection.\n        MongoRepository\tA Spring Data interface providing CRUD operations and query methods for MongoDB documents.\n        MongoTemplate\tA central class for interacting with MongoDB, providing methods for performing various database operations.\n        @Document\tA class-level annotation indicating that a class is a MongoDB document and should be mapped to a MongoDB collection.\n        @Field\tA field-level annotation specifying the name and properties of a field in a MongoDB document.\n\n    Annotations\n        @Document\tA class-level annotation specifying the MongoDB collection name for the document.\n        @Field\tA field-level annotation for specifying MongoDB document field details.\n        @Id\tA field-level annotation indicating the primary key of the document.\n        @Indexed\tA field-level annotation to create indexes on MongoDB fields for better query performance.\n        @CompoundIndexes\tA class-level annotation to define multiple compound indexes on a document.\n\n    Querying\n        Query\tA class for defining queries using the MongoDB query language.\n        @Query\tA method-level annotation used to define custom MongoDB queries.\n        Criteria\tA class used to construct queries using various criteria (e.g., equality, range).\n        Example\tA class for querying documents using example instances with matching field values.\n\n    Aggregation\n        Aggregation\tA class for building aggregation queries in MongoDB, allowing complex data transformations and computations.\n        AggregationOperations\tAn interface for defining and executing aggregation operations, such as grouping and sorting.\n\n    Transactions\n        @Transactional\tA method or class-level annotation that specifies transactional boundaries for operations involving MongoDB.\n        MongoTransactionManager\tA component that manages transactions for MongoDB operations, ensuring atomicity and consistency.\n\n    Configuration\n        application.properties\tConfiguration file used to set MongoDB properties, such as database URL, username, and authentication.\n        spring.data.mongodb.uri\tA property specifying the MongoDB connection URI for connecting to the database.\n        spring.data.mongodb.database\tA property specifying the name of the MongoDB database to use.\n\n    Indexing\n        @Indexed\tA field-level annotation to specify that a field should be indexed in MongoDB for optimized querying.\n        @CompoundIndexes\tA class-level annotation to define multiple compound indexes on a document for improved query performance.\n\n    Performance\n        Caching\tUsing caching mechanisms to improve performance by reducing the number of database queries.\n        Indexing\tDefining indexes on MongoDB fields to speed up query performance and data retrieval.\n\n    Error Handling\n        DuplicateKeyException\tAn exception thrown when a duplicate key constraint is violated in MongoDB.\n        WriteResultException\tAn exception thrown when there is a write failure or error during an operation.\n\n    Testing\n        @DataMongoTest\tA Spring Boot test annotation that sets up an embedded MongoDB instance and configures MongoDB-related components for testing repository layers.\n        @Sql\tA test annotation to execute SQL scripts to set up or clean up test data before or after tests.\n\n    Advanced Features\n        Spring Data MongoDB Reactive\tProvides reactive support for MongoDB operations using Project Reactor for asynchronous processing.\n        MongoDB Custom Repositories\tCustom interfaces and implementations for defining custom query methods and operations not provided by `MongoRepository`.\n        MongoTemplate Operations\tAdvanced MongoDB operations using `MongoTemplate`, such as custom queries, updates, and bulk operations.\n        Projections\tDefining interfaces or classes to fetch a subset of fields from MongoDB documents for optimized data retrieval.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:07:05.043Z"},"updatedDate":{"$date":"2024-08-20T05:40:30.766Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c238aa2e59e933a354eea7"},"uniqueId":"bb7fd8a6-87e3-4bf8-a901-dd59b89aab99","parentId":"","name":"Spring Boot JPA (Java Persistence API): Key Terminologies","skeleton":"Spring Boot JPA\n    Core Concepts\n        Entity\tA class that represents a table in a database. It is annotated with `@Entity` and typically maps to a database record.\n        Repository\tA mechanism for encapsulating storage, retrieval, and search behavior for entities. In Spring Data JPA, it is an interface extending `JpaRepository` or `CrudRepository`.\n        JpaRepository\tA Spring Data interface providing CRUD operations and JPA-specific methods for entity management.\n        EntityManager\tA JPA interface used to interact with the persistence context, allowing operations like persisting, merging, and removing entities.\n        PersistenceContext\tThe context in which entities are managed. It is typically managed by the `EntityManager` in a JPA application.\n\n    Annotations\n        @Entity\tA class-level annotation indicating that a class is an entity and should be mapped to a database table.\n        @Table\tA class-level annotation used to specify the table name and schema for the entity.\n        @Id\tA field-level annotation indicating the primary key of the entity.\n        @GeneratedValue\tA field-level annotation used to specify the strategy for generating primary key values.\n        @Column\tA field-level annotation used to specify the column name, length, and other properties for an entity field.\n        @OneToOne\tA relationship annotation indicating a one-to-one association between two entities.\n        @OneToMany\tA relationship annotation indicating a one-to-many association between two entities.\n        @ManyToOne\tA relationship annotation indicating a many-to-one association between two entities.\n        @ManyToMany\tA relationship annotation indicating a many-to-many association between two entities.\n        @JoinColumn\tA field-level annotation specifying the column used for joining two entities in a relationship.\n        @JoinTable\tA class-level annotation specifying the join table for a many-to-many relationship.\n\n    Querying\n        JPQL (Java Persistence Query Language)\tA query language similar to SQL but operates on entity objects rather than database tables.\n        @Query\tA method-level annotation used to define custom JPQL or native SQL queries.\n        Query Methods\tMethods in repository interfaces that automatically generate queries based on method names, such as `findByLastName` or `findByAgeGreaterThan`.\n        @Modifying\tA method-level annotation used to indicate that a query modifies the database (e.g., update, delete).\n\n    Transactions\n        @Transactional\tA method or class-level annotation that specifies the boundaries of a transaction and ensures that operations within the boundary are committed or rolled back together.\n        TransactionManager\tA component that manages transactions, ensuring consistency and atomicity of database operations.\n\n    Configuration\n        application.properties\tConfiguration file used to set JPA properties, such as database URL, username, password, and dialect.\n        spring.jpa.hibernate.ddl-auto\tA property used to specify how the database schema should be handled, with options like `update`, `create`, or `validate`.\n        spring.jpa.show-sql\tA property that enables or disables the logging of SQL statements generated by Hibernate.\n\n    Entity Relationships\n        Cascade\tType of operation (e.g., `PERSIST`, `MERGE`, `REMOVE`) that should be cascaded to related entities.\n        Fetch\tType of fetching strategy for associations, such as `LAZY` (load on demand) or `EAGER` (load immediately).\n\n    Pagination and Sorting\n        Pageable\tAn interface representing pagination information, such as page number and page size.\n        Sort\tAn interface representing sorting information, such as sort direction and property to sort by.\n        Page\tA container for paginated results, including metadata such as total number of pages and total elements.\n\n    Performance\n        Entity Cache\tCaching mechanism to improve performance by avoiding repeated database access for frequently accessed entities.\n        Query Cache\tCaching mechanism for storing the results of database queries to improve performance.\n\n    Error Handling\n        DataIntegrityViolationException\tAn exception thrown when a database integrity constraint is violated, such as a unique constraint or foreign key constraint.\n        OptimisticLockException\tAn exception thrown when a concurrent modification of an entity occurs, indicating that another transaction has modified the same entity.\n\n    Testing\n        @DataJpaTest\tA Spring Boot test annotation that sets up an in-memory database and configures JPA-related components for testing repository layers.\n        @Sql\tA test annotation that allows executing SQL scripts before or after tests to set up or clean up test data.\n\n    Advanced Features\n        @EntityGraph\tA method-level annotation used to specify entity graphs for fetching related entities efficiently.\n        Specifications\tA Spring Data JPA feature for creating dynamic queries using the `Specification` interface and `JpaSpecificationExecutor`.\n        QueryDSL\tA library for constructing type-safe queries using a fluent API, integrated with Spring Data JPA.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:08:42.373Z"},"updatedDate":{"$date":"2024-08-20T05:40:48.581Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c2392e2e59e933a354ef0f"},"uniqueId":"4d23b1f0-9253-4ff1-a0fc-51d8ce48c564","parentId":"","name":"Spring Boot Security: Key Terminologies","skeleton":"Spring Boot Security\n\tCore Concepts\n\t\tAuthentication\tThe process of verifying the identity of a user or system. In Spring Security, it involves checking user credentials against a data source.\n\t\tAuthorization\tThe process of determining whether a user has permission to perform a specific action or access a particular resource.\n\t\tSecurityContext\tThe context in which security information, such as the authenticated user, is stored during the execution of a request.\n\t\tSecurityFilterChain\tA series of filters that process security-related requests and responses, applying security policies such as authentication and authorization.\n\n\tConfiguration\n\t\tWebSecurityConfigurerAdapter\tA base class that provides methods to configure security settings for web applications, such as URL access rules and authentication mechanisms.\n\t\tSecurityConfiguration\tA class annotated with `@Configuration` that customizes security settings and integrates with Spring Security's default configuration.\n\t\t@EnableWebSecurity\tA Spring annotation that enables web security and integrates Spring Security into the application context.\n\n\tAuthentication\n\t\tUserDetailsService\tA service interface used to retrieve user-related data, including user details, authorities, and credentials, typically from a database.\n\t\tPasswordEncoder\tAn interface used to encode and verify passwords, ensuring secure storage and comparison of user credentials.\n\t\tAuthenticationManager\tAn interface that handles the authentication process by validating user credentials and returning an `Authentication` object.\n\n\tAuthorization\n\t\t@PreAuthorize\tA method-level security annotation that restricts access based on the evaluation of a Spring Expression Language (SpEL) expression.\n\t\t@Secured\tA method-level security annotation that specifies roles or permissions required to access a particular method.\n\t\t@RolesAllowed\tA method-level security annotation that restricts access to a method based on the roles assigned to the authenticated user.\n\t\tAccessDecisionManager\tAn interface used to make access control decisions based on the user's authorities and requested access.\n\n\tSecurity Filters\n\t\tUsernamePasswordAuthenticationFilter\tA filter that processes authentication requests with a username and password, typically used for form-based login.\n\t\tBasicAuthenticationFilter\tA filter that handles HTTP Basic Authentication, allowing users to authenticate via HTTP headers.\n\t\tJwtAuthenticationFilter\tA filter that processes JSON Web Tokens (JWT) for authentication and authorization, typically used in stateless authentication.\n\n\tToken-based Authentication\n\t\tJwtAuthenticationToken\tA custom token that represents a JSON Web Token, used for authentication and authorization in stateless sessions.\n\t\tJwtTokenProvider\tA utility class that generates and validates JWTs, managing the creation and verification of tokens for secure access.\n\n\tCustomization\n\t\tCustomUserDetails\tA custom implementation of the `UserDetails` interface, providing additional user-specific details and attributes.\n\t\tCustomUserDetailsService\tA custom implementation of `UserDetailsService`, used to load user-specific data from a custom source.\n\t\tCustomAuthenticationProvider\tA custom implementation of `AuthenticationProvider`, used to provide custom authentication logic.\n\n\tSecure Communication\n\t\tHTTPS\tSecure communication protocol using SSL/TLS to encrypt data transmitted between the client and server.\n\t\tCSRF Protection\tProtection against Cross-Site Request Forgery attacks, which involves generating and validating CSRF tokens for state-changing requests.\n\n\tSecurity Annotations\n\t\t@Secured\tA Spring Security annotation used to specify roles or permissions required to access methods or classes.\n\t\t@PreAuthorize\tA Spring Security annotation that provides method-level security based on SpEL expressions.\n\n\tSecurity Context\n\t\tSecurityContextHolder\tA class that holds the `SecurityContext` for the current thread, allowing access to authentication details and security information.\n\t\tSecurityContext\tA context that holds authentication details and security information for the current request or session.\n\n\tSecurity Headers\n\t\tContent Security Policy (CSP)\tA security header used to prevent attacks like Cross-Site Scripting (XSS) by specifying which content sources are allowed.\n\t\tX-Frame-Options\tA security header that prevents clickjacking attacks by controlling whether a page can be displayed in a frame or iframe.\n\t\tXSS Protection\tA security header that enables or disables browser-based XSS protection mechanisms.\n\n\tException Handling\n\t\tAuthenticationException\tA base class for exceptions thrown during the authentication process, such as invalid credentials or authentication failure.\n\t\tAccessDeniedException\tA class representing exceptions thrown when access to a resource is denied based on user permissions or roles.\n\n\tIntegration\n\t\tSpring Security OAuth2\tA module that provides support for OAuth2 authentication and authorization, including both authorization code and resource server capabilities.\n\t\tSpring Security LDAP\tAn extension of Spring Security that provides integration with LDAP (Lightweight Directory Access Protocol) for user authentication and authorization.\n\t\tSpring Security JWT\tAn extension of Spring Security that provides support for JSON Web Token (JWT) based authentication and authorization.\n\n\tTesting\n\t\t@WithMockUser\tA Spring Security test annotation that creates a mock user with specified roles and authorities for testing purposes.\n\t\tSecurityMockMvcRequestBuilders\tUtility classes for creating MockMvc requests with security-related configurations for testing secured endpoints.\n\t\t\nSpring Boot Security: Associated key terminologies and buzzwords\n\n\tOverview\n\t\tThese are some of the key terminologies and concepts associated with Spring Boot Security, which are essential for understanding and implementing robust security features in Java-based applications using the Spring framework.\n\tTerminology and concepts\n\t\tSpring Security: \n\t\t\tSpring Security is a powerful and customizable authentication and access control framework for securing Java-based applications. It provides comprehensive security features such as authentication, authorization, session management, and protection against common security vulnerabilities.\n\n\t\tAuthentication: \n\t\t\tAuthentication is the process of verifying the identity of a user or entity accessing an application. Spring Security supports various authentication mechanisms, including form-based authentication, HTTP basic authentication, OAuth, and LDAP authentication.\n\n\t\tAuthorization: \n\t\t\tAuthorization is the process of determining whether an authenticated user has permission to access a particular resource or perform a specific operation within the application. Spring Security supports role-based access control (RBAC), expression-based access control, and method-level security.\n\n\t\tPrincipal: \n\t\t\tIn Spring Security, a Principal represents the currently authenticated user or entity accessing the application. Principals encapsulate information about the user's identity, such as username, authorities, and additional attributes.\n\n\t\tGranted Authority: \n\t\t\tA Granted Authority represents a permission or role granted to a user or entity within the application. Authorities are typically used for defining access control rules and determining whether a user has permission to perform certain actions.\n\n\t\tUserDetailsService: \n\t\t\tThe UserDetailsService interface is used in Spring Security for retrieving user details (such as username, password, and authorities) from a data source, such as a database or LDAP directory. It is responsible for loading user information during authentication.\n\n\t\tPasswordEncoder: \n\t\t\tThe PasswordEncoder interface is used in Spring Security for encrypting and validating passwords stored in the application's database or user repository. It provides secure hashing algorithms (such as BCrypt, SCrypt, or SHA) for protecting user passwords against unauthorized access.\n\n\t\tAuthenticationProvider: \n\t\t\tAn AuthenticationProvider is a strategy interface in Spring Security for authenticating users based on their credentials. It is responsible for performing authentication logic, such as verifying passwords, validating tokens, or integrating with external authentication providers.\n\n\t\tSecurityContext: \n\t\t\tThe SecurityContext is a thread-local container in Spring Security that holds the security-related information associated with the current user's session. It includes details such as the authenticated principal, authentication status, and granted authorities.\n\n\t\tFilterChain: \n\t\t\tA FilterChain is a series of filters in Spring Security that intercept and process incoming HTTP requests before they reach the application's endpoints. Filters are responsible for performing security checks, authentication, authorization, and other security-related tasks.\n\n\t\tCSRF Protection: \n\t\t\tCross-Site Request Forgery (CSRF) protection is a security feature in Spring Security that prevents unauthorized users from submitting malicious requests on behalf of authenticated users. Spring Security provides built-in CSRF protection mechanisms, such as CSRF tokens and CSRF filters.\n\n\t\tSession Management: \n\t\t\tSession management is the process of managing user sessions and maintaining session state securely in web applications. Spring Security offers features for controlling session creation, tracking session activity, and implementing session fixation protection.\n\n\t\tRemember Me Authentication: \n\t\t\tRemember Me authentication is a feature in Spring Security that allows users to authenticate once and be remembered across multiple sessions without re-entering their credentials. It relies on persistent tokens or cookies to automatically authenticate users upon subsequent visits.\n\n\t\tAccess Control List (ACL): \n\t\t\tAccess Control Lists (ACLs) are security mechanisms used in Spring Security for fine-grained access control at the domain object level. ACLs define permissions and restrictions on individual domain objects, allowing for complex authorization rules based on object ownership, roles, and permissions.\n\n\t\tOAuth: \n\t\t\tOAuth is an open standard for authorization that allows users to grant third-party applications limited access to their resources without sharing their credentials. Spring Security provides support for OAuth 2.0, enabling secure authentication and authorization in distributed systems and APIs.\n\n\t","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:10:54.23Z"},"updatedDate":{"$date":"2024-08-29T20:45:31.147Z"},"__v":0,"softDelete":false,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c239de2e59e933a354ef7c"},"uniqueId":"0c9b88ff-d7c6-46c9-b3a1-2e7907a3f287","parentId":"","name":"Kubernetes: Key Terminologies","skeleton":"Kubernetes\n\tCore Concepts\n\t\t**Pod** :\tThe smallest and simplest Kubernetes object that represents a single instance of a running process in a cluster, usually containing one or more containers.\n\t\t**Namespace** :\tA virtual cluster within a Kubernetes cluster that provides a mechanism to divide cluster resources between users.\n\t\tNode\tA worker machine in Kubernetes that runs containerized applications, managed by the control plane.\n\t\tCluster\tA set of nodes that run containerized applications managed by Kubernetes.\n\tWorkloads\n\t\tDeployment\tA controller in Kubernetes that manages the lifecycle of Pods, ensuring the desired number of replicas are running.\n\t\tStatefulSet\tA controller that manages stateful applications by ensuring each Pod has a persistent identity and storage.\n\t\tDaemonSet\tA controller that ensures a copy of a Pod runs on all or some nodes in the cluster.\n\t\tJob\tA controller that creates one or more Pods to carry out a task and then stops them once the task is complete.\n\t\tCronJob\tA scheduled Job that runs at specified intervals, similar to cron in Unix/Linux systems.\n\tServices and Networking\n\t\tService\tAn abstraction that defines a logical set of Pods and a policy by which to access them, often via a cluster-internal IP.\n\t\tIngress\tAn API object that manages external access to services in a cluster, typically HTTP/HTTPS, with load balancing, SSL termination, and name-based virtual hosting.\n\t\tNetwork Policy\tA specification of how groups of Pods are allowed to communicate with each other and other network endpoints.\n\t\tEndpoint\tA network endpoint that is associated with a Service, usually pointing to one or more Pods.\n\tConfiguration and Secrets\n\t\tConfigMap\tA key-value store used to store configuration data in Kubernetes that can be consumed by Pods.\n\t\tSecret\tA way to store and manage sensitive information like passwords, OAuth tokens, and SSH keys in Kubernetes.\n\t\tVolume\tA directory accessible to containers in a Pod that is used to store data persistently or share data between containers.\n\t\tPersistent Volume (PV)\tA storage resource in Kubernetes that represents a piece of storage in the cluster, provisioned by an administrator or dynamically through storage classes.\n\tScheduling\n\t\tScheduler\tThe Kubernetes component responsible for assigning Pods to Nodes based on resource requirements, constraints, and availability.\n\t\tAffinity and Anti-Affinity\tRules that influence pod placement based on attributes like node labels or other pod locations.\n\t\tTaints and Tolerations\tMechanisms used to control how Pods are scheduled onto Nodes by allowing or denying Pods based on Node conditions.\n\t\tHorizontal Pod Autoscaler\tA controller that automatically adjusts the number of Pods in a deployment or replica set based on observed CPU/memory usage or custom metrics.\n\tSecurity\n\t\tRole-Based Access Control (RBAC)\tA method for regulating access to resources in Kubernetes based on the roles of individual users or service accounts.\n\t\tService Account\tAn account used to provide an identity for Pods running in a Kubernetes cluster, enabling them to authenticate to the API server.\n\t\tPod Security Policy (PSP)\tDefines a set of conditions that a Pod must meet in order to be accepted into the system, used to enforce security standards.\n\t\tNetwork Policy\tA set of rules that define how groups of Pods are allowed to communicate with each other and other network endpoints.\n\tMonitoring and Logging\n\t\tPrometheus\tA popular open-source monitoring and alerting toolkit, commonly used in Kubernetes clusters for metrics collection and alerting.\n\t\tFluentd\tA log aggregator that collects, parses, and stores log data, often used in Kubernetes environments to manage log data from Pods.\n\t\tKubernetes Dashboard\tA web-based user interface for monitoring and managing Kubernetes clusters.\n\t\tMetrics Server\tA cluster-wide aggregator of resource usage data, commonly used by Kubernetes components like the Horizontal Pod Autoscaler.\n\tAdvanced Topics\n\t\tCustom Resource Definition (CRD)\tAllows users to create their own resources (custom objects) in Kubernetes, extending the Kubernetes API.\n\t\tOperator\tA method of packaging, deploying, and managing a Kubernetes application, extending the Kubernetes API with custom controllers for managing complex applications.\n\t\tHelm\tA package manager for Kubernetes that helps in defining, installing, and managing Kubernetes applications through Helm charts.\n\t\tPersistent Volume Claim (PVC)\tA request for storage by a user, which binds to a Persistent Volume (PV) to provide storage to a Pod.\n\t\tEtcd\tA distributed key-value store used as Kubernetes' backing store for all cluster data.\n\t\tService Mesh\tA dedicated infrastructure layer for handling service-to-service communication within a Kubernetes cluster, providing features like load balancing, service discovery, and observability.\n\t\tIstio\tA popular service mesh for Kubernetes that provides advanced routing, traffic management, and observability for microservices.\n\t\tKubelet\tA Kubernetes agent that runs on each node, ensuring containers are running in a Pod.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:13:50.876Z"},"updatedDate":{"$date":"2024-09-13T17:51:25.689Z"},"__v":0,"softDelete":false,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c23a1c2e59e933a354efee"},"uniqueId":"6010e205-a957-4406-bdde-2257574affa2","parentId":"","name":"Docker: Key Terminologies","skeleton":"Docker\t\n    Core Concepts\t\n        Docker\tA platform that enables the creation, deployment, and management of lightweight, portable containers for applications.\n        Container\tA lightweight, standalone, and executable package that includes everything needed to run a piece of software, including code, runtime, libraries, and system tools.\n        Image\tA lightweight, immutable snapshot of a container that includes the application and its dependencies. Images are used to create containers.\n        Dockerfile\tA text file with instructions to build a Docker image. It contains commands to assemble an image layer by layer.\n        Docker Daemon\t(AKA `dockerd`) The background service running on the host that manages Docker images, containers, networks, and storage volumes.\n        Docker Client\t(AKA `docker`) The command-line interface (CLI) tool used to interact with the Docker Daemon.\n        Docker Hub\tA cloud-based repository where Docker images are stored, shared, and distributed.\n        \n    Networking\t\n        Docker Network\tA virtual network that allows containers to communicate with each other and external systems. It isolates containers from the host and each other.\n        Bridge Network\tThe default network type in Docker, allowing containers on the same host to communicate with each other.\n        Host Network\tA network mode where the container shares the host machine's network stack, giving it direct access to the host’s network interfaces.\n        Overlay Network\tA network type that enables Docker containers running on different Docker hosts to communicate securely using a virtual network.\n        Network Namespace\tA feature that isolates the network interfaces and routing tables of a container from other containers and the host.\n        Port Mapping\tA technique that maps a port on the Docker host to a port inside the container, enabling external access to containerized services.\n\n    Storage and Volumes\t\n        Docker Volume\tA persistent storage mechanism that allows data to be stored outside of the container's filesystem. Volumes are often used to share data between containers.\n        Bind Mount\tA type of volume where a directory on the host machine is mounted into a container. This allows the container to access and modify files on the host.\n        Named Volume\tA Docker-managed volume that is stored outside the container's filesystem, often used for data persistence between container restarts.\n        Union File System\tA filesystem that allows multiple layers to be mounted as a single, unified filesystem. It underpins Docker’s image layering feature.\n        \n    Orchestration\t\n        Docker Compose\tA tool that allows you to define and manage multi-container Docker applications using a YAML file (`docker-compose.yml`).\n        Docker Swarm\tA native clustering and orchestration tool for Docker that enables the deployment and management of multiple Docker nodes.\n        Kubernetes\tAn open-source orchestration platform that automates the deployment, scaling, and management of containerized applications across clusters of hosts.\n        Service\tIn Docker Swarm, a service is a definition of tasks that specify the containers to run, and the network and storage resources to use.\n        Task\tA unit of work in Docker Swarm, representing a container running a part of a service.\n        \n    Security\t\n        Docker Security\tA set of practices and tools to ensure that Docker containers and images are secure, including isolation, image scanning, and role-based access control.\n        Namespace\tA Linux feature used by Docker to provide isolation between containers by segregating kernel resources such as process IDs, network interfaces, and file systems.\n        Cgroups\t(Control Groups) A Linux kernel feature used by Docker to limit, prioritize, and isolate resource usage (CPU, memory, disk I/O) among containers.\n        Docker Content Trust\tA security feature that uses digital signatures to verify the integrity and authenticity of Docker images before they are pulled or deployed.\n        \n    Image Management\t\n        Docker Build\tThe process of creating a Docker image from a Dockerfile, which involves executing the instructions in the Dockerfile.\n        Docker Tag\tA label applied to a Docker image that allows it to be uniquely identified. Typically, tags represent different versions of the image.\n        Docker Pull\tA command used to download a Docker image from a registry (e.g., Docker Hub) to the local machine.\n        Docker Push\tA command used to upload a Docker image from the local machine to a registry.\n        Multi-Stage Build\tA feature in Docker that allows multiple stages in a Dockerfile, enabling the creation of smaller, more efficient images.\n        \n    Monitoring and Logging\t\n        Docker Logs\tA command used to fetch the logs of a running container, useful for debugging and monitoring container activity.\n        Docker Stats\tA command used to display real-time metrics of container resource usage, such as CPU, memory, and network I/O.\n        Docker Health Check\tA mechanism that periodically checks the health of a container to determine if it is running correctly.\n        \n    Advanced Topics\t\n        Docker Registry\tA server-side application that stores and distributes Docker images. Docker Hub is an example of a public registry.\n        Private Registry\tA self-hosted Docker registry that provides a secure location to store and distribute Docker images within an organization.\n        Docker Layer\tA mechanism that allows Docker images to be built in layers, enabling the reuse of layers across different images, improving build efficiency.\n        Docker Context\tA feature that allows switching between multiple Docker hosts or environments with different configurations.\n        Docker Secrets\tA secure way to manage sensitive data such as passwords, API keys, and certificates in Docker Swarm or Kubernetes.\n\n\nDocker\n    Core Concepts\n        Container Orchestration\tThe automated management, deployment, scaling, and networking of containers, typically in a clustered environment.\n        Immutable Infrastructure\tA model where infrastructure components (like Docker containers) are never modified after deployment. Instead, new instances replace them when updates are needed.\n        \n    Networking\n        MACVLAN\tA Docker network driver that allows containers to have their own MAC address, making them appear as physical devices on the network.\n        DNS Round Robin\tA technique used in Docker Swarm where DNS resolves a service name to multiple IP addresses, distributing requests among service replicas.\n        IPAM (IP Address Management)\tA component in Docker that handles the allocation and management of IP addresses in container networks.\n        \n    Storage and Volumes\n        Storage Driver\tThe backend component in Docker responsible for managing the container’s file system, such as overlay2, aufs, or devicemapper.\n        Volume Driver\tA plugin mechanism in Docker that allows third-party storage solutions to manage Docker volumes.\n        Tmpfs Mount\tA type of volume that stores data in memory instead of on disk, providing a temporary, fast storage solution within a container.\n        \n    Orchestration\n        Stack\tIn Docker Swarm and Compose, a stack is a collection of related services that are deployed together, typically defined in a `docker-stack.yml` file.\n        Node\tA physical or virtual machine that runs Docker and participates in a Swarm cluster.\n        Replica\tA duplicate instance of a Docker service that ensures high availability and load balancing within a Docker Swarm.\n        \n    Security\n        Docker Bench for Security\tA script provided by Docker that checks for common best practices around deploying Docker containers in production.\n        User Namespace Remapping\tA security feature that maps a container’s root user to a non-root user on the Docker host, enhancing container security.\n        Seccomp (Secure Computing Mode)\tA Linux kernel feature used by Docker to restrict the system calls that containers can make, reducing their attack surface.\n        \n    Image Management\n        Docker Manifest\tA list of images for various platforms, providing a single name to refer to them. Manifests are used in multi-architecture builds.\n        Image Layer Caching\tA feature where Docker caches the results of previous image build steps, speeding up subsequent builds that reuse unchanged layers.\n        Docker Squash\tA process that combines multiple image layers into a single layer, reducing the size and complexity of the final image.\n        \n    Monitoring and Logging\n        Fluentd Driver\tA logging driver in Docker that routes logs from containers to Fluentd, a popular open-source data collector for logs.\n        Log Aggregation\tA process that collects and stores logs from multiple containers, often used in large-scale deployments for easier monitoring and debugging.\n        Metrics Exporter\tA tool or plugin that exports Docker metrics (like resource usage) to monitoring systems such as Prometheus or Datadog.\n        \n    Advanced Topics\n        Docker Machine\tA tool that simplifies the creation of Docker hosts on local computers, cloud providers, and remote servers.\n        Docker Swarm Mode\tThe native clustering feature in Docker that allows multiple Docker engines to work together as a single Swarm.\n        OverlayFS\tA filesystem technology that Docker uses to overlay one filesystem on top of another, often used in conjunction with storage drivers.\n        Containerd\tA container runtime that provides core functionalities for container lifecycle management, used by Docker as a low-level component.\n        Docker Enterprise\tA commercial edition of Docker that includes advanced features like role-based access control, image security scanning, and support for orchestrating Windows containers.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:14:52.998Z"},"updatedDate":{"$date":"2024-08-20T05:41:54.508Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c23b1e2e59e933a354f065"},"uniqueId":"c926334d-0d02-41d6-9961-b54d59a933e6","parentId":"","name":"Spring Boot: Key Terminologies","skeleton":"Spring Boot\t\n    Core Concepts\t\n        Spring Boot\tA framework that simplifies the development of production-ready Spring applications with minimal configuration.\n        Spring Boot Application\tAn entry point class annotated with `@SpringBootApplication` that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`.\n        Embedded Server\tA feature in Spring Boot that allows the application to run with an embedded server (e.g., Tomcat, Jetty), making it self-contained.\n        Spring Beans\tObjects that are managed by the Spring IoC container, defined by annotations or XML configuration.\n        Spring Profiles\tA way to segregate parts of your application configuration and make it available only in certain environments.\n        Spring Boot Banner\tThe ASCII art displayed at startup, which can be customized or disabled in Spring Boot applications.\n        Spring Boot Starter Parent\tA special starter that provides default configurations and dependency management for Spring Boot applications.\n        Dependency Injection\tA design pattern used in Spring Boot to inject dependencies into objects, managed by the Spring IoC container.\n\n    Configuration and Auto-Configuration\t\n        Spring Boot Starter\tA set of pre-configured dependencies for specific functionalities (e.g., spring-boot-starter-web for web applications).\n        Spring Boot Auto Configuration\tA feature that automatically configures Spring application based on the dependencies present on the classpath.\n        Spring Boot Configuration Properties\tA feature that allows binding externalized configuration properties to Java objects.\n        Spring Boot YAML Support\tConfiguration support for YAML files, an alternative to traditional properties files, for defining application settings.\n        Spring Boot Environment\tAn abstraction in Spring Boot that provides access to the application's environment, such as properties and profiles.\n        Spring Boot Conditional Beans\tA mechanism that conditionally creates Spring beans based on the presence or absence of certain conditions, such as specific classes or properties.\n\n    Development Tools\t\n        Spring Initializr\tA web-based tool for generating a Spring Boot project with the necessary configurations and dependencies.\n        Spring Boot DevTools\tA module that provides additional tools to improve the development experience, such as automatic restarts.\n        Spring Boot CLI\tA command-line interface that allows developers to quickly bootstrap a new Spring Boot application.\n        Spring Boot Test\tA testing framework that supports the testing of Spring Boot applications with features like `@SpringBootTest`.\n        Spring Boot Actuator DevTools Integration\tIntegration between Actuator and DevTools to provide additional insight during development.\n        \n    Web Development\t\n        Spring MVC\t(Model-View-Controller) A framework within Spring for building web applications with a clear separation of concerns.\n        Spring REST Controller\tA specialized controller used to create RESTful web services, annotated with `@RestController`.\n        Thymeleaf\tA server-side Java template engine used for rendering dynamic web pages in Spring Boot applications.\n        Spring Boot WebFlux\tA reactive programming framework for building non-blocking web applications, based on Project Reactor.\n        Spring Boot Filter\tComponents used to perform filtering tasks on requests and responses in a Spring Boot web application.\n        \n    Data Access\t\n        Spring Data JPA\tA part of Spring Data that simplifies data access using Java Persistence API (JPA) for relational databases.\n        Spring Data Rest\tA module that automatically exposes Spring Data repositories as RESTful endpoints.\n        Spring Data MongoDB\tAn extension of Spring Data to work with MongoDB, a NoSQL database.\n        Spring Data Redis\tSupport for working with Redis, an in-memory data structure store, in Spring Boot applications.\n        Spring Boot JdbcTemplate\tA utility class to simplify SQL operations and database access in Spring Boot.\n        \n    Security\t\n        Spring Security\tA module that provides comprehensive security services, such as authentication and authorization, for Spring applications.\n        Spring Boot OAuth2 Integration\tSupport for integrating OAuth2-based security in Spring Boot applications.\n        Spring Security JWT\tA mechanism to implement stateless authentication in Spring Boot using JSON Web Tokens (JWT).\n        Spring Boot CSRF Protection\tA built-in feature to protect against Cross-Site Request Forgery (CSRF) attacks in web applications.\n        \n    Monitoring and Management\t\n        Spring Boot Actuator\tA sub-project of Spring Boot that provides production-ready features like monitoring and management endpoints.\n        Spring Boot Health Indicator\tAn Actuator feature that provides health information about the application or specific components.\n        Spring Boot Metrics\tSupport for gathering and exposing metrics such as memory usage, request handling times, etc.\n        Spring Boot Trace\tAn Actuator feature that provides HTTP request tracing information for debugging and analysis.\n        \n    Caching and Performance\t\n        Spring Boot Cache\tA feature that enables the caching of method results to improve application performance.\n        Spring Boot EhCache\tIntegration of EhCache as a caching provider in Spring Boot applications.\n        Spring Boot Hazelcast\tSupport for integrating Hazelcast, an in-memory data grid, for caching and data distribution.\n        \n    Database Migrations\t\n        Spring Boot Flyway\tAn integrated solution for database versioning and migrations in Spring Boot applications.\n        Spring Boot Liquibase\tAn alternative to Flyway, used for managing database schema changes in a Spring Boot application.\n        Spring Boot Database Initialization\tAutomatic creation and initialization of databases using schema.sql and data.sql scripts.\n        \n    Logging\t\n        Spring Boot Logging\tSupport for various logging frameworks (e.g., Logback, SLF4J) and configuration through application properties.\n        Spring Boot Logback\tA default logging framework provided by Spring Boot, which can be customized using logback-spring.xml.\n        Spring Boot Externalized Configuration\tSupport for externalizing logging configuration through application properties and YAML files.\n        \n    Aspect-Oriented Programming\t\n        Spring AOP\t(Aspect-Oriented Programming) A module that allows the separation of cross-cutting concerns like logging, security, etc.\n        Spring Boot Aspect\tSupport for defining aspects and pointcuts to modularize cross-cutting concerns in a Spring Boot application.\n\nSpring Boot\t\n    Core Concepts\t\n        Spring Boot\tA framework that simplifies the development of production-ready Spring applications with minimal configuration.\n        Spring Boot Application\tAn entry point class annotated with `@SpringBootApplication` that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`.\n        Embedded Server\tA feature in Spring Boot that allows the application to run with an embedded server (e.g., Tomcat, Jetty), making it self-contained.\n        Spring Beans\tObjects that are managed by the Spring IoC container, defined by annotations or XML configuration.\n        Spring Profiles\tA way to segregate parts of your application configuration and make it available only in certain environments.\n        Spring Boot Banner\tThe ASCII art displayed at startup, which can be customized or disabled in Spring Boot applications.\n        Spring Boot Starter Parent\tA special starter that provides default configurations and dependency management for Spring Boot applications.\n        Dependency Injection\tA design pattern used in Spring Boot to inject dependencies into objects, managed by the Spring IoC container.\n\n    Configuration and Auto-Configuration\t\n        Spring Boot Starter\tA set of pre-configured dependencies for specific functionalities (e.g., spring-boot-starter-web for web applications).\n        Spring Boot Auto Configuration\tA feature that automatically configures Spring application based on the dependencies present on the classpath.\n        Spring Boot Configuration Properties\tA feature that allows binding externalized configuration properties to Java objects.\n        \n    Development Tools\t\n        Spring Initializr\tA web-based tool for generating a Spring Boot project with the necessary configurations and dependencies.\n        Spring Boot DevTools\tA module that provides additional tools to improve the development experience, such as automatic restarts.\n        Spring Boot CLI\tA command-line interface that allows developers to quickly bootstrap a new Spring Boot application.\n        Spring Boot Test\tA testing framework that supports the testing of Spring Boot applications with features like `@SpringBootTest`.\n        \n    Web Development\t\n        Spring MVC\t(Model-View-Controller) A framework within Spring for building web applications with a clear separation of concerns.\n        Spring REST Controller\tA specialized controller used to create RESTful web services, annotated with `@RestController`.\n        \n    Data Access\t\n        Spring Data JPA\tA part of Spring Data that simplifies data access using Java Persistence API (JPA) for relational databases.\n        \n    Security\t\n        Spring Security\tA module that provides comprehensive security services, such as authentication and authorization, for Spring applications.\n        \n    Monitoring and Management\t\n        Spring Boot Actuator\tA sub-project of Spring Boot that provides production-ready features like monitoring and management endpoints.\n        Spring Boot Health Indicator\tAn Actuator feature that provides health information about the application or specific components.\n        \n    Caching and Performance\t\n        Spring Boot Cache\tA feature that enables the caching of method results to improve application performance.\n        \n    Database Migrations\t\n        Spring Boot Flyway\tAn integrated solution for database versioning and migrations in Spring Boot applications.\n        Spring Boot Liquibase\tAn alternative to Flyway, used for managing database schema changes in a Spring Boot application.\n        \n    Logging\t\n        Spring Boot Logging\tSupport for various logging frameworks (e.g., Logback, SLF4J) and configuration through application properties.\n        \n    Aspect-Oriented Programming\t\n        Spring AOP\t(Aspect-Oriented Programming) A module that allows the separation of cross-cutting concerns like logging, security, etc.\n\nSpring Boot\tA framework that simplifies the development of production-ready Spring applications with minimal configuration.\nDependency Injection\tA design pattern used in Spring Boot to inject dependencies into objects, managed by the Spring IoC container.\nSpring Boot Starter\tA set of pre-configured dependencies for specific functionalities (e.g., spring-boot-starter-web for web applications).\nSpring Boot Auto Configuration\tA feature that automatically configures Spring application based on the dependencies present on the classpath.\nSpring Initializr\tA web-based tool for generating a Spring Boot project with the necessary configurations and dependencies.\nSpring Boot Actuator\tA sub-project of Spring Boot that provides production-ready features like monitoring and management endpoints.\nSpring Boot DevTools\tA module that provides additional tools to improve the development experience, such as automatic restarts.\nSpring Boot CLI\tA command-line interface that allows developers to quickly bootstrap a new Spring Boot application.\nSpring MVC\t(Model-View-Controller) A framework within Spring for building web applications with a clear separation of concerns.\nSpring Data JPA\tA part of Spring Data that simplifies data access using Java Persistence API (JPA) for relational databases.\nSpring Security\tA module that provides comprehensive security services, such as authentication and authorization, for Spring applications.\nSpring Boot Application\tAn entry point class annotated with `@SpringBootApplication` that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`.\nEmbedded Server\tA feature in Spring Boot that allows the application to run with an embedded server (e.g., Tomcat, Jetty), making it self-contained.\nSpring Profiles\tA way to segregate parts of your application configuration and make it available only in certain environments.\nSpring Beans\tObjects that are managed by the Spring IoC container, defined by annotations or XML configuration.\nSpring Boot Configuration Properties\tA feature that allows binding externalized configuration properties to Java objects.\nSpring Boot Test\tA testing framework that supports the testing of Spring Boot applications with features like `@SpringBootTest`.\nSpring Boot Banner\tThe ASCII art displayed at startup, which can be customized or disabled in Spring Boot applications.\nSpring REST Controller\tA specialized controller used to create RESTful web services, annotated with `@RestController`.\nSpring Boot Logging\tSupport for various logging frameworks (e.g., Logback, SLF4J) and configuration through application properties.\nSpring AOP\t(Aspect-Oriented Programming) A module that allows the separation of cross-cutting concerns like logging, security, etc.\nSpring Boot Flyway\tAn integrated solution for database versioning and migrations in Spring Boot applications.\nSpring Boot Liquibase\tAn alternative to Flyway, used for managing database schema changes in a Spring Boot application.\nSpring Boot Cache\tA feature that enables the caching of method results to improve application performance.\nSpring Boot Health Indicator\tAn Actuator feature that provides health information about the application or specific components.\nSpring Boot Starter Parent\tA special starter that provides default configurations and dependency management for Spring Boot applications.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:19:10.684Z"},"updatedDate":{"$date":"2024-08-20T05:42:21.72Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c23cdb2e59e933a354f175"},"uniqueId":"4c6e3e32-17eb-41df-bf28-25e22431e27f","parentId":"","name":"Core Java: Key Terminologies","skeleton":"Java Basics:\n    Class\n        Defines the blueprint for creating objects in Java.\n    Object\n        An instance of a class.\n    Method\n        A block of code within a class that performs a specific task.\n    Constructor\n        A special method used to initialize objects.\n\nObject-Oriented Principles:\n    Inheritance\n        Mechanism where one class inherits properties and behavior from another.\n    Polymorphism\n        Ability to take many forms, typically through method overloading or overriding.\n    Encapsulation\n        Wrapping data and methods into a single unit (class) and restricting access to some of the object's components.\n    Abstraction\n        Hiding complex implementation details and showing only the necessary features.\n\nAdvanced Object-Oriented Concepts:\n    Interface\n        A reference type in Java, similar to a class, but used to specify behavior that classes must implement.\n    Abstract Class\n        A class that cannot be instantiated and may contain abstract methods to be implemented by subclasses.\n    Overloading\n        Defining multiple methods in the same class with the same name but different parameters.\n    Overriding\n        Providing a specific implementation for a method in a subclass that already exists in its superclass.\n    Static\n        Keyword used to define class-level methods and variables that belong to the class, not instances of it.\n    Final\n        Keyword used to restrict inheritance, method overriding, or reassignment of variables.\n\nCollections and Data Structures:\n    Array\n        A collection of elements, all of the same type, stored in a contiguous memory location.\n    List\n        An ordered collection (also known as a sequence) that can contain duplicate elements.\n    Set\n        A collection that contains no duplicate elements.\n    Map\n        A collection of key-value pairs, where each key is unique.\n    Enum\n        A special class that represents a group of constants (unchangeable variables).\n    Collections Framework\n        A unified architecture for representing and manipulating collections in Java.\n\nMemory Management and Performance:\n    Garbage Collection\n        Automatic memory management that reclaims memory occupied by objects no longer in use.\n    JIT Compiler\n        (Just-In-Time Compiler) A part of the JVM that improves performance by compiling bytecode into native machine code at runtime.\n    Autoboxing\n        Automatic conversion between primitive types and their corresponding wrapper classes.\n\nConcurrency:\n    Thread\n        A lightweight process for running concurrent tasks in Java.\n    Synchronized\n        Keyword used to control access to a block of code or method by multiple threads.\n\nJava Platform Components:\n    JVM (Java Virtual Machine)\n        An abstract computing machine that enables a computer to run Java programs.\n    JRE (Java Runtime Environment)\n        Provides the libraries, Java Virtual Machine, and other components necessary to run Java applications.\n    JDK (Java Development Kit)\n        A software development environment used for developing Java applications.\n\nDesign Patterns:\n    Singleton Pattern\n        A design pattern where only one instance of a class is allowed to exist.\n    Factory Pattern\n        A design pattern for creating objects without specifying the exact class of object that will be created.\n    Observer Pattern\n        A design pattern where an object maintains a list of dependents (observers) and notifies them of any state changes.\n    Proxy Pattern\n        A design pattern that provides a surrogate or placeholder for another object to control access to it.\n\nJava GUI Toolkits:\n    Swing\n        A Java GUI widget toolkit for creating desktop applications.\n    AWT (Abstract Window Toolkit)\n        An older Java GUI toolkit used for creating graphical user interfaces.\n    JavaFX\n        A set of graphics and media packages that enables developers to design, create, test, debug, and deploy rich client applications.\n\nJava Language Features:\n    Generics\n        A feature that allows classes, interfaces, and methods to operate on types specified by the programmer.\n    Lambda Expression\n        An anonymous function that can be treated as a method argument or stored in a variable.\n    Stream API\n        A feature in Java 8 used for processing sequences of elements, typically collections, in a functional style.\n    Annotations\n        Metadata added to Java code that can provide information to the compiler or be used at runtime.\n\nJava Networking and Remote Access:\n    RMI (Remote Method Invocation)\n        A mechanism that allows a Java object to invoke methods on an object running on another JVM.\n\nJava Packaging and Deployment:\n    Package\n        A namespace used to group related classes and interfaces.\n    ClassLoader\n        A part of the Java Runtime Environment that dynamically loads Java classes into the JVM.\n    Classpath\n        A parameter in the Java environment that tells the JVM and Java compiler where to find the class files to run.\n    Module\n        A feature introduced in Java 9 that allows for the grouping of related packages together, improving modularity.\n\nMiscellaneous:\n    Wrapper Class\n        Classes that encapsulate primitive data types into objects (e.g., Integer for int).\n    Serializable\n        An interface used to enable the conversion of an object into a byte stream.\n    Reflection\n        Ability to inspect and modify the runtime behavior of applications using metadata.\n    Mutable\n        An object whose state can be modified after it is created.\n    Immutable\n        An object whose state cannot be modified after it is created.\n    JavaBeans\n        A reusable software component model in Java, typically used for developing and deploying modular applications.\n\n\nRaw data (Kept to be reviewed)\n\tClass\tDefines the blueprint for creating objects in Java.\n\tObject\tAn instance of a class.\n\tInheritance\tMechanism where one class inherits properties and behavior from another.\n\tPolymorphism\tAbility to take many forms, typically through method overloading or overriding.\n\tEncapsulation\tWrapping data and methods into a single unit (class) and restricting access to some of the object's components.\n\tAbstraction\tHiding complex implementation details and showing only the necessary features.\n\tInterface\tA reference type in Java, similar to a class, but used to specify behavior that classes must implement.\n\tAbstract Class\tA class that cannot be instantiated and may contain abstract methods to be implemented by subclasses.\n\tMethod\tA block of code within a class that performs a specific task.\n\tConstructor\tA special method used to initialize objects.\n\tOverloading\tDefining multiple methods in the same class with the same name but different parameters.\n\tOverriding\tProviding a specific implementation for a method in a subclass that already exists in its superclass.\n\tStatic\tKeyword used to define class-level methods and variables that belong to the class, not instances of it.\n\tFinal\tKeyword used to restrict inheritance, method overriding, or reassignment of variables.\n\tPackage\tA namespace used to group related classes and interfaces.\n\tException\tAn event that disrupts the normal flow of a program’s instructions.\n\tThread\tA lightweight process for running concurrent tasks in Java.\n\tSynchronized\tKeyword used to control access to a block of code or method by multiple threads.\n\tSerializable\tAn interface used to enable the conversion of an object into a byte stream.\n\tGenerics\tA feature that allows classes, interfaces, and methods to operate on types specified by the programmer.\n\tLambda Expression\tAn anonymous function that can be treated as a method argument or stored in a variable.\n\tStream API\tA feature in Java 8 used for processing sequences of elements, typically collections, in a functional style.\n\tAutoboxing\tAutomatic conversion between primitive types and their corresponding wrapper classes.\n\tJVM (Java Virtual Machine)\tAn abstract computing machine that enables a computer to run Java programs.\n\tJRE (Java Runtime Environment)\tProvides the libraries, Java Virtual Machine, and other components necessary to run Java applications.\n\tJDK (Java Development Kit)\tA software development environment used for developing Java applications.\n\n\tArray\tA collection of elements, all of the same type, stored in a contiguous memory location.\n\tList\tAn ordered collection (also known as a sequence) that can contain duplicate elements.\n\tSet\tA collection that contains no duplicate elements.\n\tMap\tA collection of key-value pairs, where each key is unique.\n\tEnum\tA special class that represents a group of constants (unchangeable variables).\n\tWrapper Class\tClasses that encapsulate primitive data types into objects (e.g., Integer for int).\n\tGarbage Collection\tAutomatic memory management that reclaims memory occupied by objects no longer in use.\n\tJIT Compiler\t(Just-In-Time Compiler) A part of the JVM that improves performance by compiling bytecode into native machine code at runtime.\n\tReflection\tAbility to inspect and modify the runtime behavior of applications using metadata.\n\tAnnotations\tMetadata added to Java code that can provide information to the compiler or be used at runtime.\n\tCollections Framework\tA unified architecture for representing and manipulating collections in Java.\n\tMutable\tAn object whose state can be modified after it is created.\n\tImmutable\tAn object whose state cannot be modified after it is created.\n\tSingleton Pattern\tA design pattern where only one instance of a class is allowed to exist.\n\tFactory Pattern\tA design pattern for creating objects without specifying the exact class of object that will be created.\n\tObserver Pattern\tA design pattern where an object maintains a list of dependents (observers) and notifies them of any state changes.\n\tSwing\tA Java GUI widget toolkit for creating desktop applications.\n\tAWT (Abstract Window Toolkit)\tAn older Java GUI toolkit used for creating graphical user interfaces.\n\tJavaFX\tA set of graphics and media packages that enables developers to design, create, test, debug, and deploy rich client applications.\n\tJavaBeans\tA reusable software component model in Java, typically used for developing and deploying modular applications.\n\tRMI (Remote Method Invocation)\tA mechanism that allows a Java object to invoke methods on an object running on another JVM.\n\tClassLoader\tA part of the Java Runtime Environment that dynamically loads Java classes into the JVM.\n\tClasspath\tA parameter in the Java environment that tells the JVM and Java compiler where to find the class files to run.\n\tModule\tA feature introduced in Java 9 that allows for the grouping of related packages together, improving modularity.\n\tProxy Pattern\tA design pattern that provides a surrogate or placeholder for another object to control access to it.\n\n","details":[],"references":[],"createdDate":{"$date":"2024-08-18T18:26:35.312Z"},"updatedDate":{"$date":"2024-08-20T05:42:40.818Z"},"__v":0,"skeletonTextType":"indented-string","softDelete":false}
{"_id":{"$oid":"66c2fa2cf1cbafe42b5d93f0"},"uniqueId":"f3675294-e4ac-4ec8-8ecc-b3559f45ab4f","parentId":"","name":"**[Task]**: **[Status: `In-Progress`]**: Overall technology stack for my career journey till 15th August 2024","skeleton":"Overall technology stack for my career journey till 15th August 2024\n\tRequirement\n\t\tbelow format should be used to create list\n\t\t\t- I have used TECHNOLOGY_STACK_NAME for LIST OF USE CASES\n\t\t\t- I have last used the above mentioned technology stack in YEAR\n\t\t\t- I have total years or months experience for this technology stack \n\t\t\t- I am eager/not eager to get interviewed on this technology stack\n\t\t\t\n\tAlgorithm\n\t\t1. Start with the candidate data array.\n\t\t\ta. Iterate over each candidate in the array.\n\t\t\t\ti. Extract the candidate's details such as name, company, and projects.\n\t\t\t\tii. Check if the candidate has multiple companies listed.\n\t\t\t\t\t- If yes, iterate through each company.\n\t\t\t\t\t- For each company, extract the associated projects.\n\t\t\t\tiii. For each project, identify the tech stack used.\n\t\t\t\t\t- This can include programming languages, frameworks, tools, etc.\n\t\t\t\tiv. Aggregate the identified tech stack for the candidate.\n\t\t\tb. Repeat the process for all candidates in the array.\n\t\t2. Compile the final list of tech stacks, grouped by candidate.\n\t\t3. Optionally, refine the tech stack list by removing duplicates or irrelevant items.\n\t\t4. Present the final tech stack data for each candidate.\n\t\n\tExecution\n\t\tFinal Result\n\t\t\tYear Wise, as per trends\n\t\t\t\tJava - 14 years\n\t\t\t\tReactJs - 6 years\n\t\t\t\tSpring Boot - 6 years\n\t\t\t\tMySql - 8 years\n\t\t\t\tJavaScript - 8 years\n\t\t\tFrontend:\n\t\t\t\t- ReactJS: 35 months\n\t\t\t\t\t- Zycus Infotech (8 months)\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t- Angular/AngularJS: 68 months\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t- GWT: 14 months\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t- Flex4: 18 months\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t- Bootstrap: 41 months\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t- CSS/JavaScript/HTML: 31 months\n\t\t\t\t\t- GreenApple (18 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t\t- HCL Infosystems (13 months)\n\n\t\t\tBackend:\n\t\t\t\t- Java/J2EE: 167 months\n\t\t\t\t\t- Zycus Infotech (8 months)\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t\t- Concentrix Gain Manager, ResolveJiffy, WebDOTS, QAA, UnI, eConvey (24 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t\t- HCL Infosystems (13 months)\n\t\t\t\t\t- GreenApple (18 months)\n\t\t\t\t- Spring Boot: 97 months\n\t\t\t\t\t- Zycus Infotech (8 months)\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t- Hibernate: 80 months\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t\t- Concentrix Gain Manager, ResolveJiffy, WebDOTS, QAA, UnI, eConvey (24 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t- Spring REST: 70 months\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t- Spring Batch: 48 months\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t- Spring MVC: 3 months\n\t\t\t\t\t- EVC Ventures (3 months)\n\t\t\t\t- Jersey: 18 months\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t- Apache Solr: 18 months\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t- JSF/Struts2: 24 months\n\t\t\t\t\t- Concentrix Gain Manager, ResolveJiffy, WebDOTS, QAA, UnI, eConvey (24 months)\n\t\t\t\t- JasperReports: 13 months\n\t\t\t\t\t- HCL Infosystems (13 months)\n\t\t\t\t- JDBC: 49 months\n\t\t\t\t\t- HCL Infosystems (13 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t\t- GreenApple (18 months)\n\n\t\t\tDatabase:\n\t\t\t\t- MySQL: 42 months\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t- Oracle 12g: 38 months\n\t\t\t\t\t- RSystems (14 months)\n\t\t\t\t\t- Dhani stocks (24 months)\n\t\t\t\t- MongoDB: 8 months\n\t\t\t\t\t- Zycus Infotech (8 months)\n\t\t\t\t- Postgres: 13 months\n\t\t\t\t\t- HCL Infosystems (13 months)\n\n\t\t\tDevOps:\n\t\t\t\t- AWS Cloud/Jenkins/Chef: 12 months\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t- JIRA/BitBucket: 12 months\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t- Maven/ANT: 130 months\n\t\t\t\t\t- Concentrix GIP (24 months)\n\t\t\t\t\t- Concentrix Zetta (12 months)\n\t\t\t\t\t- Concentrix Gain Manager, ResolveJiffy, WebDOTS, QAA, UnI, eConvey (24 months)\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t\t- HCL Infosystems (13 months)\n\t\t\t\t\t- GreenApple (18 months)\n\t\t\t\t- Tomcat: 36 months\n\t\t\t\t\t- Novelvox (18 months)\n\t\t\t\t\t- GreenApple (18 months)\n\t\t\t\t- JUnit: 167 months\n\t\t\t\t\t- Across all projects\n\n\t\t\n\t\tCompanies\n\t\t\tZycus Infotech, { ESG Lythouse } { 8 months}\n\t\t\t\tJava/J2EE, Spring Boot, Spring GraphQL, MongoDB, and ReactJS\n\t\t\tEVC Ventures, { IITD-Admin, SPortal } {3 months}\n\t\t\t\tJava/J2EE, Spring Boot, Spring REST, MyBatis, Spring MVC, Bootstrap, ReactJS\n\t\t\t\tJunit to write unit cases\n\t\t\tRSystems, { Ephesoft Transact } { 14 months }\n\t\t\t\tJava/J2EE, Spring Boot, Spring REST, Spring Boot JPA, Oracle 12g, GWT, Bootstrap, Angular\n\t\t\t\tJunit to write unit cases\n\t\t\tDhani stocks, { ShubhWeb, Notis API, KRA, SFTP } { 24 months }\n\t\t\t\tJava/J2EE, Spring Boot, Spring Batch, Spring REST, Hibernate, Oracle 12g, ReactJS, Bootstrap\n\t\t\t\tJunit to write unit cases\n\t\t\tConcentrix 68 months, 5.5 years\n\t\t\t\tGIP, {24 months}\n\t\t\t\t\tJava/J2EE, Spring Boot, Hibernate, MySQL, AngularJS, Bootstrap, Spring Boot, Spring Batch, Spring REST\n\t\t\t\t\tJunit to write unit cases\n\t\t\t\t\tMaven to build project artifacts and dependency management\n\t\t\t\tZetta { 12 months }\n\t\t\t\t\tDevelopment\n\t\t\t\t\t\tJava, J2ee, AngularJS, REST, and Hibernate, Spring Boot, Spring Batch, Spring REST\n\t\t\t\t\t\tJunit to write unit cases\n\t\t\t\t\t\tMaven to build project artifacts and dependency management\n\t\t\t\t\tDevOps\n\t\t\t\t\t\tAWS cloud using Jenkins, JIRA, AWS, BitBucket, Chef scripts\n\t\t\t\tGain Manager, ResolveJiffy, WebDOTS, QAA, UnI, eConvey { 24 months }\n\t\t\t\t\tJava, J2EE, Hibernate, JSF, and Struts2\n\t\t\t\t\tIBM WebSphere 8\n\t\t\t\t\tMaven to build project artifacts and dependency management\n\t\t\t\t\tJunit to write unit cases\n\t\t\t\t\t\n\t\t\tNovelvox, { iAgent 4.0, Survey, KnowlegeBase } { 18 months }\n\t\t\t\tJava, J2ee, JDBC, Apache Solr, Hibernate, Jersey for backend development\n\t\t\t\tJunit to write unit cases\n\t\t\t\tANT to build project artifacts\n\t\t\t\tHibernate, MySQL for Database communication\n\t\t\t\tFlex4, CSS, JavaScript for Frontend development\n\t\t\t\tTomcat 8 for Application deployment\n\t\t\t\t\n\t\t\tHCL Infosystems, { CIPA/ CIPRUS } { 13 months }\n\t\t\t\tJava with JDBC, JasperReports for backend development\n\t\t\t\tJunit to write unit cases\n\t\t\t\tANT to build project artifacts\n\t\t\t\tJDBC for Postgres Database communication\n\t\t\t\tSwing for Frontend development\n\t\t\t\tJasperReports for Report generation\n\t\t\t\n\t\t\tGreenApple, { OSCART } { 18 months }\n\t\t\t\tJava/J2ee , JavaScript, Ajax , CSS\n\t\t\t\tJunit to write unit cases\n\t\t\t\tANT to build project artifacts\n\t\t\t\tJDBC for MySQL Database communication\n\t\t\t\tJSP, HTML, JavaScript, Ajax , CSS for Frontend development\n\t\t\t\tTomcat 5 for Application deployment\n\t\t\t\t\n\n\t\tList of possible use cases for each item in the tech stack:\n\t\t\tKey-Note\n\t\t\t\tThese use cases should give myself a solid understanding of where and how each technology can be applied.\n\t\t\t\n\t\t\tFrontend\n\n\t\t\t\t- ReactJS:\n\t\t\t\t\t- Building dynamic and interactive single-page applications (SPAs).\n\t\t\t\t\t- Implementing complex user interfaces with reusable components.\n\t\t\t\t\t- Creating responsive web applications that work seamlessly across devices.\n\n\t\t\t\t- Angular/AngularJS:\n\t\t\t\t\t- Developing large-scale enterprise web applications with strong data-binding.\n\t\t\t\t\t- Creating modular and maintainable front-end codebases with dependency injection.\n\t\t\t\t\t- Implementing SPAs with robust routing and state management.\n\n\t\t\t\t- GWT (Google Web Toolkit):\n\t\t\t\t\t- Converting Java code into JavaScript for running in the browser.\n\t\t\t\t\t- Developing web applications where strong Java integration is required.\n\t\t\t\t\t- Creating highly optimized, performance-focused front-end applications.\n\n\t\t\t\t- Flex4:\n\t\t\t\t\t- Building rich internet applications (RIAs) with multimedia content.\n\t\t\t\t\t- Implementing data-driven applications with rich, interactive UI components.\n\t\t\t\t\t- Creating dashboards and complex visualizations.\n\n\t\t\t\t- Bootstrap:\n\t\t\t\t\t- Rapid prototyping of responsive and mobile-first websites.\n\t\t\t\t\t- Implementing consistent styling and layouts with pre-built components.\n\t\t\t\t\t- Developing front-end interfaces that conform to web standards and best practices.\n\n\t\t\t\t- CSS/JavaScript/HTML:\n\t\t\t\t\t- Designing and structuring web pages with custom styling.\n\t\t\t\t\t- Creating interactive and animated elements using JavaScript.\n\t\t\t\t\t- Building accessible and standards-compliant web pages.\n\n\t\t\tBackend\n\n\t\t\t\t- Java/J2EE:\n\t\t\t\t\t- Developing enterprise-grade backend services and APIs.\n\t\t\t\t\t- Implementing business logic for large-scale applications.\n\t\t\t\t\t- Creating middleware components for integration with various systems.\n\n\t\t\t\t- Spring Boot:\n\t\t\t\t\t- Rapid development of standalone production-grade Spring applications.\n\t\t\t\t\t- Creating RESTful web services and microservices architecture.\n\t\t\t\t\t- Implementing robust backend systems with built-in support for configuration and security.\n\n\t\t\t\t- Hibernate:\n\t\t\t\t\t- Managing database interactions using object-relational mapping (ORM).\n\t\t\t\t\t- Simplifying complex database operations with Java objects.\n\t\t\t\t\t- Implementing data persistence with support for caching and lazy loading.\n\n\t\t\t\t- Spring REST:\n\t\t\t\t\t- Developing RESTful web services that communicate via HTTP.\n\t\t\t\t\t- Creating APIs that follow REST principles for CRUD operations.\n\t\t\t\t\t- Implementing scalable and stateless backend services.\n\n\t\t\t\t- Spring Batch:\n\t\t\t\t\t- Processing large volumes of data in batch jobs.\n\t\t\t\t\t- Implementing ETL (Extract, Transform, Load) processes in data pipelines.\n\t\t\t\t\t- Automating repetitive tasks like data cleansing and validation.\n\n\t\t\t\t- Spring MVC:\n\t\t\t\t\t- Developing traditional web applications with model-view-controller (MVC) architecture.\n\t\t\t\t\t- Handling form submissions, validation, and data binding in web applications.\n\t\t\t\t\t- Implementing layered architecture with clear separation of concerns.\n\n\t\t\t\t- Jersey:\n\t\t\t\t\t- Developing RESTful web services using JAX-RS.\n\t\t\t\t\t- Implementing HTTP-based APIs with support for various data formats (JSON, XML).\n\t\t\t\t\t- Creating scalable and maintainable server-side applications.\n\n\t\t\t\t- Apache Solr:\n\t\t\t\t\t- Implementing full-text search capabilities in applications.\n\t\t\t\t\t- Creating search engines for websites and data-driven platforms.\n\t\t\t\t\t- Handling large-scale search operations with real-time indexing.\n\n\t\t\t\t- JSF/Struts2:\n\t\t\t\t\t- Building server-side user interfaces with component-based frameworks (JSF).\n\t\t\t\t\t- Developing traditional web applications with MVC patterns (Struts2).\n\t\t\t\t\t- Implementing complex workflows and form handling on the server side.\n\n\t\t\t\t- JasperReports:\n\t\t\t\t\t- Generating dynamic and complex reports in various formats (PDF, Excel).\n\t\t\t\t\t- Creating business intelligence tools with embedded reporting capabilities.\n\t\t\t\t\t- Implementing automated reporting systems for enterprise applications.\n\n\t\t\t\t- JDBC:\n\t\t\t\t\t- Directly interacting with relational databases using SQL in Java.\n\t\t\t\t\t- Implementing custom database operations and queries.\n\t\t\t\t\t- Managing database connections, transactions, and data retrieval.\n\n\t\t\tDatabase\n\n\t\t\t\t- MySQL:\n\t\t\t\t\t- Storing and managing relational data for web and enterprise applications.\n\t\t\t\t\t- Implementing data models for transactional systems.\n\t\t\t\t\t- Supporting large-scale databases with features like replication and clustering.\n\n\t\t\t\t- Oracle 12g:\n\t\t\t\t\t- Managing enterprise-grade databases with advanced features like partitioning.\n\t\t\t\t\t- Implementing complex PL/SQL procedures for data processing.\n\t\t\t\t\t- Handling high-availability database systems with extensive security features.\n\n\t\t\t\t- MongoDB:\n\t\t\t\t\t- Storing and retrieving unstructured or semi-structured data using NoSQL.\n\t\t\t\t\t- Implementing scalable and distributed databases for big data applications.\n\t\t\t\t\t- Handling document-oriented data models with dynamic schemas.\n\n\t\t\t\t- Postgres:\n\t\t\t\t\t- Developing relational databases with support for advanced data types and indexing.\n\t\t\t\t\t- Implementing highly reliable and ACID-compliant database systems.\n\t\t\t\t\t- Supporting geospatial data and full-text search.\n\n\t\t\tDevOps\n\n\t\t\t\t- AWS Cloud/Jenkins/Chef:\n\t\t\t\t\t- Automating deployment, scaling, and management of applications in the cloud.\n\t\t\t\t\t- Implementing CI/CD pipelines for continuous integration and delivery.\n\t\t\t\t\t- Managing infrastructure as code with tools like Chef.\n\n\t\t\t\t- JIRA/BitBucket:\n\t\t\t\t\t- Managing project workflows and tracking issues with JIRA.\n\t\t\t\t\t- Version control and collaboration on code repositories using BitBucket.\n\t\t\t\t\t- Implementing agile project management practices.\n\n\t\t\t\t- Maven/ANT:\n\t\t\t\t\t- Automating the build process for Java projects, including compilation and testing.\n\t\t\t\t\t- Managing project dependencies and artifacts with Maven.\n\t\t\t\t\t- Building project artifacts for deployment using ANT.\n\n\t\t\t\t- Tomcat:\n\t\t\t\t\t- Deploying and running Java web applications in a lightweight servlet container.\n\t\t\t\t\t- Hosting small to medium-sized enterprise applications.\n\t\t\t\t\t- Managing application lifecycle and configurations.\n\n\t\t\t\t- JUnit:\n\t\t\t\t\t- Writing and executing unit tests for Java applications.\n\t\t\t\t\t- Implementing test-driven development (TDD) practices.\n\t\t\t\t\t- Automating regression testing as part of the CI/CD pipeline.\n\n\n\n\tNext steps after Identification of Tech stacks\n\t\tCategorize Tech stacks into Primary and Secondary\n\t\t\tPrimary\n\t\t\t\tJava 8\n\t\t\t\tSpring Boot\n\t\t\t\tReactJS\n\t\t\t\tJavaScript\n\t\t\t\tAWS\n\t\t\t\tJunit\n\t\t\t\tMaven\n\t\t\tSecondary\n\t\t\t\tMicroservices\n\t\t\t\tNodeJS\n\t\t\t\tDocker K8s\n\t\t\t\tGit\n\t\t\t\tAgile\n\t\t\t\tTeam lead\n\t\t\t\tCommonly used Linux and Windows commands\n\t\t\t\tMySql\n\t\t\t\tMongoDB\n\t\t\t\tIntegration Testing\n\t\tSteps for each topic\n\t\t\tKey terminologies, with one-liner\n\t\t\tMajor versions and fetures introduced\n\t\t\tUse-cases, I have worked, in each topic\n\t\t\tHow much comfortable ( on scale of 10)\n\t\t\tProbable Interview Questions\t\t\t","details":[],"references":[],"createdDate":{"$date":"2024-08-19T07:54:20.404Z"},"updatedDate":{"$date":"2024-10-19T14:11:38.852Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c3012bf1cbafe42b5d9476"},"uniqueId":"bc646634-aae1-45eb-b679-84cbfca64570","parentId":"","name":"ChatGPT conversation can be used to","skeleton":"ChatGPT conversation can be used to:\n\t- Identify use cases and their implementations using different technologies.\n\t\t- Further classify use cases into different categories such as:\n\t\t\t- Frontend\n\t\t\t- Backend\n\t\t\t- Database\n\t\t\t- Deployment\n\t\t\t- Testing\n\t\t\t- Configuration\n\t- Generate detailed explanations and code snippets for specific implementations.\n\t- Provide recommendations on best practices and design patterns.\n\t- Assist in troubleshooting and debugging issues in various tech stacks.\n\t- Offer insights into optimizing performance and security across different layers.\n\t- Facilitate knowledge sharing and collaboration among team members.\n\t- Automate documentation of the identified use cases and their solutions.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-19T08:24:11.887Z"},"updatedDate":{"$date":"2024-08-19T08:25:15.832Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c318bcf1cbafe42b5e251a"},"uniqueId":"01544d54-b383-4610-973b-ca594b1736c2","parentId":"","name":"Different kinds of Developers","skeleton":"Different kinds of Developers\n\tFacts\n\t\tThere are several types of developers, each specializing in different areas of software development.\n\t\tEach of these roles requires a different skill set, tools, and technologies, depending on the domain and specific tasks.\n\n\tSome common Types\n\t\t1. Front-End Developer\n\t\t\t- Focuses on the user interface and user experience.\n\t\t\t- Works with HTML, CSS, JavaScript, and front-end frameworks/libraries like React, Angular, or Vue.js.\n\n\t\t2. Back-End Developer\n\t\t\t- Works on server-side logic, databases, and APIs.\n\t\t\t- Typically uses languages like Java, Python, Ruby, PHP, Node.js, and databases like MySQL, PostgreSQL, MongoDB.\n\n\t\t3. Full Stack Developer\n\t\t\t- Combines front-end and back-end skills.\n\t\t\t- Capable of working on the entire stack of a web application.\n\n\t\t4. Mobile Developer\n\t\t\t- Specializes in developing applications for mobile devices.\n\t\t\t- Works with platforms like iOS (using Swift or Objective-C) or Android (using Java or Kotlin).\n\n\t\t5. DevOps Engineer\n\t\t\t- Focuses on the integration between development and operations.\n\t\t\t- Handles CI/CD pipelines, server management, deployment, and monitoring using tools like Docker, Kubernetes, Jenkins, and AWS.\n\n\t\t6. Data Scientist\n\t\t\t- Works with data analysis, machine learning, and statistical modeling.\n\t\t\t- Uses languages like Python, R, and tools like TensorFlow, Scikit-learn, and Pandas.\n\n\t\t7. Data Engineer\n\t\t\t- Focuses on building systems for collecting, storing, and analyzing data.\n\t\t\t- Works with big data technologies like Hadoop, Spark, and databases like Cassandra or NoSQL databases.\n\n\t\t8. AI/ML Developer\n\t\t\t- Specializes in developing artificial intelligence and machine learning models.\n\t\t\t- Works with neural networks, deep learning, and frameworks like TensorFlow, PyTorch.\n\n\t\t9. Game Developer\n\t\t\t- Specializes in creating video games.\n\t\t\t- Uses game engines like Unity or Unreal Engine and programming languages like C++, C#, or Lua.\n\n\t\t10. Embedded Systems Developer\n\t\t\t- Focuses on developing software for embedded systems, like microcontrollers or IoT devices.\n\t\t\t- Typically uses C, C++, or assembly languages.\n\n\t\t11. Security Developer\n\t\t\t- Specializes in developing software with a focus on security.\n\t\t\t- Works on encryption, ethical hacking, and ensuring the software is secure from vulnerabilities.\n\n\t\t12. Database Developer\n\t\t\t- Specializes in database design, development, and management.\n\t\t\t- Works with SQL, NoSQL, and database management systems like Oracle, MySQL, PostgreSQL.\n\n\t\t13. Blockchain Developer\n\t\t\t- Specializes in developing blockchain technologies and decentralized applications (DApps).\n\t\t\t- Works with platforms like Ethereum, Hyperledger, and languages like Solidity.\n\n\t\t14. Cloud Developer\n\t\t\t- Specializes in developing applications that run in the cloud.\n\t\t\t- Works with cloud platforms like AWS, Azure, Google Cloud, and related services.\n\n\t\t15. Software Engineer/Developer\n\t\t\t- A general term for developers who design, develop, test, and maintain software applications.\n\t\t\t- Can work in various domains, including web, desktop, mobile, and cloud. \n\n\t","details":[],"references":[],"createdDate":{"$date":"2024-08-19T10:04:44.764Z"},"updatedDate":{"$date":"2024-08-19T10:05:48.911Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c32628f1cbafe42b5ec341"},"uniqueId":"ccf7bb7a-3b4f-47cf-9ab7-81afb5f76ae5","parentId":"","name":"**[Task]**: **[Status: `In-Progress: Architecture-Design-In-Progress`]**:Plan : To identify possible minimal relation between 2 memory map (also can be called as Tree)","skeleton":"Plan: To Identify Possible Minimal Relation Between Two Memory Maps (Trees)\n\n\tObjective:\n\t\tThe goal is to identify minimal and essential relationships between two memory maps, which can also be represented as trees. These relationships will help establish a common understanding of the level or depth between corresponding nodes in `Tree A` and `Tree B`.\n\n\tTarget:\n\t\tThe target is to identify relationships between nodes in the following format, allowing us to determine the `level` between the two trees:\n\t\t\t- If `Tree A` has a `relation-name` with `Tree B`, then `Tree A` should have the same `level` as `Tree B`.\n\n\tSteps:\n\n\t\t1. Define Tree Structures:\n\t\t\t- Represent `Tree A` and `Tree B` as hierarchical data structures (e.g., JSON objects or tree nodes) where each node has:\n\t\t\t- A unique identifier.\n\t\t\t- A parent-child relationship.\n\t\t\t- Optionally, additional properties like dependencies or other metadata.\n\n\t\t2. Identify Possible Relations:\n\t\t\t- Direct Parent-Child Relationship:\n\t\t\t\t- If a node in `Tree A` has a direct parent-child relationship with a corresponding node in `Tree B`, this implies that both nodes are at the same `level`.\n\t\t\t- Dependency-Based Relationship:\n\t\t\t\t- If a node in `Tree A` is dependent on a node in `Tree B` (or vice versa), this might indicate a horizontal dependency rather than a vertical parent-child relationship, suggesting they could be on the same `level`.\n\t\t\t- Sibling Relationship:\n\t\t\t\t- If nodes in `Tree A` and `Tree B` share a common parent node or have the same parent, they can be considered at the same `level`.\n\t\t\t- Reference or Pointer Relationship:\n\t\t\t\t- Nodes in `Tree A` and `Tree B` might refer to each other through pointers or references, meaning they share a logical connection that might not be purely hierarchical but still establishes a `level` parity.\n\n\t\t3. Match and Compare Levels:\n\t\t\t- For each node in `Tree A`, traverse `Tree B` to find potential relationships.\n\t\t\t- Compare their levels and relationships to ensure consistency.\n\t\t\t- If a relationship is found, ensure that the `level` of the corresponding nodes in both trees is the same.\n\n\t\t4. Establish Relationship Rules:\n\t\t\t- Define rules or algorithms to automate the identification of these relationships:\n\t\t\t\t- Rule 1: Parent-Child Mapping\n\t\t\t\t\t- If a node in `Tree A` has a parent or child node with a direct match in `Tree B`, assign them the same `level`.\n\t\t\t\t- Rule 2: Dependency Mapping\n\t\t\t\t\t- Nodes that are dependent on each other (or have a dependency relationship) should be mapped to the same `level`.\n\t\t\t\t- Rule 3: Sibling Mapping\n\t\t\t\t\t- Nodes with a shared parent should be placed at the same `level`.\n\t\t\t\t- Rule 4: Reference Mapping\n\t\t\t\t\t- If nodes reference each other, ensure they are on the same `level`.\n\n\t\t5. Handle Edge Cases:\n\t\t\t- Consider cases where a node in `Tree A` might not have a direct equivalent in `Tree B` and how that affects the level assignment.\n\t\t\t- Manage cases where nodes are missing in one tree but not the other.\n\n\t\t6. Output Relationship Structure:\n\t\t\t- After processing, output the minimal relationships identified between the two trees in the desired format.\n\t\t\t- This will indicate the `level` parity between nodes in `Tree A` and `Tree B`.\n\n\t\t7. Verification and Validation:\n\t\t\t- Test the relationship mapping against known trees to ensure the levels are correctly identified and matched.\n\t\t\t- Validate that the minimal relationships correctly represent the necessary hierarchical or dependency structures.\n\n\tExample and output: \n\t\tPlease refer details\n\t\tThis plan sets a structured approach to identifying and validating minimal relations between two trees, ensuring that corresponding nodes have matching levels based on defined relationships.\n\n","details":[{"uniqueId":"2d4fae65-5ac4-41e5-8ea2-e38678dde59d","smartContent":{"content":"\n\n# Plan: To Identify Possible Minimal Relation Between Two Memory Maps (Trees)\n\n## Objective:\nThe goal is to identify minimal and essential relationships between two memory maps, which can also be represented as trees. These relationships will help establish a common understanding of the level or depth between corresponding nodes in `Tree A` and `Tree B`.\n\n### Target:\nThe target is to identify relationships between nodes in the following format, allowing us to determine the `level` between the two trees:\n- **If `Tree A` has a `relation-name` with `Tree B`, then `Tree A` should have the same `level` as `Tree B`.**\n\n## Steps:\n\n1. **Define Tree Structures:**\n   - Represent `Tree A` and `Tree B` as hierarchical data structures (e.g., JSON objects or tree nodes) where each node has:\n     - A unique identifier.\n     - A parent-child relationship.\n     - Optionally, additional properties like dependencies or other metadata.\n\n2. **Identify Possible Relations:**\n   - **Direct Parent-Child Relationship:**\n     - If a node in `Tree A` has a direct parent-child relationship with a corresponding node in `Tree B`, this implies that both nodes are at the same `level`.\n   - **Dependency-Based Relationship:**\n     - If a node in `Tree A` is dependent on a node in `Tree B` (or vice versa), this might indicate a horizontal dependency rather than a vertical parent-child relationship, suggesting they could be on the same `level`.\n   - **Sibling Relationship:**\n     - If nodes in `Tree A` and `Tree B` share a common parent node or have the same parent, they can be considered at the same `level`.\n   - **Reference or Pointer Relationship:**\n     - Nodes in `Tree A` and `Tree B` might refer to each other through pointers or references, meaning they share a logical connection that might not be purely hierarchical but still establishes a `level` parity.\n\n3. **Match and Compare Levels:**\n   - For each node in `Tree A`, traverse `Tree B` to find potential relationships.\n   - Compare their levels and relationships to ensure consistency.\n   - If a relationship is found, ensure that the `level` of the corresponding nodes in both trees is the same.\n\n4. **Establish Relationship Rules:**\n   - Define rules or algorithms to automate the identification of these relationships:\n     - **Rule 1: Parent-Child Mapping**\n       - If a node in `Tree A` has a parent or child node with a direct match in `Tree B`, assign them the same `level`.\n     - **Rule 2: Dependency Mapping**\n       - Nodes that are dependent on each other (or have a dependency relationship) should be mapped to the same `level`.\n     - **Rule 3: Sibling Mapping**\n       - Nodes with a shared parent should be placed at the same `level`.\n     - **Rule 4: Reference Mapping**\n       - If nodes reference each other, ensure they are on the same `level`.\n\n5. **Handle Edge Cases:**\n   - Consider cases where a node in `Tree A` might not have a direct equivalent in `Tree B` and how that affects the level assignment.\n   - Manage cases where nodes are missing in one tree but not the other.\n\n6. **Output Relationship Structure:**\n   - After processing, output the minimal relationships identified between the two trees in the desired format.\n   - This will indicate the `level` parity between nodes in `Tree A` and `Tree B`.\n\n7. **Verification and Validation:**\n   - Test the relationship mapping against known trees to ensure the levels are correctly identified and matched.\n   - Validate that the minimal relationships correctly represent the necessary hierarchical or dependency structures.\n\n## Example:\n\n### Given Trees:\n**Tree A:**\n```\nA1\n├── A2\n│   ├── A3\n│   └── A4\n└── A5\n```\n\n**Tree B:**\n```\nB1\n├── B2\n│   ├── B3\n│   └── B4\n└── B5\n```\n\n### Relations:\n- `A1` is related to `B1` (same level 0)\n- `A2` is related to `B2` (same level 1)\n- `A3` is related to `B3` (same level 2)\n- `A4` is related to `B4` (same level 2)\n- `A5` is related to `B5` (same level 1)\n\n### Output:\nThe output should list the relationships and their corresponding levels, confirming that `Tree A` and `Tree B` have matching levels based on the identified relations.\n\n\n\nThis plan sets a structured approach to identifying and validating minimal relations between two trees, ensuring that corresponding nodes have matching levels based on defined relationships.","textOutputType":"markdown","textInputType":"TextArea"},"_id":{"$oid":"6713bdc1b082442ae98c99ec"}}],"references":[],"createdDate":{"$date":"2024-08-19T11:02:00.419Z"},"updatedDate":{"$date":"2024-10-19T14:10:09.661Z"},"__v":2,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c33b73fbe29d20b50c6fd0"},"uniqueId":"8ed4a17b-dd1a-404f-b05a-9b167cda036d","parentId":"","name":"**[Task]**: **[Status: `In-Progress`]**: प्रोजेक्ट आत्म-मंथन: साक्षात्कार की तैयारी के साथ, Project Atm-manthan: Along with Interview Preparation","skeleton":"Project Atm-manthan: Along with Interview Preparation\n\tInterview Preparation\n\t\tTopics To prepare\n\t\t\tTechnical Interview Preparation \n\t\t\t\tTopics\n\t\t\t\t\tPrimary\n\t\t\t\t\t\tJava 8\n\t\t\t\t\t\tSpring Boot\n\t\t\t\t\t\tReactJS\n\t\t\t\t\t\tJavaScript\n\t\t\t\t\t\tAWS\n\t\t\t\t\t\tJunit\n\t\t\t\t\t\tMaven\n\t\t\t\t\tSecondary\n\t\t\t\t\t\tMicroservices\n\t\t\t\t\t\tNodeJS\n\t\t\t\t\t\tDocker K8s\n\t\t\t\t\t\tGit\n\t\t\t\t\t\tAgile\n\t\t\t\t\t\tTeam lead\n\t\t\t\t\t\tCommonly used Linux and Windows commands\n\t\t\t\t\t\tMySql\n\t\t\t\t\t\tMongoDB\n\t\t\t\t\t\tIntegration Testing\n\t\t\t\tSteps for each topic\n\t\t\t\t\tKey terminologies, with one-liner\n\t\t\t\t\tMajor versions and fetures introduced\n\t\t\t\t\tUse-cases, I have worked, in each topic\n\t\t\t\t\tHow much comfortable ( on scale of 10)\n\t\t\t\t\tProbable Interview Questions\n\t\t\t\t\t\n\t\t\tResume Preparation\n\t\t\t\tPrepare over-all tech stack info\n\t\t\t\t\tSteps\n\t\t\t\t\t\tTech stack for each project\n\t\t\t\t\t\tConsolidate company wise\n\t\t\t\t\t\tConsolidate for final list\n\t\t\t\tPrepare over-all use cases, tech stack wise\n\t\t\t\t\tSteps\n\t\t\t\t\t\tIdentify use cases project wise\n\t\t\t\t\t\tCompile company wise use cases\n\t\t\t\t\t\tConsolidate for final list\n\t\t\t\tPrepare information for \n\t\t\t\t\tRoles and Responsibilities in each project\n\t\t\t\t\t\n\t\t\t\t\n\tProject\n\t\tTarget:\n\t\t\t1. To develop applications for the following use cases, adhering to best practices:\n\t\t\t\t1.1. Tree data creation from given text.\n\t\t\t\t1.2. Visualization of tree data on a view page.\n\n\t\tAvailable Toolbox:\n\t\t\tFor utility/service creation for Requirement 1.1:\n\t\t\t\t- JavaScript\n\t\t\t\t- TypeScript\n\t\t\t\t- Java\n\t\t\t\t\t- To create a library\n\t\t\t\t\t- To create a REST service\n\t\t\t\t- Python\n\t\t\t\t- Node.js\n\t\t\t\t\t- To create a library\n\t\t\t\t\t- To create a REST service\n\t\t\t\n\t\t\tFor view creation for Requirement 1.2:\n\t\t\t\t- React.js\n\t\t\t\t- Angular\n\t\t\t\t- TypeScript\n\t\t\t\t- JavaScript\n\t\t\t\t- Servlet\n\t\t\t\t- JSP\n\n\t\tExecution Strategy:\n\t\t\t1. Design Phase:\n\t\t\t\t1.1. Requirement Analysis\n\t\t\t\t1.2. System Design and Architecture\n\t\t\t\t1.3. Data Structure Selection for Tree Representation\n\t\t\t\t\n\t\t\t2. Development Phase:\n\t\t\t\t2.1. Implement tree data creation using selected technologies.\n\t\t\t\t2.2. Develop REST services if needed.\n\t\t\t\t2.3. Build the front-end visualization components.\n\t\t\t\n\t\t\t3. Testing Phase:\n\t\t\t\t3.1. Unit testing for libraries/services.\n\t\t\t\t3.2. Integration testing for complete application flow.\n\t\t\t\t3.3. User Acceptance Testing (UAT).\n\n\t\t\t4. Deployment Phase:\n\t\t\t\t4.1. Deploy REST services and front-end application.\n\t\t\t\t4.2. Monitor performance and resolve any post-deployment issues.\n\n\t\tAdditional Considerations:\n\t\t\t- Code quality should be maintained with proper documentation.\n\t\t\t- Follow a version control strategy using Git.\n\t\t\t- Implement CI/CD pipelines for automated testing and deployment.\n\t\t\t- Ensure cross-browser compatibility for front-end applications.\n\t\t\t- Handle large tree data sets efficiently with pagination or lazy loading.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-19T12:32:51.017Z"},"updatedDate":{"$date":"2024-10-19T14:08:35.715Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c45de5af603e25146fd662"},"uniqueId":"f39fce1c-885b-4984-91f1-620a657f499f","parentId":"","name":"Use Cases For Backend Frontend Database","skeleton":"Use-Cases\n\tFront-end\n\t\tUser Authentication: \n\t\t\tLogin and registration forms, password reset functionality.\n\t\tData Display: \n\t\t\tFetching and displaying data from APIs, such as lists, tables, charts, and graphs.\n\t\tForms and Validation: \n\t\t\tCreating dynamic forms with validation rules and error handling.\n\t\tNavigation: \n\t\t\tImplementing routing and navigation between different views or pages.\n\t\tState Management: \n\t\t\tManaging and synchronizing application state across components.\n\t\tResponsive Design: \n\t\t\tEnsuring the application is usable and looks good on various screen sizes.\n\t\tReal-time Updates: \n\t\t\tDisplaying real-time data using WebSockets or other techniques.\n\t\tUser Interactions: \n\t\t\tHandling user input and interactions like clicks, drags, and hovers.\n\t\tAnimations and Transitions: \n\t\t\tAdding visual feedback and improving user experience with animations.\n\t\t\tTypes of Animations\n\t\t\t\tFade In/Out: \n\t\t\t\t\tGradually increasing or decreasing the opacity of an element.\n\t\t\t\tSlide In/Out: \n\t\t\t\t\tMoving an element into or out of view from a specific direction (top, bottom, left, right).\n\t\t\t\tScale: \n\t\t\t\t\tIncreasing or decreasing the size of an element.\n\t\t\t\tRotate: \n\t\t\t\t\tRotating an element around a fixed point.\n\t\t\t\tBounce: \n\t\t\t\t\tCreating a bouncing effect for an element.\n\t\t\t\tShake: \n\t\t\t\t\tCreating a shaking or jittering effect for an element.\n\t\t\t\tFlip: \n\t\t\t\t\tFlipping an element around its horizontal or vertical axis.\n\t\t\t\tSpin: \n\t\t\t\t\tContinuously rotating an element.\n\t\t\t\tHover Effects: \n\t\t\t\t\tAnimations triggered when an element is hovered over.\n\t\t\t\tParallax Scrolling: \n\t\t\t\t\tCreating a 3D effect where background images move slower than foreground images.\n\t\t\t\tKeyframe Animations: \n\t\t\t\t\tDefining complex animations with multiple stages using keyframes.\n\t\t\t\tTransitions: \n\t\t\t\t\tSmoothly changing properties such as color, size, or position over a given duration.\n\t\t\t\tMorphing: \n\t\t\t\t\tGradually changing one shape into another.\n\t\t\t\tLoading Spinners: \n\t\t\t\t\tIndicating that content is loading with a rotating or pulsing effect.\n\t\t\t\tAccordion: \n\t\t\t\t\tExpanding or collapsing sections of content.\t\n\t\tLocalization: \n\t\t\tSupporting multiple languages and regional settings.\n\t\n\tBackend\n\t\tUser Authentication and Authorization: \n\t\t\tHandling user registration, login, password resets, and access control.\n\t\tData Management: \n\t\t\tCRUD (Create, Read, Update, Delete) operations on databases.\n\t\tAPI Development: \n\t\t\tCreating RESTful or GraphQL APIs for client-side applications to consume.\n\t\tFile Upload and Storage: \n\t\t\tHandling file uploads, processing, and storing files on the server.\n\t\tEmail Notifications: \n\t\t\tSending automated emails for various events such as registration confirmation, password reset, and notifications.\n\t\tPayment Processing: \n\t\t\tIntegrating payment gateways to handle transactions securely.\n\t\tLogging and Monitoring: \n\t\t\tKeeping track of application logs, monitoring performance, and tracking errors.\n\t\tData Processing: \n\t\t\tPerforming server-side data processing tasks such as data validation, transformation, and aggregation.\n\t\tBackground Jobs: \n\t\t\tHandling time-consuming tasks asynchronously using job queues.\n\t\tCaching: \n\t\t\tImplementing caching mechanisms to improve performance and reduce load on the database.\n\t\tSession Management: \n\t\t\tManaging user sessions to maintain state across requests.\n\t\tWebSockets: \n\t\t\tEnabling real-time communication between the server and clients.\n\t\tSecurity: \n\t\t\tImplementing security measures such as data encryption, protection against SQL injection, CSRF, and XSS attacks.\n\t\tThird-party Integrations: \n\t\t\tConnecting with external services and APIs such as social media platforms, analytics services, and cloud storage providers.\n\t\tMicroservices: \n\t\t\tDecomposing a monolithic application into smaller, independently deployable services.  \n","details":[],"references":[],"createdDate":{"$date":"2024-08-20T09:12:05.618Z"},"updatedDate":{"$date":"2024-08-21T18:15:00.723Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c4ccb3628603394fd96d47"},"uniqueId":"4bc44369-8864-4000-8474-3d80893bc516","parentId":"","name":"Task: Related Nodes story","skeleton":"Related Nodes story\n\thighlights\n\t\t- have minimum fields\n\t\t- mostly references to others\n\t\t- mainly focuses on creating relations (prev/next, relation name)\n\n\tnode \n\t\ttype ( category, question, topic, link, tech-stack, memory-map, conversation, message)\n\t\tname\n\t\tshowDetails, true/false\n\t\trelations\n\t\t\tpurpose\n\t\t\t\tnext nodes, relation with next node\n\t\t\t\tprevious nodes ( actually storing in next nodes, but visualizing them with back arrow, due to its relation type)\n\t\t\trelation string example\n\t\t\t\t- Node A has a relation named 'next question for' with Node B. Node A should be visible after Node B\n\t\t\t\t- Node A has a relation named 'root question for' with Node B. Node A should be visible before Node B\n\t\t\n\t\t\n\t\t\n\tFields in different types of nodes\n\t\tCommon fields\n\t\t\tname\n\t\t\ttitle\n\t\t\tuniqueId\n\t\t\tparent type\n\t\t\tcreatedOn\n\t\t\tlastUpdatedOn\n\t\tCategory\n\t\t\n\tBusiness Logic\n\t\t1. All nodes will be populated in header sections combo-box\n\t\t\tUser can select a node to see its name and related nodes \n\t\t\n\t\t2. Once use selects a node, its value will be shown in \"Playground\" section\n\t\t\tThere will be 3 (divs in same row ) sections, further in \"Playground\" section\n\t\t\t\tIn the left-most section, nodes having prev relations will be shown\n\t\t\t\tin the middle, node it self will be shown\n\t\t\t\tin the right-most section, nodes having next relations will be shown\n\t\t\n\t\t3. New node form, Edit Node Form, Details card all will be shown in \"Details\" section","details":[],"references":[],"createdDate":{"$date":"2024-08-20T17:04:51.441Z"},"updatedDate":{"$date":"2024-08-21T05:11:45.504Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c639380065248fdbcf6acb"},"uniqueId":"11e36931-d2fe-4223-8c82-f1c99dc565a8","parentId":"","name":"Possible Tech Stacks","skeleton":"\nApplication Development: \n\tOverview\n\t\tPossible tech stacks to develop an application that can render tree data, considering technologies from Java, its frameworks, JavaScript, ReactJS, and Angular\n\tBackend\n\t\tJava\n\t\t\tSpring Boot\n\t\t\tJakarta EE (formerly Java EE)\n\t\t\tMicronaut\n\t\t\tQuarkus\n\t\t\tVert.x\n\t\tDatabase\n\t\t\tMySQL\n\t\t\tPostgreSQL\n\t\t\tMongoDB\n\t\t\tOracle DB\n\t\t\tHibernate (ORM)\n\t\tREST API Development\n\t\t\tSpring MVC\n\t\t\tJersey\n\t\t\tJAX-RS\n\t\t\tMicronaut\n\tFrontend\n\t\tJavaScript\n\t\t\tReactJS\n\t\t\t\tReact Router\n\t\t\t\tRedux / Context API\n\t\t\t\tReact Query / SWR\n\t\t\t\tStyled Components / Emotion\n\t\t\tAngular\n\t\t\t\tAngular CLI\n\t\t\t\tRxJS\n\t\t\t\tAngular Material\n\t\t\tVanilla JavaScript\n\t\t\tTypeScript\n\t\tStyling\n\t\t\tCSS / SCSS\n\t\t\tBootstrap\n\t\t\tMaterial UI\n\t\t\tTailwind CSS\n\t\tFrontend Tools\n\t\t\tWebpack\n\t\t\tBabel\n\t\t\tESLint / Prettier\n\tFull-Stack Development\n\t\tMEAN Stack\n\t\t\tMongoDB\n\t\t\tExpress.js\n\t\t\tAngular\n\t\t\tNode.js\n\t\tMERN Stack\n\t\t\tMongoDB\n\t\t\tExpress.js\n\t\t\tReactJS\n\t\t\tNode.js\n\t\tSpring Boot + ReactJS\n\t\tSpring Boot + Angular\n\tDevOps\n\t\tCI/CD\n\t\tJenkins\n\t\tGitLab CI/CD\n\t\tGitHub Actions\n\tContainerization\n\t\tDocker\n\t\tKubernetes\n\tCloud Platforms\n\t\tAWS\n\t\tGoogle Cloud Platform (GCP)\n\t\tMicrosoft Azure","details":[],"references":[],"createdDate":{"$date":"2024-08-21T19:00:08.377Z"},"updatedDate":{"$date":"2024-08-21T19:08:22.886Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c6c79e17cdaf8a0764cd4b"},"uniqueId":"65983fcb-68b6-4eca-a79b-811f44c0d326","parentId":"","name":"**[Task]**: **[Status: `unknown`]** SmartEditor new changes","skeleton":"[Task] SmartEditor new changes\n\tShow Diff functionality add karna hai\n\t\tof new text and old text\n\tAbbreviations\n\t\tText Output Type - TOT\n\t\tText Input Type - TIT\n\tshow a combobox with below values, ye change UI me karna hai\n\t\tRAW_TEXT - SHOW_TEXT_AREA\n\t\tHTML_OUTPUT_FROM_RAW_TEXT - SHOW_TEXT_AREA\n\t\tHTML_OUTPUT_FROM_CKEDITOR - SHOW_CKEDITOR\n\t\tYAML - SHOW_TEXT_AREA\n\t\tMARKDOWN - SHOW_TEXT_AREA\n\t\tSKELETON - SHOW_TEXT_AREA\n\t\t","details":[],"references":[],"createdDate":{"$date":"2024-08-22T05:07:42.636Z"},"updatedDate":{"$date":"2024-10-19T14:06:18.407Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c6c96317cdaf8a0764cdfe"},"uniqueId":"f881c52a-7674-42c6-9f0d-ab22976ccf76","parentId":"","name":"**[Task]**: **[Status: `unknown`]** Re-structuring Interview-Management module","skeleton":"[Task]: Re-structuring Interview-Management module\n\tQuestion\n\t\twill contain Answers\n\t\t\tAnswers can be best answers true or false\n\t\t\tWithin a Question, only one answer can be marked as best answer\n\t\tA Question should have list of nextQuestions\n\t\tA Question should have list of previousQuestions\n\t\tIf Q2 is marked as next question of Q1, then we should store relation info in such manner that, once we fetch data for Q2, its previousQuestions list should contain Q1 in its list. Also when we fetch data for Q1, its nextQuestions list should contain Q2 in its list.\n\tTag or Category\n\t\tA Question can be added to any number of Tags\n\t\tOrder of a question should be managed in a tag","details":[],"references":[],"createdDate":{"$date":"2024-08-22T05:15:15.66Z"},"updatedDate":{"$date":"2024-10-19T14:05:24.095Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c6da3417cdaf8a0764cf62"},"uniqueId":"2f0bcb82-d3e1-4376-9228-ceb85670a6d8","parentId":"","name":"Questions asked in interview on 22nd Aug 2024","skeleton":"Questions asked in interview on 22nd Aug 2024\n\tJava\n\t\tJava 8 features\n\t\tusing java 8, Write a program to get value having maximum occurence in given array say, {2,1,2, 1, 2,3,4,2,4}\n\t\tWhat is difference between @Component and @Service in Spring boot\n\t\tWhat are different scopes in spring\n\n\tReact \n\t\tFunctional component given containing an input, a p tag and state for inputContent. Asked what will be output\n\t\t\n\t\t\n\tAngularJs\n\t\twhat are directives\n\t\twhat are filters\n\t\twhat is difference between inIf and ngShow\n\t\t","details":[],"references":[],"createdDate":{"$date":"2024-08-22T06:27:00.873Z"},"updatedDate":{"$date":"2024-08-22T06:27:30.696Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66c8676eb00cb696d182d926"},"uniqueId":"063e35d3-99fa-4fae-852e-7537b07f97cd","parentId":"","name":"Common question trends: Interview preparation: 22nd Feb 2024","skeleton":"Common question trends: Interview preparation: 22nd Feb 2024\n\n\tJavascript\n\t\tClousures\n\t\t\n\tReactJS\n\t\tHow to create a ReactJS project from scratch\n\t\tHooks\n\t\tHigher Order Functions\n\t\t\n\tSpring Boot\n\t\tWhat is Inversion of control\n\t\t@Autowired\n\t\t@Component and @Service\n\t\tScopes\n\t\t\n\tSpring REST\n\t\t@Controller vs. @RestController\n\t\tDifferent Annotations used in \n\t\t\n\tGraphQl\n\t\tWhy should use GraphQL? \n\t\tHow GraphQL is better than REST?\n\t\tHow to do authentication in GraphQL?\n\t\t\n\t\t\n\tJava 8 questions\n\t\tFeatures Introduced in Java 8\n\t\tJava 8 program to find the 3rd and 4th largest integers in a given array\n\t\tusing java 8, Write a program to get value having maximum occurence in given array say, {2,1,2, 1, 2,3,4,2,4}\n\t\t\n\tJava Exceptions\n\t\tChecked and Unchecked Exceptions\n\t\t\n\tSolid Principles\n\tDesign Patterns\n\t\tFactory of factory pattern\n\tMicroservice Design Patterns","details":[],"references":[],"createdDate":{"$date":"2024-08-23T10:41:50.076Z"},"updatedDate":{"$date":"2024-08-23T10:57:58.752Z"},"__v":0,"softDelete":false,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66caeb153a0268b317cbb47b"},"uniqueId":"a2d9d435-a78a-41c2-8107-12b9c021c9f1","parentId":"","name":"Area for improvement in Interview Management","skeleton":"Area for improvement in Interview Management\n\tRequirements\n\t\tContext should be used for managing internal states\n\t\tAPI end point urls should be shorten\n\t\tUniform styles should be applied to components\n\t\tCentral error and validation message mechanism should be applied.\n\t\tmove a category to a new parent\n\t\tmove a question to a new category\n\t\tsearch for given search sfring in category, question and answer\n\t\n\t\n\tpossible button group options on Category Card\n\t\tNote\n\t\t\tPlease try to re-use options developed in Topic section\n\t\t\tTry to re-use using custom components and hooks\n\t\tOptions\t\t\n\t\t\tEdit\n\t\t\tHide Description\n\t\t\tAdd Child\n\t\t\tMove to Another Parent\n\t\t\tPin\n\t\t\tShow Pinned Items\n\t\t\tPrevious\n\t\t\tNext\n\t\t\tBreadcrumb from root to node","details":[],"references":[],"createdDate":{"$date":"2024-08-25T08:28:05.887Z"},"updatedDate":{"$date":"2024-08-25T08:50:01.784Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66cde0bf1b8f0414e8df1247"},"uniqueId":"73998eba-51c9-470c-8854-df057363ed23","parentId":"","name":"Java SE Versions","skeleton":"Here's a list of major Java versions with their release dates and notable features:\n\n\tJava 1.0\n\t\t- Release Date: January 23, 1996\n\t\t- Notable Features: \n\t\t\t- Initial release with basic core libraries.\n\t\t\t- AWT (Abstract Window Toolkit) for GUI programming.\n\t\t\t- Basic applet support.\n\n\tJava 1.1\n\t\t- Release Date: February 19, 1997\n\t\t- Notable Features: \n\t\t\t- Inner classes.\n\t\t\t- JavaBeans.\n\t\t\t- JDBC (Java Database Connectivity).\n\t\t\t- RMI (Remote Method Invocation).\n\n\tJava 1.2 (Java 2)\n\t\t- Release Date: December 8, 1998\n\t\t- Notable Features:\n\t\t\t- Swing GUI components.\n\t\t\t- Collections Framework.\n\t\t\t- JIT (Just-In-Time) compiler.\n\t\t\t- Java Plug-in.\n\n\tJava 1.3\n\t\t- Release Date: May 8, 2000\n\t\t- Notable Features:\n\t\t\t- HotSpot JVM as the default.\n\t\t\t- JavaSound API.\n\t\t\t- Java Naming and Directory Interface (JNDI) included.\n\n\tJava 1.4\n\t\t- Release Date: February 6, 2002\n\t\t- Notable Features:\n\t\t\t- Assertion facility.\n\t\t\t- Exception chaining.\n\t\t\t- Non-blocking IO (NIO).\n\t\t\t- Logging API.\n\n\tJava 5 (1.5)\n\t\t- Release Date: September 30, 2004\n\t\t- Notable Features:\n\t\t\t- Generics.\n\t\t\t- Enhanced for loop.\n\t\t\t- Autoboxing/unboxing.\n\t\t\t- Enumerations.\n\t\t\t- Metadata annotations.\n\n\tJava 6 (1.6)\n\t\t- Release Date: December 11, 2006\n\t\t- Notable Features:\n\t\t\t- Scripting language support via JSR 223.\n\t\t\t- Pluggable annotations.\n\t\t\t- JAXB 2.0 and JAX-WS 2.0 API support.\n\t\t\t- Performance improvements.\n\n\tJava 7\n\t\t- Release Date: July 28, 2011\n\t\t- Notable Features:\n\t\t\t- Project Coin (small language enhancements).\n\t\t\t- NIO 2.0.\n\t\t\t- Fork/Join framework.\n\t\t\t- Timsort for Collections.sort.\n\n\tJava 8\n\t\t- Release Date: March 18, 2014\n\t\t- Notable Features:\n\t\t\t- Lambda expressions.\n\t\t\t- Stream API.\n\t\t\t- Default methods.\n\t\t\t- Optional class.\n\t\t\t- New Date and Time API (java.time).\n\n\tJava 9\n\t\t- Release Date: September 21, 2017\n\t\t- Notable Features:\n\t\t\t- Project Jigsaw (Module System).\n\t\t\t- JShell (REPL).\n\t\t\t- HTTP/2 client.\n\t\t\t- Factory methods for collections.\n\n\tJava 10\n\t\t- Release Date: March 20, 2018\n\t\t- Notable Features:\n\t\t\t- Local-Variable Type Inference (var).\n\t\t\t- Garbage-Collector interface.\n\t\t\t- Application Class-Data Sharing (AppCDS).\n\n\tJava 11\n\t\t- Release Date: September 25, 2018\n\t\t- Notable Features:\n\t\t\t- Long-Term Support (LTS) release.\n\t\t\t- New HTTP client.\n\t\t\t- Lambda parameter syntax for var.\n\t\t\t- Deprecated and removed APIs (like Java EE modules).\n\n\tJava 12\n\t\t- Release Date: March 19, 2019\n\t\t- Notable Features:\n\t\t\t- JVM Constants API.\n\t\t\t- Shenandoah and Z Garbage Collectors.\n\t\t\t- Switch expressions (preview).\n\n\tJava 13\n\t\t- Release Date: September 17, 2019\n\t\t- Notable Features:\n\t\t\t- Text Blocks (preview).\n\t\t\t- Dynamic CDS Archives.\n\t\t\t- Reimplemented the legacy socket API.\n\n\tJava 14\n\t\t- Release Date: March 17, 2020\n\t\t- Notable Features:\n\t\t\t- Records (preview).\n\t\t\t- Pattern matching for instanceof (preview).\n\t\t\t- Helpful NullPointerExceptions.\n\n\tJava 15\n\t\t- Release Date: September 15, 2020\n\t\t- Notable Features:\n\t\t\t- Sealed classes (preview).\n\t\t\t- Hidden classes.\n\t\t\t- Text Blocks.\n\n\tJava 16\n\t\t- Release Date: March 16, 2021\n\t\t- Notable Features:\n\t\t\t- Records.\n\t\t\t- Pattern Matching for instanceof.\n\t\t\t- Unix-domain socket channels.\n\n\tJava 17\n\t\t- Release Date: September 14, 2021\n\t\t- Notable Features:\n\t\t\t- Long-Term Support (LTS) release.\n\t\t\t- Sealed classes.\n\t\t\t- Foreign Function & Memory API (preview).\n\t\t\t- Deprecation of the Applet API.\n\n\tJava 18\n\t\t- Release Date: March 22, 2022\n\t\t- Notable Features:\n\t\t\t- Simple Web Server.\n\t\t\t- UTF-8 by default.\n\t\t\t- Code snippets in API documentation.\n\n\tJava 19\n\t\t- Release Date: September 20, 2022\n\t\t- Notable Features:\n\t\t\t- Virtual threads (preview).\n\t\t\t- Structured concurrency (preview).\n\t\t\t- Foreign Function & Memory API (second preview).\n\n\tJava 20\n\t\t- Release Date: March 21, 2023\n\t\t- Notable Features:\n\t\t\t- Scoped values (incubator).\n\t\t\t- Record patterns (second preview).\n\t\t\t- Pattern matching for switch (fourth preview).\n  \n\tJava SE 21 (LTS)\n\t\t- Release Date: September 19, 2023\n\t\t- Notable Features:\n\t\t\t- Record Patterns\n\t\t\t- Pattern Matching for Switch\n\t\t\t- Virtual Threads\n\t\t\t- String Templates (Preview)\n\t\t\t- Structured Concurrency (Preview)\n\t\t\t- Scoped Values (Preview)\n\n\tJava SE 22\n\t\t- Release Date: March 19, 2024\n\t\t- Notable Features:\n\t\t\t- Scoped Values\n\t\t\t- Stream Gatherers\n\t\t\t- Structured Concurrency\n\t\t\t- Statements Before Super\n\t\t\t- Class-File API\n\t\t\t- Region Pinning for the G1 Garbage Collector (G1 GC)\n\t\t\t- String Templates (Second Preview)\n\t\t\t- Unnamed Variables and Patterns","details":[],"references":[],"createdDate":{"$date":"2024-08-27T14:20:47.043Z"},"updatedDate":{"$date":"2024-08-27T16:31:27.11Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66cdfc461b8f0414e8df138d"},"uniqueId":"967f8e51-3d1f-44b0-b603-cab54d5c7f78","parentId":"","name":"the new features in Java 21","skeleton":"Certainly! Let's explore the new features in Java 21:\n\n\t1. Record Patterns (JEP 440):\n\t\tRecord patterns, which were previously introduced as preview features in Java 19 and 20, are now part of the official release.\n\t\t- They allow you to destructure record class instances, making it easier to work with complex data.\n\t\t- Nested patterns are also supported, enabling more composable data queries.\n\t\t- For example, you can nest records within records and deconstruct them.\n\n\t2. Pattern Matching for Switch (JEP 441):\n\t\tBuilding on the pattern matching feature introduced in JDK 17, Java 21 refines switch expressions.\n\t\t- You can now use patterns in switch case labels, improving the expressiveness of switch statements.\n\t\t- Additionally, handling `NullPointerException` is enhanced by allowing a null case label.\n\n\t3. Virtual Threads:\n\t\tJava 21 introduces virtual threads, which provide lightweight concurrency.\n\t\t- They allow you to create thousands of threads without consuming excessive memory.\n\t\t- Virtual threads are particularly useful for I/O-bound tasks and can simplify concurrent programming.\n\n\t4. String Templates (Preview):\n\t\tString templates allow more concise and readable string formatting.\n\t\t- They are part of the preview features in Java 21, making string manipulation easier and more expressive.\n\n\t5. Structured Concurrency (Preview):\n\t\tThis feature aims to simplify concurrent programming by providing a structured way to manage asynchronous tasks.\n\t\t- It allows you to work with tasks as first-class citizens, improving code organization and readability.\n\n\t6. Scoped Values (Preview):\n\t\tScoped values enable context-specific data propagation within a thread or virtual thread.\n\t\t- They enhance thread-local variables and provide a cleaner way to manage per-thread state.\n\n\tThese features enhance Java's capabilities and make coding more efficient and enjoyable. If you have any further questions or need additional details, feel free to ask!\n","details":[],"references":[],"createdDate":{"$date":"2024-08-27T16:18:14.302Z"},"updatedDate":{"$date":"2024-08-27T16:22:22.143Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66cdff9c1b8f0414e8df14db"},"uniqueId":"9a36bea8-1517-4214-9a97-86df9ffb6adb","parentId":"","name":"the new features introduced in Java 22","skeleton":"Certainly! Let's delve into the new features introduced in Java 22:\n\n\t1. Scoped Values:\n\t\tThese provide a fresh approach to managing shared data within a thread or across child threads.\n\t\t- Key advantages include immutability (preventing accidental modification) and automatic lifecycle management (cleaning up when out of scope).\n\t\t- This simplifies memory management and reduces the risk of memory leaks associated with traditional thread-local variables.\n\n\t2. Stream Gatherers:\n\t\tStream gatherers enhance stream processing capabilities.\n\t\t- They allow you to collect and summarize data from streams more efficiently.\n\n\t3. Structured Concurrency:\n\t\tThis feature simplifies concurrent programming by offering an intuitive way to manage concurrent tasks.\n\t\t- It improves code organization and readability, making it easier to work with asynchronous operations.\n\n\t4. Statements Before Super:\n\t\tJava 22 allows statements before the `super` constructor call, enhancing flexibility in constructor bodies.\n\n\t5. Class-File API:\n\t\tThe Class-File API provides programmatic access to class files, enabling advanced manipulation and analysis of bytecode.\n\n\t6. Region Pinning for the G1 Garbage Collector (G1 GC):\n\t\tThis optimization improves memory management in the G1 garbage collector, resulting in faster applications.\n\n\t7. String Templates (Second Preview):\n\t\tString templates simplify string formatting, enhancing readability and expressiveness.\n\n\t8. Unnamed Variables and Patterns:\n\t\tThese contribute to cleaner and more maintainable code by allowing concise variable declarations and pattern matching.\n\n\tThese features empower Java developers, making development more efficient and enjoyable. If you have any further questions or need additional details, feel free to ask!\n","details":[],"references":[],"createdDate":{"$date":"2024-08-27T16:32:28.194Z"},"updatedDate":{"$date":"2024-08-27T16:32:54.662Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66ceebbc5a9d3155d9682e92"},"uniqueId":"d7ef69cf-29ad-4a04-a0e4-0afd97151b7f","parentId":"","name":"The String class in Java is immutable for several key reasons","skeleton":"The String class in Java is immutable for several key reasons\n\tsummarized answer\n\t\tString class in Java is immutable, to ensure security, efficiency, and consistency across applications\n\tDetailed Answer\n\t\tThe String class in Java is immutable for several key reasons:\n\n\t\t\tSecurity: \n\t\t\t\tStrings are widely used for storing sensitive data such as usernames, passwords, and URLs. By making the String class immutable, Java ensures that once a String object is created, it cannot be altered, thus preventing malicious code from modifying these values.\n\n\t\t\tCaching and Performance: \n\t\t\t\tSince String objects are immutable, they can be safely shared across multiple threads without synchronization. Java implements a string pool, where identical strings are stored only once. When you create a new String with the same value as an existing one, Java reuses the existing object rather than creating a new one, which saves memory and improves performance.\n\n\t\t\tThread Safety: \n\t\t\t\tImmutability inherently makes the String class thread-safe, as concurrent threads cannot modify its state. This eliminates the need for external synchronization when using strings in multi-threaded applications.\n\n\t\t\tClass Loading and Security: \n\t\t\t\tStrings are used as parameters in many Java class loaders. If String were mutable, an attacker could potentially modify the class name between the time it's passed to the class loader and when it’s actually loaded, leading to security risks.\n\n\t\t\tConsistency in Hashing: \n\t\t\t\tThe immutability of strings ensures that the hash code of a String object is constant once it’s created. This is crucial for using strings as keys in hash-based collections like HashMap and HashSet, where a change in the hash code would break the collection's contract and lead to unpredictable behavior.\n\n\t\t\tEase of Use: \n\t\t\t\tImmutability simplifies programming by eliminating concerns about the state changes of string objects, making it easier to reason about code that uses strings.","details":[],"references":[],"createdDate":{"$date":"2024-08-28T09:19:56.767Z"},"updatedDate":{"$date":"2024-08-28T09:27:38.855Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66d003aea272225ce484248f"},"uniqueId":"464788ac-6a0e-4f0f-aae2-0bc84a83a4cb","parentId":"","name":"interview preparation sequence: 22 Feb 2024","skeleton":"interview preparation sequence\n    Step 1\n        Core Java\n        Java 8\n        Spring Framework\n        Spring Boot\n    Step 1.1\n        Design Patterns\n        SOLID Principles\n        Object-Oriented Programming (OOP)\n    Step 1.2\n        Multithreading and Concurrency\n        Java Memory Management\n        JVM Internals\n    Step 2\n        Microservices\n        Docker\n        Kubernetes\n        CI/CD Pipelines\n        API Gateway and Service Mesh\n    Step 3\n        REST\n        GraphQL\n        WebSocket\n        gRPC\n    Step 4\n        MySQL\n        MongoDB\n        Redis\n        Database Design and Optimization\n    Step 5\n        React JS\n        Servlet/JSP\n        Angular or Vue.js (optional)\n        Thymeleaf (optional)\n    Step 6\n        Testing\n            Unit Testing (JUnit, Mockito)\n            Integration Testing\n            Test-Driven Development (TDD)\n        Security\n            Spring Security\n            OAuth2/JWT\n        Logging and Monitoring\n            ELK Stack (Elasticsearch, Logstash, Kibana)\n            Prometheus & Grafana\n    Step 7\n        Cloud\n            AWS\n            Azure (optional)\n            Google Cloud Platform (GCP) (optional)\n        DevOps Practices\n            Infrastructure as Code (Terraform, Ansible)\n            Version Control (Git)\n            Container Orchestration (Kubernetes)\n    Step 8\n        System Design\n        Scalability\n        Load Balancing\n        Caching Strategies\n    Step 9\n        Behavioral Interview Preparation\n            Problem-Solving Skills\n            Communication Skills\n            Leadership and Team Collaboration\n","details":[],"references":[],"createdDate":{"$date":"2024-08-29T05:14:22.734Z"},"updatedDate":{"$date":"2024-08-29T05:23:03.783Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66d00e01a272225ce4842830"},"uniqueId":"d777b8a7-7a67-417a-86e7-6c2c786ae334","parentId":"","name":"Spring, Spring Boot and its subprojects: Interview Preparation","skeleton":"Spring, Spring Boot and its subprojects\n    Key Terminology\n        Dependency Injection (DI)\n        Inversion of Control (IoC)\n        Aspect-Oriented Programming (AOP)\n        Bean Lifecycle\n        ApplicationContext vs BeanFactory\n        Spring Boot Starters\n        Auto-Configuration\n        Spring Boot Actuator\n    Annotations\n        @Component, @Service, @Repository\n        @Autowired, @Qualifier\n        @Configuration, @Bean\n        @Controller, @RestController\n        @RequestMapping, @GetMapping, @PostMapping\n        @PathVariable, @RequestParam\n        @SpringBootApplication\n        @EnableAutoConfiguration\n        @Entity, @Table, @Id\n        @Transactional\n        @Aspect, @Before, @After, @Around\n    Programs and Configurations\n        Spring Boot Application Setup\n            Creating a Spring Boot project (Spring Initializr)\n            Main application class with @SpringBootApplication\n        Dependency Injection examples\n            Constructor Injection vs Setter Injection\n            Field Injection (not recommended)\n        Spring Bean Configuration\n            Java-based Configuration (@Configuration)\n            XML-based Configuration (older style)\n        RESTful Web Services\n            Creating REST controllers\n            CRUD operations with @Repository and @Service\n        Spring Data JPA\n            Configuring data sources\n            Using Spring Data Repositories\n            Custom Queries with @Query\n        Spring Security\n            Basic Authentication setup\n            Role-Based Access Control (RBAC)\n            JWT Integration\n        Spring AOP\n            Logging and performance monitoring with AOP\n            Custom annotations for cross-cutting concerns\n        Spring Boot Actuator\n            Enabling Actuator endpoints\n            Custom health indicators\n        Externalized Configuration\n            Using application.properties and application.yml\n            Profile-specific properties\n    Use Cases\n        Microservices Architecture\n            Building microservices with Spring Boot\n            Service discovery with Spring Cloud Netflix Eureka\n            Circuit Breaker pattern with Spring Cloud Netflix Hystrix\n        Web Applications\n            Building MVC applications with Spring\n            Thymeleaf integration\n            Form validation and data binding\n        Enterprise Applications\n            Using Spring Batch for batch processing\n            Spring Integration for enterprise integration patterns\n        Data Access Layer\n            Transaction management with Spring\n            Pagination and Sorting with Spring Data JPA\n        Security Applications\n            Implementing OAuth2 with Spring Security\n            Securing APIs with Spring Security and JWT\n        Cloud-Native Applications\n            Deploying Spring Boot applications on AWS/GCP/Azure\n            Using Spring Cloud for cloud-native patterns (Config Server, Service Registry, etc.)\n        Messaging and Event-Driven Architectures\n            Messaging with Spring AMQP (RabbitMQ)\n            Event-driven microservices with Spring Cloud Stream\n","details":[],"references":[],"createdDate":{"$date":"2024-08-29T05:58:25.913Z"},"updatedDate":{"$date":"2024-08-29T05:59:22.538Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66d02c3ba272225ce484439b"},"uniqueId":"5f801e65-fe30-451d-86db-031d3f5477f7","parentId":"","name":"Design Patterns","skeleton":"Design Patterns\n\tDefinition\n\t\tDesign patterns are established solutions to common software design challenges.\n\t\tIn object-oriented programming (OOP), **they primarily address issues related to object creation and interaction.**\n\t\tDesign patterns offer generalized, reusable solutions in the form of templates that can be applied to real-world problems.\n\t\tThese patterns capture best practices and provide a shared language for developers to discuss and implement efficient and effective solutions.\n\t\t- By abstracting common challenges, design patterns help avoid reinventing the wheel, simplifying complex software development tasks.\n\tTypes of Design Patterns : Design patterns are broadly categorized into three types:\n\t\t1. Creational Patterns:\n\t\t\t- Focus: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.\n\t\t\t- Examples:\n\t\t\t\t- Singleton:\n\t\t\t\t\tEnsures that a class has only one instance and provides a global point of access to that instance.\n\t\t\t\t- Factory Method:\n\t\t\t\t\tDefines an interface for creating an object, but lets subclasses alter the type of objects that will be created.\n\t\t\t\t- Abstract Factory:\n\t\t\t\t\tThe Abstract Factory pattern is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes.\n\t\t\t\t- Builder:\n\t\t\t\t\tConstructs complex objects step by step, allowing for greater control over the construction process.\n\t\t\t\t- Prototype:\n\t\t\t\t\tCreates new objects by copying an existing object, known as the prototype.\n\t\t2. Structural Patterns:\n\t\t\t- Focus: Concerned with object composition or the way objects are structured and related to each other.\n\t\t\t- Examples:\n\t\t\t\t- Adapter:\n\t\t\t\t\tAllows incompatible interfaces to work together by acting as a bridge between them.\n\t\t\t\t- Bridge:\n\t\t\t\t\tThe Bridge pattern is a structural design pattern that decouples an abstraction from its implementation, allowing both to vary independently.\n\t\t\t\t- Composite:\n\t\t\t\t\tComposes objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions of objects uniformly.\n\t\t\t\t- Decorator:\n\t\t\t\t\tAdds behavior to an object dynamically without affecting the behavior of other objects from the same class.\n\t\t\t\t- Facade:\n\t\t\t\t\tProvides a simplified interface to a complex subsystem, making it easier to use.\n\t\t\t\t- Flyweight\n\t\t\t\t\tThe Flyweight pattern is a structural design pattern that minimizes memory usage by sharing as much data as possible with similar objects, typically using a pool of reusable objects.\n\t\t\t\t- Proxy\n\t\t\t\t\tThe Proxy pattern is a structural design pattern that provides a surrogate or placeholder for another object to control access to it.\n\t\t3. Behavioral Patterns:\n\t\t\t- Focus: Deal with algorithms and the assignment of responsibilities between objects. They help in defining how objects interact and communicate.\n\t\t\t- Examples:\n\t\t\t\t- Chain of Responsibility:\n\t\t\t\t\tThe Chain of Responsibility pattern is a behavioral design pattern that passes a request along a chain of handlers, where each handler decides either to process the request or to pass it to the next handler in the chain.\n\t\t\t\t- Command:\n\t\t\t\t\tEncapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n\t\t\t\t- Interpreter\n\t\t\t\t\tThe Interpreter pattern is a behavioral design pattern that defines a grammar for a language and provides an interpreter to evaluate sentences in that language, enabling interpretation of expressions within a defined context.\n\t\t\t\t- Iterator:\n\t\t\t\t\tProvides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\n\t\t\t\t- Mediator\n\t\t\t\t\tThe Mediator pattern is a behavioral design pattern that centralizes communication between objects by having them communicate through a mediator object, reducing direct dependencies and promoting loose coupling.\n\t\t\t\t- Memento\n\t\t\t\t\tThe Memento pattern is a behavioral design pattern that allows an object to save and restore its previous state without exposing its internal structure, enabling undo and rollback functionalities.\n\t\t\t\t- Observer:\n\t\t\t\t\tDefines a dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n\t\t\t\t- State\n\t\t\t\t\tThe State pattern is a behavioral design pattern that allows an object to change its behavior when its internal state changes, making the object appear as if it changes its class at runtime.\n\t\t\t\t- Strategy:\n\t\t\t\t\tDefines a family of algorithms, encapsulates each one, and makes them interchangeable.\n\t\t\t\t- Template Method\n\t\t\t\t\tThe Template Method pattern is a behavioral design pattern that defines the skeleton of an algorithm in a method, allowing subclasses to override specific steps of the algorithm without changing its overall structure.\n\t\t\t\t- Visitor\n\t\t\t\t\tThe Visitor pattern is a behavioral design pattern that allows you to add new operations to existing object structures without modifying the objects themselves. It involves defining a new operation in a visitor class and applying it to a set of objects, thereby separating the algorithm from the object structure.\n\tBenefits of Design Patterns\n\t\tReusability:\n\t\t\t- Design patterns promote code reuse by providing proven, battle-tested solutions to common problems. This leads to more robust and maintainable code.\n\t\tImproved Communication:\n\t\t\t- They provide a common language among developers, making it easier to communicate ideas and collaborate on solutions.\n\t\tEfficiency:\n\t\t\t- By using design patterns, developers can solve problems more quickly, avoiding the pitfalls of ad-hoc solutions.\n\t\tFlexibility:\n\t\t\t- Design patterns often provide solutions that are more adaptable to change, making the codebase easier to modify and extend over time.\n\t\tBest Practices:\n\t\t\t- They encapsulate best practices in software design, helping developers to follow principles such as DRY (Don't Repeat Yourself) and SOLID principles.\n\tCommon Misconceptions and Pitfalls\n\t\t- Overuse:\n\t\t\t- While design patterns are powerful tools, they should not be overused. Applying a pattern where it is not needed can overcomplicate a solution, making the code harder to understand and maintain.\n\t\t- Rigid Application:\n\t\t\t- Design patterns should be seen as guidelines rather than strict rules. Developers should adapt patterns to fit the specific needs of the problem they are solving.\n\t\t- Premature Optimization:\n\t\t\t- Introducing a design pattern too early, before the problem it solves actually arises, can lead to unnecessary complexity. It’s important to assess the problem thoroughly before deciding on the appropriate pattern.\n\t\t- Learning Curve:\n\t\t\t- Understanding design patterns requires a good grasp of object-oriented principles and experience with complex software systems. While the benefits are significant, there can be a steep learning curve for newcomers.\n\tConclusion\n\t\t- Design patterns are a critical aspect of modern software development.\n\t\t- They encapsulate years of experience and best practices into reusable templates that solve common design problems.\n\t\t- The true value of design patterns lies in understanding the principles behind them, enabling developers to apply them judiciously.\n\t\t- Applying design patterns helps in building scalable, maintainable, and flexible software systems.\n\t\t- By balancing the use of design patterns with simplicity and clarity, developers can create solutions that are both elegant and effective.\nGang of Four Design Patterns\n\tCreational Patterns\n\t\tDefinition\n\t\t\tCreational patterns provide ways to instantiate single objects or groups of related objects.\n\t\tTypes\n\t\t\tSingleton\n\t\t\tFactory Method\n\t\t\tAbstract Factory\n\t\t\tBuilder\n\t\t\tPrototype\n\tStructural Patterns\n\t\tDefinition\n\t\t\tStructural patterns provide a manner to define relationships between classes or objects.\n\t\tTypes\n\t\t\tAdapter\n\t\t\tBridge\n\t\t\tComposite\n\t\t\tDecorator\n\t\t\tFacade\n\t\t\tFlyweight\n\t\t\tProxy\n\tBehavioural Patterns\n\t\tDefinition\n\t\t\tBehavioural patterns define manners of communication between classes and objects.\n\t\tTypes\n\t\t\tChain of Responsibility\n\t\t\tCommand\n\t\t\tInterpreter\n\t\t\tIterator\n\t\t\tMediator\n\t\t\tMemento\n\t\t\tObserver\n\t\t\tState\n\t\t\tStrategy\n\t\t\tTemplate Method\n\t\t\tVisitor\nDesign Patterns Used in Various Frameworks\n\tStruts Framework:\n\t\t- Model-View-Controller (MVC): Struts is based on the MVC architecture.\n\t\t- Command Pattern: Used by Struts controller.\n\t\t- Adapter Pattern: Used by action classes.\n\t\t- Template Method Pattern: Utilized by the `process()` method of the `RequestProcessor`.\n\t\t- Service to Worker, Dispatcher View, Composite View (Struts Tiles), Front Controller, View Helper, Synchronizer Token: J2EE design patterns implemented in Struts.\n\tStruts 2:\n\t\t- Inversion of Control (IoC): Also known as dependency injection.\n\t\t- Front Controller: Continues to follow the Front Controller pattern.\n\t\t- Command Pattern: Used by Action classes.\n\t\t- Context Object: Form Beans act like Context Objects.\n\t\t- Factory Pattern: Used for loading beans via `BeanFactory` and `ApplicationContext`.\n\tSpring Framework:\n\t\t- Inversion of Control (IoC): Central to the framework.\n\t\t- Model-View-Controller (MVC): Controllers are POJOs, easier for testing.\n\t\t- Front Controller: Uses `DispatcherServlet`.\n\t\t- View Helper: Custom JSP tags and velocity macros.\n\t\t- Proxy Pattern: Used extensively in AOP and remoting.\n\t\t- Singleton Pattern: Default scope of beans defined in Spring config files.\n\t\t- Template Method Pattern: Used by classes like `JdbcTemplate`, `JmsTemplate`, `JpaTemplate`.\n\tCommon Java Design Patterns:\n\t\t- Strategy or Visitor: Used for algorithms.\n\t\t- Command: Used for actions.\n\t\t- Bridge: Used in implementations.\n\t\t- Observer: Used for request and response handling.\n\t\t- Factory, Abstract Factory, Prototype: Used for object creation.\n\t\t- Builder: Used for structuring.\n\t\t- Iterator: Used for traversal algorithms.\n\t\t- Adapter: Used for object interfaces.\n\t\t- Decorator, State: Used for object behavior.\n\tJSF Framework:\n\t\t- Singleton: FacesServlet, Application, and LifeCycle instances.\n\t\t- Model-View-Controller (MVC): FacesServlet acts as the controller.\n\t\t- Factory Method: Used to create objects like `LifeCycleFactory`.\n\t\t- State: LifeCycle phases.\n\t\t- Composite: UI components.\n\t\t- Decorator: Extends behavior of objects dynamically.\n\t\t- Strategy: Used for rendering UI components.\n\t\t- Template Method: Provided by PhaseListeners.\n\t\t- Observer: ActionEvent and ValueChangedEvent.\n\tJava API Design Patterns:\n\t\t- MVC: Extensively used in Swing API.\n\t\t- Factory Method: `getInstance()` method in `java.util.Calendar`.\n\t\t- Singleton: `java.lang.System`, `java.sql.DriverManager`.\n\t\t- Prototype: `clone()` method and `java.lang.Cloneable` interface.\n\t\t- Command: Supported by `Action` interface and `AbstractAction` class in Swing.\n\t\t- Observer: Event model in Java 1.1, `java.util.Observable` and `java.util.Observer`.\n\t\t- Adapter: Used by adapter classes in `java.awt.event`.\n\t\t- Proxy: Implemented in Java's RMI and IDL features.\n\t\t- Composite: `Component` and `Container` classes in `java.awt`.\n\t\t- Bridge: Separation of components in `java.awt` and their counterparts in `java.awt.peer`.\n\tEnterprise JavaBeans (EJB) Model Patterns:\n\t\t- Factory Method: Used in EJB creation model.\n\t\t- Singleton: Example is `javax.naming.NamingManager`.\n\t\t- Abstract Factory: `InitialContext`, `InitialContextFactory`.\n\t\t- Builder: `InitialContextFactoryBuilder`.\n\t\t- Adapter: Implementation of EJBs that adapt to EJBObject interface.\nCommon Microservices Architecture design patterns:\n\tOverview\n\t\tThese patterns help address the challenges associated with building and maintaining microservices architectures.\n\tTypes\n\t\t1. Decomposition Patterns\n\t\t\t- Decompose by Business Capability\n\t\t\t- Decompose by Subdomain\n\t\t2. Data Management Patterns\n\t\t\t- Database per Service\n\t\t\t- Shared Database\n\t\t\t- Saga\n\t\t\t- CQRS (Command Query Responsibility Segregation)\n\t\t\t- Event Sourcing\n\t\t3. Communication Patterns\n\t\t\t- API Gateway\n\t\t\t- Backend for Frontend (BFF)\n\t\t\t- Circuit Breaker\n\t\t\t- Service Mesh\n\t\t\t- Service Registry\n\t\t4. Deployment Patterns\n\t\t\t- Service Instance per Container\n\t\t\t- Service Instance per Host\n\t\t\t- Service Instance per VM\n\t\t\t- Sidecar\n\t\t\t- Ambassador\n\t\t\t- Adapter\n\t\t5. Observability Patterns\n\t\t\t- Log Aggregation\n\t\t\t- Distributed Tracing\n\t\t\t- Application Metrics\n\t\t\t- Health Check API\n\t\t6. Security Patterns\n\t\t\t- Access Token\n\t\t\t- JWT (JSON Web Token)\n\t\t\t- Secure Token Service (STS)\n\t\t\t- API Gateway Offloading\n\t\t\t- Container Security\n\t\t7. Resilience Patterns\n\t\t\t- Retry\n\t\t\t- Timeout\n\t\t\t- Bulkhead\n\t\t\t- Fallback\n\t\t\t- Rate Limiting\n\t\t8. Transaction Management Patterns\n\t\t\t- Transactional Outbox\n\t\t\t- Process Manager\n\t\t\t- Compensating Transaction\n\t\t9. Service Discovery Patterns\n\t\t\t- Client-Side Discovery\n\t\t\t- Server-Side Discovery\n\t\t10. API Patterns\n\t\t\t- API Versioning\n\t\t\t- Consumer-Driven Contracts\nCommon JEE (Java Enterprise Edition) or J2EE (Java 2 Platform, Enterprise Edition) design patterns:\n\t1. Creational Patterns\n\t\t- Singleton\n\t\t- Factory Method\n\t\t- Abstract Factory\n\t\t- Builder\n\t\t- Prototype\n\t2. Structural Patterns\n\t\t- Adapter\n\t\t- Decorator\n\t\t- Composite\n\t\t- Proxy\n\t\t- Flyweight\n\t\t- Facade\n\t\t- Bridge\n\t3. Behavioral Patterns\n\t\t- Template Method\n\t\t- Mediator\n\t\t- Observer\n\t\t- Chain of Responsibility\n\t\t- Command\n\t\t- Strategy\n\t\t- State\n\t\t- Visitor\n\t\t- Interpreter\n\t\t- Iterator\n\t\t- Memento\n\t4. Concurrency Patterns\n\t\t- Thread Pool\n\t\t- Work Stealing\n\t\t- Balking\n\t\t- Guarded Suspension\n\t\t- Thread-Safe Singleton\n\t\t- Read-Write Lock\n\t\t- Scheduler\n\t5. JEE Patterns\n\t\t- Data Access Object (DAO)\n\t\t- Service Locator\n\t\t- Business Delegate\n\t\t- Model-View-Controller (MVC)\n\t\t- Transfer Object\n\t\t- Session Facade\n\t\t- Intercepting Filter\n\t\t- Front Controller\n\t\t- Composite Entity\n\t\t- Value Object\n\t\t- Application Service\n\t\t- Business Object\n\t\t- Web Service Broker\nCommon design pattern used in a spring boot microservice project\n\tOverview\n\t\tIn a Spring Boot microservice project, several design patterns are commonly used to promote modularity, maintainability, and scalability.\n\tsome of the most prevalent design patterns\n\t\t1. Singleton Pattern\n\t\t\t**Purpose:** Ensures that a class has only one instance and provides a global point of access to it.\n\t\t\t**Usage:** Often used in Spring beans where a single instance of a bean is shared across the application context, typically for service or repository classes.\n\t\t2. Factory Pattern\n\t\t\t- Purpose: Creates objects without specifying the exact class of object that will be created.\n\t\t\t- Usage: Used in Spring to create beans dynamically, especially when the exact type of the bean needs to be determined at runtime.\n\t\t3. Proxy Pattern\n\t\t\t- Purpose: Provides a surrogate or placeholder for another object to control access to it.\n\t\t\t- Usage: Used in AOP (Aspect-Oriented Programming) for cross-cutting concerns like logging, transaction management, and security. Spring AOP often uses proxies to implement method interceptors.\n\t\t4. Builder Pattern\n\t\t\t- Purpose: Provides a way to construct complex objects step by step.\n\t\t\t- Usage: Often used to construct immutable objects, such as DTOs (Data Transfer Objects), by chaining method calls.\n\t\t5. Decorator Pattern\n\t\t\t- Purpose: Adds behavior to individual objects dynamically without affecting the behavior of other objects from the same class.\n\t\t\t- Usage: Used in scenarios like adding additional responsibilities to classes, such as adding caching or logging behavior.\n\t\t6. Strategy Pattern\n\t\t\t- Purpose: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.\n\t\t\t- Usage: Commonly used in service layer implementations where different strategies can be applied depending on the context, such as different payment methods in an e-commerce application.\n\t\t7. Template Method Pattern\n\t\t\t- Purpose: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n\t\t\t- Usage: Often used in Spring for defining operations in a superclass and allowing subclasses to override specific steps of the algorithm, such as implementing different transaction management or error handling strategies.\n\t\t8. Observer Pattern\n\t\t\t- Purpose: Allows an object to notify other objects about changes in its state.\n\t\t\t- Usage: Can be implemented using Spring’s event mechanism, where events are published and subscribers (observers) act upon them.\n\t\t9. Repository Pattern\n\t\t\t- Purpose: Encapsulates the logic needed to access data sources, providing an abstraction over the data layer.\n\t\t\t- Usage: Commonly used in Spring Data to simplify data access and manipulation, making it easier to switch between different data sources or persistence frameworks.\n\t\t10. Circuit Breaker Pattern\n\t\t\t- Purpose: Prevents an application from performing an operation that is likely to fail, by \"breaking\" the circuit.\n\t\t\t- Usage: Typically implemented using libraries like Netflix Hystrix or Resilience4j, often integrated with Spring Cloud. It is used to handle service failures gracefully in a microservices architecture.\n\t\t11. Chain of Responsibility Pattern\n\t\t\t- Purpose: Passes a request along a chain of handlers. Each handler either processes the request or passes it to the next handler in the chain.\n\t\t\t- Usage: Useful in scenarios such as request filtering, logging, and authentication chains. In Spring, it can be implemented using Filter or Interceptor chains in the web layer.\n\t\t12. Command Pattern\n\t\t\t- Purpose: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n\t\t\t- Usage: Commonly used to implement undo/redo operations, or to queue commands for execution. In Spring, it can be used in conjunction with messaging systems or job scheduling.\n\t\t13. Adapter Pattern\n\t\t\t- Purpose: Allows incompatible interfaces to work together by wrapping an existing class with a new interface.\n\t\t\t- Usage: Often used to integrate with legacy systems or third-party services. For example, adapting a legacy API to fit the application's current service layer.\n\t\t14. Observer Pattern\n\t\t\t- Purpose: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.\n\t\t\t- Usage: Implemented using Spring's event-publishing mechanism, where events are published by the source and handled by multiple listeners. Useful for decoupling components that need to react to certain events.\n\t\t15. Facade Pattern\n\t\t\t- Purpose: Provides a simplified interface to a complex subsystem.\n\t\t\t- Usage: In microservices, it can be used to provide a unified interface to multiple underlying services. For instance, an API Gateway can act as a facade for multiple microservices, handling requests, and aggregating responses.\n\t\t16. Composite Pattern\n\t\t\t- Purpose: Composes objects into tree structures to represent part-whole hierarchies.\n\t\t\t- Usage: Useful in scenarios where you want to treat individual objects and compositions of objects uniformly. For example, representing a menu system where each menu can contain submenus or menu items.\n\t\t17. State Pattern\n\t\t\t- Purpose: Allows an object to alter its behavior when its internal state changes.\n\t\t\t- Usage: Useful for implementing state machines, such as in an order processing system where an order can be in different states like \"Created,\" \"Paid,\" \"Shipped,\" etc., and each state has different behavior.\n\t\t18. Visitor Pattern\n\t\t\t- Purpose: Separates algorithms from the objects on which they operate.\n\t\t\t- Usage: Useful in scenarios where you need to perform operations across a collection of objects of different types. For example, implementing various reporting operations over a set of entities.\n\t\t19. Mediator Pattern\n\t\t\t- Purpose: Reduces the complexity of communication between multiple objects or classes.\n\t\t\t- Usage: Useful in microservices architectures to manage complex interactions. For instance, a mediator service can orchestrate the workflow between different microservices.\n\t\t20. Builder Pattern\n\t\t\t- Purpose: Provides a way to construct a complex object step by step.\n\t\t\t- Usage: Often used to construct immutable objects, such as DTOs (Data Transfer Objects), by chaining method calls.\n\t\t21. Interpreter Pattern\n\t\t\t- Purpose: Defines a grammatical representation for a language and provides an interpreter to deal with this grammar.\n\t\t\t- Usage: Useful in scenarios such as parsing expressions, command languages, or rules engines. It can be employed in implementing domain-specific languages (DSLs) within the application.\n\t\t22. Flyweight Pattern\n\t\t\t- Purpose: Reduces the cost of creating and manipulating a large number of similar objects by sharing common data.\n\t\t\t- Usage: Commonly used in scenarios where a large number of objects can be shared, such as caching frequently accessed data or managing connection pools.\n\t\t23. Data Mapper Pattern\n\t\t\t- Purpose: Maps data between in-memory objects and a database, keeping them independent of each other.\n\t\t\t- Usage: Frequently implemented in the data access layer of applications using ORM frameworks like Hibernate or JPA. This pattern helps separate business logic from database interactions.\n\t\t24. Dependency Injection (DI) Pattern\n\t\t\t- Purpose: Allows a class to receive its dependencies from an external source rather than creating them itself.\n\t\t\t- Usage: A core concept in Spring Framework, enabling loose coupling and enhancing testability by allowing mock dependencies to be injected during testing.\n\t\t25. Command Query Responsibility Segregation (CQRS) Pattern\n\t\t\t- Purpose: Segregates the methods that read data from the methods that update data.\n\t\t\t- Usage: Useful in systems that require high scalability and maintainability. In microservices, CQRS can be used to optimize read and write operations separately, often alongside event sourcing.\n\t\t26. Event Sourcing Pattern\n\t\t\t- Purpose: Stores the state of a system as a sequence of events rather than a single snapshot.\n\t\t\t- Usage: Common in systems that need a complete audit trail or require the ability to reconstruct past states. Event sourcing can be integrated with CQRS to manage the write-side events and project them to a read model.\n\t\t27. Aggregator Pattern\n\t\t\t- Purpose: Aggregates data from multiple inputs into a single output.\n\t\t\t- Usage: Commonly used in microservices to gather data from various services and present a unified response. This pattern can be implemented in an API Gateway or an aggregator service.\n\t\t28. Service Locator Pattern\n\t\t\t- Purpose: Provides a central registry to obtain instances of services without exposing the logic of service creation.\n\t\t\t- Usage: Useful in scenarios where a global access point for service instances is needed. However, it should be used cautiously as it can introduce hidden dependencies and make testing harder.\n\t\t29. Specification Pattern\n\t\t\t- Purpose: Encapsulates business logic that is combinable and reusable.\n\t\t\t- Usage: Useful in implementing complex business rules that can be combined using logical operators. It can be integrated with the repository pattern to query data based on specifications.\n\t\t30. Saga Pattern\n\t\t\t- Purpose: Manages distributed transactions across multiple microservices by dividing a transaction into a series of smaller, independent actions.\n\t\t\t- Usage: Commonly used in microservices architectures to maintain data consistency across services without using distributed transactions. Sagas can be orchestrated or choreographed depending on the use case.\n\t\t31. Anti-Corruption Layer Pattern\n\t\t\t- Purpose: Provides a layer that isolates the internal system from external systems that might have a different model or language.\n\t\t\t- Usage: Useful in integrating legacy systems or third-party services, ensuring that changes in external systems do not affect the internal system.\n\t\t32. Gateway Pattern\n\t\t\t- Purpose: Acts as a single entry point for accessing different services or resources.\n\t\t\t- Usage: Often implemented as an API Gateway in microservices architectures, managing requests, authentication, routing, and sometimes aggregation.\n\t\t33. Event-Driven Pattern\n\t\t\t- Purpose: Uses events to trigger and communicate between decoupled services.\n\t\t\t- Usage: In microservices, this pattern is employed for asynchronous communication using message brokers like Kafka, RabbitMQ, or ActiveMQ. It helps in building highly scalable and responsive systems.\n\t\t34. Pipes and Filters Pattern\n\t\t\t- Purpose: Breaks down a complex processing task into a series of discrete, reusable stages (filters) that are connected by channels (pipes).\n\t\t\t- Usage: Useful in scenarios like data transformation, processing pipelines, or ETL processes. Each filter can be independently developed and tested.\n\tConclusion\n\t\tThese patterns help in building a well-structured and maintainable microservices architecture by promoting best practices and standard solutions to common problems.\n\t\tThese patterns can be combined and tailored to fit specific project needs, providing robust solutions to common challenges in microservice architectures.\n","details":[],"references":[],"createdDate":{"$date":"2024-08-29T08:07:23.185Z"},"updatedDate":{"$date":"2024-09-08T11:43:33.94Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66d088d6a272225ce485fed7"},"uniqueId":"c7fc18b3-cb98-4fc9-a26a-421608ff45be","parentId":"","name":"SOLID Principles in Object-Oriented Design","skeleton":"SOLID Principles in Object-Oriented Design\n\n\t- Overview\n\t\t- The SOLID principles are fundamental guidelines for object-oriented design.\n\t\t- Applying these principles can lead to more maintainable, extensible, and robust software.\n\t\t- The SOLID principle helps in reducing tight coupling.\n\t\t\t- Tight coupling means a group of classes are highly dependent on one another which you should avoid in your code.\n\t\t- The SOLID principle was introduced by Robert C. Martin, also known as Uncle Bob and it is a coding standard in programming.\n\n\tBuilding blocks (Each letter of acronym)\n\t\t- 1. Single Responsibility Principle (SRP)\n\t\t\t- A class should have only one reason to change, meaning it should have a single job or responsibility.\n\t\t\t- Example: Instead of having a single class that handles both user data storage and user data validation, separate these concerns into distinct classes.\n\n\t\t- 2. Open-Closed Principle (OCP)\n\t\t\t- Software entities (classes, modules, functions) should be open for extension but closed for modification.\n\t\t\t- Example: Use abstract classes or interfaces to allow for new functionality to be added via derived classes or implementations without altering existing code.\n\n\t\t- 3. Liskov Substitution Principle (LSP)\n\t\t\t- Subtypes (derived classes) must be substitutable for their base types (parent classes) without affecting the correctness of the program.\n\t\t\t- Example: If a class `Bird` has a method `fly()`, a derived class `Penguin` should not override `fly()` in a way that breaks the expected behavior for `Bird`.\n\n\t\t- 4. Interface Segregation Principle (ISP)\n\t\t\t- Clients should not be forced to depend on interfaces they do not use.\n\t\t\t- Example: Instead of a single large interface `IMachine` with methods `print()`, `scan()`, and `fax()`, create smaller, more specific interfaces like `IPrinter`, `IScanner`, and `IFax` to avoid forcing clients to implement unused methods.\n\n\t\t- 5. Dependency Inversion Principle (DIP)\n\t\t\t- High-level modules should not depend on low-level modules; both should depend on abstractions.\n\t\t\t- Example: Instead of a high-level module directly using a low-level module, introduce an interface (abstraction) that both modules depend on. This way, changes in low-level modules do not affect high-level modules, and vice versa.\n\n\tAdditional Insights\n\n\t\t- Principle Application\n\t\t\t- Maintainability: Following SOLID principles helps in creating code that is easier to maintain and extend over time.\n\t\t\t- Testability: Adhering to these principles often leads to code that is easier to test due to better separation of concerns and reduced coupling.\n\t\t\t- Flexibility: SOLID principles promote flexible design, allowing for easier updates and changes to the system as requirements evolve.\n\n\t\t- Best Practices\n\t\t\t- Refactoring: Regularly refactor code to adhere to SOLID principles, especially when adding new features or making changes.\n\t\t\t- Design Patterns: Utilize design patterns (e.g., Factory, Strategy, Observer) that align with SOLID principles to solve common design problems effectively.\n\n\tFinal note\n\t\tBy incorporating these principles into your design practices, you can achieve a more organized, adaptable, and high-quality software system.","details":[],"references":[],"createdDate":{"$date":"2024-08-29T14:42:30.256Z"},"updatedDate":{"$date":"2024-08-29T16:42:16.138Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66d944d261ec30d61c097859"},"uniqueId":"f759f4a8-95d5-41fa-a36a-48de0b5c7126","parentId":"","name":"Some third-party libraries commonly used with Java","skeleton":"Some third-party libraries commonly used with Java:\n\n\tSpring Framework: \n\t\tAn extensive framework for building Java applications, providing support for dependency injection, aspect-oriented programming, data access, transaction management, and more.\n\t\n\tHibernate: \n\t\tAn object-relational mapping (ORM) framework for Java, providing a mapping between Java objects and database tables, and facilitating database access and manipulation.\n\t\n\tLombok: \n\t\tA library that reduces boilerplate code in Java classes by automatically generating getters, setters, constructors, and other common methods at compile time.\n\t\n\tJackson: \n\t\tA fast and feature-rich JSON processor for Java, providing JSON parsing, generation, and data binding capabilities.\n\t\n\tSlf4j (Simple Logging Facade for Java): \n\t\tA simple facade or abstraction for various logging frameworks (e.g., Log4j, Logback), allowing for flexible logging configurations.\n\t\n\tJUnit: \n\t\tA popular testing framework for Java, providing annotations, assertions, and test runners for writing and running unit tests.\n\t\n\tMockito: \n\t\tA mocking framework for Java, allowing for the creation of mock objects and verification of interactions between objects in unit tests.\t\n\n\t\n\tApache HttpClient: \n\t\tA powerful HTTP client library for Java, providing support for HTTP/1.1 and HTTP/2 protocols, as well as handling authentication, cookies, and connection pooling.\n\t\n\tGson: \n\t\tAnother Java library for JSON serialization and deserialization, developed by Google, offering simple APIs for converting Java objects to and from JSON.\n\t\n\tApache POI: \n\t\tA library for working with Microsoft Office documents (Excel, Word, PowerPoint) in Java, allowing for reading, writing, and manipulating these documents programmatically.\n\t\n\tJoda-Time: \n\t\tA library for date and time manipulation in Java, providing a more intuitive and powerful API compared to the standard java.util.Date and java.util.Calendar classes.\n\t\n\tApache Commons Lang: \n\t\tA library that provides utilities for common operations on basic types, such as string manipulation, object reflection, array handling, and more.\n\t\n\tJDBC (Java Database Connectivity): \n\t\tAlthough part of the Java standard library, JDBC drivers from third-party vendors (e.g., MySQL Connector/J, Oracle JDBC Driver) are commonly used to connect Java applications to databases.\n\t\n\tEhcache: \n\t\tA widely used caching library for Java, providing in-memory caching capabilities with support for distributed caching, caching strategies, and expiration policies.\n\t\n\tApache Camel: \n\t\tA versatile integration framework for Java, facilitating the integration of different systems, protocols, and data formats through a variety of enterprise integration patterns (EIPs).\n\t\n\tApache Lucene: \n\t\tA high-performance, full-featured text search engine library for Java, providing indexing, querying, and analysis capabilities for building search applications.\n\t\n\tLogback: \n\t\tA logging framework for Java, serving as a successor to Log4j, with features like pluggable loggers, appenders, and filters, and support for configuration through XML or Groovy files.\n\t\n\tApache Kafka Clients: \n\t\tA collection of client libraries for Java, providing support for building producers and consumers for Apache Kafka, a distributed streaming platform.\t\n\n\tApache Commons Codec: \n\t\tA library providing implementations of common encoders and decoders for various encoding schemes such as Base64, URL, and MIME.\n\t\n\tApache Commons IO: \n\t\tA library providing utilities for working with files, streams, and I/O operations, including file copying, directory manipulation, and file content reading/writing.\n\t\n\tApache Commons Collections: \n\t\tA library providing additional collection classes and utilities beyond those found in the Java standard library, including bags, multisets, and bidirectional maps.\n\t\n\tApache Commons Math: \n\t\tA library providing mathematical algorithms and utilities for numerical computations, including statistics, linear algebra, optimization, and random number generation.\n\t\n\tApache Commons Configuration: \n\t\tA library providing a hierarchical configuration system with support for different configuration sources such as properties files, XML files, and databases.\n\t\n\tGoogle Guice: \n\t\tA lightweight dependency injection framework for Java, providing support for dependency injection through annotations and a fluent API.\n\t\n\tQuerydsl: \n\t\tA framework for constructing type-safe SQL-like queries in Java, enabling compile-time validation of queries and providing a fluent API for building complex queries.\n\t\n\tRxJava: \n\t\tA reactive extensions library for Java, providing support for asynchronous and event-based programming using observable sequences, enabling composition and transformation of asynchronous data streams.\n\t\n\tButterKnife: \n\t\tA lightweight library for Android development that simplifies view binding and resource injection using annotations, reducing boilerplate code in Android applications.\n\t\n\tOkHttp: \n\t\tA modern, HTTP client library for Java and Android, providing features such as connection pooling, request/response caching, and HTTP/2 support, with a simple and expressive API.\n\t\n\tGson: \n\t\tA library for JSON serialization and deserialization in Java, developed by Google, offering high performance and flexibility for converting Java objects to and from JSON.\n\t\n\tGuava Cache: \n\t\tA caching library provided as part of the Google Guava library, offering a simple and flexible API for in-memory caching with features such as automatic eviction, expiration, and concurrency control.\n\t\n\tSpark Framework: \n\t\tA lightweight web framework for Java and Kotlin, inspired by Sinatra, providing support for building RESTful web services and microservices with minimal configuration and boilerplate.\n\t\n\tJUnit Jupiter: \n\t\tThe next generation of JUnit, providing modern features and improved extensibility for writing and running tests in Java, including parameterized tests, nested tests, and extension models.\n\t\n\tHikariCP: \n\t\tA high-performance JDBC connection pool library for Java, offering fast, reliable, and lightweight connection pooling with minimal overhead and configuration.\n\t\n\tMapStruct: \n\t\tA code generation library for Java, enabling the automatic generation of type-safe mapping code between Java beans, eliminating the need for writing boilerplate mapping code manually.\n\t\n\tSlf4j (Simple Logging Facade for Java): \n\t\tA simple facade or abstraction for various logging frameworks (e.g., Log4j, Logback), allowing for flexible logging configurations.\n\t\n\tGuice Servlet: \n\t\tAn extension module for Google Guice that provides integration with the Java Servlet API, enabling dependency injection in servlets, filters, and listeners.\n\t\n\tJedis: \n\t\tA Java client library for Redis, providing support for interacting with Redis servers using simple and intuitive APIs for data manipulation, pub/sub messaging, and pipelining.\n\t\n\tTestNG: \n\t\tA testing framework for Java, providing features such as annotations, parameterized tests, dependency injection, and parallel test execution, as an alternative to JUnit.\n\t\t\n\tApache Commons: \n\t\tA collection of reusable Java components, including utilities for handling collections, IO, logging, configuration, and more.\n\t\n\tGoogle Guava: \n\t\tA set of core libraries developed by Google, providing primitives, collections, caching, concurrency libraries, common annotations, string processing, and more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","details":[],"references":[],"createdDate":{"$date":"2024-09-05T05:42:42.042Z"},"updatedDate":{"$date":"2024-09-05T06:23:19.449Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66dc67379cfd286e7db4f15e"},"uniqueId":"6a83562c-caee-4bca-ad90-1f5b5837a928","parentId":"","name":"Neo4j Graph Academy","skeleton":"Neo4j GraphAcademy\n\tNeo4j Fundamentals\n\t\t**Graph Thinking**\n\t\t\tModule Overview\n\t\t\t\tIn this module, you will learn about:\n\t\t\t\t\t- Leonhard Euler, the Swiss mathematician who founded the study of graph theory.\n\t\t\t\t\t- Elements that make up a graph and how they are used to solve real-world problems.\n\t\t\t\t\t- The structure of the graphs and how they are traversed.\n\t\t\t\t\t- Common use-cases for graphs.\n\t\t\tSub Topics\n\t\t\t\t1. The Seven Bridges\n\t\t\t\t\t**Leonhard Euler** is the inventor of graph theory\n\t\t\t\t\tLeonhard Euler was the inventor of graph theory back in 1736.\n\t\t\t\t\t**Final note** from Sub-Topic\n\t\t\t\t\t\tIn this lesson you learned how graph theory was invented. Next, you will learn about the elements that make up a graph.\n\t\t\t\t2. Graph Elements\n\t\t\t\t\t- 2 types of Graph Elements\n\t\t\t\t\t\t- Nodes (also known as vertices)\n\t\t\t\t\t\t\t- Nodes typically represent things\n\t\t\t\t\t\t\t- Example\n\t\t\t\t\t\t\t\tperson, product, event, book or subway station.\n\t\t\t\t\t\t- Edges (also known as edges)\n\t\t\t\t\t\t\t- Relationships (or edges) are used to connect nodes. We can use relationships to describe how nodes are connected to each other.\n\t\t\t\t\t\t\t- Relationships are typically verbs.\n\t\t\t\t\t\t\t\t- We could use a relationship to represent a personal or professional connection (Person knows Person, Person married to Person), to state a fact (Person lives in Location, Person owns Car, Person rated Movie), or even to represent a hierarchy (Parent parent of Child, Software depends on Library).\n\t\t\t\t\t\t\t- Example\n\t\t\t\t\t\t\t\t- Michael has the WORKS_AT relationship to Graph Inc because he works there. Michael has the MARRIED_TO relationship to Sarah because he is married to her.\n\t\t\t\t\t- Final note from Sub-Topic\n\t\t\t\t\t\tIn this lesson you learned about nodes (vertices) and relationships (edges) that make up a graph. Next, you will learn about graph structure where relationships may have direction or weights.\n\t\t\t\t3. Graph Structure\n\t\t\t\t\t- Graph characteristics and traversal\n\t\t\t\t\t\tCharacteristics\n\t\t\t\t\t\t\tDirected vs. undirected graphs\n\t\t\t\t\t\t\tWeighted vs. unweighted graphs\n\t\t\t\t\t\tGraph traversal\n\t\t\t\t\t\t\tTraversal implies that the relationships are followed in the graph. There are different types of traversals in graph theory that can impact application performance. For example, can a relationship be traversed multiple times or can a node be visited multiple times?\n\t\t\t\t\t- Final note from Sub-Topic\n\t\t\t\t\t\tIn this lesson you learned how graphs are structured where the relationships can have direction and weights. Next, you will learn about some common use cases for graphs.\n\t\t\t\t4. Graphs Are Everywhere\n\t\t\t\t\tUse cases for graphs\n\t\t\t\t\t\t- As we discovered previously, the fundamental structure of a graph has applications far beyond mathematics. In fact, you may have seen the phrase Graphs are Everywhere across the neo4j.com website. It is our hope that you will start to see the connections between things everywhere.\n\t\t\t\t\t\t- Here are a some commonly-used use cases for Neo4j.\n\t\t\t\t\t\t\t- E-commerce and real-time recommendations\n\t\t\t\t\t\t\t- Investigative journalism\n\t\t\t\t\t\t\t- Network and IT operations\n\t\t\t\t\t\t\t- Transportation and logistics\n\t\t\t\t\tFinal note from Sub-Topic\n\t\t\t\t\t\tIn this lesson you learned about some common use cases for graphs. Next, you will learn about property graphs that Neo4j supports.\n\t\t**Property Graphs**\n\t\t\tModule Overview\n\t\t\t\tIn this module, you will learn about:\n\t\t\t\t\tThe key elements a property graph and why they are useful.\n\t\t\t\t\tHow Neo4j implements a native graph using index-free adjacency.\n\t\t\t\t\tSome of the ways that Relational and other NoSQL databases can be implemented in Neo4j.\n\t\t\tSub Topics\n\t\t\t\tWhat is a Property Graph?\n\t\t\t\t\tFinal Note from Sun-Topic\n\t\t\t\t\t\tIn this lesson you learned that Neo4j’s implementation of property graphs include labels for nodes and properties for both nodes and relationships. Next, you will learn why Neo4j’s implementation of a native graph provides superior performance.\n\t\t\t\tNative Graph Advantage\n\t\t\t\t\tWhere native graph databases stand apart from other databases is the concept of **index-free adjacency**.\n\t\t\t\t\t\tIndex-free adjacency (IFA)\n\t\t\t\t\t\t\tOne of the key features that makes Neo4j graph databases different from an RDBMS is that Neo4j implements **index-free adjacency**.\n\t\t\t\t\t\t\tWith index-free adjacency, Neo4j stores nodes and relationships as objects that are linked to each other via pointers\n\t\t\t\t\t\t\tBenefits of IFA compared to relational DBMS access\n\t\t\t\t\t\t\t\tFewer index lookups.\n\t\t\t\t\t\t\t\tNo table scans.\n\t\t\t\t\t\t\t\tReduced duplication of data.\n\t\t\t\t\tFinal Note\n\t\t\t\t\t\tIn this lesson you learned how Neo4j’s implementation of index-free adjacency makes queries super fast. Next, you will learn how some non-graph data models can be represented as graphs.\n\t\t\t\tNon-graph Databases to Graph\n\t\t\t\t\tFinal Note\n\t\t\t\t\t\tIn this lesson you learned how some non-graph data models can be represented as graphs. Next, you will learn about the Movie graph that is used in many GraphAcademy courses.\n\t\t**Explore Neo4j**\n\t\t\tModule Overview\n\t\t\t\tIn this module, you will:\n\t\t\t\t\tExplore a graph of movies.\n\t\t\t\t\tUse Cypher to query the graph.\n\t\t\t\t\tLearn the options for using Neo4j.\n\t\t\t\t\tCreate your own Neo4j cloud instance on [Aura](https://console.neo4j.io)\n\t\tIn this course, you have learned:\n\t\t\tBasic graph theory and the elements that make a graph\n\t\t\tGraph structures\n\t\t\tCommon graph use cases\n\t\t\tElements of a Neo4j graph database\n\t\t\tHow Neo4j implements index-free-adjacency\n\t\t\tHow to navigate a graph database\n\t\t\tHow to get started with Neo4j\n\t\tQ&A\n\t\t\tWhat are graph databases?\n\t\t\t\tGraphs are mathematical structures consisting of Edges and Vertices\n\t\t\t\tIn a Property Graph, we refer to these as Nodes and Relationships\n\t\t\tGraphs are useful when:\n\t\t\t\tWhen the problem requires understanding the relationship between entities.\n\t\t\t\tWhen the problem involves a hierarchy.\n\t\t\t\tWhen the problem requires exploring relationships of varying or unknown depth.\n\t\t\t\tWhen the problem requires evaluating routes or paths through a network.\n\t\t\tCommon Use Cases\n\t\t\t\tE-commerce platforms combine ratings, purchase history and browsing history to provide real-time recommendations.\n\t\t\t\tThe ICIJ used Neo4j to explore and understand the network of global companies and identify persons with significant control.\n\t\t\t\tMany enterprises use Neo4j for planning, cost analysis, impact analysis and also to troubleshoot problems when a problem arises.\n\t\t\tWhat gives Neo4j its advantage?\n\t\t\t\tNeo4j is a native graph database designed specifically for graph traversal.\n\t\t\t\tWhere Joins between tables are computed at read-time, this information is saved in a way that allows for quick pointer-chasing in memory\n\t\t\t\tQueries in Graph Databases are proportional to the amount of data touched during a query, not the size of data overall.\n\t\t\tGraph Elements\n\t\t\t\tNode\n\t\t\t\t\tA node will commonly represent an individual record, for example, a thing or a fact.\n\t\t\t\tLabel\n\t\t\t\t\tNodes can have one or more labels. Labels provide a way to group nodes and also serve as a starting point for any database queries.\n\t\t\t\tRelationship\n\t\t\t\t\tA relationship connects two nodes. Each relationship has exactly one start and end node. A relationship will have a single a type.\n\t\t\t\tType\n\t\t\t\t\tRelationships are identified by their type.\n\t\t\t\tProperty\n\t\t\t\t\tBoth nodes and relationships can contain properties. A property is a key/value pair.\n\t\t\tModeling Rules\n\t\t\t\t**Nodes typically represent things.**\n\t\t\t\t\tExamples of entities that could typically be represented as a node are: person, product, event, book or subway station.\n\t\t\t\t**Relationships are typically verbs.**\n\t\t\t\t\tWe could use a relationship to represent a personal or professional connection (Person knows Person, Person married to Person), to state a fact (Person lives in Location, Person owns Car, Person rated Movie), or even to represent a hierarchy (Parent parent of Child, Software depends on Library).\n\t\t\t\t**Verbs can also be nodes.**\n\t\t\t\t\tA verb may be modeled as a node when one or more facts need to be associated with it. For example, you may want to group multiple product purchases through a single `(:Order) node`.\n\t\tResources\n\t\t\tThere are many resources available to you for learning more about Neo4j:\n\t\t\t\t[Neo4j Developer Resources](https://neo4j.com/developer/resources/)\n\t\t\t\t[Neo4j Community Site](https://community.neo4j.com) – Ask or answer questions about Neo4j and discuss with other users.\n\t\t\t\t[Neo4j Documentation](https://neo4j.com/docs/)\n\t\t\t\t[Neo4j Sandboxes](https://sandbox.neo4j.com/?ref=graph-academy) – Experiment with graphs.\n\t\t\t\t[Neo4j YouTube Channel](https://www.youtube.com/channel/UCvze3hU6OZBkB1vkhH2lH9Q) – Watch videos on Neo4j.\n\t\t\t\t[Neo4j Certification](https://graphacademy.neo4j.com/categories/certification/) – Become a Neo4j certified developer.\n\t\t\t\t[Neo4j GitHub Repository](https://github.com/neo4j-contrib)\n\t\t\t\t[Neo4j Events](https://neo4j.com/events/world/all/) – Find Neo4j events happening worldwide.\n\t\t\t\t[Graph Gists](https://neo4j.com/graphgists/) – Learn more about Neo4j use cases.\n\t\t\t\t[Neo4j Meetups](https://www.meetup.com/topics/neo4j/) – Attend a Neo4j meetup.\n\t\t\t\t[Neo4j on Stack Overflow](https://stackoverflow.com/tags/neo4j/hot) – View questions and answers related to Neo4j.\n","details":[],"references":[],"createdDate":{"$date":"2024-09-07T14:46:15.608Z"},"updatedDate":{"$date":"2024-09-08T10:12:15.611Z"},"__v":0,"softDelete":false,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66e1397c058ea7c535270d26"},"uniqueId":"2015b6b3-bacf-4761-bc08-38fef1ea7340","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `In-Progress`]**: Build type-safe React apps & use TypeScript to enhance your components, state management, Redux & side effects code.","skeleton":"Build type-safe React apps & use TypeScript to enhance your components, state management, Redux & side effects code.\n\tSection 1: Introduction\n\t\t1. Welcome To The Course!\n\t\t\tTarget : To make React App code more type-safe\n\t\t2. Why React &amp; TypeScript?\n\t\t\tAnswer is\n\t\t\t\tWhy use TypeScript\n\t\t\t\t\tTypeScript builds up on JavaScript and `extends` its syntax by adding `strong typing`\n\t\t\t\t\tTypeScript can help to catch errors earlier at writing code, rather than at runtime\n\t\t\t\t\tTypeScript helps you `catch and fix` type related `errors earlier`\n\t\t\t\t\t\tSometimes that comes at the expense of having to define `complex value types`\n\t\t\t\t\t\tBut with this course, you'll get a `super foundation`!\n\t\t3. About The Course &amp; Course Content\n\t\t\t**Pre-requisite**\n\t\t\t\tThis course assumes no prior TypeScript experience.\n\t\t\t\t\tThough you should know `What TypeScript generally is`\n\t\t\t\t\t\tBecause you will get a brief `TypeScript introduction` in this course!\n\t\t\t\tThis course `does require basic React knowledge!`\n\t\t\t\t\tyou should know the essentials- `components, JSX, state`\n\t\t\t\t\t\tBut Instructor will explain more complex React concepts\n\t\t\tWhat is in the couse?\n\t\t\t\tTypeScript essentials\n\t\t\t\tReact + TypeScript Basics\n\t\t\t\tExploring more advanced / specific React + TS problems & Scenarios\n\t\t\t\t\tAdvanced Components\n\t\t\t\t\t\tDynamic components, polymorphic components, forwarding refs\n\t\t\t\t\tAdvanced State\n\t\t\t\t\t\tContext API, useReducer()\n\t\t\t\t\tSide Effects & Data fetching\n\t\t\t\t\t\tuseEffect(), HTTP requests\n\t\t\t\t\tRedux\n\t\t\t\t\t\tUsing Redux with TS\n\t\t\t\t\tPractice Project\n\t\t\t\t\t\tApplying What you learned\n\t\t4. How To Get The Most Out Of The Course\n\t\t\tWatch the videos\n\t\t\t\tUse the video player controls to control playback speed\n\t\t\t\tPause & rewind as needed\n\t\t\t\tRepeat lectures and sections if needed\n\t\t\tPractice\n\t\t\t\tCode Along\n\t\t\t\tPause videos and practice on your own\n\t\t\t\tPractice What you learned\n\t\t\t\t\tWith course projects & your own projects\n\t\t\t\tUse the code snapshots (see attached link) to find & fix errors in your code\n\t\t\tHelp each other\n\t\t\t\tAsk & answer in the Q&A section\n\t\t\t\tFind like-minded students & developers in our Discord community\n\t\t5. Learning Community &amp; Course Resources\n\t\t\t[**“Academind Community”** on Discord](https://academind.com/community/)\n\t\t\t[Course Resources](https://github.com/academind/react-typescript-course-resources)\n\t\t6. Creating &amp; Using React + TypeScript Projects\n\t\t\t2 types of `Starting project snapshots` attached to all course sections\n\t\t\t\tDowloadable projects for `local development`\n\t\t\t\tCodeSandbox projects for `browser-based development`\n\t\t7. Course Setup\n\t\t\tVS Code\n\t\t\tNode JS\n\tSection 2: TypeScript Basics & Core Concepts\n\t\t8. Module Introduction\n\t\t\tTypeScript Essentials\n\t\t\t\tCore TypeScript Concepts & Features you must know\n\t\t\t\t\t`Installing and using` Typescript\n\t\t\t\t\tType `Annotations` and Type `Inference`\n\t\t\t\t\t`Basic` value Types\n\t\t\t\t\t`Advanced` value types and features\n\t\t9. TypeScript Setup &amp; Using TypeScript\n\t\t\t`TypeScript code` must be compiled during build process to `JavaScript code`\n\t\t\t\tTypeScript code\n\t\t\t\t\tDoes not run in the browser\n\t\t\t\t\tGreat for development as it adds **extra type-safety** and catches potential errors\n\t\t\t\tJavaScript code\n\t\t\t\t\tRuns in the browser\n\t\t\t\t\tHas **no extra type safety** features built-in\n\t\t\t\t\t\tHence not ideal for development\n\t\t\tTo install TypeScript\n\t\t\t\trun ```npm install typescript --save-dev```\n\t\t\t\tNode.js should be installed in system to run above command\n\t\t\tTo run\n\t\t\t\tFirst compile typescript code with ```npm tsc```\n\t\t\t\tthen run the compiled js file using ```node <filename>```\n\t\t10. Working with Types: Type Inference &amp; Explicit Type Annotations\n\t\t\t1. **Type Inference**:\n\t\t\t\tTypeScript automatically deduces the type of a variable based on its assigned value. This removes the need for explicit type annotations, making code cleaner. For example, `let num = 10;` infers `num` as `number`.\n\t\t\t2. **Explicit Type Annotations**:\n\t\t\t\tThese are manually specified types that ensure the developer provides the expected type for variables, functions, or parameters. For example, `let num: number = 10;` explicitly declares `num` as a `number`.\n\t\t11. Basic Primitive Types\n\t\t\tHere are the basic primitive types in TypeScript:\n\t\t\t\t1. **`number`**: Represents both integer and floating-point numbers. Example: `let age: number = 25;`.\n\t\t\t\t2. **`string`**: Represents textual data. Example: `let name: string = 'John';`.\n\t\t\t\t3. **`boolean`**: Represents true/false values. Example: `let isActive: boolean = true;`.\n\t\t\t\t4. **`null`**: Represents the intentional absence of any object value. Example: `let emptyValue: null = null;`.\n\t\t\t\t5. **`undefined`**: Represents a variable that has been declared but not yet assigned a value. Example: `let notAssigned: undefined = undefined;`.\n\t\t\t\t6. **`symbol`**: A unique and immutable value used as object keys. Example: `let sym: symbol = Symbol('key');`.\n\t\t\t\t7. **`bigint`**: Represents large integers. Example: `let largeNum: bigint = 9007199254740991n;`.\n\t\t12. Invoking The TypeScript Compiler\n\t\t\tTo compile\n\t\t\t\t```npx tsc first-script.ts```\n\t\t\tTo run\n\t\t\t\t```node first-script.js```\n\t\t13. Combining Types Union Types (Alternative Types)\n\t\t\tSuppose we have use case that userId can be a string or a number\n\t\t\t\t```let userID: string | number = 'abc'; userID=123;```\n\t\t14. Working with Object Types\n\t\t\t```let user3: {   name: string;   age: number;   isAdmin: boolean;   id: string | number; };```\n\t\t\t```user3 = {   name: \"Premendra\",   age: 37,   isAdmin: true,   id: 1, };```\n\t\t15. Working with Array Types\n\t\t\t```let hobbies: Array<string>;```\n\t\t\t```hobbies = [\"Sports\", \"Study\"];```\n\t\t\t```let hobbies2: string[];```\n\t\t\t```hobbies2 = [\"Sports\", \"Study\"];```\n\t\t16. Adding Types to Functions - Parameter &amp; Return Value Types\n\t\t\t```function add(a: number, b: number): void {   const res = a + b;   console.log(res); }  add(1, 2);```\n\t\t17. Defining Function Types\n\t\t\t```function calculate(   a: number,   b: number,   calcFn: (a: number, b: number) => number ): number {   return calcFn(a, b); }  let result=calculate(8,9, add2); console.log(result);```\n\t\t\t```type AddFn= (a: number, b: number) => number;  function calculate2(     a: number,     b: number,     calcFn: AddFn   ): number {     return calcFn(a, b);   }      let result2=calculate2(80,99, add2);   console.log(result2);```\n\t\t18. Creating Custom Types / Type Aliases\n\t\t19. Defining Object Types with Interfaces\n\t\t20. Interfaces vs Custom Types\n\t\t\t**Inheritance**: `interface` uses `extends` for extending, while `type` uses `&` for intersections.\n\t\t\t**Declaration Merging**: `interface` supports declaration merging, but `type` does not.\n\t\t\t**Usage Flexibility**: `type` can be used for more complex scenarios (e.g., union and intersection types).\n\t\t21. Merging Types\n\t\t22. Being Specific With Literal Types\n\t\t23. Adding Type Guards\n\t\t24. Type Guards &amp; Type Narrowing - A Closer Look\n\t\t25. Making Sense Of Generic Types\n\t\t26. Summary\n\tSection 3: Using TypeScript with React - Essentials\n\t\t27. Module Introduction\n\t\t\tReact & TypeScript - Basics\n\t\t\t\tBuilding Basic React Apps with TypeScript\n\t\t\t\t\t`Components, Props` and TypeScript\n\t\t\t\t\tHandling `Events`\n\t\t\t\t\tWorking with `State`\n\t\t\t\t\tHandling Input via `Forms and Refs`\n\t\t28. Creating a React + TypeScript Project\n\t\t\tTo create a react-app with TypeScript\n\t\t\t\trun command ```npm create vite@latest react-ts-basics```\n\t\t\t\tchoose `React` and `TypeScript` from list of templates\n\t\t29. Understanding the Role of tsconfig.json\n\t\t30. Building a First Component &amp; Facing a Missing Type\n\t\t31. Defining Component Props Types\n\t\t32. Storing Props Types as a Custom Type or Interface\n\t\t33. Defining a Type for Props with \"children\"\n\t\t34. Component Props &amp; The Special \"key\" Prop\n\t\t\tAll React components (built-in components and also your custom components) do accept a special key prop which is used by React to track specific component instances.\n\t\t\tFor example, the key prop should always be set when outputting a list of components.\n\t\t\tThis key prop can be set on custom components even if you didn't specify it in your props type!\n\t\t\t\tFor example, the following component code will work:\n\t\t\t\t\t```type UserProps = {   name: string; };   function User({ name }: UserProps) {   return <li>User: {name}</li>; }   function App() {   const users = [{ name: 'John' }, { name: 'Mary' }, { name: 'Luke' }];     return (     <>       <ul>         {users.map((user, index) => (           <User key={user} name={user.name} />         ))}       </ul>     </>   ); }```\n\t\t35. Another Way Of Typing Components\n\t\t36. Exercise: Creating a Header Component\n\t\t37. Using useState() and TypeScript\n\t\t38. Working with State &amp; Outputting State-based Values\n\t\t39. Another Exercise &amp; Reusing Types Across Files\n\t\t40. Passing Functions as Values - In A Type-Safe Way\n\t\t41. Handling &amp; Typing Events\n\t\t\tSummary\n\t\t\t\tSometimes, our event handling functions must be `typed properly` to correctly reflect the type of event that is being emitted.\n\t\t42. Working with Generic Event Types\n\t\t\tFormEvent is a `generic type`\n\t\t\t\t`Generic Type` means the `type` has some extra `type-information` about a `related-type`\n\t\t43. Using useRef() with TypeScript\n\t\t\t'Refs' mostly used with `HTMLElement`s. However, `useRef` can be used for any type like `string`, `array` or `object`\n\t\t44. Handling User Input In A Type-Safe Way\n\t\t45. Summary\n\t\t\tIn this course section, we learned about\n\t\t\t\tSome important, essential typescript and React concepts\n\t\t\t\t\tSome essential concept we must be aware of, If you want to use TypeScript in conjunction with React\n\t\t\tMost important ones are\n\t\t\t\tHow to build components\n\t\t\t\t\tAnd how to properly `type` our component `props`, one of main thing we do in TypeScript\n\t\t\t\tComponent Prop typing, good introduction is discussed here, so that we can create Basic components.\n\t\t\t\tHow we manage `state`, when using TypeScript?\n\t\t\t\t\tHow to correctly type the state and how to make sure that `data` flows correctly through application and through all components?\n\t\t\t\tGathering `user input` with help of `useRef`\n\t\t\t\t\tAdditionally gathering `user input` with `useState` and complex `formData`\n\t\t\t\tHandling `event` and how to `type` events?\n\tSection 4: Advanced Component Types - Dynamic Components, Polymorphic Components & More\n\t\t46. Module Introduction\n\t\t\tBuilding Dynamic & Flexible Components with TypeScript\n\t\t\t\tRendering `Different Content` based on `Props`\n\t\t\t\tBuilding `Wrapper` components\n\t\t\t\tBuilding `Polymorphic` components\n\t\t\t\t`Forwarding Refs` and Exposing `Component APIs`\n\t\t47. Building a More Dynamic &amp; Flexible Component\n\t\t48. Problem: Flexible Components With Required Prop Combinations\n\t\t49. Solution: Building Components with Discriminated Unions\n\t\t50. Onwards To A New Project\n\t\t51. Building a Basic Wrapper Component\n\t\t52. Building Better Wrapper Components with ComponentPropsWithoutRef\n\t\t53. Building a Wrapper Component That Renders Different Elements\n\t\t54. Working with Type Predicates &amp; Facing TypeScript Limitations\n\t\t\t**Type Predicate** in TypeScript :\n\t\t\t\tA Type Predicate in TypeScript is a special feature that allows you to create custom type guards, which help TypeScript narrow down types at runtime based on a condition. Type predicates are useful when working with union types or when you need to determine if a variable is of a certain type.\n\t\t\t\t\tSyntax:\n\t\t\t\t\t\tA type predicate is expressed with the following syntax:\n\t\t\t\t\t\t\t```function isType(value: any): value is Type {   return someCondition(value); }```\n\t\t\t\t\t\t\tIn this function, `value is Type` is the type predicate. It tells TypeScript that if the function returns `true`, then `value` should be treated as `Type`.\n\t\t55. Building a Basic Polymorphic Component\n\t\t\tEletmentType in React+TS\n\t\t\t\tIn React with TypeScript, `ElementType` is a utility type provided by `@types/react` that represents any valid React component or HTML tag. It is useful when you want to work with a generic component type that could be a string representing an HTML element (like `'div'`, `'span'`, etc.) or a React component (function or class-based).\n\t\t56. Building a Better Polymorphic Component with Generics\n\t\t\t**Core idea behind generic type in typescript**\n\t\t\t\tThe core idea behind generic types in TypeScript is to create reusable components or functions that work with a variety of types while still maintaining type safety. Generics allow you to define types and functions that can handle any type of data, but the type is specified only when the component or function is used.\n\t\t\t\tCore Concepts:\n\t\t\t\t\t1. **Type Parameterization**:\n\t\t\t\t\t\tGenerics allow you to define a placeholder type (usually denoted by `T` or another type parameter) that can be specified later when the component or function is instantiated. This provides flexibility and reusability.\n\t\t\t\t\t2. **Type Safety**:\n\t\t\t\t\t\tGenerics ensure that the types used within a function or class are consistent and predictable. This means that you get the benefits of type checking and autocompletion, which helps prevent bugs.\n\t\t\t\t\t3. **Reusability**:\n\t\t\t\t\t\tGenerics allow you to write components or functions that can handle a variety of types without duplicating code. This promotes DRY (Don't Repeat Yourself) principles.\n\t\t\t\t\t4. **Constraints**:\n\t\t\t\t\t\tYou can constrain the types that can be used with a generic by specifying bounds. This restricts the generic type to only those types that meet certain criteria.\n\t\t\t\t\t5. **Default Types**:\n\t\t\t\t\t\tGenerics can have default types, which will be used if no specific type is provided.\n\t\t\t\tSummary\n\t\t\t\t\tGenerics in TypeScript provide a powerful way to write flexible, reusable, and type-safe code. They allow you to abstract and generalize code while still maintaining the benefits of static type checking.\n\t\t57. Examples: More Component Ideas\n\t\t58. Using forwardRef with TypeScript\n\t\t\t`forwardRef` in React is a function that allows you to pass a ref from a parent component to a child component, which can then access the DOM element or a class component inside the child. By default, refs cannot be passed directly to functional components, but `forwardRef` enables this behavior.\n\t\t\t\tKey Concepts:\n\t\t\t\t\t1. **Accessing Child DOM Element**:\n\t\t\t\t\t\t`forwardRef` allows the parent component to get direct access to the child component's DOM element (in this case, the `input` element).\n\t\t\t\t\t2. **Refs in Functional Components**:\n\t\t\t\t\t\tNormally, refs work only with class components or DOM elements, but `forwardRef` extends this capability to functional components.\n\t\t\t\t\t3. **Props and Refs Together**:\n\t\t\t\t\t\tThe `forwardRef` function takes two arguments:\n\t\t\t\t\t\t\t- `props`: The props passed to the component.\n\t\t\t\t\t\t\t- `ref`: The ref that’s forwarded to the child component.\n\t\t\t\tWhen to Use `forwardRef`:\n\t\t\t\t\t- When you need to focus or manipulate a DOM element inside a functional component from a parent component.\n\t\t\t\t\t- When you want to expose an internal DOM element of a component to its parent.\n\t\t\t\tExample Use Cases:\n\t\t\t\t\t1. **Controlling focus** (e.g., focusing an input field).\n\t\t\t\t\t2. **Managing scroll positions** of an element.\n\t\t\t\t\t3. **Triggering animations** on child elements directly.\n\t\t\t\tSummary\n\t\t\t\t\tIn short, `forwardRef` is useful for forwarding refs to child components, particularly functional components that don’t natively accept refs.\n\t\t59. Building Another Wrapper Component (Custom Form Component)\n\t\t60. Sharing Logic with \"unknown\" &amp; Type Casting\n\t\t61. Exposing Component APIs with useImperativeHandle (with TypeScript)\n\t\t\tThe `useImperativeHandle` hook in React\n\t\t\t\tThe `useImperativeHandle` hook in React is used to customize the instance value (or imperative methods) that is exposed to a parent component when using `ref`. It allows a child component to expose a controlled API to the parent, instead of just exposing a DOM node or component instance. This is particularly useful when you want to interact with a child component in a more structured or controlled way.\n\t\t\t\tCommon Use Cases for `useImperativeHandle`:\n\t\t\t\t\t1. **Controlling DOM Elements from Parent Components**:\n\t\t\t\t\t\t`useImperativeHandle` can be used to expose certain DOM manipulation methods (e.g., `focus`, `scroll`) from a child component to its parent. This gives the parent component control over the child’s behavior, like focusing an input or triggering animations.\n\t\t\t\t\t2. **Exposing Custom Methods from Functional Components**:\n\t\t\t\t\t\tIn a functional component, you can use `useImperativeHandle` to expose custom methods or state to a parent component, even though functional components do not have the same instance methods as class components.\n\t\t\t\t\t\tFor instance, in a slider or carousel component, you could expose `next` and `previous` methods to control the slides from the parent.\n\t\t\t\t\t3. **Managing Scroll or Animation from Parent**:\n\t\t\t\t\t\tFor complex elements like scrollable lists or animations, you can expose imperative methods that manage the scroll position or trigger specific animations. This allows the parent to control these actions without tightly coupling with the child component’s implementation.\n\t\t\t\t\t4. **Extending Component Functionalities Without Exposing the Entire DOM**:\n\t\t\t\t\t\tYou may want to expose only a subset of the component's functionality instead of the entire DOM reference. `useImperativeHandle` allows you to control what is exposed to the parent component, offering more flexibility in handling encapsulation and abstraction.\n\t\t\t\tKey Points:\n\t\t\t\t\t1. **Functional Component Refs**: `useImperativeHandle` enables functional components to expose imperative methods or values similar to class component instance methods.\n\t\t\t\t\t2. **Custom API Exposure**: It provides a controlled way to expose methods or properties, avoiding exposing the entire component or DOM node, enhancing encapsulation.\n\t\t\t\t\t3. **DOM Manipulation**: Often used for scenarios where you need to manipulate DOM elements like focus, scroll, or animations from the parent.\n\t\t\t\t\t4. **Works with `forwardRef`**: It must be used in conjunction with `forwardRef`, as the ref is forwarded from the parent component to the child.\n\t\t\t\tSummary\n\t\t\t\t\tIn summary, `useImperativeHandle` is useful for creating components that need to expose specific functionalities (like focus, scroll, or other imperative actions) to their parent components without exposing the entire DOM node or component.\n\t\t\tList of few more `imperative actions` other than `focus`, `scroll`\n\t\t\t\tCommon Imperative Actions:\n\t\t\t\t\t1. **Focus**: Focus a text input or form field.\n\t\t\t\t\t2. **Scroll**: Scroll to a specific element or position.\n\t\t\t\t\t3. **Play/Pause Media**: Control video or audio playback.\n\t\t\t\t\t4. **Trigger Animations**: Start or stop animations or transitions.\n\t\t\t\t\t5. **Form Submission**: Programmatically submit or reset forms.\n\t\t\t\t\t6. **Modal Control**: Open or close modals or dialogs.\n\t\t\t\t\t7. **Tooltip**: Show or hide tooltips.\n\t\t\t\t\t8. **Timers**: Start, stop, or reset timers or intervals.\n\t\t\t\t\t9. **File Upload**: Open file input dialogs.\n\t\t\t\tSummary\n\t\t\t\t\tThese use cases show how `useImperativeHandle` can enable imperative actions that go beyond just basic DOM manipulation, giving fine-grained control to parent components.\n\t\t62. Alternative: Avoiding Type Casting with \"as\"\n\t\t\tIn the previous lecture, we used \"Type Casting\" (also called \"Type Assertion\") via TypeScript's as keyword to \"tell\" TypeScript that a value is of a specific type.\n\t\t\tThis is a technique that makes sense when working with data where TypeScript has no chance of inferring the type where you on the other hand no the exact type.\n\t\t\tIf you're not 100% sure about the type of value you'll be dealing with at runtime (i.e., if there are multiple possible value types) or if you want to be extra safe, you can also use a combination of \"Type Guards\" to narrow down the type until TypeScript is able to infer the final type.\n\t\t\tHere's the code from the previous lecture, now adjusted to use \"Type Guards\" for \"Type Narrowing\":\n\t\t\t\t``` function handleSave(data: unknown) {   // const extractedData = data as { name: string; age: string };   if (     !data ||     typeof data !== 'object' ||     !('name' in data) ||     !('age' in data)   ) {       return;   }     // at this point, TypeScript knows that data MUST BE an object    // with a name and age property   // otherwise, the previous if statement would have returned   console.log(data);   customForm.current?.clear(); } ```\n\t\t63. Summary\n\tSection 5: Advanced Type-Safe State with Context API & useReducer()\n\t\t64. Module Introduction\n\t\t\tAdvanced State: Context & Reducers\n\t\t\t\tUsing React's Context API and useReducer with TypeScript\n\t\t\t\t\tUsing the `Context API`\n\t\t\t\t\tCreating & Using `Reducer Functions`\n\t\t65. The Starting Project\n\t\t66. Creating a Context &amp; Fitting Types\n\t\t67. Creating a Type-Safe Provider Component\n\t\t68. Accessing Context Type-Safe With A Custom Hook\n\t\t69. Getting Started with useReducer() &amp; TypeScript\n\t\t70. A Basic Reducer Function &amp; A Basic Action Type\n\t\t71. Changing State via the Reducer Function\n\t\t72. Using Better Action Types\n\t\t73. Wiring Everything Up &amp; Finishing the App\n\tSection 6: Side Effects, useEffect() & Data Fetching with TypeScript\n\t\t74. Module Introduction\n\t\t\tSide Effects & Data Fetching\n\t\t\t\tType-safe Side Effects & HTTP Requests\n\t\t\t\t\tUsing `useEffect()` with TypeScript\n\t\t\t\t\t`Fetching Data` & Handling Responses\n\t\t75. Creating a First Side Effect\n\t\t76. Using useEffect() with TypeScript\n\t\t77. Managing An Interval With Refs &amp; The Effect Cleanup Function\n\t\t78. useEffect() &amp; Its Dependencies\n\t\t79. A Small Bug &amp; Its Solution\n\t\t80. Onwards to Data Fetching!\n\t\t81. Building a Utility \"get\" Function with TypeScript\n\t\t82. Fetching &amp; Transforming Data\n\t\t83. Alternative: Using the \"zod\" Library for Response Data Validation\n\t\t84. Alternative: A Generic \"get\" Function\n\t\t85. Handling Loading &amp; Error States\n\tSection 7: Using Redux with TypeScript\n\t\t86. Module Introduction\n\t\t\tUsing Redux with TypeScript\n\t\t\t\tUsing Redux for State Management\n\t\t\t\t\t`Redux Setup` & `How it works` with TypeScript\n\t\t\t\t\t`Handling State`\n\t\t\t\t\t`Dispatching Actions`\n\t\t87. The Starting Project\n\t\t88. Redux Setup\n\t\t89. Creating a Redux Store &amp; A First Slice\n\t\t90. Setting a State Type\n\t\t91. A First Reducer &amp; Controlling the Action Payload Type\n\t\t92. Adding Logic To The Reducer\n\t\t93. Providing the Redux Store\n\t\t94. Dispatching Actions &amp; Adjusting the useDispatch Hook\n\t\t95. Creating a Type-Safe useSelector Hook\n\t\t96. Selecting &amp; Transforming Redux Store Data\n\t\t97. Finishing Touches &amp; Summary\n\tSection 8: Practice Project: A \"Book a Session\" Management Application\n\t\t98. Your Task\n\t\t99. Your Task - Details\n\t\t100. Hints\n\t\t101. An Example Solution\n\tSection 9: Bonus Content\n\t\t102. Bonus Lecture\n","details":[],"references":[{"uniqueId":"414f405f-1c21-4095-85a1-02420d9d546e","itemType":"topic","itemMetadata":{"topicUniqueID":"e27e9a38-561a-468b-8500-bb59ae6e9521"},"_id":{"$oid":"6713bc4ab082442ae98c97da"}}],"createdDate":{"$date":"2024-09-11T06:32:28.595Z"},"updatedDate":{"$date":"2024-10-19T14:03:54.488Z"},"__v":2,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66e74fe5e1720fc1e577f3e5"},"uniqueId":"de0b52e3-55d7-46f9-9f29-cefaa395a91b","parentId":"","name":"JavaScript Algorithms - The Fundamentals","skeleton":"# JavaScript Algorithms - The Fundamentals\n\tObjective\n\t\tLearn all the core basics and fundamentals about JavaScript algorithms, dive into tons of examples and get a plan for building and measuring algorithms.\n\t\t\n\t\tIn detail, you will learn:\n\n\t\t\tWhat algorithms are\n\t\t\tWhy algorithms are important\n\t\t\tHow to judge and compare algorithms\n\t\t\tAll about \"Time Complexity\", \"Space Complexity\" and the \"Big O\" notation\n\t\t\tDifferent time complexities and how to derive them\n\t\t\tHow to use recursion with algorithms\n\t\t\tOptimization approaches like \"Dynamic Programming\"\n\t\t\tAll core concepts you need for math, search, sorting and sets/ array algorithms\n\t\t\tDifferent kinds of solving problems (e.g. greedy approaches, dynamic approaches)\n\t\tBy the end of the course, you will have a very solid foundation and a plan on how to tackle any problem and find a fitting algorithm! You will be well-prepared to dive deeper and explore more problems and algorithms.\n\n\tCourse Curriculum\n\t\tGetting Started\n\t\t\tWelcome to the Course! \n\t\t\tWhat & Why\n\t\t\tJoin the Learning Community\n\t\t\tMeasuring Algorithm Performance & Time Complexity \n\t\t\tBig O Notation \n\t\t\tDeriving the Time Complexity / Big O of an Algorithm \n\t\t\tConstant Time \n\t\t\tUsing Big O For Algorithm Comparison \n\t\t\tA First Task! \n\t\t\tSolution & A Gotcha \n\t\t\tAbout this Course & Outline \n\t\t\tModule Resources\n\t\t\tThe Academind Pro Referral Program\n\t\tMath Algorithms & Practicing The Basics\n\t\t\tModule Introduction\n\t\t\tThe Fibonacci Problem\n\t\t\tThe Fibonacci Solution\n\t\t\tFibonacci Big O (Time Complexity)\n\t\t\tThe \"Is Prime\" Problem\n\t\t\tThe \"Is Prime\" Solution\n\t\t\t\"Is Prime\", Big O & Multiple Cases\n\t\t\t\"Is Prime\" - Improved Version\n\t\t\tTime to Practice (Problem)\n\t\t\tTime to Practice (Solution)\n\t\t\tIdentifying Big O Quickly\n\t\t\tIs Power Of Two Algorithm\n\t\t\tLogarithmic Time Complexity\n\t\t\tBitwise Operators & Power Of Two\n\t\t\tAgain: Identifying Big O Quickly\n\t\t\tThe Factorial Algorithm\n\t\t\tModule Resources\n\t\tRecursion & Dynamic Programming\n\t\t\tModule Introduction\n\t\t\tRecursion in Algorithms\n\t\t\tExponential Time Complexity\n\t\t\tQuadratic Time Complexity vs Exponential Time Complexity\n\t\t\tWhat is \"Dynamic Programming\"?\n\t\t\t\"Dynamic Programming\" in Action\n\t\t\tThe \"Bottom Up\" Approach\n\t\t\tModule Resources\n\t\tSearch Algorithms\n\t\t\tModule Introduction\n\t\t\tWhat Search Algorithms Are About\n\t\t\tIntroducing Linear Search\n\t\t\tLinear Search in Action\n\t\t\tLinear Search Time Complexity\n\t\t\tBinary Search in Theory\n\t\t\tBinary Search in Action\n\t\t\tBinary Search Time Complexity\n\t\t\tRecursive Binary Search\n\t\t\tThe Master Theorem\n\t\t\tModule Resources\n\t\tSorting Algorithms\n\t\t\tModule Introduction\n\t\t\tWhat are Sorting Algorithms About?\n\t\t\tBubble Sort - Theory\n\t\t\tBubble Sort in Action\n\t\t\tBubble Sort Time Complexity\n\t\t\tQuicksort - Theory\n\t\t\tQuicksort in Action\n\t\t\tQuicksort Time Complexity\n\t\t\tMerge Sort - Theory\n\t\t\tMerge Sort in Action\n\t\t\tMerge Sort Time Complexity\n\t\t\tSummary\n\t\t\tModule Resources\n\t\tSpace Complexity\n\t\t\tModule Introduction\n\t\t\tIntroducing Space Complexity\n\t\t\tDeriving Space Complexity\n\t\t\tFactorial Algorithm (Loop) - Space Complexity\n\t\t\tFactorial Algorithm (Recursive) - Space Complexity\n\t\t\tLinear Search - Space Complexity\n\t\t\tBinary Search - Space Complexity \n\t\t\tBubble Sort - Space Complexity \n\t\t\tQuicksort - Space Complexity \n\t\t\tMerge Sort - Space Complexity \n\t\t\tModule Resources\n\t\tSets (Array) Algorithms\n\t\t\tModule Introduction \n\t\t\tAn Introduction to Sets \n\t\t\tThe Cartesian Product Algorithm \n\t\t\tCartesian Product - Time Complexity \n\t\t\tThe Cartesian Product Algorithm - Without Limits \n\t\t\tThe Permutations Algorithms \n\t\t\tPermutations without Repetitions \n\t\t\tUnderstanding Permutations \n\t\t\tPermutations without Repetitions - Big O \n\t\t\tPermutations WITH Repetitions \n\t\t\tModule Resources\n\t\tMore Complex Algorithms & How To Solve Code Problems\n\t\t\tModule Introduction \n\t\t\tSolving Problems In A Structured Way \n\t\t\tSimplifying Problems \n\t\t\tPractice Makes Perfect! \n\t\t\tThe Knapsack Problem (0/1) \n\t\t\tA Wrong Approach \n\t\t\tApproaching the Problem Differently \n\t\t\tA Working Knapsack Solution \n\t\t\tAn Improved Knapsack Algorithm \n\t\t\tGreedy vs Dynamic Algorithms \n\t\t\tA Greedy Knapsack Algorithm \n\t\t\tA New Problem Solving Plan \n\t\t\tThe Change Making Problem \n\t\t\tA Greedy Change Making Algorithm \n\t\t\tA Variation to the Change Making Problem \n\t\t\tModule Resources\n\t\tRoundup & Next Steps\n\t\t\tCourse Roundup ","details":[],"references":[],"createdDate":{"$date":"2024-09-15T21:21:41.284Z"},"updatedDate":{"$date":"2024-09-15T21:31:36.419Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66e755d4e1720fc1e577f691"},"uniqueId":"55e9f13c-d426-4627-a86b-a52b8bc9ec17","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `In-Progress`]**: Learn NextJS 14 from the ground up and build fullstack ReactJS + NextJS apps with the App Router or Pages Router!","skeleton":"Learn NextJS 14 from the ground up and build fullstack ReactJS + NextJS apps with the App Router or Pages Router!\n\tSection 1: Getting Started\n\t\t1. Welcome To The Course!\n\t\t2. What Is NextJS? Why Would You Use It?\n\t\t\tNextJS is React Framework , So it build up on ReactJS.\n\t\t\t\tWhy do we need another framework, that builds up on ReactJS?\n\t\t\t\t\tBecause NextJS is `Full-stack React framework`\n\t\t\t\t\t\tIt simplifies the process of building fullstack applications with React\n\t\t\t\t\t`Trend`: Build fullstack apps instead of SPAs\n\t\t\t\t\t\tGet the `best of both worlds`:\n\t\t\t\t\t\t\t`Highly interactive frontends`, blending seemlessly with `tightly connected backends`\n\t\t\t\t\tReact is becoming a hybrid library\n\t\t\t\t\t\tImproved server-side rendering\n\t\t\t\t\t\tStreaming responses\n\t\t\t\t\t\tReact Server Components\n\t\t\t\t\t\tServer Actions\n\t\t\t\t\tUsing these features without a framework is `tricky` and typically `not all you need`\n\t\t\t\t\t\tRoute Setup & Handling\n\t\t\t\t\t\tForm Submission\n\t\t\t\t\t\tData Fetching\n\t\t\t\t\t\tAuthentication\n\t\t\t\t\t\tAnd much more!\n\t\t\tNextJS\n\t\t\t\tHandles route setup & config\n\t\t\t\tHandles requests & responses\n\t\t\t\tHandles data fetching & submission\n\t\t\t\tAnd much more!\n\t\t\t**React** - The foundation we need\n\t\t3. Key Features &amp; Benefits Of NextJS\n\t\t\tKey Features & Benefits\n\t\t\t\tFullstack Apps\n\t\t\t\t\tNextJS blends frontend + backend (In the same project)\n\t\t\t\t\t**Advantage** : Frontend and bakend tasks are part of the same project\n\t\t\t\tFile-based Routing\n\t\t\t\t\tRoutes are configured via the filesystem (folders + files)\n\t\t\t\t\t**Advantage** : No code-based configuration or extra packages for routing required\n\t\t\t\tServer-side Rendering\n\t\t\t\t\tBy default, NextJS (pre-) renders all pages on the server\n\t\t\t\t\t**Advantage** : The finished HTML page (incl. content) is sent to the client (-> great for SEO)\n\t\t4. Creating a First NextJS App\n\t\t5. NextJS vs \"Just React\" - Analyzing The NextJS Project\n\t\t6. Editing The First App\n\t\t7. Pages Router vs App Router - One Framework, Two Approaches\n\t\t8. How To Get The Most Out Of This Course\n\t\t9. Learning Community &amp; Course Resources\n\t\t10. Course Setup\n\tSection 2: Optional: React Refresher\n\t\t11. Using the Code Snasphots\n\t\t12. Module Introduction\n\t\t13. What Is React &amp; Why Would You Use It?\n\t\t14. React Projects - Requirements\n\t\t15. Creating React Projects\n\t\t16. Our Starting Project\n\t\t17. Understanding How React Works\n\t\t18. Building A First Custom Component\n\t\t19. Outputting Dynamic Values\n\t\t20. Reusing Components\n\t\t21. Passing Data to Components with Props\n\t\t22. CSS Styling &amp; CSS Modules\n\t\t23. Exercise &amp; Another Component\n\t\t24. Preparing the App For State Management\n\t\t25. Adding Event Listeners\n\t\t26. Working with State\n\t\t27. Lifting State Up\n\t\t28. The Special \"children\" Prop\n\t\t29. State &amp; Conditional Content\n\t\t30. Adding a Shared Header &amp; More State Management\n\t\t31. Adding Form Buttons\n\t\t32. Handling Form Submission\n\t\t33. Updating State Based On Previous State\n\t\t34. Outputting List Data\n\t\t35. Adding a Backend to the React SPA\n\t\t36. Sending a POST HTTP Request\n\t\t37. Handling Side Effects with useEffect()\n\t\t38. Handle Loading State\n\t\t39. Understanding &amp; Adding Routing\n\t\t40. Adding Routes\n\t\t41. Working with Layout Routes\n\t\t42. Refactoring Route Components &amp; More Nesting\n\t\t43. Linking &amp; Navigating\n\t\t44. Data Fetching via loader()s\n\t\t45. Submitting Data with action()s\n\t\t46. Dynamic Routes\n\t\t47. Module Summary\n\t\t48. IMPORTANT -- LEGACY CONTENT BELOW\n\t\t49. Module Introduction\n\t\t50. What is ReactJS?\n\t\t51. Why ReactJS &amp; A First Demo\n\t\t52. Building Single-Page Applications (SPAs)\n\t\t53. React Alternatives\n\t\t54. Creating a New React Project\n\t\t55. Setting Up A Code Editor\n\t\t56. React 18\n\t\t57. Diving Into The Created Project\n\t\t58. How React Works &amp; Understanding Components\n\t\t59. More Component Work &amp; Styling With CSS Classes\n\t\t60. Building &amp; Re-using Components\n\t\t61. Passing Data With Props &amp; Dynamic Content\n\t\t62. Handling Events\n\t\t63. Adding More Components\n\t\t64. Introducing State\n\t\t65. Working with \"Event Props\"\n\t\t66. Use The Right React Router Version\n\t\t67. Adding Routing\n\t\t68. Adding Links &amp; Navigation\n\t\t69. Scoping Component Styles With CSS Modules\n\t\t70. Outputting Lists Of Data &amp; Components\n\t\t71. Adding Even More Components\n\t\t72. Creating \"Wrapper\" Components\n\t\t73. Working With Forms\n\t\t74. Getting User Input &amp; Handling Form Submission\n\t\t75. Preparing The App For Http Requests &amp; Adding a Backend\n\t\t76. Sending a POST Http Request\n\t\t77. Navigating Programmatically\n\t\t78. Getting Started with Fetching Data\n\t\t79. Using the \"useEffect\" Hook\n\t\t80. Introducing React Context\n\t\t81. Updating State Based On Previous State\n\t\t82. Using Context In Components\n\t\t83. More Context Usage\n\t\t84. Module Summary\n\t\t85. Module Resources\n\tSection 3: NextJS Essentials (App Router)\n\t\t86. Module Introduction\n\t\t87. Starting Setup\n\t\t88. Understanding File-based Routing &amp; React Server Components\n\t\t89. Adding Another Route via the File System\n\t\t\tIn NextJS, **Filenames matters**\n\t\t\t\tNextJS relies on reserved, special filenames\n\t\t\t\tBut the filenames only matter inside the \"app\" folder\n\t\t\t\t\tpage.js\n\t\t\t\t\t\tDefine page content\n\t\t\t\t\tlayout.js\n\t\t\t\t\t\tDefine wrapper around pages\n\t\t\t\t\tnot-found.js\n\t\t\t\t\t\tDefine \"Not Found\" fallback page\n\t\t\t\t\terror.js\n\t\t\t\t\t\tDefine \"Error\" Fallback page\n\t\t\t\t\ticon.png\n\t\t\t\t\tAlso there are some reserved names also, like\n\t\t\t\t\t\tmetadata\n\t\t\t\t\t\t\tall details for head tag of html, will go through `metadata`\n\t\t\t\t\t`layout` is the wrapper  and `page` is the actual content\n\t\t90. Navigating Between Pages - Wrong &amp; Right Solution\n\t\t91. Working with Pages &amp; Layouts\n\t\t\tWhere the `page.js` file defines the content of the page, the `layout.js` file deines the shell or layout around one or more pages\n\t\t\tEvery NextJS project needs at least one layout.js, (root layout.js file)\n\t\t92. Reserved File Names, Custom Components &amp; How To Organize A NextJS Project\n\t\t\treserved file folders\n\t\t\t\tapp folder\n\t\t\t\ticon.png\n\t\t\t\tlayout.js\n\t\t\t\tpage.js\n\t\t\t\t`metadata` const or variable\n\t\t\t\tsub-folders of `app' folder\n\t\t\t\theader.js\n\t\t\t\t\tThis is not a reserved file in NextJs,\n\t\t\t\t\tit will be a normal ReactJS component\n\t\t\t\tloading.js\n\t\t\tArticle for organizing file in NextJS project\n\t\t\t\tProject Organization and File Colocation [click here](https://nextjs.org/docs/app/building-your-application/routing/colocation)\n\t\t\t**Important:**  These filenames are only reserved when creating them inside of the `app/` folder (or any subfolder). Outside of the app/ folder, these filenames are not treated in any special way.\n\t\t\t\tHere's a list of reserved filenames in NextJS - you'll, of course, learn about the important ones throughout this section:\n\t\t\t\t\tpage.js => Create a new page (e.g., app/about/page.js creates a <your-domain>/about page)\n\t\t\t\t\tlayout.js => Create a new layout that wraps sibling and nested pages\n\t\t\t\t\tnot-found.js => Fallback page for \"Not Found\" errors (thrown by sibling or nested pages or layouts)\n\t\t\t\t\terror.js => Fallback page for other errors (thrown by sibling pages or nested pages or layouts)\n\t\t\t\t\tloading.js => Fallback page which is shown whilst sibling or nested pages (or layouts) are fetching data\n\t\t\t\t\troute.js => Allows you to create an API route (i.e., a page which does NOT return JSX code but instead data, e.g., in the JSON format)\n\t\t93. Reserved Filenames\n\t\t94. Configuring Dynamic Routes &amp; Using Route Parameters\n\t\t95. Onwards to the Main Project: The Foodies App\n\t\t96. Exercise: Your Task\n\t\t97. Exercise: Solution\n\t\t98. Revisiting The Concept Of Layouts\n\t\t99. Adding a Custom Component To A Layout\n\t\t100. Styling NextJS Project: Your Options &amp; Using CSS Modules\n\t\t101. Optimizing Images with the NextJS Image Component\n\t\t102. Using More Custom Components\n\t\t103. Populating The Starting Page Content\n\t\t104. Preparing an Image Slideshow\n\t\t105. React Server Components vs Client Components - When To Use What\n\t\t\tThis differentiation is not from NextJS, but even in Vanila React apps this differentiation is present.\n\t\t\tServer vs Client Components\n\t\t\t\tReact Server Components (RSC)\n\t\t\t\t\tComponents that are **only** rendered on the server\n\t\t\t\t\tBy default, all React components (in NextJS apps) are RSCs\n\t\t\t\t\tAdvantage: Less client-side JS, great for SEO\n\t\t\t\tClient Components\n\t\t\t\t\tComponents that are **pre-rendered** on the server but then also **potentially on the client**\n\t\t\t\t\t\tClient side things, like\n\t\t\t\t\t\t\tEvent handlers(e.g. onClick)\n\t\t\t\t\t\t\tuseState, useEffect hooks\n\t\t\t\t\tOpt-in via `use client` directive\n\t\t\t\t\tAdvantage: Client-side interactivity\n\t\t\tVanila React Apps Render on the client\n\t\t\t\tServer-side (Backend)\n\t\t\t\t\tOnly returns one single HTML file which contains the client-side JS code\n\t\t\t\tClient-side(Frontend)\n\t\t\t\t\tThe visible content is generated & rendered on the client-side (by the client-side React code)\n\t\t\tWith NextJS, we build FullStack Applications\n\t\t\t\tIn NextJS, Server-Side and Client-Side working together.\n\t\t\t\tServer-Side (Backend)\n\t\t\t\t\tThe backend **executes the server component functions** & hence derives the to-be rendered HTML code\n\t\t\t\tClient-Side (Frontend)\n\t\t\t\t\tThe client-side **receives & renders** the to-be rendered HTML code\n\t\t106. Using Client Components Efficiently\n\t\t107. Outputting Meals Data &amp; Images With Unknown Dimensions\n\t\t108. Setting Up A SQLite Database\n\t\t109. Fetching Data By Leveraging NextJS &amp; Fullstack Capabilities\n\t\t110. Adding A Loading Page\n\t\t111. Using Suspense &amp; Streamed Responses For Granular Loading State Management\n\t\t112. Handling Errors\n\t\t113. Handling \"Not Found\" States\n\t\t114. Loading &amp; Rendering Meal Details via Dynamic Routes &amp; Route Parameters\n\t\t115. Throwing Not Found Errors For Individual Meals\n\t\t116. Getting Started with the \"Share Meal\" Form\n\t\t117. Getting Started with a Custom Image Picker Input Component\n\t\t118. Adding an Image Preview to the Picker\n\t\t119. Improving the Image Picker Component\n\t\t120. Introducing &amp; Using Server Actions for Handling Form Submissions\n\t\t121. Storing Server Actions in Separate Files\n\t\t122. Creating a Slug &amp; Sanitizing User Input for XSS Protection\n\t\t123. Storing Uploaded Images &amp; Storing Data in the Database\n\t\t124. Managing the Form Submission Status with useFormStatus\n\t\t125. Adding Server-Side Input Validation\n\t\t126. Using useFormState()\n\t\t127. Working with Server Action Responses &amp; useFormState\n\t\t128. Building For Production &amp; Understanding NextJS Caching\n\t\t129. Triggering Cache Revalidations\n\t\t130. Don't Store Files Locally On The Filesystem!\n\t\t131. Bonus: Storing Uploaded Images In The Cloud (AWS S3)\n\t\t132. Adding Static Metadata\n\t\t133. Adding Dynamic Metadata\n\t\t134. Module Summary\n\tSection 4: Routing & Page Rendering - Deep Dive\n\t\t135. Module Introduction\n\t\t\t### Routing & Page Rendering\n\t\t\t\tFile based Routing, Component Types & More\n\t\t\t\t\tUnderstanding **Routing** in NextJS Applications\n\t\t\t\t\t**File Name** conventions & Project Structure\n\t\t\t\t\t**Server Components** vs **Client Components**\n\t\t136. Project Setup, Overview &amp; An Exercise!\n\t\t137. Exercise Solution - Part 1\n\t\t138. Exercise Solution - Part 2\n\t\t139. App Styling &amp; Using Dummy Data\n\t\t140. Handling \"Not Found\" Errors &amp; Showing \"Not Found\" Pages\n\t\t141. Setting Up &amp; Using Parallel Routes\n\t\t142. Working with Parallel Routes &amp; Nested Routes\n\t\t143. Configuring Catch-All Routes\n\t\t144. Catch-All Fallback Routes &amp; Dealing With Multiple Path Segments\n\t\t145. Throwing (Route-related) Errors\n\t\t146. Handling Errors With Error Pages\n\t\t147. Server vs Client Components\n\t\t\tSever components only **rendered on the server**, never on the client\n\t\t\tClient components **pre-rendered** on the server but then also **can be executed on the clients( browsers)**\n\t\t\tBy default, all components in NextJS, are Server Components\n\t\t\tIf you must Build a client component, try to make it as small as possible.\n\t\t\t\tBecause with that, the application still works as before, but now we improved our code.\n\t\t148. Nested Routes Inside Dynamic Routes\n\t\t149. Intercepting Navigation &amp; Using Interception Routes\n\t\t150. Combining Parallel &amp; Intercepting Routes\n\t\t151. Replace page.js with default.js\n\t\t152. Navigating Programmatically\n\t\t153. Defining the Base HTML Document\n\t\t154. Using &amp; Understanding Route Groups\n\t\t155. Building APIs with Route Handlers\n\t\t156. Using Middleware\n\t\t157. Module Summary\n\tSection 5: Data Fetching - Deep Dive\n\t\t158. Module Introduction\n\t\t\tData Fetching\n\t\t\t\tFetching and using data from different sources\n\t\t\t\t\tWhere and How to fetch data\n\t\t\t\t\tWorking with APIs\n\t\t\t\t\tLoading data from Databases & other Sources\n\t\t159. Adding a Backend\n\t\t160. Option 1: Client-side Data Fetching\n\t\t161. Option 2: Server-side Data Fetching\n\t\t162. Why Use A Separate Backend? Fetching Directly From The Source!\n\t\t163. Showing a \"Loading\" Fallback\n\t\t164. Migrating An Entire Application To A Local Data Source (Database)\n\t\t165. Granular Data Fetching With Suspense\n\tSection 6: Mutating Data - Deep Dive\n\t\t166. Module Introduction\n\t\t167. Starting Project &amp; Analyzing Mutation Options\n\t\t168. Setting Up A Form Action\n\t\t169. Creating a Server Action\n\t\t170. Storing Data in Databases\n\t\t171. Providing User Feedback with The useFormStatus Hook\n\t\t172. Using useFormState Hook\n\t\t173. Validating User Input With Help Of The useFormState Hook\n\t\t174. Adjusting Server Actions for useFormState\n\t\t175. Storing Server Actions In Separate Files\n\t\t176. \"use server\" Does Not Guarantee Server-side Execution!\n\t\t177. Uploading &amp; Storing Images\n\t\t178. Alternative Ways of Using, Configuring &amp; Triggering Server Actions\n\t\t179. Revalidating Data To Avoid Caching Problems\n\t\t180. Performing Optimistic Updates With NextJS\n\t\t181. Caching Differences: Development vs Production\n\tSection 7: Understanding & Configuring Caching\n\t\t182. Module Introduction\n\t\t183. Making Sense of NextJS' Caching Types\n\t\t184. Project Setup\n\t\t185. Handling Request Memoization\n\t\t186. Understanding The Data Cache &amp; Cache Settings\n\t\t187. Controlling Data Caching\n\t\t188. Making Sense Of The Full Route Cache\n\t\t189. On-Demand Cache Invalidation with revalidatePath &amp; revalidateTag\n\t\t190. Setting Up Request Memoization For Custom Data Sources\n\t\t191. Setting Up Data Caching For Custom Data Sources\n\t\t192. Invalidating Custom Data Source Data\n\t\t193. Module Summary\n\tSection 8: NextJS App Optimizations\n\t\t194. Module Introduction\n\t\t195. Using the NextJS Image Component\n\t\t196. Understanding the NextJS Image Component\n\t\t197. Controlling the Image Size\n\t\t198. Working with Priority Images &amp; More Settings\n\t\t199. Loading Unknown Images\n\t\t200. Configuring CSS For Images With The \"fill\" Prop\n\t\t201. Using An Image Loader &amp; Cloudinary Resizing\n\t\t202. Page Metadata - An Introduction\n\t\t203. Configuring Static Page Metadata\n\t\t204. Configuring Dynamic Page Metadata\n\t\t205. Understanding Layout Metadata\n\tSection 9: User Authentication\n\t\t206. Module Introduction\n\t\t207. Project Setup\n\t\t208. User Signup: Extracting &amp; Validating User Input\n\t\t209. Storing Users in a Database - The Wrong Way\n\t\t210. Hashing Passwords &amp; Storing User Data The Right Way\n\t\t211. Checking for Email Duplication\n\t\t212. Theory: How Does User Authentication Work?\n\t\t213. Choosing a Third-Party Auth Package (Lucia)\n\t\t214. Creating a New Lucia Auth Instance\n\t\t215. Configuring A Session &amp; A Session Cookie\n\t\t216. Setting Up An Auth Session\n\t\t217. Verifying An Active Auth Session\n\t\t218. Protecting Routes Against Unauthenticated Access\n\t\t219. Switching Auth Modes With Query Parameters (Search Params)\n\t\t220. Adding User Login (via a Server Action)\n\t\t221. Triggering Different Server Actions via Query Parameters\n\t\t222. Adding an Auth-only Layout\n\t\t223. One Root Layout vs Multiple Root Layouts\n\t\t224. Adding User Logout\n\tSection 10: Roundup & Next Steps\n\t\t225. Course Roundup\n\t\t226. But There's More NextJS Content!\n\tSection 11: Pages & File-based Routing\n\t\t227. From App Router To Pages Router\n\t\t228. Using The Code Snapshots\n\t\t229. Module Introduction\n\t\t230. Our Starting Setup\n\t\t231. What Is \"File-based Routing\"? And Why Is It Helpful?\n\t\t232. Adding A First Page\n\t\t233. Adding a Named / Static Route File\n\t\t234. Working with Nested Paths &amp; Routes\n\t\t235. Adding Dynamic Paths &amp; Routes\n\t\t236. Extracting Dynamic Path Segment Data (Dynamic Routes)\n\t\t237. Building Nested Dynamic Routes &amp; Paths\n\t\t238. Adding Catch-All Routes\n\t\t239. Navigating with the \"Link\" Component\n\t\t240. Navigating To Dynamic Routes\n\t\t241. A Different Way Of Setting Link Hrefs\n\t\t242. Navigating Programmatically\n\t\t243. Adding a Custom 404 Page\n\t\t244. Module Summary\n\t\t245. Module Resources\n\tSection 12: Project Time: Working with File-based Routing\n\t\t246. Module Introduction\n\t\t247. Planning The Project\n\t\t248. Setting Up The Main Pages\n\t\t249. Adding Dummy Data &amp; Static Files\n\t\t250. Adding Regular React Components\n\t\t251. Adding More React Components &amp; Connecting Components\n\t\t252. Styling Components In Next.js Projects\n\t\t253. &lt;Link&gt; &amp; NextJS 13\n\t\t254. Adding Buttons &amp; Icons\n\t\t255. Adding the \"Event Detail\" Page (Dynamic Route)\n\t\t256. Adding a General Layout Wrapper Component\n\t\t257. Working on the \"All Events\" Page\n\t\t258. Adding a Filter Form for Filtering Events\n\t\t259. Navigating to the \"Filtered Events\" Page Progammatically\n\t\t260. Extracting Data on the Catch-All Page\n\t\t261. Final Steps\n\t\t262. Module Summary\n\t\t263. Module Resources\n\tSection 13: Page Pre-Rendering & Data Fetching\n\t\t264. Module Introduction\n\t\t265. The Problem With Traditional React Apps (and Data Fetching)\n\t\t266. How NextJS Prepares &amp; Pre-renders Pages\n\t\t267. Introducing Static Generation with \"getStaticProps\"\n\t\t268. NextJS Pre-renders By Default!\n\t\t269. Adding \"getStaticProps\" To Pages\n\t\t270. Running Server-side Code &amp; Using the Filesystem\n\t\t271. A Look Behind The Scenes\n\t\t272. Utilizing Incremental Static Generation (ISR)\n\t\t273. ISR: A Look Behind The Scenes\n\t\t274. A Closer Look At \"getStaticProps\" &amp; Configuration Options\n\t\t275. Working With Dynamic Parameters\n\t\t276. Introducing \"getStaticPaths\" For Dynamic Pages\n\t\t277. Using \"getStaticPaths\"\n\t\t278. \"getStaticPaths\" &amp; Link Prefetching: Behind The Scenes\n\t\t279. Working With Fallback Pages\n\t\t280. Loading Paths Dynamically\n\t\t281. Fallback Pages &amp; \"Not Found\" Pages\n\t\t282. Introducing \"getServerSideProps\" for Server-side Rendering (SSR)\n\t\t283. Using \"getServerSideProps\" for Server-side Rendering\n\t\t284. \"getServerSideProps\" and its Context\n\t\t285. Dynamic Pages &amp; \"getServerSideProps\"\n\t\t286. \"getServerSideProps\": Behind The Scenes\n\t\t287. Introducing Client-Side Data Fetching (And When To Use It)\n\t\t288. Implementing Client-Side Data Fetching\n\t\t289. A Note About useSWR\n\t\t290. Using the \"useSWR\" NextJS Hook\n\t\t291. Combining Pre-Fetching With Client-Side Fetching\n\t\t292. Module Summary\n\t\t293. Module Resources\n\tSection 14: Project Time: Page Pre-rendering & Data Fetching\n\t\t294. Module Introduction\n\t\t295. Preparations\n\t\t296. Adding Static Site Generation (SSG) On The Home Page\n\t\t297. Loading Data &amp; Paths For Dynamic Pages\n\t\t298. Optimizing Data Fetching\n\t\t299. Working on the \"All Events\" Page\n\t\t300. Using Server-side Rendering (SSR)\n\t\t301. Adding Client-Side Data Fetching\n\t\t302. Module Summary\n\t\t303. Module Resources\n\tSection 15: Optimizing NextJS Apps\n\t\t304. Module Introduction\n\t\t305. Analyzing the Need for \"head\" Metadata\n\t\t306. Configuring the \"head\" Content\n\t\t307. Adding Dynamic \"head\" Content\n\t\t308. Reusing Logic Inside A Component\n\t\t309. Working with the \"_app.js\" File (and Why)\n\t\t310. Merging \"head\" Content\n\t\t311. The \"_document.js\" File (And What It Does)\n\t\t312. A Closer Look At Our Images\n\t\t313. Optimizing Images with the \"Next Image\" Component &amp; Feature\n\t\t314. Taking A Look At The \"Next Image\" Documentation\n\t\t315. Module Summary\n\t\t316. Module Resources\n\tSection 16: Adding Backend Code with API Routes (Fullstack React)\n\t\t317. Module Introduction\n\t\t318. What are \"API Routes\"?\n\t\t319. Writing Our First API Route\n\t\t320. Preparing the Frontend Form\n\t\t321. Parsing The Incoming Request &amp; Executing Server-side Code\n\t\t322. Sending Requests To API Routes\n\t\t323. Using API Routes To Get Data\n\t\t324. Using API Routes For Pre-Rendering Pages\n\t\t325. Creating &amp; Using Dynamic API Routes\n\t\t326. Exploring Different Ways Of Structuring API Route Files\n\t\t327. Module Summary\n\t\t328. Module Resources\n\tSection 17: Project Time: API Routes\n\t\t329. Module Introduction\n\t\t330. Starting Setup &amp; A Challenge For You!\n\t\t331. Adding a Newsletter Route\n\t\t332. Adding Comments API Routes\n\t\t333. Connecting the Frontend To the Comments API Routes\n\t\t334. Setting Up A MongoDB Database\n\t\t335. Running MongoDB Queries From Inside API Routes\n\t\t336. Inserting Comments Into The Database\n\t\t337. Getting Data From The Database\n\t\t338. Adding Error Handling\n\t\t339. More Error Handling\n\t\t340. A Final Note On MongoDB Connections\n\t\t341. Module Summary\n\t\t342. Improvement: Getting Comments For A Specific Event\n\t\t343. Module Resources\n\tSection 18: Working with App-wide State (React Context)\n\t\t344. Module Introduction\n\t\t345. Our Target State &amp; Starting Project\n\t\t346. Creating a New React Context\n\t\t347. Adding Context State\n\t\t348. Using Context Data In Components\n\t\t349. Example: Triggering &amp; Showing Notifications\n\t\t350. Example: Removing Notifications (Automatically)\n\t\t351. Challenge Solution\n\t\t352. Module Summary\n\t\t353. Module Resources\n\tSection 19: Complete App Example: Build a Full Blog A to Z\n\t\t354. Module Introduction\n\t\t355. Setting Up The Core Pages\n\t\t356. Getting Started With The Home Page\n\t\t357. Adding The \"Hero\" Component\n\t\t358. Adding Layout &amp; Navigation\n\t\t359. Time To Add Styling &amp; A Logo\n\t\t360. Starting Work On The \"Featured Posts\" Part\n\t\t361. Adding A Post Grid &amp; Post Items\n\t\t362. Rendering Dummy Post Data\n\t\t363. Adding the \"All Posts\" Page\n\t\t364. Working On The \"Post Detail\" Page\n\t\t365. Rendering Markdown As JSX\n\t\t366. Adding Markdown Files As A Data Source\n\t\t367. Adding Functions To Read &amp; Fetch Data From Markdown Files\n\t\t368. Using Markdown Data For Rendering Posts\n\t\t369. Rendering Dynamic Post Pages &amp; Paths\n\t\t370. Rendering Custom HTML Elements with React Markdown\n\t\t371. Rendering Images With The \"Next Image\" Component (From Markdown)\n\t\t372. Rendering Code Snippets From Markdown\n\t\t373. Preparing The Contact Form\n\t\t374. Adding The Contact API Route\n\t\t375. Sending Data From The Client To The API Route\n\t\t376. Storing Messages With MongoDB In A Database\n\t\t377. Adding UI Feedback With Notifications\n\t\t378. Adding \"head\" Data\n\t\t379. Adding A \"_document.js\" File\n\t\t380. Using React Portals\n\t\t381. Module Summary\n\t\t382. Module Resources\n\tSection 20: Deploying NextJS Apps\n\t\t383. Module Introduction\n\t\t384. Building NextJS Apps: Your Options\n\t\t385. Key Deployment Steps\n\t\t386. Checking &amp; Optimizing Our Code\n\t\t387. The NextJS Config File &amp; Working With Environment Variables\n\t\t388. Running a Test Build &amp; Reducing Code Size\n\t\t389. A Full Deployment Example (To Vercel)\n\t\t390. A Note On Github &amp; Secret Credentials\n\t\t391. Using the \"export\" Feature\n\t\t392. Module Summary\n\t\t393. Module Resources\n\tSection 21: Adding Authentication\n\t\t394. Module Introduction\n\t\t395. Our Starting Project\n\t\t396. How Does Authentication Work (In React &amp; NextJS Apps)?\n\t\t397. Must Read: Install the Right next-auth Version\n\t\t398. Using The \"next-auth\" Library\n\t\t399. Adding A User Signup API Route\n\t\t400. Sending Signup Requests From The Frontend\n\t\t401. Improving Signup With Unique Email Addresses\n\t\t402. Adding the \"Credentials Auth Provider\" &amp; User Login Logic\n\t\t403. Sending a \"Signin\" Request From The Frontend\n\t\t404. Managing Active Session (On The Frontend)\n\t\t405. Adding User Logout\n\t\t406. Adding Client-Side Page Guards (Route Protection)\n\t\t407. Adding Server-Side Page Guards (And When To Use Which Approach)\n\t\t408. Protecting the \"Auth\" Page\n\t\t409. Using the \"next-auth\" Session Provider Component\n\t\t410. Analyzing Further Authentication Requirements\n\t\t411. Protecting API Routes\n\t\t412. Adding the \"Change Password\" Logic\n\t\t413. Sending a \"Change Password\" Request From The Frontend\n\t\t414. Module Summary &amp; Final Steps\n\t\t415. Module Resources\n\tSection 22: Optional: NextJS Summary\n\t\t416. Module Introduction\n\t\t417. What is NextJS?\n\t\t418. Key Feature: Server-side (Pre-) Rendering of Pages\n\t\t419. Key Feature: File-based Routing\n\t\t420. Key Feature: Build Fullstack Apps With Ease\n\t\t421. Creating a NextJS Project &amp; IDE Setup\n\t\t422. About the \"App Router\"\n\t\t423. Analyzing the Created Project\n\t\t424. Adding First Pages To The Project\n\t\t425. Adding Nested Pages / Paths\n\t\t426. Creating Dynamic Pages\n\t\t427. Extracting Dynamic Route Data\n\t\t428. Linking Between Pages\n\t\t429. Onwards To A Bigger Project!\n\t\t430. Preparing Our Project Pages\n\t\t431. Rendering A List Of (Dummy) Meetups\n\t\t432. Adding A Form For Adding Meetups\n\t\t433. The \"_app.js\" File &amp; Wrapper Components\n\t\t434. Programmatic Navigation\n\t\t435. Adding Custom Components &amp; Styling With CSS Modules\n\t\t436. How NextJS Page Pre-Rendering Actually Works\n\t\t437. Introducing Data Fetching For Page Generation (getStaticProps)\n\t\t438. More Static Site Generation (SSG) With getStaticProps\n\t\t439. Exploring getServerSideProps\n\t\t440. Working With Dynamic Path Params In getStaticProps\n\t\t441. Dynamic Pages &amp; getStaticProps &amp; getStaticPaths\n\t\t442. Introducing API Routes\n\t\t443. Connecting &amp; Querying a MongoDB Database\n\t\t444. Sending HTTP Requests To API Routes\n\t\t445. Getting Data From The Database (For Page Pre-Rendering)\n\t\t446. Getting Meetup Detail Data &amp; Paths\n\t\t447. Adding \"head\" Metadata To Pages\n\t\t448. Deploying NextJS Projects\n\t\t449. Working With Fallback Pages &amp; Re-Deploying\n\t\t450. Module Summary\n\t\t451. Module Resources\n\tSection 23: Course Roundup\n\t\t452. Course Roundup\n\t\t453. Bonus!\n","details":[],"references":[],"createdDate":{"$date":"2024-09-15T21:47:00.306Z"},"updatedDate":{"$date":"2024-10-19T14:01:42.235Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66f05798c8b84c5590039ac3"},"uniqueId":"86933729-d0b5-45f7-af98-3d4c90443172","parentId":"","name":"Storing Personal and Company Projects Data in DB","skeleton":"\nStoring Personal and Company Projects Data in DB\n\tOverview\n\t\tThis structure incorporates key steps for storing both personal and company project data and includes additional considerations like validation, migrations, and optional frontend interaction.\n\n\tTech Stack:\n\t\t- Backend: Spring Boot + GraphQL\n\t\t- Database: PostgreSQL/MySQL (or your preferred DB)\n\t\t- Frontend (Optional): React/Next.js for interacting with GraphQL APIs\n\n\tSteps:\n\n\t\t1. Store User Details:\n\t\t\t- Define User schema with fields like `id`, `name`, `email`, etc.\n\t\t\t- Use GraphQL mutations to add new users.\n\t\t\t- Handle user authentication and authorization if needed (e.g., JWT or OAuth).\n\n\t\t2. Store Company Details:\n\t\t\t- Define a Company schema with fields such as `companyId`, `companyName`, `location`, and other metadata.\n\t\t\t- GraphQL mutation to store and update company details.\n\t\t\t- Ensure unique constraints for fields like `companyName` to avoid duplication.\n\n\t\t3. Create a Dummy Company for Personal Projects (Optional):\n\t\t\t- For personal projects, you can create a dummy company record (e.g., `companyName: \"Personal Projects\"`).\n\t\t\t- This step is optional, but it helps to keep the schema uniform between personal and company projects.\n\n\t\t4. Store Company Project Details:\n\t\t\t- Define a Project schema with fields like `projectId`, `companyId` (foreign key), `projectName`, `projectType`, `techStacksUsed`, and `status` (active/inactive).\n\t\t\t- GraphQL mutation for adding and updating company project details.\n\t\t\t- Include relations between companies and projects using GraphQL relations or resolvers.\n\t\t\t- Ensure appropriate indexing for faster querying.\n\n\t\t5. Store Personal Project Details:\n\t\t\t- Use a similar schema as company projects, but link them to the dummy company (or handle them separately if needed).\n\t\t\t- Fields such as `projectId`, `projectName`, `purpose`, and `techStacksUsed` will be the same as company projects.\n\t\t\t- Use GraphQL queries/mutations for CRUD operations on personal projects.\n\n\t\t6. Additional Considerations:\n\t\t\t- Data Validation: Ensure proper validation on inputs (e.g., valid email formats, required fields).\n\t\t\t- Error Handling: Implement error handling in both the Spring Boot GraphQL layer and the database layer.\n\t\t\t- Database Migrations: Use tools like Liquibase or Flyway for managing schema changes and migrations.\n\t\t\t- Caching (Optional): Implement caching mechanisms (e.g., Redis) for frequently accessed data like project lists.\n\t\t\t- Logging and Monitoring: Implement logging (Logback/SLF4J) and monitoring for database operations.\n\n\n\n","details":[],"references":[],"createdDate":{"$date":"2024-09-22T17:44:56.556Z"},"updatedDate":{"$date":"2024-09-22T17:46:09.067Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66f3bbcd99d28cca8a20eb92"},"uniqueId":"cd4b1715-e698-4ee3-b4c5-5915839d247e","parentId":"","name":"In my career, I worked on","skeleton":"In my career, I worked on:\n\tCreate and consume APIs:\n\t\tDifferent ways to create APIs:\n\t\t\t- REST\n\t\t\t- GraphQL\n\t\t\t- SOAP (No hands-on now)\n\t\tDifferent ways to consume APIs:\n\t\t\tREST:\n\t\t\t\t- Using a JavaScript utility\n\t\t\t\t- Using a TypeScript utility:\n\t\t\t\t\t- fetch\n\t\t\t\t\t- axios\n\t\t\t\t- Using jQuery and AJAX\n\t\t\t\t- Using a Java program\n\t\t\t\t- Using Spring Boot:\n\t\t\t\t\t- RestTemplate\n\t\t\t\t\t- WebFlux\n\t\t\tGraphQL:\n\t\t\t\t- Using a JavaScript utility\n\t\t\t\t- Using a TypeScript utility:\n\t\t\t\t\t- fetch\n\t\t\t\t\t- axios\n\t\t\t\t\t- Apollo Client\n\t\t\t\t- Using jQuery and AJAX\n\t\t\t\t- Using a Java program\n\t\t\t\t- Using Spring Boot:\n\t\t\t\t\t- RestTemplate\n\t\t\t\t\t- WebFlux\n\tCreate UI:\n\t\t- Using Servlet and JSP\n\t\t- Using Flex4\n\t\t- Using Struts2\n\t\t- Using AngularJS\n\t\t- Using ReactJS + TypeScript\n","details":[],"references":[],"createdDate":{"$date":"2024-09-25T07:29:17.685Z"},"updatedDate":{"$date":"2024-09-25T12:07:47.423Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"66f4408d99d28cca8a213680"},"uniqueId":"baf56870-6470-43b9-99fb-5b07c0fa3d00","parentId":"","name":"Acceptance criteria: For my next company","skeleton":"Acceptance criteria: For my next company\n\tECTC - 40 LPA or 35 Fixed in hand, preferably post deducting tax\n\t\tName of the company\n\t\twho will be payroll company\n\t\tdomain of company\n\t\tare you ok with my frequent switches mentioned in resume?\n\t\thow many employees in technical or development team\n\twhat is tech-stack used\n\tdo you use (if yes, i will move for interview)\n\t\tspring boot?\n\t\tjava 8+\n\t\tmicroservices\n\t\tReactJS\n\t\tTypeScript\n\t\tDesign Patterns\n\tdo you need  (apni mahtari chudwao)\n\t\tkafka\n\t\tnextjs\n\t\tangular\n\t\tmultithreading\n\t\tAWS\n\t\tSolid Principals\n","details":[],"references":[],"createdDate":{"$date":"2024-09-25T16:55:41.301Z"},"updatedDate":{"$date":"2024-09-25T16:57:06.881Z"},"softDelete":false,"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"6704d0548805ada98b529203"},"uniqueId":"6c681b2d-cd4e-4cf6-8db7-1b3099187f05","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `On-Hold`]**: Angular - The Complete Guide (2024 Edition)","skeleton":"Angular - The Complete Guide (2024 Edition)\n\tSection 1: Getting Started\n\t\t1. Welcome To The Course!\n\t\t2. What Exactly Is Angular?\n\t\t3. Why Would You Use Angular?\n\t\t4. Angular's Evolution & Stability\n\t\t5. Creating A New Angular Project\n\t\t6. Setting Up An Angular Development Environment\n\t\t7. About This Course\n\t\t8. Course Setup & Resources\n\tSection 2: Angular Essentials - Components, Templates, Services & More\n\t\t9. Module Introduction\n\t\t10. A New Starting Project & Analyzing The Project Structure\n\t\t11. Understanding Components & How Content Ends Up On The Screen\n\t\t12. Creating a First Custom Component\n\t\t13. [Optional] JavaScript Refresher: Classes, Properties & More\n\t\t14. Configuring the Custom Component\n\t\t15. Using the Custom Component\n\t\t16. Styling the Header Component & Adding An Image\n\t\t17. Managing & Creating Components with the Angular CLI\n\t\t18. Styling & Using Our Next Custom Component\n\t\t19. Preparing User Data (To Output Dynamic Content)\n\t\t20. Storing Data in a Component Class\n\t\t21. Outputting Dynamic Content with String Interpolation\n\t\t22. Property Binding & Outputting Computed Values\n\t\t23. Attribute Binding\n\t\t24. Using Getters For Computed Values\n\t\t25. Listening to Events with Event Binding\n\t\t26. Managing State & Changing Data\n\t\t27. A Look Behind The Scenes Of Angular's Change Detection Mechanism\n\t\t28. Introducing Signals\n\t\t29. We Need More Flexible Components!\n\t\t30. Defining Component Inputs\n\t\t31. Required & Optional Inputs\n\t\t32. Using Signal Inputs\n\t\t33. We Need Custom Events!\n\t\t34. Working with Outputs & Emitting Data\n\t\t35. Using the output() Function\n\t\t36. Adding Extra Type Information To EventEmitter\n\t\t37. Exercise: Create a Configurable Component\n\t\t38. TypeScript: Working With Potentially Undefined Values & Union Types\n\t\t39. Accepting Objects As Inputs & Adding Appropriate Typings\n\t\t40. TypeScript: Type Aliases & Interfaces\n\t\t41. Outputting List Content\n\t\t42. Outputting Conditional Content\n\t\t43. Legacy Angular: Using ngFor & ngIf\n\t\t44. Adding More Components to the Demo App\n\t\t45. Outputting User-specific Tasks\n\t\t46. Outputting Task Data in the Task Component\n\t\t47. Storing Data Models in Separate Files\n\t\t48. Dynamic CSS Styling with Class Bindings\n\t\t49. More Component Communication: Deleting Tasks\n\t\t50. Creating & Conditionally Rendering Another Component\n\t\t51. Managing The \"New Task\" Dialog\n\t\t52. Using Directives & Two-Way-Binding\n\t\t53. Signals & Two-Way-Binding\n\t\t54. Handling Form Submission\n\t\t55. Using the Submitted Data\n\t\t56. Content Projection with ng-content\n\t\t57. Transforming Template Data with Pipes\n\t\t58. Getting Started with Services\n\t\t59. Getting Started with Dependency Injection\n\t\t60. More Service Usage & Alternative Dependency Injection Mechanism\n\t\t61. Time to Practice: Services\n\t\t62. Using localStorage for Data Storage\n\t\t63. Module Summary\n\tSection 3: Angular Essentials - Working with Modules\n\t\t64. Module Introduction\n\t\t65. A First Introduction To Angular Modules (NgModule)\n\t\t66. Creating a First Empty Module\n\t\t67. Bootstrapping Apps with Angular Modules\n\t\t68. Declaring & Using Components\n\t\t69. A First Summary\n\t\t70. Migrating All Components To Use Modules\n\t\t71. Creating & Using Shared Modules\n\t\t72. Creating More Complex Module-based App Structures\n\tSection 4: Angular Essentials - Time To Practice\n\t\t73. Module Introduction & Starting Project\n\t\t74. Exercise Hints\n\t\t75. Adding a Header Component With An Image\n\t\t76. Adding a User Input Component\n\t\t77. Handling Form Submission\n\t\t78. Extracting Values with Two-Way-Binding\n\t\t79. Calculating the Annual Investment Data\n\t\t80. Cross-Component Communication with Outputs\n\t\t81. Creating & Using a Data Model\n\t\t82. Passing Data from Parent to Child with Inputs\n\t\t83. Outputting Data in a Table\n\t\t84. Formatting Output with a Pipe\n\t\t85. Using Signals & Resetting The Form After Submission\n\t\t86. Using a Service for Cross-Component Communication\n\t\t87. Using Signals in Services\n\t\t88. Migrating to Angular Modules\n\t\t89. Module Summary\n\tSection 5: Debugging Angular Apps\n\t\t90. Module Introduction\n\t\t91. Understanding Error Messages & Fixing Errors\n\t\t92. Debugging Logical Errors with the Browser DevTools & Breakpoints\n\t\t93. Exploring the Angular DevTools\n\tSection 6: Components & Templates - Deep Dive\n\t\t94. Module Introduction\n\t\t95. Starting Project & An Opportunity For Smaller Components?\n\t\t96. When & How To Split Up Components\n\t\t97. Splitting A Component Into Multiple Components\n\t\t98. Creating Reusable Components\n\t\t99. Component Inputs: Repetition\n\t\t100. Property Binding: Repetition\n\t\t101. Using Content Projection & ng-content\n\t\t102. Adding Forms to Components\n\t\t103. A Possible, But Not Ideal Way Of Extending Built-in Elements\n\t\t104. Extending Built-in Elements with Custom Components via Attribute Selectors\n\t\t105. Supporting Content Projection with Multiple Slots\n\t\t106. Exploring Advanced Content Projection\n\t\t107. Defining Content Projection Fallbacks\n\t\t108. Multi-Element Custom Components & Content Projection\n\t\t109. Scoping CSS Styles to Components\n\t\t110. Understanding & Configuring View Encapsulation\n\t\t111. Making Sense of Component Host Elements\n\t\t112. Using Host Elements Like Regular Elements\n\t\t113. Interacting With Host Elements From Inside Components\n\t\t114. When (Not) To Rely On Host Elements\n\t\t115. Interacting with Host Elements via @HostListener & @HostBinding\n\t\t116. Accessing Host Elements Programmatically\n\t\t117. Class Bindings: Repetition\n\t\t118. There's More Than One Way Of Binding CSS Classes Dynamically\n\t\t119. A Closer Look At Dynamic Inline Style Binding\n\t\t120. Manipulating State & Using Literal Values\n\t\t121. Introducing the Component Lifecycle: ngOnInit\n\t\t122. Implementing Lifecycle Interfaces\n\t\t123. Component Lifecycle - A Deep Dive\n\t\t124. Component Cleanup with ngOnDestroy\n\t\t125. Component Cleanup with DestroyRef\n\t\t126. Handling Form Submissions: Repetition\n\t\t127. Working with Template Variables\n\t\t128. Extracting Input Values via Template Variables\n\t\t129. Template Variables & Component Instances\n\t\t130. Getting Access to Template Elements via ViewChild\n\t\t131. Using The viewChild Signal Function\n\t\t132. ViewChild vs ContentChild\n\t\t133. A Closer Look at Decorator-based Queries & Lifecycle Hooks\n\t\t134. The afterRender and afterNextRender Lifecycle Functions\n\t\t135. Making Sense of Signal Effects\n\t\t136. Signal Effects Cleanup Functions\n\t\t137. TypeScript & Type Models: Repetition\n\t\t138. Component Outputs: Repetition\n\t\t139. A Closer Look At Template For Loops\n\t\t140. Revisiting Inputs & Signals\n\t\t141. Updating Signal Values\n\t\t142. Cross-Component Communication & State Management\n\t\t143. Configuring Component Inputs & Outputs\n\t\t144. Two-Way Binding: Repetition\n\t\t145. Setting Up Custom Two-Way Binding\n\t\t146. An Easier Way of Setting Up Custom Two-Way Binding\n\tSection 7: Enhancing Elements with Directives - Deep Dive\n\t\t147. Module Introduction\n\t\t148. Understanding Directives\n\t\t149. The Starting Project\n\t\t150. Analyzing a Built-in Attribute Directive: ngModel\n\t\t151. Analyzing a Built-in Structural Directive: ngIf\n\t\t152. Getting Started with Custom Directives\n\t\t153. Using Attribute Directives To Change Element Behavior\n\t\t154. Working with Inputs in Custom Directives\n\t\t155. Directives & Dependency Injection\n\t\t156. Building Another Directive\n\t\t157. Building a Custom Structural Directive\n\t\t158. Structural Directives & Syntactic Sugar\n\t\t159. Host Directives & Composition\n\tSection 8: Transforming Values with Pipes - Deep Dive\n\t\t160. Module Introduction\n\t\t161. Making Sense of Pipes\n\t\t162. Using Built-in Pipes\n\t\t163. More Built-in Pipes Examples\n\t\t164. Building a First Custom Pipe\n\t\t165. Using Custom Pipes to Perform Custom Transformations\n\t\t166. Accepting Parameters in Custom Pipes\n\t\t167. Chaining Pipes & Being Aware of Limitations\n\t\t168. Building a Pipe That Sorts Items\n\t\t169. Understanding How Pipes Are Executed\n\t\t170. Pure & Impure Pipes\n\t\t171. Pipe Limitations & When Not To Use Them\n\tSection 9: Understanding Services & Dependency Injection - Deep Dive\n\t\t172. Module Introduction\n\t\t173. The Starting Project & The Need For A Centralized Service\n\t\t174. Creating a Service\n\t\t175. How NOT To Provide A Service\n\t\t176. Using Angular's Dependency Injection Mechanism\n\t\t177. Using The Alternative Dependency Injection Syntax\n\t\t178. Outsourcing & Reusing Logic with Services\n\t\t179. Angular Has Multiple Injectors!\n\t\t180. There Are Multiple Ways Of Providing a Service\n\t\t181. Providing Services via the Element Injector\n\t\t182. Understanding the Element Injector's Behavior\n\t\t183. Injecting Services Into Services\n\t\t184. Analyzing Dependency Injection with the Angular DevTools\n\t\t185. Using Custom DI Tokens & Providers\n\t\t186. Preparing A Non-Class Value For Injection\n\t\t187. Injecting Other Values (NOT Services)\n\t\t188. Angular Modules (NgModule) & Dependency Injection\n\t\t189. Working with Services Without Using Signals\n\tSection 10: Making Sense of Change Detection - Deep Dive\n\t\t190. Module Introduction\n\t\t191. Analyzing the Starting Project\n\t\t192. Understanding How Angular Performs Change Detection\n\t\t193. Change Detection During Development: ExpressionChangedAfterChecked Errors\n\t\t194. Writing Efficient Template Bindings\n\t\t195. Avoiding Zone Pollution\n\t\t196. Using the OnPush Strategy\n\t\t197. Understanding the OnPush Strategy\n\t\t198. Working with OnPush & Signals\n\t\t199. Using Signals for Sharing Data Across Components (with OnPush)\n\t\t200. The Problem With OnPush, Cross-Component Data & Not Using Signals\n\t\t201. Triggering Change Detection Manually & Using RxJS Subjects\n\t\t202. Introducing The async Pipe\n\t\t203. Going Zoneless!\n\tSection 11: Working with RxJS (Observables) - Deep Dive\n\t\t204. Module Introduction\n\t\t205. What Are Observables & What Is RxJS?\n\t\t206. Creating & Using an Observable\n\t\t207. Working with RxJS Operators\n\t\t208. Working with Signals\n\t\t209. Signals vs Observables\n\t\t210. Converting Signals To Observables\n\t\t211. Converting Observables To Signals\n\t\t212. Deep Dive: Creating & Using A Custom Observable From Scratch\n\t\t213. Module Summary\n\tSection 12: Sending HTTP Requests & Handling Responses\n\t\t214. Module Introduction\n\t\t215. The Starting Projects: Frontend & Backend\n\t\t216. How To Connect Angular Apps To A Backend\n\t\t217. Optional: HTTP Essentials\n\t\t218. Getting Started with Angular's Http Client\n\t\t219. Providing the HttpClient when using NgModules\n\t\t220. Sending a GET Request To Fetch Data\n\t\t221. Configuring Http Requests\n\t\t222. Transforming & Using Response Data\n\t\t223. Showing a Loading Fallback\n\t\t224. Handling HTTP Errors\n\t\t225. Sending Data To A Backend\n\t\t226. More Data Fetching & Some Code Duplication\n\t\t227. Outsourcing HTTP Request Logic Into A Service\n\t\t228. Managing HTTP-loaded Data via a Service\n\t\t229. Implementing Optimistic Updating\n\t\t230. Potential Problems Introduced by Optimistic Updating\n\t\t231. Improved Optimistic Updating\n\t\t232. Implementing App-wide Error Management\n\t\t233. Practice: Sending DELETE Requests\n\t\t234. Introducing HTTP Interceptors\n\t\t235. Optional: Class-based Interceptors\n\t\t236. Introducing HTTP Response Interceptors\n\tSection 13: Handling User Input & Working with Forms (Template-driven & Reactive)\n\t\t237. Module Introduction\n\t\t238. Template-driven vs Reactive Forms\n\t\t239. Template-driven: Registering Form Controls\n\t\t240. Getting Access to the Angular-managed Form\n\t\t241. Extracting User Input Values\n\t\t242. Validating Input with Form Validation Directives\n\t\t243. Using the Form Validation Status To Provide User Feedback\n\t\t244. Adding Validation Styles\n\t\t245. Interacting With The Underlying Form Object In The Component\n\t\t246. Updating Form Values Programmatically\n\t\t247. Reactive Forms: Getting Started\n\t\t248. Syncing Reactive Form Definition & Template\n\t\t249. Handling Form Submission (Reactive Forms)\n\t\t250. Adding Validators To Reactive Forms\n\t\t251. Building Custom Validators\n\t\t252. Creating & Using Async Validators\n\t\t253. Interacting with the Form Programmatically\n\t\t254. Exercise: Problem\n\t\t255. Exercise: Solution\n\t\t256. Connecting & Registering Inputs For A Complex Form\n\t\t257. Working with Nested Form Groups\n\t\t258. Working with Form Arrays\n\t\t259. Practice: Adding More Validation\n\t\t260. Creating Multi-Input Validators / Form Group Validators\n\t\t261. Module Summary\n\tSection 14: Routing & Building Multi-page Single Page Applications\n\t\t262. Module Introduction\n\t\t263. What Is Routing?\n\t\t264. Enabling Routing & Adding a First Route\n\t\t265. Rendering Routes\n\t\t266. Registering Multiple Routes\n\t\t267. Adding Links The Right Way\n\t\t268. Styling Active Navigation Links\n\t\t269. Setting Up & Navigating To Dynamic Routes\n\t\t270. Extracting Dynamic Route Parameters via Inputs\n\t\t271. Extracting Dynamic Route Parameters via @Input()\n\t\t272. Extracting Dynamic Route Parameters via Observables\n\t\t273. Working with Nested Routes\n\t\t274. Route Links & Relative Links\n\t\t275. Accessing Parent Route Data From Inside Nested Routes\n\t\t276. Loading Data Based On Route Parameters In Child Routes\n\t\t277. Link Shortcuts & Programmatic Navigation\n\t\t278. Adding A \"Not Found\" Route\n\t\t279. Redirecting Users\n\t\t280. Splitting Route Definitions Across Multiple Files\n\t\t281. Activated Route vs Activated Route Snapshot\n\t\t282. Setting Query Parameters\n\t\t283. Extracting Query Parameters via Inputs\n\t\t284. Extracting Query Parameters via Observables\n\t\t285. Using Query Parameters For Data Manipulation\n\t\t286. Adding Static Data To Routes\n\t\t287. Resolving Route-related Dynamic Data\n\t\t288. Optional: Class-based Resolvers\n\t\t289. Accessing Route Data In Components\n\t\t290. Controlling Route Resolver Execution\n\t\t291. Setting & Resolving Titles\n\t\t292. Introducing Route Guards\n\t\t293. Optional: Class-based Guards\n\t\t294. Making Sense of The CanDeactivate Guard\n\t\t295. Improving The CanDeactivate Logic\n\t\t296. Reloading Pages via the Angular Router & Configuring Programmatic Navigation\n\tSection 15: Code Splitting & Deferrable Views\n\t\t297. Module Introduction\n\t\t298. What Is Lazy Loading / Code Splitting?\n\t\t299. Introducing Route-based Lazy Loading\n\t\t300. Implementing Route-based Lazy Loading\n\t\t301. Lazy Loading Entire Route Groups\n\t\t302. Using Lazy Loading & Routing to Lazy-load Services\n\t\t303. Introducing Deferrable Views\n\t\t304. Defer Loading Until Viewport Visibility\n\t\t305. Deferrable Views: Using Other Triggers\n\t\t306. Prefetching Lazy-loaded Code\n\t\t307. Deferrable Views: Summary\n\tSection 16: Deploying Angular Apps - CSR, SSR, SGA\n\t\t308. Module Introduction\n\t\t309. The Starting Project\n\t\t310. Preparing a Project For Deployment: Building It For Production\n\t\t311. Building SPAs: Pros & Cons\n\t\t312. SPAs: Deployment Example\n\t\t313. Using \"ng add\", \"ng deploy\" & Angular's Built-in Deployment Support\n\t\t314. Server-side Rendering (SSR) Introduction\n\t\t315. Setting Up SSR For An Angular App\n\t\t316. Building and Service an SSR App\n\t\t317. Authoring SSR-ready Code (Beware of Pitfalls!)\n\t\t318. SSR and Client-Server Mismatches\n\t\t319. Static Site Generation (SSG) Introduction\n\t\t320. Configuring & Using SSG\n\t\t321. Deployment Methods - A Summary\n\t\t322. SSR & SSG Deployment Example\n\tSection 17: Course Roundup & Next Steps\n\t\t323. Course Roundup\n\t\t324. Bonus: More Content!\n\t\t325. About The Rest Of This Course\n\t\t326. Where To Go Next?\n\tSection 18: The Basics [Angular < 16]\n\t\t327. About This Section\n\t\t328. Module Introduction\n\t\t329. How an Angular App gets Loaded and Started\n\t\t330. Components are Important!\n\t\t331. Creating a New Component\n\t\t332. Understanding the Role of AppModule and Component Declaration\n\t\t333. Working with Standalone Components\n\t\t334. Using Custom Components\n\t\t335. Creating Components with the CLI & Nesting Components\n\t\t336. Working with Component Templates\n\t\t337. Working with Component Styles\n\t\t338. Fully Understanding the Component Selector\n\t\tAssignment 1: Practicing Components\n\t\t339. [OPTIONAL] Assignment Solution\n\t\t340. What is Databinding?\n\t\t341. String Interpolation\n\t\t342. Property Binding\n\t\t343. Property Binding vs String Interpolation\n\t\t344. Event Binding\n\t\t345. Bindable Properties and Events\n\t\t346. Passing and Using Data with Event Binding\n\t\t347. Important: FormsModule is Required for Two-Way-Binding!\n\t\t348. Two-Way-Databinding\n\t\t349. Combining all Forms of Databinding\n\t\tAssignment 2: Practicing Databinding\n\t\t350. [OPTIONAL] Assignment Solution\n\t\t351. Understanding Directives\n\t\t352. Using ngIf to Output Data Conditionally\n\t\t353. Enhancing ngIf with an Else Condition\n\t\t354. Angular 17: Alternative \"if\" Syntax\n\t\t355. Styling Elements Dynamically with ngStyle\n\t\t356. Applying CSS Classes Dynamically with ngClass\n\t\t357. Outputting Lists with ngFor\n\t\t358. Angular 17: Alternative \"for\" Syntax\n\t\tAssignment 3: Practicing Directives\n\t\t359. [OPTIONAL] Assignment Solution\n\t\t360. Getting the Index when using ngFor\n\tSection 19: Course Project - The Basics [Angular < 16]\n\t\t361. About This Section\n\t\t362. Project Introduction\n\t\t363. Planning the App\n\t\t364. Creating a New App Correctly\n\t\t365. Setting up the Application\n\t\t366. Creating the Components\n\t\t367. Using the Components\n\t\t368. Adding a Navigation Bar\n\t\t369. Alternative Non-Collapsable Navigation Bar\n\t\t370. Creating a \"Recipe\" Model\n\t\t371. Adding Content to the Recipes Components\n\t\t372. Outputting a List of Recipes with ngFor\n\t\t373. Displaying Recipe Details\n\t\t374. Working on the ShoppingListComponent\n\t\t375. Creating an \"Ingredient\" Model\n\t\t376. Creating and Outputting the Shopping List\n\t\t377. Adding a Shopping List Edit Section\n\t\t378. Wrap Up & Next Steps\n\tSection 20: Debugging [Angular < 16]\n\t\t379. Understanding Angular Error Messages\n\t\t380. Debugging Code in the Browser Using Sourcemaps\n\tSection 21: Components & Databinding Deep Dive [Angular < 16]\n\t\t381. Module Introduction\n\t\t382. Splitting Apps into Components\n\t\t383. Property & Event Binding Overview\n\t\t384. Binding to Custom Properties\n\t\t385. Assigning an Alias to Custom Properties\n\t\t386. Binding to Custom Events\n\t\t387. Assigning an Alias to Custom Events\n\t\t388. Custom Property and Event Binding Summary\n\t\t389. Understanding View Encapsulation\n\t\t390. More on View Encapsulation\n\t\t391. Using Local References in Templates\n\t\t392. @ViewChild() in Angular 8+\n\t\t393. Getting Access to the Template & DOM with @ViewChild\n\t\t394. Projecting Content into Components with ng-content\n\t\t395. Understanding the Component Lifecycle\n\t\t396. Seeing Lifecycle Hooks in Action\n\t\t397. Lifecycle Hooks and Template Access\n\t\t398. @ContentChild() in Angular 8+\n\t\t399. Getting Access to ng-content with @ContentChild\n\t\t400. Wrap Up\n\t\tAssignment 4: Practicing Property & Event Binding and View Encapsulation\n\t\t401. [OPTIONAL] Assignment Solution\n\tSection 22: Course Project - Components & Databinding [Angular < 16]\n\t\t402. Introduction\n\t\t403. Adding Navigation with Event Binding and ngIf\n\t\t404. Passing Recipe Data with Property Binding\n\t\t405. Passing Data with Event and Property Binding (Combined)\n\t\t406. Make sure you have FormsModule added!\n\t\t407. Allowing the User to Add Ingredients to the Shopping List\n\tSection 23: Directives Deep Dive [Angular < 16]\n\t\t408. Module Introduction\n\t\t409. ngFor and ngIf Recap\n\t\t410. ngClass and ngStyle Recap\n\t\t411. Creating a Basic Attribute Directive\n\t\t412. Using the Renderer to build a Better Attribute Directive\n\t\t413. More about the Renderer\n\t\t414. Using HostListener to Listen to Host Events\n\t\t415. Using HostBinding to Bind to Host Properties\n\t\t416. Binding to Directive Properties\n\t\t417. What Happens behind the Scenes on Structural Directives\n\t\t418. Building a Structural Directive\n\t\t419. Understanding ngSwitch\n\tSection 24: Course Project - Directives [Angular < 16]\n\t\t420. Building and Using a Dropdown Directive\n\t\t421. Closing the Dropdown From Anywhere\n\tSection 25: Using Services & Dependency Injection [Angular < 16]\n\t\t422. Module Introduction\n\t\t423. Why would you Need Services?\n\t\t424. Creating a Logging Service\n\t\t425. Injecting the Logging Service into Components\n\t\t426. Alternative Injection Syntax\n\t\t427. Creating a Data Service\n\t\t428. Understanding the Hierarchical Injector\n\t\t429. How many Instances of Service Should It Be?\n\t\t430. Injecting Services into Services\n\t\t431. Using Services for Cross-Component Communication\n\t\t432. A Different Way Of Injecting Services\n\t\tAssignment 5: Practicing Services\n\t\t433. [OPTIONAL] Assignment Solution\n\tSection 26: Course Project - Services & Dependency Injection [Angular < 16]\n\t\t434. Introduction\n\t\t435. Setting up the Services\n\t\t436. Managing Recipes in a Recipe Service\n\t\t437. Using a Service for Cross-Component Communication\n\t\t438. Adding the Shopping List Service\n\t\t439. Using Services for Pushing Data from A to B\n\t\t440. Adding Ingredients to Recipes\n\t\t441. Passing Ingredients from Recipes to the Shopping List (via a Service)\n\tSection 27: Changing Pages with Routing [Angular < 16]\n\t\t442. Module Introduction\n\t\t443. Why do we need a Router?\n\t\t444. Understanding the Example Project\n\t\t445. Setting up and Loading Routes\n\t\t446. Navigating with Router Links\n\t\t447. Understanding Navigation Paths\n\t\t448. Styling Active Router Links\n\t\t449. Navigating Programmatically\n\t\t450. Using Relative Paths in Programmatic Navigation\n\t\t451. Passing Parameters to Routes\n\t\t452. Fetching Route Parameters\n\t\t453. Fetching Route Parameters Reactively\n\t\t454. An Important Note about Route Observables\n\t\t455. Passing Query Parameters and Fragments\n\t\t456. Retrieving Query Parameters and Fragments\n\t\t457. Practicing and some Common Gotchas\n\t\t458. Setting up Child (Nested) Routes\n\t\t459. Using Query Parameters - Practice\n\t\t460. Configuring the Handling of Query Parameters\n\t\t461. Redirecting and Wildcard Routes\n\t\t462. Important: Redirection Path Matching\n\t\t463. Outsourcing the Route Configuration\n\t\t464. An Introduction to Guards\n\t\t465. Protecting Routes with canActivate\n\t\t466. Protecting Child (Nested) Routes with canActivateChild\n\t\t467. Using a Fake Auth Service\n\t\t468. Controlling Navigation with canDeactivate\n\t\t469. Passing Static Data to a Route\n\t\t470. Resolving Dynamic Data with the resolve Guard\n\t\t471. Understanding Location Strategies\n\t\t472. Wrap Up\n\tSection 28: Course Project - Routing [Angular < 16]\n\t\t473. Planning the General Structure\n\t\t474. Setting Up Routes\n\t\t475. Adding Navigation to the App\n\t\t476. Marking Active Routes\n\t\t477. Fixing Page Reload Issues\n\t\t478. Child Routes: Challenge\n\t\t479. Adding Child Routing Together\n\t\t480. Configuring Route Parameters\n\t\t481. Passing Dynamic Parameters to Links\n\t\t482. Styling Active Recipe Items\n\t\t483. Adding Editing Routes\n\t\t484. Retrieving Route Parameters\n\t\t485. Programmatic Navigation to the Edit Page\n\t\t486. One Note about Route Observables\n\t\t487. Project Cleanup\n\tSection 29: Understanding Observables [Angular < 16]\n\t\t488. Module Introduction\n\t\t489. Install RxJS\n\t\t490. Analyzing Angular Observables\n\t\t491. Getting Closer to the Core of Observables\n\t\t492. Building a Custom Observable\n\t\t493. Errors & Completion\n\t\t494. Observables & You!\n\t\t495. Understanding Operators\n\t\t496. Subjects\n\t\t497. Wrap Up\n\t\t498. Useful Resources & Links\n\tSection 30: Course Project - Observables [Angular < 16]\n\t\t499. Improving the Reactive Service with Observables (Subjects)\n\t\t500. Changed the Subscription Name\n\tSection 31: Handling Forms in Angular Apps [Angular < 16]\n\t\t501. Module Introduction\n\t\t502. Why do we Need Angular's Help?\n\t\t503. Template-Driven (TD) vs Reactive Approach\n\t\t504. An Example Form\n\t\t505. TD: Creating the Form and Registering the Controls\n\t\t506. TD: Submitting and Using the Form\n\t\t507. TD: Understanding Form State\n\t\t508. TD: Accessing the Form with @ViewChild\n\t\t509. TD: Adding Validation to check User Input\n\t\t510. Built-in Validators & Using HTML5 Validation\n\t\t511. TD: Using the Form State\n\t\t512. TD: Outputting Validation Error Messages\n\t\t513. TD: Set Default Values with ngModel Property Binding\n\t\t514. TD: Using ngModel with Two-Way-Binding\n\t\t515. TD: Grouping Form Controls\n\t\t516. TD: Handling Radio Buttons\n\t\t517. TD: Setting and Patching Form Values\n\t\t518. TD: Using Form Data\n\t\t519. TD: Resetting Forms\n\t\tAssignment 6: Practicing Template-Driven Forms\n\t\t520. Introduction to the Reactive Approach\n\t\t521. Reactive: Setup\n\t\t522. Reactive: Creating a Form in Code\n\t\t523. Reactive: Syncing HTML and Form\n\t\t524. Reactive: Submitting the Form\n\t\t525. Reactive: Adding Validation\n\t\t526. Reactive: Getting Access to Controls\n\t\t527. Reactive: Grouping Controls\n\t\t528. Fixing a Bug\n\t\t529. Reactive: Arrays of Form Controls (FormArray)\n\t\t530. Reactive: Creating Custom Validators\n\t\t531. Reactive: Using Error Codes\n\t\t532. Reactive: Creating a Custom Async Validator\n\t\t533. Reactive: Reacting to Status or Value Changes\n\t\t534. Reactive: Setting and Patching Values\n\t\tAssignment 7: Practicing Reactive Forms\n\t\t535. [OPTIONAL] Assignment Solution\n\tSection 32: Course Project - Forms [Angular < 16]\n\t\t536. Introduction\n\t\t537. TD: Adding the Shopping List Form\n\t\t538. Adding Validation to the Form\n\t\t539. Allowing the Selection of Items in the List\n\t\t540. Loading the Shopping List Items into the Form\n\t\t541. Updating existing Items\n\t\t542. Resetting the Form\n\t\t543. Allowing the the User to Clear (Cancel) the Form\n\t\t544. Allowing the Deletion of Shopping List Items\n\t\t545. Creating the Template for the (Reactive) Recipe Edit Form\n\t\t546. Creating the Form For Editing Recipes\n\t\t547. Syncing HTML with the Form\n\t\t548. Fixing a Bug\n\t\t549. Adding Ingredient Controls to a Form Array\n\t\t550. Adding new Ingredient Controls\n\t\t551. Validating User Input\n\t\t552. Submitting the Recipe Edit Form\n\t\t553. Adding a Delete and Clear (Cancel) Functionality\n\t\t554. Redirecting the User (after Deleting a Recipe)\n\t\t555. Adding an Image Preview\n\t\t556. Providing the Recipe Service Correctly\n\t\t557. Deleting Ingredients and Some Finishing Touches\n\t\t558. Deleting all Items in a FormArray\n\tSection 33: Using Pipes to Transform Output [Angular < 16]\n\t\t559. Introduction & Why Pipes are Useful\n\t\t560. Using Pipes\n\t\t561. Parametrizing Pipes\n\t\t562. Where to learn more about Pipes\n\t\t563. Chaining Multiple Pipes\n\t\t564. Creating a Custom Pipe\n\t\t565. Parametrizing a Custom Pipe\n\t\t566. Example: Creating a Filter Pipe\n\t\t567. Pure and Impure Pipes (or: How to \"fix\" the Filter Pipe)\n\t\t568. Understanding the \"async\" Pipe\n\t\tAssignment 8: Practicing Pipes\n\tSection 34: Making Http Requests [Angular < 16]\n\t\t569. A New IDE\n\t\t570. Module Introduction\n\t\t571. How Does Angular Interact With Backends?\n\t\t572. The Anatomy of a Http Request\n\t\t573. Backend (Firebase) Setup\n\t\t574. Sending a POST Request\n\t\t575. GETting Data\n\t\t576. Using RxJS Operators to Transform Response Data\n\t\t577. Using Types with the HttpClient\n\t\t578. Outputting Posts\n\t\t579. Showing a Loading Indicator\n\t\t580. Using a Service for Http Requests\n\t\t581. Services & Components Working Together\n\t\t582. Sending a DELETE Request\n\t\t583. Handling Errors\n\t\t584. Using Subjects for Error Handling\n\t\t585. Using the catchError Operator\n\t\t586. Error Handling & UX\n\t\t587. Setting Headers\n\t\t588. Adding Query Params\n\t\t589. Observing Different Types of Responses\n\t\t590. Changing the Response Body Type\n\t\t591. Introducing Interceptors\n\t\t592. Manipulating Request Objects\n\t\t593. Response Interceptors\n\t\t594. Multiple Interceptors\n\t\t595. Wrap Up\n\t\t596. Useful Resources & Links\n\tSection 35: Course Project - Http [Angular < 16]\n\t\t597. Module Introduction\n\t\t598. Backend (Firebase) Setup\n\t\t599. Setting Up the DataStorage Service\n\t\t600. Storing Recipes\n\t\t601. Fetching Recipes\n\t\t602. Transforming Response Data\n\t\t603. Resolving Data Before Loading\n\t\t604. Fixing a Bug with the Resolver\n\tSection 36: Authentication & Route Protection in Angular\n\t\t605. Module Introduction\n\t\t606. How Authentication Works\n\t\t607. Adding the Auth Page\n\t\t608. Switching Between Auth Modes\n\t\t609. Handling Form Input\n\t\t610. Preparing the Backend\n\t\t611. Make sure you got Recipes in your backend!\n\t\t612. Preparing the Signup Request\n\t\t613. Sending the Signup Request\n\t\t614. Adding a Loading Spinner & Error Handling Logic\n\t\t615. Improving Error Handling\n\t\t616. Sending Login Requests\n\t\t617. Login Error Handling\n\t\t618. Creating & Storing the User Data\n\t\t619. Reflecting the Auth State in the UI\n\t\t620. Adding the Token to Outgoing Requests\n\t\t621. Attaching the Token with an Interceptor\n\t\t622. Adding Logout\n\t\t623. Adding Auto-Login\n\t\t624. Adding Auto-Logout\n\t\t625. Adding an Auth Guard\n\t\t626. Wrap Up\n\t\t627. Useful Resources & Links\n\tSection 37: Dynamic Components [Angular < 16]\n\t\t628. Module Introduction\n\t\t629. Adding an Alert Modal Component\n\t\t630. Understanding the Different Approaches\n\t\t631. Using ngIf\n\t\t632. Preparing Programmatic Creation\n\t\t633. Creating a Component Programmatically\n\t\t634. About entryComponents\n\t\t635. Understanding entryComponents\n\t\t636. Data Binding & Event Binding\n\t\t637. Wrap Up\n\t\t638. Useful Resources & Links\n\tSection 38: Angular Modules & Optimizing Angular Apps [Angular < 16]\n\t\t639. Module Introduction\n\t\t640. What are Modules?\n\t\t641. Analyzing the AppModule\n\t\t642. Getting Started with Feature Modules\n\t\t643. Splitting Modules Correctly\n\t\t644. Adding Routes to Feature Modules\n\t\t645. Component Declarations\n\t\t646. The ShoppingList Feature Module\n\t\t647. Understanding Shared Modules\n\t\t648. Understanding the Core Module\n\t\t649. Adding an Auth Feature Module\n\t\t650. Understanding Lazy Loading\n\t\t651. Implementing Lazy Loading\n\t\t652. More Lazy Loading\n\t\t653. Preloading Lazy-Loaded Code\n\t\t654. Modules & Services\n\t\t655. Loading Services Differently\n\t\t656. Useful Resources & Links\n\tSection 39: Standalone Components\n\t\t657. Module Introduction\n\t\t658. Starting Setup & Why We Want Standalone Components\n\t\t659. Building a First Standalone Component\n\t\t660. Standalone Components Are Now Stable\n\t\t661. Standalone Directives & Connecting Building Blocks\n\t\t662. Migrating Another Component\n\t\t663. A Standalone Root Component\n\t\t664. Services & Standalone Components\n\t\t665. Routing with Standalone Components\n\t\t666. Lazy Loading\n\t\t667. Summary\n\tSection 40: Angular Signals\n\t\t668. Module Introduction\n\t\t669. Signals: What & Why?\n\t\t670. Creating a New Signal\n\t\t671. Updating a Signal Value\n\t\t672. Reading & Outputting a Signal Value\n\t\t673. Signal Updating: set(), update() & mutate()\n\t\t674. Important: Signals are NOT Finished Yet!\n\t\t675. Signals: What's To Come?\n\t\t676. Computed Values & Effects\n\t\t677. Module Summary\n\tSection 41: Bonus: Using NgRx For State Management\n\t\t678. Module Introduction\n\t\t679. What Is NgRx?\n\t\t680. Understanding NgRx & Its Building Blocks\n\t\t681. Project Setup & Installing NgRx\n\t\t682. Adding a First Reducer & Store Setup\n\t\t683. An Alternative Way Of Creating Reducers\n\t\t684. Reading Data From The Store\n\t\t685. Introducing Actions & State Changing Reducers\n\t\t686. Dispatching Actions\n\t\t687. Attaching Data To Actions\n\t\t688. Handling Actions Without createReducer\n\t\t689. An Alternative Way Of Defining Actions\n\t\t690. Time To Practice: A Second Action\n\t\t691. Exploring Selectors\n\t\t692. Introducing Effects\n\t\t693. Installing the Effects Package\n\t\t694. Defining a First Effect\n\t\t695. The Old @Effect Decorator & Registering Effects\n\t\t696. Using Store Data In Effects\n\t\t697. Adding a Second Effect\n\t\t698. Summary\n\t\t699. NgRx - The Old Syntax\n\tSection 42: Angular Animations\n\t\t700. Making Animations Work with Angular 4+\n\t\t701. Introduction\n\t\t702. Setting up the Starting Project\n\t\t703. Animations Triggers and State\n\t\t704. Switching between States\n\t\t705. Transitions\n\t\t706. Advanced Transitions\n\t\t707. Transition Phases\n\t\t708. The \"void\" State\n\t\t709. Using Keyframes for Animations\n\t\t710. Grouping Transitions\n\t\t711. Using Animation Callbacks\n\tSection 43: Adding Offline Capabilities with Service Workers\n\t\t712. Module Introduction\n\t\t713. Adding Service Workers\n\t\t714. Caching Assets for Offline Use\n\t\t715. Caching Dynamic Assets & URLs\n\t\t716. Further Links & Resources\n\tSection 44: A Basic Introduction to Unit Testing in Angular Apps\n\t\t717. About this Section\n\t\t718. Introduction\n\t\t719. Why Unit Tests?\n\t\t720. Analyzing the Testing Setup (as created by the CLI)\n\t\t721. Running Tests (with the CLI)\n\t\t722. Adding a Component and some fitting Tests\n\t\t723. Testing Dependencies: Components and Services\n\t\t724. Simulating Async Tasks\n\t\t725. Using \"fakeAsync\" and \"tick\"\n\t\t726. Isolated vs Non-Isolated Tests\n\t\t727. Further Resources & Where to Go Next\n\tSection 45: Angular as a Platform & Closer Look at the CLI\n\t\t728. Module Introduction\n\t\t729. A Closer Look at \"ng new\"\n\t\t730. IDE & Project Setup\n\t\t731. Understanding the Config Files\n\t\t732. Important CLI Commands\n\t\t733. The \"angular.json\" File - A Closer Look\n\t\t734. Angular Schematics - An Introduction\n\t\t735. The \"ng add\" Command\n\t\t736. Using Custom \"ng generate\" Schematics\n\t\t737. Smooth Updating of Projects with \"ng update\"\n\t\t738. Simplified Deployment with \"ng deploy\"\n\t\t739. Understanding \"Differential Loading\"\n\t\t740. Managing Multiple Projects in One Folder\n\t\t741. Angular Libraries - An Introduction\n\t\t742. Wrap Up\n\tSection 46: Bonus: TypeScript Introduction (for Angular 2 Usage)\n\t\t743. Module Introduction\n\t\t744. What & Why?\n\t\t745. Installing & Using TypeScript\n\t\t746. Base Types & Primitives\n\t\t747. Array & Object Types\n\t\t748. Type Inference\n\t\t749. Working with Union Types\n\t\t750. Assigning Type Aliases\n\t\t751. Diving into Functions & Function Types\n\t\t752. Understanding Generics\n\t\t753. Classes & TypeScript\n\t\t754. Working with Interfaces\n\t\t755. Configuring the TypeScript Compiler\n\t\t756. Module Resources","details":[],"references":[],"createdDate":{"$date":"2024-10-08T06:25:24.908Z"},"updatedDate":{"$date":"2024-10-19T13:59:37.306Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"6704d8fc8805ada98b529324"},"uniqueId":"2ede4ac5-d640-471c-bf04-ec5e09411e37","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `In-Progress`]**: Master Microservices with SpringBoot, Docker, Kubernetes","skeleton":"Master Microservices with SpringBoot,Docker,Kubernetes\n\tSection 1: Introduction to Microservices Architecture\n\t\t1. Introduction to the course & Agenda\n\t\t2. Details of Source Code, PDF Content & other instructions for the course\n\t\t3. Evolution of Microservices architecture\n\t\t4. Comparisons between Monolithic, SOA & Microservices architecture\n\t\t5. Definition of Microservices\n\tSection 2: Building microservices using Spring Boot\n\t\t6. How to build microservices\n\t\t7. Introduction to SpringBoot framework\n\t\t8. Funny memes of SpringBoot framework\n\t\t9. Introduction to REST APIs & best practices\n\t\t10. IntelliJ IDEA Ultimate\n\t\t11. Creating a Spring Boot project\n\t\t12. Say Hello to your new AI Coding Companion\n\t\t13. Creating Hello World REST API using @RestController\n\t\t14. Configuring H2 DB & YAML properties\n\t\t15. Writing Spring Data JPA entities & repositories to interact with DB tables\n\t\t16. Introduction to DTO (Data Transfer Object) pattern\n\t\t17. Creating DTOs inside accounts microservice\n\t\t18. CREATE API inside accounts microservice - Part 1\n\t\t19. CREATE API inside accounts microservice - Part 2\n\t\t20. READ API inside accounts microservice\n\t\t21. UPDATE API inside accounts microservice\n\t\t22. DELETE API inside accounts microservice\n\t\t23. Handle all types of runtime exceptions using global logic inside accounts\n\t\t24. Perform input data validations inside accounts microservice\n\t\t25. Update audit columns using Spring Data\n\t\t26. Introduction to documentation of REST APIs using springdoc openapi\n\t\t27. Enhancing documentation of REST APIs using @OpenAPIDefinition\n\t\t28. Enhancing documentation of REST APIs using @Tag, @Operation, @ApiResponse\n\t\t29. Enhancing documentation of REST APIs using @Schema & example data - Part 1\n\t\t30. Enhancing documentation of REST APIs using @Schema & example data - Part 2\n\t\t31. Important Annotations & Classes that supports building REST services\n\t\t32. Assignment to build Loans & Cards microservices\n\t\t33. Deep dive and demo of Loans microservice\n\t\t34. Deep dive and demo of Cards microservice\n\tSection 3: How do we right size our microservices & identify boundaries\n\t\t35. Approaches to identify boundaries & right size microservices\n\t\t36. Sizing & identifying boundaries with a Bank App use case\n\t\t37. Sizing & identifying boundaries with a ecommerce migration use case\n\t\t38. Strangler Fig pattern\n\tSection 4: Handle deployment, portability & scalability of microservices using Docker\n\t\t39. Introduction to challenges while building, deploying microservices\n\t\t40. What are Containers & how they are different from VMs\n\t\t41. Definition of Containers, Containerization, Docker\n\t\t42. Introduction to Docker components & its architecture\n\t\t43. Docker installation & docker hub introduction\n\t\t44. Introduction to the three approaches for Docker image generation\n\t\t45. Generate Docker Image of Accounts microservice with Dockerfile - Part 1\n\t\t46. Generate Docker Image of Accounts microservice with Dockerfile - Part 2\n\t\t47. Generate Docker Image of Accounts microservice with Dockerfile - Part 3\n\t\t48. Running accounts microservice as a Docker container\n\t\t49. Challenges with Dockerfile approach to generate a Docker image\n\t\t50. Generate Docker Image of Loans microservice with Buildpacks\n\t\t51. Generate Docker Image of Cards microservice with Google Jib\n\t\t52. Compare Dockerfile, Buildpacks, Jib approaches\n\t\t53. Pushing Docker images from your local to remote Docker hub repository\n\t\t54. Introduction to Docker Compose\n\t\t55. Running all microservice containers using Docker Compose command\n\t\t56. Demo of docker compose commands\n\t\t57. Deep dive on Docker commands\n\t\t58. Introduction to Docker extensions and LogsExplorer\n\t\t59. Funny memes of Docker\n\tSection 5: Deep Dive on Cloud Native Apps & 15-Factor methodology\n\t\t60. Introduction to Cloud-native applications\n\t\t61. Important characteristics of cloud-native applications\n\t\t62. Differences between cloud-native Apps & Traditional enterprise Apps\n\t\t63. Introduction to 12-factor & 15-factor methodologies\n\t\t64. Deepdive on 15-factor methodology - Part 1\n\t\t65. Deepdive on 15-factor methodology - Part 2\n\t\t66. Deepdive on 15-factor methodology - Part 3\n\tSection 6: Configurations Management in Microservices\n\t\t67. Introduction to Configurations Management challenges inside microservices\n\t\t68. How Configurations work in Spring Boot\n\t\t69. Reading configurations using @Value annotation\n\t\t70. Reading configurations using Environment interface\n\t\t71. Reading configurations using @ConfigurationProperties\n\t\t72. Introduction to Spring Boot profiles\n\t\t73. Demo of Spring Boot profiles inside accounts microservice\n\t\t74. Externalizing configurations using command-line, JVM & environment options\n\t\t75. Activating the profile using command-line, JVM & environment options\n\t\t76. Assignment to make SpringBoot profile changes inside loans & cards microservices\n\t\t77. Demo of Spring Boot profile changes inside loans & cards microservices\n\t\t78. Drawbacks of externalized configurations using SpringBoot alone\n\t\t79. Introduction to Spring Cloud Config\n\t\t80. Building Config Server using Spring Cloud Config\n\t\t81. Reading configurations from the class path location of Config Server\n\t\t82. Updating Accounts Microservice to read properties from Config Server\n\t\t83. Updating Loans & Cards Microservice to read properties from Config Server\n\t\t84. Reading configurations from a file system location\n\t\t85. Reading configurations from a GitHub repository\n\t\t86. Encryption & Decryption of properties inside Config server\n\t\t87. Refresh configurations at runtime using refresh actuator path\n\t\t88. Refresh configurations at runtime using Spring Cloud Bus\n\t\t89. Refresh config at runtime using Spring Cloud Bus & Spring Cloud Config monitor\n\t\t90. Updating Docker Compose file to adapt Config Server changes - Part 1\n\t\t91. Introduction to Liveness and Readiness probes\n\t\t92. Updating Docker Compose file to adapt Config Server changes - Part 2\n\t\t93. Optimizing Docker Compose file\n\t\t94. Generating Docker images and pushing them into Docker Hub\n\t\t95. Testing Config Server changes end to end using Docker compose & default profile\n\t\t96. Preparing Docker Compose files for QA & prod profiles\n\tSection 7: Using MySQL Database inside microservices\n\t\t97. Create MySQL DB containers for microservices\n\t\t98. Update microservices code to replace H2 DB with MySQL DB\n\t\t99. Update docker compose file to create & use MySQL DB\n\t\t100. Running microservices & MySQL DB containers using docker compose file\n\t\t101. Demo of Docker network concept\n\tSection 8: Service Discovery & Service Registration in microservices\n\t\t102. Brief introduction about microservices traffic\n\t\t103. Introduction to the Service Discovery & Registration inside microservices\n\t\t104. Why not traditional load balancers for Microservices\n\t\t105. Service Discovery & Registration inside microservices\n\t\t106. How Client side Service Discovery & Load-balancing works\n\t\t107. Spring Cloud support for Service Discovery & Registration\n\t\t108. Setup Service Discovery agent using Eureka server\n\t\t109. Make code changes in Accounts microservice to connect Eureka Server\n\t\t110. Make code changes in Loans & Cards microservice to connect Eureka Server\n\t\t111. De-registration from Eureka server when microservices shutdown\n\t\t112. Demo of heartbeats mechanism to Eureka server from clients\n\t\t113. Feign Client code changes to invoke other microservices - Part 1\n\t\t114. Feign Client code changes to invoke other microservices - Part 2\n\t\t115. Eureka Self-Preservation mode to avoid network trap issues\n\t\t116. Generating Docker images with Service Discovery changes & push them into Dock\n\t\t117. Updating Docker Compose file to adapt Service Discovery changes\n\t\t118. Starting all the microservices using docker compose file\n\t\t119. Demo of Client Side Service Discovery & Load balancing\n\t\t120. IMPORTANT NOTE ON GRAALVM\n\tSection 9: Gateway, Routing & Cross cutting concerns in Microservices\n\t\t121. Challenges while dealing external communication in microservices\n\t\t122. Why we need a Edge Server or API Gateway inside microservices\n\t\t123. Introduction to Spring Cloud Gateway\n\t\t124. Deep dive on Spring Cloud Gateway internal architecture\n\t\t125. Building Edge Server using Spring Cloud Gateway\n\t\t126. Demo of Edge Server with default routing configs\n\t\t127. Make changes inside Gateway server to accept service names with lower case\n\t\t128. Implementing Custom Routing using Spring Cloud Gateway\n\t\t129. Demo of addResponseHeader filter\n\t\t130. Implementing Cross cutting concerns Tracing & Logging using Gateway - Part 1\n\t\t131. Implementing Cross cutting concerns Tracing & Logging using Gateway - Part 2\n\t\t132. Design patterns around API Gateway\n\t\t133. Generating and pushing Docker images with Spring Cloud Gateway changes\n\t\t134. Updating Docker Compose file to adapt Spring Cloud Gateway changes\n\tSection 10: Making Microservices Resilient\n\t\t135. Introduction to the need of Resiliency inside microservices\n\t\t136. Typical use case or scenario for the need of Resiliency\n\t\t137. Deepdive on Circuit Breaker pattern\n\t\t138. Three states of Circuit Breaker pattern\n\t\t139. Implementing Circuit Breaker pattern in Gateway - Part 1\n\t\t140. Implementing Circuit Breaker pattern in Gateway - Part 2\n\t\t141. Implementing Circuit Breaker pattern with Feign Client - Part 1\n\t\t142. Implementing Circuit Breaker pattern with Feign Client - Part 2\n\t\t143. Http timeout configurations\n\t\t144. Introduction to Retry pattern\n\t\t145. Implementing Retry pattern in Gateway\n\t\t146. Implementing Retry pattern in accounts - Part 1\n\t\t147. Implementing Retry pattern in accounts - Part 2\n\t\t148. Introduction to Rate Limitter pattern\n\t\t149. Introduction to Redis RateLimiter in Gateway Server\n\t\t150. Implementing Redis RateLimiter in Gateway Server\n\t\t151. Implementing RateLimiter pattern in accounts\n\t\t152. Introduction to Bulkhead pattern\n\t\t153. Aspect order of Resiliency patterns\n\t\t154. Demo of Resiliency patterns using Docker containers & Docker compose\n\tSection 11: Observability and monitoring of microservices\n\t\t155. Introduction to Observability And Monitoring Of Microservices\n\t\t156. Observability vs. Monitoring\n\t\t157. Introduction to centralized logging or Log Aggregation in microservices\n\t\t158. Introduction to managing logs with Grafana, Loki & Promtail\n\t\t159. IMPORTANT NOTE ON PROMTAIL\n\t\t160. Sample demo of logging using Grafana, Loki & promtail - Theory\n\t\t161. Implementing logging using Grafana, Loki & promtail - Part 1\n\t\t162. Implementing logging using Grafana, Loki & promtail - Part 2\n\t\t163. Implementing logging using Grafana, Loki & promtail - Part 3\n\t\t164. Managing metrics & monitoring with Actuator, Micrometer, Prometheus & Grafana\n\t\t165. Setup of micrometer inside microservices\n\t\t166. Setup of prometheus inside microservices\n\t\t167. Demo of Prometheus\n\t\t168. Demo of Prometheus & Grafana integration\n\t\t169. Demo of Grafana inbuilt & custom Dashboards\n\t\t170. Create Alerts & Send notifications using Grafana - Approach 1\n\t\t171. Create Alerts & Send notifications using Grafana - Approach 2\n\t\t172. Introduction to Distributed Tracing in microservices\n\t\t173. Introduction to OpenTelemetry\n\t\t174. Implement OpenTelemetry changes inside microservices\n\t\t175. Implementing Tracing using Grafana, Tempo & OpenTelemetry - Part 1\n\t\t176. Implementing Tracing using Grafana, Tempo & OpenTelemetry - Part 2\n\t\t177. Implementing Tracing using Grafana, Tempo & OpenTelemetry - Part 3\n\t\t178. Navigating to Tempo from Loki logs\n\t\t179. Conclusion of Observability and Monitoring\n\tSection 12: Microservices Security\n\t\t180. Introduction to Microservices Security\n\t\t181. Problems that OAuth2 solves\n\t\t182. Introduction to OAuth2\n\t\t183. OAuth2 jargons or terminologies or roles\n\t\t184. What is OpenID Connect & why it is important\n\t\t185. Introduction to IAM products & why KeyCloak\n\t\t186. Deep dive of Client Credentials grant type flow\n\t\t187. Securing Gateway server using Client Credentials grant type flow - Theory\n\t\t188. Setup Auth server using KeyCloak\n\t\t189. Register client details inside KeyCloak for Client credentials grant flow\n\t\t190. Getting Access token from Auth Server in Client credentials grant flow\n\t\t191. Securing Gateway server as a Resource server - Part 1\n\t\t192. Securing Gateway server as a Resource server - Part 2\n\t\t193. Implement Authorization inside Gateway server using Roles - Part 1\n\t\t194. Implement Authorization inside Gateway server using Roles - Part 2\n\t\t195. Deep dive of Authorization Code grant type flow\n\t\t196. Securing Gateway server using Authorization Code grant type flow - Theory\n\t\t197. Register client & end user inside KeyCloak for Authorization code grant flow\n\t\t198. Demo of Authorization code grant type flow\n\t\t199. Demo of Microservices Security using Docker containers & Docker compose - Part 1\n\t\t200. Demo of Microservices Security using Docker containers & Docker compose - Part 2\n\tSection 13: Event Driven microservices using RabbitMQ,Spring Cloud Functions & Stream\n\t\t201. Introduction to Event-driven microservices\n\t\t202. Introduction to Event-driven models\n\t\t203. What we are going to build using a pub sub model\n\t\t204. Introduction to RabbitMQ\n\t\t205. Why to use Spring Cloud Function\n\t\t206. Develop message microservice using Spring Cloud Functions - Part 1\n\t\t207. Develop message microservice using Spring Cloud Functions - Part 2\n\t\t208. Develop message microservice using Spring Cloud Functions - Part 3\n\t\t209. Why to use Spring Cloud Stream\n\t\t210. Update message & accounts microservices to stream & process the events - Part 1\n\t\t211. Demo of Async communication or event streaming using Rabbit MQ - Part 1\n\t\t212. Update message & accounts microservices to stream & process the events - Part 2\n\t\t213. Demo of Async communication or event streaming using Rabbit MQ - Part 2\n\t\t214. Demo of Async comm or event streaming using Docker containers & Docker compose\n\tSection 14: Event Driven microservices using Kafka, Spring Cloud Functions & Stream\n\t\t215. Apache Kafka Vs RabbitMQ\n\t\t216. Introduction to Apache Kafka\n\t\t217. Producer and Consumer side stories\n\t\t218. Installation of Apache Kafka\n\t\t219. Implement & Demo of Async communication or event streaming using Kafka\n\t\t220. Demo of Async comm or event streaming using Docker containers & Docker Compose\n\tSection 15: Container Orchestration using Kubernetes\n\t\t221. Introduction to the challenges related to container orchestration\n\t\t222. Introduction to Kubernetes\n\t\t223. Deep dive on Kubernetes internal architecture\n\t\t224. Setup a local Kubernetes cluster using Docker Desktop\n\t\t225. Deploying the Kubernetes Dashboard UI\n\t\t226. Deep dive on Kubernetes YAML configurations to deploy a microservice\n\t\t227. Deploying ConfigServer into Kubernetes Cluster\n\t\t228. Create environment variables inside Kubernetes Cluster using ConfigMap\n\t\t229. Preparing Kubernetes manifest files for remaining microservices\n\t\t230. Deploying remaining microservices into Kubernetes Cluster\n\t\t231. Automatic Self healing inside Kubernetes cluster\n\t\t232. Automatic Rollout & Rollback inside Kubernetes cluster\n\t\t233. Introduction to Kubernetes Service types\n\t\t234. Demo of Kubernetes Service types\n\t\t235. Problems with manually created Kubernetes manifest files\n\tSection 16: Deep dive on Helm\n\t\t236. Introduction to Helm & the problems that it solves\n\t\t237. Installing Helm\n\t\t238. Installing a sample Helm Chart\n\t\t239. Understanding Helm Chart structure\n\t\t240. Creating our own Helm chart & template files\n\t\t241. Creating Helm chart for Accounts microservice\n\t\t242. Creating Helm charts for other microservices\n\t\t243. Creating Helm charts for Dev, QA and Prod environment\n\t\t244. Demo of helm template command\n\t\t245. Install KeyCloak in Kubernetes Cluster using Helm Chart\n\t\t246. Install Kafka in Kubernetes Cluster using Helm Chart\n\t\t247. Install Prometheus in Kubernetes Cluster using Helm Chart\n\t\t248. Install Grafana Loki & Tempo in Kubernetes Cluster using Helm Chart\n\t\t249. Install Grafana in Kubernetes Cluster using Helm Chart\n\t\t250. Install eazybank microservices in Kubernetes Cluster using Helm Chart\n\t\t251. Demo of helm upgrade command\n\t\t252. Demo of helm history and rollback commands\n\t\t253. Demo of helm uninstall command\n\t\t254. Quick revision of important helm commands\n\tSection 17: Server-side service discovery and load balancing using Kubernetes\n\t\t255. Introduction to Server-side service discovery and load balancing\n\t\t256. How to setup discovery server in K8s cluster using spring cloud kubernetes\n\t\t257. Install spring cloud kubernetes discovery server in K8s cluster\n\t\t258. Making Kubernetes Discovery Client changes in microservices - Part 1\n\t\t259. Making Kubernetes Discovery Client changes in microservices - Part 2\n\t\t260. Updating Helm charts for Kubernetes Discovery Server changes\n\t\t261. Demo of Server-side service discovery and load balancing\n\tSection 18: Deploying microservices into cloud Kubernetes cluster\n\t\t262. Kubernetes support by Cloud providers\n\t\t263. Set up Google Cloud account & install Google Cloud SDK\n\t\t264. Create a Kubernetes cluster in Google Cloud\n\t\t265. Installing all our microservices and supporting components in Google Cloud K8s\n\t\t266. Demo of eazybank microservices using Google Cloud Kubernetes Cluster\n\t\t267. Validate Grafana components in Google Cloud Kubernetes Cluster\n\t\t268. Deleting the Google Cloud Kubernetes Cluster\n\tSection 19: Introduction to Kubernetes Ingress, Service Mesh (Istio) & mTLS\n\t\t269. Quick introduction to Kubernetes Ingress\n\t\t270. Deep dive on Kubernetes Ingress & Ingress Controller\n\t\t271. Benefits of Kubernetes Ingress & the kind of traffic it handles\n\t\t272. Introduction to Service Mesh & it's capabilities\n\t\t273. Introduction to Service mesh components\n\t\t274. Introduction to mTLS & deep dive on how TLS works\n\t\t275. How does mTLS works\n\tSection 20: Tips for the microservices developers\n\t\t276. Optimizing Microservices Development with Spring Boot BOM - Part 1\n\t\t277. Optimizing Microservices Development with Spring Boot BOM - Part 2\n\t\t278. Optimizing Microservices Development with Spring Boot BOM - Part 3\n\t\t279. Optimizing Microservices Development with Spring Boot BOM - Part 4\n\t\t280. Shared Libraries in Microservices - Part 1\n\t\t281. Shared Libraries in Microservices - Part 2\n\tSection 21: Thank You & Congratulations\n\t\t282. Congratulations & Thank You","details":[],"references":[],"createdDate":{"$date":"2024-10-08T07:02:20.238Z"},"updatedDate":{"$date":"2024-10-19T13:59:09.531Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"6704e6128805ada98b52a87a"},"uniqueId":"d0ac1a39-08bf-4dd3-a5f2-24bdcf800dbc","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `In-Progress`]**: Modern Java - Learn Java 8 Features By coding it","skeleton":"Modern Java - Learn Java 8 Features By coding it\n\tSection 1: Getting Started\n\t\t1. About Course\n\t\t\tWhat's Covered\n\t\t\t\tLambdas\n\t\t\t\tMethod References\n\t\t\t\tStreams API\n\t\t\t\tOptionals\n\t\t\t\tNew Date/Time APIs\n\tSection 2: Slides for the course\n\t\t2. Slides\n\tSection 3: Why Java 8 ?\n\t\t3. Why Java 8 is important ?\n\t\t\tJava is the most popular and widely accepted language in the world\n\t\t\tJava creators wanted to introduce the functional features such as:\n\t\t\t\tLambdas\n\t\t\t\tStreams\n\t\t\t\tOptional and etc.\n\t\t\tTechnological advancements with the mobile/laptops/systems\n\t\t\t\tTo make of multi-core processors\n\t\t\tNew **Java 8** features simplify the concurrency operations\n\t\t\tFunctional Programming\n\t\t\t\tEmbraces creating Immutable objects\n\t\t\t\tMore concise and readable code\n\t\t\t\tUsing functions/methods as first class citizens\n\t\t\t\t\tFunctional programming is going to let you create the function and assign that functionality to a variable and pass it around as like method parameters\n\t\t\t\t\tThis was never possible before java 8\n\t\t\t\t\tExample:\n\t\t\t\t\t\t```Function<String, String> addSomeString= (name)-> name.toUpperCase().concat(\"default\");```\n\t\t\t\tWrite code using **Declarative approach.**\n\t\t\tImperative vs Declarative Programming\n\t\t\t\tImperative Style of Programming\n\t\t\t\t\tFocuses on How to perform the operations\n\t\t\t\t\tEmbraces Object mutability\n\t\t\t\t\tThis style of programming lists the step by step of instructions on how to achieve an objective\n\t\t\t\t\tWe write code on What needs to be done in each step\n\t\t\t\t\tImperative style is used with classic Object Oriented Programming\n\t\t\t\tDeclarative Style of Programming\n\t\t\t\t\tFocuses on what is the result you want\n\t\t\t\t\tEmbraces Object immutability\n\t\t\t\t\tAnalogous to **SQL** (Structured Query Language)\n\t\t\t\t\tUse the functions that are already part of the library to achieve an objective\n\t\t\t\t\tFunctional Programming uses the concept of declarative programming\n\t\t4. Imperative vs Declarative Programming - Example 1\n\t\t5. Imperative vs Declarative Programming - Example 2\n\tSection 4: WorkSpace Setup - Mac\n\t\t6. Setting up IntelliJ\n\tSection 5: WorkSpace Setup - Windows\n\t\t7. Setting up IntelliJ\n\tSection 6: Source Code for this Course\n\t\t8. Source Code\n\tSection 7: Introduction to Lambda\n\t\t9. What is Lambda ?\n\t\t\t**Lambda** is equivalent to a function (method) without a name\n\t\t\tLambdas are also referred as **Anonymous** functions\n\t\t\t\tThey have all the qualities as a regular method such as\n\t\t\t\t\tMethod parameters\n\t\t\t\t\tMethod body\n\t\t\t\t\tReturn type\n\t\t\tLambdas are not tied to any class like a regular method\n\t\t\tLambda can also be assigned to variable and passed around\n\t\t\tSyntax of the lambda expression\n\t\t\t\t1. Lambda input parameters\n\t\t\t\t2. Arrow\n\t\t\t\t3. Lambda body\n\t\t\t\t\tIn case of single line of statement in body, curly braces can be omitted\n\t\t\tUsages of Lambda\n\t\t\t\tLambda is mainly used to implement Functional Interfaces(SAM)\n\t\t\t\t\tSAM stands for **Single Abstract Method** interfaces\n\t\t10. Lab : Implement Runnable using Lambda\n\t\t11. Lab : Implement Comparator using Lambda\n\tSection 8: Lambdas and Functional Interfaces\n\t\t12. Introduction to Functional Interfaces\n\t\t13. Lab : Consumer Functional Interface - Part 1\n\t\t14. Lab : Consumer Functional Interface - Part 2\n\t\t15. Lab : BiConsumer Functional Interface\n\t\t16. Lab : Predicate - Functional Interface - Part 1\n\t\t17. Lab : Predicate - Functional Interface - Part 2\n\t\t18. Lab : Combining Predicate + Consumer\n\t\t19. Lab : BiPredicate\n\t\t20. Lab : Function - Function Interface- Part 1\n\t\t21. Lab : Function - Function Interface- Part 2\n\t\t22. Lab : BiFunction Functional Interface\n\t\t23. Lab : UnaryOperaror and BinaryOperator Functional Interface\n\t\t24. Lab : Supplier - Functional Interface\n\tSection 9: Constructor and Method References\n\t\t25. Method Reference\n\t\t26. Lab : Method Reference - Function\n\t\t27. Lab : Method Reference - Consumer\n\t\t28. Lab : Refactor Lambda Expression to Method Reference\n\t\t29. Constructor Reference\n\tSection 10: Lambdas and Local variables ( Effectively Final )\n\t\t30. Lab : Local Variables in Lambda Expression\n\t\t31. Effectively Final Variables in Lambda and its advantages\n\tSection 11: Streams API\n\t\t32. Introduction to Streams\n\t\t33. How Stream API works ?\n\t\t34. Comparing Streams vs Collections\n\t\t35. Lab : How to debug Stream Operations?\n\tSection 12: Stream API - Operations\n\t\t36. Lab : Stream Operation - map()\n\t\t37. Lab : Stream Operation - flatMap()\n\t\t38. Lab : Stream Operation - distinct() , count(), sorted()\n\t\t39. Lab : Stream Operation - Customized sort using Comparator\n\t\t40. Lab : Stream Operation - filter()\n\t\t41. Lab : Stream Operation - reduce() - Part 1\n\t\t42. Lab : Stream Operation - reduce() - Part 2\n\t\t43. Lab : Stream Operations - Map + Filter + Reduce Pattern\n\t\t44. Lab : Stream Operation : max using reduce() function\n\t\t45. Lab : Stream Operation - min() using reduce function.\n\t\t46. Lab : Stream Operation - limit() and skip()\n\t\t47. Lab : Stream Operation allMatch(), anyMatch() and noneMatch()\n\t\t48. Lab : Stream Operation - findAny() and findFirst()\n\t\t49. Streams: Short Circuiting Operations\n\tSection 13: Streams API - Factory Methods\n\t\t50. Lab : Streams Operation - of(), iterate(), generate()\n\tSection 14: Streams API - Numeric Streams\n\t\t51. Introduction to Numeric Streams\n\t\t52. Lab : NumericStream - range() , rangeClosed(), count(), foreach()\n\t\t53. Lab : NumericStream - sum() , max(), min(), average()\n\t\t54. Lab : NumericStream - Boxing ,Unboxing, mapToInt()\n\t\t55. Lab : NumericStream - mapToObj(), mapToDouble(), maptoLong()\n\tSection 15: Streams API - Terminal Operations\n\t\t56. Lab : joining()\n\t\t57. Lab : counting()\n\t\t58. Lab : mapping()\n\t\t59. Lab : minBy() , maxBy() using collect()\n\t\t60. Lab : sum() , avg() using collect()\n\t\t61. Lab : groupingBy() - Type 1\n\t\t62. Lab : groupingBy() - Type 2\n\t\t63. Lab : groupingBy() - Type 3\n\t\t64. Lab : groupingBy() - maxBy(), minBy(), collectingAndThen()\n\t\t65. Lab : partitioningBy()\n\tSection 16: Streams API - Parallel Processing\n\t\t66. Introduction to Parallel Streams\n\t\t67. Lab : Comparing Performance of Sequential vs Parallel Streams\n\t\t68. How Parallel Stream works ?\n\t\t69. Lab : Build a Parallel Stream Pipeline\n\t\t70. Lab : When not to use Parallel Stream - Example 1\n\t\t71. Lab : When not to use Parallel Stream ? - Part 2\n\tSection 17: Optional\n\t\t72. Introduction to Optional\n\t\t73. Lab : Optional : empty(), ofNullable(), Of()\n\t\t74. Lab : orElse(), orElseGet() ,orElseThrow()\n\t\t75. Lab : ifPresent(), isPresent()\n\t\t76. Lab : map(), flatMap(), filter() - Part1\n\t\t77. Lab : map(), flatMap(), filter() - Part2\n\tSection 18: Default/Static Methods in Interfaces\n\t\t78. Introduction to Default/static Methods\n\t\t79. Lab : Default Methods\n\t\t80. Lab : Exploring sort() operations using Comparator - Part 1\n\t\t81. Lab : Exploring sort() operations using Comparator - Part 2\n\t\t82. Lab : Creating an Interface with Default/Static methods\n\t\t83. Abstract Classes vs Interfaces\n\t\t84. Lab : Multiple Inheritance\n\t\t85. Lab : Multiple Inheritance - Resolving Conflicts\n\tSection 19: New Date/Time APIs\n\t\t86. Introduction to the new Data/Time Libraries\n\t\t87. Lab : LocalDate - Create, Get the LocalDate values\n\t\t88. Lab : LocalDate - Modify the LocalDate\n\t\t89. Lab : LocalDate - Additional LocalDate functions\n\t\t90. Lab : LocalTime\n\t\t91. Lab : LocalDateTime - Create/Modify LocalDateTime\n\t\t92. Lab : Converting from LocalDate/LocalTime to LocalDateTime\n\t\t93. Lab : Comparing Dates - Period\n\t\t94. Lab : Comparing Times - Duration\n\t\t95. Lab : Instant\n\t\t96. Lab : TimeZones - ZonedDateTime, ZoneId , ZoneOffset\n\t\t97. Lab : TimeZones - Converting Instant,LocalDateTime to ZonedDateTime\n\t\t98. Lab : Converting java.util.Date/java.sql.date to LocalDate\n\t\t99. Lab : Format/parse LocalDate using DateTimeFormatter\n\t\t100. Lab : Format/parse LocalTime using DateTimeFormatter\n\t\t101. Lab : Format/parse LocalDateTime using DateTimeFormatter\n\tSection 20: What's Next ?\n\t\t102. What's Next? - Learn Parallel and Asynchronous Programming using Functional APIs\nSource Code\n\tGitHub Link: [https://github.com/dilipsundarraj1/java-8](https://github.com/dilipsundarraj1/java-8)\n","details":[],"references":[],"createdDate":{"$date":"2024-10-08T07:58:10.638Z"},"updatedDate":{"$date":"2024-10-19T13:58:27.979Z"},"__v":0,"skeletonTextType":"indented-string"}
{"_id":{"$oid":"670763a0f45e2af7939cc9e4"},"uniqueId":"b020838b-33c8-4774-a413-232ca86413a2","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `In-Progress`]**: Spring Security 6 Zero to Master along with JWT,OAUTH2","skeleton":"Spring Security 6 Zero to Master along with JWT,OAUTH2\n\tSection 1: Getting Started\n\t\t1. Course Introduction\n\t\t\tSpring Security is de-facto standard framework for implementing security inside any spring based application\n\t\t\t\tSpring Security can be used to any type of java application, like\n\t\t\t\t\tMonolithic application\n\t\t\t\t\tMVC Application\n\t\t\t\t\tSimple backend application with REST APIs\n\t\t\t\t\tMicroservices application\n\t\t\t\t\tFullstack application\n\t\t\t\t\t\twhere on Frontend having React or Angular and in backend having Spring Boot application\n\t\t\tCourse Agenda\n\t\t\t\tBasic Concepts\n\t\t\t\t\tIntroduction to the world of Spring Security\n\t\t\t\t\tSecuring a web app using Spring Security\n\t\t\t\t\tImportant Interfaces, Classes, Annotations of Spring Security\n\t\t\t\t\tConfiguring Authentication & Authorization for a web app\n\t\t\t\tAdvanced concepts\n\t\t\t\t\tImplementing role-based access using ROLES, AUTHORITIES\n\t\t\t\t\tDifferent strategies that Spring Security provides when coming to passwords\n\t\t\t\t\t\tlike hashing.\n\t\t\t\t\tMethod level security using Spring Security\n\t\t\t\t\t\tHow to secure java methods using spring security\n\t\t\t\t\tHow to handle most common attacks like CORS, CSRF, with Spring Security\n\t\t\t\t\tDeep dive on JWT and its role in Authentication and Authorization\n\t\t\t\t\tDeep dive on OAUTH2, OpenID and securing a web application using the same\n\t\t\t\t\tExploring Authorization servers available like Keycloack, Spring Authorization Server\n\t\t\t\t\tImportant topics of Security like Hashing, Tokens and many more\n\t\t\t\tThis course is also going to answer most of the security questions that you may have, like\n\t\t\t\t\tSECURITY\n\t\t\t\t\t\tHow can I implement security to my web/mobile application so that there won't be any security breaches in my application?\n\t\t\t\t\tPASSWORDS\n\t\t\t\t\t\tHow to store passwords, validate them, encode, decode them using industry standard hashing algorithms?\n\t\t\t\t\tAUTHENTICATION\n\t\t\t\t\t\tHow should users authenticate into the application and what are the different methods available?\n\t\t\t\t\tAUTHORIZATION\n\t\t\t\t\t\tHow can role-based or attribute-based access control be implemented?\n\t\t\t\t\tMETHOD LEVEL SECURITY\n\t\t\t\t\t\tHow can I implement security at method level of my application using authorization rules\n\t\t\t\t\tCSRF & CORS\n\t\t\t\t\t\tWhat is CSRF attacks and CORS restrictions. How to handle them inside web applications?\n\t\t\t\t\tJWT, OAUTH2, OPENID\n\t\t\t\t\t\tWhat is JWT, OAUTH2 and OpenID. How I can protect my web application using them?\n\t\t\t\t\tPREVENTING ATTACKS\n\t\t\t\t\t\tHow to prevent security attacks like Brute force, stealing of data, session fixation?\n\t\t\tProject Roadmap\n\t\t\t\tMilestone 1\n\t\t\t\t\tFirstly we will create a simple spring security project and enable basic security in it\n\t\t\t\tMilestone 2\n\t\t\t\t\tAuthentication using login screen will be implemented along with the URLs security, CSRF and CORS protection\n\t\t\t\tMilestone 3\n\t\t\t\t\tAuthorization will be implemented using ROLES, AUTHORITIES\n\t\t\t\tMilestone 4\n\t\t\t\t\tMethod level security will be implemented along with custom filters in the authentication and authorization process\n\t\t\t\tMilestone 5\n\t\t\t\t\tFinally the application will be enhanced with OAUTH2/OpenID using JWT which is the most common security approach in the industry\n\t\t2. Details of Source Code, PDF Content & other instructions for the course\n\t\t3. IntelliJ IDEA Ultimate\n\t\t4. Creating a simple Spring Boot app with out security - Part 1\n\t\t\tSteps\n\t\t\t\t1. Create a new spring boot project (from Spring Initializer) with below dependencies\n\t\t\t\t\tSpring Web\n\t\t\t\t\tSpring Boot Dev Tools\n\t\t\t\t2. Download and extract project\n\t\t5. Creating a simple Spring Boot app with out security - Part 2\n\t\t\tSteps\n\t\t\t\t3. Create a controller\n\t\t\t\t4. Configure application.properties\n\t\t\t\t5. Optionally configure `@ComponentScan`, if controller classes are outside the main application package\n\t\t6. Securing Spring Boot basic app using Spring Security & static credentials\n\t\t\tSteps\n\t\t\t\tAdd `Spring Security` dependency in spring boot application\n\t\t\t\tAfter doing this, we will get a password in console, if we restart application\n\t\t\t\t\tAfter entering the credentials, spring security will allow to visit the secured pages in application\n\t\t\t\t\tAlso it will remember the session on that particular browser\n\t\t7. Say Hello to your new AI Coding Companion\n\t\t8. Funny memes on Security\n\t\t9. What is Security & Why it is important\n\t\t\tdue to\n\t\t\t\tSecuring `valuable assets` (`data` like credit card details, transactions, health records ), the application contain\n\t\t\tWhat is Security and Why we need it?\n\t\t\t\tWhat is security?\n\t\t\t\t\tSecurity is for protecting your `data` and `business logic` inside your web applications.\n\t\t\t\tSecurity is a non-functional requirement\n\t\t\t\t\tFunctional requirement examples\n\t\t\t\t\t\tBusiness Logic\n\t\t\t\t\t\t`Data` to be stored\n\t\t\t\t\t\tHow the UI should be displayed\n\t\t\t\t\tNon-Functional requirements examples\n\t\t\t\t\t\tSecurity\n\t\t\t\t\t\tPerformance\n\t\t\t\t\t\tScalability\n\t\t\t\t\t\tAvailability\n\t\t\t\t\tSecurity is very important similar to scalability, performance and availability. No client will specifically asks that I need security.\n\t\t\t\tSecurity from development phase\n\t\t\t\t\tSecurity should be considered right from development phase itself along with business logic\n\t\t\t\t\tNow these days, there is trend to move Security to the `left side of the SDLC`\n\t\t\t\t\t\tDifferent phases of SDLC\n\t\t\t\t\t\t\tPlanning\n\t\t\t\t\t\t\tDesign\n\t\t\t\t\t\t\tDevelopment\n\t\t\t\t\t\t\tTesting\n\t\t\t\t\t\t\tDeployment\n\t\t\t\t\t\tEarlier Organization used to follow Security from `testing phase`\n\t\t\t\t\t\t\tDue to this, `regression issues` used to occurred\n\t\t\t\t\t\tNow these days Organizations try to move Security more towards Planning stage\n\t\t\t\t\t\tThe more early you try to think about security, the better application you are going to build\n\t\t\t\t\t\tIn general , now these days, companies try to secure application from `development` phase\n\t\t\t\t\t`DevSecOps` - New term after `DevOps`\n\t\t\t\t\t\tThis means, Development Team, Security Team and Operations Team- They all work together to build a proper secured web application\n\t\t\t\tDifferent types of Security\n\t\t\t\t\tSecurity for a web application will be implemented in different way like using firewalls, HTTPS, SSL, Authentication, Authorization etc.\n\t\t\t\tWhy Security important?\n\t\t\t\t\tSecurity doesn't mean only loosing data or money but also the brand and trust from your users which you have built over years.\n\t\t\t\tAvoiding most common attacks\n\t\t\t\t\tUsing Security we should also avoid most common security attacks like CSRF, Session Fixation, XSS, CORS etc. inside our application.\n\t\t\tTypical security measures that an organization is going to follow for its web applications\n\t\t\t\tThere are multiple layers inside an organizational infrastructure\n\t\t\t\t\tCloud Environment\n\t\t\t\t\tVirtual machines\n\t\t\t\t\tOperating System\n\t\t\t\t\t\tContainers\n\t\t\t\t\t\tWeb/App Servers\n\t\t\t\tSecurity mechanisms of different layers and their owners\n\t\t\t\t\tCloud Environment (Admin)\n\t\t\t\t\t\tHandle DDoS Attacks\n\t\t\t\t\t\tFirewalls\n\t\t\t\t\tVirtual Machines (Admin)\n\t\t\t\t\t\tSecurity Access\n\t\t\t\t\t\tNetwork Security\n\t\t\t\t\tOperating System (Admin)\n\t\t\t\t\t\tRegular Updates and Patching\n\t\t\t\t\t\tAntivirus and Malware protection\n\t\t\t\t\tContainers (Admin)\n\t\t\t\t\t\tUse Trusted Images\n\t\t\t\t\t\tMinimize Attack Surface\n\t\t\t\t\t\tImplement Container Isolation\n\t\t\t\t\tWeb/App Server (Admin)\n\t\t\t\t\t\tRegular Security Updates\n\t\t\t\t\t\tAccess Control\n\t\t\t\t\t\tWeb Application Firewall (WAF)\n\t\t\t\t\tWeb Apps/ Services (Development Team)\n\t\t\t\t\t\tAuthentication\n\t\t\t\t\t\tAuthorization\n\t\t\t\t\t\tProtection from exploits like CSRF, CORS etc.\n\t\t\t\tSpring Security plays crucial role in `Web Apps/Services` layer\n\t\t\tSummary\n\t\t\t\tAuthentication means `Login Screen`\n\t\t\t\tAuthorization means `Role based Access`\n\t\t10. Quick introduction to Servlets & Filters\n\t\t\tWhat is a servlet?\n\t\t\t\tIn Java web apps, `Servlet Container (Web Server)` takes care of `translating the HTTP messages` for Java code to understand.\n\t\t\t\t\tOne of the mostly used servlet container is Apache Tomcat.\n\t\t\t\t\tServlet container converts the HTTP messages into ServletRequest or HTTPServletRequest and hand over to Servlet method as a parameter.\n\t\t\t\t\tSimilarly, ServletResponse or HTTPServletResponse returns as an output to Servlet Container from Servlet.\n\t\t\t\t\tSo everything we write inside Java web apps are driven by Servlets.\n\t\t\tWhat is a filter?\n\t\t\t\tFilters inside Java web applications can be used to intercept each request/response and do some pre-work before our business logic.\n\t\t\t\t\tSo using the same filters, Spring Security enforce security based on our configurations inside a web application\n\t\t\t**request/response flow** in a web application\n\t\t\t\t**Sample Request/Response Flow in a Java Web Application:**\n\t\t\t\t\t1. **Client Request:**\n\t\t\t\t\t\t- The client (browser, mobile app, etc.) sends an HTTP request (e.g., GET, POST) to the web application, which is deployed on a **servlet container** or **web server** (e.g., Tomcat, Jetty).\n\t\t\t\t\t2. **Servlet Container (Request Translation):**\n\t\t\t\t\t\t- The **Servlet Container** (e.g., Tomcat) receives the HTTP request and converts it into a **`HttpServletRequest`** object (which extends `ServletRequest`) that encapsulates all request details, such as headers, parameters, and payload (body).\n\t\t\t\t\t3. **Filters (Pre-processing Request):**\n\t\t\t\t\t\t- **Filters** (if configured) intercept the request before it reaches the servlet. Filters can be used for:\n\t\t\t\t\t\t\t- Authentication and authorization (e.g., checking JWT tokens).\n\t\t\t\t\t\t\t- Logging requests.\n\t\t\t\t\t\t\t- Input validation.\n\t\t\t\t\t\t\t- Modifying the request (e.g., adding headers).\n\t\t\t\t\t\t- Filters call the next filter in the chain, eventually passing the request along the filter chain to the target servlet.\n\t\t\t\t\t4. **Servlet (Business Logic Execution):**\n\t\t\t\t\t\t- Once the request passes through the filter chain, it reaches the **Servlet** (or the mapped controller in frameworks like Spring MVC).\n\t\t\t\t\t\t- The servlet processes the request, executing the core **business logic** (e.g., accessing the database, performing operations, etc.).\n\t\t\t\t\t\t- The servlet generates the **response**, typically by creating a **`HttpServletResponse`** object (which extends `ServletResponse`).\n\t\t\t\t\t5. **Filters (Post-processing Response):**\n\t\t\t\t\t\t- After the servlet processes the request and generates the `HttpServletResponse`, the response goes back through the filter chain. Filters can:\n\t\t\t\t\t\t\t- Modify or add to the response (e.g., adding security headers like CORS or modifying the content).\n\t\t\t\t\t\t\t- Log the response for monitoring or auditing purposes.\n\t\t\t\t\t6. **Servlet Container (Response Translation):**\n\t\t\t\t\t\t- Once the response has passed through the filter chain, the **Servlet Container** converts the **`HttpServletResponse`** object back into an **HTTP response message** (i.e., headers, status code, and response body).\n\t\t\t\t\t\t- This HTTP response message is sent back to the client.\n\t\t\t\t\t7. **Client Receives Response:**\n\t\t\t\t\t\t- The client (browser, mobile app, etc.) receives the HTTP response and processes it accordingly (e.g., rendering HTML, handling JSON responses in JavaScript, etc.).\n\t\t\t\t**Expanded Example (Adding more details):**\n\t\t\t\t\t1. **Client sends a request:**\n\t\t\t\t\t\t- A user clicks a link or submits a form, sending an HTTP request (e.g., `GET /users`, `POST /login`) to a Java-based web application deployed in a servlet container (e.g., Tomcat).\n\t\t\t\t\t2. **Servlet Container converts HTTP request to `HttpServletRequest`:**\n\t\t\t\t\t\t- The servlet container (e.g., Tomcat) translates the raw HTTP request into an **`HttpServletRequest`** Java object. This object contains details like the request URL, parameters, headers, and body (for `POST` requests).\n\t\t\t\t\t3. **Pre-processing by Filters (request interception):**\n\t\t\t\t\t\t- Filters (like security filters, logging filters) intercept the request before it reaches the servlet. For example:\n\t\t\t\t\t\t\t- An **authentication filter** checks if the user is authorized by validating a token in the request headers.\n\t\t\t\t\t\t\t- A **logging filter** logs details about the request, such as the request URL and time of access.\n\t\t\t\t\t\t- The filters can modify the request or pass it down the **filter chain** to the next filter or servlet.\n\t\t\t\t\t4. **Request reaches the Servlet (business logic execution):**\n\t\t\t\t\t\t- After the filters, the request is handled by the **Servlet**. For instance:\n\t\t\t\t\t\t\t- If it’s a login request (`POST /login`), the servlet might validate the user credentials against the database.\n\t\t\t\t\t\t\t- The servlet processes the request and creates an **`HttpServletResponse`** object, which will hold the response details (status code, headers, response body).\n\t\t\t\t\t5. **Post-processing by Filters (response interception):**\n\t\t\t\t\t\t- After the servlet processes the request and generates a response, the response passes back through the **filter chain**. Filters can:\n\t\t\t\t\t\t\t- Add security headers (e.g., **CORS headers**).\n\t\t\t\t\t\t\t- Modify the response body or add additional headers.\n\t\t\t\t\t\t\t- Perform response compression (like **GZIP compression**).\n\t\t\t\t\t6. **Servlet Container translates `HttpServletResponse` to HTTP response:**\n\t\t\t\t\t\t- The servlet container takes the **`HttpServletResponse`** object and converts it into an **HTTP response message**. This message contains:\n\t\t\t\t\t\t\t- **Status code** (e.g., `200 OK`, `404 Not Found`).\n\t\t\t\t\t\t\t- **Headers** (e.g., `Content-Type: application/json`).\n\t\t\t\t\t\t\t- **Body** (e.g., the actual HTML or JSON data).\n\t\t\t\t\t\t- The servlet container sends this HTTP response message back to the client.\n\t\t\t\t\t7. **Client receives the response:**\n\t\t\t\t\t\t- The client (e.g., a browser) receives the HTTP response and processes it. For example:\n\t\t\t\t\t\t\t- A browser renders the HTML content for display.\n\t\t\t\t\t\t\t- A JavaScript app processes a JSON response to update the UI dynamically.\n\t\t\t\t**Example with JWT Token Authentication:**\n\t\t\t\t\t1. **Client sends a request with JWT:**\n\t\t\t\t\t\t- The client sends a request (e.g., `GET /profile`) with an **Authorization header** containing a **JWT token** (`Authorization: Bearer <token>`).\n\t\t\t\t\t2. **JWT Filter validates token:**\n\t\t\t\t\t\t- A **JWT authentication filter** intercepts the request, extracts the token, and validates it (checks if it's expired, issued by a trusted source, etc.).\n\t\t\t\t\t3. **Servlet processes request if the token is valid:**\n\t\t\t\t\t\t- If the token is valid, the request proceeds to the servlet, where the business logic is executed (e.g., fetching the user's profile from the database).\n\t\t\t\t\t4. **Filters handle post-processing (e.g., adding headers):**\n\t\t\t\t\t\t- After the servlet generates the response, post-processing filters may add security headers (e.g., `Strict-Transport-Security` or `X-Frame-Options`) before sending the response back to the client.\n\t\t\t\tThis is a full lifecycle of how a Java web application handles requests and responses using a servlet-based architecture.\n\t\t\tOverview of Spring Security filters\n\t\t\t\t**Spring Security Filters - Order of Execution**\n\t\t\t\t\tIn Spring Security, filters are applied in a specific order based on their function, with each filter playing a role in securing the request. Below is a list of Spring Security filters in the order of their execution, along with a brief description of each:\n\t\t\t\t\t\t1. **`WebAsyncManagerIntegrationFilter`**\n\t\t\t\t\t\t\t- Integrates Spring Security with **Spring Web’s `AsyncManager`** to handle security in asynchronous web requests.\n\t\t\t\t\t\t2. **`SecurityContextPersistenceFilter`**\n\t\t\t\t\t\t\t- Responsible for managing the **`SecurityContext`** between requests (storing and retrieving it, typically from the HTTP session).\n\t\t\t\t\t\t3. **`HeaderWriterFilter`**\n\t\t\t\t\t\t\t- Adds various **security headers** to the response, such as `X-Content-Type-Options`, `X-Frame-Options`, and `X-XSS-Protection`.\n\t\t\t\t\t\t4. **`CsrfFilter`**\n\t\t\t\t\t\t\t- Handles **CSRF (Cross-Site Request Forgery) protection**, ensuring that requests requiring state changes (like POST, PUT, DELETE) are sent with a valid CSRF token.\n\t\t\t\t\t\t5. **`LogoutFilter`**\n\t\t\t\t\t\t\t- Handles user **logout** functionality, typically by clearing the security context and invalidating the HTTP session.\n\t\t\t\t\t\t6. **`OAuth2AuthorizationRequestRedirectFilter`** (if using OAuth2)\n\t\t\t\t\t\t\t- Redirects the client to the authorization server for **OAuth2 login** if OAuth2 login is enabled.\n\t\t\t\t\t\t7. **`OAuth2LoginAuthenticationFilter`** (if using OAuth2)\n\t\t\t\t\t\t\t- Handles the **authentication** for an OAuth2 login after the user is redirected back to the application from the OAuth2 provider.\n\t\t\t\t\t\t8. **`Saml2WebSsoAuthenticationFilter`** (if using SAML)\n\t\t\t\t\t\t\t- Handles **SAML2 authentication** requests (Single Sign-On based on SAML).\n\t\t\t\t\t\t9. **`UsernamePasswordAuthenticationFilter`**\n\t\t\t\t\t\t\t- The default form-based **authentication filter** responsible for processing login requests (e.g., `/login`) and handling **username/password** authentication.\n\t\t\t\t\t\t10. **`ConcurrentSessionFilter`**\n\t\t\t\t\t\t\t- Limits the number of concurrent sessions for a user and logs out users whose session limit has been exceeded.\n\t\t\t\t\t\t11. **`BearerTokenAuthenticationFilter`** (for JWT/OAuth2)\n\t\t\t\t\t\t\t- Processes **Bearer Token** (such as **JWT**) authentication from the `Authorization` header.\n\t\t\t\t\t\t12. **`BasicAuthenticationFilter`**\n\t\t\t\t\t\t\t- Handles **HTTP Basic authentication** by extracting credentials from the `Authorization` header (e.g., `Basic <base64encoded username:password>`).\n\t\t\t\t\t\t13. **`RequestCacheAwareFilter`**\n\t\t\t\t\t\t\t- Uses the **request cache** to store the original request that caused the user to be redirected to the login page. After successful login, the user is redirected to the cached request.\n\t\t\t\t\t\t14. **`SecurityContextHolderAwareRequestFilter`**\n\t\t\t\t\t\t\t- Wraps the **HttpServletRequest** to make it aware of the `SecurityContext`, allowing security details to be accessible from the request.\n\t\t\t\t\t\t15. **`AnonymousAuthenticationFilter`**\n\t\t\t\t\t\t\t- Provides **anonymous authentication** when no authentication is present, allowing Spring Security to treat a user as \"anonymous\" instead of null.\n\t\t\t\t\t\t16. **`SessionManagementFilter`**\n\t\t\t\t\t\t\t- Manages **session-related security**, such as ensuring that sessions are valid and handling session-fixation attacks by creating a new session upon login.\n\t\t\t\t\t\t17. **`ExceptionTranslationFilter`**\n\t\t\t\t\t\t\t- Catches security-related exceptions (e.g., **AccessDeniedException**, **AuthenticationException**) and handles them, usually by redirecting to a login page or returning a 403 error.\n\t\t\t\t\t\t18. **`FilterSecurityInterceptor`**\n\t\t\t\t\t\t\t- The last filter in the chain, it is responsible for **authorizing requests** based on the configuration of URL-based access control (via `@PreAuthorize`, `@Secured`, or URL pattern matching).\n\t\t\t\t**Filter Execution Overview**\n\t\t\t\t\t- **Authentication-related filters** (like `UsernamePasswordAuthenticationFilter`, `BasicAuthenticationFilter`, `BearerTokenAuthenticationFilter`) are executed after CSRF checks and before authorization (`FilterSecurityInterceptor`).\n\t\t\t\t\t- **Session-related filters** (`SecurityContextPersistenceFilter`, `SessionManagementFilter`, `ConcurrentSessionFilter`) ensure that authentication is correctly tied to HTTP sessions.\n\t\t\t\t\t- **Error handling and redirection filters** (`ExceptionTranslationFilter`) intercept and translate security-related exceptions, providing a smoother user experience.\n\t\t\t\tEach of these filters performs a specific security-related task and is invoked in the specified order, ensuring that Spring Security can protect applications from a wide variety of attack vectors.\n\t\t11. Introduction to Spring Security Internal flow - Theory\n\t\t\tSpring Security Internal flow\n\t\t\t\t1. **User Entered Credentials Through:**\n\t\t\t\t\t- **Browser** (e.g., Chrome, Firefox)\n\t\t\t\t\t- **Mobile Application** (e.g., Android/iOS app)\n\t\t\t\t\t- **Postman** (or any API testing tool)\n\t\t\t\t\t- **External JavaScript/Java Code Script** (e.g., automation script, service-to-service call)\n\t\t\t\t2. **Spring Security Filters Receive an HttpServletRequest Object from the Servlet Container**\n\t\t\t\t\t- Spring Security filters identify if the user is authenticated or not.\n\t\t\t\t\t- Spring Security filters check the credentials or access tokens in the request body or headers as per the project's Spring Security configuration.\n\t\t\t\t\t- Filters play a crucial role in intercepting every request.\n\t\t\t\t\t- There are more than 20 filters in the Spring Security framework, intercepting each request and handling specific scenarios. For example:\n\t\t\t\t\t\t- Filter to identify if the user is authenticated.\n\t\t\t\t\t\t- Filter to detect CSRF attacks.\n\t\t\t\t\t- At any layer, if there is an exception, the user will receive a 401 or 403 error.\n\t\t\t\t3. **Convert the HttpServletRequest Object to an `Authentication` Object**\n\t\t\t\t\t- If the Spring Security filters verify that the credentials are valid, they will populate the `Authentication` object from the HttpServletRequest.\n\t\t\t\t\t- The `Authentication` object may contain fields such as `username`, `password`, and `isAuthenticated`, with the initial value `false`.\n\t\t\t\t\t- The `Authentication` object serves as a common contract that can be understood by all components inside the Spring Security framework.\n\t\t\t\t4. **Forward the `Authentication` Object to the Authentication Manager**\n\t\t\t\t\t- Once the `Authentication` object is populated, the filters will forward it to the `Authentication Manager`.\n\t\t\t\t\t- The `Authentication Manager` is responsible for completing the authentication and conveying the result back to the filters, indicating whether the authentication was successful.\n\t\t\t\t\t- The `Authentication Manager` takes the `Authentication` object with the username and password, then delegates the actual authentication to other components. After the authentication logic is executed, the `Authentication Manager` conveys the result back to the filters.\n\t\t\t\t\t\t- Note: The `Authentication Manager` is responsible for overseeing authentication but does not perform the actual authentication.\n\t\t\t\t5. **Authentication Manager Forwards the `Authentication` Object to the Authentication Providers**\n\t\t\t\t\t- The `Authentication Manager` forwards the `Authentication` object to the available `Authentication Providers` in the Spring Security framework to perform the actual authentication.\n\t\t\t\t\t- Spring Security includes built-in `Authentication Providers`, and custom `Authentication Providers` can also be defined.\n\t\t\t\t\t- A project may have more than one `Authentication Provider`.\n\t\t\t\t\t- The `Authentication Manager` is responsible for checking with all applicable `Authentication Providers` to determine whether authentication is successful or failed.\n\t\t\t\t\t- The `Authentication Providers` rely on the following components:\n\t\t\t\t\t\t- **UserDetails Manager/Service**\n\t\t\t\t\t\t\t- Responsible for loading `UserDetails` based on the user credentials received in the `Authentication` object.\n\t\t\t\t\t\t\t- Sends the `UserDetails` object to the `Authentication Provider`.\n\t\t\t\t\t\t- **Password Encoder**\n\t\t\t\t\t\t\t- Once the `Authentication Provider` receives the `UserDetails` object, it uses the `Password Encoder` to compare the password stored in the database (external or in-memory) with the password in the `Authentication` object.\n\t\t\t\t\t\t\t- Passwords can be saved as plain text or with a hashing algorithm.\n\t\t\t\t6. **Post-Authentication Process**\n\t\t\t\t\t- Once authentication is completed by the `Authentication Providers`, they send the `Authentication` object back to the `Authentication Manager` with `isAuthenticated` set to `true` if the authentication is successful.\n\t\t\t\t\t- The updated `Authentication` object is then sent to the security filters.\n\t\t\t\t\t- Regardless of whether authentication is successful or not, the updated `Authentication` object is stored in the Spring Context, linked to a session ID, which is created for a given browser.\n\t\t\tRoles and responsibilities of every components in Spring Security\n\t\t\t\t**Spring Security Filters**\n\t\t\t\t\tA series of Spring Security Filters intercept each request and work together to identify if Authentication is required or not.\n\t\t\t\t\tIf authentication is required, accordingly navigate the user to login page or use the existing details stored during initial authentication\n\t\t\t\t**Authentication**\n\t\t\t\t\tFilters like UsernamePasswordAuthenticationFilter will extract username/password from HTTP request and prepare Authentication type object.\n\t\t\t\t\t\tBecause Authentication is the core standard of storing authenticated user details inside Spring Security framework\n\t\t\t\t**AuthenticationManager**\n\t\t\t\t\tOnce received request from filter, it delegates the validating of the user details to the authentication providers available.\n\t\t\t\t\tSince there can be multiple providers inside an app, it is the responsibility of AuthenticationManager to manage all the authentication providers available.\n\t\t\t\t\tIn simple words, the `AuthenticationManager` takes the responsibility for authentication\n\t\t\t\t**AuthenticationProvider**\n\t\t\t\t\t`AuthenticationProvider` has all the core logic of validating user details for authentication.\n\t\t\t\t**UserDetailsManager/UserDetailsService**\n\t\t\t\t\tUserDetailsManager/UserDetailsService helps in retrieving, creating, updating, deleting User Details from the DB/Storage\n\t\t\t\t**PasswordEncoder**\n\t\t\t\t\tService interface that helps in encoding and hashing passwords. Otherwise, we may have to live with plain text password\n\t\t\t\t**SecurityContext**\n\t\t\t\t\tOnce the request has been authenticated, the authentication will usually be stored in a thread-local SecurityContext managed by SecurityContextHolder.\n\t\t\t\t\tThis helps during the upcoming requests from the same user\n\t\t12. Demo of Spring Security internal flow - Part 1\n\t\t13. Demo of Spring Security internal flow - Part 2\n\t\t14. Sequence flow of the Spring Security default behaviour\n\t\t15. Understanding on how multiple requests work with out credentials\n\t\tQuiz 1: \"Getting started with Spring Security\" quiz\n\t\t\tNon-functional requirements will have requirements defined around Security, Performance, Scalability, Availability etc.\n\t\t\tThe motivation to implement Security inside a web application is to protect it's data, business logic & save it from the security breaches, attacks etc.\n\t\t\tSecurity should be considered right from development phase itself along with business logic. So that there is no re-work.\n\t\t\tFor Security, we need to add `spring-boot-starter-security` into our application maven configurations.\n\t\t\tBy default Spring Security generates JSESSIONID cookie during authentication process.\n\t\t\tAuthenticationProvider is the interface which we need to implement to define the logic on how a user should be authenticated.\n\t\t\t`UsernamePasswordAuthenticationFilter` Spring Security filter extracts the username, password of the enduser and attempts Authentication\n\tSection 2: Changing the default security configurations\n\t\t16. Understanding about UI part of the EazyBank application\n\t\t17. Creating backend services needed for the EazyBank application\n\t\t18. Checking the default configuration inside the spring security framework\n\t\t19. Modifying the security config code as per our custom requirements\n\t\t20. How to disable formLogin and httpBasic authentication\n\t\t21. httpBasic authentication testing using postman\n\t\tQuiz 2: Quiz related to \"Understanding & Changing the default security configurations\"\n\t\t\twe need to create **SecurityFilterChain** bean to define our custom security requirements inside a web application.\n\t\t\tWhich of the following is the correct code to create the bean of SecurityFilterChain to define custom security configurations ?\n\t\t\t\t```@Bean     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {  }```\n\t\t\tWhich of the following is the default behaviour or configurations that Spring Security follows for our application endpoints?\n\t\t\t\t``` \t\t@Bean \t\t\t\tSecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception { \t\t\thttp.authorizeHttpRequests((requests) -> requests.anyRequest().authenticated()); \t\t\thttp.formLogin(withDefaults()); \t\t\thttp.httpBasic(withDefaults()); \t\t\treturn http.build(); \t\t}```\n\t\t\tIf I have a below requirement to secure my application endpoints, which of the following configuration is correct? ` \"/dashboard\" - Secured  \"/myProfile\" - Secured  \"/home\" - Not Secured`\n\t\t\t\t```@Configuration public class ProjectSecurityConfig {       @Bean     SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)      throws Exception      { \thttp.authorizeHttpRequests(             (requests) -> requests                 .requestMatchers(\"/dashboard\", \"/myProfile\").authenticated()                 .requestMatchers(\"/home\").permitAll());         http.formLogin(withDefaults());         http.httpBasic(withDefaults());         return http.build();     } }```\n\t\t\tWhich of the following configuration is correct to not allow anyone accessing the endpoints regardless of successfully authenticated or not?\n\t\t\t\t```@Configuration public class ProjectSecurityConfig {       @Bean     SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)      throws Exception {         http.authorizeHttpRequests((requests)->requests.anyRequest().denyAll());         http.formLogin(withDefaults());         http.httpBasic(withDefaults());         return http.build();     } }```\n\t\t\tWhich of the following configuration is correct to allow anyone accessing the endpoints regardless of successfully authenticated or not?\n\t\t\t\t```@Configuration public class ProjectSecurityConfig {       @Bean     SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)      throws Exception {         http.authorizeHttpRequests((requests)->requests.anyRequest().permitAll());         http.formLogin(withDefaults());         http.httpBasic(withDefaults());         return http.build();     } }```\n\t\t\tWhich of the following configuration is correct to disable form login style of authentication ?\n\t\t\t\t```http.formLogin(flc -> flc.disable());```\n\tSection 3: Defining & Managing Users using InMemoryUserDetailsManager\n\t\t22. Configuring users using InMemoryUserDetailsManager\n\t\t23. Configuring PasswordEncoder using PasswordEncoderFactories\n\t\t24. Demo of CompromisedPasswordChecker\n\t\t25. Deep Dive of UserDetailsService & UserDetailsManager Interfaces\n\t\t26. Deep Dive of UserDetails & Authentication interfaces\n\t\tQuiz 3: Quiz related to \"Defining & Managing Users using InMemoryUserDetailsManager\"\n\t\t\tWhich of the following configuration is correct to define users inside the memory of the spring boot application ?\n\t\t\t\t```@Bean public UserDetailsService userDetailsService() {     UserDetails user = User.withUsername(\"user\")                 .password(\"{noop}EazyBytes@12345\").authorities(\"read\").build();     return new InMemoryUserDetailsManager(user); }```\n\t\t\tWhich of the following statements about the `UserDetailsManager` interface in Spring Security is correct ?\n\t\t\t\t`UserDetailsManager` provides methods for creating, updating, and deleting user details.\n\t\t\tWhich of the following statements about the `UserDetailsService` interface in Spring Security is correct?\n\t\t\t\t`UserDetailsService` loads user-specific data during authentication\n\t\t\tWhich of the following methods is NOT part of the `UserDetails` interface in Spring Security?\n\t\t\t\tThe `UserDetails` interface in Spring Security includes methods such as\n\t\t\t\t\tgetUsername(),\n\t\t\t\t\tgetPassword(),\n\t\t\t\t\tisAccountNonExpired(),\n\t\t\t\t\tisAccountNonLocked(),\n\t\t\t\t\tisCredentialsNonExpired(), and\n\t\t\t\t\tisEnabled().\n\t\t\t\tThe method isEmailVerified() is not part of the UserDetails interface.\n\t\t\tWhich of the following statements about the `Authentication` interface in Spring Security is correct?\n\t\t\t\tAuthentication contains methods to store and retrieve the user's details\n\t\t\t\tThe Authentication interface in Spring Security represents the token for an authentication request or for an authenticated principal once the request has been processed. It includes methods such as getAuthorities(), getCredentials(), getDetails(), getPrincipal(), and isAuthenticated().\n\t\t\t\tThe Authentication interface does not\n\t\t\t\t\tmanage HTTP sessions (Option A),\n\t\t\t\t\tencrypt passwords (Option B), or\n\t\t\t\t\textend the UserDetailsService interface (Option D).\n\t\t\tWhat is the primary purpose of the `CompromisedPasswordChecker` interface in Spring Security?\n\t\t\t\tTo check if a password has been compromised in a data breach\n\t\t\t\tThe CompromisedPasswordChecker interface in Spring Security is designed to check if a password has been compromised in a data breach. This helps enhance security by ensuring that users do not use passwords that are known to be unsafe.\n\t\t\t\t\tOptions A, C, and D are incorrect because they describe other aspects of security management not specifically related to checking for compromised passwords.\n\tSection 4: Defining & Managing Users using a database\n\t\t27. Quick revision of enhancements done so far\n\t\t28. Creating MySQL Database using Docker\n\t\t29. Understanding JdbcUserDetailsManager & creating Users inside the DB\n\t\t30. Using JdbcUserDetailsManager to perform authentication\n\t\t31. Creating our own custom tables for Authentication\n\t\t32. Creating JPA Entity and repository classes for new table\n\t\t33. Creating our own custom implementation of UserDetailsService\n\t\t34. Building a new REST API to allow the registration of new User\n\t\tQuiz 4: Quiz related to \"Defining & Managing Users using a database\"\n\t\t\tWhich of the following statements about the `JdbcUserDetailsManager` interface in Spring Security is correct?\n\t\t\t\t`JdbcUserDetailsManager` is an implementation of `UserDetailsService` , `UserDetailsManager` that manages, retrieves user details from a database\n\t\t\t\tJdbcUserDetailsManager is an implementation of the UserDetailsService interface that provides user authentication and authorization by retrieving user details from a database using JDBC.\n\t\t\t\t\tIt also implements the UserDetailsManager interface, allowing for the creation, update, and deletion of user accounts.\n\t\t\t\t\tOptions A, B, and C are incorrect because JdbcUserDetailsManager is not used for LDAP integration, does not provide built-in methods for password encryption/decryption, and does not manage HTTP sessions or cookies\n\t\t\tGiven the following code snippet to create a `UserDetailsService` bean, which option correctly defines a `JdbcUserDetailsManager` with a `DataSource`?\n\t\t\t\t``` @Bean public UserDetailsService userDetailsService(DataSource dataSource) {     return new JdbcUserDetailsManager(dataSource); }  ```\n\t\t\t\tOption B correctly defines a JdbcUserDetailsManager with a DataSource, which is used to retrieve and manage user details from a database using JDBC.\n\t\t\t\t\tOptions A, C, and D define different implementations (InMemoryUserDetailsManager, LdapUserDetailsManager, and CustomUserDetailsService) that do not use a JdbcUserDetailsManager with a DataSource.\n\t\t\tWhich of the following code snippets correctly defines a custom implementation of the `UserDetailsService` interface in Spring Security?\n\t\t\t\t``` @Component public class CustomUserDetailsService implements UserDetailsService {            @Override     public UserDetails loadUserByUsername(String username)                                   throws UsernameNotFoundException {         // Logic to fetch the user details     } } ```\n\tSection 5: Password Management with PasswordEncoders\n\t\t35. How our passwords validated with out PasswordEncoders\n\t\t36. What is Encoding, Decoding & why it is not suitable for passwords management\n\t\t37. What is Encryption, Decryption & why it is not suitable for passwords management\n\t\t38. Demo of Encryption, Decryption\n\t\t39. Introduction to Hashing\n\t\t40. Drawbacks of Hashing & what are Brute force attacks, Dictionary or Rainbow tab\n\t\t41. How to overcome Hashing drawbacks, Brute force and Dictionary table attacks\n\t\t42. Introduction to PasswordEncoders in Spring Security\n\t\t43. Deep dive of PasswordEncoder implementation classes\n\t\t44. Demo of registration and login with Bcrypt password encoder\n\t\tQuiz 5: Quiz related to Password Management in Spring Security\n\t\t\tWhich of the following is defined as the process of converting data from one form to another with out any secret involved and has nothing to do with cryptography ?\n\t\t\t\tEncoding\n\t\t\tWhich of the following statement related to Encoding is TRUE ?\n\t\t\t\tEncoding guarantees none of the 3 cryptographic properties of confidentiality, integrity, and authenticity because it involves no secret and is completely reversible.\n\t\t\tWhich of the following statements regarding Encryption is TRUE?\n\t\t\t\tEncryption is the process of converting data to ensure its confidentiality. This transformation requires a secret, known in cryptographic terms as a `key`.\n\t\t\tWhich of the following statements about Hashing is correct ?\n\t\t\t\tData once hashed using hashing technique is non-reversible.\n\t\t\tWhich of the following technique is recommended while handling passwords inside web applications?\n\t\t\t\tHashing\n\t\t\tWhat is the interface provided by Spring Security to support password encoding ?\n\t\t\t\t`org.springframework.security.crypto.password.PasswordEncoder`\n\t\t\tWhich of the following PasswordEncoder implementations can be considered for testing, when working with plain text passwords may be preferred?\n\t\t\t\t`org.springframework.security.crypto.password.NoOpPasswordEncoder`\n\t\t\tWhich of the following PasswordEncoders is recommended for production usage?\n\t\t\t\t`org.springframework.security.crypto.password.BCryptPasswordEncoder`\n\t\t\tWhich of the following methods inside BCrypt class used to generate hash value of a plain text password?\n\t\t\t\t`Bcrypt.hashpw()`\n\t\t\tWhich of the following methods inside BCrypt class used to check a plaintext password matches a previously hashed value ?\n\t\t\t\t`BCrypt.checkpw()`\n\tSection 6: Understanding Authentication Provider and Implementing it\n\t\t45. Why should we consider creating our own AuthenticationProvider\n\t\t46. Understanding AuthenticationProvider methods\n\t\t\tDetails of Authentication Provider\n\t\t\t\tMethods inside AuthenticationProvider interface\n\t\t\t\t\tAuthentication **authenticate**(Authentication authentication) throws AuthenticationException;\n\t\t\t\t\t\tThe `authenticate()` method recieves and returns authentication object.\n\t\t\t\t\t\tWe can implement all our custom authentication logic inside authenticate() method\n\t\t\t\t\tboolean **supports**(Class<?> authentication);\n\t\t\t\t\t\tThe `supports(Class<?> authentication)` method returns `true` if the current `AuthenticationProvider` can handle the type of `Authentication` object passed to it.\n\t\t47. Implementing and Customizing the AuthenticationProvider inside our application\n\t\t48. Environment specific Security configurations using Profiles - Part 1\n\t\t49. Environment specific Security configurations using Profiles - Part 2\n\t\t50. Environment specific Security configurations using Profiles - Part 3\n\t\tQuiz 6: Quiz related to AuthenticationProvider in Spring Security\n\t\t\tIf we have a custom authentication requirement that is not fulfilled by Spring Security framework then we can build our own authentication logic by implementing the below interface ?\n\t\t\t\t`org.springframework.security.authentication.AuthenticationProvider`\n\t\t\tWhich of the following is the correct definition of AuthenticationProvider interface ?\n\t\t\t\t``` public interface AuthenticationProvider {   \tAuthentication authenticate(Authentication authentication) \t\t\tthrows AuthenticationException;   \tboolean supports(Class<?> authentication); \t }```\n\t\t\tWhich of the following interface represents the authenticated user once the request has been processed by the AuthenticationProvider.authenticate() method inside Spring Security framework?\n\t\t\t\t`org.springframework.security.core.Authentication`\n\t\t\tWhich of the following interface is true regarding Authentication interface inside Spring Security?\n\t\t\t\tAuthentication interface extends Principal interface from Java.\n\tSection 7: Spring Security customizations for most common use cases\n\t\t51. Accepting only HTTPS Traffic using Spring Security\n\t\t52. Exception Handling in Spring Security framework\n\t\t53. Defining Custom AuthenticationEntryPoint - Part 1\n\t\t54. Defining Custom AuthenticationEntryPoint - Part 2\n\t\t55. Defining Custom AccessDeniedHandler\n\t\t56. Session Timeout & invalid session configurations\n\t\t57. Concurrent Session Control configurations\n\t\t58. Session Fixation Attack protection with Spring Security\n\t\t59. Listening Authentication Events - Theory\n\t\t60. Listening Authentication Events - Demo\n\t\t61. Form Login Configurations for MVC or monolithic apps - Part 1\n\t\t62. Form Login Configurations for MVC or monolithic apps - Part 2\n\t\t63. Form Login Configurations for MVC or monolithic apps - Part 3\n\t\t64. Form Login Configurations for MVC or monolithic apps - Part 4\n\t\t65. Logout Configurations for MVC or monolithic apps\n\t\t66. Spring Security Thymeleaf integration\n\t\t67. Role of SecurityContext & SecurityContextHolder\n\t\t68. Load login user details in Spring Security\n\t\tQuiz 7: Quiz related to \"Spring Security customizations for most common use cases\"\n\t\t\tWhich code snippet correctly configures the application to accept only HTTPS traffic?\n\t\t\t\t`http.requiresChannel(rcc -> rcc.anyRequest().requiresSecure());`\n\t\t\t\tOption B correctly configures the application to accept only HTTPS traffic by using the requiresChannel method and specifying that any request should require a secure channel (HTTPS). Option A is almost correct but lacks the lambda syntax used in the provided configuration style. Option C uses authorizeRequests instead of requiresChannel, which is incorrect for enforcing HTTPS. Option D incorrectly configures the application to accept only insecure (HTTP) traffic, which is not the desired behavior.\n\t\t\tWhat is the primary purpose of the `AuthenticationEntryPoint` interface in Spring Security?\n\t\t\t\tTo handle authentication failures by redirecting users to a specific login page.\n\t\t\tWhich of the following is the correct configuration to configure custom authentication entry point for handling basic authentication?\n\t\t\t\t`http.httpBasic(hbc -> hbc.authenticationEntryPoint(new CustomBasicAuthenticationEntryPoint()));`\n\t\t\tWhich of the following is the correct configuration to configure custom access denied handler ?\n\t\t\t\t`http.exceptionHandling(ehc -> ehc.accessDeniedHandler(new CustomAccessDeniedHandler()));`\n\t\t\tWhich of the following is the correct configuration to limit the maximum number of concurrent sessions per user ?\n\t\t\t\t`http.sessionManagement(smc -> smc.maximumSessions(1).maxSessionsPreventsLogin(true));`\n\t\t\tWhich option for Session Fixation Protection in Spring Security creates a new session and copies all existing session attributes to the new session?\n\t\t\t\tmigrateSession\n\t\t\tWhich of the following code snippet is correct to listen and process authentication success events that are published by Spring Security ?\n\t\t\t\t``` @Component @Slf4j public class AuthenticationEvents {       @EventListener     public void onSuccess(AuthenticationSuccessEvent successEvent) {          // Logic to handle success authentication event     }   } ```\n\t\t\tWhich of the following code snippet can be used to customize a login, success and failure pages in Spring Security ?\n\t\t\t\t`http.formLogin(formLoginConfig -> formLoginConfig.loginPage(\"/login\")  .defaultSuccessUrl(\"/dashboard\").failureUrl(\"/login?error=true\").permitAll())`\n\t\t\tWhich of the following code snippet can be used to customize a logout page in Spring Security ?\n\t\t\t\t``` http.logout(logoutConfigurer -> logoutConfigurer         .logoutSuccessUrl(\"/login?logout=true\").permitAll()         .invalidateHttpSession(true)         .clearAuthentication(true)         .deleteCookies(\"JSESSIONID\")); ```\n\t\t\tWhich of the following code snippet is valid to load the login user details from the SecurityContextHolder ?\n\t\t\t\t``` Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); ```\n\tSection 8: Understanding CORs & CSRF\n\t\t69. Setting up the EazyBank UI project\n\t\t70. Understanding and walkthrough of the Angular code - Part 1\n\t\t71. Understanding and walkthrough of the Angular code - Part 2\n\t\t72. Creating new DB schema for EazyBank scenarios\n\t\t73. Updating Backend project based on the latest DB schema\n\t\t74. Testing registration of the new user with latest changes\n\t\t75. Taste of CORs error\n\t\t76. Introduction to CORs\n\t\t77. Possible options to fix the CORs issue\n\t\t78. Fixing CORs issue using Spring Security\n\t\t79. Demo of default CSRF protection inside Spring Security\n\t\t80. Introduction to CSRF attack\n\t\t81. Solution to handle CSRF attacks\n\t\t82. Implementing CSRF token solution inside backend application - Part 1\n\t\t83. Implementing CSRF token solution inside backend application - Part 2\n\t\t84. Implementing CSRF token solution inside UI application\n\t\t85. Ignoring CSRF protection for public APIs\n\t\tQuiz 8: Quiz related to CORs & CSRF\n\t\t\tWhich of the following is a mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading of resources?\n\t\t\t\tCross-Origin Resource Sharing (CORS)\n\t\t\tWhich of the following parameters are considered to identify \"other origins\" as part of CORs policy?\n\t\t\t\tDomain & Port & scheme (HTTPS/HTTP)\n\t\t\tIf you have a scenario where a front end application try to communicate with a backend application which is deployed in a different domain/port, how to resolve CORs issue that will arise in these kind of scenarios?\n\t\t\t\tBackend server can be configured to allow cross-origin resource sharing by including some special headers like Access-Control-Allow-Origin, Access-Control-Allow-Methods etc. Web browsers can use these headers to determine whether a request should continue or fail.\n\t\t\tWhich of the following explains CROSS-SITE REQUEST FORGERY(CSRF) issue correctly?\n\t\t\t\tA typical Cross-Site Request Forgery (CSRF or XSRF) attack aims to perform an operation in a web application on behalf of a user without their explicit consent. In general, it doesn't directly steal the user's identity, but it exploits the user to carry out an action without their will.\n\t\t\tWhich of the following is a valid approach to handle the CSRF issues inside a web application?\n\t\t\t\t``` @Bean SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {     http.csrf(csrfConfig -> csrfConfig         .csrfTokenRequestHandler(new CsrfTokenRequestAttributeHandler())         .ignoringRequestMatchers( \"/contact\",\"/register\")         .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()))         .addFilterAfter(new CsrfCookieFilter(), BasicAuthenticationFilter.class)         .authorizeHttpRequests()..........       return http.build(); } ```\n\t\t\tWhich of the following is a valid code configuration to allow CORS inside a web application using Spring Security?\n\t\t\t\t```     http.cors(corsConfig -> corsConfig.configurationSource(                   new CorsConfigurationSource() {     @Override     public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {       CorsConfiguration config = new CorsConfiguration();       config.setAllowedOrigins(Collections.singletonList(\"http://localhost:4200\"));       config.setAllowedMethods(Collections.singletonList(\"*\"));       config.setAllowCredentials(true);       config.setAllowedHeaders(Collections.singletonList(\"*\"));       config.setMaxAge(3600L);       return config;     }   } ```\n\tSection 9: Implementing Authorization using Authorities,Roles\n\t\t86. Authentication Vs Authorization\n\t\t\t**Authentication and Authorization (Details and Comparison)**\n\t\t\t\tAuthentication\n\t\t\t\t\tIn authentication, the identity of users are checked for providing the access to the system\n\t\t\t\t\tAuthentication (AuthN) done before Authorization\n\t\t\t\t\tIt needs usually user's login details\n\t\t\t\t\tIf Authentication fails usually we will get 401 error response\n\t\t\t\t\tFor example as a Bank customer/employee in order to perform actions in the app, we need to first prove our identity\n\t\t\t\tAuthorization\n\t\t\t\t\tIn authorization, person's or user's authorities are checked for accessing the resources.\n\t\t\t\t\tAuthorization (AuthZ) always happens after authentication.\n\t\t\t\t\tIt needs user's previledge or roles.\n\t\t\t\t\tIf authorization fails usually we will get 403 error response\n\t\t\t\t\tOnce logged into the application, my roles, authorities will decide what kind of actions I can do\n\t\t\t**Understanding by Analogy**\n\t\t\t\tIf we go to an airport with a passport and a ticket to travel to a destination (say, `Las Vegas`):\n\t\t\t\t\t**Authentication**\n\t\t\t\t\t\tFirst, at the entrance, our identity is verified to ensure that the name and details on the ticket match the passport details, along with the photo on the ID card.\n\t\t\t\t\t**Authorization**\n\t\t\t\t\t\tSince we have a ticket only for `Las Vegas`, we are only authorized to travel to that destination. Although there are planes available for other destinations, we cannot travel to those destinations.\n\t\t\tAuthorization name vary as per different organizations\n\t\t\t\tAuthorization names can vary across different organizations and contexts. Some commonly used terms that are synonymous with authorization include:\n\t\t\t\t\t- **Privileges**: Refers to the specific actions a user is allowed to perform within a system.\n\t\t\t\t\t- **Roles**: Typically used to group a set of permissions or privileges assigned to users. A role may define the level of access a user has in a system (e.g., Admin, User, Moderator).\n\t\t\t\t\t- **Authorities**: Often used in a security context to refer to specific rights or permissions granted to a user, usually at a more granular level than roles.\n\t\t\t\tAdditional Terms (if applicable):\n\t\t\t\t\t- **Permissions**: Defines specific allowed actions on resources (e.g., \"read\", \"write\", \"delete\"). Permissions can be assigned directly or through roles.\n\t\t\t\t\t- **Access Rights**: Defines what level of access a user has to various resources within the system, similar to permissions.\n\t\t\t\t\t- **Entitlements**: Another term used in the context of access control, which refers to the collective rights and permissions assigned to a user.\n\t\t\t\tThese terms may be used interchangeably, depending on the organization's policy and security model.\n\t\t87. How Authorities stored inside Spring Security\n\t\t88. Creating new table authorities to store multiple roles or authorities\n\t\t89. Making backend changes to load authorities from new DB table\n\t\t90. Configuring Authorities inside web application using Spring Security\n\t\t\tConfiguring Authorities, Inside Spring Security\n\t\t\t\tIn Spring Security, the authorities requirements can be configured using the following ways:\n\t\t\t\t\t**hasAuthority()**\n\t\t\t\t\t\tAccepts a single authority for which the endpoint will be configured and user will be validated against the single authority mentioned.\n\t\t\t\t\t\t\tOnly users having the same authority configured can invoke the endpoint.\n\t\t\t\t\t**hasAnyAuthority()**\n\t\t\t\t\t\tAccepts multiple authorities for which the endpoint will be configured and user will be validated against the authorities mentioned.\n\t\t\t\t\t\t\tOnly users having any of the authority configured can invoke the endpoint.\n\t\t\t\t\t**access()**\n\t\t\t\t\t\tUsing Spring Expression Language (SpEL) it provides you unlimited possibilities for configuring authorities which are not possible with the above methods.\n\t\t\t\t\t\t\tWe can use operators like OR, AND inside access() method.\n\t\t91. Authority Vs Role in Spring Security\n\t\t\tAuthority vs Role (Inside Spring Security)\n\t\t\t\t**Authority**\n\t\t\t\t\tAuthority is like an individual previledge or an action\n\t\t\t\t\tRestricting access in a fine grained manner\n\t\t\t\t\tEx: `VIEWACCOUNT`, `VIEWCARDS` etc.\n\t\t\t\t**Role**\n\t\t\t\t\tRole is a group of privileges/actions\n\t\t\t\t\tRestricting access in a coarse-grained manner\n\t\t\t\t\tEx: `ROLE_ADMIN`, `ROLE_USER` etc.\n\t\t\tThe names of the authorities/roles are arbitrary in nature and these names can be customized as per the business requirement\n\t\t\tRoles are also represented using the same contract GrantedAuthority in Spring Security.\n\t\t\tWhen defining a role, its name should **start with** the `ROLE_` prefix. This prefix specifies the difference between a role and an authority\n\t\t92. Configuring Roles Authorization inside web application using Spring Security\n\t\t93. Listening to the Authorization events\n\t\tQuiz 9: Quiz related to Authentication & Authorization\n\t\t\tWhich of the following best describes Authorization in any web application?\n\t\t\t\tDuring Authorization, the person’s or user’s authorities are checked for accessing the resources.\n\t\t\tWhich of the following best describes Authentication in any web application?\n\t\t\t\tDuring Authentication, the identity of users are checked for providing the access to the system.\n\t\t\tWhich of the following is the correct combination of HTTP error codes for Authentication and Authorization failure scenarios?\n\t\t\t\tAuthentication : 401, Authorization : 403\n\t\t\tInside UserDetails interface which is a contract of the user inside the Spring Security, the authorities of an user stored in the form of collection of which interface?\n\t\t\t\t`org.springframework.security.core.GrantedAuthority`\n\t\t\tWhich of the following methods can be used to configure authorities for a specific URL?\n\t\t\t\thasAuthority()\n\t\t\t\thasAnyAuthority()\n\t\t\t\taccess()\n\t\t\t\tWhich of the following methods can be used to configure roles based access for a specific URL inside Spring Security ?\n\t\t\t\thasRole()\n\t\t\t\thasAnyRole()\n\t\t\t\taccess()\n\t\t\t\tWhich of the following methods can be used to configure roles based access for a specific URL inside Spring Security ?\n\t\t\tWhich of the following is the correct statement regarding Authority inside Spring Security?\n\t\t\t\tAuthority is like an individual privilege and represents fine-grained access like VIEWACCOUNTS, VIEWLOANS etc.\n\t\t\tWhich of the following methods can be used to configure roles based access for a specific URL inside Spring Security ?\n\t\t\t\thasRole()\n\t\t\t\thasAnyRole()\n\t\t\t\taccess()\n\t\t\tWhich of the following code snippet is correct that can listen and handle authorization denied events ?\n\t\t\t\t```@EventListener public void onFailure(AuthorizationDeniedEvent deniedEvent) {    // Logic to handle authorization denied event }```\n\tSection 10: Custom Filters in Spring Security\n\t\t94. Demo of Inbuilt Filters of Spring Security framework\n\t\t\tFilter chain as per my TweetApplication configuration\n\t\t\t\tDisableEncodeUrlFilter\n\t\t\t\tWebAsyncManagerIntegrationFilter\n\t\t\t\tSecurityContextHolderFilter\n\t\t\t\tHeaderWriterFilter\n\t\t\t\tLogoutFilter\n\t\t\t\tJwtRequestFilter\n\t\t\t\tRequestCacheAwareFilter\n\t\t\t\tSecurityContextHolderAwareRequestFilter\n\t\t\t\tAnonymousAuthenticationFilter\n\t\t\t\tSessionManagementFilter\n\t\t\t\tExceptionTranslationFilter\n\t\t\t\tAuthorizationFilter\n\t\t95. How to create and configure our own custom filter\n\t\t96. Adding a custom filter using addFilterBefore() method\n\t\t97. Adding a custom filter using addFilterAfter() method\n\t\t98. Adding a custom filter using addFilterAt() method\n\t\tQuiz 10: Quiz related to Filters in Spring Security\n\t\t\tIn order to create our own custom filters in Spring Security, we need to implement the following interface ?\n\t\t\t\tjakarta.servlet.Filter\n\t\t\tIf we have a scenario to define a custom filter with the name `RequestValidationBeforeFilter` and run it before a specified filter `BasicAuthenticationFilter` as part of Spring Security authentication and authorization, then which of the below code is correct configuration ?\n\t\t\t\t`addFilterBefore(new RequestValidationBeforeFilter(), BasicAuthenticationFilter.class)`\n\t\t\tIf we have a scenario to define a custom filter with the name `JWTTokenGeneratorFilter` and run it after a specified filter `BasicAuthenticationFilter` as part of Spring Security authentication and authorization, then which of the below code is correct configuration ?\n\t\t\t\t`addFilterAfter(new JWTTokenGeneratorFilter(), BasicAuthenticationFilter.class)`\n\t\t\tIf we have a scenario where we need to make sure to execute our custom filter only a single execution per request dispatch then which of the following filter needs to be extended inside our custom filter ?\n\t\t\t\t`org.springframework.web.filter.OncePerRequestFilter`\n\tSection 11: Token based Authentication using JSON Web Token (JWT)\n\t\t99. Opaque Tokens vs JSON Web Tokens (JWT)\n\t\t\tToken formats\n\t\t\t\tIn general, there are two token formats.\n\t\t\t\t\t1. Opaque Tokens\n\t\t\t\t\t\tOpaque tokens are typically random strings with no inherent meaning. It is used to reference authentication information stored on the server-side.\n\t\t\t\t\t\tRequires a call to the authentication server or a dedicated introspection endpoint to validate and obtain user information.\n\t\t\t\t\t2. JSON Web Tokens (JWT)\n\t\t\t\t\t\tJWTs are self-contained tokens that consist of three parts\n\t\t\t\t\t\t\ta header,\n\t\t\t\t\t\t\ta payload, and\n\t\t\t\t\t\t\ta signature, encoded in BASE64 URL\n\t\t\t\t\t\tEncodes user information and claims directly within the token.\n\t\t\t\t\t\tCan be validated locally by verifying the token's signature using a public key, without needing a server call.\n\t\t\tOpaque tokens are suitable for scenarios where token validation by a central server is feasible, such as within a secure internal network.\n\t\t\tWhereas, JWT tokens are ideal for stateless, distributed systems where **quick token validation** is needed `without frequent server calls`.\n\t\t100. Advantages of Token based Authentication\n\t\t\tRole of Tokens (in AuthN and AuthZ)\n\t\t\t\tA token can be a plain-text string of format universally-unique-identifier (UUID) or it can be of type JSON Web Token (JWT) usually that get generated when the user authenticated for the first time during login\n\t\t\t\tOn every request to a restricted resource, the client sends the access token in the query string or Authorization header. The server then validates the token and if token is valid, returns the secure resource to the client.\n\t\t\tSteps\n\t\t\t\tClient\n\t\t\t\t\tClient will receive the token after successful login in a header/query string etc.\n\t\t\t\t\tClient system has to make sure to send the same token value on all the further request to the backend server.\n\t\t\t\tAuth Server/App\n\t\t\t\t\tAuth Server/Application will generate the token and send to client. At the same time, it stores the token and client details in the memory/DB.\n\t\t\t\t\tWhen client makes a request with the token, the server will validate the token, the server will validate the token and return the protected resources if it is a valid token.\n\t\t\tToken Advantages\n\t\t\t\tSecurity\n\t\t\t\t\tLimited expose of the user credentials inside the network\n\t\t\t\t\tTokens can be revoked during suspicious activities without invalidating user credentials\n\t\t\t\tExpiration\n\t\t\t\t\tTokens can have specific expiration times set, ensuring tokens are valid only for a predefined duration\n\t\t\t\tSelf-contained\n\t\t\t\t\tTokens are self-contained and carry all the necessary information about the user, roles/authorities etc.\n\t\t\t\tReusability\n\t\t\t\t\tTokens can be used across different domains and services, making them suitable for single-sign-on (SSO) systems.\n\t\t\t\tCross-Platform compatibility\n\t\t\t\t\tTokens can be used across various platforms and devices, including web applications, mobile apps, and IoT devices.\n\t\t\t\tStatelessness\n\t\t\t\t\tThe token contains all the information to identify the user, eliminating the need for the session state. If we use a load balancer, we can pass the user to any server, instead of being bound to the same server we logged in.\n\t\t101. Deep dive about JWT Tokens\n\t\t102. Making project configuration to use JWT tokens\n\t\t103. Building logic to generate the JWT tokens\n\t\t104. Building logic to validate the JWT tokens\n\t\t105. Making changes on the client side for JWT token based authentication\n\t\t106. Validating the JWT changes made by running the applications\n\t\t107. Validating the JWT token expiration scenario\n\t\t108. Publish an AuthenticationManager for custom or manual authentication - Part 1\n\t\t109. Publish an AuthenticationManager for custom or manual authentication - Part 2\n\t\tQuiz 11: Quiz related to \"Token based Authentication using JWT\" in Spring Security\n\tSection 12: Method Level Security\n\t\t110. Introduction to method level security in Spring Security\n\t\t111. Details about method invocation authorization in method level security\n\t\t112. Demo of method level security using @PreAuthorize and @PostAuthorize\n\t\t113. Details about filtering authorization in method level security\n\t\t114. Demo of @PreFilter annotation\n\t\t115. Demo of @PostFilter annotation\n\t\tQuiz 12: Quiz related to Method level security in Spring Security\n\tSection 13: Deep dive of OAUTH2 & OpenID Connect\n\t\t116. Problems that OAUTH2 trying to solve\n\t\t117. Introduction to OAUTH2\n\t\t118. OAuth2 terminologies or jargons\n\t\t119. Demo of OAuth2 Sample flow\n\t\t120. Deep dive on Authorization code grant type flow in OAUTH2\n\t\t121. Demo of Authorization code grant type flow in OAUTH2\n\t\t122. Deep dive & Demo of implicit grant flow in OAUTH2\n\t\t123. Deep dive & demo of Authorization code grant type with PKCE\n\t\t124. Deep dive of password grant type flow in OAUTH2\n\t\t125. Deep dive of client credentials grant type flow in OAUTH2\n\t\t126. Deep dive of refresh token grant type flow in OAUTH2\n\t\t127. How resource server validates the tokens issued by Auth server\n\t\t128. Introduction to OpenID Connect\n\t\tQuiz 13: Quiz related to OAUTH2\n\tSection 14: Implementing OAUTH2 using spring security & social logins\n\t\t129. Introduction to the agenda of OAUTH2 implementations and demos\n\t\t130. Demo of OAUTH2 using social logins - Part 1\n\t\t131. Demo of OAUTH2 using social logins - Part 2\n\t\t132. Demo of OAUTH2 using social logins - Part 3\n\t\t133. Demo of OAUTH2 using social logins - Part 4\n\t\t134. Demo of OAUTH2 using social logins - Part 5\n\t\tQuiz 14: Quiz related to OAUTH2 integration with Spring Security\n\tSection 15: Securing EazyBank using OAUTH2 and KeyCloak\n\t\t135. Introduction to OAUTH2 flow inside EazyBank web App\n\t\t136. Introduction to KeyCloak Auth Server\n\t\t137. Installation of KeyCloak server, setup admin account & realm\n\t\t138. Creating Client Credentials inside KeyCloak for API-API secured invocations\n\t\t139. Setup of EazyBank Resource Server - Part 1\n\t\t140. Setup of EazyBank Resource Server - Part 2\n\t\t141. Client credentials grant type flow demo in eazybank\n\t\t142. Demo of Opaque Tokens - Part 1\n\t\t143. Demo of Opaque Tokens - Part 2\n\t\t144. Creating Client and User details inside KeyCloak for Auth code grant flow\n\t\t145. Testing Authorization code & refresh grant types using Postman App\n\t\t146. Testing Authorization code PKCE grant types using Postman App\n\t\t147. Implementing PKCE Authorization code grant type inside Angular UI App - Part 1\n\t\t148. Implementing PKCE Authorization code grant type inside Angular UI App - Part 2\n\t\t149. Testing PKCE flow inside Eazy Bank Angular UI application\n\t\t150. Configuring MFA using KeyCloak\n\t\t151. Social Login integration with the help of KeyCloak\n\t\tQuiz 15: Quiz related to OAUTH2 setup using KeyCloak Server\n\tSection 16: OAUTH2 Auth Server using Spring Authorization Server\n\t\t152. Introduction to Spring Authorization Server\n\t\t153. Set up of Spring Authorization Server\n\t\t154. Creating Client Credentials inside Spring Auth Server for API-API invocation\n\t\t155. Client credentials grant type flow demo with Spring Auth Server\n\t\t156. OAuth2 Token Customization in Spring Auth Server\n\t\t157. Creating clients inside Spring Auth Server for Auth Code & PKCE grant type flows\n\t\t158. Updating Spring Auth Server to authenticate the end user using DB\n\t\t159. Auth Code & PKCE grant type flows demo with Spring Auth Server\n\t\t160. Refresh token grant type flow demo with Spring Auth Server\n\t\t161. Demo of Opaque Tokens with Spring Auth Server\n\t\tQuiz 16: Quiz related to \"OAUTH2 Auth Server using Spring Authorization Server\"\n\tSection 17: Thank You and Congratulations\n\t\t162. Thank You and Congratulations\nGithub repo\n\tGithub page link [click here](https://github.com/eazybytes/spring-security)\nApplication Enhancement Journey\n\t1. Added spring security dependency\n\t2. Password in console logs\n\t3. User details in application properties\n\t4. User details in InMemory of application\n\t5. User details in DB\n\t\tUsing in-built table structure\n\t\tUsing custom table structure\n\t\t\tCreate custom user table\n\t\t\tCreate JPA Entity and repository for `custom_user` table\n","details":[],"references":[],"createdDate":{"$date":"2024-10-10T05:18:24.273Z"},"updatedDate":{"$date":"2024-10-19T13:56:24.17Z"},"__v":0}
{"_id":{"$oid":"670c1f1b0b1426b50d3528b1"},"uniqueId":"89ed50c5-db96-4c43-8883-3ef8cec353de","parentId":"","name":"**[UDEMY COURSE]**: **[Status: `Not Started`]**: Highly Scalable, Performant Modern APIs for Microservices - Master gRPC for Building Microservices Architectures","skeleton":"**[UDEMY COURSE]**: **[Status: `Not Started`]**: Highly Scalable, Performant Modern APIs for Microservices - Master gRPC for Building Microservices Architectures\n\tSection 1: Introduction\n\t\t1. Introduction\n\t\t2. [OPTIONAL] - gRPC-vs-REST - Performance Comparison\n\tSection 2: Protocol Buffers\n\t\t3. Introduction\n\t\t4. *** Resource ***\n\t\t5. Project Setup\n\t\t6. Creating First Proto\n\t\t7. Generated Source\n\t\t8. Creating An Instance From Generated Source\n\t\t9. Proto Java Option - Package\n\t\t10. Proto Java Option - Multiple Files\n\t\t11. Immutable, Equals & Clear Methods\n\t\t12. Adding Comments\n\t\t13. Scalar Types\n\t\t14. Scalar Demo\n\t\t15. Serialization & Deserialization\n\t\t16. Correction - Try With Resources\n\t\t17. JSON vs Proto - Performance - Part - 1\n\t\t18. JSON vs Proto - Performance - Part - 2\n\t\t19. JSON vs Proto Encoding\n\t\t20. Composition\n\t\t21. Collections\n\t\t22. What About Set?\n\t\t23. Map\n\t\t24. What About Complex Data Structure?\n\t\t25. Enum\n\t\t26. Default Values\n\t\t27. OneOf\n\t\t28. Importing Modules\n\t\t29. GCP - API\n\t\t30. Wrapper / Well Known Types\n\t\t31. Scalar Optional\n\t\t32. How Proto Works\n\t\t33. Message Format Changes - Part - 1\n\t\t34. Message Format Changes - Part - 2\n\t\t35. Message Format Changes - Part - 3\n\t\t36. Message Format Changes - Part - 4\n\t\t37. Proto - CI/CD\n\t\t38. Summary\n\t\tQuiz 1: Quiz\n\tSection 3: gRPC - Unary\n\t\t39. Introduction\n\t\t40. Communication Patterns\n\t\t41. How gRPC Performs Better\n\t\t42. Unary API\n\t\t43. Adding gRPC Java As Source Root\n\t\t44. Stream Observer\n\t\t45. Unary Service Implementation\n\t\t46. Unary API Demo via Postman\n\t\t47. Account Repository\n\t\t48. gRPC Server Refactor\n\t\t49. Client Server Communication\n\t\t50. gRPC Client Demo\n\t\t51. Channel / Stub - Clarification\n\t\t52. Blocking vs Async Stub\n\t\t53. How Async Stub Works\n\t\t54. Listenable Future\n\t\t55. Abstract Test\n\t\t56. Unary API - Integration Test\n\t\t57. Get All Accounts - API\n\t\t58. ASSIGNMENT - Integration Test\n\t\t59. Async Stub - Integration Test\n\t\t60. Response Observer - Test Utility\n\t\t61. Async Stub - Integration Test - Refactor\n\t\t62. What About CRUD Using gRPC?\n\t\t63. Summary\n\tSection 4: gRPC - Server Streaming\n\t\t64. Introduction\n\t\t65. Streaming Possible Outputs\n\t\t66. Service Definition\n\t\t67. Server Streaming RPC Implementation\n\t\t68. Demo via Postman\n\t\t69. Blocking Stub - Integration Test\n\t\t70. Async Stub - Integration Test\n\t\t71. *** FAQ *** - Ordering Of Messages\n\t\t72. *** FAQ *** - Unary vs Streaming\n\t\t73. *** FAQ *** - Stream Observer Thread Safety\n\t\t74. *** FAQ *** - Sequential vs Parallel Processing\n\t\t75. *** FAQ *** - Streaming Backpressure\n\t\tQuiz 2: Quiz\n\tSection 5: gRPC - Client Streaming\n\t\t76. Introduction\n\t\t77. Service Definition\n\t\t78. Why We Return Stream Observer?\n\t\t79. Streaming Request Handler Implementation\n\t\t80. Demo via Postman\n\t\t81. Integration Test\n\t\t82. Cancel Stream\n\tSection 6: gRPC - BiDirectional Streaming\n\t\t83. Introduction\n\t\t84. Service Definition\n\t\t85. BiDirectional Streaming Service Implementation\n\t\t86. Demo via Postman\n\t\t87. Independent Stream Demo\n\t\t88. Integration Test\n\t\t89. Interactive Stream\n\t\t90. Flow Control - Service Implementation\n\t\t91. Flow Control Demo via Postman\n\t\t92. Manual Flow Control Client - Part 1\n\t\t93. Manual Flow Control Client - Part 2\n\t\t94. Manual Flow Control Client - Part 3\n\tSection 7: Client/Server - Interactive Game - ASSIGNMENT\n\t\t95. Introduction\n\t\t96. Resource - Proto\n\t\t97. Game Implementation\n\tSection 8: Input Validation / Error Handling\n\t\t98. Introduction\n\t\t99. Resource- gRPC Status Codes\n\t\t100. Project Setup\n\t\t101. Request Validator Utility\n\t\t102. Input Validation Implementation\n\t\t103. Demo via Postman\n\t\t104. Unary Error Handling - Integration Test\n\t\t105. Server Streaming Error Handling - Integration Test\n\t\t106. What About Server Error?\n\t\t107. What About Other Communication Patterns?\n\t\t108. Trailer Metadata\n\t\t109. Service Definition\n\t\t110. Project Setup\n\t\t111. Trailer Metadata Implementation\n\t\t112. Demo via Postman\n\t\t113. String Metadata\n\t\t114. Accessing Trailer via Status\n\t\t115. ASSIGNMENT - Trailer For Server Streaming\n\t\t116. Error Message via OneOf\n\t\t117. Summary\n\tSection 9: Deadline\n\t\t118. Introduction\n\t\t119. Integration Testing\n\t\t120. Streaming Deadline Issue\n\t\t121. Streaming Deadline Issue Fix\n\t\t122. WaitForReady\n\t\t123. WaitForReady & Deadline\n\tSection 10: Channel / LoadBalancing\n\t\t124. Introduction\n\t\t125. Persistent Connection\n\t\t126. Lazy Channel Creation\n\t\t127. Eager Channel Creation\n\t\t128. Server KeepAlive Configuration\n\t\t129. KeepAlive - Demo\n\t\t130. Load Balancing\n\t\t131. Resource - Docker Compose\n\t\t132. Load Balancing - Demo\n\t\t133. Streaming Request Load Balancing - Clarification\n\t\t134. gRPC On Kubernetes\n\t\t135. Summary\n\tSection 11: Interceptor / Call Options / Metadata / Context\n\t\t136. Introduction\n\t\t137. gzip Compression\n\t\t138. Call Options - gzip\n\t\t139. FAQ - What About Other Compression Algorithms?\n\t\t140. Call Options - Changing Executor\n\t\t141. Interceptor - Introduction\n\t\t142. Deadline via Interceptor\n\t\t143. Override Interceptor's Deadline\n\t\t144. Compression via Interceptor\n\t\t145. Multiple Interceptors\n\t\t146. Server Interceptor\n\t\t147. Refactoring Test\n\t\t148. CallOptions vs Metadata vs Context\n\t\t149. Interceptor/Metadata - API Key Validator - Part - 1\n\t\t150. Interceptor/Metadata - API Key Validator - Part - 2\n\t\t151. Interceptor/Metadata - API Key Validator - Demo via Postman\n\t\t152. FAQ - Accessing RPC Information In Interceptor\n\t\t153. Interceptor/CallCredentials - User Session Token - Part - 1\n\t\t154. Interceptor/CallCredentials - User Session Token - Part - 2\n\t\t155. Interceptor/CallCredentials - User Session Token - Demo\n\t\t156. Context - Introduction\n\t\t157. Interceptor/Context - User Role - Part - 1\n\t\t158. Interceptor/Context - User Role - Part - 2\n\t\t159. Interceptor/Context - User Role - Demo\n\t\t160. Summary\n\tSection 12: SSL/TLS\n\t\t161. Introduction\n\t\t162. Resource - Certificates\n\t\t163. Project Setup\n\t\t164. KeyStore/TrustStore Manager Factory\n\t\t165. Server TLS Configuration\n\t\t166. Integration Testing - Demo\n\tSection 13: Miscellaneous\n\t\t167. Netty Server Configuration\n\t\t168. FAQ - What About Frontend Communication?\n\tSection 14: gRPC / Spring Boot Integration\n\t\t169. Introduction\n\t\t170. Resource - Project Template\n\t\t171. Application Overview\n\t\t172. Project Setup\n\t\t173. Project Walkthrough\n\t\t174. User Entity / Repository\n\t\t175. OPTIONAL - How Spring Data JPA Works\n\t\t176. User Information Request Handler\n\t\t177. Trade - Buy Request Handler\n\t\t178. Trade - Sell Request Handler\n\t\t179. gRPC Controller Advice\n\t\t180. User Service - Server Configuration\n\t\t181. Resource - Server Properties\n\t\t182. User Service - Demo via Postman\n\t\t183. gRPC InProcess Server\n\t\t184. User Service - Integration Testing - Part - 1\n\t\t185. User Service - Integration Testing - Part - 2\n\t\t186. User Service - Integration Testing - Part - 3\n\t\t187. Aggregator Introduction\n\t\t188. gRPC Client - Dependency Injection - Known Issue\n\t\t189. Aggregator - User Information API\n\t\t190. Aggregator - Trade API\n\t\t191. Aggregator - Controller Advice\n\t\t192. What About Stock Service Error?\n\t\t193. SSE Emitter - Crash Course\n\t\t194. Price Update Listener - Implementation - Part - 1\n\t\t195. Price Update Listener - Implementation - Part - 2\n\t\t196. Price Update Initializer\n\t\t197. Aggregator Service Configuration\n\t\t198. Mock Service For Integration Testing\n\t\t199. Aggregator Integration Testing\n\t\t200. Multiple Mock Services\n\t\t201. Server Sent Events Test\n\t\t202. Dirties Context\n\t\t203. Resource - Stock Service\n\t\t204. Demo via Postman\n\t\t205. Resource - Static HTML\n\t\t206. Demo via UI\n\tSection 15: What's Next?\n\t\t207. What's Next?\nGitHub Repo\n\tClick [here](https://github.com/vinsguru/grpc-java-course/tree/master)\n","details":[],"references":[],"createdDate":{"$date":"2024-10-13T19:27:23.354Z"},"updatedDate":{"$date":"2024-10-19T12:55:08.924Z"},"__v":0}
{"_id":{"$oid":"670d85353ce986cdb943d2d9"},"uniqueId":"7dac186a-d6fe-450e-829f-5c7e1ddae759","parentId":"","name":"New Project creation: Project Repository","skeleton":"### [Task]: [New Project creation]: Project Repository [Current status: **Brainstorming in progress**: See in Task History section for details]\n\t**Expectation for next major release 1.1.0**\n\t\t- **Business Logic**\n\t\t\t- The project will contain all personal and professional project details, including:\n\t\t\t\t- Project name\n\t\t\t\t- Repository location\n\t\t\t\t- Unique slug (derived from the repository location)\n\t\t\t\t- Tech stacks\n\t\t\t\t- Purpose of the project\n\t\t\t\t- All version details (a multiline string)\n\t\t\t\t- Next major release and its target (a multiline string)\n\t\t\t\t- Current version and its target (a multiline string)\n\t\t\t\t- Related company details, such as:\n\t\t\t\t\t- Company name\n\t\t\t\t\t- Other relevant details\n\t\t\t- Secure API\n\t\t\t\t- Secured by JWT tokens\n\t\t\t\t- Role-based access control\n\t\t\t\t\t- Admins can edit data\n\t\t\t\t\t- Readers can view data\n\t\t\t\t- Granular authority for the Reader role:\n\t\t\t\t\t- Readers can access one or more project details based on configuration\n\t\t\t- Users with either admin or reader roles can log into the application:\n\t\t\t\t- Since the user base is currently small, in-memory user details are preferred for now\n\t\t\t\t- Later, a centralized approach for managing user details will be implemented\n\t\t\t\t- Users with the reader role can:\n\t\t\t\t\t- Use the UI to update/view their details\n\t\t\t\t\t- Use the API with a valid JWT token\n\t\t\t- Admins can:\n\t\t\t\t- Create new user accounts\n\t\t\t\t- View user details\n\t\t\t\t- Reset passwords\n\t\t\t\t\t- Note: Admins cannot edit user details other than the role and a few other fields, which should only be managed by admins\n\t\t- **Backend Application**\n\t\t\t- API to perform CRUD operations for projects\n\t\t\t- Filters to validate JWT tokens before granting access\n\t\t\t- Filters to check user roles (either admin or reader) before allowing access to specific REST resources\n\t\t\t- Some public APIs will be determined based on user feedback\n\t\t- **UI Application**\n\t\t\t- A login screen\n\t\t\t- A sign-up request form\n\t\t\t- A 404 error page for unsupported resources\n\t\t\t- A centralized popup to display error/success/warning messages\n\t### Additional Features\n\t\t- **Audit Logs**\n\t\t\t- Track all changes made by admins and readers.\n\t\t\t- Log user activities for security and monitoring purposes.\n\t\t- **Search Functionality**\n\t\t\t- Allow users to search for projects by name, slug, or other related details.\n\t\t\t- Filter results based on roles (admin/reader).\n\t\t- **API Documentation**\n\t\t\t- Auto-generate API documentation for easier integration and usage by third parties.\n\t\t- **Data Export/Import**\n\t\t\t- Ability to export project data in various formats (CSV, JSON).\n\t\t\t- Import functionality to quickly add multiple projects.\n\t### **Brainstorming**\n\t\t#### Why this Project needed?\n\t\t\t1. We (Premendra Kumar and whole SPP organization) wants to\n\t\t\t\tCollect information (especially **purpose**) about all its projects\n\t\t\t\t\tSo that\n\t\t\t\t\t\tHe can better prepare for his interview for the burning questions (Related to projects, companies or tech stacks), such as\n\t\t\t\t\t\t\tWhat was your role and responsibilities in your last N projects? , or\n\t\t\t\t\t\t\tWhat is your strengths? or\n\t\t\t\t\t\t\tWhat all technologies you have worked\n\t\t\t\t\t\tWe can create a central project for below reasons\n\t\t\t\t\t\t1. Create a central place to store all (personal or professional) project information\n\t\t\t\t\t\t2. Expose API with secured Access Token, as mentioned in expectations\n\t\t\t\t\t\t3. Practice to create a role-based secure API and UI, to manage\n\t\t\t\t\t\t\tUser details\n\t\t\t\t\t\t\tUser access\n\t\t\t\t\t\t\tDetails of\n\t\t\t\t\t\t\t\tProject\n\t\t\t\t\t\t\t\tModules inside a projects\n\t\t\t\t\t\t\t\tComponent's versioning\n\t### Task History\n\t\t[15-Oct-2024]: This task logged. Brainstorming is in progress\n","details":[],"references":[],"createdDate":{"$date":"2024-10-14T20:55:17.707Z"},"updatedDate":{"$date":"2024-10-17T11:05:54.116Z"},"__v":0,"softDelete":false}
{"_id":{"$oid":"670fb6e2375fe300856a3767"},"uniqueId":"6feb2106-b0d4-4964-847b-6bb51f0e5586","parentId":"","name":"[Template]: [Tasks In my mind]: From mind to implementation, with thorough Explanation and traceable milestone steps","skeleton":"### [Template] Tasks In my mind: From Vision to Reality: Turning Ideas into Action with Clear Steps and Milestones\n\t**[Metadata]**:\n\t\t**AKA**\n\t\t\tIn my own words **Tasks In my mind: From mind to implementation, with thorough Explanation and traceable milestone steps**\n\t\t\t**From Vision to Reality:** A Comprehensive Framework for Task Execution with Milestones and Workflows\n\t\t\t**From Ideas to Implementation:** Crafting a Step-by-Step Approach with Clear Explanations and Trackable Milestones\n\t\t**[ABOUT]**\n\t\t\tThis framework aims to establish a smooth workflow from the initial conception of a task to its successful execution. It provides a structured template for documenting and managing each task, ensuring consistency and traceability. Whether a task is fully developed or still an idea, this template helps clarify its purpose, execution plan, and progress tracking.\n\t\t**[Purpose]**: Why this Template?\n\t\t\tThis template will serve as a blueprint for all future tasks, ensuring that every new task follows a structured format with clear objectives, steps, and measurable milestones.\n\t\t\tAlso I want to establish a `Common Workflow` for `Task-Mgmt` module, which should be followed to\n\t\t\t\tCreate a task\n\t\t\t\tChanging status of a task\n\t\t\t\tMaking on-hold a task\n\t\t\t\tPre-condition check for a task\n\t\t\t\t\tBefore moving it to a new status\n\t\t\t\t\tBefore closing a task\n\t\t**[Different kinds of tasks]**: Their names and `Workflow` to execute them\n\t\t\t**Type :** Task, with minimal information\n\t\t\t\tWorkflow\n\t\t\t\t\tA `Task creator` should create a `Task` with a title and a `description` ( `Problem statement` or `Requirement` or `Change request`)\n\t\t\t\t**Sub-Types**: Bug, Enhancement request, Data request etc.\n\t\t\tHere is the rearranged list of task types based on whether changes are required or not:\n\t\t\t\t**Tasks Requiring Changes**: CRs\n\t\t\t\t\t**Change Requests:**\n\t\t\t\t\t\tThe task executor needs to modify or update something in the existing system, application, or workflow.\n\t\t\t\t\t**Bug Fixes:**\n\t\t\t\t\t\tThe task executor is required to resolve issues or defects in the system to restore expected functionality.\n\t\t\t\t\t**Feature Development:**\n\t\t\t\t\t\tThis involves adding new functionality or features to the system, application, or workflow as per requirements provided by the task assigner.\n\t\t\t\t\t**Optimization Tasks:**\n\t\t\t\t\t\tThese tasks focus on improving the performance, efficiency, or scalability of existing systems, workflows, or codebases.\n\t\t\t\t\t**Refactoring Tasks:**\n\t\t\t\t\t\tThese tasks focus on restructuring or cleaning up existing code to improve maintainability, readability, or performance, without changing its external behavior.\n\t\t\t\t\t**Deployment Tasks:**\n\t\t\t\t\t\tTasks that involve deploying new releases, updates, or configurations to production or other environments.\n\t\t\t\t**Tasks Not Requiring Changes**: Non-CRs\n\t\t\t\t\t**Data Requests:**\n\t\t\t\t\t\tThe task assigner is requesting specific data, with no changes needed to the existing system, application, or workflow.\n\t\t\t\t\t**Documentation Tasks:**\n\t\t\t\t\t\tThese tasks require creating or updating documentation, such as user guides, technical specs, or API references, without altering the system itself.\n\t\t\t\t\t**Research & Exploration Tasks:**\n\t\t\t\t\t\tThe task executor is required to explore new technologies, tools, or approaches and provide insights or recommendations for future decisions.\n\t\t\t\t\t**Testing & QA Tasks:**\n\t\t\t\t\t\tThese tasks involve verifying the functionality of a system, application, or workflow to ensure it meets quality standards, without requiring direct changes.\n\t\t**[Pre-Conditions]**: [TBD]: before closing a task\n\t\t\tBelow are few preconditions, before closing a task. **Note**: this list can be changed before actual implementation starts\n\t\t\t\t[Pre-condition#1]: **Task Raiser Must Provide a Clear `Description` and `Expectations` of the Task:**\n\t\t\t\t\tThe description should clearly define the purpose of the task.\n\t\t\t\t\tIt should outline any necessary background or context needed to understand the task.\n\t\t\t\t\tThe description should be detailed enough to prevent any confusion among stakeholders or team members.\n\t\t\t\t[Pre-condition#2]: **Task Raiser Must Provide Expectations Related to the Task:**\n\t\t\t\t\tExpectations should include what success looks like for the task.\n\t\t\t\t\tShould cover the scope, deliverables, and acceptance criteria.\n\t\t\t\t\tAny constraints or limitations for the task must be clearly mentioned.\n\t\t\t\t[Pre-condition#3]: **The Task Should Be Marked as \"Review Done\" Before Closure:**\n\t\t\t\t\tThe task should go through a thorough review process, either by a peer or manager.\n\t\t\t\t\tA review checklist should be completed to ensure all aspects are covered.\n\t\t\t\t\tAny feedback received from the review should be addressed before proceeding to closure.\n\t\t\t\t[Pre-condition#4]: **The Task Must Not Have Any Open Dependencies or Blockers:**\n\t\t\t\t\tEnsure all dependent tasks are completed or resolved.\n\t\t\t\t\tThere should be no unresolved blockers that prevent task completion.\n\t\t\t\t\tCheck for any potential delays caused by external or internal factors and resolve them.\n\t\t\t\t[Pre-condition#5]: **The Task Must Pass All QA Checks or Automated Tests:**\n\t\t\t\t\tIf the task involves code or functionality, it must pass unit tests and integration tests.\n\t\t\t\t\tQA should verify that the task meets all quality requirements.\n\t\t\t\t\tIf applicable, ensure security or performance tests are completed.\n\t\t\t\t[Pre-condition#6] **All Reviewers Must Approve the Task Before It Can Be Closed:**\n\t\t\t\t\tCollect approval from stakeholders or team leads who are responsible for verifying task success.\n\t\t\t\t\tThe task must go through necessary sign-offs, including technical and business reviews.\n\t\t\t\t\tIn case of disapproval, address concerns and resubmit for review.\n\t\t\t\t[Pre-condition#7]: **The Task Should Have a `Final Status Report` or `Summary Update` or `Technical and/or Client RCA` Provided:**\n\t\t\t\t\tSummarize what was accomplished in the task and how it was completed.\n\t\t\t\t\tInclude any important changes or decisions made during task execution.\n\t\t\t\t\tThe status report should outline any lessons learned or improvements for future tasks.\n\t\t\t\t[Pre-condition#8]: **Documentation of Any Changes or Updates Must Be Complete:**\n\t\t\t\t\tEnsure all documentation (e.g., technical specs, user guides, etc.) is updated based on task execution.\n\t\t\t\t\tIf the task involved code, ensure it is commented appropriately for future reference.\n\t\t\t\t\tProvide version control or change logs if applicable.\n\t\t\t\t[Pre-condition#9]: **Notify All Relevant Stakeholders:**\n\t\t\t\t\tNotify stakeholders (e.g., team members, managers, clients) of the task's closure.\n\t\t\t\t\tEnsure stakeholders are aware of any follow-up actions or related tasks.\n\t\t\t\t\tIf needed, conduct a closure meeting or update session to discuss task results.\n\t\t\t**[Final Note]**:\n\t\t\t\tBy following these pre-conditions, tasks can be completed thoroughly and ensure quality and accountability across the team.\n\t\t**[Different kinds of RCA]**: Their names and who all `user-roles` should see them\n\t\t\t**Technical RCA**: Should only visible to `internal technical team`\n\t\t\t**User RCA**: Should be visible to `all logged-in users`.\n\t\t\t\tAlso it should be published, before `UAT Sign-off` request sent to `End-User`\n\tAll tasks, either started or just in mind\n\t\t**[TASK]**: **[Status: `In Progress`]**: Add an option in `PopupMenu Options` for copy the name of a `MemoryMap` item, in `Memory Maps` module\n\t\t\t**[Workaround]**\n\t\t\t\tOpen Edit popup for the `MemoryMap` item, which name is supposed to be copied.\n\t\t\t\tSelect its name from input field and copy it.\n\t\t**[TASK]**: Add an option in `PopupMenu Options` for copy the `yaml-equivalent-text` or `tabbed-indented-string` or `json-equivalent-text` of a `MemoryMap` item, in `Memory Maps` module\n\t\t\t**[Workaround]**\n\t\t\t\tCopy whole skeleton text in currently possible `tabbed-indented-string` format\n\t\t\t\tmanually extract the text of desired `MemoryMap` item\n\t\t**[TASK]**: Create a new route `/apna-playground` in TweetApp application\n\t\t\t**[Brain-Storming]**: Before Implementation\n\t\t\t\t**[Why]**:\n\t\t\t\t\tSo that I can develop custom components, rapidly and by tracking its versions\n\t\t\t**[Plan in my mind]**: **[Purpose]**: **[Justification for this task]**\n\t\t\t\tI want to upgrade custom components independently, like `SmartEditor`, `MemoryMaps`, `SmartPreviewer` and few future components like `CustomForm`\n\t\t\t\tInspiration came in my mind from idea to upgrade `MemoryMaps` component, so that it can support rendering of a json with fields `title`/ `name` {Mandatory field}  and few more fields as per business requirement\n\t\t\t**[Milestones]**\n\t\t\t\t**[MILESTONE_1]**:\n\t\t\t\t\tUpgrade: `MemoryMaps` component to `MemoryMapsV1_1_0` {Refer acceptance criteria for details}\n\t\t\t\t\t\t**[ACCEPTANCE_CRITERIA]**:\n\t\t\t\t\t\t\t`MemoryMapsV1_0_0` should be designed, so that\n\t\t\t\t\t\t\t\tIt can render a custom card component, with a description field\n\t\t\t\t\t\t\t\t\tDescription component will contain a `SmartContent` format data, with initially only to render a html or markdown format data\n\t\t\t\t\t\t\t\tMemoryMap `skeleton` data which is used to render the tree, it should be saved as either of below format, as per developer's convenience or better performant way\n\t\t\t\t\t\t\t\t\t`tabbed-indented-string` ( `TIS`) , format. or a valid `yaml-format-text` ( `YFT` ) format\n\t\t\t\t\tUpgrade: `SmartEditorV3` component to `SmartEditorV4`  {Refer acceptance criteria for details}\n\t\t\t\t\t\t**[ACCEPTANCE_CRITERIA]**:\n\t\t\t\t\t\t\t`SmartEditorV4` should be designed, so that\n\t\t\t\t\t\t\t\t**[OPEN]**: It can accept and parse string of `TIS` (Tabbed Indented String) as well as `YAML` format and generate json\n\t\t\t\t\t\t\t\t**[OPEN]**:  it can support rendering of a json with fields `title`/ `name` {Mandatory field}  and few more fields as per business requirement\n\t\t\t\t\t\t\t\t\t**[OPEN]**: and render the generated JSON to as either\n\t\t\t\t\t\t\t\t\t\traw text shown in a '<p>'\n\t\t\t\t\t\t\t\t\t\ttree structure\n\t\t\t\t\t\t\t\t\t\tyaml preview\n\t\t**[TASK]** - **Identify all possible ways** user can input in a system\n\t\t\tSome possible ways\n\t\t\t\tThrough UI\n\t\t\t\tFill the form designed by frontend development team\n\t\t\t\tPass an equivalent json format input, through\n\t\t\t\t\tText area\n\t\t\t\t\tan api response\n\t\t**[TASK]**: Add a **warnings/errors showing component** in Cards component\n\t\t\t**[Additional Details About Task]**: **[In words of Task assigner]**\n\t\t\t\tThis task is related to the **TweetApp** application, specifically to enhance the user experience in the `Task-Mgmt` module by implementing a notification system for errors or warnings in the TaskCard component.\n\t\t\t\tCurrently do the requested changes in below Cards in TweetApp application\n\t\t\t\t\tTaskCard of `Task-Mgmt` module\n\t\t\t**[Brain-Storming]** Before Implementation\n\t\t\t\t**Why is this task necessary?**\n\t\t\t\t\tTo improve user interaction by providing real-time feedback about system errors or warnings on task cards, ensuring a more informative and user-friendly experience\n\t\t\t**[Steps]** : **[Identification Of Steps: To decide how to and in which sequence we should proceed]**\n\t\t\t\t1. **Identify key scenarios** where warnings or errors need to be shown.\n\t\t\t\t2. **Design and develop a reusable error/warning component** for integration into TaskCard.\n\t\t\t\t3. **Test the component** in different scenarios to ensure consistency.\n\t\t\t\t4. **Document usage guidelines** for the development team.\n\t\t\t**[Acceptance Criteria]**\n\t\t\t\t- A functional warnings/errors component is integrated into TaskCard.\n\t\t\t\t- The component dynamically displays appropriate messages based on the system state.\n\t\t\t\t- Proper testing ensures no impact on existing functionality.\n\t\t\t**[Task Status Dashboard]**\n\t\t\t\t- **Task Created**: [Date]\n\t\t\t\t- **In Progress**: [Yes/No]\n\t\t\t\t- **Assigned To**: [Developer]\n\t\t\t\t- **Next Milestone**: [Description of the milestone]\n\t\t\t\t- **Completion Target**: [Target date for task completion]\n\t\t**[Task]**: In TweetApp project, `identify commonality` among created common components and re-organize code base for `better re-usability`\n\t\t**[TASK]**: **[Status: `Done`]**:  Refactor TweetApp: move custom components in their respective folders\n\t\t\t**[Expectations]**:\n\t\t\t\tAll custom components moved in their respective folders\n\t\t\t\tResolve errors, due to this refactoring\n\t\t\t\tApplication should be in running state, post this activity.\n\t\t\t**[Brainstorming]**:\n\t\t\t\tWhy this activity needed?\n\t\t\t\t\tThis activity needed due to\n\t\t\t\t\t\t1. `Organize code` in separate folders\n\t\t\t\t\t\t2. Later `identify commonality` among created common components and re-organize code base for `better re-usability`\n\t\t\t**[Task History]**:\n\t\t\t\t[17-Oct-2024] - Task picked by developer, development in progress\n\t\t\t\t[18-Oct-2024] - Development done\n\t\t**[Bug]**: [Status: `Development-Done: UAT in progress`]: On edit a Topic section, in `Topic-Mgmt module`, in `TweetApp`, the previous data is not populating\n\t\t\t**[Problem Statement]**:\n\t\t\t\tI want to edit, some text in below section.\n\t\t\t\t\tMy section url http://localhost:3002/topic-mgmt/da4fadd8-2485-44e2-b535-a5309a0d2a89?sectionId=bdc5e715-f778-4909-be38-60cc8eb5a26d\n\t\t\t\t\t\tbut unable to perform the action.\n\t\t\t\t\t\tPlease check and do the needful.\n\t\t\t**[RCA]**:\n\t\t\t\tIn `TopicSectionForm`, the mentioned fetch API was taking time. Hence, introduced a `loading` state. Now data to the `SmartEditorV3` component will only passed, once fetch process get completed successfully.\n\t\t**[Bug]**: **[status: `On Hold: Not Replicated`]**: - On updating an `Activity` in `Task-Mgmt` module, New `Activity` is being created, in place of updating the existing one\n\t\t\t**[Replication-Steps]**:\n\t\t\t\tAs mentioned in heading, the new activity is being created, when updating an activity.\n\t\t\t\tIssue replicated with developer and developer agreed as this is valid bug\n\t\t\t**[Bug-fix Strategy]**:\n\t\t\t\tAs per initial observation, issue might be in code where frontend form is passing data to backend. Actual `RCA` (Root cause analysis) will be shared at time of issue resolution and before raising PR for the same\n\t\t\t**[Root Cause analysis]**:\n\t\t\t\tTo be published\n\t\t**[Task: Minor enhancement]**: [Status: `Development done: UAT in progress`]: [TweetApp]: [Common-Component]: [JSONDataViewer]: Added a default value for title prop, if user has not provided it.\n\t\t\tDevelopment done\n\t\t\tChanges deployed in test environment\n","details":[],"references":[],"createdDate":{"$date":"2024-10-16T12:51:46.609Z"},"updatedDate":{"$date":"2024-10-19T21:33:54.901Z"},"__v":0,"softDelete":false}
{"_id":{"$oid":"671019fe375fe300856a782a"},"uniqueId":"f445e37b-5feb-408f-bf3e-de0ccd64a21c","parentId":"","name":"[Sample Memory Map]: [To be used for]: [MILESTONE_1]: Upgrade MemoryMaps component to MemoryMapsV1_1_0","skeleton":"","details":[],"references":[],"createdDate":{"$date":"2024-10-16T19:54:38.81Z"},"updatedDate":{"$date":"2024-10-16T19:55:54.472Z"},"__v":0}
{"_id":{"$oid":"67120b99b563d8fd4a9ec5f0"},"uniqueId":"64c6f131-30cf-4d5a-b84f-40691bcd9f85","parentId":"","name":"[Template]: [Process decision]: [Turning Ideas into Action]: A Smarter Approach to Organizing My Life","skeleton":"### **[Process decision]:** [Turning Ideas into Action]: A Smarter Approach to Organizing My Life\n\t**[Metadata]:**\n\t\t**Why this Template?**\n\t\t\tTo take decision about changes needed in a system.\n\t\t\t\tFor example\n\t\t\t\t\t[Task: To Decide]: [A question which needs decision]: Few Example questions as below\n\t\t\t\t\t\tis this change needed?\n\t\t\t\t\t\tHow should we proceed?\n\t\t\t\t\t\tWhat is current/existing approach about the functionality?\n\t\t\t\t\t\t\tWhat are new functionalities requested?\n\t\t\t\t\t\t\tIs there any `workaround available and to be shared with customers`, till the time enhancement become `fully-developed`, `tested` / `verified` in `QA`, `Pre-prod` environment?\n\t\t\t\t\t\tWhat to do next?\n\t\t\t\t\t\tHow should we proceed for Developing a new functionality?\n\t\t\tThis template serves as a practical tool to streamline decision-making, helping you break down complex ideas into actionable, organized steps.\n\t\t**When to Use It?**\n\t\t\tUse this template when you're facing important decisions, whether related to personal projects, work tasks, or system changes that require clarity.\n\t\t**Benefits:**\n\t\t\tProvides a clear framework to evaluate decisions.\n\t\t\tHelps avoid confusion by structuring thought processes.\n\t\t\tEncourages a balanced view of possible outcomes.\n\t\t\tEnsures alignment with goals and priorities.\n\t\t**Key Considerations:**\n\t\t\tWhat’s the impact of the decision?\n\t\t\tWho is affected by the decision?\n\t\t\tAre there any alternative solutions?\n\t\t\tHow does this decision align with long-term goals?\n\t\t**[Tools]**: That Could Be Useful for Making Better Decisions in a Development Team:\n\t\t\t1. **Design Patterns:**\n\t\t\t\t- Provide standardized solutions to common problems in software design.\n\t\t\t\t- Can improve code maintainability and scalability by following established best practices.\n\t\t\t\t- Examples of common design patterns:\n\t\t\t\t\t- **Singleton:** Ensures only one instance of a class exists and provides a global point of access.\n\t\t\t\t\t- **Observer:** A way to define one-to-many dependencies so that when one object changes, all its dependents are notified.\n\t\t\t\t\t- **Factory Method:** Defines an interface for creating objects but lets subclasses alter the type of objects that will be created.\n\t\t\t2. **SOLID Principles:**\n\t\t\t\t- These principles help developers create more understandable, flexible, and maintainable software.\n\t\t\t\t- Sub-points under SOLID:\n\t\t\t\t\t- **Single Responsibility Principle (SRP):** A class should have one, and only one, reason to change, meaning it should have only one job or responsibility.\n\t\t\t\t\t- **Open/Closed Principle (OCP):** Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.\n\t\t\t\t\t- **Liskov Substitution Principle (LSP):** Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.\n\t\t\t\t\t- **Interface Segregation Principle (ISP):** No client should be forced to depend on methods it does not use, encouraging the use of specific interfaces rather than general-purpose ones.\n\t\t\t\t\t- **Dependency Inversion Principle (DIP):** High-level modules should not depend on low-level modules; both should depend on abstractions.\n\t\t\t3. **Agile Methodology:**\n\t\t\t\t- Promotes iterative development, continuous feedback, and flexibility in responding to changes.\n\t\t\t\t- Ensures team collaboration, early delivery of value, and adaptability to project needs.\n\t\t\t\t- Helps maintain a focus on the most critical features and allows for efficient decision-making based on real-time results.\n\t\t\t4. **Version Control Systems (e.g., Git):**\n\t\t\t\t- Essential for tracking changes in code and collaborating within teams.\n\t\t\t\t- Provides the ability to roll back to previous versions, making it easier to handle mistakes and experiment with ideas.\n\t\t\t\t- Tools such as GitHub or Bitbucket enable collaborative development with code reviews and branching strategies for managing multiple features simultaneously.\n\t\t\t5. **Continuous Integration & Continuous Deployment (CI/CD):**\n\t\t\t\t- Automates the process of integrating code changes, running tests, and deploying to production environments.\n\t\t\t\t- Ensures quicker feedback on the success or failure of newly integrated code.\n\t\t\t\t- Helps teams make more informed decisions based on test results and ensures stability in releases.\n\t\t\t6. **Test-Driven Development (TDD):**\n\t\t\t\t- Encourages developers to write tests before writing code, ensuring that functionality is clear and verifiable.\n\t\t\t\t- Helps catch bugs early and makes it easier to refactor code without breaking existing features.\n\t\t\t\t- Leads to cleaner, more modular code that is easier to maintain.\n\t\t\t7. **Kanban Boards (e.g., Trello, Jira):**\n\t\t\t\t- Visualize the workflow, track progress, and ensure tasks move smoothly from start to completion.\n\t\t\t\t- Useful for prioritizing tasks and keeping track of what’s in progress, blocked, or completed.\n\t\t\t\t- Helps in breaking down large tasks into smaller, actionable items, improving focus and decision-making.\n\t\t\t8. **Code Review Practices:**\n\t\t\t\t- Ensures that code follows team standards, is efficient, and is free from potential bugs.\n\t\t\t\t- Promotes knowledge sharing and helps identify potential design flaws early in the process.\n\t\t\t\t- Encourages collaboration and learning across the team, leading to more informed decisions during implementation.\n\t\t\t9. **Technical Debt Management:**\n\t\t\t\t- Track and address technical debt regularly to avoid long-term complications.\n\t\t\t\t- Balances between quick fixes and the need for sustainable, scalable solutions.\n\t\t\t\t- Helps teams make better decisions when planning new features by understanding the existing state of the codebase.\n\t\t\t10. **Project Management Tools (e.g., Asana, Monday):**\n\t\t\t- Organize tasks, set deadlines, and track project progress.\n\t\t\t- Improve communication within teams, ensuring that everyone is aware of their responsibilities and project timelines.\n\t\t\t- Helps in better decision-making by providing a clear overview of the project's current status and upcoming milestones.\n\t\t**Example Scenarios:**\n\t\t\t1. **Task: Introduce a New Feature into the Product:**\n\t\t\t\t- Should the feature be built from scratch, or can we reuse existing components?\n\t\t\t\t- Which design pattern would best suit this feature? (e.g., using the Factory method for flexibility in object creation)\n\t\t\t2. **Task: Decide on Refactoring a Legacy Module:**\n\t\t\t\t- Should we refactor now, or postpone it to manage other high-priority tasks?\n\t\t\t\t- How much technical debt is there, and can it affect future feature development?\n\t\t\t\t- Would following SOLID principles reduce future complexity?\n\t\t\t3. **Task: Optimize the Build and Deployment Process:**\n\t\t\t\t- Can we implement CI/CD pipelines to automate testing and deployment?\n\t\t\t\t- What is the impact of manual deployment errors on our production timeline?\n\t\t\t4. **Task: Plan a Sprint for New Features in Agile Development:**\n\t\t\t\t- What is the priority of the current backlog items, and how do we decide what to work on next?\n\t\t\t\t- Should we allocate time for bug fixes and addressing technical debt alongside feature development?\n\t\t\t5. **Task: Implement a New Authentication System:**\n\t\t\t\t- Should we integrate with an external authentication service, or build our own?\n\t\t\t\t- How will the chosen authentication system impact security, user experience, and scalability?\n\t\t\t6. **Task: Migrate from Monolithic to Microservices Architecture:**\n\t\t\t\t- What services should be extracted first, and how will they interact with the existing system?\n\t\t\t\t- How do we ensure that the system remains stable during the migration process?\n\t\t\t7. **Pre-Conditions**:  Before closing a task, ensure the following:\n\t\t\t\tThe **Task Raiser** has provided a clear **description** of the task.\n\t\t\t\tThere are clear **expectations** outlined for the task, including success criteria.\n\t\t\t\tDependencies or prerequisites for the task are checked and completed.\n\t\t\t\t**Stakeholders** are informed of the progress and any issues identified.\n\t\t\t\tFeedback, if applicable, has been considered or integrated.\n\t\t\t8. **[Task: To Decide]:** *Identify the question that requires a decision.*\n\t\t\t\tIs this change necessary for improving user experience?\n\t\t\t\tHow do we integrate this new feature without disrupting current functionality?\n\t\t\t\tWhat are the risks of implementing this new system?\n\t\t\t\tHow do we prioritize this change among other tasks?\n\t\t\t\tWhat is the current approach, and how effective has it been so far?\n\t\t\t\tShould we move forward with automating this process, or is manual management sufficient?\n\t\t\t9. **[More Scenarios]**: **[Task: To Improve]**: *Evaluate ongoing system performance and identify areas needing improvement.*\n\t\t\t\t- Should we refactor the legacy code, or is it stable enough for now?\n\t\t\t\t- How do we optimize task flow to reduce manual work?\n\t\t\t\t- What processes can we automate to save time?\n\t\t\t10. **[More Scenarios]**: **[Task: To Align]:** *Ensure alignment between teams or within a project.*\n\t\t\t\tAre all teams on the same page with this project update?\n\t\t\t\tDoes this decision align with the overall strategy and timeline?\n\tAll Process Decisions, either taken or just in mind\n\t\t**[Process Decision)**: **[`TBD`]**: **[Target: To optimize component code]**:\n\t\t**[Process Decision)**: **[`TBD`]**: **[Target: To apply uniform styles across applications]**:\n\t\t**[Process Decision)**: **[`TBD`]**: **[Target: To upgrade Application to TypeScript]**:\n\t\t**[Process Decision)**: **[`TBD`]**: **[Target: To extract common components and put them in central library]**: To be accessible and shared with multiple application\n\tFinal Note\n\t\tBy following this decision-making process and leveraging the tools mentioned above, development teams can stay organized and make informed choices that lead to better results.\n\t\tBy adding these details, the template becomes a versatile tool for organizing decisions, tracking progress, and ensuring clarity across teams.\n","details":[],"references":[],"createdDate":{"$date":"2024-10-18T07:17:45.904Z"},"updatedDate":{"$date":"2024-10-19T21:21:20.966Z"},"__v":0,"softDelete":false}
{"_id":{"$oid":"6713e4202ca9a725ba4aa726"},"uniqueId":"0782fc83-59be-4e36-9cd1-23fc9ef40b17","parentId":"","name":"**[Data-Request]**: **[Know Your Application]**: **[TweetApp]**: -Its current features, capabilities, modules, major components, limitations, bugs, upcoming features and many more","skeleton":"### **[Data-Request]**: **[Know Your Application]**: **[Unveiling `TweetApp`]**: - Explore Its Features, Capabilities, Modules, Key Components, Limitations, Bugs, Upcoming Enhancements, and Much More!\n\t**[AKA]**:\n\t\t**[Data-Request]**: **[Know Your Application]**: **[TweetApp]**: -Its current features, capabilities, modules, major components, limitations, bugs, upcoming features and many more!\n\t**[Core Discussions]**:\n\t\t**[Purpose]**:\n\t\t\tLearn and apply ReactJS concepts\n\t\t\tAlso create an application to help\n\t\t\t\tin my interview preparation\n\t\t\t\tin taking decisions\n\t\t\t\ttrack my understanding and logic building capabilities\n\t\t\t\trevise concepts quickly\n\t\t**[History]**:\n\t\t**[Features]**:\n\t\t**[Capabilities]**:\n\t\t**[Modules]**:\n\t\t**[Key Components]**:\n\t\t**[Data Structures]**:\n\t**[Limitations]**:\n\t**[Bugs]**:\n\t**[Upcoming Enhancements]**:\n\tA Final Note\n","details":[],"references":[],"createdDate":{"$date":"2024-10-19T16:53:52.272Z"},"updatedDate":{"$date":"2024-10-19T21:10:23.775Z"},"softDelete":false,"__v":0}
{"_id":{"$oid":"6715136c54bc4b2dc8d2b2ae"},"uniqueId":"cd6bb190-0e56-4e3a-8f01-748c8d05d9d4","parentId":"","name":"[`Severity 1`]: [`Halting All further changes in Application`]: For sake of fully focus on `Job-Obtaining` and `Better understanding for current situation of development in various projects`","skeleton":"Halting (or Stopping) all development, enhancements, and bug fixes until further (or next) instructions from the CEO of SPP International Pvt Ltd.\n\t**[`Job-Obtaining`]**: Job Search started at: **22-Fen-2024**, Ended on: **.......**\n\t\t**[`Acceptance Criteria`]**: As a job seeker, I want a job where I can:\n\t\t\t**`Earn`** between `32 LPA - 40 LPA`.\n\t\t\t**`Learn`** and **`work`** on development using technologies such as `Java` (especially **Spring Boot** and **Microservices**), `ReactJS`, `MongoDB`, `Docker`, `Kubernetes`, and other latest tools and frameworks.\n\t\t\tPreferably in a **work-from-home** environment, or at least with a **hybrid** mode that allows flexibility.\n\t\t**[`Steps`]**: How should I proceed to get Job as per Acceptance Criteria?\n\t\t\t[`Planned`]: [**Explore Market**]: `Pick few JD from different sources`, (like Naukri.com, Shine.com) which suites my `Acceptance criteria` and identify common demands.\n\t\t\t\t[**`Sample JDs`**]\n\t\t\t\t\tJob | Java Full Stack Developer in Wipro - Hyderabad, Bengaluru, Chennai [`(JD Viewed on: 21 Oct 2024)`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Java Full Stack Developer\n\t\t\t\t\t\t\t**Locations**: Hyderabad, Bengaluru, Chennai\n\t\t\t\t\t\t\t**Required Experience Range**: 10 - 15 years\n\t\t\t\t\t\t\t**CTC**: Not Disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: Hybrid\n\t\t\t\t\t\t\t**Required Skills**: Java, Spring Boot, Microservices, React, Nextjs\n\t\t\t\t\t\t\t**JD Posted by**: Careernet\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: Wipro\n\t\t\t\t\t\t\t**Designation**: Java Full Stack Developer\n\t\t\t\t\t\t\t**Industry**: IT Services & Consulting\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tOur company is `seeking a skilled Java Developer` who `can design and implement microservices` using Spring Boot.\n\t\t\t\t\t\t\tYoull need to be proficient in `Java`, have experience with front-end frameworks (Angular 8+ or `React`), and understand cloud platforms (`AWS`, GCP, or Azure).\n\t\t\t\t\t\t\t`Excellent communication skills` are essential, as you'll collaborate with cross-functional teams to build scalable and resilient applications.\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\tDesign and implement microservices using Spring Boot.\n\t\t\t\t\t\t\tApply event-driven design principles to build scalable and resilient applications.\n\t\t\t\t\t\t\tDevelop responsive user interfaces using Angular or React.\n\t\t\t\t\t\t\tCollaborate with cross-functional teams to design and implement software solutions.\n\t\t\t\t\t\t\tEnsure compliance with the full Software Development Life Cycle.\n\t\t\t\t\t\t\tConnect microservices to interact with databases.\n\t\t\t\t\t\t\tUnderstand streaming technologies like Kafka.\n\t\t\t\t\t\t\tIdentify and find solutions to bugs.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tMinimum 5 years of experience in Angular or React.\n\t\t\t\t\t\t\tAt least 6 months of cloud experience on a current project (AWS, GCP, or Azure).\n\t\t\t\t\t\t\tProficiency in Java and Spring Boot.\n\t\t\t\t\tSenior Java Developer/Technical Lead (Java) [`(JD Viewed on: 21 Oct 2024)`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Senior Java Developer/Technical Lead (Java)\n\t\t\t\t\t\t\t**Locations**: Chennai\n\t\t\t\t\t\t\t**Required Experience Range**: 9 - 14 Years\n\t\t\t\t\t\t\t**CTC**: Not Disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: Remote, WORKING HOURS: 5PM - 2AM (100% Remote)\n\t\t\t\t\t\t\t**Required Skills**: Java, Springboot, Microservices, Restful APIs, Dependency Injection\n\t\t\t\t\t\t\t**JD Posted by**: Appexert Labs\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: https://appexert.com/community\n\t\t\t\t\t\t\t**Designation**: Senior Java Developer/Technical Lead (Java)\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tWe are looking for an experienced Java Spring Boot Developer to join our development team.\n\t\t\t\t\t\t\tIn this exciting role, you'll have the opportunity to design, develop, and maintain robust backend systems that power innovative applications.\n\t\t\t\t\t\t\tWe are seeking a passionate individual who values clean code and adheres to software best practices.\n\t\t\t\t\t\t\tIf you're ready to tackle challenging projects and contribute to a collaborative environment where your skills will make a significant impact, we want to hear from you!\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\tDevelop and maintain scalable applications using Java and Spring Boot.\n\t\t\t\t\t\t\tDesign RESTful APIs to support front-end applications and third-party integrations.\n\t\t\t\t\t\t\tCollaborate with cross-functional teams to define, design, and ship new features.\n\t\t\t\t\t\t\tOptimize applications for maximum speed and scalability.\n\t\t\t\t\t\t\tTroubleshoot and resolve performance and production issues.\n\t\t\t\t\t\t\tConduct code reviews and provide mentorship to junior developers.\n\t\t\t\t\t\t\tStay current with industry trends and emerging technologies to enhance development practices.\n\t\t\t\t\t\t\tParticipate in Agile ceremonies, including sprint planning and retrospectives.\n\t\t\t\t\t\t\tContinuously discover, evaluate, and implement new technologies to maximise development efficiency\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tExperience with cloud platforms (e.g., AWS, Azure, Google Cloud).\n\t\t\t\t\t\t\tFamiliarity with containerization technologies (e.g., Docker, Kubernetes).\n\t\t\t\t\t\t\tUnderstanding of CI/CD pipelines and DevOps practices.\n\t\t\t\t\t\t\tBachelor's degree or equivalent in Computer Science, Software Engineering, or a related discipline.\n\t\t\t\t\t\t\t8+ years of proven experience as a Java Developer, with a strong focus on Spring Boot.\n\t\t\t\t\t\t\tSolid understanding of object-oriented programming principles and design patterns.\n\t\t\t\t\t\t\tExperience with RESTful web services and microservices architecture.\n\t\t\t\t\t\t\tFamiliarity with front-end technologies (e.g., Angular, React) is a plus.\n\t\t\t\t\t\t\tKnowledge of databases (SQL and NoSQL) and ORM frameworks (e.g., Hibernate).\n\t\t\t\t\t\t\tProficient in version control systems (e.g., Git).\n\t\t\t\t\t\t\tExcellent problem-solving skills and attention to detail.\n\t\t\t\t\t\t\tShould have excellent verbal and written communication skills\n\t\t\t\t\tSoftware Developer (Core Java Development, Core Java Programming) [`(JD Viewed on: 21 Oct 2024)`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Software Developer (Core Java Development, Core Java Programming)\n\t\t\t\t\t\t\t**Locations**: Bengaluru\n\t\t\t\t\t\t\t**Required Experience Range**: 10 - 20 Years\n\t\t\t\t\t\t\t**CTC**: 20 - 35 Lacs pa\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: In office\n\t\t\t\t\t\t\t**Required Skills**: Java Full stack Developer with Java 8+ , Maven , React JS, Core Java Development, Core Java Programming\n\t\t\t\t\t\t\t**JD Posted by**: Info Test Ehire Campaign\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: Hiring for Hagnosoft Technologies\n\t\t\t\t\t\t\t**Designation**: Software Developer\n\t\t\t\t\t\t\t**Industry**: Analytics / KPO / Research\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tJava Full stack Developer with Java 8+ , Maven , React JS\n\t\t\t\t\t\t\tCore Java Development, Core Java Programming\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\tJava Full stack Developer with Java 8+ , Maven , React JS\n\t\t\t\t\t\t\tCore Java Development, Core Java Programming\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tExcellent English speaking\n\t\t\t\t\tJava FS ReactJS Developer [`(JD Viewed on: 21 Oct 2024)`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Java Full-Stack Developer with a strong background in React. JS and AWS/Azure\n\t\t\t\t\t\t\t**Locations**: Hyderabad/Noida/Gurugram\n\t\t\t\t\t\t\t**Required Experience Range**: 7 to 15 years / 10 - 16 Years\n\t\t\t\t\t\t\t**CTC**: 27.5 - 42.5 Lacs pa\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: (Hybrid Mode) Should be willing to work from the office 12 days a month.\n\t\t\t\t\t\t\t**Required Skills**: Java, Spring Boot, Microservices, React.Js, NoSQL, Kafka, rest API\n\t\t\t\t\t\t\t**JD Posted by**: Savitr Software Services\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: Savitr Software Services, www.savitr.com\n\t\t\t\t\t\t\t**Designation**: Java FS ReactJS Developer\n\t\t\t\t\t\t\t**Company Type**: offshore software development company\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[About Company]**:\n\t\t\t\t\t\t\t**Introduction**:\n\t\t\t\t\t\t\t\tSavitr provides offshore software development, QA services, application & data migration, embedded system solutions. mobile solutions, Internet of Things (IoT) to meet the business needs of enterprises.\n\t\t\t\t\t\t\t\tWe provide comprehensive technology and web branding solutions spanning varied business domains and entrepreneurial ventures.\n\t\t\t\t\t\t\t\tOur solutions involve research, business process analysis and use of relevant technology.\n\t\t\t\t\t\t\t\tEstablished in 1997, Savitr Software Services (P) Ltd has provided all-encompassing software solutions to customers across the globe by successfully manoeuvring the changing dynamics of offshore software.\n\t\t\t\t\t\t\t**Established In**: 1997\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tReactJS, Java 11+, Microservices, Python/Shell, NoSQL\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\t**Key Responsibilities**: Responsible for design, problem solving, develop, modify, debug and/or maintain software system for one or more specific modules within a large software system scope.\n\t\t\t\t\t\t\t10+ years of hands-on software development experience in solution, design and implementing complex, distributed applications.\n\t\t\t\t\t\t\tBuild high-quality, clean, scalable, and reusable code enforcing best practices around software engineering, architecture,and processes (code reviews, unit testing).\n\t\t\t\t\t\t\tEnsure early detection of security vulnerabilities across application code and infrastructure and track it to remediation based on established SLAs.\n\t\t\t\t\t\t\tApply Agile standard methodologies and DevOps culture across the software delivery lifecycle using standard tools like Jira and Azure DevOps.\n\t\t\t\t\t\t\tDemonstrate a commitment to quality by implementing suitable unit/integration and acceptance testing during feature development.\n\t\t\t\t\t\t\tStrong experience in Java, Spring Boot-based application on both RDBMS (SQL Server / PostgreSQL) and NoSQL (Mongo/Elastic) backbone.\n\t\t\t\t\t\t\tIn-depth knowledge of microservices architecture patterns, principles, and best practices.\n\t\t\t\t\t\t\tProficient in front-end development and implementing code that is well-structured, efficient, and maintainable using React.\n\t\t\t\t\t\t\tHands on experience with frameworks like ReactJS, AngularJS, NodeJS and microservices/event-driven architecture.\n\t\t\t\t\t\t\tExcellent knowledge of relational databases, SQL and ORM technologies (Hibernate, JPA, Spring Data).\n\t\t\t\t\t\t\tComprehensive understanding of cloud native architectures (AWS, Azure, etc.) for containerized microservices.\n\t\t\t\t\t\t\tCollaborate closely with UI/UX designers to turn design mockups into functional design.\n\t\t\t\t\t\t\tDesign and implement new features/applications based on industry standards.\n\t\t\t\t\t\t\tDemonstrate excellent problem-solving skills and the ability to troubleshoot complex technical issues.\n\t\t\t\t\t\t\tDevelop and maintain APIs, backend services, and databases as needed.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tStrong communication and teamwork skills.\n\t\t\t\t\t\t\tReactJS, Java 11+, Microservices, Python/Shell, NoSQL\n\t\t\t\t\tHiring For Technical Lead - JAVA FS _ Immediate Joiners [`(JD Viewed on: 21 Oct 2024)`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Hiring For Technical Lead - JAVA FS _ Immediate Joiners\n\t\t\t\t\t\t\t**Locations**: Greater Noida\n\t\t\t\t\t\t\t**Required Experience Range**: 8 - 13 Years\n\t\t\t\t\t\t\t**CTC**: Not disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: In office\n\t\t\t\t\t\t\t**Required Skills**: Java, JAVAFS, Angular, AWS\n\t\t\t\t\t\t\t**JD Posted by**: Coforge\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: Coforge\n\t\t\t\t\t\t\t**Designation**: Hiring For Technical Lead - JAVA FS _ Immediate Joiners\n\t\t\t\t\t\t\t**Company Type**: IT Company\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[About Company]**:\n\t\t\t\t\t\t\t**Introduction**:\n\t\t\t\t\t\t\t\tCoforge, `formerly known as NIIT Technologies`, is an Indian multinational information technology company based in Noida, India and New Jersey, United States.\n\t\t\t\t\t\t\t\tThe company's stock trades on the Bombay Stock Exchange and on the National Stock Exchange of India under the ticker symbol COFORGE.\n\t\t\t\t\t\t\t**Established In**: 13 May 1992\n\t\t\t\t\t\t\t**Formerly Known As**: NIIT Technologies\n\t\t\t\t\t\t\t**CEO**: Sudhir Singh (May 2017–)\n\t\t\t\t\t\t\t**Headquarters**: India\n\t\t\t\t\t\t\t**Number of employees**: 24,607 (December 2023)\n\t\t\t\t\t\t\t**Website Url**: https://www.coforge.com/\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tJava, JAVAFS, Angular, AWS\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\t**Key Responsibilities**: The person in this role is responsible for the design, development, testing and implementation of software that solves complex business problems, and is scalable, secure, and easy to maintain.\n\t\t\t\t\t\t\tThis position will drive the adherence of technology solutions to the company's architectural standards and business growth.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tNeed a Technical Lead with 8+ years of experience with Java and J2EE/Java EE, Rest API, (including servlets, JSP, JSF, JDBC).\n\t\t\t\t\t\t\tExperience with messaging products like RabbitMQ, Kafka or ActiveMQ.\n\t\t\t\t\t\t\tExperience in AWS Lambda, Serverless, DynamoDB, SQS, Kinesis\n\t\t\t\t\t\t\tExperience working with GitHub, Jira DevOps and CI/CD pipeline Tools and Procedures Docker Containers Basic knowledge of cloud services (PaaS | SaaS | IaaS) AWS Services (ECS, EKS, API Gateway, AWS lambda, IAM etc.).\n\t\t\t\t\t\t\tAbility to troubleshoot and Problem Solving Effective Communication (Written/Oral) Team work and Collabration (Tools - Teams, Confluence, JIRA etc) Quick Learner & Adaptability Asset and Wealth Management (Trade Domain).\n\t\t\t\t\t\t\tKnowledge of Wealth Planning and Proposal is BIG PLUS.\n\t\t\t\t\t~~Architect / Solution Architect~~ [`Just for future reference`]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Architect / Solution Architect\n\t\t\t\t\t\t\t**Locations**: Hyderabad\n\t\t\t\t\t\t\t**Required Experience Range**: 14 - 24 Years\n\t\t\t\t\t\t\t**CTC**: Not disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: In office\n\t\t\t\t\t\t\t**Required Skills**: Java, Core Java\n\t\t\t\t\t\t\t**JD Posted by**: The Hackett Group\n\t\t\t\t\t\t\t**Job Posted in**: Naukri.com\n\t\t\t\t\t\t\t**Company Name**: The Hackett Group\n\t\t\t\t\t\t\t**Designation**: Architect / Solution Architect\n\t\t\t\t\t\t\t**Company Type**: IT Company\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[About Company]**:\n\t\t\t\t\t\t\t**Introduction**:\n\t\t\t\t\t\t\t\tThe Hackett Group, Inc. (NASDAQ: HCKT) is an IP-based strategic consulting and executive advisory firm that enables Digital World Class® performance.\n\t\t\t\t\t\t\t\tUsing AI XPLR – our AI assessment platform – our experienced professionals guide organizations to harness the power of Gen AI to digitally transform their operations and achieve quantifiable, breakthrough results, allowing us to be key architects of their Gen AI journey.\n\t\t\t\t\t\t\t\t**Specialties**: Strategy & Operations, Information Technology, Human Capital, Working Capital, Benchmarking, Advisory, Business Transformation, Sourcing & Procurement, Enterprise Performance Management, Global Business Services, and Supply Chain\n\t\t\t\t\t\t\t**Established In**: 1991\n\t\t\t\t\t\t\t**Formerly Known As**: -\n\t\t\t\t\t\t\t**Founder**: Ted A Fernandez\n\t\t\t\t\t\t\t**Headquarters**: Miami, Florida\n\t\t\t\t\t\t\t**Number of employees**: 501-1,000 employees\n\t\t\t\t\t\t\t**Website Url**: http://www.thehackettgroup.com/\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tArchitect / Senior Architect evaluates the issues related to the development of the life cycle of a product and provides an efficient solution.\n\t\t\t\t\t\t\tArchitect / Senior Architect is responsible for monitoring the validation of software analysis, programming, testing and debugging, identifying production and non-production application issues, transforming requirements into stipulations.\n\t\t\t\t\t\t\tHe / She also responsible for enhancement of all custom applications and solutions, built across custom and standard platforms.\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\t**Key Responsibilities**: Architect / Senior Architect evaluates the issues related to the development of the life cycle of a product and provides an efficient solution.\n\t\t\t\t\t\t\tExperience in product architecture and design, considering high-performance and security for web-based applications.\n\t\t\t\t\t\t\tFill the gaps in product by building/enabling various development processes and tools wherever applicable.\n\t\t\t\t\t\t\tLead and mentor a team of developers, fostering a collaborative and high-performance work environment.\n\t\t\t\t\t\t\tCollaborate with product managers, engineers, and other stakeholders to understand requirements and translate them into technical specifications.\n\t\t\t\t\t\t\tDesign, develop, and maintain scalable applications using Java and Spring Boot.\n\t\t\t\t\t\t\tArchitect and implement packaged components based solutions to enhance system modularity and performance.\n\t\t\t\t\t\t\tAutomate development processes and workflows to improve efficiency and reduce manual intervention.\n\t\t\t\t\t\t\tCollaborate with cross-functional teams, including product managers, designers, and QA, to deliver high-quality software solutions.\n\t\t\t\t\t\t\tEnsure code quality, security, and performance through code reviews, testing, and best practices.\n\t\t\t\t\t\t\tStay updated with the latest industry trends and technologies to drive continuous improvement. Requirements:\n\t\t\t\t\t\t\tStrong proficiency in Java and Spring Boot.\n\t\t\t\t\t\t\tExtensive experience with microservices architecture and implementation.\n\t\t\t\t\t\t\tHands-on experience with Kubernetes for container orchestration.\n\t\t\t\t\t\t\tFamiliarity with CI/CD pipelines and DevOps practices.\n\t\t\t\t\t\t\tExpertise in automation tools and practices.\n\t\t\t\t\t\t\tExcellent leadership and team management skills.\n\t\t\t\t\t\t\tStrong problem-solving abilities and attention to detail.\n\t\t\t\t\t\t\tExcellent communication and interpersonal skills.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\t15+ years of experience in Software Engineering with at least 8+ years as an engineering leader in a software product company.\n\t\t\t\t\t\t\tRequire deep technical knowledge in Software Product Engineering using Java/J2EE, multithreading, data structures, collections, OOPS, synchronization, Algorithm, Microservices, Spring boot, Angular.js, Node.js, React.js, Full stack.\n\t\t\t\t\t\t\tKey Programming Skills: Java, J2EE with cutting edge technologies.\n\t\t\t\t\t\t\tMust be proficient in Customer Relationship Management.\n\t\t\t\t\t\t\tHigh technical credibility - ability to audit technical decisions and push for the best solution to a problem.\n\t\t\t\t\t\t\tParticipate in requirement gatherings, design, implementation, testing and support of custom Java solutions, which include feature enhancements, new functionalities, and back-end systems integration etc.\n\t\t\t\t\t\t\tKnowledge of Object Oriented Programming concepts and Design Patterns.\n\t\t\t\t\t\t\tShould have detailed knowledge of SOAP and RESTful web services with various data formats like JSON, XML and XSD.\n\t\t\t\t\t\t\tStrong understanding of static code analysis, unit testing and Test-driven development, security testing and automated test frameworks.\n\t\t\t\t\t\t\tPerform code reviews for quality assurance and conformance to standards/guidelines.\n\t\t\t\t\t\t\tMust have experience with Eclipse or IntelliJ, Git, JUnit, Jenkins, JIRA etc.\n\t\t\t\t\t\t\tExpertise with Reporting Tools and Portals, Vignette Portal, Core Java, EJB, iBatis, Tomcat, Springs, Apache Axis and VB Script\n\t\t\t\t\t\t\tShould be able to understand the technical requirement with implicit non-functional requirement.\n\t\t\t\t\t\t\tShould have experience in architecture & design for Java projects, Able to drive the Architecture discussions with the customers.\n\t\t\t\t\t\t\tImplementation experience in leading open source frameworks/technologies like Spring boot, Spring Batch, Spring cloud etc.\n\t\t\t\t\t\t\tExperience in designing and implementing reusable components/accelerators\n\t\t\t\t\t\t\tExperience in Agile methodology\n\t\t\t\t\t\t\tGood Analytical and problem-solving skills\n\t\t\t\t\t\t\tMust possess excellent verbal & written communication skills\n\t\t\t\t\t\t\t**Personal**:\n\t\t\t\t\t\t\t\tShould have understanding of business objectives and organization structure\n\t\t\t\t\t\t\t\tThe candidate must have strong work ethics and trustworthiness\n\t\t\t\t\t\t\t\tThe candidate should possess attention to detail and also maintain confidentiality and integrity\n\t\t\t\t\t\t\t\tMust be highly collaborative and be a team player with commitment to excellence\n\t\t\t\t\t\t\t\tAbility to work under pressure to achieve the multiple daily deadlines for client deliverables with a mature approach\n\t\t\t\t\t\t\t**Preferred Skills**:\n\t\t\t\t\t\t\t\tExcellent communication skills\n\t\t\t\t\t\t\t\tShould be proficient in Microsoft Office\n\t\t\t\t\t\t\t\tSelf-motivated, fast learner with the ability to operate independently\n\t\t\t\t\t\t\t\tShould have proven track record of impacting results throughout career\n\t\t\t\t\t\t\t\tThe candidate should be a highly versatile thinker who can assimilate knowledge and has understanding across different industries, products, technologies, disciplines etc.\n\t\t\t\t\t~~Senior Staff Engineer (ReactJS)~~ [(`Just to understand ReactJS requirements`)]\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Senior Staff Engineer (ReactJS)\n\t\t\t\t\t\t\t**Locations**: Other Haryana\n\t\t\t\t\t\t\t**Required Experience Range**: 10+ Years\n\t\t\t\t\t\t\t**CTC**: Not disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: In office\n\t\t\t\t\t\t\t**Required Skills**: JavaScript, Mobile development, RESTful APIs, unit testing, integration testing, Agile methodologies, communication skills, team collaboration, transparency, trust, frontend developer, React. responsive design, ObjectOriented programming, enduser automation tests, problemsolving skills, technology enthusiast,\n\t\t\t\t\t\t\t**JD Posted by**: Nagarro\n\t\t\t\t\t\t\t**Job Posted in**: Shine.com\n\t\t\t\t\t\t\t**Company Name**: Nagarro\n\t\t\t\t\t\t\t**Designation**: Senior Staff Engineer (ReactJS)\n\t\t\t\t\t\t\t**Company Type**: IT Company\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[About Company]**:\n\t\t\t\t\t\t\t**Introduction**:\n\t\t\t\t\t\t\t\tWe're Nagarro. We are a Digital Product Engineering company that is scaling in a big way! We build products, services, and experiences that inspire, excite, and delight. We work at scale across all devices and digital mediums, and our people exist everywhere in the world (18000+ experts across 36 countries, to be exact). Our work culture is dynamic and non-hierarchical. We are looking for great new colleagues. That's where you come in!\n\t\t\t\t\t\t\t**Established In**: -\n\t\t\t\t\t\t\t**Formerly Known As**: -\n\t\t\t\t\t\t\t**Founder**: -\n\t\t\t\t\t\t\t**Headquarters**: -\n\t\t\t\t\t\t\t**Number of employees**: -\n\t\t\t\t\t\t\t**Website Url**: -\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tSenior Staff Engineer (ReactJS)\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\t**Key Responsibilities**: -\n\t\t\t\t\t\t\tUnderstanding the clients business use cases and technical requirements and be able to convert them into technical design which elegantly meets the requirements.\n\t\t\t\t\t\t\tMapping decisions with requirements and be able to translate the same to developers.\n\t\t\t\t\t\t\tIdentifying different solutions and being able to narrow down the best option that meets the clients requirements.\n\t\t\t\t\t\t\tDefining guidelines and benchmarks for NFR considerations during project implementation\n\t\t\t\t\t\t\tWriting and reviewing design document explaining overall architecture, framework, and high-level design of the application for the developers\n\t\t\t\t\t\t\tReviewing architecture and design on various aspects like extensibility, scalability, security, design patterns, user experience, NFRs, etc., and ensure that all relevant best practices are followed.\n\t\t\t\t\t\t\tDeveloping and designing the overall solution for defined functional and non-functional requirements; and defining technologies, patterns, and frameworks to materialize it\n\t\t\t\t\t\t\tUnderstanding and relating technology integration scenarios and applying these learnings in projects\n\t\t\t\t\t\t\tResolving issues that are raised during code/review, through exhaustive systematic analysis of the root cause, and being able to justify the decision taken.\n\t\t\t\t\t\t\tCarrying out POCs to make sure that suggested design/technologies meet the requirements.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tExperience: 10+ Years\n\t\t\t\t\t\t\tExperience as a frontend developer building modern JavaScript-based web applications\n\t\t\t\t\t\t\tExpert experience with React and responsive design\n\t\t\t\t\t\t\tMobile development experience with either native or web-to-native tooling and frameworks\n\t\t\t\t\t\t\tExperience using JavaScript frameworks and libraries specifically React\n\t\t\t\t\t\t\tUnderstanding of RESTful APIs and how use them in practice\n\t\t\t\t\t\t\tKnowledge of Object-Oriented programming\n\t\t\t\t\t\t\tAbility to write effective unit, integration, and end-user automation tests\n\t\t\t\t\t\t\tStrong understanding of Agile methodologies\n\t\t\t\t\t\t\tExperience as a Developer on a cross-functional agile team preferred\n\t\t\t\t\t\t\tStrong communication skills with ability to communicate complex technical concepts and align organization on decisions\n\t\t\t\t\t\t\tSound problem-solving skills with the ability to quickly process complex information and present it clearly and simply\n\t\t\t\t\t\t\tUtilizes team collaboration to create innovative solutions efficiently\n\t\t\t\t\t\t\tPassionate about technology and excited about the impact of emerging / disruptive technologies\n\t\t\t\t\t\t\tWants to unleash inner self-starter and work in an environment that fosters entrepreneurial minds\n\t\t\t\t\t\t\tBelieves in culture of transparency and trust\n\t\t\t\t\t\t\tOpen to learning new ideas outside scope or knowledge skillset\n\t\t\t\t\tJava Full Stack Developer\n\t\t\t\t\t\t**[Metadata]**\n\t\t\t\t\t\t\t**Role**: Java Full Stack Developer\n\t\t\t\t\t\t\t**Locations**: -\n\t\t\t\t\t\t\t**Required Experience Range**: -\n\t\t\t\t\t\t\t**CTC**: Not disclosed\n\t\t\t\t\t\t\t**Workplace Flexibility Models**: -\n\t\t\t\t\t\t\t**Required Skills**: Java, Spring Boot, Spring MVC, JavaScript, PostgreSQL, JSP Spring, Microservices RESTful APIs, ReactJs, Nodejs, TypeScript, GraphQL,\n\t\t\t\t\t\t\t**JD Posted by**: TekIT Software Solutions Pvt. Ltd. (India & USA)\n\t\t\t\t\t\t\t**Job Posted in**: Shine.com\n\t\t\t\t\t\t\t**Company Name**: TekIT Software Solutions Pvt. Ltd. (India & USA)\n\t\t\t\t\t\t\t**Designation**: Java Full Stack Developer\n\t\t\t\t\t\t\t**Company Type**: IT Company\n\t\t\t\t\t\t\t**Industry**: -\n\t\t\t\t\t\t**[About Company]**:\n\t\t\t\t\t\t\t**Introduction**: -\n\t\t\t\t\t\t\t**Established In**: -\n\t\t\t\t\t\t\t**Formerly Known As**: -\n\t\t\t\t\t\t\t**Founder**: -\n\t\t\t\t\t\t\t**Headquarters**: -\n\t\t\t\t\t\t\t**Number of employees**: -\n\t\t\t\t\t\t\t**Website Url**: -\n\t\t\t\t\t\t**[Job description]**:\n\t\t\t\t\t\t\tJava , JSP & Spring , Spring Boot , Spring MVC , Micro-services & RESTful APIs\n\t\t\t\t\t\t\tReact.Js\n\t\t\t\t\t\t\tNode.js\n\t\t\t\t\t\t\tTypeScript, JavaScript,\n\t\t\t\t\t\t\tGraphQL\n\t\t\t\t\t\t\tDatabase: PostgreSQL\n\t\t\t\t\t\t\tArchitecture\n\t\t\t\t\t\t**[Roles and Responsibilities]**:\n\t\t\t\t\t\t\tCloud Platforms (AWS, EC2, S3, RDS, Lambda)\n\t\t\t\t\t\t\tElastic Search\n\t\t\t\t\t\t\tAsynchronous Messaging (Kafka or similar systems)\n\t\t\t\t\t\t\tBasic understanding of GO language\n\t\t\t\t\t\t\tDesign and develop scalable , high-performance web applications using Java, JSP, and Spring framework.\n\t\t\t\t\t\t\tLead the development and implementation of micro services architectures and Restful APIs.\n\t\t\t\t\t\t\tCreate and maintain responsive front end solutions using Typescript, JavaScript, and React.\n\t\t\t\t\t\t\tUtilize GraphQL for efficient data querying and integration between frontend and backend services.\n\t\t\t\t\t\t\tDevelop and integrate back-end services using Node.js where applicable.\n\t\t\t\t\t\t\tWork with cloud platforms, especially AWS, to deploy and manage scalable applications.\n\t\t\t\t\t\t\tLeverage asynchronous messaging systems such as Kafka for real-time data processing and pub/sub scenarios.\n\t\t\t\t\t\t\tOptimize application performance and ensure high availability and reliability.\n\t\t\t\t\t\t\tCollaborate closely with cross-functional teams to gather requirements, design solutions, and deliver features.\n\t\t\t\t\t\t\tMentor and guide junior developers, conducting code reviews and enforcing best practices.\n\t\t\t\t\t\t**[Requirements]**:\n\t\t\t\t\t\t\tQualifications- Bachelors or Masters degree in Computer Science, Engineering, or a related field.\n\t\t\t\t\t\t\tOver 10 years of professional experience in full-stack Java development with a proven track record of successful projects.\n\t\t\t\t\t\t\tStrong leadership skills and experience in mentoring and guiding development teams.\n\t\t\t\t\t\t\tExcellent problem-solving skills, with the ability to design and implement complex systems.\n\t\t\t\t\t\t\tExceptional communication and teamwork abilities, with a focus on delivering high-quality results.,\n\t\t\t\t**[`Identified Common Demands`]**:\n\t\t\t\t\tOffered Roles:\n\t\t\t\t\t\tJava Full Stack Developer\n\t\t\t\t\t\tJava Tech Lead\n\t\t\t\t\t\tJava Developer\n\t\t\t\t\t\tSenior Java Developer/Technical Lead (Java)\n\t\t\t\t\t\tJava Technical Architect\n\t\t\t\t\tRequired skills:\n\t\t\t\t\t\tJava,\n\t\t\t\t\t\tSpring Boot,\n\t\t\t\t\t\tMicroservices ,\n\t\t\t\t\t\tAWS,\n\t\t\t\t\t\tReactJS,\n\t\t\t\t\t\tRestful APIs,\n\t\t\t\t\t\tDependency Injection\n\t\t\t\t\t\tJava 8+ ,\n\t\t\t\t\t\tMaven\n\t\t\t\t\t\tGitHub\n\t\t\t\t\t\t~~Experience with messaging products like RabbitMQ, Kafka or ActiveMQ.~~\n\t\t\t\t\t\t~~Experience in AWS Lambda, Serverless, DynamoDB, SQS, Kinesis~~\n\t\t\t\t\t\t~~Experience working with GitHub, Jira DevOps and CI/CD pipeline Tools and Procedures Docker Containers Basic knowledge of cloud services (PaaS | SaaS | IaaS) AWS Services (ECS, EKS, API Gateway, AWS lambda, IAM etc.).~~\n\t\t\t\t\t\t~~Knowledge of Wealth Planning and Proposal is BIG PLUS.~~\n\t\t\t\t\t\t~~Angular~~\n\t\t\t\t\tAdditional Requirements:\n\t\t\t\t\t\tExcellent English speaking\n\t\t\t**[Task]**: [`Planned`] Identify `steps` and `road-blocks` in Interview Preparation\n\t\t\t\t**[Task: `Identify and execute steps`]**: [`Planned`]:\n\t\t\t\t\t[`Planned`]: [`Step`]:  Recall and consolidate role and responsibilities, in different companies\n\t\t\t\t\t[`Planned`]: [`Step`]:  Recall and Prepare Key Concepts, along with further plan\n\t\t\t\t\t\tJava, Spring Boot, Spring MVC, JavaScript, PostgreSQL, JSP Spring, Microservices RESTful APIs, GraphQL\n\t\t\t\t\t\tReactJs, Nodejs, TypeScript,\n\t\t\t\t\t\tKubernetes, Docker\n\t\t\t\t\t\tGit, Maven\n\t\t\t\t\t\tAgile\n\t\t\t\t\t\tTeam Lead, Team Collaboration\n\t\t\t\t**[Task: `Identify and remove road-blocks`]**: [`Planned`]\n\t\t\t**[`Planned`]**: Received a new Job offer letter, matching as per Acceptance Criteria\n\t\t\t[**`Planned`**]: Accepted offer letter\n\t\t\t**[`Planned`]**: Congratulations!! नौकरी मिल गई!!  `What are next steps??`\n\t**[Why this decision]**\n\t\t**[`To Focus`]**: on Getting a Job ASAP\n\t\tTo `Retrospect`\n\t\t\tWhat we have developed/achieved from September 2009 till today? Especially, February 2024 till today?\n\t\t\tWhat went wrong?\n\t\t\tWhat to do next?\n\t**[Clarification]**: Which activities are `currently halted`, and which are `continuing as planned`?\n\t\t**Bug-Fixes are halted**: However, bug identification and logging can still be done.\n\t\t\tPlease prefer creating a single memory Item (or a single task, having multiple comments), for consolidated and compact Bug-Report\n\t\t**Feature Enhancements are halted**: Ongoing discussion or research on new features can continue.\n\t\t**New Development is halted**: Planning and requirement gathering for future projects can proceed.\n\t\t**Code Reviews are halted**: Feedback on previous reviews can still be addressed.\n\t\t**Testing is halted**: Test case creation and documentation can continue.\n\t\t**Internal Training is ongoing**: Skill development sessions and knowledge sharing are not affected.\n\t\t**Client Meetings are ongoing**: Any discussions or meetings with clients remain active as planned.\n\t\t**Maintenance tasks are partially active**: Only critical maintenance is allowed; minor updates are paused.\n\t\t**UI/UX Improvements are halted**: Design brainstorming or prototyping can still proceed without implementation.\n\t\t**Documentation is ongoing**: Writing and updating technical or user documentation continues as planned.\n\t\t**Budget Reviews are ongoing**: Financial evaluations and reviews of ongoing project budgets can still happen.\n\t\t**Compliance and Audits are ongoing**: Any legal or compliance-related tasks will continue as required.\n\t\t**Security Monitoring is active**: System security measures and monitoring will continue without disruption.\n\t\t**Recruitment is halted**: Except for ongoing interviews, new hiring activities are paused.\n\t\t**Vendor Communication is ongoing**: All third-party communications, including partnerships and negotiations, are still active.\n","details":[],"references":[],"createdDate":{"$date":"2024-10-20T14:27:56.806Z"},"updatedDate":{"$date":"2024-10-21T18:48:13.2Z"},"softDelete":false,"__v":0}
{"_id":{"$oid":"6715f2dc85f03da65581a1fd"},"uniqueId":"01bbe473-67fe-497d-aaf8-7a634e733c48","parentId":"","name":"[`Online Courses`]: AWS Builders Online Series","skeleton":"[`Online Courses`]: AWS Builders Online Series\n\tTrack 1: Cloud fundamentals with AWSome Day\n\t\t**[About]**: [`Cloud made simple`]: Tailored for beginners with no prior cloud knowledge, this program helps you grasp cloud concepts, core services, and solutions across industries, gaining practical skills to start building on AWS.\n\t\t**[Lecture 1]**: Introduction to AWS\n\t\t\t**About**: This module covers introductory topics such as what is the cloud, the advantages of cloud computing, cloud deployment models, and AWS global infrastructure.\n\t\t\t**About**: **Speaker**: Peter Vandaele, Technical Trainer, AWS\n\t\t\t**Slides for this lecture**: [Please find here](https://drive.google.com/file/d/1xz4Q-napBdRbpv6uEdPGcsPyi0lbOLps/view?usp=drive_link)\n\t\t\t**Lecture Notes**:\n\t\t\t\t**Agenda**\n\t\t\t\t**Introduction to the cloud**\n**[Course Link]**: https://resources.awscloud.com/aws-builders-online-series\n**What I learned so far**: In other words, `Summary so far`\n\tTBD\n","details":[],"references":[],"createdDate":{"$date":"2024-10-21T06:21:16.229Z"},"updatedDate":{"$date":"2024-10-21T06:51:22.633Z"},"softDelete":false,"__v":0}
