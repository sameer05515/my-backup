{"_id":{"$oid":"668ef19159d6bcc528b1a0fa"},"name":"Python and Java are two very different programming languages, but both can be useful tools","heading":"Python and Java are two very different programming languages, but","smartContent":{"content":"### Key Differences Between Python and Java\n\n**Python** and **Java** are two prominent programming languages with distinct characteristics. Below are the key differences between them:\n\n---\n\n**Syntax:**\n- **Python**: Designed to be intuitive and easy to learn, Python’s syntax is minimalistic, making it accessible for beginners.\n- **Java**: Has a more complex syntax with a steeper learning curve, but it's highly effective for cross-platform application development.\n\n---\n\n**Dynamic vs. Static Typing:**\n- **Python**: Uses dynamic typing, allowing variable types to change during execution. This can simplify code but may lead to runtime errors if not managed carefully.\n- **Java**: Uses static typing, requiring explicit type declarations. This can catch type-related errors at compile time, providing a more robust error-checking mechanism.\n\n---\n\n**Braces vs. Indentation:**\n- **Python**: Utilizes indentation to define code blocks, which enforces readable and clean code structure.\n- **Java**: Employs curly braces `{}` to delineate code blocks, which can lead to errors if braces are omitted or misplaced.\n\n---\n\n**Speed vs. Portability:**\n- **Java**: Runs on the Java Virtual Machine (JVM), which allows for platform-independent applications. However, this layer can introduce some performance overhead.\n- **Python**: Typically runs directly on the operating system and may be faster for some tasks, but lacks the cross-platform portability of Java.\n\n---\n\n**Variable Declaration:**\n- **Java**: Requires explicit declaration of variable types, e.g., `int x = 10;`.\n- **Python**: Does not require variable type declarations, e.g., `x = 10`.\n\n---\n\n**Interpreter:**\n- **Java**: Requires compilation to bytecode, which is then interpreted or compiled to native code by the JVM.\n- **Python**: Runs directly from source code via an interpreter, which can make development and debugging faster but may impact runtime performance.\n\n---\n\n**Conversion of Data:**\n- **Java**: To convert an integer to a string, use `String str = Integer.toString(i);`.\n- **Python**: To convert an integer to a string, use `str(x)`.\n\n---\n\n**Runtime Environment:**\n- **Java**: Development typically requires an integrated development environment (IDE) like NetBeans or Eclipse.\n- **Python**: Code can be written and executed in simple text editors or command-line interfaces, making it more flexible and lightweight.\n\n---\n\n**Syntax Example:**\n\n- **Java**: To print \"Hello World\":\n  ```java\n  public class HelloWorld {\n      public static void main(String[] args) {\n          System.out.println(\"Hello World\");\n      }\n  }\n  ```\n\n- **Python**: To print \"Hello World\":\n  ```python\n  print(\"Hello World\")\n  ```\n\n---\n\nEach language has its strengths and is suitable for different types of projects. Java is often preferred for large-scale applications and systems requiring robust performance and portability. Python is favored for rapid development, scripting, and data science due to its simplicity and flexibility.","textOutputType":"markdown","textInputType":"TextArea"},"rating":5,"linkedQuestionsId":"ebd5ba5a-f40c-499f-a057-75736cf34d47","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.7Z"},"updatedDate":{"$date":"2024-08-27T12:07:53.959Z"},"uniqueId":"2a37edef-0de3-432b-8f6d-4112f2b4735a","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a112"},"name":"The Spring Framework was first released in 2004; since then there have been significant major","heading":"The Spring Framework was first released in 2004; since then","smartContent":{"content":"<div><!--block-->The Spring Framework was first released in 2004; since then there have been significant major revisions: Spring 2.0 provided XML namespaces and AspectJ support; Spring 2.5 embraced annotation-driven configuration; Spring 3.0 introduced a strong Java 5+ foundation across the framework codebase, and features such as the Java-based @Configuration model.<br><br></div><div><!--block--><br>Version 4.0 is the latest major release of the Spring Framework and the first to fully support Java 8 features. You can still use Spring with older versions of Java, however, the minimum requirement has now been raised to Java SE 6. We have also taken the opportunity of a major release to remove many deprecated classes and methods.<br><br></div><div><!--block--><br>A&nbsp;<a href=\"https://github.com/spring-projects/spring-framework/wiki/Migrating-from-earlier-versions-of-the-spring-framework\">migration guide for upgrading to Spring 4.0</a>&nbsp;is available on the&nbsp;<a href=\"https://github.com/spring-projects/spring-framework/wiki\">Spring Framework GitHub Wiki</a>.<br><br></div><div><!--block--><strong><br>3.1 Improved Getting Started Experience</strong></div><div><!--block-->The new&nbsp;<a href=\"https://spring.io/\">spring.io</a>&nbsp;website provides a whole series of&nbsp;<a href=\"https://spring.io/guides\">\"Getting Started\"</a>&nbsp;guides to help you learn Spring. You can read more about the guides in the&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview-getting-started-with-spring.html\">Chapter 1,&nbsp;<em>Getting Started with Spring</em></a>&nbsp;section in this document. The new website also provides a comprehensive overview of the many additional projects that are released under the Spring umbrella.<br><br></div><div><!--block--><br>If you are a Maven user you may also be interested in the helpful&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview.html#overview-maven-bom\">bill of materials</a>&nbsp;POM file that is now published with each Spring Framework release.<br><br></div><div><!--block--><strong><br>3.2 Removed Deprecated Packages and Methods</strong></div><div><!--block-->All deprecated packages, and many deprecated classes and methods have been removed with version 4.0. If you are upgrading from a previous release of Spring, you should ensure that you have fixed any deprecated calls that you were making to outdated APIs.<br><br></div><div><!--block--><br>For a complete set of changes, check out the&nbsp;<a href=\"http://docs.spring.io/spring-framework/docs/3.2.4.RELEASE_to_4.0.0.RELEASE/\">API Differences Report</a>.<br><br></div><div><!--block--><br>Note that optional third-party dependencies have been raised to a 2010/2011 minimum (i.e. Spring 4 generally only supports versions released in late 2010 or later now): notably, Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-Time 2.0+. As an exception to the rule, Spring 4 requires the recent Hibernate Validator 4.3+, and support for Jackson has been focused on 2.0+ now (with Jackson 1.8/1.9 support retained for the time being where Spring 3.2 had it; now just in deprecated form).<br><br></div><div><!--block--><strong><br>3.3 Java 8 (as well as 6 and 7)</strong></div><div><!--block-->Spring Framework 4.0 provides support for several Java 8 features. You can make use of&nbsp;<em>lambda expressions</em>&nbsp;and&nbsp;<em>method references</em>&nbsp;with Spring’s callback interfaces. There is first-class support for java.time (<a href=\"https://jcp.org/en/jsr/detail?id=310\">JSR-310</a>), and several existing annotations have been retrofitted as @Repeatable. You can also use Java 8’s parameter name discovery (based on the -parameters compiler flag) as an alternative to compiling your code with debug information enabled.<br><br></div><div><!--block--><br>Spring remains compatible with older versions of Java and the JDK: concretely, Java SE 6 (specifically, a minimum level equivalent to JDK 6 update 18, as released in January 2010) and above are still fully supported. However, for newly started development projects based on Spring 4, we recommend the use of Java 7 or 8.<br><br></div><div><!--block--><strong><br>3.4 Java EE 6 and 7</strong></div><div><!--block-->Java EE version 6 or above is now considered the baseline for Spring Framework 4, with the JPA 2.0 and Servlet 3.0 specifications being of particular relevance. In order to remain compatible with Google App Engine and older application servers, it is possible to deploy a Spring 4 application into a Servlet 2.5 environment. However, Servlet 3.0+ is strongly recommended and a prerequisite in Spring’s test and mock packages for test setups in development environments.<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/images/note.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"18499\" contenteditable=\"false\"><img src=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/images/note.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/18499/18500/https://docs.spring.io/spring/docs/current/spring-framework-reference/html/images/note.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br>If you are a WebSphere 7 user, be sure to install the JPA 2.0 feature pack. On WebLogic 10.3.4 or higher, install the JPA 2.0 patch that comes with it. This turns both of those server generations into Spring 4 compatible deployment environments.</div><div><!--block--><br>On a more forward-looking note, Spring Framework 4.0 supports the Java EE 7 level of applicable specifications now: in particular, JMS 2.0, JTA 1.2, JPA 2.1, Bean Validation 1.1, and JSR-236 Concurrency Utilities. As usual, this support focuses on individual use of those specifications, e.g. on Tomcat or in standalone environments. However, it works equally well when a Spring application is deployed to a Java EE 7 server.<br><br></div><div><!--block--><br>Note that Hibernate 4.3 is a JPA 2.1 provider and therefore only supported as of Spring Framework 4.0. The same applies to Hibernate Validator 5.0 as a Bean Validation 1.1 provider. Neither of the two are officially supported with Spring Framework 3.2.<br><br></div><div><!--block--><strong><br>3.5 Groovy Bean Definition DSL</strong></div><div><!--block-->Beginning with Spring Framework 4.0, it is possible to define external bean configuration using a Groovy DSL. This is similar in concept to using XML bean definitions but allows for a more concise syntax. Using Groovy also allows you to easily embed bean definitions directly in your bootstrap code. For example:<br><br></div><pre><!--block-->def reader = <strong>new</strong> GroovyBeanDefinitionReader(myApplicationContext)\nreader.beans {\n    dataSource(BasicDataSource) {\n        driverClassName = \"org.hsqldb.jdbcDriver\"\n        url = \"jdbc:hsqldb:mem:grailsDB\"\n        username = \"sa\"\n        password = \"\"\n        settings = [mynew:\"setting\"]\n    }\n    sessionFactory(SessionFactory) {\n        dataSource = dataSource\n    }\n    myService(MyService) {\n        nestedBean = { AnotherBean bean -&gt;\n            dataSource = dataSource\n        }\n    }\n}</pre><div><!--block--><br>For more information consult the GroovyBeanDefinitionReader&nbsp;<a href=\"http://docs.spring.io/spring-framework/docs/4.3.11.RELEASE/javadoc-api/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.html\">javadocs</a>.<br><br></div><div><!--block--><strong><br>3.6 Core Container Improvements</strong></div><div><!--block-->There have been several general improvements to the core container:<br><br></div><ul><li><!--block-->Spring now treats&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-generics-as-qualifiers\"><em>generic types</em>&nbsp;as a form of&nbsp;<em>qualifier</em></a>&nbsp;when injecting Beans. For example, if you are using a Spring Data Repository you can now easily inject a specific implementation: @Autowired Repository&lt;Customer&gt; customerRepository.</li><li><!--block-->If you use Spring’s meta-annotation support, you can now develop custom annotations that&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-meta-annotations\">expose specific attributes from the source annotation</a>.</li><li><!--block-->Beans can now be&nbsp;<em>ordered</em>&nbsp;when they are&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-autowired-annotation\">autowired into lists and arrays</a>. Both the @Order annotation and Ordered interface are supported.</li><li><!--block-->The @Lazy annotation can now be used on injection points, as well as on @Bean definitions.</li><li><!--block-->The&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java-bean-description\">@Description annotation has been introduced</a>&nbsp;for developers using Java-based configuration.</li><li><!--block-->A generalized model for&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java-conditional\">conditionally filtering beans</a>&nbsp;has been added via the @Conditional annotation. This is similar to @Profile support but allows for user-defined strategies to be developed programmatically.</li><li><!--block--><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/aop-api.html#aop-pfb-proxy-types\">CGLIB-based proxy classes</a>&nbsp;no longer require a default constructor. Support is provided via the&nbsp;<a href=\"https://code.google.com/p/objenesis/\">objenesis</a>&nbsp;library which is repackaged&nbsp;<em>inline</em>&nbsp;and distributed as part of the Spring Framework. With this strategy, no constructor at all is being invoked for proxy instances anymore.</li><li><!--block-->There is managed time zone support across the framework now, e.g. on LocaleContext.</li></ul><div><!--block--><strong><br>3.7 General Web Improvements</strong></div><div><!--block-->Deployment to Servlet 2.5 servers remains an option, but Spring Framework 4.0 is now focused primarily on Servlet 3.0+ environments. If you are using the&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#spring-mvc-test-framework\">Spring MVC Test Framework</a>&nbsp;you will need to ensure that a Servlet 3.0 compatible JAR is in your&nbsp;<em>test classpath</em>.<br><br></div><div><!--block--><br>In addition to the WebSocket support mentioned later, the following general improvements have been made to Spring’s Web modules:<br><br></div><ul><li><!--block-->You can use the&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-restcontroller\">new @RestController annotation</a>&nbsp;with Spring MVC applications, removing the need to add @ResponseBody to each of your @RequestMappingmethods.</li><li><!--block-->The AsyncRestTemplate class has been added,&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/remoting.html#rest-async-resttemplate\">allowing non-blocking asynchronous support</a>&nbsp;when developing REST clients.</li><li><!--block-->Spring now offers&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-timezone\">comprehensive timezone support</a>&nbsp;when developing Spring MVC applications.</li></ul><div><!--block--><strong><br>3.8 WebSocket, SockJS, and STOMP Messaging</strong></div><div><!--block-->A new spring-websocket module provides comprehensive support for WebSocket-based, two-way communication between client and server in web applications. It is compatible with&nbsp;<a href=\"https://jcp.org/en/jsr/detail?id=356\">JSR-356</a>, the Java WebSocket API, and in addition provides SockJS-based fallback options (i.e. WebSocket emulation) for use in browsers that don’t yet support the WebSocket protocol (e.g. Internet Explorer &lt; 10).<br><br></div><div><!--block--><br>A new spring-messaging module adds support for STOMP as the WebSocket sub-protocol to use in applications along with an annotation programming model for routing and processing STOMP messages from WebSocket clients. As a result an @Controller can now contain both @RequestMapping and @MessageMappingmethods for handling HTTP requests and messages from WebSocket-connected clients. The new spring-messaging module also contains key abstractions formerly from the&nbsp;<a href=\"http://projects.spring.io/spring-integration/\">Spring Integration</a>&nbsp;project such as Message, MessageChannel, MessageHandler, and others to serve as a foundation for messaging-based applications.<br><br></div><div><!--block--><br>For further details, including a more thorough introduction, see the&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html\">Chapter 26,&nbsp;<em>WebSocket Support</em></a>&nbsp;section.<br><br></div><div><!--block--><strong><br>3.9 Testing Improvements</strong></div><div><!--block-->In addition to pruning of deprecated code within the spring-test module, Spring Framework 4.0 introduces several new features for use in unit and integration testing.<br><br></div><ul><li><!--block-->Almost all annotations in the spring-test module (e.g., @ContextConfiguration, @WebAppConfiguration, @ContextHierarchy, @ActiveProfiles, etc.) can now be used as&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#integration-testing-annotations-meta\">meta-annotations</a>&nbsp;to create custom&nbsp;<em>composed annotations</em>&nbsp;and reduce configuration duplication across a test suite.</li><li><!--block-->Active bean definition profiles can now be resolved programmatically, simply by implementing a custom&nbsp;<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#testcontext-ctx-management-env-profiles-ActiveProfilesResolver\">ActiveProfilesResolver</a>&nbsp;and registering it via the resolver attribute of @ActiveProfiles.</li><li><!--block-->A new SocketUtils class has been introduced in the spring-core module which enables you to scan for free TCP and UDP server ports on localhost. This functionality is not specific to testing but can prove very useful when writing integration tests that require the use of sockets, for example tests that start an in-memory SMTP server, FTP server, Servlet container, etc.</li><li><!--block-->As of Spring 4.0, the set of mocks in the org.springframework.mock.web package is now based on the Servlet 3.0 API. Furthermore, several of the Servlet API mocks (e.g., MockHttpServletRequest, MockServletContext, etc.) have been updated with minor enhancements and improved configurability.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"daff58fd-3993-4753-b080-54aa860471e1","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.725Z"},"updatedDate":{"$date":"2024-08-25T14:50:00.661Z"},"uniqueId":"0bc5e64b-d315-4378-832e-111b05869a7d","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a12a"},"name":"Java is a computer programming language that is concurrent, class-based and object-oriented. The advantages of","heading":"Java is a computer programming language that is concurrent, class-based","smartContent":{"content":"<div><!--block-->Java is a computer programming language that is concurrent, class-based and object-oriented. The advantages of object-oriented software development are shown below:</div><ul><li><!--block-->Modular development of code, which leads to easy maintenance and modification.</li><li><!--block-->Reusability of code.</li><li><!--block-->Improved reliability and flexibility of code.</li><li><!--block-->Increased understanding of code.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"840ca679-5fd7-4dac-a2ae-4c5b8bda7d4d","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.74Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.74Z"},"uniqueId":"3a855d07-9bfb-4815-b2ab-42d58aa732a9","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a142"},"name":"Object Oriented Programming (OOP) includes: Abstraction Encapsulation Polymorphism Inheritance Predefined types must be objects User","heading":"Object Oriented Programming (OOP) includes: Abstraction Encapsulation Polymorphism Inheritance Predefined","smartContent":{"content":"<div><!--block-->Object Oriented Programming (OOP) includes:</div><ul><li><!--block-->Abstraction</li><li><!--block-->Encapsulation</li><li><!--block-->Polymorphism</li><li><!--block-->Inheritance</li><li><!--block-->Predefined types must be objects</li><li><!--block-->User defined types must be objects</li><li><!--block-->Operations must be performed by sending messages to objects</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5776b894-189f-4087-9ed8-7fd36211e0d0","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.758Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.758Z"},"uniqueId":"05e9de65-7aee-4d66-afc0-46b229d59dfb","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a15a"},"name":"Some of the features which play important role in the popularity of java are as","heading":"Some of the features which play important role in the","smartContent":{"content":"<div><!--block-->Some of the features which play important role in the popularity of java are as follows:</div><ul><li><!--block-->Object-Oriented</li><li><!--block-->Platform independent</li><li><!--block-->High Performance</li><li><!--block-->Multithreaded</li><li><!--block-->Portable</li><li><!--block-->Secure</li></ul><div><!--block-->Sample code for Helloworld in java is shown below:</div><div><!--block--><em>Hello World<br></em><br></div><pre><!--block--><strong>public</strong> <strong>class</strong> Helloworld{\n     \n<strong>public</strong> <strong>static</strong> <strong>void</strong> main(String args[])\n{  \n    System.out.println(\"Hello World\");  \n}  \n     \n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"db4d9c0e-f985-43aa-b83d-b417a99eb787","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.774Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.774Z"},"uniqueId":"fd6f9ebf-0ca8-4642-857c-5a2e2db4395f","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a172"},"name":"Not 100%. Java does not satisfy all the OOP conditions (predefined types must be objects)","heading":"Not 100%. Java does not satisfy all the OOP conditions","smartContent":{"content":"<div><!--block-->Not 100%. Java does not satisfy all the OOP conditions (predefined types must be objects) because it uses eight primitive data types(Boolean, byte, char, int, float, double, long, short) which are not objects.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"54d3301a-e370-4f00-a61d-8f34870bf438","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.79Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.79Z"},"uniqueId":"0d72ee49-3b72-4846-a89e-d466d5488190","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a18a"},"name":"Abstraction is the process of separating ideas from specific instances and thus, develop classes in","heading":"Abstraction is the process of separating ideas from specific instances","smartContent":{"content":"<div><!--block-->Abstraction is the process of separating ideas from specific instances and thus, develop classes in terms of their own functionality, instead of their implementation details. Java supports the creation and existence of abstract classes that expose interfaces, without including the actual implementation of all methods.&nbsp;<strong><em>The abstraction technique aims to separate the implementation details of a class from its behavior.</em></strong><br><br></div><div><!--block-->Abstract class Person is presented below. It has an abstract method getName.<br><br><em>Abstract Class Person</em></div><pre><!--block--><strong>public</strong> <strong>abstract</strong> <strong>class</strong> Person  \n{  \n    <strong>public</strong> <strong>abstract</strong> String getName(); \n}</pre><div><!--block--><br>Employee class extends the Abstract class Person. The method getName returns the name attribute of the employee.<br><br><em>Employee Class</em></div><pre><!--block--><strong>public</strong> <strong>class</strong> Employee <strong>extends</strong> Person   \n{  \n    <strong>private</strong> String name;\n     \n    <strong>public</strong> Employee(String name)\n    {\n      <strong>this</strong>.name = name;\n    }\n    <strong>public</strong> String getName()\n    {\n       <strong>return</strong> <strong>this</strong>.name;\n    }\n    <strong>public</strong> <strong>static</strong> <strong>void</strong> main (String args[])  \n    {  \n        Employee employee = <strong>new</strong> Employee(\"John Wilson\");\n         \n        System.out.println(\"Employee's Name \"+ employee.getName()); \n         \n        Person person = <strong>new</strong> Employee(\"Thomas Smith\");\n         \n        System.out.println(\"Employee-Person's Name \"+ person.getName());\n         \n         \n    }  \n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"aa12db5a-7f2b-4d1c-8b1a-fb1faeb80a79","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.806Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.806Z"},"uniqueId":"52f5c8c6-20fe-4a54-a622-6c4b0f4f613c","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1a2"},"name":"Encapsulation provides objects with the ability to hide their internal characteristics and behavior. Each object","heading":"Encapsulation provides objects with the ability to hide their internal","smartContent":{"content":"<div><!--block--><a href=\"https://www.javacodegeeks.com/2013/04/the-three-greatest-paragraphs-ever-written-on-encapsulation.html\">Encapsulation</a>&nbsp;provides objects with the ability to hide their internal characteristics and behavior. Each object provides a number of methods, which can be accessed by other objects and change its internal data. In Java, there are three access modifiers: public, private and protected. Each modifier imposes different access rights to other classes, either in the same or in external packages. Some of the advantages of using encapsulation are listed below:</div><ul><li><!--block-->The internal state of every object is protected by hiding its attributes.</li><li><!--block-->It increases usability and maintenance of code, because the behavior of an object can be independently changed or extended.</li><li><!--block-->It improves modularity by preventing objects to interact with each other, in an undesired way.</li></ul><div><!--block-->You can refer to our tutorial<a href=\"http://examples.javacodegeeks.com/java-basics/encapsulation-in-java/\">&nbsp;here</a>&nbsp;for more details and examples on encapsulation.</div><div><!--block-->A sample class Student which has attributes Id and Name is shown as an example for encapsulation.<br><br><em>Student Class<br></em><br></div><pre><!--block--><strong>public</strong> <strong>class</strong> Student{  \n <strong>private</strong> <strong>int</strong> id;  \n <strong>private</strong> String name;  \n   \n <strong>public</strong> <strong>void</strong> setId(<strong>int</strong> id)\n {\n   <strong>this</strong>.id = id;\n }\n  \n <strong>public</strong> <strong>void</strong> setName(String name)\n {\n   <strong>this</strong>.name = name;\n }\n  \n <strong>public</strong> <strong>int</strong> getId()\n {\n   <strong>return</strong> <strong>this</strong>.id;\n }\n  \n <strong>public</strong> String getName()\n {\n   <strong>return</strong> <strong>this</strong>.name;\n }\n   \n<strong>public</strong> <strong>static</strong> <strong>void</strong> main(String args[])\n{  \n  Student student=<strong>new</strong> Student();  \n  student.setId(1034);\n  student.setName(\"David Smith\");\n \n  System.out.println(\"Student id \"+ student.getId());\n  System.out.println(\"Student name \"+ student.getName());\n     \n}  \n \n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"27ce1277-d0b7-408a-94e5-b82bbf88a9ee","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.823Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.823Z"},"uniqueId":"eb6c5299-a72f-4e35-9be0-378d8f431f96","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1ba"},"name":"Abstraction and encapsulation are complementary concepts. On the one hand, abstraction focuses on the behavior","heading":"Abstraction and encapsulation are complementary concepts. On the one hand,","smartContent":{"content":"<div><!--block-->Abstraction and encapsulation are complementary concepts. On the one hand, abstraction focuses on the behavior of an object. On the other hand, encapsulation focuses on the implementation of an object’s behavior. Encapsulation is usually achieved by hiding information about the internal state of an object and thus, can be seen as a strategy used in order to provide abstraction.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"625ae548-3567-4a58-a55d-d85594f146f0","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.84Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.84Z"},"uniqueId":"34da8949-8fef-46e7-a1d8-f813ee576f98","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1bc"},"name":"Abstraction:- Abstraction is the process or method of gaining the information. In abstraction, problems are","heading":"Abstraction:- Abstraction is the process or method of gaining the","smartContent":{"content":"<div><!--block--><strong>Abstraction:-</strong></div><ol><li><!--block-->Abstraction is the process or method of gaining the information.</li><li><!--block-->In abstraction, problems are solved at the design or interface level.</li><li><!--block-->Abstraction is the method of hiding the unwanted information.</li><li><!--block-->We can implement abstraction using abstract class and interfaces.</li><li><!--block-->In abstraction, implementation complexities are hidden using abstract classes and interfaces.</li><li><!--block-->The objects that help to perform abstraction are encapsulated.</li></ol><div><!--block--><strong>Encapsulation:-</strong></div><ol><li><!--block-->While encapsulation is the process or method to contain the information.</li><li><!--block-->While in encapsulation, problems are solved at the implementation level.</li><li><!--block-->Whereas encapsulation is a method to hide/wrap the data in a single entity or unit along with a method to protect information from outside.</li><li><!--block-->Whereas encapsulation can be implemented using by access modifier i.e. private, protected and public.</li><li><!--block-->While in encapsulation, the data is hidden using methods of getters and setters.</li><li><!--block-->Whereas the objects that result in encapsulation need not be abstracted.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"625ae548-3567-4a58-a55d-d85594f146f0","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.846Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.846Z"},"uniqueId":"669b5f74-b067-4d4e-b496-b10dacb65eb8","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1d3"},"name":"If I would be calm and tension-free then I might think good things and might","heading":"If I would be calm and tension-free then I might","smartContent":{"content":"<div><!--block-->If I would be&nbsp;<strong>calm&nbsp;</strong>and&nbsp;<strong>tension-free</strong>&nbsp;then I might think good things and might get more positive results in life.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":8,"linkedQuestionsId":"11109469-2860-46c6-ad3e-6c18feed1880","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.873Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.873Z"},"uniqueId":"d09a8ebb-6271-43d7-80ac-411652734080","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1e1"},"name":"If I did work hard in my current organisation , study my Interview preparation questions,","heading":"If I did work hard in my current organisation ,","smartContent":{"content":"<div><!--block-->If I did&nbsp;</div><ul><li><!--block-->work hard in my current organisation ,</li><li><!--block-->study my Interview preparation questions,&nbsp;</li><li><!--block-->related books,&nbsp;</li><li><!--block-->practice communication skills,&nbsp;</li><li><!--block-->study project estimation and project management books&nbsp;</li></ul><div><!--block-->on regular basis consistently then I might get better results.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":8,"linkedQuestionsId":"78c82f45-b802-4b41-a2eb-8204df4961c4","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.889Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.889Z"},"uniqueId":"4118850a-0a41-486a-bbed-5bc26150fac9","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1ef"},"name":"5 Common Mental Errors That Sway You From Making Good Decisions by James Clear Read","heading":"5 Common Mental Errors That Sway You From Making Good","smartContent":{"content":"<div><!--block--><strong>5 Common Mental Errors That Sway You From Making Good Decisions<br></strong><br></div><div><!--block--><em>by James Clear</em><br><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9jb21tb24tbWVudGFsLWVycm9ycz9fX3M9JTVCc3Vic2NyaWJlci50b2tlbiU1RFx1MDAyNl9fcz0zcGFxanAzZW5qcHRzN3hyemZieiJ9\">Read this article on JamesClear.com</a>&nbsp;<br>&nbsp;</div><div><!--block--><br>I like to think of myself as a rational person, but I’m not one. The good news is it’s not just me — or you. We are all irrational.<br><br></div><div><!--block--><br>For a long time, researchers and economists believed that humans made logical, well-considered decisions. In recent decades, however, researchers have uncovered a wide range of mental errors that derail our thinking. Sometimes we make logical decisions, but there are many times when we make emotional, irrational, and confusing choices.<br><br></div><div><!--block--><br>Psychologists and behavioral researchers love to geek out about these different mental mistakes. There are dozens of them and they all have fancy names like “mere exposure effect” or “narrative fallacy.” But I don’t want to get bogged down in the scientific jargon today. Instead, let’s talk about the mental errors that show up most frequently in our lives and break them down in easy-to-understand language.<br><br></div><div><!--block--><br>Here are five common mental errors that sway you from making good decisions.<br><br></div><div><!--block--><strong><br>1. Survivorship Bias.<br></strong><br></div><div><!--block--><br>Nearly every popular online media outlet is filled with survivorship bias these days. Anywhere you see articles with titles like “8 Things Successful People Do Everyday” or “The Best Advice Richard Branson Ever Received” or “How LeBron James Trains in the Off-Season” you are seeing survivorship bias in action.<br><br></div><div><!--block--><br>Survivorship bias refers to our tendency to focus on the winners in a particular area and try to learn from them while completely forgetting about the losers who are employing the same strategy.<br><br></div><div><!--block--><br>There might be thousands of athletes who train in a very similar way to LeBron James, but never made it to the NBA. The problem is nobody hears about the thousands of athletes who never made it to the top. We only hear from the people who survive. We mistakenly overvalue the strategies, tactics, and advice of one survivor while ignoring the fact that the same strategies, tactics, and advice didn’t work for most people.<br><br></div><div><!--block--><br>Another example: “Richard Branson, Bill Gates, and Mark Zuckerberg all dropped out of school and became billionaires! You don’t need school to succeed. Entrepreneurs just need to stop wasting time in class and get started.”<br><br></div><div><!--block--><br>It’s entirely possible that Richard Branson succeeded in spite of his path and notbecause of it. For every Branson, Gates, and Zuckerberg, there are thousands of other entrepreneurs with failed projects, debt-heavy bank accounts, and half-finished degrees. Survivorship bias isn’t merely saying that a strategy may not work well for you, it’s also saying that we don’t really know if the strategy works well at all.<br><br></div><div><!--block--><br>When the winners are remembered and the losers are forgotten it becomes very difficult to say if a particular strategy leads to success.<br><br></div><div><!--block--><br><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci4.googleusercontent.com/proxy/wp4GjEu5_ZR1cHl2MtcQcUfOapjm_OnZ1-p9E6RaRlDtZ3kNPytMFvM0PT7TypoT-vlsDf2DRy2aPDEQwc-iIJl41nLCe_Q4gZ_gvn4IjEBKioZmw5xGN1gz0iI=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/survivorship-bias.jpg&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"64850\" contenteditable=\"false\"><img src=\"https://ci4.googleusercontent.com/proxy/wp4GjEu5_ZR1cHl2MtcQcUfOapjm_OnZ1-p9E6RaRlDtZ3kNPytMFvM0PT7TypoT-vlsDf2DRy2aPDEQwc-iIJl41nLCe_Q4gZ_gvn4IjEBKioZmw5xGN1gz0iI=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/survivorship-bias.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/64850/64851/https://ci4.googleusercontent.com/proxy/wp4GjEu5_ZR1cHl2MtcQcUfOapjm_OnZ1-p9E6RaRlDtZ3kNPytMFvM0PT7TypoT-vlsDf2DRy2aPDEQwc-iIJl41nLCe_Q4gZ_gvn4IjEBKioZmw5xGN1gz0iI=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/survivorship-bias.jpg\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br><br></div><div><!--block--><strong><br>2. Loss Aversion.<br></strong><br></div><div><!--block--><br>Loss aversion refers to our tendency to strongly prefer avoiding losses over acquiring gains. Research has shown that if someone gives you $10 you will experience a small boost in satisfaction, but if you lose $10 you will experience a dramatically higher loss in satisfaction. Yes, the responses are opposite, but they are not equal in magnitude.&nbsp;<br><br></div><div><!--block--><br>Our tendency to avoid losses causes us to make silly decisions and change our behavior simply to keep the things that we already own. We are wired to feel protective of the things we own and that can lead us to overvalue these items in comparison with the options.<br><br></div><div><!--block--><br>For example, if you buy a new pair of shoes it may provide a small boost in pleasure. However, even if you never wear the shoes, giving them away a few months later might be incredibly painful. You never use them, but for some reason you just can’t stand parting with them. Loss aversion.<br><br></div><div><!--block--><br>Similarly, you might feel a small bit of joy when you breeze through green lights on your way to work, but you will get downright angry when the car in front of you sits at a green light and you miss the opportunity to make it through the intersection. Losing out on the chance to make the light is far more painful than the pleasure of hitting the green light from the beginning.<br><br></div><div><!--block--><strong><br>3. The Availability Heuristic.<br></strong><br></div><div><!--block--><br>The Availability Heuristic refers to a common mistake that our brains make by assuming that the examples which come to mind easily are also the most important or prevalent things.<br><br></div><div><!--block--><br>For example, research by Steven Pinker at Harvard University has shown that we are currently living in the least violent time in history. There are more people living in peace right now than ever before. The rates of homicide, rape, sexual assault, and child abuse are all falling.<br><br></div><div><!--block--><br>Most people are shocked when they hear these statistics. Some still refuse to believe them. If this is the most peaceful time in history, why are there so many wars going on right now? Why do I hear about rape and murder and crime every day? Why is everyone talking about so many acts of terrorism and destruction?<br><br></div><div><!--block--><br>Welcome to the availability heuristic.<br><br></div><div><!--block--><br>The answer is that we are not only living in the most peaceful time in history, but also the best reported time in history. Information on any disaster or crime is more widely available than ever before. A quick search on the Internet will pull up more information about the terrorist act of your choice than any newspaper could have every delivered 100 years ago.<br><br></div><div><!--block--><br>The overall percentage of dangerous events is decreasing, but the likelihood that you hear about one of them (or many of them) is increasing. And because these events are readily available in our mind, our brains assume that they happen with greater frequency than they actually do.<br><br></div><div><!--block--><br>We overvalue and overestimate the impact of things that we can remember and we undervalue and underestimate the prevalence of the events we hear nothing about.&nbsp;<br><br></div><div><!--block--><br><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci5.googleusercontent.com/proxy/adwbD_WioD9YWwUjYIg15yAOMBN2JR9DMqN4GeHKOGTma53D3YMt8VW-QC23M992TPv_rlm-n26kaUM4U_0IuK4jIdQnq5brV8TCl4lwZfmRSrZlgdlfphN2aVxXno7r0w=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/availability-heuristic.jpg&quot;,&quot;width&quot;:700}\" data-trix-content-type=\"image\" data-trix-id=\"65092\" contenteditable=\"false\"><img src=\"https://ci5.googleusercontent.com/proxy/adwbD_WioD9YWwUjYIg15yAOMBN2JR9DMqN4GeHKOGTma53D3YMt8VW-QC23M992TPv_rlm-n26kaUM4U_0IuK4jIdQnq5brV8TCl4lwZfmRSrZlgdlfphN2aVxXno7r0w=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/availability-heuristic.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/65092/65093/https://ci5.googleusercontent.com/proxy/adwbD_WioD9YWwUjYIg15yAOMBN2JR9DMqN4GeHKOGTma53D3YMt8VW-QC23M992TPv_rlm-n26kaUM4U_0IuK4jIdQnq5brV8TCl4lwZfmRSrZlgdlfphN2aVxXno7r0w=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/availability-heuristic.jpg\" width=\"700\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br><br></div><div><!--block--><strong><br>4. Anchoring.<br></strong><br></div><div><!--block--><br>There is a burger joint close to my hometown that is known for gourmet burgers and cheeses. On the menu, they very boldly state, “LIMIT 6 TYPES OF CHEESE PER BURGER.”<br><br></div><div><!--block--><br>My first thought: This is absurd. Who gets six types of cheese on a burger?<br><br></div><div><!--block--><br>My second thought: Which six am I going to get?<br><br></div><div><!--block--><br>I didn’t realize how brilliant the restaurant owners were until I learned about anchoring. You see, normally I would just pick one type of cheese on my burger, but when I read “LIMIT 6 TYPES OF CHEESE” on the menu, my mind was anchored at a much higher number than usual.<br><br></div><div><!--block--><br>Most people won’t order six types of cheese, but that anchor is enough to move the average up from one slice to two or three pieces of cheese and add a couple extra bucks to each burger. You walk in planning to get a normal meal. You walk out wondering how you paid $14 for a burger and if your date will let you roll the windows down on the way home.<br><br></div><div><!--block--><br>This effect has been replicated in a wide range of research studies and commercial environments. For example, business owners have found that if you say “Limit 12 per customer” then people will buy twice as much product compared to saying, “No limit.”<br><br></div><div><!--block--><br>In one research study, volunteers were asked to guess the percentage of African nations in the United Nations. Before they guessed, however, they had to spin a wheel that would land on either the number 10 or the number 65. When volunteers landed on 65, the average guess was around 45 percent. When volunteers landed on 10, the average estimate was around 25 percent. This 20 digit swing was simply a result of anchoring the guess with a higher or lower number immediately beforehand.&nbsp;<br><br></div><div><!--block--><br>Perhaps the most prevalent place you hear about anchoring is with pricing. If the price tag on a new watch is $500, you might consider it too high for your budget. However, if you walk into a store and first see a watch for $5,000 at the front of the display, suddenly the $500 watch around the corner seems pretty reasonable. Many of the premium products that businesses sell are never expected to sell many units themselves, but they serve the very important role of anchoring your mindset and making mid-range products appear much cheaper than they would on their own.<br><br></div><div><!--block--><strong><br>5. Confirmation Bias.<br></strong><br></div><div><!--block--><br>The Grandaddy of Them All. Confirmation bias refers to our tendency to search for and favor information that confirms our beliefs while simultaneously ignoring or devaluing information that contradicts our beliefs.<br><br></div><div><!--block--><br>For example, Person A believes climate change is a serious issue and they only search out and read stories about environmental conservation, climate change, and renewable energy. As a result, Person A continues to confirm and support their current beliefs.<br><br></div><div><!--block--><br>Meanwhile, Person B does not believe climate change is a serious issue, and they only search out and read stories that discuss how climate change is a myth, why scientists are incorrect, and how we are all being fooled. As a result, Person B continues to confirm and support their current beliefs.<br><br></div><div><!--block--><br>Changing your mind is harder than it looks. The more you believe you know something, the more you filter and ignore all information to the contrary.<br><br></div><div><!--block--><br>You can extend this thought pattern to nearly any topic. If you just bought a Honda Accord and you believe it is the best car on the market, then you’ll naturally read any article you come across that praises the car. Meanwhile, if another magazine lists a different car as the best pick of the year, you simply dismiss it and assume that the editors of that particular magazine got it wrong or were looking for something different than what you were looking for in a car.&nbsp;<br><br></div><div><!--block--><br>It is not natural for us to formulate a hypothesis and then test various ways to prove it false. Instead, it is far more likely that we will form one hypothesis, assume it is true, and only seek out and believe information that supports it.&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9zaG9zaGluP19fcz0lNUJzdWJzY3JpYmVyLnRva2VuJTVEXHUwMDI2X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\">Most people don’t want new information, they want validating information</a>.<br><br></div><div><!--block--><br><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci6.googleusercontent.com/proxy/WH0cIlojfGeQjAGrJTtwA3Viov1QvL_sEu678DJuMfh2_mLckHIE0uucXusf1Kly6fUk6j3fONX2seqLuGp8hsDUcXKTXzuCXaRDnqKahPDP2ADUF0DFAfldKnE=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/confirmation-bias.jpg&quot;,&quot;width&quot;:700}\" data-trix-content-type=\"image\" data-trix-id=\"65389\" contenteditable=\"false\"><img src=\"https://ci6.googleusercontent.com/proxy/WH0cIlojfGeQjAGrJTtwA3Viov1QvL_sEu678DJuMfh2_mLckHIE0uucXusf1Kly6fUk6j3fONX2seqLuGp8hsDUcXKTXzuCXaRDnqKahPDP2ADUF0DFAfldKnE=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/confirmation-bias.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/65389/65390/https://ci6.googleusercontent.com/proxy/WH0cIlojfGeQjAGrJTtwA3Viov1QvL_sEu678DJuMfh2_mLckHIE0uucXusf1Kly6fUk6j3fONX2seqLuGp8hsDUcXKTXzuCXaRDnqKahPDP2ADUF0DFAfldKnE=s0-d-e1-ft#http://jamesclear.com/wp-content/uploads/2015/09/confirmation-bias.jpg\" width=\"700\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br><br></div><div><!--block--><strong><br>Where to Go From Here<br></strong><br></div><div><!--block--><br>Once you understand some of these common mental errors your first response might be something along the lines of, “I want to stop this from happening! How can I prevent my brain from doing these things?”<br><br></div><div><!--block--><br>It’s a fair question, but it’s not quite that simple. Rather than thinking of these miscalculations as a signal of a broken brain, it’s better to consider them as evidence that the shortcuts your brain uses aren’t useful in all cases. There are many areas of everyday life where the mental processes mentioned above are incredibly useful. You don’t want to eliminate these thinking mechanisms.<br><br></div><div><!--block--><br>The problem is that our brains are so good at performing these functions — they slip into these patterns so quickly and effortlessly — that we end up using them in situations where they don’t serve us.<br><br></div><div><!--block--><br>In cases like these, self-awareness is often one of our best options. Hopefully this article will help you spot these errors next time you make them.&nbsp;<br><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PWh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9jb21tb24tbWVudGFsLWVycm9yc1x1MDAyNl9fcz0lNUJzdWJzY3JpYmVyLnRva2VuJTVEXHUwMDI2X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"65480\" contenteditable=\"false\"><img src=\"https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/65480/65481/https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHBzOi8vZ2V0cG9ja2V0LmNvbS9lZGl0LnBocD91cmw9aHR0cDovL2phbWVzY2xlYXIuY29tL2NvbW1vbi1tZW50YWwtZXJyb3JzXHUwMDI2X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"65484\" contenteditable=\"false\"><img src=\"https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/65484/65485/https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a><br><br></div><div><!--block--><em>FOOTNOTES</em></div><ol><li><!--block--><em><br>“</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9zaG9va3J1bi5jb20vZG9jdW1lbnRzL2xvc3NhdmVyc2lvbnR2ZXJjYWgucGRmP19fcz0lNUJzdWJzY3JpYmVyLnRva2VuJTVEXHUwMDI2X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\"><em>Loss aversion in riskless choice: A reference-dependent model.</em></a><em>” by Amos Tversky and Daniel Kahneman. The Quarterly Journal of Economics.<br></em><br></li><li><!--block--><em><br>“</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly93d3cuc2xhdGUuY29tL2FydGljbGVzL25ld3NfYW5kX3BvbGl0aWNzL2ZvcmVpZ25lcnMvMjAxNC8xMi90aGVfd29ybGRfaXNfbm90X2ZhbGxpbmdfYXBhcnRfdGhlX3RyZW5kX2xpbmVzX3JldmVhbF9hbl9pbmNyZWFzaW5nbHlfcGVhY2VmdWwuc2luZ2xlLmh0bWw_X19zPSU1QnN1YnNjcmliZXIudG9rZW4lNURcdTAwMjZfX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\"><em>The World is Not Falling Apart</em></a><em>” by Steven Pinker.<br></em><br></li><li><!--block--><em><br>“</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9wc3ljaC5jb2xvcmFkby5lZHUvfnZhbmJvdmVuL3RlYWNoaW5nL3A3NTM2X2hldXJiaWFzL3A3NTM2X3JlYWRpbmdzL3R2ZXJza3lfa2Fobl8xOTczLnBkZj9fX3M9JTVCc3Vic2NyaWJlci50b2tlbiU1RFx1MDAyNl9fcz0zcGFxanAzZW5qcHRzN3hyemZieiJ9\"><em>Availability: A heuristic for judging frequency and probability.</em></a><em>” by Amos Tversky and Daniel Kahneman.<br></em><br></li><li><!--block--><em><br>“</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9wc2lleHAuc3MudWNpLmVkdS9yZXNlYXJjaC90ZWFjaGluZy9UdmVyc2t5X0thaG5lbWFuXzE5NzQucGRmP19fcz0lNUJzdWJzY3JpYmVyLnRva2VuJTVEXHUwMDI2X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\"><em>Judgment under uncertainty: Heuristics and biases.</em></a><em>” by Amos Tversky and Daniel Kahneman.<br></em><br></li><li><!--block--><em><br>“</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9wc3kyLnVjc2QuZWR1L35tY2tlbnppZS9uaWNrZXJzb25Db25maXJtYXRpb25CaWFzLnBkZj9fX3M9JTVCc3Vic2NyaWJlci50b2tlbiU1RFx1MDAyNl9fcz0zcGFxanAzZW5qcHRzN3hyemZieiJ9\"><em>Confirmation bias: A ubiquitous phenomenon in many guises.</em></a><em>” by Raymond S. Nickerson<br></em><br></li><li><!--block--><em><br>Thanks to Sam Sager for his help researching this post.<br></em><br></li></ol><div><!--block-->Enjoy that article? Here are three more things you might like:&nbsp;<br><br></div><ul><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9hcnRpY2xlcz9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Interesting articles</a>: Read my best articles on topics like habits, goal setting, creativity, and productivity.</li><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9oYWJpdHMtYWNhZGVteT9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Online course</a>: Master your habits with my best-selling Habits Academy, a self-paced course made for busy people.</li><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9rZXlub3RlLXNwZWFrZXI_X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\">Keynote speaking</a>: Hire me to speak to your organization or team about habits, leadership, innovation, and motivation.You can get more of my thoughts on</li></ul><div><!--block-->&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9mYWNlYm9vay5jb20vamFtZXNjbGVhcj9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Facebook</a>,&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly90d2l0dGVyLmNvbS9qYW1lc19jbGVhcj9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Twitter</a>, and&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTI5NjQ3NTk4OCIsInVybCI6Imh0dHA6Ly9pbnN0YWdyYW0uY29tL2phbWVzX2NsZWFyLz9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Instagram</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"31ab1744-35c0-4422-ac10-7e07b005b661","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.91Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.91Z"},"uniqueId":"763c4a47-157f-49a1-927f-4fe56b6d46fa","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a1fd"},"name":"How to Stay Motivated in Life and Business by James Clear Read this on JamesClear.com","heading":"How to Stay Motivated in Life and Business by James","smartContent":{"content":"<div><!--block--><strong>How to Stay Motivated in Life and Business<br></strong><br></div><div><!--block--><em>by James Clear</em><br><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9nb2xkaWxvY2tzLXJ1bGU_X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\">Read this on JamesClear.com</a>&nbsp;<br>&nbsp;</div><div><!--block--><br>It was 1955 and Disneyland had just opened in Anaheim, California when a ten-year-old boy walked in and asked for a job. Labor laws were loose back then and the boy managed to land a position selling guidebooks to visitors for $0.50 a piece.<br><br></div><div><!--block--><br>Within a year, he had transitioned to Disney’s magic shop where he learned tricks from the older employees. He experimented with jokes and tried out simple magic routines on the visitors. Soon, he discovered that what he loved was not performing magic, but performing in general. The young boy set his sights on becoming a comedian.<br><br></div><div><!--block--><br>Once he entered high school, he started performing in small clubs around Los Angeles. The crowds were small and his act was short. He was rarely on stage for more than five minutes. In one case, he literally delivered his standup routine to an empty club.<br><br></div><div><!--block--><br>It wasn’t glamorous work, but there was no doubt he was getting better. His first magic routines would only last one or two minutes. By high school his material had expanded to include a five minute skit and then a ten minute show. At the age of 19, he was performing weekly at clubs for twenty minutes at a time. Of course, he had to read three poems during the act just to make the routine long enough, but still. He was improving.<br><br></div><div><!--block--><br>He spent another decade experimenting, adjusting, and practicing his act. He took a job as a television writer and, gradually, he was able to land his own appearances on television shows. By the mid-1970s, he had worked his way into being a regular guest on&nbsp;<em>The Tonight Show</em>&nbsp;and&nbsp;<em>Saturday Night Live</em>.<br><br></div><div><!--block--><br>After nearly 15 years of work, he broke through to wild success. He toured 60 cities in 63 days. Then 72 cities in 80 days. Then 85 cities in 90 days. 18,695 people attended one show in Ohio. 45,000 tickets were sold for his 3-day show in New York. He catapulted to the top of his genre and became one of the most important comedians of his time.<br><br></div><div><!--block--><br>His name was Steve Martin.<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci5.googleusercontent.com/proxy/UmJh28Ix5ZuzRmOVKZzg67U5_my72UwNA-33sOcIsWr24BcAhiEuvSXY_vDvwojGpTxTsAOkviawCVcG514mk88zmwCM1nMBtY0beuR0Z2bWUNapD9zrObituuMsB_DVIG5GrPkxLEmLzvfEhtpDJOYZ3vn4C4MEn9rX6Dueq4aVpnBabyE-pH9s7w=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/22506/embeddable_4b0146ad-b795-4316-878b-afbd64e24651.jpg&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"67186\" contenteditable=\"false\"><img src=\"https://ci5.googleusercontent.com/proxy/UmJh28Ix5ZuzRmOVKZzg67U5_my72UwNA-33sOcIsWr24BcAhiEuvSXY_vDvwojGpTxTsAOkviawCVcG514mk88zmwCM1nMBtY0beuR0Z2bWUNapD9zrObituuMsB_DVIG5GrPkxLEmLzvfEhtpDJOYZ3vn4C4MEn9rX6Dueq4aVpnBabyE-pH9s7w=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/22506/embeddable_4b0146ad-b795-4316-878b-afbd64e24651.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/67186/67187/https://ci5.googleusercontent.com/proxy/UmJh28Ix5ZuzRmOVKZzg67U5_my72UwNA-33sOcIsWr24BcAhiEuvSXY_vDvwojGpTxTsAOkviawCVcG514mk88zmwCM1nMBtY0beuR0Z2bWUNapD9zrObituuMsB_DVIG5GrPkxLEmLzvfEhtpDJOYZ3vn4C4MEn9rX6Dueq4aVpnBabyE-pH9s7w=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/22506/embeddable_4b0146ad-b795-4316-878b-afbd64e24651.jpg\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br>Steve Martin performing in Chicago, Illinois in 1978. (Photo by Paul Natkin.)</div><div><!--block--><strong><br>How to Stay Motivated<br></strong><br></div><div><!--block--><br>I recently finished Steve Martin’s wonderful autobiography,&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9ib29rL2Jvcm4tc3RhbmRpbmctdXA_X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\">Born Standing Up</a>.<br><br></div><div><!--block--><br>Comedy is not for the faint of heart. It is hard to imagine a situation that would strike fear into the hearts of more people than failing to get a single laugh on stage. And yet, Martin worked at it for 18 years. In his words, “10 years spent learning, 4 years spent refining, and 4 years spent in wild success.” His story offers a fascinating perspective on motivation, perseverance, and consistency.<br><br></div><div><!--block--><br>Why do we stay motivated to reach some goals, but not others? Why do we say we want something, but give up on it after a few days? What is the difference between the areas where we naturally stay motivated and those where we give up?<br><br></div><div><!--block--><br>Scientists have been studying motivation for decades. While there is still much to learn, one of the most consistent findings is that perhaps the best way to stay motivated is to work on tasks of “just manageable difficulty.”<br>&nbsp;<br><br></div><div><!--block--><strong><br>The Goldilocks Rule<br></strong><br></div><div><!--block--><br>Human beings love challenges, but only if they are within the optimal zone of difficulty.<br><br></div><div><!--block--><br>For example, imagine you are playing tennis. If you try to play a serious match against a four-year-old, you will quickly become bored. The match is too easy. On the opposite end of the spectrum, if you try to play a serious match against a professional tennis player like Roger Federer or Serena Williams, you will find yourself demotivated for a different reason. The match is too difficult.<br><br></div><div><!--block--><br>Compare these experiences to playing tennis against someone who is your equal. As the game progresses, you win a few points and you lose a few points. You have a chance of winning the match, but only if you really try. Your focus narrows, distractions fade away, and you find yourself fully invested in the task at hand. The challenge you are facing is “just manageable.” Victory is not guaranteed, but it is possible. Tasks like these, science has found, are the most likely to keep us motivated in the long term.<br><br></div><div><!--block--><br>Tasks that are significantly below your current abilities are boring. Tasks that are significantly beyond your current abilities are discouraging. But tasks that are right on the border of success and failure are incredibly motivating to our human brains. We want nothing more than to master a skill just beyond our current horizon.<br><br></div><div><!--block--><br>We can call this phenomenon&nbsp;<strong>The Goldilocks Rule</strong>. The Goldilocks Rule states that humans experience peak motivation when working on tasks that are right on the edge of their current abilities. Not too hard. Not too easy. Just right. [1]<br><br></div><div><!--block--><br>Martin’s comedy career was a perfect example of what The Goldilocks Rule looks like in the real world. Each year, the length of his comedy routines expanded, but only by a minute or two. He was always adding new material, but he also kept a few jokes that were guaranteed to get laughs. There were just enough victories to keep him motivated and just enough mistakes to keep him working hard.<br><br></div><div><!--block--><br><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci5.googleusercontent.com/proxy/FoQhgfBkZ6VkJKORekSwF_RLgXfVVcf7smBzm-sNUIVzCXY_FLx6So1k9ZqmmKYsjBRGjplXq0IDKwVAH97rCYIfTaygDqc_bytWK-bFO0YIGT_35dABOyxkxur9DHOFpsBPL6U0Ei9h-AbyxbCF9NlPL_Xk-LObVGeRmx_2nLGanoz0trZ8BQIlyQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/93891/embeddable_06dd743a-0175-4d12-a526-feb665ce754f.jpg&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"67430\" contenteditable=\"false\"><img src=\"https://ci5.googleusercontent.com/proxy/FoQhgfBkZ6VkJKORekSwF_RLgXfVVcf7smBzm-sNUIVzCXY_FLx6So1k9ZqmmKYsjBRGjplXq0IDKwVAH97rCYIfTaygDqc_bytWK-bFO0YIGT_35dABOyxkxur9DHOFpsBPL6U0Ei9h-AbyxbCF9NlPL_Xk-LObVGeRmx_2nLGanoz0trZ8BQIlyQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/93891/embeddable_06dd743a-0175-4d12-a526-feb665ce754f.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/67430/67431/https://ci5.googleusercontent.com/proxy/FoQhgfBkZ6VkJKORekSwF_RLgXfVVcf7smBzm-sNUIVzCXY_FLx6So1k9ZqmmKYsjBRGjplXq0IDKwVAH97rCYIfTaygDqc_bytWK-bFO0YIGT_35dABOyxkxur9DHOFpsBPL6U0Ei9h-AbyxbCF9NlPL_Xk-LObVGeRmx_2nLGanoz0trZ8BQIlyQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/93891/embeddable_06dd743a-0175-4d12-a526-feb665ce754f.jpg\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><br><br></div><div><!--block--><strong><br>Measure Your Progress<br></strong><br></div><div><!--block--><br>If you want to learn how to stay motivated to reach your goals, then there is a second piece of the motivation puzzle that is crucial to understand. It has to do with achieving that perfect blend of hard work and happiness.<br><br></div><div><!--block--><br>Working on challenges of an optimal level of difficulty has been found to not only be motivating, but also to be a major source of happiness. As psychologist Gilbert Brim put it, “One of the important sources of human happiness is working on tasks at a suitable level of difficulty, neither too hard nor too easy.”<br><br></div><div><!--block--><br>This blend of happiness and peak performance is sometimes referred to as flow, which is what athletes and performers experience when they are “in the zone.” Flow is the mental state you experience when you are so focused on the task at hand that the rest of the world fades away.<br><br></div><div><!--block--><br>In order to reach this state of peak performance, however, you not only need to work on challenges at the right degree of difficulty, but also measure your immediate progress. As psychologist Jonathan Haidt explains, one of the keys to reaching a flow state is that “you get immediate feedback about how you are doing at each step.”<br><br></div><div><!--block--><br>Seeing yourself make progress&nbsp;<em>in the moment</em>&nbsp;is incredibly motivating. Steve Martin would tell a joke and immediately know if it worked based on the laughter of the crowd. Imagine how addicting it would be to create a roar of laughter. The rush of positive feedback Martin experienced from one great joke would probably be enough to overpower his fears and inspire him to work for weeks.<br><br></div><div><!--block--><br>In other areas of life, measurement looks different but is just as critical for achieving a blend of motivation and happiness. In tennis, you get immediate feedback based on whether or not you win the point. Regardless of how it is measured, the human brain needs some way to visualize our progress if we are to maintain motivation. We need to be able to see our wins.<br><br></div><div><!--block--><strong><br>Two Steps to Motivation<br></strong><br></div><div><!--block--><br>If we want to break down the mystery of how to stay motivated for the long-term, we could simply say:<br><br></div><ol><li><!--block-->Stick to The Goldilocks Rule and work on tasks of just manageable difficulty.</li><li><!--block-->Measure your progress and receive immediate feedback whenever possible.</li></ol><div><!--block--><br>Wanting to improve your life is easy. Sticking with it is a different story. If you want to stay motivated for good, then start with a challenge that is just manageable, measure your progress, and repeat the process.<br><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PWh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9nb2xkaWxvY2tzLXJ1bGVcdTAwMjZfX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"67644\" contenteditable=\"false\"><img src=\"https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/67644/67645/https://ci3.googleusercontent.com/proxy/IN0L8kh87imhE5R-RqFUC3e3uVsURB8Ij6HZz7kcVeAlwusO8_CZMYmgGeceL3w_Se8YD_fzJGqNXsumVUWSbGygoa_UTD8qaEk6KO7FWMREyUi3v2EJ4FcbrQl2w9n8Ty0M4O254o5Rc_f_tyY-ix3iI1Cbl-BFWiiZ2Lt3kSE7a992406nkSPYjQ=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47448/embeddable_d9173f30-5e20-4b17-9f4d-9277f20509e5.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a>&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHBzOi8vZ2V0cG9ja2V0LmNvbS9lZGl0LnBocD91cmw9aHR0cDovL2phbWVzY2xlYXIuY29tL2dvbGRpbG9ja3MtcnVsZVx1MDAyNl9fcz0zcGFxanAzZW5qcHRzN3hyemZieiJ9\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"67650\" contenteditable=\"false\"><img src=\"https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/67650/67651/https://ci4.googleusercontent.com/proxy/3mr0w_hkPS40vW7BY6QAd5jApnOqfUCSwz_MPWTJR5n8P4QIDP-b6Wt3Dtz2nDPfTKRgEOvtbTMdDqLS53Rh3wFz8P24TD6mzJDON3iwYwYpeAbIy4myPr-4YOFjwd3jFDRJyL_1YB4xkmdS0RI7CJO2M3w-m4zxdd1P4nvJ17j5Ysqr03ZLvOTjkA=s0-d-e1-ft#https://getdrip.s3.amazonaws.com/uploads/image_upload/image/47449/embeddable_1236b5c6-4ee1-405c-9a38-9138d7f35cec.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a><br><br></div><div><!--block--><em>FOOTNOTES</em></div><ol><li><!--block--><em><br>For those from different cultures, the Goldilocks Rule is named after the fairy tale of&nbsp;</em><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dvbGRpbG9ja3NfYW5kX3RoZV9UaHJlZV9CZWFycz9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\"><em>Goldilocks and the Three Bears</em></a><em>.<br></em><br></li></ol><div><!--block--><br>&nbsp;<br><br></div><div><!--block-->Enjoy that article? Here are three more things you might like:&nbsp;<br><br></div><ul><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9hcnRpY2xlcz9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Interesting articles</a>: Read my best articles on topics like habits, goal setting, creativity, and productivity.</li><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9oYWJpdHMtYWNhZGVteT9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Online course</a>: Master your habits with my best-selling Habits Academy, a self-paced course made for busy people.</li><li><!--block--><a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9qYW1lc2NsZWFyLmNvbS9rZXlub3RlLXNwZWFrZXI_X19zPTNwYXFqcDNlbmpwdHM3eHJ6ZmJ6In0\">Keynote speaking</a>: Hire me to speak to your organization or team about habits, leadership, innovation, and motivation.You can get more of my thoughts on</li></ul><div><!--block-->&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9mYWNlYm9vay5jb20vamFtZXNjbGVhcj9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Facebook</a>,&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly90d2l0dGVyLmNvbS9qYW1lc19jbGVhcj9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Twitter</a>, and&nbsp;<a href=\"http://t.dripemail2.com/c/eyJhY2NvdW50X2lkIjoiMjY2ODI3NSIsImRlbGl2ZXJ5X2lkIjoiMTMyNTM4MTU2MyIsInVybCI6Imh0dHA6Ly9pbnN0YWdyYW0uY29tL2phbWVzX2NsZWFyLz9fX3M9M3BhcWpwM2VuanB0czd4cnpmYnoifQ\">Instagram</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9522ecad-f1ed-4ad2-9694-28372abee761","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.93Z"},"updatedDate":{"$date":"2024-07-10T20:39:45.93Z"},"uniqueId":"72785709-1a43-4429-9709-9f3fc036c822","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a233"},"name":"My name is Premendra Kumar. I did my B.Tech in Computer science and engineering from BCE Bhagalpur.","heading":"My name is Premendra Kumar. I did my B.Tech in Computer science and engineering from BCE Bhagalpur.","smartContent":{"content":"# Introduction\nI'm Premendra Kumar, a B.Tech graduate from BCE Bhagalpur (2009) with over 14 years of software development experience, primarily in Java and related technologies.\n\nI've worked on 20+ projects focusing on backend development for REST/GraphQL endpoints, frontend integration, ETL jobs, and report generation.\n\nI've implemented views with technologies like ReactJS, Flex4, JSPs, and Struts2, connected them to backend services, written backend test cases using JUnit, migrated codebases from SVN to Git, and have strong knowledge of AWS services (S3, Glue, Glue DataBrew, Lambda, SQS) and containerization with Docker and Kubernetes.\n\nI've served as a Team Lead for 6 years and hold certifications in Java8, ReactJS, GitHub Actions, Docker, Kubernetes, and Spring Security. I aspire to become a Software Architect. In my free time, I learn new technologies, travel to new places, and enjoy making new friends.\n\n# Key Skills\n- Java and Related APIs - 14+years\n- ReactJS, NodeJS, TypeScript - 6+years\n- AWS services - 6+years\n- Team Lead - 6+years\n\n# Design Patterns I have used\n## In Last Project\n- TBD\n\n## In Overall career\n- Core Java\n  - **[GOF]: [Creational DP]** : `Builder`, `Factory method`, `Abstract Factory`,  `Prototype`, `Singleton`\n  - **[GOF]: [Structural DP]** : `Facade`, `Adapter`, `Bridge`, `Composite`, `Decorator`, `Flyweight`, `Proxy`\n  - **[GOF]: [Behavioural DP]** : `Chain Of Responsibility`, `Iterator`, `Mediator`, `Observer`, `Command`, `Interpreter`, `Momento`, `State`, `Strategy`, `Template Method`, `Visitor`\n\n- J2EE\n  - All DPs mentioned in Core Java. Additionally,\n  - **[Concurrency Patterns]** : Thread Pool, Thread-Safe Singleton, Read-Write Lock, Scheduler\n  - **[JEE Patterns]** : Data Access Object (DAO), Service Locator, Business Delegate, Model-View-Controller (MVC), Transfer Object, Session Facade, Intercepting Filter, Front Controller, Composite Entity, Value Object, Application Service, Business Object, Web Service Broker\n\n- Microservices\n  - **[Decomposition Patterns]** : Decompose by Business Capability, Decompose by Subdomain\n  - **[Data Management Patterns]** : Database per Service, Shared Database, Saga, CQRS (Command Query Responsibility Segregation), Event Sourcing\n  - **[Communication Patterns]** : API Gateway, Backend for Frontend (BFF), Circuit Breaker, Service Mesh, Service Registry\n  - **[Deployment Patterns]** : Service Instance per Container, Sidecar\n  - **[Observability Patterns]** : Log Aggregation, Distributed Tracing, Application Metrics, Health Check API\n  - **[Security Patterns]** : Access Token, JWT (JSON Web Token)\n  - **[Resilience Patterns]** : Retry, Timeout, Bulkhead, Fallback, Rate Limiting\n  - **[Transaction Management Patterns]** : Compensating Transaction\n  - **[Service Discovery Patterns]** : Client-Side Discovery, Server-Side Discovery\n  - **[API Patterns]** : API Versioning, Consumer-Driven Contracts\n\n \n# Asynchronous communication among Microservices\n\n# Kafka and RabbitMQ implementation\n\n# AWS services on which you have worked. Also related use cases and code/configuration examples\n- S3, \n- AWS Glue, \n- AWS Glue DataBrew, \n- Lambda, \n- SQS\n- EC2\n\n# DevOps knowledge and what all things you have done?\n- As a DevOps engineer, I have worked for\n  - Jenkins\n  - Chef\n  - BitBucket Pipelines\n  - GitHub Actions\n\n\n# As a Team Lead, Which things I have done","textOutputType":"markdown","textInputType":"TextArea"},"rating":10,"linkedQuestionsId":"5a9867e2-ab22-47e8-8087-9e8d42d267d6","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.974Z"},"updatedDate":{"$date":"2024-09-04T05:36:23.197Z"},"uniqueId":"f08296f6-d562-4ef4-a45e-b51d2c6843b6","__v":0}
{"_id":{"$oid":"668ef19159d6bcc528b1a24b"},"name":"Better opportunity to learn and earn","heading":"Better opportunity to learn and earn","smartContent":{"content":"I've switched companies to find better opportunities to learn and earn more. Until 2014, I was a contract employee, so my job depended on when projects were completed. After that, I joined Concentrix and stayed for about five years. Then, I worked at Indiabulls-Dhanistocks for three years, but the salary was too low, so I moved to Rsystems, where I stayed for 1.5 years. Unfortunately, Rsystems lost a contract, and all developers, including me, had to look for new opportunities. I then joined a company that turned out to have very limited development work, and my entire team was let go after just three months. After that, I joined Zycus Infotech, where I was enjoying my work, but I had to resign due to a medical emergency.\n\nThroughout my career, my salary remained quite low until 2021.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"1eb4fe74-3556-4d44-8dbd-a7e71e6d168f","order":0,"createdDate":{"$date":"2024-07-10T20:39:45.992Z"},"updatedDate":{"$date":"2024-09-04T07:45:14.914Z"},"uniqueId":"aefe9332-5a24-4689-a1d5-657e007978fe","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a263"},"name":"iAgent 4.0 iAgent is a telecom domain web application. It is a Cisco certified web","heading":"iAgent 4.0 iAgent is a telecom domain web application. It","smartContent":{"content":"<div><!--block--><strong>iAgent 4.0</strong></div><ul><li><!--block-->iAgent is a telecom domain web application. It is a Cisco certified web application designed to be used by agents in call-centers.<ul><li><!--block-->iAgent web application is built using Flex and Java. The GUI part is designed using adobe Flex. RTMP is used to communicate flex application with server.</li><li><!--block-->At server, Java is used to support the client side GUI request and send response using RTMP-remoting channel.</li><li><!--block--><strong>iAgent application has major task to create modules as per client request dynamically.</strong></li><li><!--block-->iAgent application has two parts:-<ul><li><!--block--><strong><em>Admin</em></strong><ul><li><!--block-->Admin part is responsible to&nbsp;<ul><li><!--block-->create new module</li><li><!--block-->attach services to different events of various components of a module and receive the result of the requested service.</li></ul></li><li><!--block-->The modules created can be managed by various roles and rights.&nbsp;</li><li><!--block-->iAgent Admin part has one&nbsp;<strong>Service-generation part.</strong><ul><li><!--block-->In this part we create services from methods of a java class. The java class is contained in a jar file, which can be uploaded by the iAgent application to the server. From the java methods we create services with unique name. The definition of a service, i.e. , to which java method of a class in the jar , and its parameters definition is stored in the table of a database.&nbsp;</li><li><!--block-->Once the service definition is stored in the database, these services are ready to be used by the modules on events of various components e.g. combobox, datagrid, list, label, button etc.</li><li><!--block-->In the same way , in iAgent application we create services from SOAP web-services' operation.</li><li><!--block-->In the same way, we store the dbconfiguration details of various queries related to the tables of a particular database in the database.<ul><li><!--block-->Queries may be simple SELECT statement, or a DML query (i.e. INSERT, UPDATE, DELETE ) or a Stored Procedure.</li><li><!--block-->Queries may have some parameters which values will be supplied at runtime.</li><li><!--block-->The parameters are created by surrounding the [\"#\"--^^-- \"#\"].&nbsp;</li><li><!--block-->The information of queries and its parameters are stored in database.</li></ul></li></ul></li><li><!--block-->In iAgent Admin, we can also create various channels.<ul><li><!--block-->The execution of a particular service from a particular channel may be managed in the application.</li><li><!--block-->The channel may be Remoting channel, HTTP-Channel, JavaScript channel, Licencing channel.</li></ul></li><li><!--block-->We can import pre-existing SWF of projects developed in flex, which were not created using iAgent into the module. These SWF projects can be used in iAgent.</li></ul></li><li><!--block--><strong><em>Client</em></strong><ul><li><!--block-->Client part is responsible to run the module under the iAgent application. In the iAgent Servlets and other web-technologies can be used to invoke services and get the response.</li></ul></li></ul></li><li><!--block-->The module developed from iAgent can be attached with CTI (Computer Telephony Interface) using CISCO API. Using CTI we get various call variables on various events like agent-login, call-initiated, call-switch, call-transfer, call-end, agent-logout.<ul><li><!--block-->Cisco CTI is the application to connect the telephone with a computer application using CISCO CTI API, API provided by CISCO. CISCO API gives various methods to get the events and performing action and get the values of various call-variables.</li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":5,"linkedQuestionsId":"3b1d5abf-f5f2-4840-8390-01b8852ded61","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.011Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.011Z"},"uniqueId":"8b211920-6e6e-4f88-8fc8-091915682fca","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a27b"},"name":"KnowledgeBase KB is a separate project which stores information regarding various subjects and topics in","heading":"KnowledgeBase KB is a separate project which stores information regarding","smartContent":{"content":"<div><!--block--><strong><em>KnowledgeBase</em></strong></div><ul><li><!--block-->KB is a separate project which stores information regarding various subjects and topics in various categories and articles. We can upload PDFs related to various articles and using Apache Solr , we can search within the pdfs for a given text.</li><li><!--block-->This is again a web application. Front-end developed in Flex and Backend in Java.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a9ffab7d-48f8-435e-be1c-f4873ed5fd3e","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.028Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.028Z"},"uniqueId":"5c6ba5da-4559-4ea2-b925-87373903e5e4","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a293"},"name":"Survey Survey is a separate project which stores questions related to various topics in various","heading":"Survey Survey is a separate project which stores questions related","smartContent":{"content":"<div><!--block--><strong><em>Survey</em></strong></div><ul><li><!--block-->Survey is a separate project which stores questions related to various topics in various pages and further groups.&nbsp;</li><li><!--block-->This project is mainly used to store various question session which is raised to the customer regarding providing them a particular service like&nbsp;<ul><li><!--block-->account-creation,&nbsp;</li><li><!--block-->PIN-retrieval,&nbsp;</li><li><!--block-->customer-authentication,&nbsp;</li><li><!--block-->debit card issues etc&nbsp;</li></ul></li><li><!--block-->Survey client part is a separate project which create GUI for question and stored the answers given by a particular customer before providing a particular service.<ul><li><!--block-->This application also stores the after-all results ( final results ) and decides whether the customer is eligible to get the service.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"26fb7b1e-a7bb-47c5-8834-c6c93d371724","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.048Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.048Z"},"uniqueId":"9d8d636d-282f-4d3a-91b1-cb20e94dd58a","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a368"},"name":"The most important value that I have is my integrity. I demonstrate honesty and trust","heading":"The most important value that I have is my integrity.","smartContent":{"content":"<div><!--block-->The most important value that I have is my&nbsp;<strong>integrity</strong>. I demonstrate honesty and trust in all my\r actions to establish credibility as a leader. By having this conviction behind my words and\r actions, those who I lead are gain buy in to the direction I take them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"28ff2ce5-3795-4c7e-9e75-2338e2366d39","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.177Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.177Z"},"uniqueId":"6a128e32-2a24-48e4-ae5e-5455bbd3779b","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a371"},"name":"I gain commitment from my teams by influencing and persuading them to set specific objectives","heading":"I gain commitment from my teams by influencing and persuading","smartContent":{"content":"<div><!--block-->I gain commitment from my teams by influencing and persuading them to set specific objectives\r&nbsp;and also buy into the process. Once they have established cooperation and cohesion, they are\r&nbsp;on board to attain the goal.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"93d25a8f-7753-4e7a-9deb-16d85b8438eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.197Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.197Z"},"uniqueId":"032a42af-2409-4311-8981-19351b94dd78","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a37d"},"name":"Advantages and Disadvantages of Cloud Computing Advantages Cost Savings--With cloud computing, you can save substantial","heading":"Advantages and Disadvantages of Cloud Computing Advantages Cost Savings--With cloud","smartContent":{"content":"<div><!--block--><strong>Advantages and Disadvantages of Cloud Computing</strong></div><ul><li><!--block--><strong>Advantages</strong><ul><li><!--block--><strong><em>Cost Savings--</em></strong>With cloud computing, you can save substantial capital costs with zero in-house server storage and application requirements. The lack of on-premises infrastructure also removes their associated operational costs in the form of power, air conditioning and administration costs. You pay for what is used and disengage whenever you like - there is no invested IT capital to worry about.&nbsp;</li><li><!--block--><strong><em>Reliability--</em></strong>With a managed service platform, cloud computing is much more reliable and consistent than in-house IT infrastructure. Most providers offer a Service Level Agreement which guarantees 24/7/365 and 99.99% availability. Your organization can benefit from a massive pool of redundant IT resources, as well as quick failover mechanism - if a server fails, hosted applications and services can easily be transited to any of the available servers.</li><li><!--block--><strong><em>Manageability--</em></strong>Cloud computing provides enhanced and simplified IT management and maintenance capabilities through central administration of resources, vendor managed infrastructure and SLA backed agreements. You enjoy a simple web-based user interface for accessing software, applications and services – without the need for installation - and an SLA ensures the timely and guaranteed delivery, management and maintenance of your IT services.</li><li><!--block--><strong><em>Strategic Edge--</em></strong>Ever-increasing computing resources give you a competitive edge over competitors, as the time you require for IT procurement is virtually nil.&nbsp;</li></ul></li><li><!--block--><strong>Disadvantages</strong><ul><li><!--block--><strong><em>Downtime--</em></strong>As cloud service providers take care of a number of clients each day, they can become overwhelmed and may even come up against technical outages.Additionally, if your internet connection is offline, you will not be able to access any of your applications, server or data from the cloud.</li><li><!--block--><strong><em>Security--</em></strong>Although cloud service providers implement the best security standards and industry certifications, storing data and important files on external service providers always opens up risks.For instance, in a multi-tenant cloud architecture where multiple users are hosted on the same server, a hacker might try to break into the data of other users hosted and stored on the same server. However, such exploits and loopholes are not likely to surface, and the likelihood of a compromise is not great.</li><li><!--block--><strong><em>Vendor Lock-In--</em></strong>Although cloud service providers promise that the cloud will be flexible to use and integrate, switching cloud services is something that hasn’t yet completely evolved.&nbsp; For instance, applications developed on Microsoft Development Framework (.Net) might not work properly on the Linux platform.</li><li><!--block--><strong><em>Limited Control--</em></strong>Since the cloud infrastructure is entirely owned, managed and monitored by the service provider, it transfers minimal control over to the customer. Key administrative tasks such as server shell access, updating and firmware management may not be passed to the customer or end user.</li></ul></li><li><!--block--><strong>Advantages and Disadvantages of Physical servers</strong><ul><li><!--block--><strong>Advantages</strong><ul><li><!--block-->Physical servers are the best type for high-scale IT environments.</li><li><!--block-->They provide reliability and ease of access for web hosting services.</li><li><!--block-->Since a physical server is dedicated for one or more specific purpose, critical resources are not being used for anything other than the dedicated task.</li><li><!--block-->A dedicated hosting environment is incredibly reliable for a large traffic website to do well and operate efficiently. For smaller web sites, it will also provide reliability and uptime.</li><li><!--block-->A dedicated server is all yours, it isn’t shared and its purpose is specific.</li><li><!--block-->Dedicated resources are being used, without outside interruption, which means applications will run smoother.</li><li><!--block-->A website will run smoother since the services won’t be interrupted, for an effective server that is always available.</li><li><!--block-->Root administrator access is also available with a physical server.</li><li><!--block-->Physical servers also allow customization, as it can be configured which are not usually available on other forms of hosting.</li></ul></li><li><!--block--><strong>Disadvantages</strong><ul><li><!--block-->The most obvious disadvantage of a physical server is the high cost.</li><li><!--block-->A physical server is costly but the ROI, return on investment, is quite high since the role that it will play will be managed reliably.</li><li><!--block-->A physical server can also be expensive due to data center costs but this is normally a problem that comes with web server hosting.</li><li><!--block-->Physical servers also require space, hardware, and equipment. Virtualization and cloud based servers are also far less physically intrusive.</li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"04061c5c-3afc-4e59-9d85-2a405aed799d","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.228Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.228Z"},"uniqueId":"23c88416-b7c9-46a9-b200-8679c8dce3e2","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a392"},"name":"Jenkins is an open source tool with plugin built for continuous integration purpose. The principle","heading":"Jenkins is an open source tool with plugin built for","smartContent":{"content":"<div><!--block-->Jenkins is an open source tool with plugin built for continuous integration purpose. The\r&nbsp;principle functionality of Jenkins is to keep a track of version control system and to initiate and\r&nbsp;monitor a build system if changes occur. It monitors the whole process and provides reports and\r&nbsp;notifications to alert.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"05fd0757-0a3a-42be-bd02-da9cec5b8b05","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.258Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.258Z"},"uniqueId":"d4fae05c-c4b1-486a-9edb-e54cdf57f787","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a39f"},"name":"In software development, when multiple developers or teams are working on different segments of same","heading":"In software development, when multiple developers or teams are working","smartContent":{"content":"<div><!--block-->In software development, when multiple developers or teams are working on different segments&nbsp;of same web application, we need to perform integration test by integrating all modules. In&nbsp;order to do that an automated process for each piece of code is performed on daily bases so&nbsp;that all your code get tested.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":6,"linkedQuestionsId":"b694341b-6ba8-4afe-8053-f80a82851b2c","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.275Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.275Z"},"uniqueId":"a2384e25-6bd4-42d4-8295-ef0191c7c6c6","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a3ac"},"name":"To use Jenkins you require A source code repository which is accessible, for instance, a","heading":"To use Jenkins you require A source code repository which","smartContent":{"content":"<div><!--block-->To use Jenkins you require</div><ul><li><!--block-->A source code repository which is accessible, for instance, a Git repository</li><li><!--block-->A working build script, e.g., a Maven script, checked into the repository</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":4,"linkedQuestionsId":"0eb17c9e-d751-4852-aa4f-fde721a08c51","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.293Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.293Z"},"uniqueId":"92f0528c-0408-4d47-9fbb-931029c66dd0","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a3b9"},"name":"Advantage of Jenkins include At integration stage, build failures are cached For each code commit","heading":"Advantage of Jenkins include At integration stage, build failures are","smartContent":{"content":"<div><!--block-->Advantage of Jenkins include</div><ul><li><!--block-->At integration stage, build failures are cached</li><li><!--block-->For each code commit changes an automatic build report notification generates</li><li><!--block-->To notify developers about build report success or failure, it is integrated with LDAP mail server</li><li><!--block-->Achieves continuous integration agile development and test driven development</li><li><!--block-->With simple steps, maven release project is automated</li><li><!--block-->Easy tracking of bugs at early stage in development environment than production</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":5,"linkedQuestionsId":"07abf72d-8dcd-4e0a-ad15-6596ea6b3783","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.307Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.307Z"},"uniqueId":"0b994ffd-9b90-426c-94aa-fcfb120581c9","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a42a"},"name":"a) centralized file-based configuration - rather then hard-coding information into java programs, many struts values","heading":"a) centralized file-based configuration - rather then hard-coding information into","smartContent":{"content":"<div><!--block--><strong>a) centralized file-based configuration -&nbsp;</strong>rather then hard-coding information into java programs, many struts values are represented in xml or property files. this loose coupling means that many changes can be made without modifying or recompiling java code, and that wholesale changes can be made by editing a single file. this approach also lets java and web developers focus on their specific tasks (implementing business logic, presenting certain values to clients, etc.) without needing to know about the overall system layout.<br><br><strong>b) html tags -&nbsp;</strong>apache struts provides a set of custom jsp tags to create html forms that are associated with javabeans components. this bean/form association serves two useful purposes: it lets you get initial form-field values from java objects. complex application gets alot less complicated with struts&nbsp;<br><br><strong>c) consistent approach -&nbsp;</strong>struts encourages consistent use of mvc throughout application.<br><br><strong>d) integration -&nbsp;</strong>struts provides its own controller component and integrates with other technologies to&nbsp;provide the model and the view. for the model, struts can interact with standard data&nbsp;access technologies, like jdbc and ejb, as well as most any third-party packages, like&nbsp;hibernate, ibatis, or object relational bridge. for the view, struts works well with&nbsp;javaserver pages, including jstl and jsf, as well as velocity templates, xslt, and other&nbsp;presentation systems.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":7,"linkedQuestionsId":"ec7f440d-c70a-404e-91ed-731d7e188c6c","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.342Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.342Z"},"uniqueId":"d9483ee3-bb20-4822-8844-f1ba2f570f0f","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a475"},"name":"Struts2 is designed to overcome the shortcomings of Struts1 and to make it more flexible,","heading":"Struts2 is designed to overcome the shortcomings of Struts1 and","smartContent":{"content":"<div><!--block-->Struts2 is designed to overcome the shortcomings of Struts1 and to make it more flexible, extendable. Some of the noticeable differences are:<br><br><strong>COMPONENTSSTRUTS1STRUTS2</strong><br>Action Classes | Struts1 action classes are forced to extend an Abstract Class that makes it not extendable. | Struts2 action classes flexible and we can create them by implementing Action interface, extending ActionSupport class or just by having execute() method.<br>Thread Safety | Struts1 Action Classes are Singleton and not thread safe, that makes extra care on developer side to avoid any side effects because of multithreading. | Struts2 action classes gets instantiated per request, so there is no multithreading and makes them thread safe.<br>Servlet API coupling | Struts1 APIs are tightly coupled with Servlet API and Request and Response objects are passed to action classes execute() method. | Struts2 API is loosely coupled with Servlet API and automatically maps the form bean data to action class java bean properties that we mostly use. If however we need reference to Servlet API classes, there are *Aware interfaces for that.<br>Testing | Struts1 action classes are hard to test because of Servlet API coupling. | Struts2 Action classes are like normal java classes and we can test them easily by instantiating them and setting their properties.<br>Request Parameters mapping | Struts1 requires us to create ActionForm classes to hold request params and we need to configure it in the struts configuration file. | Struts2 request params mapping is done on the fly and all we need is to have java bean properties in action classes or implement ModelDriven interface to provide the java bean class name to be used for mapping.<br>Tag Support | Struts1 uses JSTL Tags and hence are limited. | Struts2 uses OGNL and provide different kinds of UI, Control and Data Tags. It’s more versatile and easy to use.<br>Validation | Struts1 supports validation through manual validate() method | Struts2 support both manual validation as well as Validation framework integration.<br>Views Rendering | Struts1 uses standard JSP technology for providing bean values to JSP pages for views. | Struts2 uses ValueStack to store request params and attributes and we can use OGNL and Struts2 tags to access them.<br>Modules support | Struts1 modules are complex to design and looks like separate projects | Struts2 provides “namespace” configuration for packages to easily create modules.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"304af75c-ddad-4a3f-bfab-2c8db54a8316","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.355Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.355Z"},"uniqueId":"7cfa6e17-ce56-427b-af39-c9e7cbc97311","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a477"},"name":"Struts2 is designed to overcome the shortcomings of Struts1 and to make it more flexible,","heading":"Struts2 is designed to overcome the shortcomings of Struts1 and","smartContent":{"content":"<div><!--block-->Struts2 is designed to overcome the shortcomings of Struts1 and to make it more flexible, extendable. Some of the noticeable differences are:<br><br><strong>COMPONENTSSTRUTS1STRUTS2</strong><br>Action Classes | Struts1 action classes are forced to extend an Abstract Class that makes it not extendable. | Struts2 action classes flexible and we can create them by implementing Action interface, extending ActionSupport class or just by having execute() method.<br>Thread Safety | Struts1 Action Classes are Singleton and not thread safe, that makes extra care on developer side to avoid any side effects because of multithreading. | Struts2 action classes gets instantiated per request, so there is no multithreading and makes them thread safe.<br>Servlet API coupling | Struts1 APIs are tightly coupled with Servlet API and Request and Response objects are passed to action classes execute() method. | Struts2 API is loosely coupled with Servlet API and automatically maps the form bean data to action class java bean properties that we mostly use. If however we need reference to Servlet API classes, there are *Aware interfaces for that.<br>Testing | Struts1 action classes are hard to test because of Servlet API coupling. | Struts2 Action classes are like normal java classes and we can test them easily by instantiating them and setting their properties.<br>Request Parameters mapping | Struts1 requires us to create ActionForm classes to hold request params and we need to configure it in the struts configuration file. | Struts2 request params mapping is done on the fly and all we need is to have java bean properties in action classes or implement ModelDriven interface to provide the java bean class name to be used for mapping.<br>Tag Support | Struts1 uses JSTL Tags and hence are limited. | Struts2 uses OGNL and provide different kinds of UI, Control and Data Tags. It’s more versatile and easy to use.<br>Validation | Struts1 supports validation through manual validate() method | Struts2 support both manual validation as well as Validation framework integration.<br>Views Rendering | Struts1 uses standard JSP technology for providing bean values to JSP pages for views. | Struts2 uses ValueStack to store request params and attributes and we can use OGNL and Struts2 tags to access them.<br>Modules support | Struts1 modules are complex to design and looks like separate projects | Struts2 provides “namespace” configuration for packages to easily create modules.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"304af75c-ddad-4a3f-bfab-2c8db54a8316","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.36Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.36Z"},"uniqueId":"22e3372a-0420-4a6c-8e9f-6c6c8571a203","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a4c2"},"name":"Apache Struts2 is an open source framework to build web applications in Java. Struts2 is","heading":"Apache Struts2 is an open source framework to build web","smartContent":{"content":"<div><!--block--><strong>Apache Struts2</strong>&nbsp;is an open source framework to build web applications in Java. Struts2 is based on&nbsp;<strong>OpenSymphony WebWork</strong>&nbsp;framework. It’s highly improved from Struts1 and that makes it more flexible, easy to use and extend. The core components of Struts2 are Action, Interceptors and Result pages.<br><br></div><div><!--block-->Struts2 provides many ways to create Action classes and configure them via struts.xml or through annotations. We can create our own interceptors for common tasks. Struts2 comes with a lot of tags and uses OGNL expression language. We can create our own type converters to render result pages. Result pages can be JSPs and FreeMarker templates.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6beae0c7-f798-414f-a817-f4603b02ad76","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.376Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.376Z"},"uniqueId":"70d1ada4-560a-4a16-8133-04db3eccde63","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a50d"},"name":"Struts2 core components are: Action Classes Interceptors Result Pages, JSP of FreeMarker templates ValueStack, OGNL","heading":"Struts2 core components are: Action Classes Interceptors Result Pages, JSP","smartContent":{"content":"<div><!--block-->Struts2 core components are:<br><br></div><ol><li><!--block-->Action Classes</li><li><!--block-->Interceptors</li><li><!--block-->Result Pages, JSP of FreeMarker templates</li><li><!--block-->ValueStack, OGNL and Tag Libraries</li></ol><div><!--block--><a href=\"https://cdn.journaldev.com/wp-content/uploads/2013/09/Struts-2-Architecture-Diagram.png\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:251,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2013/09/Struts-2-Architecture-Diagram-450x251.png&quot;,&quot;width&quot;:450}\" data-trix-content-type=\"image\" data-trix-id=\"18748\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2013/09/Struts-2-Architecture-Diagram-450x251.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/18748/18749/https://cdn.journaldev.com/wp-content/uploads/2013/09/Struts-2-Architecture-Diagram-450x251.png\" width=\"450\" height=\"251\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1a1e9583-4e30-49b6-a553-b9eafd842148","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.393Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.393Z"},"uniqueId":"6dbb4775-6058-4caf-a8ab-2d2ce003ce13","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a558"},"name":"Interceptors are the backbone of Struts2 Framework. Struts2 interceptors are responsible for most of the","heading":"Interceptors are the backbone of Struts2 Framework. Struts2 interceptors are","smartContent":{"content":"<div><!--block-->Interceptors are the backbone of Struts2 Framework. Struts2 interceptors are responsible for most of the processing done by the framework, such as passing request params to action classes, making Servlet API request, response, session available to Action classes, validation, i18n support, etc.<br><br></div><div><!--block-->ActionInvocation is responsible to incapsulate Action classes and interceptors and to fire them in order. The most important method for use in ActionInvocation is invoke() method that keeps track of the interceptor chain and invokes the next interceptor or action. This is one of the best example of Chain of Responsibility pattern in Java EE frameworks.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1f4a1339-b54b-4c04-9e3b-6937ad1f7108","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.405Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.405Z"},"uniqueId":"9d07e166-f591-4b4e-9e29-7e41bd1bd450","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a5a3"},"name":"Struts2 interceptors are based on intercepting filters design pattern. The invocation of interceptors in interceptor","heading":"Struts2 interceptors are based on intercepting filters design pattern. The","smartContent":{"content":"<div><!--block-->Struts2 interceptors are based on intercepting filters design pattern. The invocation of interceptors in interceptor stack closely resembles Chain of Responsibility design pattern.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"974a59cf-a23d-4785-9f1d-d6bed56824e9","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.427Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.427Z"},"uniqueId":"67fd7eba-5504-412a-9f19-82e7e48978f1","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a5ee"},"name":"Struts2 provide different ways to create action classes. By implementing Action interface Using Struts2 @Action","heading":"Struts2 provide different ways to create action classes. By implementing","smartContent":{"content":"<div><!--block-->Struts2 provide different ways to create action classes.</div><ol><li><!--block-->By implementing Action interface</li><li><!--block-->Using Struts2 @Action annotation</li><li><!--block-->By extending ActionSupport class</li><li><!--block-->Any normal java class with execute() method returning String can be configured as Action class.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d0dcb8e4-f998-4977-805f-a13798c83d7f","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.448Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.448Z"},"uniqueId":"60310bc8-b1a4-49e7-aed9-256067488f48","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a639"},"name":"Struts2 Action classes are thread safe because an object is instantiated for every request to","heading":"Struts2 Action classes are thread safe because an object is","smartContent":{"content":"<div><!--block-->Struts2 Action classes are thread safe because an object is instantiated for every request to handle it.<br><br></div><div><!--block-->Struts2 interceptors are singleton classes and a new thread is created to handle the request, so it’s not thread safe and we need to implement them carefully to avoid any issues with shared data.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"93dd1cc3-a0db-4547-b96c-6dad0551ac51","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.469Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.469Z"},"uniqueId":"3b7cdce3-f197-48dd-b688-17981d44affe","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a684"},"name":"org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter is the Front Controller class in Struts2 and every request processing starts from this","heading":"org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter is the Front Controller class in Struts2 and every","smartContent":{"content":"<div><!--block-->org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter is the Front Controller class in Struts2 and every request processing starts from this class. Earlier versions of Struts2 uses org.apache.struts2.dispatcher.FilterDispatcher as Front Controller class.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fc9de1c6-7330-43df-a554-fff4fd6cf732","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.488Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.488Z"},"uniqueId":"759c6218-878e-494e-ae70-6bf3989fd4bf","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a6cf"},"name":"Some of the benefits of interceptors are: Interceptor plays a crucial role in achieving high","heading":"Some of the benefits of interceptors are: Interceptor plays a","smartContent":{"content":"<div><!--block-->Some of the benefits of interceptors are:</div><ul><li><!--block-->Interceptor plays a crucial role in achieving high level of separation of concerns.</li><li><!--block-->Struts2 interceptors are configurable, we can configure it for any action we want.</li><li><!--block-->We can create our own custom interceptors to perform some common tasks such as request params logging, authentication etc. This helps us in taking care of common tasks at a single location, achieving low maintenance cost.</li><li><!--block-->We can create interceptors stack to use with different actions.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a1ce9885-3e29-483c-a6a7-f0d2c5e79292","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.505Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.505Z"},"uniqueId":"eee8494f-0a33-4e3c-aa28-1502e5e45e0c","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a71a"},"name":"ValueStack is the storage area where the application data is stored by Struts2 for processing","heading":"ValueStack is the storage area where the application data is","smartContent":{"content":"<div><!--block-->ValueStack is the storage area where the application data is stored by Struts2 for processing the client requests. The data is stored in ActionContext objects that use ThreadLocal to have values specific to the particular request thread.<br><br></div><div><!--block-->Object-Graph Navigation Language (OGNL) is a powerful Expression Language that is used to manipulate data stored on the ValueStack. As you can see in architecture diagram, both interceptors and result pages can access data stored on ValueStack using OGNL.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dfef3513-1a1d-4462-a324-e3ae3bbbd069","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.522Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.522Z"},"uniqueId":"dd337b1e-9d2c-478e-b2ca-228cafe3d079","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a765"},"name":"Some of the important annotations introduced in Struts2 are: @Action to create action class @Actions","heading":"Some of the important annotations introduced in Struts2 are: @Action","smartContent":{"content":"<div><!--block-->Some of the important annotations introduced in Struts2 are:</div><ol><li><!--block-->@Action to create action class</li><li><!--block-->@Actions to configure single class for multiple actions</li><li><!--block-->@Namespace and @Namespaces for creating different modules</li><li><!--block-->@Result for result pages</li><li><!--block-->@ResultPath for configuring result pages location</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c7ae28a2-5f9b-4424-8a55-4a9d0ea337bf","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.54Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.54Z"},"uniqueId":"7ad0268c-1978-4688-945e-211f3241325a","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a7b0"},"name":"Some of the Struts2 constants that I have used are: struts.devMode to run our application","heading":"Some of the Struts2 constants that I have used are:","smartContent":{"content":"<div><!--block-->Some of the Struts2 constants that I have used are:</div><ol><li><!--block--><strong>struts.devMode</strong>&nbsp;to run our application in development mode. This mode does reload properties files and provides extra logging and debugging feature. It’s very useful while developing our application but we should turn it off while moving our code to production.</li><li><!--block--><strong>struts.convention.result.path</strong>&nbsp;to configure the location of result pages. By default Struts2 look for result pages at {WEBAPP-ROOT}/{Namespace}/ and we can change the location with this constant.</li><li><!--block--><strong>struts.custom.i18n.resources</strong>&nbsp;to define global resource bundle for i18n support.</li><li><!--block--><strong>struts.action.extension</strong>&nbsp;to configure the URL suffix to for Struts2 application. Default suffix is .action but sometimes we might want to change it to .do or something else.</li></ol><div><!--block-->We can configure above constants in struts.xml file like below.</div><div><!--block--><br></div><pre><!--block-->&lt;constant name=\"struts.devMode\" value=\"true\"&gt;&lt;/constant&gt;\n&lt;constant name=\"struts.action.extension\" value=\"action,do\"&gt;&lt;/constant&gt;\n&lt;constant name=\"struts.custom.i18n.resources\" value=\"global\"&gt;&lt;/constant&gt;\n&lt;constant name=\"struts.convention.result.path\" value=\"/\"&gt;&lt;/constant&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c5b1f0d2-2ef8-4f25-97e4-b5893450cccf","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.558Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.558Z"},"uniqueId":"b93b1d5f-1d34-4594-b57b-21e41b648f21","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a7fb"},"name":"Struts2 namespace configuration allows us to create modules easily. We can use namespace to separate","heading":"Struts2 namespace configuration allows us to create modules easily. We","smartContent":{"content":"<div><!--block-->Struts2 namespace configuration allows us to create modules easily. We can use namespace to separate our action classes based on their functionality, for example admin, user, customer etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"470d6f3e-6f15-4e3e-8b08-8e0015cf502f","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.573Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.573Z"},"uniqueId":"b9ee19bd-fdd9-4756-8d08-e551133236ff","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a846"},"name":"com.opensymphony.xwork2.interceptor.ParametersInterceptor interceptor is responsible for mapping request parameters to the Action class java bean properties.","heading":"com.opensymphony.xwork2.interceptor.ParametersInterceptor interceptor is responsible for mapping request parameters to the","smartContent":{"content":"<div><!--block-->com.opensymphony.xwork2.interceptor.ParametersInterceptor interceptor is responsible for mapping request parameters to the Action class java bean properties. This interceptor is configured in struts-default package with name “params”. This interceptor is part of basicStack and defaultStack interceptors stack.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8c61d67b-4b90-45da-a08a-1c94a199ffb1","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.587Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.587Z"},"uniqueId":"83cbd7e7-9f0c-47ba-90b1-365b7db65d93","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a891"},"name":"com.opensymphony.xwork2.interceptor.I18nInterceptor interceptor is responsible for i18n support in Struts2 applications. This interceptor is configured in","heading":"com.opensymphony.xwork2.interceptor.I18nInterceptor interceptor is responsible for i18n support in Struts2 applications.","smartContent":{"content":"<div><!--block-->com.opensymphony.xwork2.interceptor.I18nInterceptor interceptor is responsible for i18n support in Struts2 applications. This interceptor is configured in struts-default package with name “i18n” and it’s part of i18nStack and defaultStack.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"28f32a4a-d238-4f64-b7a4-b24355ac3c87","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.604Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.604Z"},"uniqueId":"3b266aa9-8e0d-4e7d-b044-42372c52e935","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a8dc"},"name":"We can implement Action interface to create our action classes. This interface has a single","heading":"We can implement Action interface to create our action classes.","smartContent":{"content":"<div><!--block-->We can implement Action interface to create our action classes. This interface has a single method execute() that we need to implement. The only benefit of using this interface is that it contains some constants that we can use for result pages, these constants are SUCCESS, ERROR, NONE, INPUT and LOGIN.<br><br></div><div><!--block-->ActionSupport class is the default implementation of Action interface and it also implements interfaces related to Validation and i18n support. ActionSupport class implements Action, Validateable, ValidationAware, TextProvider and LocaleProvider interfaces. We can override validate() method of ActionSupport class to include field level validation login in our action classes.<br><br></div><div><!--block-->Depending on the requirements, we can use any of the approaches to create struts 2 action classes, my favorite is ActionSupport class because it helps in writing validation and i18n logic easily in action classes.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e7b0b295-f237-4691-8e9f-05d626d86499","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.62Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.62Z"},"uniqueId":"b7d70a11-5762-47eb-b9e5-a7c73e77a0b5","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a927"},"name":"Struts2 action classes doesn’t provide direct access to Servlet API components such as Request, Response","heading":"Struts2 action classes doesn’t provide direct access to Servlet API","smartContent":{"content":"<div><!--block-->Struts2 action classes doesn’t provide direct access to Servlet API components such as Request, Response and Session. However sometimes we need these access in action classes such as checking HTTP method or setting cookies in response.<br><br>Thats why Struts2 API provides a bunch of *Aware interfaces that we can implement to access these objects. Struts2 API uses dependency injection to inject Servlet API components in action classes. Some of the important Aware interfaces are SessionAware, ApplicationAware, ServletRequestAware and ServletResponseAware.<br><br>You can read more about them in How to get&nbsp;<a href=\"https://www.journaldev.com/2203/get-servlet-session-request-response-context-attributes-struts-2-action\">Servlet API Session in Struts2 Action Classes</a>&nbsp;tutorial.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c667977c-c4ea-4a17-b81e-199690720bc6","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.637Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.637Z"},"uniqueId":"672388dd-9c24-4887-bb30-cdf9b52acaa7","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a972"},"name":"Struts2 provides execAndWait interceptor for long running action classes. We can use this interceptor to","heading":"Struts2 provides execAndWait interceptor for long running action classes. We","smartContent":{"content":"<div><!--block-->Struts2 provides execAndWait interceptor for long running action classes. We can use this interceptor to return an intermediate response page to the client and once the processing is finished, final response is returned to the client. This interceptor is defined in the struts-default package and implementation is present in ExecuteAndWaitInterceptor class.<br><br></div><div><!--block-->Check out&nbsp;<a href=\"https://www.journaldev.com/2296/struts2-execandwait-interceptor-example-for-long-running-actions\">Struts2 execAndWait interceptor example</a>&nbsp;to learn more about this interceptor and how to use it.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0fa0b5d2-ed2d-462a-8d73-841c2ba6bea2","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.655Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.655Z"},"uniqueId":"d3047c39-23a6-40f3-86d5-e989538026a8","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1a9bd"},"name":"One of the major problems with web applications is the double form submission. If not","heading":"One of the major problems with web applications is the","smartContent":{"content":"<div><!--block-->One of the major problems with web applications is the double form submission. If not taken care, double form submission could result in charging double amount to customer or updating database values twice. We can use token interceptor to solve the double form submission problem. This interceptor is defined in struts-default package but it’s not part of any interceptor stack, so we need to include it manually in our action classes.<br><br></div><div><!--block-->Read more at&nbsp;<a href=\"https://www.journaldev.com/2281/struts2-token-interceptor-example\">Struts2 token interceptor</a>&nbsp;example.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ac1d1a2a-ce0b-40d8-8774-1792b0e8fd90","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.675Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.675Z"},"uniqueId":"60f7f305-2742-4e59-ac06-2820693958c5","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1aa08"},"name":"Struts2 provides easy integration of log4j API for logging purpose, all we need to have","heading":"Struts2 provides easy integration of log4j API for logging purpose,","smartContent":{"content":"<div><!--block-->Struts2 provides easy integration of log4j API for logging purpose, all we need to have is log4j configuration file in the WEB-INF/classes directory.<br><br></div><div><!--block-->You can check out the sample project at&nbsp;<a href=\"https://www.journaldev.com/2247/struts2-and-log4j-integration-example-project\">Struts2 Log4j integration</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"92bd742f-fafb-4e28-b7f5-441d309fd6ae","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.692Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.692Z"},"uniqueId":"51928710-0772-4a66-a087-370bdd9733b1","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1aa53"},"name":"Struts2 provides easy integration of log4j API for logging purpose, all we need to have","heading":"Struts2 provides easy integration of log4j API for logging purpose,","smartContent":{"content":"<div><!--block-->Struts2 provides easy integration of log4j API for logging purpose, all we need to have is log4j configuration file in the WEB-INF/classes directory.<br><br></div><div><!--block-->You can check out the sample project at&nbsp;<a href=\"https://www.journaldev.com/2247/struts2-and-log4j-integration-example-project\">Struts2 Log4j integration</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"32cbed32-0113-4a2b-8361-a33d1c04d3a9","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.71Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.71Z"},"uniqueId":"6fb3b8a7-6885-4b95-8bfc-0fa499badf57","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1aa9e"},"name":"Struts2 provides a lot of custom tags that we can use in result pages to","heading":"Struts2 provides a lot of custom tags that we can","smartContent":{"content":"<div><!--block-->Struts2 provides a lot of custom tags that we can use in result pages to create views for client request. These tags are broadly divided into three categories- Data tags, Control tags and UI tags.<br><br></div><div><!--block-->We can use these tags by adding these in JSP pages using taglib directive.<br><br></div><pre><!--block-->&lt;%@ taglib uri=\"/struts-tags\" prefix=\"s\" %&gt;</pre><div><!--block-->Some of the important Data tags are property, set, push, bean, action, include, i18n and text tag. Read more at&nbsp;<a href=\"https://www.journaldev.com/2230/struts-2-data-tags-example-tutorial\">Struts2 Data Tags</a>.<br><br></div><div><!--block-->Control tags are used for manipulation and navigation of data from a collection. Some of the important Control tags are if-elseif-else, iterator, append, merge, sort, subset and generator tag. Read more at&nbsp;<a href=\"https://www.journaldev.com/2237/struts-2-control-tags-example-tutorial\">Struts2 Control Tags</a>.<br><br></div><div><!--block-->Struts2 UI tags are used to generate HTML markup language, binding HTML form data to action classes properties, type conversion, validation and i18n support. Some of the important UI tags are form, textfield, password, textarea, checkbox, select, radio and submit tag. Read more about them at&nbsp;<a href=\"https://www.journaldev.com/2266/struts-2-ui-tags-form-checkbox-radio-select-submit\">Struts2 UI Tags</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"64fa25af-111c-4599-a35c-580e15f5da7f","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.725Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.725Z"},"uniqueId":"171797fd-3cd3-4662-be4e-193f05ae3e72","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1aaa0"},"name":"Struts2 provides a lot of custom tags that we can use in result pages to","heading":"Struts2 provides a lot of custom tags that we can","smartContent":{"content":"<div><!--block-->Struts2 provides a lot of custom tags that we can use in result pages to create views for client request. These tags are broadly divided into three categories- Data tags, Control tags and UI tags.<br><br></div><div><!--block-->We can use these tags by adding these in JSP pages using taglib directive.<br><br></div><pre><!--block-->&lt;%@ taglib uri=\"/struts-tags\" prefix=\"s\" %&gt;</pre><div><!--block-->Some of the important Data tags are property, set, push, bean, action, include, i18n and text tag. Read more at&nbsp;<a href=\"https://www.journaldev.com/2230/struts-2-data-tags-example-tutorial\">Struts2 Data Tags</a>.<br><br></div><div><!--block-->Control tags are used for manipulation and navigation of data from a collection. Some of the important Control tags are if-elseif-else, iterator, append, merge, sort, subset and generator tag. Read more at&nbsp;<a href=\"https://www.journaldev.com/2237/struts-2-control-tags-example-tutorial\">Struts2 Control Tags</a>.<br><br></div><div><!--block-->Struts2 UI tags are used to generate HTML markup language, binding HTML form data to action classes properties, type conversion, validation and i18n support. Some of the important UI tags are form, textfield, password, textarea, checkbox, select, radio and submit tag. Read more about them at&nbsp;<a href=\"https://www.journaldev.com/2266/struts-2-ui-tags-form-checkbox-radio-select-submit\">Struts2 UI Tags</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"64fa25af-111c-4599-a35c-580e15f5da7f","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.731Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.731Z"},"uniqueId":"11654ff5-52e5-45a8-bc6a-43b5a3783229","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1aaeb"},"name":"Struts2 support OGNL expression language and it performs two important tasks in Struts 2 –","heading":"Struts2 support OGNL expression language and it performs two important","smartContent":{"content":"<div><!--block-->Struts2 support OGNL expression language and it performs two important tasks in Struts 2 – data transfer and type conversion.<br><br></div><div><!--block-->OGNL is flexible and we can easily extend it to create our own custom converter class. Creating and configuring custom type converter class is very easy, first step is to fix the input format for the custom class. Second step is to implement the converter class. Type converter classes should implement com.opensymphony.xwork2.conversion.TypeConverter interface. Since in web application, we always get the request in form of String and send response in the form of String, Struts 2 API provides a default implementation of TypeConverter interface, StrutsTypeConverter. StrutsTypeConverter contains two abstract methods – convertFromString to convert String to Object and convertToString to convert Object to String.<br><br></div><div><!--block-->For implementation details, read&nbsp;<a href=\"https://www.journaldev.com/2221/struts2-ognl\">Struts2 OGNL Example Tutorial</a>.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3c223691-7fcb-496b-95df-081d4268400e","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.749Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.749Z"},"uniqueId":"c00aa90c-4aeb-4afb-b3b7-b04d25f7e249","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ab36"},"name":"We can implement com.opensymphony.xwork2.interceptor.Interceptor interface to create our own interceptor. Once the interceptor class is","heading":"We can implement com.opensymphony.xwork2.interceptor.Interceptor interface to create our own interceptor.","smartContent":{"content":"<div><!--block-->We can implement com.opensymphony.xwork2.interceptor.Interceptor interface to create our own interceptor. Once the interceptor class is ready, we need to define that in struts.xml package where we want to use it. We can also create interceptor stack with our custom interceptor and defaultStack interceptors. After that we can configure it for action classes where we want to use our interceptor.<br><br></div><div><!--block-->One of the best example of using custom interceptor is to validate session, read more about it at&nbsp;<a href=\"https://www.journaldev.com/2210/struts-2-interceptor-example\">Struts2 Interceptor Tutorial</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f3079a3f-e4f6-4753-ae71-76003736d6ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.766Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.766Z"},"uniqueId":"49b388f7-1f11-4eef-9ce9-199af0359b61","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ab81"},"name":"Interceptor interface defines three methods – init(), destroy() and intercept(). init and destroy are the","heading":"Interceptor interface defines three methods – init(), destroy() and intercept().","smartContent":{"content":"<div><!--block-->Interceptor interface defines three methods – init(), destroy() and intercept(). init and destroy are the life cycle methods of an interceptor. Interceptors are Singleton classes and Struts2 initialize a new thread to handle each request. init() method is called when interceptor instance is created and we can initialize any resources in this method. destroy() method is called when application is shutting down and we can release any resources in this method.<br><br></div><div><!--block-->intercept() is the method called every time client request comes through the interceptor.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2c11a266-6472-4a19-95af-817d378fa5d7","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.782Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.782Z"},"uniqueId":"a1100185-34bf-4fbf-9b71-6708ea05231d","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ab83"},"name":"Interceptor interface defines three methods – init(), destroy() and intercept(). init and destroy are the","heading":"Interceptor interface defines three methods – init(), destroy() and intercept().","smartContent":{"content":"<div><!--block-->Interceptor interface defines three methods – init(), destroy() and intercept(). init and destroy are the life cycle methods of an interceptor. Interceptors are Singleton classes and Struts2 initialize a new thread to handle each request. init() method is called when interceptor instance is created and we can initialize any resources in this method. destroy() method is called when application is shutting down and we can release any resources in this method.<br><br></div><div><!--block-->intercept() is the method called every time client request comes through the interceptor.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2c11a266-6472-4a19-95af-817d378fa5d7","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.789Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.789Z"},"uniqueId":"a8739a6f-aea7-4b7f-9423-4e7eec0a3314","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1abce"},"name":"An interceptor stack helps us to group together multiple interceptors in a package for further","heading":"An interceptor stack helps us to group together multiple interceptors","smartContent":{"content":"<div><!--block-->An interceptor stack helps us to group together multiple interceptors in a package for further use. struts-default package creates some of the mostly used interceptor stack – basicStack and defaultStack. We can create our own interceptor stack at the start of the package and then configure our action classes to use it.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ec11277-6f71-412e-ae9e-9ebb219d0ffe","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.814Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.814Z"},"uniqueId":"27dd0f1b-5439-4842-bf9c-f4f31de4fa92","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ac19"},"name":"struts-default is an abstract package that defines all the Struts2 interceptors and commonly used interceptor","heading":"struts-default is an abstract package that defines all the Struts2","smartContent":{"content":"<div><!--block-->struts-default is an abstract package that defines all the Struts2 interceptors and commonly used interceptor stack. It is advisable to extend this package while configuring our application package to avoid configuring interceptors again. This is provided to help developers by eliminating the trivial task of configuring interceptor and result pages in our application.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3521114a-0fe8-4675-895e-44dd0999161e","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.837Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.837Z"},"uniqueId":"0ea4e17f-90f0-4a01-b5d8-f0a44ddb8f7d","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ac64"},"name":"The default URI suffix for Struts2 action is .action, in Struts1 default suffix was .do.","heading":"The default URI suffix for Struts2 action is .action, in","smartContent":{"content":"<div><!--block-->The default URI suffix for Struts2 action is .action, in Struts1 default suffix was .do. We can change this suffix by defining struts.action.extension constant value in our Struts2 configuration file as:<br><br></div><pre><!--block-->&lt;constant name=\"struts.action.extension\" value=\"action,do\"&gt;&lt;/constant&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1063b27b-5dd3-4f4f-88bf-28e9f9df6bda","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.859Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.859Z"},"uniqueId":"bea08dc4-d398-42cb-862b-e8e57a18c386","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1acaf"},"name":"By default Struts2 looks for result pages in {WEBAPP-ROOT}/{Namespace}/ directory but sometimes we want to","heading":"By default Struts2 looks for result pages in {WEBAPP-ROOT}/{Namespace}/ directory","smartContent":{"content":"<div><!--block-->By default Struts2 looks for result pages in {WEBAPP-ROOT}/{Namespace}/ directory but sometimes we want to keep result pages in another location, we can provide struts.convention.result.path constant value in Struts2 configuration file to change the result pages location.<br><br></div><div><!--block-->Another way is to use @ResultPath annotation in action classes to provide the result pages location.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"94e7dabf-688e-4e53-81c4-f8ea59415255","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.879Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.879Z"},"uniqueId":"ce8d3700-eb5c-4cff-80b9-d091dfb26f88","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1acfa"},"name":"File Upload is one of the common task in a web application. Thats why Struts2","heading":"File Upload is one of the common task in a","smartContent":{"content":"<div><!--block-->File Upload is one of the common task in a web application. Thats why Struts2 provides built in support for file upload through FileUploadInterceptor. This interceptor is configured in struts-default package and provide options to set the maximum size of a file and file types that can be uploaded to the server.<br><br></div><div><!--block-->Read more about FileUpload interceptor at&nbsp;<a href=\"https://www.journaldev.com/2192/struts-2-file-upload-example\">Struts2 File Upload Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"17de1550-c669-4480-90e5-5039bbecb246","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.899Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.899Z"},"uniqueId":"d5f53564-1b71-40cd-a682-37fd34ea779b","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ad45"},"name":"Some of the best practices while developing Struts2 application are: Always try to extend struts-default","heading":"Some of the best practices while developing Struts2 application are:","smartContent":{"content":"<div><!--block-->Some of the best practices while developing Struts2 application are:<br><br></div><ol><li><!--block-->Always try to extend struts-default package while creating your package to avoid code redundancy in configuring interceptors.</li><li><!--block-->For common tasks across the application, such as logging request params, try to use interceptors.</li><li><!--block-->Always keep action classes java bean properties in a separate bean for code reuse and implement ModelDriven interface.</li><li><!--block-->If you have custom interceptor that you will use in multiple actions, create interceptor stack for that and then use it.</li><li><!--block-->Try to divide your application in different modules with namespace configuration based on functional areas.</li><li><!--block-->Try to use Struts2 tags in result pages for code clarify, if needed create your own type converters.</li><li><!--block-->Use development mode for faster development, however make sure production code doesn’t run in dev mode.</li><li><!--block-->Use Struts2 i18n support for resource bundles and to support localization.</li><li><!--block-->Struts2 provides a lot of places where you can have resource bundles but try to keep one global resource bundle and one for action class to avoid confusion.</li><li><!--block-->struts-default package configures all the interceptors and creates different interceptor stacks. Try to use only what is needed, for example if you don’t have localization requirement, you can avoid i18n interceptor.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3b0fa817-ae82-4a0c-ae24-2f2f99486b9a","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.922Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.922Z"},"uniqueId":"9ba01bed-b900-4e82-9033-4b9b3c869e4d","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ad90"},"name":"Struts2 provides a very robust framework for exception handling. We can specify global results in","heading":"Struts2 provides a very robust framework for exception handling. We","smartContent":{"content":"<div><!--block-->Struts2 provides a very robust framework for exception handling. We can specify global results in packages and then map specific exceptions to these result pages. The exception mapping can be done at the global package level as well as action level.<br><br></div><div><!--block-->It’s a good idea to have exception result pages to provide some information to user when some unexpected exception occurs that is not processed by the application. Sample configuration in struts.xml file looks like below.<br><br></div><pre><!--block-->&lt;package name=\"user\" namespace=\"/\" extends=\"struts-default\"&gt;\n \n&lt;global-results&gt;\n    &lt;result name=\"exception\"&gt;/exception.jsp&lt;/result&gt;\n    &lt;result name=\"runtime_exception\"&gt;/runtime_exception.jsp&lt;/result&gt;\n    &lt;result name=\"error\"&gt;/error.jsp&lt;/result&gt;\n&lt;/global-results&gt;\n \n&lt;global-exception-mappings&gt;\n    &lt;exception-mapping exception=\"java.lang.Exception\" result=\"exception\"&gt;&lt;/exception-mapping&gt;\n    &lt;exception-mapping exception=\"java.lang.Error\" result=\"error\"&gt;&lt;/exception-mapping&gt;\n    &lt;exception-mapping exception=\"java.lang.RuntimeException\" result=\"runtime_exception\"&gt;&lt;/exception-mapping&gt;\n&lt;/global-exception-mappings&gt;\n \n    &lt;action name=\"myaction\" class=\"com.journaldev.struts2.exception.MyAction\"&gt;\n    &lt;/action&gt;\n    &lt;action name=\"myspecialaction\" class=\"com.journaldev.struts2.exception.MySpecialAction\"&gt;\n    &lt;exception-mapping exception=\"java.io.IOException\" result=\"login\"&gt;&lt;/exception-mapping&gt;\n    &lt;result name=\"login\"&gt;/error.jsp&lt;/result&gt;\n    &lt;/action&gt;\n&lt;/package&gt;</pre><div><!--block--><br>Read more at&nbsp;<a href=\"https://www.journaldev.com/2421/struts2-exception-handling-example-tutorial\">Struts2 Exception Handling Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"962bbadb-5b12-404e-a163-0691b15d5865","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.943Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.943Z"},"uniqueId":"44c2c5c8-757d-4070-a417-a92d9b21e1f0","__v":0}
{"_id":{"$oid":"668ef19259d6bcc528b1ae0c"},"name":"Making a class Serializable in Java is very easy, Your Java class just needs to","heading":"Making a class Serializable in Java is very easy, Your","smartContent":{"content":"<div><!--block-->Making a class Serializable in Java is very easy, Your Java class just needs to implements java.io.Serializable<br>interface and JVM will take care of serializing object in default format. Decision to making a Class Serializable should be<br>taken concisely because though near term cost of making a Class Serializable is low, long term cost is substantial and it<br>can potentially limit your ability to further modify and change its implementation because like any public API, serialized<br>form of an object becomes part of public API and when you change structure of your class by implementing addition<br>interface, adding or removing any field can potentially break default serialization, this can be minimized by using a custom<br>binary format but still requires lot of effort to ensure backward compatibility. One example of How Serialization can put<br>constraints on your ability to change class is SerialVersionUID. If you don't explicitly declare SerialVersionUIDthen<br>JVM generates its based upon structure of class which depends upon interfaces a class implements and several other<br>factors which is subject to change. Suppose you implement another interface than JVM will generate a different<br>SerialVersionUIDfor new version of class files and when you try to load old object object serialized by old version of<br>your program you will get InvalidClassException.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"328ca1a3-ad9b-4136-8b09-86e238c331d2","order":0,"createdDate":{"$date":"2024-07-10T20:39:46.989Z"},"updatedDate":{"$date":"2024-07-10T20:39:46.989Z"},"uniqueId":"f4b71a4e-844d-432c-8b93-d90e2d77d4c2","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ae2d"},"name":"This is most frequently asked question in Java serialization interview. Here is my version Externalizable","heading":"This is most frequently asked question in Java serialization interview.","smartContent":{"content":"<div><!--block-->This is most frequently asked question in Java serialization interview. Here is my version Externalizable provides us&nbsp;writeExternal()and readExternal()method which gives us flexibility to control java serialization mechanism&nbsp;instead of relying on Java's default serialization. Correct implementation of Externalizableinterface can improve&nbsp;performance of application drastically</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"136206c2-33e5-4a48-8620-c31d7e9b7066","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.005Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.005Z"},"uniqueId":"d8053941-70cd-4e6a-8802-224d680bece6","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ae4e"},"name":"Serializable interface exists in java.iopackage and forms core of java serialization mechanism. It doesn't have","heading":"Serializable interface exists in java.iopackage and forms core of java","smartContent":{"content":"<div><!--block-->Serializable interface exists in java.iopackage and forms core of java serialization mechanism. It doesn't have any&nbsp;method and also called Marker Interface in Java. When your class implements java.io.Serializableinterface it&nbsp;becomes Serializable in Java and gives compiler an indication that use Java Serialization mechanism to serialize this&nbsp;object.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"43af4558-a0f6-4aa8-a052-c9ec6aa54eff","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.021Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.021Z"},"uniqueId":"91b4d35f-2b31-4cd2-bdb1-d444028ca3de","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ae6f"},"name":"One of my favorite question interview question on Java serialization.SerialVersionUIDis an ID which is stamped","heading":"One of my favorite question interview question on Java serialization.SerialVersionUIDis","smartContent":{"content":"<div><!--block-->One of my favorite question interview question on Java serialization.SerialVersionUIDis an ID which is stamped on<br>object when it get serialized usually hashcode of object, you can use tool serialver to see serialVersionUIDof a<br>serialized object . SerialVersionUIDis used for version control of object. you can specifyserialVersionUIDin your<br>class file also. Consequence of not specifying serialVersionUIDis that when you add or modify any field in class then<br>already serialized class will not be able to recover because serialVersionUIDgenerated for new class and for old<br>serialized object will be different. Java serialization process relies on correct serialVersionUID for recovering state of<br>serialized object and throws java.io.InvalidClassExceptionin case of serialVersionUID mismatch.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2a675d90-a780-4ffc-935d-f3fa203711e9","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.039Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.039Z"},"uniqueId":"48aa5bb8-8c86-482f-ac98-0728b83c000b","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ae90"},"name":"Another frequently asked Serialization interview question. This is sometime also asked as what is the","heading":"Another frequently asked Serialization interview question. This is sometime also","smartContent":{"content":"<div><!--block-->Another frequently asked Serialization interview question. This is sometime also asked as what is the use of transient&nbsp;variable, does transient and static variable gets serialized or not etc. so if you don't want any field to be part of object's&nbsp;state then declare it either static or transient based on your need and it will not be included during Java serialization&nbsp;process.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f60ba979-064c-44bd-b773-04bb25dfab18","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.058Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.058Z"},"uniqueId":"a5c2ba78-3325-4854-a7ac-a94e6f1033de","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1aeb1"},"name":"One of the easy question about Serialization process in Java. If you try to serialize","heading":"One of the easy question about Serialization process in Java.","smartContent":{"content":"<div><!--block-->One of the easy question about Serialization process in Java. If you try to serialize an object of a class which implements&nbsp;Serializable, but the object includes a reference to an non- Serializable class then a ‘NotSerializableException’&nbsp;will be thrown at runtime and this is why I always put a SerializableAlert(comment section in my code) , one of the&nbsp;code comment best practices, to instruct developer to remember this fact while adding a new field in a Serializable&nbsp;class.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"eb5b098a-5e32-4f7e-80bd-e59fe027b296","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.076Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.076Z"},"uniqueId":"dd1db5b7-d171-43ba-ad22-7d1e49fbcccf","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1aed2"},"name":"Java serialization process only continues in object hierarchy till the class is Serializable i.e. implements","heading":"Java serialization process only continues in object hierarchy till the","smartContent":{"content":"<div><!--block-->Java serialization process only continues in object hierarchy till the class is Serializable i.e. implements&nbsp;Serializable interface in Java and values of the instance variables inherited from super class will be initialized by<br>calling constructor of Non-Serializable Super class during deserialization process. Once the constructor chaining will<br>started it wouldn't be possible to stop that , hence even if classes higher in hierarchy implements Serializable<br>interface , there constructor will be executed. As you see from the statement this Serialization interview question looks&nbsp;very tricky and tough but if you are familiar with key concepts its not that difficult</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f0d636dd-c63d-43dd-9276-10e877cc7e93","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.093Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.093Z"},"uniqueId":"2a34ddfd-8349-4fbe-95bb-15c4006d1709","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1aef3"},"name":"The answer is yes you can. We all know that for serializing an object ObjectOutputStream.writeObject","heading":"The answer is yes you can. We all know that","smartContent":{"content":"<div><!--block-->The answer is yes you can. We all know that for serializing an object ObjectOutputStream.writeObject<br>(saveThisobject)is invokedand for reading object ObjectInputStream.readObject()is invoked but there is<br>one more thing which Java VirtualMachineprovides you is to define these two method in your class. If you define<br>these two methods in your class then JVMwill invoke these two methods instead of applying default serialization<br>mechanism. You can customize behavior of object serialization and deserialization here by doing any kind of pre or post<br>processing task. Important point to note is making these methods private to avoid being inherited, overridden or<br>overloaded. Since only Java Virtual Machine can call private method integrity of your class will remain and Java<br>Serialization will work as normal. In my opinion this is one of the best question one can ask in any Java Serialization<br>interview, a good follow-up question is why should you provide custom serialized form for your object?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2e8ebd5d-1f91-40cc-aa0c-b147e0d96713","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.109Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.109Z"},"uniqueId":"ef6cb1a9-6366-4cb2-aa54-28895a508f64","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1af14"},"name":"One of the tricky interview question in Serializationin Java. If Super Class of a Class","heading":"One of the tricky interview question in Serializationin Java. If","smartContent":{"content":"<div><!--block-->One of the tricky interview question in Serializationin Java. If Super Class of a Class already implements<br>Serializableinterface in Java then its alreadySerializablein Java, since you can not unimplemented an interface<br>its not really possible to make it Non Serializableclass but yes there is a way to avoid serialization of new class. To<br>avoid java serialization you need to implement writeObject()and readObject()method in your Class and need to<br>throw NotSerializableExceptionfrom those method. This is another benefit of customizing java serialization<br>process as described in above Serialization interview question and normally it asked as follow-up question as interview<br>progresses</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"47a3c59c-1973-4f85-ae82-49f01e0fae75","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.125Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.125Z"},"uniqueId":"65265928-49f1-4d52-a40a-ac64721f12c5","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1af35"},"name":"This is very common interview question in Serializationbasically interviewer is trying to know; Whether you","heading":"This is very common interview question in Serializationbasically interviewer is","smartContent":{"content":"<div><!--block-->This is very common interview question in Serializationbasically interviewer is trying to know; Whether you are familiar with usage of readObject(),writeObject(),readExternal()and writeExternal()or not. Java Serialization is done by java.io.ObjectOutputStream class. That class is a filter stream which is wrapped around a lower-level byte stream to handle the serialization mechanism. To store any object via serialization mechanism we&nbsp; all&nbsp;<em>ObjectOutputStream.writeObject(saveThisobject)&nbsp;</em>and to deserialize that object we all&nbsp;<em>ObjectInputStream.readObject()</em>&nbsp;method. Call to writeObject()method trigger serialization process in java. one important thing to note about readObject()method is that it is used to read bytes from the persistence and to&nbsp; create object from those bytes and its return an Object which needs to be casted on correct type</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"182d9809-2cfb-40d1-b4ba-8d7de5fe4f85","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.14Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.14Z"},"uniqueId":"0488bf4e-b638-44a6-84b8-2dc2b011ed6c","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1af56"},"name":"It depends on whether class has its own serialVersionUIDor not. As we know from above","heading":"It depends on whether class has its own serialVersionUIDor not.","smartContent":{"content":"<div><!--block-->It depends on whether class has its own serialVersionUIDor not. As we know from above question that if we don't<br>provide serialVersionUIDin our code java compiler will generate it and normally it’s equal to hashCode of object. by<br>adding any new field there is chance that new serialVersionUIDgenerated for that class version is not the same of<br>already serialized object and in this case Java Serialization API will throw java.io.InvalidClassExceptionand this is<br>the reason its recommended to have your own serialVersionUIDin code and make sure to keep it same always for a<br>single class.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fb8e7ffa-993f-4296-a121-b3276500242d","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.157Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.157Z"},"uniqueId":"a65aba67-84de-4d0c-8fd8-5cd0b82250b6","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1af77"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Compatible and Incompatible Changes in Java Serialization\n\nWhen working with Java Serialization, one of the challenges arises when you need to modify a class that has already been used to serialize objects. These modifications can be classified as either *compatible* or *incompatible* changes, depending on how they affect the ability to deserialize older versions of serialized objects.\n\n#### **Compatible Changes**\nThese changes allow an object to be deserialized even if the class definition has been modified after the object was serialized. The most common compatible changes include:\n\n1. **Adding New Fields:**\n   - You can safely add new fields to a class. When an old version of the serialized object is deserialized with the new class definition, the new fields will be set to their default values (`null` for objects, `0` for numeric types, `false` for booleans).\n\n2. **Adding New Methods:**\n   - Methods are not part of the serialized form, so adding new methods does not affect serialization compatibility.\n\n3. **Adding Classes to the Hierarchy:**\n   - Adding new classes or interfaces to the inheritance hierarchy (i.e., introducing new subclasses) is generally compatible, provided that the `serialVersionUID` remains consistent.\n\n4. **Changing Access Modifiers:**\n   - Changing the access modifiers of fields or methods (e.g., from `private` to `protected`) typically does not affect serialization.\n\n#### **Incompatible Changes**\nThese changes break serialization compatibility, meaning that an object serialized with the old class definition cannot be deserialized with the new one. Common incompatible changes include:\n\n1. **Removing Fields:**\n   - If you remove a field from a class, and you try to deserialize an object that was serialized with the old class definition (which included the field), the deserialization process will fail.\n\n2. **Changing the Class Hierarchy:**\n   - Altering the inheritance structure, such as changing the superclass or implementing/removing interfaces (especially the `Serializable` interface), can lead to deserialization issues.\n\n3. **Changing the Type of a Field:**\n   - Modifying the data type of a field is incompatible because the serialized form of the object contains data that may not be compatible with the new type.\n\n4. **Changing `serialVersionUID`:**\n   - Changing the `serialVersionUID` of a class can break deserialization. This identifier is used to ensure that the sender and receiver of a serialized object are using compatible class versions. If the `serialVersionUID` does not match during deserialization, a `InvalidClassException` is thrown.\n\n5. **Unimplementing Serializable Interface:**\n   - Removing the `Serializable` interface from a class makes it non-serializable, leading to deserialization failure for previously serialized objects of that class.\n\n### Summary\nWhen evolving a class used in serialization, care must be taken to avoid incompatible changes that would break the ability to deserialize previously serialized objects. By following best practices and understanding the implications of changes, you can ensure that your serialized data remains compatible across versions.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"26b0c5c1-ff1a-463b-9bb1-53c678f3df48","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.174Z"},"updatedDate":{"$date":"2024-08-27T09:26:20.814Z"},"uniqueId":"1c2e7d6f-bf29-4fb7-8887-b8744a485e8e","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1af98"},"name":"Yes you can transfer a Serialized object via network because java serialized object remains in","heading":"Yes you can transfer a Serialized object via network because","smartContent":{"content":"<div><!--block-->Yes you can transfer a Serialized object via network because java serialized object remains in form of bytes which can be<br>transmitter via network. You can also store serialized object in Disk or database as Blob.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a250f666-134a-43a2-9ffa-e3f5922e3ea1","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.19Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.19Z"},"uniqueId":"153c8470-2f92-45cb-93d9-153a75134442","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1afb9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Non-Serialized Variables in Java Serialization\n\nWhen discussing Java Serialization, it's important to understand which types of variables are not serialized. This knowledge is crucial for any Java developer, especially when dealing with object persistence and serialization.\n\n#### **Static Variables**\nStatic variables belong to the class itself rather than any specific instance of the class. Since Java Serialization is concerned with capturing the state of an object (i.e., instance variables), static variables are not included in the serialization process. Consequently, they are not saved when an object is serialized.\n\n- **Key Point:** Static variables are not part of the object's state and are therefore not serialized.\n\n#### **Transient Variables**\nTransient variables are explicitly marked to be excluded from serialization using the `transient` keyword. These variables are not included in the serialized representation of an object. The `transient` keyword is typically used for variables that are sensitive, derived, or do not represent the persistent state of the object.\n\n- **Key Point:** Transient variables are deliberately excluded from the serialized form to avoid saving sensitive or irrelevant data.\n\n#### **Follow-Up Question: Value After Deserialization**\nAfter deserialization, any static variables will retain the current value assigned to them in the class, as they are not serialized. Transient variables, on the other hand, will be reset to their default values (e.g., `null` for object references, `0` for numeric types, `false` for booleans) because they were not included in the serialized data.\n\n- **Static Variable Value:** Retains the value currently held by the class after deserialization.\n- **Transient Variable Value:** Reverts to its default value after deserialization.\n\n### Summary\nDuring Java Serialization, static and transient variables are not serialized. Static variables are class-level properties and are not part of an object's state, while transient variables are explicitly marked to be excluded from serialization. Understanding this behavior is essential for managing the state of serialized objects effectively, especially when dealing with object persistence and data integrity.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"a4597297-9645-431f-89a1-79339d84863c","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.206Z"},"updatedDate":{"$date":"2024-08-27T09:36:27.49Z"},"uniqueId":"c9adfefe-ec69-4f7a-986a-315f0f986d94","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b011"},"name":"A web server responsibility is to handler HTTP requests from client browsers and respond with","heading":"A web server responsibility is to handler HTTP requests from","smartContent":{"content":"<div><!--block-->A web server responsibility is to handler HTTP requests from client browsers and respond with HTML response. A web server understands HTTP language and runs on HTTP protocol.</div><div><!--block-->Apache Web Server is kind of a web server and then we have specific containers that can execute servlets and JSPs known as servlet container, for example Tomcat.</div><div><!--block-->Application Servers provide additional features such as Enterprise JavaBeans support, JMS Messaging support, Transaction Management etc. So we can say that Application server is a web server with additional functionalities to help developers with enterprise applications.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1ae2ca42-c0f5-45c6-97a3-39e9c0149753","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.237Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.237Z"},"uniqueId":"64ebf916-06c1-46d2-b0a4-aa34746180e4","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b04b"},"name":"A HTTP method is said to be idempotent if it returns the same result every","heading":"A HTTP method is said to be idempotent if it","smartContent":{"content":"<div><!--block-->A HTTP method is said to be idempotent if it returns the same result every time. HTTP methods GET, PUT, DELETE, HEAD, and OPTIONS are idempotent method and we should implement our application to make sure these methods always return same result. HTTP method POST is non-idempotent method and we should use post method when implementing something that changes with every request.</div><div><!--block--><br>For example, to access an HTML page or image, we should use GET because it will always return the same object but if we have to save customer information to database, we should use POST method. Idempotent methods are also known as safe methods and we don’t care about the repetitive request from the client for safe methods.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3d5885eb-145f-4330-8d30-e80ba3a41fda","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.256Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.256Z"},"uniqueId":"5fec64fb-ee87-4561-b305-222c4876af05","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b085"},"name":"GET is a safe method (idempotent) where POST is non-idempotent method. We can send limited","heading":"GET is a safe method (idempotent) where POST is non-idempotent","smartContent":{"content":"<ul><li><!--block-->GET is a safe method (idempotent) where POST is non-idempotent method.</li><li><!--block-->We can send limited data with GET method and it’s sent in the header request URL whereas we can send large amount of data with POST because it’s part of the body.</li><li><!--block-->GET method is not secure because data is exposed in the URL and we can easily bookmark it and send similar request again, POST is secure because data is sent in request body and we can’t bookmark it.</li><li><!--block-->GET is the default HTTP method whereas we need to specify method as POST to send request with POST method.</li><li><!--block-->Hyperlinks in a page uses GET method.</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2a33c5cf-7bb3-4e1c-9f2f-98a5d1e129e2","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.273Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.273Z"},"uniqueId":"f603e983-3382-46af-b977-114c96fd9add","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b0bf"},"name":"The “Content-Type” response header is known as MIME Type. Server sends MIME type to client","heading":"The “Content-Type” response header is known as MIME Type. Server","smartContent":{"content":"<div><!--block-->The “Content-Type” response header is known as MIME Type. Server sends MIME type to client to let them know the kind of data it’s sending. It helps client in rendering the data for user. Some of the mostly used mime types are text/html, text/xml, application/xml etc.<br><br>We can use ServletContext getMimeType() method to get the correct MIME type of the file and use it to set the response content type. It’s very useful in downloading file through servlet from server.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4c886d5e-a321-406c-9358-58ff2c44cb00","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.29Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.29Z"},"uniqueId":"71977670-3e8f-4779-b492-25d0bf29c62d","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b0f9"},"name":"Web Applications are modules that run on server to provide both static and dynamic content","heading":"Web Applications are modules that run on server to provide","smartContent":{"content":"<div><!--block-->Web Applications are modules that run on server to provide both static and dynamic content to the client browser. Apache web server supports PHP and we can create web application using PHP. Java provides web application support through Servlets and JSPs that can run in a servlet container and provide dynamic content to client browser.<br><br></div><div><!--block-->Java Web Applications are packaged as Web Archive (WAR) and it has a defined structure like below image.<br><br></div><div><!--block--><a href=\"http://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure.png\">?<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:233,&quot;url&quot;:&quot;http://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure-450x233.png&quot;,&quot;width&quot;:450}\" data-trix-content-type=\"image\" data-trix-id=\"7074\" contenteditable=\"false\"><img src=\"http://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure-450x233.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/7074/7075/http://cdn.journaldev.com/wp-content/uploads/2013/08/WAR-directory-structure-450x233.png\" width=\"450\" height=\"233\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8ea31b62-ca2f-42f3-b2cf-8657672914b1","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.307Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.307Z"},"uniqueId":"9ff4b599-30f2-4b7c-b617-ef020073c331","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b133"},"name":"Java Servlet is server side technologies to extend the capability of web servers by providing","heading":"Java Servlet is server side technologies to extend the capability","smartContent":{"content":"<div><!--block-->Java Servlet is server side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.<br><br></div><div><!--block-->The javax.servlet and javax.servlet.http packages provide interfaces and classes for writing our own servlets.<br>All servlets must implement the javax.servlet.Servlet interface, which defines servlet lifecycle methods. When implementing a generic service, we can extend the GenericServlet class provided with the Java Servlet API. The HttpServlet class provides methods, such as doGet() and doPost(), for handling HTTP-specific services.<br><br></div><div><!--block-->Most of the times, web applications are accessed using HTTP protocol and thats why we mostly extend HttpServlet class. Servlet API hierarchy is shown in below image.<br><br></div><div><!--block--><a href=\"http://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy.png\">?<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:182,&quot;url&quot;:&quot;http://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy-450x182.png&quot;,&quot;width&quot;:450}\" data-trix-content-type=\"image\" data-trix-id=\"7756\" contenteditable=\"false\"><img src=\"http://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy-450x182.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/7756/7757/http://cdn.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy-450x182.png\" width=\"450\" height=\"182\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"95ceccaa-1d6d-4533-9488-e6c934d635eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.324Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.324Z"},"uniqueId":"c0eb28c0-0ee2-4da6-acbd-757f4c197fde","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b16d"},"name":"Servlet technology was introduced to overcome the shortcomings of CGI technology. Servlets provide better performance","heading":"Servlet technology was introduced to overcome the shortcomings of CGI","smartContent":{"content":"<div><!--block-->Servlet technology was introduced to overcome the shortcomings of CGI technology.<br><br></div><ul><li><!--block-->Servlets provide better performance that CGI in terms of processing time, memory utilization because servlets uses benefits of multithreading and for each request a new thread is created, that is faster than loading creating new Object for each request with CGI.</li><li><!--block-->Servlets and platform and system independent, the web application developed with Servlet can be run on any standard web container such as Tomcat, JBoss, Glassfish servers and on operating systems such as Windows, Linux, Unix, Solaris, Mac etc.</li><li><!--block-->Servlets are robust because container takes care of life cycle of servlet and we don’t need to worry about memory leaks, security, garbage collection etc.</li><li><!--block-->Servlets are maintainable and learning curve is small because all we need to take care is business logic for our application.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f65c4468-1e0d-4f5b-9761-47cb85bc98e8","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.344Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.344Z"},"uniqueId":"fe83ace8-eb6e-4031-8f01-d6fabbe0fd08","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b1a7"},"name":"Servlet containers are also known as web container, for example Tomcat. Some of the important","heading":"Servlet containers are also known as web container, for example","smartContent":{"content":"<div><!--block-->Servlet containers are also known as web container, for example Tomcat. Some of the important tasks of servlet container are:<br><br></div><ol><li><!--block--><strong>Communication Support</strong>: Servlet Container provides easy way of communication between web client (Browsers) and the servlets and JSPs. Because of container, we don’t need to build a server socket to listen for any request from web client, parse the request and generate response. All these important and complex tasks are done by container and all we need to focus is on business logic for the applications.</li><li><!--block--><strong>Lifecycle and Resource Management</strong>: Servlet Container takes care of managing the life cycle of servlet. From the loading of servlets into memory, initializing servlets, invoking servlet methods and to destroy them. Container also provides utility like JNDI for resource pooling and management.</li><li><!--block--><strong>Multithreading Support</strong>: Container creates new thread for every request to the servlet and provide them request and response objects to process. So servlets are not initialized for each request and saves time and memory.</li><li><!--block--><strong>JSP Support</strong>: JSPs doesn’t look like normal java classes but every JSP in the application is compiled by container and converted to Servlet and then container manages them like other servlets.</li><li><!--block--><strong>Miscellaneous Task</strong>: Servlet container manages the resource pool, perform memory optimizations, execute garbage collector, provides security configurations, support for multiple applications, hot deployment and several other tasks behind the scene that makes a developer life easier.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5568396f-e5f6-496e-a910-7abefcdf666a","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.368Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.368Z"},"uniqueId":"b5f6a5bc-7234-4fda-b2b8-3da7d595af58","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b1a9"},"name":"What is ServletConfig object?","heading":"What is ServletConfig object?","smartContent":{"content":"<div><!--block--><strong>What is ServletConfig object?</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5568396f-e5f6-496e-a910-7abefcdf666a","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.372Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.372Z"},"uniqueId":"59161090-e7fa-4c70-80b0-ae1c0d81187c","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b1e3"},"name":"javax.servlet.ServletConfig is used to pass configuration information to Servlet. Every servlet has it’s own ServletConfig","heading":"javax.servlet.ServletConfig is used to pass configuration information to Servlet. Every","smartContent":{"content":"<div><!--block-->javax.servlet.ServletConfig is used to pass configuration information to Servlet. Every servlet has it’s own&nbsp;<strong>ServletConfig</strong>&nbsp;object and servlet container is responsible for instantiating this object. We can provide servlet init parameters in web.xml file or through use of WebInitParam annotation. We can use getServletConfig() method to get the ServletConfig object of the servlet.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ed081b8c-064c-4d9a-9871-710187f97a8f","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.388Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.388Z"},"uniqueId":"2082dda6-c6bc-4fdd-9d04-17298336327a","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b21d"},"name":"javax.servlet.ServletContext interface provides access to web application parameters to the servlet. The ServletContext is unique","heading":"javax.servlet.ServletContext interface provides access to web application parameters to the","smartContent":{"content":"<div><!--block-->javax.servlet.ServletContext interface provides access to web application parameters to the servlet. The ServletContext is unique object and available to all the servlets in the web application. When we want some init parameters to be available to multiple or all of the servlets in the web application, we can use ServletContext object and define parameters in web.xml using &lt;context-param&gt; element. We can get the ServletContext object via the&nbsp;<em>getServletContext()</em>&nbsp;method of ServletConfig. Servlet containers may also provide context objects that are unique to a group of servlets and which is tied to a specific portion of the URL path namespace of the host.<br><br></div><div><!--block-->ServletContext is enhanced in Servlet Specs 3 to introduce methods through which we can programmatically add Listeners and Filters and Servlet to the application. It also provides some utility methods such as&nbsp;<em>getMimeType()</em>,&nbsp;<em>getResourceAsStream()</em>&nbsp;etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1a8dd7ca-3bd5-43cb-97fb-212b8b5d9b21","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.405Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.405Z"},"uniqueId":"c7ac9c8a-6d9f-4153-8bfa-6e6429d6a9e2","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b257"},"name":"Some of the differences between ServletConfig and ServletContext are: ServletConfig is a unique object per","heading":"Some of the differences between ServletConfig and ServletContext are: ServletConfig","smartContent":{"content":"<div><!--block-->Some of the differences between ServletConfig and ServletContext are:<br><br></div><ul><li><!--block-->ServletConfig is a unique object per servlet whereas ServletContext is a unique object for complete application.</li><li><!--block-->ServletConfig is used to provide init parameters to the servlet whereas ServletContext is used to provide application level init parameters that all other servlets can use.</li><li><!--block-->We can’t set attributes in ServletConfig object whereas we can set attributes in ServletContext that other servlets can use in their implementation.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"72f5414f-8eb8-4470-a57d-57af0e7f2985","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.422Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.422Z"},"uniqueId":"5183dafe-e2ab-4d88-bd8a-cb565d7d98a1","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b291"},"name":"RequestDispatcher interface is used to forward the request to another resource that can be HTML,","heading":"RequestDispatcher interface is used to forward the request to another","smartContent":{"content":"<div><!--block-->RequestDispatcher interface is used to forward the request to another resource that can be HTML, JSP or another servlet in same application. We can also use this to include the content of another resource to the response. This interface is used for inter-servlet communication in the same context.<br><br></div><div><!--block-->There are two methods defined in this interface:<br><br></div><ol><li><!--block-->void forward(ServletRequest request, ServletResponse response) – forwards the request from a servlet to another resource (servlet, JSP file, or HTML file) on the server.</li><li><!--block-->void include(ServletRequest request, ServletResponse response) – includes the content of a resource (servlet, JSP page, HTML file) in the response.</li></ol><div><!--block-->We can get RequestDispatcher in a servlet using ServletContext getRequestDispatcher(String path) method. The path must begin with a / and is interpreted as relative to the current context root.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5552855d-d606-4f37-83ec-42920c8c3c74","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.443Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.443Z"},"uniqueId":"f4ea60a9-f2e0-4452-933a-9a96cb8e2099","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b2cb"},"name":"PrintWriter is a character-stream class whereas ServletOutputStream is a byte-stream class. We can use PrintWriter","heading":"PrintWriter is a character-stream class whereas ServletOutputStream is a byte-stream","smartContent":{"content":"<div><!--block-->PrintWriter is a character-stream class whereas ServletOutputStream is a byte-stream class. We can use PrintWriter to write character based information such as character array and String to the response whereas we can use ServletOutputStream to write byte array data to the response.<br><br></div><div><!--block-->We can use ServletResponse getWriter() to get the PrintWriter instance whereas we can use ServletResponse getOutputStream() method to get the ServletOutputStream object reference.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8700ffad-e355-4785-90fc-f4151d1fd0cb","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.459Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.459Z"},"uniqueId":"c2c55f6e-ef2f-42be-866e-5bfa9033c840","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b305"},"name":"We can’t get instances of both PrintWriter and ServletOutputStream in a single servlet method, if","heading":"We can’t get instances of both PrintWriter and ServletOutputStream in","smartContent":{"content":"<div><!--block-->We can’t get instances of both PrintWriter and ServletOutputStream in a single servlet method, if we invoke both the methods; getWriter() and getOutputStream() on response; we will getjava.lang.IllegalStateException at runtime with message as other method has already been called for this response.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1d731c6f-c0e4-4550-83ca-ebb68583ae18","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.474Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.474Z"},"uniqueId":"80e6d148-f440-4c88-b1fb-f2aec90b2414","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b33f"},"name":"We can create deadlock in servlet by making a loop of method invocation, just call","heading":"We can create deadlock in servlet by making a loop","smartContent":{"content":"<div><!--block-->We can create deadlock in servlet by making a loop of method invocation, just call doPost() method from doGet() method and doGet() method to doPost() method to create deadlock situation in servlet.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ea8e5571-c021-4241-985b-29bf83e5c5b9","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.491Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.491Z"},"uniqueId":"630302f1-231b-4783-b6bb-64a24f1548ff","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b379"},"name":"Servlet HTTP API provides two wrapper classes – HttpServletRequestWrapper andHttpServletResponseWrapper. These wrapper classes are provided","heading":"Servlet HTTP API provides two wrapper classes – HttpServletRequestWrapper andHttpServletResponseWrapper.","smartContent":{"content":"<div><!--block-->Servlet HTTP API provides two wrapper classes – HttpServletRequestWrapper andHttpServletResponseWrapper. These wrapper classes are provided to help developers with custom implementation of servlet request and response types. We can extend these classes and override only specific methods we need to implement for custom request and response objects. These classes are not used in normal servlet programming.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b2d76061-3145-4e3f-92cd-7105318832fa","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.508Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.508Z"},"uniqueId":"67b55177-692e-4309-ad21-bcc63e2f7956","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b3b3"},"name":"SingleThreadModel interface was provided for thread safety and it guarantees that no two threads will","heading":"SingleThreadModel interface was provided for thread safety and it guarantees","smartContent":{"content":"<div><!--block-->SingleThreadModel interface was provided for thread safety and it guarantees that no two threads will execute concurrently in the servlet’s service method. However SingleThreadModel does not solve all thread safety issues. For example, session attributes and static variables can still be accessed by multiple requests on multiple threads at the same time, even when SingleThreadModel servlets are used. Also it takes out all the benefits of multithreading support of servlets, thats why this interface is Deprecated in Servlet 2.4.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7afc52ed-0d47-4347-93cf-ab8dae799515","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.525Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.525Z"},"uniqueId":"bc619443-ecf5-492c-b87f-18980d735a8f","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b3ed"},"name":"When servlet container receives client request, it invokes the service() method which in turn invokes","heading":"When servlet container receives client request, it invokes the service()","smartContent":{"content":"<div><!--block-->When servlet container receives client request, it invokes the service() method which in turn invokes the doGet(), doPost() methods based on the HTTP method of request. I don’t see any use case where we would like to override service() method. The whole purpose of service() method is to forward to request to corresponding HTTP method implementations. If we have to do some pre-processing of request, we can always use servlet filters and listeners.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d435af3a-ccc5-40e9-919c-64a75267c601","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.544Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.544Z"},"uniqueId":"1a7fe530-7472-49bf-861e-80aa9a6b9bc8","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b427"},"name":"We can define a constructor for servlet but I don’t think its of any use","heading":"We can define a constructor for servlet but I don’t","smartContent":{"content":"<div><!--block-->We can define a constructor for servlet but I don’t think its of any use because we won’t be having access to the ServletConfig object until unless servlet is initialized by container. Ideally if we have to initialize any resource for servlet, we should override init() method where we can access servlet init parameters using ServletConfig object.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e11aa375-f333-4598-b19b-83e14b2c34a1","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.562Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.562Z"},"uniqueId":"c5b4ced5-bf9d-4a57-b93e-c3d624d59ce4","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b461"},"name":"GenericServlet is protocol independent implementation of Servlet interface whereas HttpServlet is HTTP protocol specific implementation.","heading":"GenericServlet is protocol independent implementation of Servlet interface whereas HttpServlet","smartContent":{"content":"<div><!--block-->GenericServlet is protocol independent implementation of Servlet interface whereas HttpServlet is HTTP protocol specific implementation. Most of the times we use servlet for creating web application and that’s why we extend HttpServlet class. HttpServlet class extends GenericServlet and also provide some other methods specific to HTTP protocol.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"90c05094-398e-4491-97cd-3c105eee33c6","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.579Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.579Z"},"uniqueId":"3fa7567b-4bdb-4482-b225-e48a251b38d2","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b49b"},"name":"When we want to invoke another servlet from a servlet service methods, we use inter-servlet","heading":"When we want to invoke another servlet from a servlet","smartContent":{"content":"<div><!--block-->When we want to invoke another servlet from a servlet service methods, we use inter-servlet communication mechanisms. We can invoke another servlet using RequestDispatcher forward() and include() methods and provide additional attributes in request for other servlet use.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9ceba025-f26d-490d-869d-67d65b5814a2","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.596Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.596Z"},"uniqueId":"722c0332-43bc-43b0-9546-b7115653738d","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b4d5"},"name":"HttpServlet init() method and destroy() method are called only once in servlet life cycle, so","heading":"HttpServlet init() method and destroy() method are called only once","smartContent":{"content":"<div><!--block-->HttpServlet init() method and destroy() method are called only once in servlet life cycle, so we don’t need to worry about their synchronization. But service methods such as doGet() or doPost() are getting called in every client request and since servlet uses multithreading, we should provide thread safety in these methods.<br><br>If there are any local variables in service methods, we don’t need to worry about their thread safety because they are specific to each thread but if we have a shared resource then we can use synchronization to achieve thread safety in servlets when working with shared resources.<br><br>The thread safety mechanisms are similar to thread safety in standalone java application, read more about them at<a href=\"http://www.journaldev.com/1061/thread-safety-in-java\">&nbsp;Thread Safety in Java.</a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1e469dd0-1fb4-499a-87d9-1815ae7f23c9","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.612Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.612Z"},"uniqueId":"5b12413b-9668-4727-8adb-007bbe3d9bf1","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b50f"},"name":"Servlet attributes are used for inter-servlet communication, we can set, get and remove attributes in","heading":"Servlet attributes are used for inter-servlet communication, we can set,","smartContent":{"content":"<div><!--block-->Servlet attributes are used for inter-servlet communication, we can set, get and remove attributes in web application. There are three scopes for servlet attributes – request scope, session scope and application scope.<br><br>ServletRequest, HttpSession and ServletContext interfaces provide methods to get/set/remove attributes from request, session and application scope respectively.<br><br>Servlet attributes are different from init parameters defined in web.xml for ServletConfig or ServletContext.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8283a1bb-942c-400b-b3f5-9edc19225aea","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.631Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.631Z"},"uniqueId":"982d0d04-3105-4d8e-8609-27461f6b950e","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b549"},"name":"We can use RequestDispatcher forward() method to forward the processing of a request to another","heading":"We can use RequestDispatcher forward() method to forward the processing","smartContent":{"content":"<div><!--block-->We can use RequestDispatcher forward() method to forward the processing of a request to another servlet. If we want to include the another servlet output to the response, we can use RequestDispatcher include() method.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"02f103a9-4d92-4a2a-9a6f-f0214a09c7de","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.65Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.65Z"},"uniqueId":"d8a37cb9-c21c-4816-9894-dfdb1683d50b","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b583"},"name":"We can’t use RequestDispatcher to invoke servlet from another application because it’s specific for the","heading":"We can’t use RequestDispatcher to invoke servlet from another application","smartContent":{"content":"<div><!--block-->We can’t use RequestDispatcher to invoke servlet from another application because it’s specific for the application. If we have to forward the request to a resource in another application, we can use ServletResponse sendRedirect() method and provide complete URL of another servlet. This sends the response to client with response code as 302 to forward the request to another URL. If we have to send some data also, we can use cookies that will be part of the servlet response and sent in the request to another servlet.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4c42829-56cf-462e-9347-0ce114f6eeb1","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.667Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.667Z"},"uniqueId":"7c4d8d2d-e1b9-431c-b58d-6e5249ca1c2e","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b5bd"},"name":"RequestDispatcher forward() is used to forward the same request to another resource whereas ServletResponse sendRedirect()","heading":"RequestDispatcher forward() is used to forward the same request to","smartContent":{"content":"<ol><li><!--block-->RequestDispatcher forward() is used to forward the same request to another resource whereas ServletResponse sendRedirect() is a two step process. In sendRedirect(), web application returns the response to client with status code 302 (redirect) with URL to send the request. The request sent is a completely new request.</li><li><!--block-->forward() is handled internally by the container whereas sednRedirect() is handled by browser.&nbsp;</li><li><!--block-->We should use forward() when accessing resources in the same application because it’s faster than sendRedirect() method that required an extra network call.</li><li><!--block-->In forward() browser is unaware of the actual processing resource and the URL in address bar remains same whereas in sendRedirect() URL in address bar change to the forwarded resource.</li><li><!--block-->forward() can’t be used to invoke a servlet in another context, we can only use sendRedirect() in this case.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"69780617-d638-4745-8111-3c646dc99b47","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.685Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.685Z"},"uniqueId":"10b05398-502d-4014-9512-6ce0d80669be","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b64d"},"name":"There are several differences between HashMap and Hashtable in Java: Hashtable is synchronized, whereas HashMap","heading":"There are several differences between HashMap and Hashtable in Java:","smartContent":{"content":"# Differences Between HashMap and Hashtable\n\nBoth **HashMap** and **Hashtable** are used to store data in key-value pairs and utilize hashing techniques to ensure the uniqueness of keys. However, there are significant differences between these two classes:\n\n### 1. Synchronization\n- **HashMap**: \n  - Non-synchronized, meaning it is not thread-safe.\n  - Unsuitable for use in multi-threaded environments without external synchronization.\n- **Hashtable**: \n  - Synchronized, meaning it is thread-safe.\n  - Can be shared among multiple threads.\n\n### 2. Null Keys and Values\n- **HashMap**: \n  - Allows one `null` key and multiple `null` values.\n- **Hashtable**: \n  - Does not allow any `null` keys or values.\n\n### 3. Introduction\n- **HashMap**: \n  - Introduced in JDK 1.2 as part of the Java Collections Framework.\n- **Hashtable**: \n  - A legacy class that existed before the Java Collections Framework was introduced.\n\n### 4. Performance\n- **HashMap**: \n  - Generally faster due to the lack of synchronization overhead.\n- **Hashtable**: \n  - Slower because of synchronization.\n\n### 5. Synchronization Flexibility\n- **HashMap**: \n  - Can be made synchronized externally using `Collections.synchronizedMap(hashMap)`.\n- **Hashtable**: \n  - Always synchronized internally and cannot be unsynchronized.\n\n### 6. Traversal\n- **HashMap**: \n  - Traversed using an `Iterator`.\n- **Hashtable**: \n  - Traversed using both an `Enumerator` and an `Iterator`.\n\n### 7. Fail-Fast Behavior\n- **HashMap**: \n  - Its `Iterator` is fail-fast, meaning it throws a `ConcurrentModificationException` if the map is modified after the iterator is created.\n- **Hashtable**: \n  - The `Enumerator` is not fail-fast.\n\n### 8. Inheritance\n- **HashMap**: \n  - Inherits from the `AbstractMap` class.\n- **Hashtable**: \n  - Inherits from the `Dictionary` class.\n\n### Additional Considerations\n- If you need thread safety and don't require `null` keys/values, use `Hashtable` or consider `ConcurrentHashMap` for better performance.\n- For most modern applications, **HashMap** is preferred due to its flexibility and performance benefits, especially when synchronization is not required.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"1240146a-80f6-4502-8099-446a0d0d8ec1","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.72Z"},"updatedDate":{"$date":"2024-09-03T16:26:08.063Z"},"uniqueId":"0652919d-bd6e-4945-acdf-8a7dbef864cc","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b6ac"},"name":"Java 8 has brought major changes in the Collection API. Some of the changes are:","heading":"Java 8 has brought major changes in the Collection API.","smartContent":{"content":"# Collection-Related Features in Java 8\n\nJava 8 introduced significant enhancements to the Collection API, making it more powerful and flexible. Some of the key changes include:\n\n### 1. **Java Stream API**\n- The introduction of the **Stream API** allows for processing collections in a more functional style.\n- It supports both **sequential** and **parallel processing** of data, enabling developers to easily perform operations like filtering, mapping, and reducing on collections.\n\n### 2. **Enhanced `Iterable` Interface**\n- The `Iterable` interface is extended with the **`forEach()`** default method.\n- This method allows for iterating over a collection more efficiently, especially when combined with **lambda expressions**.\n- The argument for `forEach()` is a `Consumer` functional interface, making it easier to apply operations on elements of a collection.\n\n### 3. **Miscellaneous Collection API Improvements**\n- The **`Iterator` interface** now includes the `forEachRemaining(Consumer action)` method, allowing the remaining elements in the iteration to be processed in a single step.\n- **`Map` interface** enhancements:\n  - **`replaceAll()`**: Updates all values in the map based on a specified function.\n  - **`compute()`**: Allows the computation of a value for a specific key, either to add a new key-value pair or update an existing one.\n  - **`merge()`**: Merges the existing value associated with a key with a new value, or adds the key-value pair if the key is not already present. \n\nThese improvements in Java 8 make working with collections more intuitive and enable more concise and readable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"a826a25a-4cca-4fe7-8d82-ed5b6a878aae","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.742Z"},"updatedDate":{"$date":"2024-09-03T16:28:53.085Z"},"uniqueId":"3ec5628b-c804-491f-be0c-821a4a5c9cf1","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b70b"},"name":"Collections are used in every programming language and initial java release contained few classes for","heading":"Collections are used in every programming language and initial java","smartContent":{"content":"<div><!--block-->Collections are used in every programming language and initial java release contained few classes for collections:&nbsp;<strong>Vector</strong>,&nbsp;<strong>Stack</strong>,&nbsp;<strong>Hashtable</strong>,&nbsp;<strong>Array</strong>. But looking at the larger scope and usage, Java 1.2 came up with Collections Framework that group all the collections interfaces, implementations and algorithms.<br>Java Collections have come through a long way with usage of Generics and Concurrent Collection classes for thread-safe operations. It also includes blocking interfaces and their implementations in java concurrent package.<br>Some of the benefits of collections framework are;</div><ul><li><!--block-->Reduced development effort by using core collection classes rather than implementing our own collection classes.</li><li><!--block-->Code quality is enhanced with the use of well tested collections framework classes.</li><li><!--block-->Reduced effort for code maintenance by using collection classes shipped with JDK.</li><li><!--block-->Reusability and Interoperability</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5b19307d-8e4f-428d-b17f-185411d2d5b7","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.765Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.765Z"},"uniqueId":"4fa2c981-63be-4cd9-a72f-6965e0e54fe8","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b76a"},"name":"Java 1.5 came with Generics and all collection interfaces and implementations use it heavily. Generics","heading":"Java 1.5 came with Generics and all collection interfaces and","smartContent":{"content":"Generics in the Java Collections Framework provide several key benefits that enhance type safety, code readability, and maintainability. Here are the main advantages:\n\n### 1. **Type Safety**\n   - **Compile-time Type Checking:** Generics ensure that the type of objects stored in a collection is checked at compile-time, preventing runtime `ClassCastException` errors. For example, if you declare a `List<String>`, only `String` objects can be added to the list.\n   - **Elimination of Explicit Casting:** When retrieving elements from a generic collection, you don't need to cast them to the correct type. This reduces the risk of runtime errors and makes the code cleaner.\n\n### 2. **Code Reusability**\n   - **Reusable Data Structures:** Generics allow you to create classes, interfaces, and methods that operate on any data type, making your code more flexible and reusable. You can write a single method or class to work with multiple types.\n\n### 3. **Improved Code Readability**\n   - **Self-documenting Code:** Generics make it clear what type of data a collection is supposed to hold, which improves the readability and understandability of your code. For example, `Map<String, Integer>` clearly indicates that the map holds `String` keys and `Integer` values.\n\n### 4. **Reduced Code Duplication**\n   - **Avoidance of Overloaded Methods:** Generics allow you to avoid writing overloaded methods for different data types, reducing code duplication and making maintenance easier.\n\n### 5. **Consistency Across Collections**\n   - **Uniform API:** Generics ensure that all collections in the Java Collections Framework have a consistent API, allowing developers to use them in a predictable way across different types of data.\n\nIn summary, the use of generics in the Collections Framework brings stronger type-checking, eliminates the need for casting, improves code clarity, and fosters reusable and maintainable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"6d9dbf4f-cd2a-41a3-9c06-25796d998878","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.788Z"},"updatedDate":{"$date":"2024-09-03T16:30:09.733Z"},"uniqueId":"497cd7a8-e8f7-471d-9476-07eb658858fd","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b7c9"},"name":"Collection is the root of the collection hierarchy. A collection represents a group of objects","heading":"Collection is the root of the collection hierarchy. A collection","smartContent":{"content":"In the Java Collections Framework, interfaces define the fundamental contracts for collections, specifying the operations that a collection must support. Below are the primary interfaces in the Java Collections Framework:\n\n### 1. **Collection Interface**\n   - **Description**: The root interface in the collection hierarchy. A `Collection` represents a group of objects, known as elements. It is the base for most of the collection types in Java.\n   - **Key Methods**: `add()`, `remove()`, `size()`, `clear()`, `contains()`, `isEmpty()`, `iterator()`\n   - **Subinterfaces**: `Set`, `List`, `Queue`, `Deque`\n\n### 2. **List Interface**\n   - **Description**: A `List` represents an ordered collection (sequence) of elements. It allows duplicate elements and provides positional access and insertion of elements.\n   - **Key Methods**: `get(int index)`, `set(int index, E element)`, `add(int index, E element)`, `remove(int index)`, `indexOf(Object o)`, `subList(int fromIndex, int toIndex)`\n   - **Implementations**: `ArrayList`, `LinkedList`, `Vector`, `Stack`\n\n### 3. **Set Interface**\n   - **Description**: A `Set` is a collection that does not allow duplicate elements. It models the mathematical set abstraction.\n   - **Key Methods**: Same as `Collection`, but with restrictions to ensure no duplicates.\n   - **Subinterfaces**: `SortedSet`, `NavigableSet`\n   - **Implementations**: `HashSet`, `LinkedHashSet`, `TreeSet`\n\n### 4. **Queue Interface**\n   - **Description**: A `Queue` represents a collection designed for holding elements prior to processing. Typically, queues order elements in a FIFO (first-in-first-out) manner.\n   - **Key Methods**: `offer(E e)`, `poll()`, `peek()`\n   - **Subinterfaces**: `Deque`, `BlockingQueue`\n   - **Implementations**: `LinkedList`, `PriorityQueue`, `ArrayDeque`\n\n### 5. **Deque Interface**\n   - **Description**: A `Deque` (double-ended queue) is a type of queue that supports element insertion and removal at both ends.\n   - **Key Methods**: `addFirst(E e)`, `addLast(E e)`, `removeFirst()`, `removeLast()`, `getFirst()`, `getLast()`\n   - **Implementations**: `LinkedList`, `ArrayDeque`\n\n### 6. **Map Interface**\n   - **Description**: A `Map` represents a collection that maps keys to values, with no duplicate keys allowed. Each key maps to at most one value.\n   - **Key Methods**: `put(K key, V value)`, `get(Object key)`, `remove(Object key)`, `containsKey(Object key)`, `keySet()`, `values()`\n   - **Subinterfaces**: `SortedMap`, `NavigableMap`\n   - **Implementations**: `HashMap`, `LinkedHashMap`, `TreeMap`, `Hashtable`, `ConcurrentHashMap`\n\n### 7. **SortedSet Interface**\n   - **Description**: A `SortedSet` is a `Set` that maintains its elements in ascending order.\n   - **Key Methods**: `first()`, `last()`, `headSet(E toElement)`, `tailSet(E fromElement)`\n   - **Implementations**: `TreeSet`\n\n### 8. **SortedMap Interface**\n   - **Description**: A `SortedMap` is a `Map` that maintains its keys in ascending order.\n   - **Key Methods**: `firstKey()`, `lastKey()`, `headMap(K toKey)`, `tailMap(K fromKey)`\n   - **Implementations**: `TreeMap`\n\n### 9. **NavigableSet Interface**\n   - **Description**: A `NavigableSet` is a `SortedSet` with additional navigation methods for finding elements relative to the given element.\n   - **Key Methods**: `lower(E e)`, `floor(E e)`, `ceiling(E e)`, `higher(E e)`, `pollFirst()`, `pollLast()`\n   - **Implementations**: `TreeSet`\n\n### 10. **NavigableMap Interface**\n   - **Description**: A `NavigableMap` is a `SortedMap` with additional methods for navigating the map based on closest matches for given search targets.\n   - **Key Methods**: `lowerEntry(K key)`, `floorEntry(K key)`, `ceilingEntry(K key)`, `higherEntry(K key)`, `pollFirstEntry()`, `pollLastEntry()`\n   - **Implementations**: `TreeMap`\n\nThese interfaces provide a consistent set of methods for working with collections of objects, allowing for interoperability and flexibility when implementing and using different types of collections in Java.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2eeb77a8-5790-4bca-85c2-8dd46c45a1ed","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.81Z"},"updatedDate":{"$date":"2024-08-31T05:04:12.464Z"},"uniqueId":"1f2dc07b-3c3f-44ea-b76d-950506231060","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b828"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collection` interface in Java doesn't extend the `Cloneable` and `Serializable` interfaces due to design considerations aimed at maintaining flexibility and avoiding unnecessary constraints on all collection implementations. Here’s why:\n\n### 1. **Not All Collections Should Be Cloneable or Serializable**\n   - **Diverse Implementations:** The `Collection` interface is implemented by various classes, such as `ArrayList`, `HashSet`, `LinkedList`, etc., each with different characteristics and use cases. Making all collections `Cloneable` or `Serializable` by default would impose unnecessary restrictions on implementations that don't require these features.\n   - **Optional Behavior:** By not forcing all collections to be `Cloneable` or `Serializable`, Java allows developers to decide on a case-by-case basis whether these capabilities are needed. This is especially useful for custom collection implementations.\n\n### 2. **Cloneable Interface**\n   - **Shallow vs. Deep Copy:** The `Cloneable` interface in Java only supports shallow cloning by default, which might not be appropriate for all collections. For instance, shallow cloning of a collection containing mutable objects might lead to unexpected behavior. Developers can implement custom cloning logic if deep copies are needed.\n   - **Design Flexibility:** By not extending `Cloneable`, the Java Collections Framework leaves the decision of how cloning should be handled to the specific implementation, allowing for more flexible and controlled behavior.\n\n### 3. **Serializable Interface**\n   - **Serialization Complexity:** Serialization can be complex, especially for collections that may contain non-serializable elements. Automatically making all collections serializable would either force all elements to be serializable (which might not be practical) or result in runtime exceptions if non-serializable elements are present.\n   - **Controlled Serialization:** Implementations can choose to implement `Serializable` if and when it makes sense, allowing developers to carefully manage how collections are serialized, ensuring that only appropriate data is serialized.\n\n### 4. **Minimalist Design**\n   - **Interface Segregation:** The principle of interface segregation suggests that interfaces should be as small as possible. Forcing `Collection` to extend `Cloneable` and `Serializable` would violate this principle by bundling responsibilities that are not necessarily related to the core functionality of a collection.\n   - **Decoupling:** By keeping `Collection` independent of these interfaces, the design remains cleaner and more decoupled, allowing different implementations to focus on their specific requirements without inheriting unnecessary behavior.\n\n### Conclusion\nIn summary, the decision not to extend `Cloneable` and `Serializable` in the `Collection` interface is rooted in the desire for flexibility, proper design practices, and avoiding unnecessary constraints on all collection implementations. This approach allows developers to selectively add cloning and serialization capabilities where they are truly needed, rather than imposing them universally.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"6056c8bf-b167-4779-8fe6-8ff3e1153330","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.829Z"},"updatedDate":{"$date":"2024-09-03T16:32:31.557Z"},"uniqueId":"cdb189e2-89fe-40fb-b755-3bbfcaa856e9","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b887"},"name":"Although Map interface and it’s implementations are part of Collections Framework, Map are not collections","heading":"Although Map interface and it’s implementations are part of Collections","smartContent":{"content":"<div><!--block-->Although Map interface and it’s implementations are part of Collections Framework, Map are not collections and collections are not Map. Hence it doesn’t make sense for Map to extend Collection or vice versa.<br>If Map extends Collection interface, then where are the elements? Map contains key-value pairs and it provides methods to retrieve list of Keys or values as Collection but it doesn’t fit into the “group of elements” paradigm.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7b045a98-5b68-4229-933b-6799f970d63a","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.85Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.85Z"},"uniqueId":"48d03a4d-c010-4edf-a77f-1b85be71448c","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b8e6"},"name":"Iterator interface provides methods to iterate over any Collection. We can get iterator instance from","heading":"Iterator interface provides methods to iterate over any Collection. We","smartContent":{"content":"<div><!--block-->Iterator interface provides methods to iterate over any Collection. We can get iterator instance from a Collection using&nbsp;<em>iterator()</em>&nbsp;method. Iterator takes the place of Enumeration in the Java Collections Framework. Iterators allow the caller to remove elements from the underlying collection during the iteration. Java Collection iterator provides a generic way for traversal through the elements of a collection and implements&nbsp;<a href=\"http://www.journaldev.com/1716/iterator-design-pattern-java\"><strong>Iterator Design Pattern</strong></a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"cb4b5d6a-40e5-48fa-a8e9-37edcdd11aa7","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.869Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.869Z"},"uniqueId":"4ff3cd2e-65fd-46ce-88a8-8d0e4837fdea","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b945"},"name":"Enumeration is twice as fast as Iterator and uses very less memory. Enumeration is very","heading":"Enumeration is twice as fast as Iterator and uses very","smartContent":{"content":"<div><!--block-->Enumeration is twice as fast as Iterator and uses very less memory. Enumeration is very basic and fits to basic needs. But Iterator is much safer as compared to Enumeration because it always denies other threads to modify the collection object which is being iterated by it.<br>Iterator takes the place of Enumeration in the Java Collections Framework. Iterators allow the caller to remove elements from the underlying collection that is not possible with Enumeration. Iterator method names have been improved to make it’s functionality clear.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c1d616ed-5dfa-4609-bee1-2ff874c1cc73","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.887Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.887Z"},"uniqueId":"d29d9a66-e944-4eeb-9e27-f53e19c80461","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1b9a4"},"name":"The semantics are unclear, given that the contract for Iterator makes no guarantees about the","heading":"The semantics are unclear, given that the contract for Iterator","smartContent":{"content":"<div><!--block-->The semantics are unclear, given that the contract for Iterator makes no guarantees about the order of iteration. Note, however, that ListIterator does provide an add operation, as it does guarantee the order of the iteration.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8f0c4b96-4ef1-4bd8-a2cd-57afdf080472","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.911Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.911Z"},"uniqueId":"7f3c2802-4a11-45be-b8bb-369847a53078","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ba03"},"name":"It can be implemented on top of current Iterator interface but since it’s use will","heading":"It can be implemented on top of current Iterator interface","smartContent":{"content":"<div><!--block-->It can be implemented on top of current Iterator interface but since it’s use will be rare, it doesn’t make sense to include it in the interface that everyone has to implement.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9eaae811-a215-4cd4-99b5-b3dc5e2d263e","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.933Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.933Z"},"uniqueId":"2f439d49-1733-4c1c-ba0f-d14b41039215","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1ba62"},"name":"We can use Iterator to traverse Set and List collections whereas ListIterator can be used","heading":"We can use Iterator to traverse Set and List collections","smartContent":{"content":"<ul><li><!--block-->We can use Iterator to traverse Set and List collections whereas ListIterator can be used with Lists only.</li><li><!--block-->Iterator can traverse in forward direction only whereas ListIterator can be used to traverse in both the directions.</li><li><!--block-->ListIterator inherits from Iterator interface and comes with extra functionalities like adding an element, replacing an element, getting index position for previous and next elements.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c1db7d5b-72f0-4cd2-b7f1-c67b7c989b8d","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.955Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.955Z"},"uniqueId":"1f5db7c8-654e-4779-95c9-27c3b6739187","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1bac1"},"name":"We can iterate over a list in two different ways – using iterator and using","heading":"We can iterate over a list in two different ways","smartContent":{"content":"<div><!--block-->We can iterate over a list in two different ways –&nbsp;</div><ul><li><!--block-->using iterator and&nbsp;</li><li><!--block-->using for-each loop.</li></ul><div><!--block--><br><br></div><pre><!--block-->List&lt;String&gt; strList = new ArrayList&lt;&gt;();\n//using for-each loop\nfor(String obj : strList){\n    System.out.println(obj);\n}\n\n//using iterator\nIterator&lt;String&gt; it = strList.iterator();\nwhile(it.hasNext()){\n    String obj = it.next();\n    System.out.println(obj);\n}</pre><div><!--block--><strong><em>Using iterator is more thread-safe</em></strong>&nbsp;<em>because it makes sure that if underlying list elements are modified, it will throw ConcurrentModificationException.</em></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"33e90db3-2fd4-4694-b542-414e5864392f","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.973Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.973Z"},"uniqueId":"7a6e9148-775a-441b-aa7e-2ddb5cd3fcc3","__v":0}
{"_id":{"$oid":"668ef19359d6bcc528b1bb20"},"name":"Iterator fail-fast property checks for any modification in the structure of the underlying collection everytime","heading":"Iterator fail-fast property checks for any modification in the structure","smartContent":{"content":"<div><!--block-->Iterator fail-fast property checks for any modification in the structure of the underlying collection everytime we try to get the next element. If there are any modifications found, it throwsConcurrentModificationException. All the implementations of Iterator in Collection classes are fail-fast by design except the concurrent collection classes like ConcurrentHashMap and CopyOnWriteArrayList.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f056d01f-c516-4f7c-b8e4-66283cc48b23","order":0,"createdDate":{"$date":"2024-07-10T20:39:47.988Z"},"updatedDate":{"$date":"2024-07-10T20:39:47.988Z"},"uniqueId":"2fe6dbd2-52a1-4258-aa92-ccfd51d247ff","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bb7f"},"name":"Iterator fail-safe property work with the clone of underlying collection, hence it’s not affected by","heading":"Iterator fail-safe property work with the clone of underlying collection,","smartContent":{"content":"<div><!--block-->Iterator fail-safe property work with the clone of underlying collection, hence it’s not affected by any modification in the collection. By design, all the collection classes in java.util package are fail-fast whereas collection classes in java.util.concurrent are fail-safe.<br>Fail-fast iterators throw ConcurrentModificationException whereas fail-safe iterator never throws ConcurrentModificationException.<br>Check this post for&nbsp;<a href=\"http://www.journaldev.com/1289/copyonwritearraylist-java\">CopyOnWriteArrayList Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"61f5a1e1-f718-4ff0-a4a9-9702505f2cb6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.005Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.005Z"},"uniqueId":"d0f89844-8ae2-4204-b41f-28848172933b","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bbde"},"name":"We can use concurrent collection classes to avoid ConcurrentModificationException while iterating over a collection, for","heading":"We can use concurrent collection classes to avoid ConcurrentModificationException while","smartContent":{"content":"<div><!--block-->We can use concurrent collection classes to avoid ConcurrentModificationException while iterating over a collection, for example CopyOnWriteArrayList instead of ArrayList.<br>Check this post for&nbsp;<a href=\"http://www.journaldev.com/122/java-concurrenthashmap-example-iterator\">ConcurrentHashMap Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4228fbc0-157e-435d-a422-188c38d1723a","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.021Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.021Z"},"uniqueId":"4fca34c3-5f25-4264-8aa8-0eb7ec1840a7","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bc3d"},"name":"Iterator interface declare methods for iterating a collection but it’s implementation is responsibility of the","heading":"Iterator interface declare methods for iterating a collection but it’s","smartContent":{"content":"<div><!--block-->Iterator interface declare methods for iterating a collection but it’s implementation is responsibility of the Collection implementation classes. Every collection class that returns an iterator for traversing has it’s own Iterator implementation nested class.<br>This allows collection classes to chose whether iterator is fail-fast or fail-safe. For example ArrayList iterator is fail-fast whereas CopyOnWriteArrayList iterator is fail-safe.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"aa36ed80-8d4a-411e-bbde-b0abd22aac92","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.037Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.037Z"},"uniqueId":"c9d9bbb7-2521-4643-b169-3b224956879d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bc9c"},"name":"UnsupportedOperationException is the exception used to indicate that the operation is not supported. It’s used","heading":"UnsupportedOperationException is the exception used to indicate that the operation","smartContent":{"content":"<div><!--block-->UnsupportedOperationException is the exception used to indicate that the operation is not supported. It’s used extensively in&nbsp;<a href=\"http://www.journaldev.com/546/difference-between-jdk-jre-and-jvm-in-java\">JDK</a>&nbsp;classes, in collections frameworkjava.util.Collections.UnmodifiableCollection throws this exception for all add and removeoperations.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"aa5ec565-0b30-4dfb-9a5a-b1e22a4b8837","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.051Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.051Z"},"uniqueId":"215bc2fe-9d5e-4f29-9fe0-51b9f4ba51c6","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bcfb"},"name":"HashMap stores key-value pair in Map.Entry static nested class implementation. HashMap works on hashing algorithm","heading":"HashMap stores key-value pair in Map.Entry static nested class implementation.","smartContent":{"content":"# How HashMap Works in Java\n\nHashMap in Java is a powerful data structure that stores key-value pairs. It operates based on a hashing algorithm and leverages the `hashCode()` and `equals()` methods in its `put` and `get` operations.\n\n### Overview of HashMap\n\n- **Key-Value Storage**: HashMap stores each key-value pair in an instance of the `Map.Entry` static nested class.\n- **Hashing**: It uses the key's `hashCode()` method to determine the index at which the entry will be stored.\n- **Collision Handling**: Entries are stored in a LinkedList. If two keys hash to the same index, HashMap uses the `equals()` method to determine if the keys are the same. If they are, the value is overwritten; otherwise, a new entry is created.\n\n### How `put()` Method Works\n\nWhen you call the `put()` method to add a key-value pair:\n\n1. **Hashing**: HashMap calculates the index using the key's `hashCode()` and a hashing function.\n2. **Collision Resolution**: \n   - If the index is empty, the key-value pair is stored directly.\n   - If there is already an entry at that index, the LinkedList is traversed.\n   - `equals()` is used to check if the key already exists. If it does, the value is updated. Otherwise, a new `Entry` is added to the list.\n\n### How `get()` Method Works\n\nWhen you call the `get()` method to retrieve a value:\n\n1. **Hashing**: HashMap calculates the index using the key's `hashCode()`.\n2. **Lookup**: \n   - It checks the index for an entry.\n   - The LinkedList at the index is traversed using `equals()` to find the correct key.\n   - The value associated with the key is then returned.\n\n\n\n### Key Concepts in HashMap\n\n- **Capacity**: The default initial capacity of a HashMap is `16`.\n- **Load Factor**: The default load factor is `0.75`. This determines how full the HashMap can get before it resizes.\n- **Threshold**: Calculated as `capacity * load factor`. When the number of entries exceeds this threshold, the HashMap is resized (rehashing) to accommodate more entries.\n- **Resizing**: HashMap automatically resizes when the size exceeds the threshold. The new capacity is always a power of 2, ensuring efficient memory usage and access speed.\n\n### Best Practices\n\n- **Initial Capacity**: If you know the approximate number of entries, initialize the HashMap with an appropriate capacity to avoid unnecessary resizing.\n- **Use Cases**: HashMap is ideal for scenarios where quick lookups and insertions are required, such as caching data from a database.\n\nThis understanding of HashMap's inner workings will help you optimize its usage in your Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"9043c938-d7b8-4083-8a00-f3cd1e552208","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.073Z"},"updatedDate":{"$date":"2024-09-03T16:20:45.452Z"},"uniqueId":"f5f6cac2-789e-478e-9616-184027033f80","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bd5a"},"name":"HashMap uses Key object hashCode() and equals() method to determine the index to put the","heading":"HashMap uses Key object hashCode() and equals() method to determine","smartContent":{"content":"# Importance of `hashCode()` and `equals()` in HashMap\n\nHashMap in Java relies heavily on the `hashCode()` and `equals()` methods of the key objects to efficiently store and retrieve key-value pairs.\n\n### How HashMap Uses `hashCode()` and `equals()`\n\n- **Index Calculation**: HashMap uses the `hashCode()` method of the key object to determine the index where the key-value pair should be stored.\n- **Collision Handling**: If two keys have the same `hashCode()`, HashMap uses the `equals()` method to check if the keys are identical. If `equals()` returns `true`, the value is overwritten; otherwise, the keys are treated as different and stored separately.\n\n### Potential Issues with Incorrect Implementation\n\nIf the `hashCode()` and `equals()` methods are not implemented correctly:\n\n- **Key Collisions**: Two different key objects may produce the same `hashCode()` and return `true` for `equals()`. This would cause HashMap to treat them as the same key, leading to overwriting of data instead of storing them in separate locations.\n\n### Importance in Collections\n\nAll collection classes in Java that do not allow duplicate elements, such as `HashSet` and `HashMap`, rely on `hashCode()` and `equals()` to check for duplicates. Therefore, correct implementation of these methods is crucial.\n\n### Best Practices for Implementing `hashCode()` and `equals()`\n\n- **Consistency**: If `o1.equals(o2)` is true, then `o1.hashCode() == o2.hashCode()` should always be true.\n- **Non-Equivalence**: If `o1.hashCode() == o2.hashCode()` is true, it does not necessarily mean that `o1.equals(o2)` will be true.\n\nFollowing these rules ensures that your objects work correctly with HashMap and other collections that depend on these methods.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"a189f741-8770-4d94-900b-6b759a7da021","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.091Z"},"updatedDate":{"$date":"2024-09-03T16:22:39.682Z"},"uniqueId":"2679ab03-813c-418a-be50-ad73a79592d8","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bdb9"},"name":"We can use any class as Map Key, however following points should be considered before","heading":"We can use any class as Map Key, however following","smartContent":{"content":"<div><!--block-->We can use any class as Map Key, however following points should be considered before using them.</div><ul><li><!--block-->If the class overrides equals() method, it should also override hashCode() method.</li><li><!--block-->The class should follow the rules associated with equals() and hashCode() for all instances. Please refer earlier question for these rules.</li><li><!--block-->If a class field is not used in equals(), you should not use it in hashCode() method.</li><li><!--block-->Best practice for user defined key class is to make it immutable, so that hashCode() value can be cached for fast performance. Also immutable classes make sure that hashCode() and equals() will not change in future that will solve any issue with mutability.<br>For example, let’s say I have a class MyKey that I am using for HashMap key.</li></ul><pre><!--block-->//MyKey name argument passed is used for equals() and hashCode()\nMyKey key = new MyKey(\"Pankaj\"); //assume hashCode=1234\nmyHashMap.put(key, \"Value\");\n// Below code will change the key hashCode() and equals()\n// but it's location is not changed.\nkey.setName(\"Amit\"); //assume new hashCode=7890\n//below will return null, because HashMap will try to look for key\n//in the same index as it was stored but since key is mutated, \n//there will be no match and it will return null.\nmyHashMap.get(new MyKey(\"Pankaj\")); </pre><div><!--block--><br><br></div><div><!--block-->This is the reason why String and Integer are mostly used as HashMap keys.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e74d8304-86e3-4452-91b2-6250f177431e","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.105Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.105Z"},"uniqueId":"80257095-0c95-4957-a2a9-93023c0c8b33","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1be18"},"name":"Map interface provides three collection views: Set keySet(): Returns a Set view of the keys","heading":"Map interface provides three collection views: Set keySet(): Returns a","smartContent":{"content":"<div><!--block-->Map interface provides three collection views:</div><ol><li><!--block--><strong>Set keySet()</strong>: Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator’s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.</li><li><!--block--><strong>Collection values()</strong>: Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator’s own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.</li><li><!--block--><strong>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</strong>: Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator’s own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7a4fb15c-48ef-4547-9ae6-89efd41be3f3","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.123Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.123Z"},"uniqueId":"6a4d390e-a0db-42e3-869c-295334ffcb46","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1be77"},"name":"HashMap and Hashtable both implements Map interface and looks similar, however there are following difference","heading":"HashMap and Hashtable both implements Map interface and looks similar,","smartContent":{"content":"<div><!--block-->HashMap and Hashtable both implements Map interface and looks similar, however there are following difference between HashMap and Hashtable.</div><ol><li><!--block-->HashMap allows null key and values whereas Hashtable doesn’t allow null key and values.</li><li><!--block-->Hashtable is synchronized but HashMap is not synchronized. So HashMap is better for single threaded environment, Hashtable is suitable for multi-threaded environment.</li><li><!--block-->LinkedHashMap was introduced in Java 1.4 as a subclass of HashMap, so incase you want iteration order, you can easily switch from HashMap to LinkedHashMap but that is not the case with Hashtable whose iteration order is unpredictable.</li><li><!--block-->HashMap provides Set of keys to iterate and hence it’s fail-fast but Hashtable provides Enumeration of keys that doesn’t support this feature.</li><li><!--block-->Hashtable is considered to be legacy class and if you are looking for modifications of Map while iterating, you should use ConcurrentHashMap.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2d054b98-67ab-4b6e-8f81-adbd479b4096","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.14Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.14Z"},"uniqueId":"cbb23576-d6f1-404b-8e31-aece132dd652","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bed6"},"name":"For inserting, deleting, and locating elements in a Map, the HashMap offers the best alternative.","heading":"For inserting, deleting, and locating elements in a Map, the","smartContent":{"content":"<div><!--block-->For inserting, deleting, and locating elements in a Map, the HashMap offers the best alternative. If, however, you need to traverse the keys in a sorted order, then TreeMap is your better alternative. Depending upon the size of your collection, it may be faster to add elements to a HashMap, then convert the map to a TreeMap for sorted key traversal.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d3d36d8f-847f-4262-bc8b-c778c381ccd4","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.156Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.156Z"},"uniqueId":"873a43d8-7c73-4953-a51b-054411453731","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bf35"},"name":"ArrayList and Vector are similar classes in many ways. Both are index based and backed","heading":"ArrayList and Vector are similar classes in many ways. Both","smartContent":{"content":"<div><!--block--><strong><em>ArrayList and Vector are similar classes in many ways.</em></strong></div><ol><li><!--block-->Both are index based and backed up by an array internally.</li><li><!--block-->Both maintains the order of insertion and we can get the elements in the order of insertion.</li><li><!--block-->The iterator implementations of ArrayList and Vector both are fail-fast by design.</li><li><!--block-->ArrayList and Vector both allows null values and random access to element using index number.</li></ol><div><!--block--><strong><em>These are the differences between ArrayList and Vector.</em></strong></div><ol><li><!--block-->Vector is synchronized whereas ArrayList is not synchronized. However if you are looking for modification of list while iterating, you should use CopyOnWriteArrayList.</li><li><!--block-->ArrayList is faster than Vector because it doesn’t have any overhead because of synchronization.</li><li><!--block-->ArrayList is more versatile because we can get synchronized list or read-only list from it easily using Collections utility class.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e323f1db-183e-40f9-a9f4-549da1622173","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.177Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.177Z"},"uniqueId":"42d441dc-3215-4e01-9e54-026d74a58ad9","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bf94"},"name":"Arrays can contain primitive or Objects whereas ArrayList can contain only Objects. Arrays are fixed","heading":"Arrays can contain primitive or Objects whereas ArrayList can contain","smartContent":{"content":"<ol><li><!--block-->Arrays can contain primitive or Objects whereas ArrayList can contain only Objects.</li><li><!--block-->Arrays are fixed size whereas ArrayList size is dynamic.</li><li><!--block-->Arrays doesn’t provide a lot of features like ArrayList, such as addAll, removeAll, iterator etc.</li></ol><div><!--block--><br></div><div><!--block--><strong>Although ArrayList is the obvious choice</strong>&nbsp;<em>when we work on list</em>,&nbsp;<strong><em>there are few times when array are good to use</em></strong>.</div><ul><li><!--block-->If the size of list is fixed and mostly used to store and traverse them.</li><li><!--block-->For list of primitive data types, although Collections use autoboxing to reduce the coding effort but still it makes them slow when working on fixed size primitive data types.</li><li><!--block-->If you are working on fixed multi-dimensional situation, using [][] is far more easier than List&lt;List&lt;&gt;&gt;</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c2be7234-fec5-4d4c-9339-34d775adf408","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.197Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.197Z"},"uniqueId":"b08f572f-47fb-4f82-a0ef-b8e2213d2b83","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1bff3"},"name":"ArrayList and LinkedList both implement List interface but there are some differences between them. ArrayList","heading":"ArrayList and LinkedList both implement List interface but there are","smartContent":{"content":"<div><!--block-->ArrayList and LinkedList both implement List interface but there are some differences between them.</div><ol><li><!--block-->ArrayList is an&nbsp;<em>index based data structure backed by Array</em>, so it provides random access to it’s elements with performance as O(1) but LinkedList stores data as list of nodes where every node is linked to it’s previous and next node. So even though there is a method to get the element using index, internally it traverse from start to reach at the index node and then return the element, so performance is O(n) that is slower than ArrayList.</li><li><!--block-->Insertion, addition or removal of an element is faster in LinkedList compared to ArrayList because there is no concept of resizing array or updating index when element is added in middle.</li><li><!--block-->LinkedList consumes more memory than ArrayList because every node in LinkedList stores reference of previous and next elements.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c7043f46-52c0-4b5c-a11a-b1ee05d26376","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.212Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.212Z"},"uniqueId":"c2d66500-ae0d-4c3f-ba2a-e4ea0489567f","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c052"},"name":"ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s elements. Downloadjava collections pdf for","heading":"ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s","smartContent":{"content":"<div><!--block-->ArrayList, HashMap, TreeMap, Hashtable classes provide random access to it’s elements. Download<a href=\"http://cdn.journaldev.com/wp-content/uploads/2013/01/java-collections-framework.pdf\">java collections pdf</a>&nbsp;for more information.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fe9d6c4e-1242-49e4-ae73-f07e05289a5d","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.231Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.231Z"},"uniqueId":"be6a34af-c014-4e7a-a1f9-bb43026524b9","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c0b1"},"name":"java.util.EnumSet is Set implementation to use with enum types. All of the elements in an","heading":"java.util.EnumSet is Set implementation to use with enum types. All","smartContent":{"content":"<div><!--block-->java.util.EnumSet is Set implementation to use with enum types. All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. EnumSet is not synchronized and null elements are not allowed. It also provides some useful methods like copyOf(Collection c), of(E first, E… rest) and complementOf(EnumSet s).<br><br></div><div><!--block-->Check this post for&nbsp;<a href=\"http://www.journaldev.com/716/java-enum\">java enum tutorial</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5ada10fd-bded-4120-a51e-7ec4b9e9ec76","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.25Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.25Z"},"uniqueId":"20dd673d-7d03-49bb-bc88-b48525c0fd5f","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c110"},"name":"Vector, Hashtable, Properties and Stack are synchronized classes, so they are thread-safe and can be","heading":"Vector, Hashtable, Properties and Stack are synchronized classes, so they","smartContent":{"content":"<div><!--block-->Vector, Hashtable, Properties and Stack are synchronized classes, so they are thread-safe and can be used in multi-threaded environment. Java 1.5 Concurrent API included some collection classes that allows modification of collection while iteration because they work on the clone of the collection, so they are safe to use in multi-threaded environment.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"07ec1e28-0c3e-4bb0-b5f4-5f9c6d519df6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.271Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.271Z"},"uniqueId":"595ff44e-4fb9-4178-85b2-07e0cb74cb03","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c16f"},"name":"Java 1.5 Concurrent package (java.util.concurrent) contains thread-safe collection classes that allow collections to be modified","heading":"Java 1.5 Concurrent package (java.util.concurrent) contains thread-safe collection classes that","smartContent":{"content":"<div><!--block-->Java 1.5 Concurrent package (java.util.concurrent) contains thread-safe collection classes that allow collections to be modified while iterating. By design Iterator implementation in java.utilpackages are fail-fast and throws ConcurrentModificationException. But Iterator implementation injava.util.concurrent packages are fail-safe and we can modify the collection while iterating. Some of these classes are CopyOnWriteArrayList, ConcurrentHashMap, CopyOnWriteArraySet.<br><br></div><div><!--block-->Read these posts to learn about them in more detail.<br><br></div><ul><li><!--block--><a href=\"http://www.journaldev.com/378/java-util-concurrentmodificationexception\">Avoid ConcurrentModificationException</a></li><li><!--block--><a href=\"http://www.journaldev.com/1289/copyonwritearraylist-java\">CopyOnWriteArrayList Example</a></li><li><!--block--><a href=\"http://www.journaldev.com/122/java-concurrenthashmap-example-iterator\">HashMap vs ConcurrentHashMap</a></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"94610d3f-18bf-43c3-a710-5d1a5fbae7f2","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.286Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.286Z"},"uniqueId":"9b6203fe-f663-449c-8d5a-ffc3de5ebf0a","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c1ce"},"name":"java.util.concurrent.BlockingQueue is a Queue that supports operations that wait for the queue to become non-empty","heading":"java.util.concurrent.BlockingQueue is a Queue that supports operations that wait for","smartContent":{"content":"<div><!--block-->java.util.concurrent.BlockingQueue is a Queue that supports operations that wait for the queue to become non-empty when retrieving and removing an element, and wait for space to become available in the queue when adding an element.<br><br></div><div><!--block-->BlockingQueue interface is part of java collections framework and it’s primarily used for implementing producer consumer problem. We don’t need to worry about waiting for the space to be available for producer or object to be available for consumer in BlockingQueue as it’s handled by implementation classes of BlockingQueue.<br><br></div><div><!--block-->Java provides several BlockingQueue implementations such as ArrayBlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue, SynchronousQueue etc.<br>Check this post for use of BlockingQueue for&nbsp;<a href=\"http://www.journaldev.com/1034/java-blockingqueue-example\">producer-consumer problem</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3ec0a852-0e9f-44a1-9a58-0923948f86c6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.301Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.301Z"},"uniqueId":"35a7d377-240e-4f42-b19a-29b8598552da","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c22d"},"name":"Both Queue and Stack are used to store data before processing them. java.util.Queue is an","heading":"Both Queue and Stack are used to store data before","smartContent":{"content":"<div><!--block-->Both Queue and Stack are used to store data before processing them. java.util.Queue is an interface whose implementation classes are present in java concurrent package. Queue allows retrieval of element in First-In-First-Out (FIFO) order but it’s not always the case. There is also Deque interface that allows elements to be retrieved from both end of the queue.<br>Stack is similar to queue except that it allows elements to be retrieved in Last-In-First-Out (LIFO) order.<br>Stack is a class that extends Vector whereas Queue is an interface.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2687b68e-4fea-4518-bee4-abf8dee41b8c","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.319Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.319Z"},"uniqueId":"f25d5133-f9fa-4b96-a89e-b481b926d9a2","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c28c"},"name":"java.util.Collections is a utility class consists exclusively of static methods that operate on or return","heading":"java.util.Collections is a utility class consists exclusively of static methods","smartContent":{"content":"<div><!--block-->java.util.Collections is a utility class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, “wrappers”, which return a new collection backed by a specified collection, and a few other odds and ends.<br><br></div><div><!--block-->This class contains methods for collection framework algorithms, such as binary search, sorting, shuffling, reverse etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"500a1ba1-5409-4138-8efe-8757db988c70","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.334Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.334Z"},"uniqueId":"063f80c6-f11a-464c-84df-364314c0bb0b","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c2eb"},"name":"Java provides Comparable interface which should be implemented by any custom class if we want","heading":"Java provides Comparable interface which should be implemented by any","smartContent":{"content":"<div><!--block-->Java provides Comparable interface which should be implemented by any custom class if we want to use Arrays or Collections sorting methods. Comparable interface has compareTo(T obj) method which is used by sorting methods. We should override this method in such a way that it returns a negative integer, zero, or a positive integer if “this” object is less than, equal to, or greater than the object passed as argument.<br><br></div><div><!--block-->But, in most real life scenarios, we want sorting based on different parameters. For example, as a CEO, I would like to sort the employees based on Salary, an HR would like to sort them based on the age. This is the situation where we need to use Comparator interface becauseComparable.compareTo(Object o) method implementation can sort based on one field only and we can’t chose the field on which we want to sort the Object.<br><br></div><div><!--block-->Comparator interface compare(Object o1, Object o2) method need to be implemented that takes two Object argument, it should be implemented in such a way that it returns negative int if first argument is less than the second one and returns zero if they are equal and positive int if first argument is greater than second one.<br><br></div><div><!--block-->Check this post for use of Comparable and Comparator interface to&nbsp;<a href=\"http://www.journaldev.com/780/comparable-and-comparator-in-java-example\">sort objects</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"00459f86-3417-4866-943b-fb8672aa1be9","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.35Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.35Z"},"uniqueId":"3d850cb9-a275-44e9-a3dd-a49826675c36","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c34a"},"name":"Comparable and Comparator interfaces are used to sort collection or array of objects. Comparable interface","heading":"Comparable and Comparator interfaces are used to sort collection or","smartContent":{"content":"<div><!--block-->Comparable and Comparator interfaces are used to sort collection or array of objects.<br><br></div><div><!--block-->Comparable interface is used to provide the natural sorting of objects and we can use it to provide sorting based on single logic.<br>Comparator interface is used to provide different algorithms for sorting and we can chose the comparator we want to use to sort the given collection of objects.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"254cece9-3b1c-4464-85f3-3bfd872d8918","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.367Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.367Z"},"uniqueId":"cb9f8e99-ff44-4359-88df-57b49174b400","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c3a9"},"name":"If we need to sort an array of Objects, we can use Arrays.sort(). If we","heading":"If we need to sort an array of Objects, we","smartContent":{"content":"<div><!--block-->If we need to sort an array of Objects, we can use Arrays.sort(). If we need to sort a list of objects, we can use Collections.sort(). Both these classes have overloaded sort() methods for natural sorting (using Comparable) or sorting based on criteria (using Comparator).<br>Collections internally uses Arrays sorting method, so both of them have same performance except that Collections take sometime to convert list to array.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"38cdf70b-7554-4a43-a832-8d4c9b77ecb9","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.385Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.385Z"},"uniqueId":"2b450101-41e7-4f10-abfe-86ee59962e3a","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c408"},"name":"We can create a read-only collection using Collections.unmodifiableCollection(Collection c)method before passing it as argument, this","heading":"We can create a read-only collection using Collections.unmodifiableCollection(Collection c)method before","smartContent":{"content":"<div><!--block-->We can create a read-only collection using Collections.unmodifiableCollection(Collection c)method before passing it as argument, this will make sure that any operation to change the collection will throw UnsupportedOperationException.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5a92509f-5143-4a90-a161-bb4fe11ddd5a","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.402Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.402Z"},"uniqueId":"f459d2c3-d121-47cb-b471-e8ffc9408fda","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c467"},"name":"We can use Collections.synchronizedCollection(Collection c) to get a synchronized (thread-safe) collection backed by the specified","heading":"We can use Collections.synchronizedCollection(Collection c) to get a synchronized (thread-safe)","smartContent":{"content":"<div><!--block-->We can use Collections.synchronizedCollection(Collection c) to get a synchronized (thread-safe) collection backed by the specified collection.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"55624b3d-5b04-4a47-822c-be9d0a62ae5f","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.421Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.421Z"},"uniqueId":"bea53d2f-3556-4881-a8f6-904d7db17a49","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c4c6"},"name":"Java Collections Framework provides algorithm implementations that are commonly used such as sorting and searching.","heading":"Java Collections Framework provides algorithm implementations that are commonly used","smartContent":{"content":"<div><!--block-->Java Collections Framework provides algorithm implementations that are commonly used such as sorting and searching. Collections class contain these method implementations. Most of these algorithms work on List but some of them are applicable for all kinds of collections.<br>Some of them are&nbsp;</div><ul><li><!--block-->sorting,&nbsp;</li><li><!--block-->searching,&nbsp;</li><li><!--block-->shuffling,&nbsp;</li><li><!--block-->min-max values.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74419a11-965f-417b-b6bc-3ead762b1110","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.438Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.438Z"},"uniqueId":"5fae8c47-0bdf-4524-8c26-aae22e0f6460","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c525"},"name":"The Big-O notation describes the performance of an algorithm in terms of number of elements","heading":"The Big-O notation describes the performance of an algorithm in","smartContent":{"content":"<div><!--block-->The Big-O notation describes the performance of an algorithm in terms of number of elements in a data structure. Since Collection classes are actually data structures, we usually tend to use Big-O notation to chose the collection implementation to use based on time, memory and performance.<br><br></div><div><!--block-->Example 1: ArrayList get(index i) is a constant-time operation and doesn’t depend on the number of elements in the list. So it’s performance in Big-O notation is O(1).<br>Example 2: A linear search on array or list performance is O(n) because we need to search through entire list of elements to find the element.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f63f10c6-908a-492e-97f4-ec4b24eecb57","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.457Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.457Z"},"uniqueId":"2fe2073a-f72f-4dcf-9658-f0bb1726034e","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c584"},"name":"Chosing the right type of collection based on the need, for example if size is","heading":"Chosing the right type of collection based on the need,","smartContent":{"content":"<ol><li><!--block-->Chosing the right type of collection based on the need, for example if size is fixed, we might want to use Array over ArrayList. If we have to iterate over the Map in order of insertion, we need to use TreeMap. If we don’t want duplicates, we should use Set.</li><li><!--block-->Some collection classes allows to specify the initial capacity, so if we have an estimate of number of elements we will store, we can use it to avoid rehashing or resizing.</li><li><!--block-->Write program in terms of interfaces not implementations, it allows us to change the implementation easily at later point of time.</li><li><!--block-->Always use Generics for type-safety and avoid ClassCastException at runtime.</li><li><!--block-->Use immutable classes provided by JDK as key in Map to avoid implementation of hashCode() and equals() for our custom class.</li><li><!--block-->Use Collections utility class as much as possible for algorithms or to get read-only, synchronized or empty collections rather than writing own implementation. It will enhance code-reuse with greater stability and low maintainability.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dfa433b4-3606-45f7-ab96-2406fbc9a33a","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.475Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.475Z"},"uniqueId":"ae98cae7-5cc8-461e-a0a1-3193b0fe42ae","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c5e3"},"name":"PriorityQueue is an unbounded queue based on a priority heap and the elements are ordered","heading":"PriorityQueue is an unbounded queue based on a priority heap","smartContent":{"content":"<div><!--block-->PriorityQueue is an unbounded queue based on a priority heap and the elements are ordered in their natural order or we can provide&nbsp;<a href=\"http://www.journaldev.com/780/comparable-and-comparator-in-java-example\">Comparator</a>&nbsp;for ordering at the time of creation. PriorityQueue doesn’t allow null values and we can’t add any object that doesn’t provide natural ordering or we don’t have any comparator for them for ordering. Java PriorityQueue is not&nbsp;<a href=\"http://www.journaldev.com/1061/thread-safety-in-java\">thread-safe</a>&nbsp;and provided O(log(n)) time for enqueing and dequeing operations. Check this post for&nbsp;<a href=\"http://www.journaldev.com/1642/java-priority-queue-priorityqueue-example\">java priority queue example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4dda0e45-8af8-4380-b1e3-2f01705d3ff6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.493Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.493Z"},"uniqueId":"6844b299-9e4f-4d96-b9b0-5bfbf887344d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c642"},"name":"Generics doesn’t support sub-typing because it will cause issues in achieving type safety. That’s why","heading":"Generics doesn’t support sub-typing because it will cause issues in","smartContent":{"content":"<div><!--block-->Generics doesn’t support sub-typing because it will cause issues in achieving type safety. That’s why List&lt;T&gt; is not considered as a subtype of List&lt;S&gt; where S is the super-type of T. To understanding why it’s not allowed, let’s see what could have happened if it has been supported.<br><br></div><pre><!--block-->List&lt;Long&gt; listLong = new ArrayList&lt;Long&gt;();\nlistLong.add(Long.valueOf(10));List&lt;Number&gt; listNumbers = listLong; // compiler error\nlistNumbers.add(Double.valueOf(1.23));</pre><div><!--block--><br></div><div><!--block-->As you can see from above code that IF generics would have been supporting sub-typing, we could have easily add a Double to the list of Long that would have caused ClassCastException at runtime while traversing the list of Long.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4096901e-b021-4c9c-841e-a20b362f3f3d","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.51Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.51Z"},"uniqueId":"863c6f35-d594-4f3e-beb4-790ed91af7f6","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c6a1"},"name":"We are not allowed to create generic arrays because array carry type information of it’s","heading":"We are not allowed to create generic arrays because array","smartContent":{"content":"<div><!--block-->We are not allowed to create generic arrays because array carry type information of it’s elements at runtime. This information is used at runtime to throw ArrayStoreException if elements type doesn’t match to the defined type. Since generics type information gets erased at runtime by Type Erasure, the array store check would have been passed where it should have failed. Let’s understand this with a simple example code.<br><br></div><pre><!--block-->List&lt;Integer&gt;[] intList = new List&lt;Integer&gt;[5]; // compile errorObject[] objArray = intList;List&lt;Double&gt; doubleList = new ArrayList&lt;Double&gt;();\ndoubleList.add(Double.valueOf(1.23));\nobjArray[0] = doubleList; // this should fail but it would pass because at runtime intList and doubleList both are just List</pre><div><!--block--><br></div><div><!--block-->Arrays are covariant by nature i.e S[] is a subtype of T[] whenever S is a subtype of T but generics doesn’t support covariance or sub-typing as we saw in last question. So if we would have been allowed to create generic arrays, because of type erasure we would not get array store exception even though both types are not related.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"89cc5255-ab85-488e-b9ab-03821c91f57f","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.527Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.527Z"},"uniqueId":"9c3997aa-609b-4ebf-a777-998850b9f7a6","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c6ad"},"name":"Design patterns are used and supported extensively throughout the Java APIs. Here are some examples:","heading":"Design patterns are used and supported extensively throughout the Java","smartContent":{"content":"<div><!--block-->Design patterns are used and supported extensively throughout the Java APIs. Here are some examples:<br><br></div><ul><li><!--block-->The&nbsp;<strong>Model-View-Controller design pattern</strong>&nbsp;is used extensively throughout the&nbsp;<strong>Swing API.</strong></li><li><!--block-->The&nbsp;<strong>getInstance() method</strong>&nbsp;in&nbsp;<strong>java.util.Calendar</strong>&nbsp;is an example of a simple form of the&nbsp;<strong>Factory Method</strong>&nbsp;design pattern.</li><li><!--block-->The classes&nbsp;<strong>java.lang.System</strong>&nbsp;and<strong>&nbsp;java.sql.DriverManager</strong>&nbsp;are examples of the&nbsp;<strong>Singleton pattern</strong>, although they are not implemented using the approach recommended in the GoF book but with static methods.</li><li><!--block-->The&nbsp;<strong>Prototype pattern</strong>&nbsp;is supported in Java through the clone() method defined in class Object and the use of java.lang.Cloneable interface to grant permission for cloning.</li><li><!--block-->The Java Swing classes support the&nbsp;<strong>Command pattern</strong>&nbsp;by providing an Action interface and an AbstractAction class.</li><li><!--block-->The Java 1.1 event model is based on the&nbsp;<strong>observer pattern</strong>. In addition, the interface java.util.Observable and the class java.util.Observer provide support for this pattern.</li><li><!--block-->The&nbsp;<strong>Adapter pattern</strong>&nbsp;is used extensively by the adapter classes in java.awt.event.</li><li><!--block-->The&nbsp;<strong>Proxy pattern</strong>&nbsp;is used extensively in the implementation of&nbsp;<strong>Java's Remote Method Invocation (RMI)</strong>&nbsp;and Interface&nbsp;<strong>Definition Language (IDL)</strong>&nbsp;features.</li><li><!--block-->The structure of Component and Container classes in java.awt provide a good example of the&nbsp;<strong>Composite pattern</strong>.</li><li><!--block-->The&nbsp;<strong>Bridge pattern</strong>&nbsp;can be found in the separation of the components in java.awt (e.g., Button and List), and their counterparts in java.awt.peer.</li></ul><div><!--block-->Additional examples and details on the use of design patterns in the Java APIs can be found in the following references:</div><ul><li><!--block--><a href=\"http://www1.fatbrain.com/asp/bookinfo/bookinfo.asp?theisbn=0262561158\">[Felleisen 1998] Matthias Felleisen and Daniel P. Friedman,&nbsp;<em>A Little Java, a Few Patterns, MIT Press, 1998.</em></a></li><li><!--block--><a href=\"http://www1.fatbrain.com/asp/bookinfo/bookinfo.asp?theisbn=0471258393\"><em>[Grand 1998] Mark Grand, Patterns in Java, Volume 1, John Wiley &amp; Sons, 1998.</em></a></li><li><!--block--><a href=\"http://www1.fatbrain.com/asp/bookinfo/bookinfo.asp?theisbn=0471258415\"><em>[Grand 1999] Mark Grand, Patterns in Java, Volume 2, John Wiley &amp; Sons, 1999.</em></a></li><li><!--block--><a href=\"http://www1.fatbrain.com/asp/bookinfo/bookinfo.asp?theisbn=0201485397\"><em>[Cooper 2000] James W. Cooper, Java Design Patterns: A Tutorial, Addison-Wesley, 2000.</em></a></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0c6b3327-87e9-4964-b889-f9c9c8bc6a31","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.551Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.551Z"},"uniqueId":"858ad0dc-4393-4188-b419-dbab29618530","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c6ec"},"name":"The Spring web MVC framework provides model-view-controller architecture and ready components that can be used","heading":"The Spring web MVC framework provides model-view-controller architecture and ready","smartContent":{"content":"<div><!--block--><br>The Spring web MVC framework provides&nbsp;<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">model-view-controller</a>&nbsp;architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between model, view and controller parts of application. Spring framework provides lots of advantages over other MVC frameworks e.g.<br><br></div><ol><li><!--block-->Clear separation of roles – controller, validator, command object, form object, model object, DispatcherServlet, handler mapping, view resolver, etc. Each role can be fulfilled by a specialized object.</li><li><!--block-->Powerful and straightforward configuration of both framework and application classes as JavaBeans.</li><li><!--block-->Reusable business code – no need for duplication. You can use existing business objects as command or form objects instead of mirroring them in order to extend a particular framework base class.</li><li><!--block-->Customizable binding and validation</li><li><!--block-->Customizable handler mapping and view resolution</li><li><!--block-->Customizable locale and theme resolution</li><li><!--block-->A JSP form tag library, introduced in Spring 2.0, that makes writing forms in JSP pages much easier. etc.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"260434e9-d717-42eb-ab05-4a7b48c916b6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.577Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.577Z"},"uniqueId":"c0211af0-2c7c-4bab-b2ff-83eb9b40a9b0","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c715"},"name":"Spring’s web MVC framework is, like many other web MVC frameworks, request-driven, designed around a","heading":"Spring’s web MVC framework is, like many other web MVC","smartContent":{"content":"<div><!--block--><strong><br></strong>Spring’s web MVC framework is, like many other web MVC frameworks, request-driven, designed around a central Servlet that handles all the HTTP requests and responses. Spring’s DispatcherServlet however, does more than just that. It is completely integrated with the Spring IoC container so it allows you to use every feature that Spring has.<br><br></div><div><!--block-->After receiving an HTTP request, DispatcherServlet consults the HandlerMapping (configuration files) to call the appropriate Controller. The Controller takes the request and calls the appropriate service methods and set model data and then returns view name to the DispatcherServlet. The DispatcherServlet will take help from ViewResolver to pickup the defined view for the request. Once view is finalized, The DispatcherServlet passes the model data to the view which is finally rendered on the browser.<br><br></div><pre><!--block-->&lt;web-app&gt;\n  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n   \n  &lt;servlet&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n            &lt;servlet-class&gt;\n                org.springframework.web.servlet.DispatcherServlet\n            &lt;/servlet-class&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n \n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n     \n&lt;/web-app&gt;</pre><div><!--block-->By default, DispatcherServlet loads its configuration file using &lt;servlet_name&gt;-servlet.xml. E.g. with above web.xml file, DispatcherServlet will try to find spring-servlet.xml file in classpath.<br><br></div><div><!--block-->ContextLoaderListener reads the spring configuration file (with value given against “contextConfigLocation” in web.xml), parse it and loads the beans defined in that config file. e.g.</div><pre><!--block-->&lt;servlet&gt;\n    &lt;servlet-name&gt;spring&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;\n        org.springframework.web.servlet.DispatcherServlet\n    &lt;/servlet-class&gt;\n     \n    &lt;init-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/applicationContext.xml&lt;/param-value&gt;\n    &lt;/init-param&gt;\n     \n    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a0da5920-0912-4803-9559-e9d91f0a966f","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.592Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.592Z"},"uniqueId":"ab7887b1-a460-40bf-8f29-d1a8970f6d99","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c73e"},"name":"A front controller is defined as “a controller which handles all requests for a Web","heading":"A front controller is defined as “a controller which handles","smartContent":{"content":"<div><!--block--><strong><br></strong>A front controller is defined as “a controller which handles all requests for a Web Application.”&nbsp;<strong>DispatcherServlet (actually a servlet) is the front controller in Spring MVC that intercepts every request and then dispatches/forwards requests to an appropriate controller.</strong><br><br></div><div><!--block-->When a web request is sent to a Spring MVC application, dispatcher servlet first receives the request. Then it organizes the different components configured in Spring’s web application context (e.g. actual request handler controller and view resolvers) or annotations present in the controller itself, all needed to handle the request.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6488eefc-c806-4c98-b450-79687df6c23e","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.607Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.607Z"},"uniqueId":"c706c8c0-33d9-4d3f-a61e-7048104a120f","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c767"},"name":"To configure java based MVC application, first add required dependencies. <!-- Spring MVC support -->","heading":"To configure java based MVC application, first add required dependencies.","smartContent":{"content":"<div><!--block-->To configure java based MVC application, first add required dependencies.</div><pre><!--block-->&lt;!-- Spring MVC support --&gt;\n          \n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;org.springframework&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;spring-webmvc&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;4.1.4.RELEASE&lt;/<strong>version</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;\n \n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;org.springframework&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;spring-web&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;4.1.4.RELEASE&lt;/<strong>version</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;\n  \n&lt;!-- Tag libs support for view layer --&gt;\n  \n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;javax.servlet&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;jstl&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;1.2&lt;/<strong>version</strong>&gt;\n    &lt;<strong>scope</strong>&gt;runtime&lt;/<strong>scope</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;\n  \n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;taglibs&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;standard&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;1.1.2&lt;/<strong>version</strong>&gt;\n    &lt;<strong>scope</strong>&gt;runtime&lt;/<strong>scope</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;</pre><div><!--block-->Now add DispatcherServlet entry in&nbsp;<em>web.xml</em>&nbsp;file so that all incoming requests come though DispatcherServlet only.<br><br></div><pre><!--block-->&lt;<strong>servlet</strong>&gt;\n    &lt;<strong>servlet-name</strong>&gt;spring&lt;/<strong>servlet-name</strong>&gt;\n        &lt;<strong>servlet-class</strong>&gt;\n            org.springframework.web.servlet.DispatcherServlet\n        &lt;/<strong>servlet-class</strong>&gt;\n    &lt;<strong>load-on-startup</strong>&gt;1&lt;/<strong>load-on-startup</strong>&gt;\n&lt;/<strong>servlet</strong>&gt;\n \n&lt;<strong>servlet-mapping</strong>&gt;\n    &lt;<strong>servlet-name</strong>&gt;spring&lt;/<strong>servlet-name</strong>&gt;\n    &lt;<strong>url-pattern</strong>&gt;/&lt;/<strong>url-pattern</strong>&gt;\n&lt;/<strong>servlet-mapping</strong>&gt;</pre><div><!--block-->Now add below entries in spring configuration file.<br><br></div><pre><!--block-->&lt;<strong>beans</strong>&gt;\n    &lt;!-- Scan all classes in this path for spring specific annotations --&gt;\n    &lt;<strong>context:component-scan</strong> base-package=\"com.howtodoinjava.demo\" /&gt;\n  \n    &lt;<strong>bean</strong> class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\" /&gt;\n    &lt;<strong>bean</strong> class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\" /&gt;\n     \n    &lt;!-- Vierw resolver configuration --&gt;\n    &lt;<strong>bean</strong> class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n        &lt;<strong>property</strong> name=\"prefix\" value=\"/WEB-INF/views/\" /&gt;\n        &lt;<strong>property</strong> name=\"suffix\" value=\".jsp\" /&gt;\n    &lt;/<strong>bean</strong>&gt;\n  \n&lt;/<strong>beans</strong>&gt;</pre><div><!--block-->Add controller code.<br><br></div><pre><!--block-->@Controller\n@RequestMapping(\"/employee-module\")\n<strong>public</strong> <strong>class</strong> EmployeeController\n{\n    @Autowired\n    EmployeeManager manager;\n  \n    @RequestMapping(value = \"/getAllEmployees\", method = RequestMethod.GET)\n    <strong>public</strong> String getAllEmployees(Model model)\n    {\n        model.addAttribute(\"employees\", manager.getAllEmployees());\n        <strong>return</strong> \"employeesListDisplay\";\n    }\n}</pre><div><!--block-->Additionally you should add manager and dao layer classes as well. Finally you add the jsp file to display the view.<br><br></div><div><!--block-->I will suggest to read above linked tutorial for complete understanding.<br><br></div><pre><!--block-->Read More : <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-mvc-hello-world-example/\">Spring MVC Hello World Example</a></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"311d435e-035d-4e99-9352-2809ee270ffd","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.623Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.623Z"},"uniqueId":"96099896-a5f3-4dd0-ba0a-f1ec454228f6","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c790"},"name":"YES. You can have multiple spring context files. There are two ways to make spring","heading":"YES. You can have multiple spring context files. There are","smartContent":{"content":"<div><!--block-->YES. You can have multiple spring context files. There are two ways to make spring read and configure them.<br><br></div><div><!--block-->a) Specify all files in web.xml file using contextConfigLocation init parameter.<br><br></div><pre><!--block-->&lt;<strong>servlet</strong>&gt;\n        &lt;<strong>servlet-name</strong>&gt;spring&lt;/<strong>servlet-name</strong>&gt;\n        &lt;<strong>servlet-class</strong>&gt;\n            org.springframework.web.servlet.DispatcherServlet\n        &lt;/<strong>servlet-class</strong>&gt;\n        &lt;<strong>init-param</strong>&gt;\n            &lt;<strong>param-name</strong>&gt;contextConfigLocation&lt;/<strong>param-name</strong>&gt;\n            &lt;<strong>param-value</strong>&gt;\n                WEB-INF/spring-dao-hibernate.xml,\n                WEB-INF/spring-services.xml,\n                WEB-INF/spring-security.xml\n            &lt;/<strong>param-value</strong>&gt;\n        &lt;/<strong>init-param</strong>&gt;\n        &lt;<strong>load-on-startup</strong>&gt;1&lt;/<strong>load-on-startup</strong>&gt;\n    &lt;/<strong>servlet</strong>&gt;\n \n    &lt;<strong>servlet-mapping</strong>&gt;\n        &lt;<strong>servlet-name</strong>&gt;spring&lt;/<strong>servlet-name</strong>&gt;\n        &lt;<strong>url-pattern</strong>&gt;/&lt;/<strong>url-pattern</strong>&gt;\n    &lt;/<strong>servlet-mapping</strong>&gt;</pre><div><!--block-->b) OR, you can&nbsp;<strong>import them into existing configuration file</strong>&nbsp;you have already configured.<br><br></div><pre><!--block-->&lt;<strong>beans</strong>&gt;\n    &lt;<strong>import</strong> resource=\"spring-dao-hibernate.xml\"/&gt;\n    &lt;<strong>import</strong> resource=\"spring-services.xml\"/&gt;\n    &lt;<strong>import</strong> resource=\"spring-security.xml\"/&gt;\n     \n    ... //Other configuration stuff\n \n&lt;/<strong>beans</strong>&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"314e81fb-c1ed-4ff1-991b-84f8c234ea9a","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.637Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.637Z"},"uniqueId":"ba4ff9ae-ba0b-4fc5-aa8a-6078226b417c","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c7b9"},"name":"1) First big difference between both tags is that <context:annotation-config> is used to activate applied","heading":"1) First big difference between both tags is that <context:annotation-config>","smartContent":{"content":"<div><!--block-->1) First big difference between both tags is that&nbsp;<em>&lt;context:annotation-config&gt;</em>&nbsp;is&nbsp;<strong>used to activate applied annotations in already registered beans in application context</strong>. Note that it simply does not matter whether bean was registered by which mechanism e.g. using&nbsp;<em>&lt;context:component-scan&gt;</em>&nbsp;or it was defined in application-context.xml file itself.<br><br></div><div><!--block-->2) Second difference is driven from first difference itself. It&nbsp;<strong>registers the beans defined in config file into context + it also scans the annotations inside beans and activate them</strong>. So&nbsp;<em>&lt;context:component-scan&gt;</em>&nbsp;does what&nbsp;<em>&lt;context:annotation-config&gt;</em>&nbsp;does, but additionally it scan the packages and register the beans in application context.<br><br></div><pre><!--block--><strong>&lt;context:annotation-config&gt; = Scanning and activating annotations in “already registered beans”.\n\n&lt;context:component-scan&gt; = Bean Registration + Scanning and activating annotations</strong></pre><div><!--block--><br></div><pre><!--block-->Read More : <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-mvc-difference-between-contextannotation-config-vs-contextcomponent-scan/\">Difference between annotation-config and component-scan</a></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a095d367-01c7-4fe8-a64b-70ec1abdc791","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.655Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.655Z"},"uniqueId":"0a9dcfbb-3b41-4313-8975-24c70c5bab44","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c7e2"},"name":"1) The @Component annotation marks a java class as a bean so the component-scanning mechanism","heading":"1) The @Component annotation marks a java class as a","smartContent":{"content":"In Spring Framework, `@Component`, `@Controller`, `@Repository`, and `@Service` are specializations of the `@Component` annotation, used to mark classes as Spring-managed beans. They indicate the role the class plays in the overall application architecture, helping to organize and manage the application structure more effectively.\n\n### 1. **@Component**:\n- **Purpose**: General-purpose stereotype annotation to mark a class as a Spring-managed component (or bean).\n- **Use Case**: Used when none of the other specific stereotypes apply. It indicates that the class is a Spring component, without specifying any specific role.\n- **Example**:\n  ```java\n  @Component\n  public class MyComponent {\n      // business logic\n  }\n  ```\n\n### 2. **@Controller**:\n- **Purpose**: Specialized version of `@Component`, used to define a Spring MVC controller.\n- **Use Case**: Applied to classes that handle web requests (typically HTTP requests). It indicates that the class is responsible for processing incoming web requests, handling user input, and returning appropriate responses.\n- **Additional Functionality**:\n  - Typically used in combination with `@RequestMapping` to map web requests to specific handler methods within the controller.\n- **Example**:\n  ```java\n  @Controller\n  public class MyController {\n      \n      @RequestMapping(\"/greet\")\n      public String greet() {\n          return \"hello\";\n      }\n  }\n  ```\n\n### 3. **@Repository**:\n- **Purpose**: Specialized version of `@Component`, used to indicate that the class provides the mechanism for CRUD (Create, Read, Update, Delete) operations on a data store.\n- **Use Case**: Applied to Data Access Object (DAO) classes that interact with the database. It encapsulates database operations and is responsible for data retrieval and persistence.\n- **Additional Functionality**:\n  - Spring may translate persistence-related exceptions into Spring's data access exceptions (e.g., `DataAccessException`) automatically when this annotation is used.\n- **Example**:\n  ```java\n  @Repository\n  public class MyRepository {\n      \n      public void save(Object entity) {\n          // database save logic\n      }\n  }\n  ```\n\n### 4. **@Service**:\n- **Purpose**: Specialized version of `@Component`, used to indicate that the class holds business logic.\n- **Use Case**: Applied to service layer classes where business logic is implemented. It typically involves calling methods from the repository layer and performing business operations.\n- **Example**:\n  ```java\n  @Service\n  public class MyService {\n      \n      @Autowired\n      private MyRepository repository;\n      \n      public void performBusinessLogic() {\n          // business logic using repository\n          repository.save(new Object());\n      }\n  }\n  ```\n\n### **Summary of Differences**:\n\n- **@Component**: Generic stereotype for any Spring-managed component.\n- **@Controller**: Used specifically for Spring MVC controllers, handling HTTP requests.\n- **@Repository**: Indicates a data access layer component (DAO) that interacts with the database.\n- **@Service**: Indicates a service layer component that contains business logic.\n\n### **Why Use These Annotations?**\n\nUsing these annotations makes the application's architecture clear and consistent, and helps Spring identify and manage components more effectively. By categorizing components by their role in the application, developers can maintain a cleaner and more modular codebase. These annotations also enable Spring to apply special processing to certain classes, such as exception translation in the case of `@Repository`, or request handling in the case of `@Controller`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"65f11806-63c0-48ca-ba54-91e19887d7a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.67Z"},"updatedDate":{"$date":"2024-08-26T20:37:46.419Z"},"uniqueId":"0a887dac-7ede-465b-b612-053de5df9d2a","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c80b"},"name":"ViewResolver is an interface to be implemented by objects that can resolve views by name.","heading":"ViewResolver is an interface to be implemented by objects that","smartContent":{"content":"<div><!--block--><em>ViewResolver</em>&nbsp;is an interface to be implemented by objects that can resolve views by name. There are plenty of ways using which you can resolve view names. These ways are supported by various in-built implementations of this interface. Most commonly used implementation is&nbsp;<em>InternalResourceViewResolver</em>&nbsp;class. It defines prefix and suffixproperties to resolve the view component.<br><br></div><pre><!--block-->&lt;<strong>bean</strong> class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n    &lt;<strong>property</strong> name=\"prefix\" value=\"/WEB-INF/views/\" /&gt;\n    &lt;<strong>property</strong> name=\"suffix\" value=\".jsp\" /&gt;\n&lt;/<strong>bean</strong>&gt;</pre><div><!--block-->So with above view resolver configuration, if controller method return “<em>login</em>” string, then the “/WEB-INF/views/login.jsp” file will be searched and rendered.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"093e37cd-7068-48f5-9fa8-9895742c6981","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.684Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.684Z"},"uniqueId":"d3b10d42-3a84-4c0e-8043-1a0f5ac9c873","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c834"},"name":"Spring comes with MultipartResolver to handle file upload in web application. There are two concrete","heading":"Spring comes with MultipartResolver to handle file upload in web","smartContent":{"content":"<div><!--block-->Spring comes with MultipartResolver to handle file upload in web application. There are two concrete implementations included in Spring:<br><br></div><ol><li><!--block-->CommonsMultipartResolver for Jakarta Commons FileUpload</li><li><!--block-->StandardServletMultipartResolver for Servlet 3.0 Part API</li></ol><div><!--block-->To define an implementation, create a bean with the id “<em>multipartResolver</em>” in a DispatcherServlet’s application context. Such a resolver gets applied to all requests handled by that DispatcherServlet.<br><br></div><div><!--block-->If a DispatcherServlet detects a multipart request, it will resolve it via the configured MultipartResolver and pass on a wrapped HttpServletRequest. Controllers can then cast their given request to the MultipartHttpServletRequestinterface, which permits access to any MultipartFiles.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0af7e460-dee8-453b-8040-da6232e355e7","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.697Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.697Z"},"uniqueId":"36e2d643-79db-498a-aee7-131e773f393a","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c85d"},"name":"Let’s say we are going to use CommonsMultipartResolver which uses the Apache commons upload library","heading":"Let’s say we are going to use CommonsMultipartResolver which uses","smartContent":{"content":"<div><!--block-->Let’s say we are going to use CommonsMultipartResolver which uses the Apache commons upload library to handle the file upload in a form. So you will need to add the commons-fileupload.jar and commons-io.jar dependencies.<br><br></div><pre><!--block-->&lt;!-- Apache Commons Upload --&gt;\n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;commons-fileupload&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;commons-fileupload&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;1.2.2&lt;/<strong>version</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;\n \n&lt;!-- Apache Commons Upload --&gt;\n&lt;<strong>dependency</strong>&gt;\n    &lt;<strong>groupId</strong>&gt;commons-io&lt;/<strong>groupId</strong>&gt;\n    &lt;<strong>artifactId</strong>&gt;commons-io&lt;/<strong>artifactId</strong>&gt;\n    &lt;<strong>version</strong>&gt;1.3.2&lt;/<strong>version</strong>&gt;\n&lt;/<strong>dependency</strong>&gt;</pre><div><!--block-->The following declaration needs to be made in the application context file to enable the MultipartResolver (along with including necessary jar file in the application):<br><br></div><pre><!--block-->&lt;<strong>bean</strong> id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt;\n    &lt;!-- one of the properties available; the maximum file size in bytes --&gt;\n    &lt;<strong>property</strong> name=\"maxUploadSize\" value=\"100000\"/&gt;\n&lt;/<strong>bean</strong>&gt;</pre><div><!--block-->Now create model class FileUploadForm which will hold the multipart data submitted from HTML form.<br><br></div><pre><!--block--><strong>import</strong> org.springframework.web.multipart.MultipartFile;\n \n<strong>public</strong> <strong>class</strong> FileUploadForm \n{\n    <strong>private</strong> MultipartFile file;\n \n    <strong>public</strong> MultipartFile getFile() {\n        <strong>return</strong> file;\n    }\n \n    <strong>public</strong> <strong>void</strong> setFile(MultipartFile file) {\n        <strong>this</strong>.file = file;\n    }\n}</pre><div><!--block-->Now create FileUploadController class which will actually handle the upload logic.</div><div><!--block--><br></div><pre><!--block--><strong>import</strong> org.springframework.stereotype.Controller;\n<strong>import</strong> org.springframework.ui.Model;\n<strong>import</strong> org.springframework.web.bind.annotation.ModelAttribute;\n<strong>import</strong> org.springframework.web.bind.annotation.RequestMapping;\n<strong>import</strong> org.springframework.web.bind.annotation.RequestMethod;\n<strong>import</strong> org.springframework.web.multipart.MultipartFile;\n<strong>import</strong> com.howtodoinjava.form.FileUploadForm;\n \n@Controller\n<strong>public</strong> <strong>class</strong> FileUploadController \n{\n    @RequestMapping(value = \"/upload\", method = RequestMethod.POST)\n    <strong>public</strong> String save(@ModelAttribute(\"uploadForm\") FileUploadForm uploadForm, Model map) {\n \n        MultipartFile multipartFile = uploadForm.getFile();\n \n        String fileName = \"default.txt\";\n \n        <strong>if</strong> (multipartFile != <strong>null</strong>) {\n            fileName = multipartFile.getOriginalFilename();\n        }\n         \n        //read and store the file as you like\n \n        map.addAttribute(\"files\", fileName);\n        <strong>return</strong> \"file_upload_success\";\n    }\n}</pre><div><!--block-->The upload JSP file looks like this:</div><div><!--block--><br></div><pre><!--block-->&lt;%@ taglib prefix=\"form\" uri=\"<a href=\"http://www.springframework.org/tags/form\">http://www.springframework.org/tags/form</a>\"%&gt;\n&lt;<strong>html</strong>&gt;\n&lt;<strong>body</strong>&gt;\n    &lt;<strong>h2</strong>&gt;Spring MVC file upload example&lt;/<strong>h2</strong>&gt;\n    &lt;<strong>form:form</strong> method=\"post\" action=\"save.html\" modelAttribute=\"uploadForm\" enctype=\"multipart/form-data\"&gt;\n        Please select a file to upload : &lt;<strong>input</strong> type=\"file\" name=\"file\" /&gt;\n        &lt;<strong>input</strong> type=\"submit\" value=\"upload\" /&gt;\n        &lt;<strong>span</strong>&gt;&lt;<strong>form:errors</strong> path=\"file\" cssClass=\"error\" /&gt;&lt;/<strong>span</strong>&gt;\n    &lt;/<strong>form:form</strong>&gt;\n&lt;/<strong>body</strong>&gt;\n&lt;/<strong>html</strong>&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"00285d0e-f80d-4192-a0e2-c2f78ad3ae28","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.712Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.712Z"},"uniqueId":"40e38684-399f-4ff6-b44b-3664e1dce893","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c886"},"name":"Spring supports validations primarily into two ways. Using JSR-303 Annotations and any reference implementation e.g.","heading":"Spring supports validations primarily into two ways. Using JSR-303 Annotations","smartContent":{"content":"<div><!--block-->Spring supports validations primarily into two ways.<br><br></div><ol><li><!--block-->Using&nbsp;<strong>JSR-303 Annotations</strong>&nbsp;and any reference implementation e.g. Hibernate Validator</li><li><!--block-->Using&nbsp;<strong>custom implementation of org.springframework.validation.Validator</strong>&nbsp;interface</li></ol><div><!--block-->In next question, you see an example about how to use validation support in spring MVC application.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"59be853e-ab58-40c3-825a-09e701bff0fb","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.725Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.725Z"},"uniqueId":"da4f350d-1153-4e19-ab67-db0beb03aef8","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c8af"},"name":"Spring MVC supports validation by means of a validator object that implements the Validator interface.","heading":"Spring MVC supports validation by means of a validator object","smartContent":{"content":"<div><!--block-->Spring MVC supports validation by means of a validator object that implements the Validator interface. You need to create a class and implement Validator interface. In this custom validator class, you use utility methods such asrejectIfEmptyOrWhitespace() and rejectIfEmpty() in the ValidationUtils class to validate the required form fields.<br><br></div><pre><!--block-->@Component\n<strong>public</strong> <strong>class</strong> EmployeeValidator <strong>implements</strong> Validator\n{\n    <strong>public</strong> <strong>boolean</strong> supports(Class clazz) {\n        <strong>return</strong> EmployeeVO.<strong>class</strong>.isAssignableFrom(clazz);\n    }\n  \n    <strong>public</strong> <strong>void</strong> validate(Object target, Errors errors)\n    {\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"firstName\", \"error.firstName\", \"First name is required.\");\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"lastName\", \"error.lastName\", \"Last name is required.\");\n        ValidationUtils.rejectIfEmptyOrWhitespace(errors, \"email\", \"error.email\", \"Email is required.\");\n    }\n}</pre><div><!--block-->If any of form fields is empty, these methods will create a field error and bind it to the field. The second argument of these methods is the property name, while the third and fourth are the error code and default error message.<br><br></div><div><!--block-->To activate this custom validator as a spring managed bean, you need to do one of following things:<br><br></div><div><!--block-->1) Add @Component annotation to EmployeeValidator class and activate annotation scanning on the package containing such declarations.<br><br></div><pre><!--block-->&lt;<strong>context:component-scan</strong> base-package=\"com.howtodoinjava.demo\" /&gt;</pre><div><!--block-->2) Alternatively, you can register the validator class bean directly in context file.<br><br></div><pre><!--block-->&lt;<strong>bean</strong> id=\"employeeValidator\" class=\"com.howtodoinjava.demo.validator.EmployeeValidator\" /&gt;</pre><div><!--block--><br></div><pre><!--block-->Read More : Spring MVC <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-mvc-custom-validator-example/\">Custom Validator</a> and <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-bean-validation-example-with-jsr-303-annotations/\">JSR-303 Annotations</a> Examples</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"692efacf-5ec2-49b7-aee9-a96cc3245180","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.74Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.74Z"},"uniqueId":"e93a8b8e-818d-435e-b067-678e33a567fb","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c8d8"},"name":"As you know about servlet filters that they can pre-handle and post-handle every web request","heading":"As you know about servlet filters that they can pre-handle","smartContent":{"content":"<div><!--block-->As you know about servlet filters that they can pre-handle and post-handle every web request they serve — before and after it’s handled by that servlet. In the similar way, you can use HandlerInterceptor interface in your spring mvc application&nbsp;<strong>to pre-handle and post-handle web requests</strong>&nbsp;that are handled by Spring MVC controllers. These handlers are mostly used to manipulate the model attributes returned/submitted they are passed to the views/controllers.<br><br></div><div><!--block-->A handler interceptor can be registered for particular URL mappings, so it only intercepts requests mapped to certain URLs. Each handler interceptor must implement the HandlerInterceptor interface, which contains three callback methods for you to implement: preHandle(), postHandle() and afterCompletion().<br><br></div><div><!--block-->Problem with HandlerInterceptor interface is that your new class will have to implement all three methods irrespective of whether it is needed or not. To avoid overriding, you can use HandlerInterceptorAdapter class. This class implements HandlerInterceptor and provide default blank implementations.<br><br></div><pre><!--block-->Read More : <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-intercepting-requests-using-handlerinterceptor-with-example/\">Spring MVC Interceptor Example</a></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"89ffea9f-ec5a-47ff-858e-0a7b88c4d1d9","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.754Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.754Z"},"uniqueId":"e573859f-6646-40aa-afd2-764ce62d3da8","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c901"},"name":"In a Spring MVC application, you can register one or more exception resolver beans in","heading":"In a Spring MVC application, you can register one or","smartContent":{"content":"<div><!--block-->In a Spring MVC application, you can register one or more exception resolver beans in the web application context to resolve uncaught exceptions. These beans have to implement the HandlerExceptionResolver interface forDispatcherServlet to auto-detect them. Spring MVC comes with a simple exception resolver for you to map each category of exceptions to a view i.e. SimpleMappingExceptionResolver to map each category of exceptions to a view in a configurable way.<br><br></div><div><!--block-->Let’s say we have an exception class i.e. AuthException. And we want that everytime this exception is thrown from anywhere into application, we want to show a pre-determined view page /WEB-INF/views/error/authExceptionView.jsp. So the configuration would be.<br><br></div><pre><!--block-->&lt;<strong>bean</strong> class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\"&gt;\n    &lt;<strong>property</strong> name=\"exceptionMappings\"&gt;\n        &lt;<strong>props</strong>&gt;\n            &lt;<strong>prop</strong> key=\"com.howtodoinjava.demo.exception.AuthException\"&gt;\n                error/authExceptionView\n            &lt;/<strong>prop</strong>&gt;\n        &lt;/<strong>props</strong>&gt;\n    &lt;/<strong>property</strong>&gt;\n    &lt;<strong>property</strong> name=\"defaultErrorView\" value=\"error/genericView\"/&gt;\n&lt;/<strong>bean</strong>&gt;</pre><div><!--block-->The “<em>defaultErrorView</em>” property can be configured to show a generic message for all other exceptions which are not configured inside “<em>exceptionMappings</em>” list.<br><br></div><pre><!--block-->Read More : <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/\">Spring MVC SimpleMappingExceptionResolver Example</a></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e6c324a8-3131-411e-a581-4e405dd4fa19","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.769Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.769Z"},"uniqueId":"9c6cf39d-6203-413d-a9b2-1e2c6a0f41c0","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c92a"},"name":"Spring framework is shipped with LocaleResolver to support the internationalization and thus localization as well.","heading":"Spring framework is shipped with LocaleResolver to support the internationalization","smartContent":{"content":"<div><!--block-->Spring framework is shipped with LocaleResolver to support the internationalization and thus localization as well. To make Spring MVC application supports the internationalization, you will need to register two beans.<br><br></div><div><!--block-->1)&nbsp;<strong>SessionLocaleResolver</strong>&nbsp;: It resolves locales by inspecting a predefined attribute in a user’s session. If the session attribute doesn’t exist, this locale resolver determines the default locale from the accept-language HTTP header.<br><br></div><pre><!--block-->&lt;<strong>bean</strong> id=\"localeResolver\" class=\"org.springframework.web.servlet.i18n.SessionLocaleResolver\"&gt;\n    &lt;<strong>property</strong> name=\"defaultLocale\" value=\"en\" /&gt;\n&lt;/<strong>bean</strong>&gt;</pre><div><!--block-->2)&nbsp;<strong>LocaleChangeInterceptor</strong>&nbsp;: This interceptor detects if a special parameter is present in the current HTTP request. The parameter name can be customized with the paramName property of this interceptor. If such a parameter is present in the current request, this interceptor changes the user’s locale according to the parameter value.<br><br></div><pre><!--block-->&lt;<strong>bean</strong> id=\"localeChangeInterceptor\" class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\"&gt;\n    &lt;<strong>property</strong> name=\"paramName\" value=\"lang\" /&gt;\n&lt;/<strong>bean</strong>&gt;\n \n&lt;!-- Enable the interceptor --&gt;\n&lt;<strong>bean</strong> class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\"&gt;\n    &lt;<strong>property</strong> name=\"interceptors\"&gt;\n        &lt;<strong>list</strong>&gt;\n            &lt;<strong>ref</strong> bean=\"localeChangeInterceptor\" /&gt;\n        &lt;/<strong>list</strong>&gt;\n    &lt;/<strong>property</strong>&gt;\n&lt;/<strong>bean</strong>&gt;</pre><div><!--block-->Next step is to have each locale specific properties file having texts in that locale specific language e.g.messages.properties and messages_zh_CN.properties etc.<br><br></div><pre><!--block-->Read More : <a href=\"http://howtodoinjava.com/spring/spring-mvc/spring-mvc-internationalization-i18n-and-localization-i10n-example/\">Spring MVC Localization (i10n) Example</a></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"42de80a2-8196-4ce3-b803-20b5d8d7a525","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.783Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.783Z"},"uniqueId":"a40f6988-c82e-435e-bc8b-16dc051f528e","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c953"},"name":"Simply implement ServletContextAware and ServletConfigAware interfaces and override below methods. @Controller @RequestMapping(value = \"/magic\") public","heading":"Simply implement ServletContextAware and ServletConfigAware interfaces and override below methods.","smartContent":{"content":"<div><!--block-->Simply implement ServletContextAware and ServletConfigAware interfaces and override below methods.<br><br></div><pre><!--block-->@Controller\n@RequestMapping(value = \"/magic\")\n<strong>public</strong> <strong>class</strong> SimpleController <strong>implements</strong> ServletContextAware, ServletConfigAware {\n \n    <strong>private</strong> ServletContext context;\n    <strong>private</strong> ServletConfig config;\n \n    @Override\n    <strong>public</strong> <strong>void</strong> setServletConfig(<strong>final</strong> ServletConfig servletConfig) {\n        <strong>this</strong>.config = servletConfig;\n \n    }\n \n    @Override\n    <strong>public</strong> <strong>void</strong> setServletContext(<strong>final</strong> ServletContext servletContext) {\n        <strong>this</strong>.context = servletContext;\n    }\n     \n    //other code\n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"650a8fdd-cc66-4553-b06e-dabfeec3e684","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.795Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.795Z"},"uniqueId":"318055d0-f28b-4003-8bfb-27f6f07efa2e","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c97c"},"name":"For using servlet container configured JNDI DataSource, we need to configure it in the spring","heading":"For using servlet container configured JNDI DataSource, we need to","smartContent":{"content":"<div><!--block-->For using servlet container configured JNDI DataSource, we need to configure it in the spring bean configuration file and then inject it to spring beans as dependencies. Then we can use it with JdbcTemplate to perform database operations.</div><pre><!--block-->&lt;<strong>bean</strong> id=\"dataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n    &lt;<strong>property</strong> name=\"jndiName\" value=\"java:comp/env/jdbc/MySQLDB\"/&gt;\n&lt;/<strong>bean</strong>&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"34559ffb-b1c8-4455-a616-dfc9cbb87e88","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.809Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.809Z"},"uniqueId":"a282a6be-d137-4aba-9d1c-6dc27407d184","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1c9a5"},"name":"3-tier is a Architecture Style and MVC is a Design Pattern. ?﻿ ﻿? In larger","heading":"3-tier is a Architecture Style and MVC is a Design","smartContent":{"content":"<div><!--block-->3-tier is a Architecture Style and MVC is a Design Pattern.<br><br></div><div><!--block--><a href=\"http://howtodoinjava.com/wp-content/uploads/2015/02/3-tier-architechture-with-mvc-part-of-it.png\">?<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:342,&quot;url&quot;:&quot;http://howtodoinjava.com/wp-content/uploads/2015/02/3-tier-architechture-with-mvc-part-of-it.png&quot;,&quot;width&quot;:465}\" data-trix-content-type=\"image\" data-trix-id=\"89156\" contenteditable=\"false\"><img src=\"http://howtodoinjava.com/wp-content/uploads/2015/02/3-tier-architechture-with-mvc-part-of-it.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/89156/89157/http://howtodoinjava.com/wp-content/uploads/2015/02/3-tier-architechture-with-mvc-part-of-it.png\" width=\"465\" height=\"342\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>?</a><br><br></div><div><!--block-->In larger applications MVC is the presentation tier only of an 3-tier architecture. The models views and controllers are only concerned with the presentation, and make use of a middle tier to populate the models with data from the data tier.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7f98ba18-39af-4967-85cb-ee5f4759e866","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.823Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.823Z"},"uniqueId":"3fb7ba33-4ae5-4c28-bb30-2af6ed2af9d7","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1ca0e"},"name":"A. A build tool should have: Compile java code and build jar, war and ear","heading":"A. A build tool should have: Compile java code and","smartContent":{"content":"<div><!--block-->A. A build tool should have:<br><br></div><ul><li><!--block-->Compile java code and build jar, war and ear files for deployment and release.</li><li><!--block-->Versioning and dependency management</li><li><!--block-->Run tests and report test results</li><li><!--block-->Run code quality check with Sonar, Checkstyle, Findbugs, etc.</li><li><!--block-->Environment property substitution</li><li><!--block-->Files generations ( wsdl, AspectJ, XSL,etc)</li><li><!--block-->Support for cross platform (UNIX Windows) and IDEs(eclipse, Netbeasn, Intellij)</li><li><!--block-->Proper documentation and support.</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74939e2e-7524-47c2-9df2-2aa253bdff7c","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.849Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.849Z"},"uniqueId":"57fc95bb-d56e-43bf-8f4d-e33b3f778406","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1ca53"},"name":"A. A Build Lifecycle is a well defined sequence of phases which define the order","heading":"A. A Build Lifecycle is a well defined sequence of","smartContent":{"content":"<div><!--block--><strong>A.</strong>&nbsp;A Build Lifecycle is a well defined sequence of phases which define the order in which the goals are executed. A phase represents a stage in a life cycle.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3f765da3-0f22-4eca-a967-f38f52418818","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.865Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.865Z"},"uniqueId":"d70e957b-7736-458a-b55b-6937b421588d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1ca98"},"name":"A.The three build lifecycles of Maven are: clean : erase artifacts created previous default :","heading":"A.The three build lifecycles of Maven are: clean : erase","smartContent":{"content":"<div><!--block-->A.The three build lifecycles of Maven are:<br><br></div><ul><li><!--block-->clean : erase artifacts created previous</li><li><!--block-->default : is used to build the application</li><li><!--block-->site: generates site documentation for the project</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a0930005-3746-45cc-b3f4-70b08b84e9ae","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.883Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.883Z"},"uniqueId":"1177b961-1b99-4260-ad5b-cda38304f0af","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cadd"},"name":"A. In command prompt, type mvn –version to verify the installation detail.","heading":"A. In command prompt, type mvn –version to verify the","smartContent":{"content":"<div><!--block-->A. In command prompt, type&nbsp;<strong>mvn –version</strong>&nbsp;to verify the installation detail.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"49ef656f-a4a0-49ae-96b1-2f879b319d67","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.898Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.898Z"},"uniqueId":"860e08da-7d20-4164-9316-593422d806a7","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cb22"},"name":"A. POM the short name for Project Object Model is an xml file which contains","heading":"A. POM the short name for Project Object Model is","smartContent":{"content":"<div><!--block-->A. POM the short name for Project Object Model is an xml file which contains information about the project and configuration details used to build a project with Maven.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c91c671c-ead9-4ab1-a5fc-9a39af65fbaa","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.912Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.912Z"},"uniqueId":"83c6a26a-024a-4aed-a2de-9f64a7201b6d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cb67"},"name":"A. An artifact is a JAR file which is located in the Maven repository. Maven","heading":"A. An artifact is a JAR file which is located","smartContent":{"content":"<div><!--block-->A. An artifact is a JAR file which is located in the Maven repository. Maven build produces one or more artifacts such as compiled JAR and sources JAR. Each artifact includes a groupID, an artifact ID and a version string.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ce22a1dc-694a-4f7e-8225-64dd0bc310e9","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.928Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.928Z"},"uniqueId":"1d1967d4-61b7-4bcc-94f3-0dbf384ac65d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cbac"},"name":"A. The settings.xml files are located at: Maven installation directory : $M2_HOME/conf/settings.xml ${user.home}/.m2/settings.xml","heading":"A. The settings.xml files are located at: Maven installation directory","smartContent":{"content":"<div><!--block-->A. The settings.xml files are located at:</div><ul><li><!--block-->Maven installation directory : $M2_HOME/conf/settings.xml</li><li><!--block-->${user.home}/.m2/settings.xml</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"92cc6be2-bdba-46a9-bf34-86427a38c787","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.942Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.942Z"},"uniqueId":"661a7041-e955-46e8-beb8-76da0fd7a58a","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cbf1"},"name":"A. Maven searches first for a dependency JAR in local repository. If it discover that","heading":"A. Maven searches first for a dependency JAR in local","smartContent":{"content":"<div><!--block-->A. Maven searches first for a dependency JAR in local repository. If it discover that is used goes to the remote repository and download the corresponding version of JAR file and then stores it into local repository.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"af221a4c-af71-4c6d-8d4c-cb8079441923","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.958Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.958Z"},"uniqueId":"7c84df90-40a0-40c1-9672-2424a8f8440d","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cc36"},"name":"A. Quite all the companies have a firewall set up which determines the developers to","heading":"A. Quite all the companies have a firewall set up","smartContent":{"content":"<div><!--block-->A. Quite all the companies have a firewall set up which determines the developers to connect to internet via HTTP proxy. They have to enable the proxy settings in the file settings.xml. The passord saved there has to be encrypted. Sometimes is need also to add the jar wagon-http-lightweight-2.2.jar that has the role to put and get artifacts through http using Apache httpclient -4.x. The jar has to be added to the maven folder&nbsp;<strong>lib/ext</strong>&nbsp;.<br><br></div><pre><!--block-->&lt;proxies&gt;\n&lt;proxy&gt;\n&lt;id&gt;optional&lt;/id&gt;\n&lt;active&gt;true&lt;/active&gt;\n&lt;protocol&gt;http&lt;/protocol&gt;\n&lt;username&gt;proxyuser&lt;/username&gt;\n&lt;password&gt;proxypass&lt;/password&gt;\n&lt;host&gt;proxy.host.net&lt;/host&gt;\n&lt;port&gt;80&lt;/port&gt;\n&lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;\n&lt;/proxy&gt;\n&lt;/proxies&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bf61a51f-ee5a-45c7-8124-0925957ca621","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.973Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.973Z"},"uniqueId":"9b7644a3-c7b1-493c-9211-3b8dc3208205","__v":0}
{"_id":{"$oid":"668ef19459d6bcc528b1cc7b"},"name":"Build = Target Source= src/main/java Test = src/main/test","heading":"Build = Target Source= src/main/java Test = src/main/test","smartContent":{"content":"<div><!--block-->Build = Target<br><br></div><div><!--block-->Source= src/main/java<br><br></div><div><!--block-->Test = src/main/test</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a779a230-6438-441b-bce7-66cc1fcdf960","order":0,"createdDate":{"$date":"2024-07-10T20:39:48.988Z"},"updatedDate":{"$date":"2024-07-10T20:39:48.988Z"},"uniqueId":"4f0a23d1-fe15-4fed-867a-1f1b6720ca7f","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1ccc0"},"name":"They are located in ${basedir}/target/classes/.","heading":"They are located in ${basedir}/target/classes/.","smartContent":{"content":"<div><!--block-->They are located in ${basedir}/target/classes/.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6fee743e-44b4-46d1-962a-2efd7a58e4ce","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.002Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.002Z"},"uniqueId":"1908b890-f12a-4a12-b50d-daf3270932ea","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cd05"},"name":"mvn eclipse:ecplise","heading":"mvn eclipse:ecplise","smartContent":{"content":"<div><!--block-->mvn eclipse:ecplise</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3197fbfb-10ec-4b79-beba-2df36be900c3","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.019Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.019Z"},"uniqueId":"739477ea-e877-46c7-bc3d-55725a2049ea","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cd4a"},"name":"A Maven repository is a location where all the plugins, project jars, library jars or","heading":"A Maven repository is a location where all the plugins,","smartContent":{"content":"<div><!--block-->A Maven repository is a location where all the plugins, project jars, library jars or other particular project related artifacts are stored and used then&nbsp; by Maven.<br><br></div><div><!--block-->?<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:479,&quot;url&quot;:&quot;http://www.wideskills.com/sites/default/files/subjects/Maven%20Tutorial/12/m74.png&quot;,&quot;width&quot;:768}\" data-trix-content-type=\"image\" data-trix-id=\"46717\" contenteditable=\"false\"><img src=\"http://www.wideskills.com/sites/default/files/subjects/Maven%20Tutorial/12/m74.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/46717/46718/http://www.wideskills.com/sites/default/files/subjects/Maven%20Tutorial/12/m74.png\" width=\"768\" height=\"479\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"16c7d48b-fb9a-4062-ad62-26833ccce8c2","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.034Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.034Z"},"uniqueId":"26321e0a-822f-4784-854a-602707672466","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cd8f"},"name":"~/.m2/repository.","heading":"~/.m2/repository.","smartContent":{"content":"<div><!--block-->~/.m2/repository.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dd57a37f-4553-4656-b84f-3b478bf8e762","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.049Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.049Z"},"uniqueId":"14baa211-c062-45a5-9986-dcd400d1f743","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cdd4"},"name":"Maven repositoryes are: local, central, remote.","heading":"Maven repositoryes are: local, central, remote.","smartContent":{"content":"<div><!--block-->Maven repositoryes are: local, central, remote.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"66f77ef6-a21a-4ec6-b202-bb4101dc7d6c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.064Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.064Z"},"uniqueId":"80d7c089-3053-4ad2-9bb5-5519194a73ff","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1ce19"},"name":"Maven has two types of Plugins: Build plugins – They execute during the build and","heading":"Maven has two types of Plugins: Build plugins – They","smartContent":{"content":"<div><!--block-->Maven has two types of Plugins:<br><br></div><div><!--block-->Build plugins – They execute during the build and should be configured in pom.xml file inside the build tags:<br><br></div><pre><!--block-->&lt;build&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n. &lt;groupId&gt;… &lt;/groupId&gt; \n  &lt;artifactId&gt;… &lt;/artifactId&gt; \n  &lt;version&gt;…&lt;/version&gt; \n&lt;/plugin&gt;\n&lt;plugins&gt;\n&lt;/build&gt;</pre><div><!--block-->Reporting plugins – They execute during the site generation and should be configured in pom.xml file inside the reporting tags:<br><br></div><pre><!--block-->&lt;reporting&gt;\n&lt;plugins&gt;\n&lt;plugin&gt;\n. &lt;groupId&gt;… &lt;/groupId&gt; \n  &lt;artifactId&gt;… &lt;/artifactId&gt; \n  &lt;version&gt;…&lt;/version&gt; \n&lt;/plugin&gt;\n&lt;plugins&gt;\n&lt;/reporting&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"45d264b6-0a4b-4300-8c85-7fdcf4b6e4aa","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.081Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.081Z"},"uniqueId":"0caf4d31-0616-473f-9c87-f65692c555da","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1ce5e"},"name":"This means that Maven’s features and plugins are initialized with default conventions and the basic","heading":"This means that Maven’s features and plugins are initialized with","smartContent":{"content":"<div><!--block-->This means that Maven’s features and plugins are initialized with default conventions and the basic functionality of Maven requires minimum or no configuration.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"45eb42ef-f306-4b83-b3bb-2b39b6ae2acc","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.097Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.097Z"},"uniqueId":"1e81609b-043d-47a2-9524-e0e0e719bc85","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cea3"},"name":"This command erase the target directory with all the build data before starting the building","heading":"This command erase the target directory with all the build","smartContent":{"content":"<div><!--block-->This command erase the target directory with all the build data before starting the building process.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fa286286-6378-4548-b25f-2fe6684f5050","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.114Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.114Z"},"uniqueId":"c3185705-9b18-4ca4-bff8-e37c489315aa","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cee8"},"name":"The phases of the Maven Build Lifecycle are: Validate Compile Test Package Integration-tests Verify Install","heading":"The phases of the Maven Build Lifecycle are: Validate Compile","smartContent":{"content":"<div><!--block-->The phases of the Maven Build Lifecycle are:</div><ul><li><!--block--><strong>Validate</strong></li><li><!--block--><strong>Compile</strong></li><li><!--block--><strong>Test</strong></li><li><!--block--><strong>Package</strong></li><li><!--block--><strong>Integration-tests</strong></li><li><!--block--><strong>Verify</strong></li><li><!--block--><strong>Install</strong></li><li><!--block--><strong>Deploy</strong></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"eca05079-6436-47ff-b046-d1a5f6f4d07c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.129Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.129Z"},"uniqueId":"6e51af0c-f93f-4493-b300-e03779734b69","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cf2d"},"name":"pom","heading":"pom","smartContent":{"content":"<div><!--block-->pom</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dda3dec2-a324-4d64-a46f-5563f219f82f","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.143Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.143Z"},"uniqueId":"960504d5-f74d-479b-b5fa-93520bae6f66","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cf72"},"name":"A mojo is a Maven plain Old Java Object . Mojo is associated with a","heading":"A mojo is a Maven plain Old Java Object .","smartContent":{"content":"<div><!--block-->A mojo is a Maven plain Old Java Object . Mojo is associated with a Maven goal. A custom plugin is a set of related Mojos (or goals) in a single plugin artifact.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"600d7096-1ca7-4562-8b7f-4e67ffce983b","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.159Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.159Z"},"uniqueId":"d8d34917-1a03-40bc-9ab6-dbd1c0497fca","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cfb7"},"name":"In pom.xml it can be used the exclusion element.","heading":"In pom.xml it can be used the exclusion element.","smartContent":{"content":"<div><!--block-->In pom.xml it can be used the exclusion element.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ad12a5c6-a4d6-4fdd-921a-fccbe72c03cd","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.178Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.178Z"},"uniqueId":"99462122-d00a-40ec-aa97-72a19cc66c8a","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1cffc"},"name":"The following command can be used: mvn o package","heading":"The following command can be used: mvn o package","smartContent":{"content":"<div><!--block-->The following command can be used:<br><br></div><pre><!--block-->mvn o package</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0f326d06-df6a-4976-9fa9-9092dd934e32","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.193Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.193Z"},"uniqueId":"b1c82b86-d7f2-4a32-b0e0-f792af08085d","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d041"},"name":"With profile the project gets portabilty . (on windows, linux, etc or in different enviroments","heading":"With profile the project gets portabilty . (on windows, linux,","smartContent":{"content":"<div><!--block-->With profile the project gets portabilty . (on windows, linux, etc or in different enviroments development, test and production).</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fca3900f-e3af-4055-80f4-b5cb94de88e1","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.208Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.208Z"},"uniqueId":"65dc1ffa-a92c-4a79-9a9e-1973082c5169","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d086"},"name":"If two dependency versions are at the same depth in the dependency tree, the first","heading":"If two dependency versions are at the same depth in","smartContent":{"content":"<div><!--block-->If two dependency versions are at the same depth in the dependency tree, the first declared dependency is used. This mechanism is called&nbsp;<strong>dependency mediation</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"08086ed4-db36-491a-9e05-8e73a14638e6","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.223Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.223Z"},"uniqueId":"953c90cd-1ca9-436b-aa11-c264f8d0bdb8","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d0cb"},"name":"Archetype is a Maven plugin which has the task of creating a maven project structure.","heading":"Archetype is a Maven plugin which has the task of","smartContent":{"content":"<div><!--block-->Archetype is a Maven plugin which has the task of creating a maven project structure.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e1e867e7-ed77-4cef-8a38-69e3d34ddbc1","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.239Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.239Z"},"uniqueId":"ad09c1e5-8d12-4b2e-a195-969e84fc7f8b","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d110"},"name":"A new project can be created with the command: mvn archetype:generate","heading":"A new project can be created with the command: mvn","smartContent":{"content":"<div><!--block-->A new project can be created with the command:<br><br></div><pre><!--block-->mvn archetype:generate</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4454c360-8bed-4c58-ac0c-5e4631f57ce1","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.255Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.255Z"},"uniqueId":"6ec1be93-cfee-4256-84f3-32ef307bffdb","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d155"},"name":"SNAPSHOT is a type of version that indicates a current deployment copy. Maven checks during","heading":"SNAPSHOT is a type of version that indicates a current","smartContent":{"content":"<div><!--block-->SNAPSHOT is a type of version that indicates a current deployment copy. Maven checks during each build for a new SNAPSHOT version in the remote repository.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ad9c4093-eecc-44fa-a13a-b899abfaf7e8","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.271Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.271Z"},"uniqueId":"413c5ab3-bfde-4613-baa1-eac9def0f738","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d19a"},"name":"Maven will download always the specified version. In case of SNAPSHOT Maven wil download the","heading":"Maven will download always the specified version. In case of","smartContent":{"content":"<div><!--block-->Maven will download&nbsp; always the specified version. In case of SNAPSHOT Maven wil download the latest SNAPSHOT.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4392c850-6d7a-4e4d-a0b8-2282aca63596","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.286Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.286Z"},"uniqueId":"85dbb621-dfe5-4cd7-8948-1c79102faa17","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d1df"},"name":"Transitive dependency in Maven means that it is not necessary to discover and specify the","heading":"Transitive dependency in Maven means that it is not necessary","smartContent":{"content":"<div><!--block-->Transitive dependency in Maven means that it is not necessary to discover and specify the libraries that our own dependencies require, Maven includes them automatically.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"529c4a03-0a2c-4937-8a34-3963404b7201","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.302Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.302Z"},"uniqueId":"01e99d49-dc88-4d21-8d77-b990ac578edf","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d224"},"name":"In Eclipse from Run Configuration window it can be checked the option Skip tests or","heading":"In Eclipse from Run Configuration window it can be checked","smartContent":{"content":"<div><!--block-->In Eclipse from Run Configuration window it can be checked the option Skip tests or in command line add the argument –DskipTests=true</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"346cd9b9-1206-4088-a0c2-f8770274a7bb","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.323Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.323Z"},"uniqueId":"3d8bfd1b-fa14-49ab-939b-7605dcca1947","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d269"},"name":"The packaging type determines the basic build behaviour. The most common pakaging types are: jar(default","heading":"The packaging type determines the basic build behaviour. The most","smartContent":{"content":"<div><!--block-->The packaging type determines the basic build behaviour. The most common pakaging types are: jar(default archive), bundle(OSGi bundles), war(web applications archive), pom (parent pom files).<br><br></div><div><!--block-->The projects will run different goals depending of the packaging type. For example a project with pom packaging type will run site:attach-descriptor goal during the package phase and the project with jar packaging will run jar:jar goal instead.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1cb7bf3b-41ce-4ab3-9ab8-cb58266bf27b","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.338Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.338Z"},"uniqueId":"b00b8174-75f0-42c1-9bb8-af424ee7ead8","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d2ff"},"name":"Spring is one of the most widely used Java EE framework. Spring framework core concepts","heading":"Spring is one of the most widely used Java EE","smartContent":{"content":"<div><!--block--><em>Spring is one of the most widely used Java EE framework.&nbsp;</em><strong><em>Spring framework core concepts are “Dependency Injection” and “Aspect Oriented Programming”</em></strong><em>.</em><br><br></div><div><!--block-->Spring framework can be used in normal java applications also&nbsp;<strong><em>to achieve loose coupling between different components by implementing dependency injection</em></strong>&nbsp;and we can&nbsp;<strong><em>perform cross cutting tasks</em></strong>&nbsp;such as logging and authentication&nbsp;<strong><em>using spring support for aspect oriented programming</em></strong>.<br><br></div><div><!--block--><br></div><div><!--block-->I like spring because it provides a lot of features and different modules for specific tasks such as Spring MVC and Spring JDBC. Since it’s an open source framework with a lot of online resources and active community members, working with Spring framework is easy and fun at same time.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"cfafb5da-b8fa-4f70-acb8-7f674eb4526c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.369Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.369Z"},"uniqueId":"39a4ad07-64c9-49bb-909d-4ed44a4fde99","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d362"},"name":"Spring Framework is built on top of two design concepts – Dependency Injection and Aspect","heading":"Spring Framework is built on top of two design concepts","smartContent":{"content":"<div><!--block-->Spring Framework is built on top of two design concepts – Dependency Injection and Aspect Oriented Programming.<br><br></div><div><!--block-->Some of the&nbsp;<em>features of spring framework</em>&nbsp;are:</div><ol><li><!--block-->Lightweight and very little overhead of using framework for our development.</li><li><!--block-->Dependency Injection or Inversion of Control to write components that are independent of each other, spring container takes care of wiring them together to achieve our work.</li><li><!--block-->Spring IoC container manages Spring Bean life cycle and project specific configurations such as JNDI lookup.</li><li><!--block-->Spring MVC framework can be used to create web applications as well as restful web services capable of returning XML as well as JSON response.</li><li><!--block-->Support for transaction management, JDBC operations, File uploading, Exception Handling etc with very little configurations, either by using annotations or by spring bean configuration file.</li></ol><div><!--block-->Some of the advantages of using Spring Framework are:</div><ol><li><!--block-->Reducing direct dependencies between different components of the application, usually Spring IoC container is responsible for initializing resources or beans and inject them as dependencies.</li><li><!--block-->Writing unit test cases are easy in Spring framework because our business logic doesn’t have direct dependencies with actual resource implementation classes. We can easily write a test configuration and inject our mock beans for testing purposes.</li><li><!--block-->Reduces the amount of boiler-plate code, such as initializing objects, open/close resources. I like JdbcTemplate class a lot because it helps us in removing all the boiler-plate code that comes with JDBC programming.</li><li><!--block-->Spring framework is divided into several modules, it helps us in keeping our application lightweight. For example, if we don’t need Spring transaction management features, we don’t need to add that dependency in our project.</li><li><!--block-->Spring framework support most of the Java EE features and even much more. It’s always on top of the new technologies, for example there is a Spring project for Android to help us write better code for native android applications. This makes spring framework a complete package and we don’t need to look after different framework for different requirements.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"91cd41f7-b99e-4230-96a7-4bed3a27d819","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.386Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.386Z"},"uniqueId":"47ac4b66-514e-4762-a3e0-edc2870d522c","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d3c5"},"name":"Dependency Injection design pattern allows us to remove the hard-coded dependencies and make our application","heading":"Dependency Injection design pattern allows us to remove the hard-coded","smartContent":{"content":"<div><!--block-->Dependency Injection design pattern allows us to remove the hard-coded dependencies and make our application loosely coupled, extendable and maintainable. We can implement dependency injection pattern to move the dependency resolution from compile-time to runtime.<br><br></div><div><!--block-->Some of the benefits of using Dependency Injection are: Separation of Concerns, Boilerplate Code reduction, Configurable components and easy unit testing.<br><br></div><div><!--block-->Read more at&nbsp;<a href=\"http://www.journaldev.com/2394/java-dependency-injection-design-pattern-example-tutorial\">Dependency Injection Tutorial</a>. We can also use&nbsp;<a href=\"http://www.journaldev.com/2403/google-guice-dependency-injection-example-tutorial\">Google Guice for Dependency Injection</a>to automate the process of dependency injection. But in most of the cases we are looking for more than just dependency injection and that’s why Spring is the top choice for this.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"96c614cb-6a37-4182-8b88-d023f15a30b7","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.403Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.403Z"},"uniqueId":"a6d539ec-2bd7-4e91-9efb-f94bf0993dbb","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d428"},"name":"We can use Spring XML based as well as Annotation based configuration to implement DI","heading":"We can use Spring XML based as well as Annotation","smartContent":{"content":"<div><!--block-->We can use Spring XML based as well as Annotation based configuration to implement DI in spring applications. For better understanding, please read&nbsp;<a href=\"http://www.journaldev.com/2410/spring-dependency-injection\">Spring Dependency Injection</a>&nbsp;example where you can learn both the ways with JUnit test case. The post also contains sample project zip file, that you can download and play around to learn more.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1facb90e-eb3d-4bbf-951a-395f2a2caa9c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.422Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.422Z"},"uniqueId":"4d93086c-2aa2-4c5d-89b4-a89a1a2eda26","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d48b"},"name":"We can install plugins into Eclipse to get all the features of Spring Tool Suite.","heading":"We can install plugins into Eclipse to get all the","smartContent":{"content":"<div><!--block-->We can install plugins into Eclipse to get all the features of Spring Tool Suite. However STS comes with Eclipse with some other important stuffs such as Maven support, Templates for creating different types of Spring projects and tc server for better performance with Spring applications.<br><br></div><div><!--block-->I like STS because it highlights the Spring components and if you are using AOP pointcuts and advices, then it clearly shows which methods will come under the specific pointcut. So rather than installing everything on our own, I prefer using STS when developing Spring based applications.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1c3c7b8b-d7d9-4685-8b14-3b4cbb45bc8c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.441Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.441Z"},"uniqueId":"ed1f5d0b-0c67-4e76-b199-356a66e99db7","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d4ee"},"name":"Some of the important Spring Framework modules are: Spring Context – for dependency injection. Spring","heading":"Some of the important Spring Framework modules are: Spring Context","smartContent":{"content":"<div><!--block-->Some of the important Spring Framework modules are:</div><ol><li><!--block--><strong>Spring Context</strong>&nbsp;– for dependency injection.</li><li><!--block--><strong>Spring AOP</strong>&nbsp;– for aspect oriented programming.</li><li><!--block--><strong>Spring DAO</strong>&nbsp;– for database operations using DAO pattern</li><li><!--block--><strong>Spring JDBC</strong>&nbsp;– for JDBC and DataSource support.</li><li><!--block--><strong>Spring ORM</strong>&nbsp;– for ORM tools support such as Hibernate</li><li><!--block--><strong>Spring Web Module</strong>&nbsp;– for creating web applications.</li><li><!--block--><strong>Spring MVC</strong>&nbsp;– Model-View-Controller implementation for creating web applications, web services etc.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e629c47b-ec4c-4925-b005-c62070365b26","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.46Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.46Z"},"uniqueId":"a0f4cdf2-bbbd-4727-809a-e4c36143c7eb","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d551"},"name":"Enterprise applications have some common cross-cutting concerns that is applicable for different types of Objects","heading":"Enterprise applications have some common cross-cutting concerns that is applicable","smartContent":{"content":"<div><!--block-->Enterprise applications have some common cross-cutting concerns that is applicable for different types of Objects and application modules, such as logging, transaction management, data validation, authentication etc. In Object Oriented Programming, modularity of application is achieved by Classes whereas in AOP application modularity is achieved by Aspects and they are configured to cut across different classes methods.<br><br></div><div><!--block-->AOP takes out the direct dependency of cross-cutting tasks from classes that is not possible in normal object oriented programming. For example, we can have a separate class for logging but again the classes will have to call these methods for logging the data. Read more about Spring AOP support at<a href=\"http://www.journaldev.com/2583/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations\">Spring AOP Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e3cc5fd2-ab5a-4b63-bad5-094fd24a8277","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.478Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.478Z"},"uniqueId":"fe5db72e-e845-443f-a696-bbd409c65a66","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d5b4"},"name":"Aspect: Aspect is a class that implements cross-cutting concerns, such as transaction management. Aspects can","heading":"Aspect: Aspect is a class that implements cross-cutting concerns, such","smartContent":{"content":"<ul><li><!--block--><strong>Aspect</strong>: Aspect is a class that implements cross-cutting concerns, such as transaction management. Aspects can be a normal class configured and then configured in Spring Bean configuration file or we can use Spring AspectJ support to declare a class as Aspect using @Aspect annotation.</li><li><!--block--><strong>Advice</strong>: Advice is the action taken for a particular join point. In terms of programming, they are methods that gets executed when a specific join point with matching pointcut is reached in the application. You can think of Advices as&nbsp;<a href=\"http://www.journaldev.com/2676/spring-mvc-interceptor-example-handlerinterceptor-handlerinterceptoradapter\">Spring interceptors</a>&nbsp;or&nbsp;<a href=\"http://www.journaldev.com/1933/java-servlet-filter-example-tutorial\">Servlet Filters</a>.</li><li><!--block--><strong>Pointcut</strong>: Pointcut are regular expressions that is matched with join points to determine whether advice needs to be executed or not. Pointcut uses different kinds of expressions that are matched with the join points. Spring framework uses the AspectJ pointcut expression language for determining the join points where advice methods will be applied.</li><li><!--block--><strong>Join Point</strong>: A join point is the specific point in the application such as method execution, exception handling, changing object variable values etc. In Spring AOP a join points is always the execution of a method.</li><li><!--block--><strong>Advice Arguments</strong>: We can pass arguments in the advice methods. We can use args() expression in the pointcut to be applied to any method that matches the argument pattern. If we use this, then we need to use the same name in the advice method from where argument type is determined.</li></ul><div><!--block--><br></div><div><!--block-->These concepts seems confusing at first, but if you go through&nbsp;<a href=\"http://www.journaldev.com/2583/spring-aop-example-tutorial-aspect-advice-pointcut-joinpoint-annotations\">Spring Aspect, Advice Example</a>&nbsp;then you can easily relate to them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"93859ec4-f47a-4c48-9477-729ceb605feb","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.498Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.498Z"},"uniqueId":"6232030c-8780-424f-80a4-65a6f5ebb34f","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d617"},"name":"AspectJ is the industry-standard implementation for Aspect Oriented Programming whereas Spring implements AOP for some","heading":"AspectJ is the industry-standard implementation for Aspect Oriented Programming whereas","smartContent":{"content":"<div><!--block-->AspectJ is the industry-standard implementation for Aspect Oriented Programming whereas Spring implements AOP for some cases. Main differences between Spring AOP and AspectJ are:</div><ol><li><!--block-->Spring AOP is simpler to use than AspectJ because we don’t need to worry about the weaving process.</li><li><!--block-->Spring AOP supports AspectJ annotations, so if you are familiar with AspectJ then working with Spring AOP is easier.</li><li><!--block-->Spring AOP supports only proxy-based AOP, so it can be applied only to method execution join points. AspectJ support all kinds of pointcuts.</li><li><!--block-->One of the shortcoming of Spring AOP is that it can be applied only to the beans created through Spring Context.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c78b6ad2-e9f3-47ab-aaf6-7386ce711c9f","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.517Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.517Z"},"uniqueId":"805908d4-7e9c-401f-9565-2dda63f3b212","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d67a"},"name":"Inversion of Control (IoC) is the mechanism to achieve loose-coupling between Objects dependencies. To achieve","heading":"Inversion of Control (IoC) is the mechanism to achieve loose-coupling","smartContent":{"content":"<div><!--block--><strong>Inversion of Control</strong>&nbsp;(IoC) is the&nbsp;<strong><em>mechanism to achieve loose-coupling</em></strong>&nbsp;between Objects dependencies. To achieve loose coupling and dynamic binding of the objects at runtime, the objects define their dependencies that are being injected by other assembler objects. Spring IoC container is the program that injects dependencies into an object and make it ready for our use.<br><br></div><div><!--block-->Spring Framework IoC container classes are part of org.springframework.beans andorg.springframework.context packages and provides us different ways to decouple the object dependencies.<br><br></div><div><!--block-->Some of the useful ApplicationContext implementations that we use are;</div><ol><li><!--block-->AnnotationConfigApplicationContext: For standalone java applications using annotations based configuration.</li><li><!--block-->ClassPathXmlApplicationContext: For standalone java applications using XML based configuration.</li><li><!--block-->FileSystemXmlApplicationContext: Similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system.</li><li><!--block-->AnnotationConfigWebApplicationContext and XmlWebApplicationContext for web applications.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f9e0de82-9398-4d13-a237-639aec32e74d","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.536Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.536Z"},"uniqueId":"82ae2976-a479-4433-95a0-81fa091c1828","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d6dd"},"name":"Any normal java class that is initialized by Spring IoC container is called Spring Bean.","heading":"Any normal java class that is initialized by Spring IoC","smartContent":{"content":"<div><!--block-->Any normal java class that is initialized by Spring IoC container is called Spring Bean. We use SpringApplicationContext to get the Spring Bean instance.<br><br></div><div><!--block-->Spring IoC container manages the life cycle of Spring Bean, bean scopes and injecting any required dependencies in the bean.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"08b289fc-d24b-4e5b-a1a5-1bce1829d319","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.554Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.554Z"},"uniqueId":"0fd77d5a-0d47-4ea0-9eb1-fd7b80a011c2","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d740"},"name":"We use Spring Bean configuration file to define all the beans that will be initialized","heading":"We use Spring Bean configuration file to define all the","smartContent":{"content":"<div><!--block-->We use Spring Bean configuration file to define all the beans that will be initialized by Spring Context. When we create the instance of Spring ApplicationContext, it reads the spring bean xml file and initialize all of them. Once the context is initialized, we can use it to get different bean instances.<br><br></div><div><!--block-->Apart from Spring Bean configuration, this file also contains spring MVC interceptors, view resolvers and other elements to support annotations based configurations.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e78c181e-f34b-4dc9-a20b-ee8c3d22e401","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.573Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.573Z"},"uniqueId":"92d55e70-d634-4fb2-a085-e8d1a09a9243","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d7a3"},"name":"There are three different ways to configure Spring Bean. XML Configuration: This is the most","heading":"There are three different ways to configure Spring Bean. XML","smartContent":{"content":"<div><!--block-->There are three different ways to configure Spring Bean.</div><ul><li><!--block--><strong>XML Configuration</strong>: This is the most popular configuration and we can use bean element in context file to configure a Spring Bean. For example:</li></ul><pre><!--block-->&lt;bean name=\"myBean\" class=\"com.journaldev.spring.beans.MyBean\"&gt;&lt;/bean&gt;</pre><div><!--block--><br></div><ul><li><!--block--><strong>Java Based Configuration</strong>: If you are using only annotations, you can configure a Spring bean using @Bean annotation. This annotation is used with @Configuration classes to configure a spring bean. Sample configuration is:</li></ul><pre><!--block-->@Configuration@ComponentScan(value=\"com.journaldev.spring.main\")public class MyConfiguration {\n\n\t@Bean\n\tpublic MyService getService(){\n\t\treturn new MyService();\n\t}}</pre><div><!--block-->To get this bean from spring context, we need to use following code snippet:</div><pre><!--block-->AnnotationConfigApplicationContext ctx \n                         = new AnnotationConfigApplicationContext(MyConfiguration.class);\nMyService service = ctx.getBean(MyService.class);</pre><ul><li><!--block--><strong>Annotation Based Configuration</strong>: We can also use @Component, @Service, @Repository and @Controller annotations with classes to configure them to be as spring bean. For these, we would need to provide base package location to scan for these classes. For example:</li></ul><pre><!--block-->&lt;context:component-scan base-package=\"com.journaldev.spring\" /&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d0732612-e813-4d18-a05b-3b9582fd4606","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.593Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.593Z"},"uniqueId":"b5f61378-d284-492c-8ec3-76d5a5b5a9d6","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d806"},"name":"There are five scopes defined for Spring Beans. singleton: Only one instance of the bean","heading":"There are five scopes defined for Spring Beans. singleton: Only","smartContent":{"content":"<div><!--block-->There are five scopes defined for Spring Beans.<br><br></div><ol><li><!--block--><strong>singleton</strong>: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure spring bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues because it’s not thread-safe.</li><li><!--block--><strong>prototype</strong>: A new instance will be created every time the bean is requested.</li><li><!--block--><strong>request</strong>: This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request.</li><li><!--block--><strong>session</strong>: A new bean will be created for each HTTP session by the container.</li><li><!--block--><strong>global-session</strong>: This is used to create global session beans for Portlet applications.</li></ol><div><!--block-->Spring Framework is extendable and we can create our own scopes too, however most of the times we are good with the scopes provided by the framework.<br><br></div><div><!--block-->To set spring bean scopes we can use “scope” attribute in bean element or @Scope annotation for annotation based configurations.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8ef0d59b-020f-41c3-8cc1-b58c63232c85","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.612Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.612Z"},"uniqueId":"260a3376-828d-4dcc-b958-179699d3b0f3","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d869"},"name":"Spring Beans are initialized by Spring Container and all the dependencies are also injected. When","heading":"Spring Beans are initialized by Spring Container and all the","smartContent":{"content":"<div><!--block-->Spring Beans are&nbsp;<strong><em>initialized&nbsp;</em></strong>by Spring Container and all the dependencies are also&nbsp;<strong><em>injected</em></strong>.&nbsp;<em>When context is&nbsp;</em><strong><em>destroyed</em></strong>, it&nbsp;<em>also&nbsp;</em><strong><em>destroys&nbsp;</em></strong><em>all the initialized beans</em>. This works well in most of the cases but sometimes we want to initialize other resources or do some validation before making our beans ready to use. Spring framework provides support for&nbsp;<strong><em>post-initialization</em></strong>&nbsp;and&nbsp;<strong><em>pre-destroy</em></strong>&nbsp;methods in spring beans.<br><br></div><div><!--block-->We can do this by two ways – by implementing InitializingBean and DisposableBean interfaces or using&nbsp;<strong>init-method</strong>&nbsp;and&nbsp;<strong>destroy-method</strong>&nbsp;attribute in spring bean configurations. For more details, please read&nbsp;<a href=\"http://www.journaldev.com/2637/spring-bean-life-cycle\">Spring Bean Life Cycle Methods</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ab0102bd-7550-44ed-b592-104561184ce5","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.629Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.629Z"},"uniqueId":"fe86e116-c7b9-4133-9385-ecee0b2074f6","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d8cc"},"name":"There are two ways to get Container specific objects in the spring bean. Implementing Spring","heading":"There are two ways to get Container specific objects in","smartContent":{"content":"<div><!--block-->There are two ways to get Container specific objects in the spring bean.</div><ol><li><!--block-->Implementing Spring *Aware interfaces, for these ServletContextAware and ServletConfigAware interfaces, for complete example of these aware interfaces, please read&nbsp;<a href=\"http://www.journaldev.com/2637/spring-bean-life-cycle\">Spring Aware Interfaces</a></li><li><!--block-->Using @Autowired annotation with bean variable of type ServletContext and ServletConfig. They will work only in servlet container specific environment only though.</li></ol><pre><!--block-->@AutowiredServletContext servletContext;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8e95e357-0eb6-40e0-8546-04b66e45424a","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.646Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.646Z"},"uniqueId":"c68c0baf-4311-41d7-89de-9fcabf729149","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d92f"},"name":"The process of injection spring bean dependencies while initializing it called Spring Bean Wiring. Usually","heading":"The process of injection spring bean dependencies while initializing it","smartContent":{"content":"<div><!--block-->The process of injection spring bean dependencies while initializing it called Spring Bean Wiring.<br><br></div><div><!--block-->Usually it’s best practice to do the explicit wiring of all the bean dependencies, but spring framework also supports autowiring. We can use @Autowired annotation with fields or methods for&nbsp;<strong>autowiring byType</strong>. For this annotation to work, we also need to enable annotation based configuration in spring bean configuration file. This can be done by&nbsp;<strong>context:annotation-config</strong>&nbsp;element.<br><br></div><div><!--block-->For more details about @Autowired annotation, please read&nbsp;<a href=\"http://www.journaldev.com/2623/spring-autowired-annotation\">Spring Autowire Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2d8abe85-36bd-42d4-9df7-dc15b82f5954","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.661Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.661Z"},"uniqueId":"670b9798-db28-417e-81fe-4bc0852657a3","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d992"},"name":"There are four types of autowiring in Spring framework. autowire byName autowire byType autowire by","heading":"There are four types of autowiring in Spring framework. autowire","smartContent":{"content":"<div><!--block-->There are four types of autowiring in Spring framework.</div><ol><li><!--block--><strong>autowire byName</strong></li><li><!--block--><strong>autowire byType</strong></li><li><!--block--><strong>autowire by constructor</strong></li><li><!--block-->autowiring by&nbsp;<strong>@Autowired</strong>&nbsp;and&nbsp;<strong>@Qualifier</strong>&nbsp;annotations</li></ol><div><!--block-->Prior to Spring 3.1,&nbsp;<strong>autowire by autodetect</strong>&nbsp;was also supported that was similar to autowire by constructor or byType. For more details about these options, please read&nbsp;<a href=\"http://www.journaldev.com/2623/spring-autowired-annotation\">Spring Bean Autowiring</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"590777d2-2925-486b-afc6-b2a8187377b2","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.679Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.679Z"},"uniqueId":"b8c10a86-2adb-44c5-ada0-e1fc4dc104a5","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1d9f5"},"name":"The default scope of Spring bean is singleton, so there will be only one instance","heading":"The default scope of Spring bean is singleton, so there","smartContent":{"content":"<div><!--block-->The default scope of Spring bean is singleton, so there will be only one instance per context. That means that all the having a class level variable that any thread can update will lead to inconsistent data. Hence in default mode spring beans are not thread-safe.<br><br></div><div><!--block-->However we can change spring bean scope to request, prototype or session to achieve thread-safety at the cost of performance. It’s a design decision and based on the project requirements.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"41dc2ec9-8e8b-4cb0-884f-effb76767dca","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.695Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.695Z"},"uniqueId":"6086a6a7-d21e-45d5-989c-f2ce5a820aa5","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1da58"},"name":"Just like MVC design pattern, Controller is the class that takes care of all the","heading":"Just like MVC design pattern, Controller is the class that","smartContent":{"content":"<div><!--block-->Just like MVC design pattern, Controller is the class that takes care of all the client requests and send them to the configured resources to handle it. In Spring MVC,org.springframework.web.servlet.DispatcherServlet is the front controller class that initializes the context based on the spring beans configurations.<br><br></div><div><!--block-->A Controller class is responsible to handle different kind of client requests based on the request mappings. We can create a controller class by using @Controller annotation. Usually it’s used with@RequestMapping annotation to define handler methods for specific URI mapping.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4d44067d-8b16-44af-9376-1a2d651a1d97","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.712Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.712Z"},"uniqueId":"16556176-1a5a-4703-acc4-2fa9d48d604e","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dabb"},"name":"@Component is used to indicate that a class is a component. These classes are used","heading":"@Component is used to indicate that a class is a","smartContent":{"content":"<ul><li><!--block--><strong>@Component</strong>&nbsp;is used to indicate that a class is a component. These classes are used for auto detection and configured as bean, when annotation based configurations are used.</li><li><!--block--><strong>@Controller</strong>&nbsp;is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.</li><li><!--block--><strong>@Repository</strong>&nbsp;annotation is used to indicate that a component is used as repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.</li><li><!--block--><strong>@Service</strong>&nbsp;is used to indicate that a class is a Service. Usually the business facade classes that provide some services are annotated with this.</li></ul><div><!--block--><br></div><div><!--block-->We can use any of the above annotations for a class for auto-detection but different types are provided so that you can easily distinguish the purpose of the annotated classes.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"21800359-8311-4a6e-9575-1d1e2d4890d9","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.73Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.73Z"},"uniqueId":"a82ec354-c1cb-4af3-88ed-191b3e83a82f","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1db1e"},"name":"DispatcherServlet is the front controller in the Spring MVC application and it loads the spring","heading":"DispatcherServlet is the front controller in the Spring MVC application","smartContent":{"content":"<div><!--block-->DispatcherServlet is the front controller in the Spring MVC application and it loads the spring bean configuration file and initialize all the beans that are configured. If annotations are enabled, it also scans the packages and configure any bean annotated with @Component, @Controller, @Repository or@Service annotations.<br><br></div><div><!--block-->ContextLoaderListener is the listener to start up and shut down Spring’s rootWebApplicationContext. It’s important functions are to tie up the lifecycle of ApplicationContext to the lifecycle of the ServletContext and to automate the creation of ApplicationContext. We can use it to define shared beans that can be used across different spring contexts.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"aa6288aa-b2dd-4afc-9cef-b253f94d6c8c","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.749Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.749Z"},"uniqueId":"949b5bb7-2141-4835-8b57-d2f7d34a7f64","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1db81"},"name":"ViewResolver implementations are used to resolve the view pages by name. Usually we configure it","heading":"ViewResolver implementations are used to resolve the view pages by","smartContent":{"content":"<div><!--block-->ViewResolver implementations are used to resolve the view pages by name. Usually we configure it in the spring bean configuration file. For example:<br><br></div><pre><!--block-->&lt;!-- Resolves views selected for rendering by \n@Controllers to .jsp resources in the /WEB-INF/views directory --&gt;\n&lt;beans:bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n\t&lt;beans:property name=\"prefix\" value=\"/WEB-INF/views/\" /&gt;\n\t&lt;beans:property name=\"suffix\" value=\".jsp\" /&gt;\n&lt;/beans:bean&gt;</pre><div><!--block--><br></div><div><!--block-->InternalResourceViewResolver is one of the implementation of ViewResolver interface and we are providing the view pages directory and suffix location through the bean properties. So if a controller handler method returns “home”, view resolver will use view page located at&nbsp;<em>/WEB-INF/views/home.jsp</em>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4b5fea44-34d9-4881-a35b-3250f53fae28","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.769Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.769Z"},"uniqueId":"035cd7bc-2163-45cf-8e25-e6dd77b48442","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dbe4"},"name":"MultipartResolver interface is used for uploading files – CommonsMultipartResolver andStandardServletMultipartResolver are two implementations provided by","heading":"MultipartResolver interface is used for uploading files – CommonsMultipartResolver andStandardServletMultipartResolver","smartContent":{"content":"<div><!--block-->MultipartResolver interface is used for uploading files – CommonsMultipartResolver andStandardServletMultipartResolver are two implementations provided by spring framework for file uploading. By default there are no multipart resolvers configured but to use them for uploading files, all we need to define a bean named “multipartResolver” with type as MultipartResolver in spring bean configurations.<br><br></div><div><!--block-->Once configured, any multipart request will be resolved by the configured MultipartResolver and pass on a wrapped HttpServletRequest. Then it’s used in the controller class to get the file and process it. For a complete example, please read&nbsp;<a href=\"http://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files\">Spring MVC File Upload Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"574bb6e5-d3e8-4b03-8eb4-058f513ebd2b","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.811Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.811Z"},"uniqueId":"1b54f349-2dbd-4af1-8378-da868c18d5df","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dc47"},"name":"Spring MVC Framework provides following ways to help us achieving robust exception handling. Controller Based","heading":"Spring MVC Framework provides following ways to help us achieving","smartContent":{"content":"<div><!--block-->Spring MVC Framework provides following ways to help us achieving robust exception handling.</div><ol><li><!--block--><strong>Controller Based</strong>&nbsp;– We can define exception handler methods in our controller classes. All we need is to annotate these methods with @ExceptionHandler annotation.</li><li><!--block--><strong>Global Exception Handler</strong>&nbsp;– Exception Handling is a cross-cutting concern and Spring provides @ControllerAdvice annotation that we can use with any class to define our global exception handler.</li><li><!--block--><strong>HandlerExceptionResolver implementation</strong>&nbsp;– For generic exceptions, most of the times we serve static pages. Spring Framework provides HandlerExceptionResolver interface that we can implement to create global exception handler. The reason behind this additional way to define global exception handler is that Spring framework also provides default implementation classes that we can define in our spring bean configuration file to get spring framework exception handling benefits.</li></ol><div><!--block-->For a complete example, please read&nbsp;<a href=\"http://www.journaldev.com/2651/spring-mvc-exception-handling-controlleradvice-exceptionhandler-handlerexceptionresolver\">Spring Exception Handling Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"db2e4eb8-77fb-40de-8459-aba71323ae02","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.829Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.829Z"},"uniqueId":"c8175acc-357c-4f70-a50e-1789f720fd18","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dcaa"},"name":"There are following ways to create spring context in a standalone java program. AnnotationConfigApplicationContext: If","heading":"There are following ways to create spring context in a","smartContent":{"content":"<div><!--block-->There are following ways to create spring context in a standalone java program.</div><ol><li><!--block--><strong>AnnotationConfigApplicationContext</strong>: If we are using Spring in standalone java applications and using annotations for Configuration, then we can use this to initialize the container and get the bean objects.</li><li><!--block--><strong>ClassPathXmlApplicationContext</strong>: If we have spring bean configuration xml file in standalone application, then we can use this class to load the file and get the container object.</li><li><!--block--><strong>FileSystemXmlApplicationContext</strong>: This is similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6f3ce749-6dd3-4ca6-935d-bf5a857a08ab","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.848Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.848Z"},"uniqueId":"6e0dfdb7-03f0-4589-ba8e-b9a05c126335","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dd0d"},"name":"For Spring MVC applications, we can define multiple spring context configuration files throughcontextConfigLocation. This location","heading":"For Spring MVC applications, we can define multiple spring context","smartContent":{"content":"<div><!--block-->For Spring MVC applications, we can define multiple spring context configuration files throughcontextConfigLocation. This location string can consist of multiple locations separated by any number of commas and spaces. For example;<br><br></div><pre><!--block-->&lt;servlet&gt;\n\t&lt;servlet-name&gt;appServlet&lt;/servlet-name&gt;\n\t&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\t&lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n\t    &lt;param-value&gt;/WEB-INF/spring/appServlet/servlet-context.xml,/WEB-INF/spring/appServlet/servlet-jdbc.xml&lt;/param-value&gt;\n\t&lt;/init-param&gt;\n\t&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;</pre><div><!--block--><br></div><div><!--block-->We can also define multiple root level spring configurations and load it through context-param. For example;<br><br></div><pre><!--block-->&lt;context-param&gt;\n\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n\t&lt;param-value&gt;/WEB-INF/spring/root-context.xml /WEB-INF/spring/root-security.xml&lt;/param-value&gt;\n&lt;/context-param&gt;</pre><div><!--block-->Another option is to use import element in the context configuration file to import other configurations, for example:<br><br></div><pre><!--block-->&lt;beans:import resource=\"spring-jdbc.xml\"/&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"de4a0861-bf72-441b-97be-abd5afacc4f1","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.867Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.867Z"},"uniqueId":"233acf40-3c54-4fe3-ae89-91d3a306dc41","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dd70"},"name":"ContextLoaderListener is the listener class used to load root context and define spring bean configurations","heading":"ContextLoaderListener is the listener class used to load root context","smartContent":{"content":"<div><!--block-->ContextLoaderListener is the listener class used to load root context and define spring bean configurations that will be visible to all other contexts. It’s configured in web.xml file as:<br><br></div><pre><!--block-->&lt;context-param&gt;\n\t&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n\t&lt;param-value&gt;/WEB-INF/spring/root-context.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n\t\n&lt;listener&gt;\n\t&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f796e209-ce99-4183-bccd-6a7bd2bca736","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.886Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.886Z"},"uniqueId":"4ba775d9-b3be-495a-8b69-c083733aaa75","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1ddd3"},"name":"For creating a simple Spring MVC application, we would need to do following tasks. Add","heading":"For creating a simple Spring MVC application, we would need","smartContent":{"content":"<div><!--block-->For creating a simple Spring MVC application, we would need to do following tasks.</div><ol><li><!--block-->Add spring-context and spring-webmvc dependencies in the project.</li><li><!--block-->Configure DispatcherServlet in the web.xml file to handle requests through spring container.</li><li><!--block-->Spring bean configuration file to define beans, if using annotations then it has to be configured here. Also we need to configure view resolver for view pages.</li><li><!--block-->Controller class with request mappings defined to handle the client requests.</li></ol><div><!--block-->Above steps should be enough to create a simple Spring MVC Hello World application.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e44a87fa-2531-475c-954f-db60b9e6ee72","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.905Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.905Z"},"uniqueId":"2f72cd1f-ec98-479a-8d5a-2ff6d6e836c0","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1de36"},"name":"As the name suggests Spring MVC is built on top of Model-View-Controller architecture.DispatcherServlet is the","heading":"As the name suggests Spring MVC is built on top","smartContent":{"content":"<div><!--block-->As the name suggests Spring MVC is built on top of&nbsp;<strong>Model-View-Controller</strong>&nbsp;architecture.DispatcherServlet is the Front Controller in the Spring MVC application that takes care of all the incoming requests and delegate it to different controller handler methods.<br><br></div><div><!--block-->Model can be any Java Bean in the Spring Framework, just like any other MVC framework Spring provides automatic binding of form data to java beans. We can set model beans as attributes to be used in the view pages.<br><br></div><div><!--block-->View Pages can be JSP, static HTMLs etc. and view resolvers are responsible for finding the correct view page. Once the view page is identified, control is given back to the DispatcherServlet controller. DispatcherServlet is responsible for rendering the view and returning the final response to the client.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9a57257e-aa39-4287-9b95-e43bee2c9277","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.921Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.921Z"},"uniqueId":"b71f3dba-bf00-47c5-a119-84f2aed7ca36","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1de99"},"name":"Spring provides excellent support for localization or i18n through resource bundles. Basis steps needed to","heading":"Spring provides excellent support for localization or i18n through resource","smartContent":{"content":"<div><!--block-->Spring provides excellent support for localization or i18n through resource bundles. Basis steps needed to make our application localized are:<br><br></div><ul><li><!--block-->Creating message resource bundles for different locales, such as messages_en.properties, messages_fr.properties etc.</li><li><!--block-->Defining messageSource bean in the spring bean configuration file of typeResourceBundleMessageSource or ReloadableResourceBundleMessageSource.</li><li><!--block-->For change of locale support, define localeResolver bean of type CookieLocaleResolver and configure LocaleChangeInterceptor interceptor. Example configuration can be like below:</li></ul><pre><!--block-->&lt;beans:bean id=\"messageSource\" \nclass=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\"&gt;\n\t&lt;beans:property name=\"basename\" value=\"classpath:messages\" /&gt;\n\t&lt;beans:property name=\"defaultEncoding\" value=\"UTF-8\" /&gt;\n&lt;/beans:bean&gt;\n&lt;beans:bean id=\"localeResolver\"\n    class=\"org.springframework.web.servlet.i18n.CookieLocaleResolver\"&gt;\n\t&lt;beans:property name=\"defaultLocale\" value=\"en\" /&gt;\n\t&lt;beans:property name=\"cookieName\" value=\"myAppLocaleCookie\"&gt;&lt;/beans:property&gt;\n\t&lt;beans:property name=\"cookieMaxAge\" value=\"3600\"&gt;&lt;/beans:property&gt;\n&lt;/beans:bean&gt;\n&lt;interceptors&gt;\n\t&lt;beans:bean class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\"&gt;\n\t\t&lt;beans:property name=\"paramName\" value=\"locale\" /&gt;\n\t&lt;/beans:bean&gt;\n&lt;/interceptors&gt;</pre><ul><li><!--block-->Use spring:message element in the view pages with key names, DispatcherServlet picks the corresponding value and renders the page in corresponding locale and return as response.</li></ul><div><!--block-->For a complete example, please read&nbsp;<a href=\"http://www.journaldev.com/2610/spring-mvc-internationalization-i18n-and-localization-l10n-example\">Spring Localization Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d5aa541d-5b3a-4a79-9b7f-d3d1d16730f3","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.938Z"},"updatedDate":{"$date":"2024-07-10T20:39:49.938Z"},"uniqueId":"0e853380-7ea3-425a-a83b-8c95b2ea59c2","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1defc"},"name":"We can use Spring Framework to create Restful web services that returns JSON data.","heading":"We can use Spring Framework to create Restful web services that returns JSON data.","smartContent":{"content":"**Spring Boot REST** refers to the development of RESTful web services using the Spring Boot framework. REST (Representational State Transfer) is an architectural style for designing networked applications, and Spring Boot makes it easier to create stand-alone, production-grade Spring-based applications that you can \"just run.\"\n\n### Key Concepts of Spring Boot REST:\n\n1. **Spring Boot Framework**:\n   - **Spring Boot** simplifies the setup and development of new Spring applications, providing defaults for many features and streamlining the process of creating a Spring-based application.\n   - It eliminates the need for extensive boilerplate configuration by offering default configurations, embedded servers like Tomcat, and a wide range of starter templates (`spring-boot-starters`).\n\n2. **RESTful Web Services**:\n   - REST is a set of constraints that, when applied to the design of a web service, create a stateless, scalable service that interacts with clients through standard HTTP methods (GET, POST, PUT, DELETE).\n   - A **RESTful web service** typically deals with resources (entities), which are manipulated using HTTP methods.\n\n3. **Annotations Used in Spring Boot REST**:\n   - `@RestController`: A combination of `@Controller` and `@ResponseBody`. It marks the class as a controller where every method returns a domain object instead of a view. The returned object is automatically serialized into JSON and sent back to the client.\n   - `@RequestMapping`: Maps HTTP requests to handler methods in the controller. It can be used at the class or method level.\n   - `@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`: These are specialized versions of `@RequestMapping` for handling specific HTTP methods (GET, POST, PUT, DELETE).\n   - `@PathVariable`: Binds a method parameter to a URI template variable.\n   - `@RequestParam`: Binds a method parameter to a web request parameter.\n   - `@RequestBody`: Binds the body of the HTTP request to a method parameter.\n\n4. **Creating a Spring Boot RESTful Web Service**:\n   - **Step 1**: Create a Spring Boot project using Spring Initializr or your preferred IDE.\n   - **Step 2**: Annotate a class with `@RestController` to create a REST controller.\n   - **Step 3**: Define HTTP endpoints using `@RequestMapping` or its specialized variants (`@GetMapping`, `@PostMapping`, etc.).\n   - **Step 4**: Handle incoming requests and return responses, typically in JSON format.\n\n   Example:\n   ```java\n   @RestController\n   @RequestMapping(\"/api\")\n   public class MyRestController {\n\n       @GetMapping(\"/hello\")\n       public String sayHello() {\n           return \"Hello, World!\";\n       }\n\n       @GetMapping(\"/user/{id}\")\n       public User getUser(@PathVariable Long id) {\n           return userService.findById(id);\n       }\n\n       @PostMapping(\"/user\")\n       public User createUser(@RequestBody User user) {\n           return userService.save(user);\n       }\n   }\n   ```\n\n5. **Content Negotiation**:\n   - Spring Boot supports content negotiation, allowing your RESTful service to return data in different formats (e.g., JSON, XML) based on the request's `Accept` header.\n\n6. **Error Handling**:\n   - Custom error handling can be implemented using `@ExceptionHandler` methods or by creating custom `@ControllerAdvice` classes.\n\n7. **Spring Boot Starters**:\n   - Spring Boot provides starters for building RESTful services (`spring-boot-starter-web`), which includes all necessary dependencies like Spring MVC and Jackson (for JSON processing).\n\n8. **Embedded Servers**:\n   - Spring Boot applications typically use embedded servers (like Tomcat or Jetty), allowing you to run your RESTful service as a standalone Java application.\n\n9. **Testing**:\n   - Spring Boot provides support for writing unit and integration tests for RESTful services using tools like `MockMvc`, `RestTemplate`, or `WebTestClient`.\n\n### Benefits of Using Spring Boot for RESTful Services:\n\n- **Simplified Configuration**: Spring Boot autoconfiguration reduces the need for manual configuration, letting developers focus on building the service.\n- **Production-Ready**: Embedded servers and built-in monitoring tools (like Spring Boot Actuator) make it easy to deploy and manage your RESTful service.\n- **Rapid Development**: With Spring Boot’s opinionated defaults, developers can quickly get started with a project, focusing on writing business logic rather than wiring configurations.\n- **Community and Ecosystem**: Spring Boot is backed by a large community and a rich ecosystem of tools, libraries, and resources, making it a solid choice for building RESTful services.\n\nSpring Boot REST is an effective way to build scalable, maintainable, and production-ready RESTful web services with minimal configuration.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"6936739a-c5e3-46bb-bdc0-dd14fa1c6f40","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.955Z"},"updatedDate":{"$date":"2024-08-26T21:37:28.207Z"},"uniqueId":"009c86c7-70a4-449e-8290-59a0b6a7f332","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1df5f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Spring Framework provides a wide range of annotations to simplify the development process by reducing the need for extensive XML configuration. Here are some of the most important Spring annotations:\n\n### **Core Spring Annotations**\n\n1. **`@Configuration`**\n   - Indicates that a class is a source of bean definitions.\n   - Used to define beans using `@Bean` methods.\n\n   ```java\n   @Configuration\n   public class AppConfig {\n       @Bean\n       public MyService myService() {\n           return new MyServiceImpl();\n       }\n   }\n   ```\n\n2. **`@Bean`**\n   - Marks a method as a bean producer in a `@Configuration` class.\n   - The method’s return value is registered as a bean in the Spring container.\n\n   ```java\n   @Bean\n   public MyService myService() {\n       return new MyServiceImpl();\n   }\n   ```\n\n3. **`@Component`**\n   - Generic stereotype for any Spring-managed component.\n   - Serves as a base annotation for more specific component stereotypes like `@Service`, `@Repository`, and `@Controller`.\n\n   ```java\n   @Component\n   public class MyComponent {\n       // logic\n   }\n   ```\n\n4. **`@Service`**\n   - Specialized annotation for service layer components.\n   - Indicates that a class provides business logic or service-related functionality.\n\n   ```java\n   @Service\n   public class MyService {\n       // business logic\n   }\n   ```\n\n5. **`@Repository`**\n   - Specialized annotation for persistence layer components.\n   - Indicates that a class is a Data Access Object (DAO) and can translate exceptions to Spring’s `DataAccessException`.\n\n   ```java\n   @Repository\n   public class MyRepository {\n       // persistence logic\n   }\n   ```\n\n6. **`@Controller`**\n   - Specialized annotation for web layer components in Spring MVC.\n   - Marks a class as a Spring MVC controller that can handle web requests.\n\n   ```java\n   @Controller\n   public class MyController {\n       // request handling methods\n   }\n   ```\n\n7. **`@RestController`**\n   - Combination of `@Controller` and `@ResponseBody`.\n   - Simplifies the creation of RESTful web services by marking a class as a controller where every method returns a domain object instead of a view.\n\n   ```java\n   @RestController\n   @RequestMapping(\"/api\")\n   public class MyRestController {\n       @GetMapping(\"/hello\")\n       public String hello() {\n           return \"Hello, World!\";\n       }\n   }\n   ```\n\n8. **`@Autowired`**\n   - Marks a constructor, field, or setter method to be autowired by Spring’s dependency injection.\n   - It injects the required dependency automatically.\n\n   ```java\n   @Autowired\n   private MyService myService;\n   ```\n\n9. **`@Qualifier`**\n   - Used in conjunction with `@Autowired` to specify which bean to inject when multiple candidates are available.\n   - Helps in disambiguating the dependency injection.\n\n   ```java\n   @Autowired\n   @Qualifier(\"specificBean\")\n   private MyService myService;\n   ```\n\n10. **`@Primary`**\n    - Indicates that a bean should be given preference when multiple beans qualify for autowiring.\n\n    ```java\n    @Primary\n    @Bean\n    public MyService myPrimaryService() {\n        return new MyPrimaryServiceImpl();\n    }\n    ```\n\n11. **`@Scope`**\n    - Defines the scope of a bean, such as `singleton`, `prototype`, `request`, `session`, etc.\n\n    ```java\n    @Bean\n    @Scope(\"prototype\")\n    public MyService myService() {\n        return new MyServiceImpl();\n    }\n    ```\n\n### **Spring MVC and Web Annotations**\n\n1. **`@RequestMapping`**\n   - Maps HTTP requests to handler methods in Spring MVC controllers.\n   - Can be used at the class and method level to define the request URI and method (GET, POST, etc.).\n\n   ```java\n   @Controller\n   @RequestMapping(\"/home\")\n   public class HomeController {\n       @RequestMapping(\"/welcome\")\n       public String welcome() {\n           return \"welcome\";\n       }\n   }\n   ```\n\n2. **`@GetMapping`, `@PostMapping`, `@PutMapping`, `@DeleteMapping`**\n   - Specialized annotations for mapping specific HTTP methods (GET, POST, PUT, DELETE) to handler methods.\n\n   ```java\n   @GetMapping(\"/users\")\n   public List<User> getUsers() {\n       return userService.getAllUsers();\n   }\n   ```\n\n3. **`@PathVariable`**\n   - Binds a method parameter to a URI template variable in a request.\n\n   ```java\n   @GetMapping(\"/users/{id}\")\n   public User getUserById(@PathVariable(\"id\") Long userId) {\n       return userService.getUserById(userId);\n   }\n   ```\n\n4. **`@RequestParam`**\n   - Binds a method parameter to a web request parameter.\n\n   ```java\n   @GetMapping(\"/search\")\n   public List<User> searchUsers(@RequestParam(\"name\") String name) {\n       return userService.searchUsersByName(name);\n   }\n   ```\n\n5. **`@RequestBody`**\n   - Binds the body of an HTTP request to a method parameter.\n\n   ```java\n   @PostMapping(\"/users\")\n   public User createUser(@RequestBody User user) {\n       return userService.createUser(user);\n   }\n   ```\n\n6. **`@ResponseBody`**\n   - Indicates that a method’s return value should be written directly to the HTTP response body (typically as JSON).\n\n   ```java\n   @GetMapping(\"/users\")\n   @ResponseBody\n   public List<User> getUsers() {\n       return userService.getAllUsers();\n   }\n   ```\n\n7. **`@ExceptionHandler`**\n   - Defines a method that handles exceptions thrown by request handler methods in a controller.\n\n   ```java\n   @Controller\n   public class MyController {\n       @ExceptionHandler(Exception.class)\n       public ResponseEntity<String> handleException(Exception ex) {\n           return new ResponseEntity<>(ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);\n       }\n   }\n   ```\n\n### **Spring Boot Annotations**\n\n1. **`@SpringBootApplication`**\n   - A combination of `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`.\n   - It is the primary annotation for a Spring Boot application, marking the main class as a Spring Boot application.\n\n   ```java\n   @SpringBootApplication\n   public class MySpringBootApplication {\n       public static void main(String[] args) {\n           SpringApplication.run(MySpringBootApplication.class, args);\n       }\n   }\n   ```\n\n2. **`@EnableAutoConfiguration`**\n   - Enables Spring Boot’s auto-configuration feature, automatically configuring your application based on the dependencies on the classpath.\n\n   ```java\n   @EnableAutoConfiguration\n   public class MySpringBootApplication {\n       public static void main(String[] args) {\n           SpringApplication.run(MySpringBootApplication.class, args);\n       }\n   }\n   ```\n\n3. **`@ComponentScan`**\n   - Configures component scanning in Spring, telling the Spring container where to look for annotated classes that will be managed as beans.\n\n   ```java\n   @ComponentScan(basePackages = \"com.example\")\n   public class MyAppConfig {\n       // configuration\n   }\n   ```\n\n4. **`@SpringBootTest`**\n   - Used to create tests for Spring Boot applications, loading the full application context.\n\n   ```java\n   @SpringBootTest\n   public class MySpringBootTests {\n       // test methods\n   }\n   ```\n\n### **Transactional and Persistence Annotations**\n\n1. **`@Transactional`**\n   - Marks a method or class as transactional, allowing Spring to manage the transaction boundaries.\n\n   ```java\n   @Transactional\n   public void saveUser(User user) {\n       userRepository.save(user);\n   }\n   ```\n\n2. **`@Entity`**\n   - Marks a class as a JPA entity, which is mapped to a database table.\n\n   ```java\n   @Entity\n   public class User {\n       @Id\n       private Long id;\n       // other fields, getters, and setters\n   }\n   ```\n\n3. **`@Table`**\n   - Specifies the database table name for a JPA entity.\n\n   ```java\n   @Entity\n   @Table(name = \"users\")\n   public class User {\n       @Id\n       private Long id;\n       // other fields, getters, and setters\n   }\n   ```\n\nThese annotations are fundamental to building Spring and Spring Boot applications, providing a powerful, declarative way to define application behavior.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"a9ae20a9-c23f-4be2-a015-2509a4a13e88","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.972Z"},"updatedDate":{"$date":"2024-08-26T21:41:20.189Z"},"uniqueId":"ed0267a4-f84d-4126-9a4d-0c71ed1aa881","__v":0}
{"_id":{"$oid":"668ef19559d6bcc528b1dfc2"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Spring Boot, you can send an object as a response from a RESTful web service by returning the object directly from a controller method. Spring Boot automatically converts the object to a JSON (or XML) response using Jackson (or another converter) that is included in the classpath.\n\nHere's a simple example:\n\n### 1. Create a Model Class\nFirst, create a model class that will represent the object to be returned.\n\n```java\npackage com.example.demo.model;\n\npublic class User {\n    private Long id;\n    private String name;\n    private String email;\n\n    // Constructors\n    public User() {}\n\n    public User(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n### 2. Create a REST Controller\nNext, create a REST controller that will handle HTTP requests and return an object as a response.\n\n```java\npackage com.example.demo.controller;\n\nimport com.example.demo.model.User;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    public User getUser() {\n        return new User(1L, \"John Doe\", \"john.doe@example.com\");\n    }\n}\n```\n\n### 3. Run the Application\nYou can now run your Spring Boot application, and when you make a GET request to `http://localhost:8080/api/user`, the `User` object will be returned as a JSON response:\n\n### Example JSON Response:\n```json\n{\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}\n```\n\n### Additional Information:\n- **Jackson**: By default, Spring Boot uses Jackson to convert Java objects into JSON and vice versa. Ensure that Jackson is on your classpath (it’s included by default with Spring Boot Starter Web).\n- **Response Status**: If you need to change the HTTP status code, you can use `@ResponseStatus` or return a `ResponseEntity<User>` with the desired status.\n\n### Example with `ResponseEntity`:\n```java\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\n@GetMapping(\"/user\")\npublic ResponseEntity<User> getUser() {\n    User user = new User(1L, \"John Doe\", \"john.doe@example.com\");\n    return new ResponseEntity<>(user, HttpStatus.OK);\n}\n```\n\nThis approach allows you to send objects as part of your REST API response in a clean and straightforward manner.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"7274bd40-35fa-41f8-a572-ce200aebeab4","order":0,"createdDate":{"$date":"2024-07-10T20:39:49.988Z"},"updatedDate":{"$date":"2024-08-26T21:45:28.558Z"},"uniqueId":"0d92e146-0c5e-411d-898a-5b45354eb5e3","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e025"},"name":"Spring provides built-in support for uploading files through MultipartResolver interface implementations. It’s very easy to","heading":"Spring provides built-in support for uploading files through MultipartResolver interface","smartContent":{"content":"<div><!--block-->Spring provides built-in support for uploading files through&nbsp;<strong>MultipartResolver</strong>&nbsp;interface implementations. It’s very easy to use and requires only configuration changes to get it working. Obviously we would need to write controller handler method to handle the incoming file and process it. For a complete example, please refer&nbsp;<a href=\"http://www.journaldev.com/2573/spring-mvc-file-upload-example-single-multiple-files\">Spring File Upload Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"514d195a-f7c1-4935-b267-952a5e8fd010","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.005Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.005Z"},"uniqueId":"54b73ac4-9bb0-40dc-88ff-7ec82d57c8af","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e088"},"name":"Spring supports JSR-303 annotation based validations as well as provide Validator interface that we can","heading":"Spring supports JSR-303 annotation based validations as well as provide","smartContent":{"content":"<div><!--block-->Spring supports JSR-303 annotation based validations as well as provide Validator interface that we can implement to create our own custom validator. For using JSR-303 based validation, we need to annotate bean variables with the required validations.<br><br></div><div><!--block-->For custom validator implementation, we need to configure it in the controller class. For a complete example, please read&nbsp;<a href=\"http://www.journaldev.com/2668/spring-validation-example-mvc-validator\">Spring MVC Form Validation Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1684a66b-9f86-46d3-b86d-403a39529a52","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.023Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.023Z"},"uniqueId":"7b6f3a48-5acc-454d-8c8b-9ed7f61a3d07","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e0eb"},"name":"Spring MVC Interceptors are like Servlet Filters and allow us to intercept client request and","heading":"Spring MVC Interceptors are like Servlet Filters and allow us","smartContent":{"content":"<div><!--block-->Spring MVC Interceptors are like Servlet Filters and allow us to intercept client request and process it. We can intercept client request at three places –&nbsp;<strong>preHandle</strong>,&nbsp;<strong>postHandle</strong>&nbsp;and&nbsp;<strong>afterCompletion</strong>.<br><br></div><div><!--block-->We can create spring interceptor by implementing HandlerInterceptor interface or by extending abstract class&nbsp;<strong>HandlerInterceptorAdapter</strong>.<br><br></div><div><!--block-->We need to configure interceptors in the spring bean configuration file. We can define an interceptor to intercept all the client requests or we can configure it for specific URI mapping too. For a detailed example, please refer&nbsp;<a href=\"http://www.journaldev.com/2676/spring-mvc-interceptor-example-handlerinterceptor-handlerinterceptoradapter\">Spring MVC Interceptor Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8c280193-92c7-4385-9a35-1b96c774ef6f","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.04Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.04Z"},"uniqueId":"360500c9-5e11-4936-b6bc-761918140b96","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e14e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Spring Boot Data, more commonly referred to as **Spring Data**, is a part of the larger Spring ecosystem. It simplifies data access and persistence in Spring applications by providing a consistent, familiar, and easy-to-use abstraction layer for various data stores, including relational databases, NoSQL databases, and other data-centric technologies.\n\n### Key Components of Spring Data:\n\n1. **Spring Data JPA**:\n   - Simplifies data access in relational databases using the Java Persistence API (JPA).\n   - Provides built-in support for common CRUD (Create, Read, Update, Delete) operations.\n   - Uses `@Repository` to create data access objects (DAOs) or repositories.\n   - Supports query methods that allow you to define repository methods by simply declaring their signatures.\n\n   ```java\n   @Repository\n   public interface UserRepository extends JpaRepository<User, Long> {\n       List<User> findByName(String name);\n   }\n   ```\n\n2. **Spring Data MongoDB**:\n   - Simplifies the interaction with MongoDB, a NoSQL database.\n   - Provides an easy way to perform CRUD operations and queries on MongoDB collections.\n   - Supports the creation of repository interfaces similar to Spring Data JPA.\n\n   ```java\n   @Repository\n   public interface UserRepository extends MongoRepository<User, String> {\n       List<User> findByEmail(String email);\n   }\n   ```\n\n3. **Spring Data Redis**:\n   - Provides an abstraction layer over Redis, an in-memory data store.\n   - Supports operations like caching, key-value storage, and more using Redis.\n\n   ```java\n   @Repository\n   public interface UserRepository extends CrudRepository<User, String> {\n       User findById(String id);\n   }\n   ```\n\n4. **Spring Data Cassandra**:\n   - Offers integration with Apache Cassandra, a distributed NoSQL database.\n   - Supports various Cassandra-specific operations and allows the use of Cassandra CQL (Cassandra Query Language).\n\n   ```java\n   @Repository\n   public interface UserRepository extends CassandraRepository<User, UUID> {\n       List<User> findByLastName(String lastName);\n   }\n   ```\n\n5. **Spring Data Elasticsearch**:\n   - Provides integration with Elasticsearch, a distributed search and analytics engine.\n   - Allows you to easily index and search entities within an Elasticsearch cluster.\n\n   ```java\n   @Repository\n   public interface UserRepository extends ElasticsearchRepository<User, String> {\n       List<User> findByName(String name);\n   }\n   ```\n\n6. **Spring Data JDBC**:\n   - Provides a lightweight, simple approach to data access using JDBC.\n   - Designed for applications that don’t need the full power of an ORM like JPA.\n   - Encourages a more direct and explicit approach to database access.\n\n   ```java\n   @Repository\n   public interface UserRepository extends CrudRepository<User, Long> {\n       Optional<User> findById(Long id);\n   }\n   ```\n\n### Benefits of Spring Data:\n\n1. **Simplified Data Access**:\n   - Reduces boilerplate code for data access layers.\n   - Automatic implementation of common data access methods like `save`, `findAll`, `deleteById`, etc.\n\n2. **Powerful Query Methods**:\n   - Supports the creation of query methods by simply defining method signatures in repository interfaces.\n   - Enables complex queries using keywords, custom query annotations, or even the QueryDSL.\n\n3. **Integration with Multiple Data Stores**:\n   - Abstracts the interaction with various types of databases (SQL, NoSQL, in-memory, etc.), making it easier to switch data stores if needed.\n\n4. **Custom Implementations**:\n   - Allows the addition of custom behavior to repositories by extending base repositories and defining custom methods.\n\n5. **Paging and Sorting**:\n   - Built-in support for pagination and sorting, which can be easily integrated into your repository methods.\n\n   ```java\n   Page<User> findAll(Pageable pageable);\n   ```\n\n6. **Consistency Across Data Stores**:\n   - Provides a consistent programming model and repository interface across different types of databases.\n\n### Example of a Spring Data JPA Repository:\n\n```java\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\nimport java.util.List;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    List<User> findByLastName(String lastName);\n}\n```\n\nThis repository interface will provide standard CRUD operations for the `User` entity, and the `findByLastName` method will generate a query to retrieve users based on their last name.\n\n### Spring Boot Integration:\n- When using Spring Boot, Spring Data repositories are automatically configured and available as beans within the application context. You typically don't need any explicit configuration, thanks to Spring Boot's auto-configuration feature.\n\nSpring Data is a powerful tool in the Spring ecosystem, providing developers with a simplified, consistent, and flexible approach to data access across a wide variety of databases and storage systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"06716470-f20d-4287-afc7-9da1fe24923e","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.055Z"},"updatedDate":{"$date":"2024-08-26T21:50:15.361Z"},"uniqueId":"e662ff57-b1e7-43f1-a2e0-4b5936215022","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e1b1"},"name":"For using servlet container configured JNDI DataSource, we need to configure it in the spring","heading":"For using servlet container configured JNDI DataSource, we need to","smartContent":{"content":"<div><!--block-->For using servlet container configured JNDI DataSource, we need to configure it in the spring bean configuration file and then inject it to spring beans as dependencies. Then we can use it withJdbcTemplate to perform database operations.<br><br></div><div><!--block-->Sample configuration would be:<br><br></div><pre><!--block-->&lt;beans:bean id=\"dbDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\"&gt;\n    &lt;beans:property name=\"jndiName\" value=\"java:comp/env/jdbc/MyLocalDB\"/&gt;\n&lt;/beans:bean&gt;</pre><div><!--block-->For complete example, please refer&nbsp;<a href=\"http://www.journaldev.com/2597/spring-datasource-jndi-with-tomcat-example\">Spring Tomcat JNDI Example</a>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"cabe79c5-aa64-4f55-bd46-c8677747eeb5","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.072Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.072Z"},"uniqueId":"2ec8e1b6-586e-4781-8d09-9cfeeb816563","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e214"},"name":"Spring framework provides transaction management support through Declarative Transaction Management as well as programmatic transaction","heading":"Spring framework provides transaction management support through Declarative Transaction Management","smartContent":{"content":"<div><!--block-->Spring framework provides transaction management support through Declarative Transaction Management as well as programmatic transaction management. Declarative transaction management is most widely used because it’s easy to use and works in most of the cases.<br><br></div><div><!--block-->We use annotate a method with @Transactional annotation for Declarative transaction management. We need to configure transaction manager for the DataSource in the spring bean configuration file.<br><br></div><pre><!--block-->&lt;bean id=\"transactionManager\"\n    class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt;\n    &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt;\n&lt;/bean&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b5e95fca-e4ff-4725-99e0-bad7e423cf7b","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.089Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.089Z"},"uniqueId":"bcd26c51-0398-4486-8769-a2c2fbf88c0d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e277"},"name":"Spring DAO support is provided to work with data access technologies like JDBC, Hibernate in","heading":"Spring DAO support is provided to work with data access","smartContent":{"content":"<div><!--block-->Spring DAO support is provided to work with data access technologies like JDBC, Hibernate in a consistent and easy way. For example we have JdbcDaoSupport, HibernateDaoSupport,JdoDaoSupport and JpaDaoSupport for respective technologies.<br><br></div><div><!--block-->Spring DAO also provides consistency in exception hierarchy and we don’t need to catch specific exceptions.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"957941c6-154b-470d-b2a8-8470c80d1e2d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.106Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.106Z"},"uniqueId":"4dff53ce-dec9-4e14-bfe5-c32f3989d37d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e2da"},"name":"We can use Spring ORM module to integrate Spring and Hibernate frameworks, if you are","heading":"We can use Spring ORM module to integrate Spring and","smartContent":{"content":"<div><!--block-->We can use Spring ORM module to integrate Spring and Hibernate frameworks, if you are using Hibernate 3+ where SessionFactory provides current session, then you should avoid usingHibernateTemplate or HibernateDaoSupport classes and better to use DAO pattern with dependency injection for the integration.<br><br></div><div><!--block-->Also Spring ORM provides support for using Spring declarative transaction management, so you should utilize that rather than going for hibernate boiler-plate code for transaction management.<br><br></div><div><!--block-->For better understanding you should go through following tutorials:</div><ol><li><!--block--><a href=\"http://www.journaldev.com/3524/spring-hibernate-integration-example-tutorial\">Spring Hibernate Integration Example</a></li><li><!--block--><a href=\"http://www.journaldev.com/3531/spring-mvc-hibernate-mysql-integration-crud-example-tutorial\">Spring MVC Hibernate Integration Example</a></li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2368a865-6875-4c79-846c-d5c43917705f","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.123Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.123Z"},"uniqueId":"bb7fefd2-a87d-415f-ae94-536fa343f177","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e33d"},"name":"Spring security framework focuses on providing both authentication and authorization in java applications.","heading":"Spring security framework focuses on providing both authentication and authorization in java applications.","smartContent":{"content":"Here are the key points:\n\n1. **Introduction to Spring Security**:\n   - Spring Security is used for authentication and authorization in web applications.\n   - It helps prevent common attacks like CSRF and session fixation.\n\n2. **Benefits**:\n   - Proven technology, easy integration, and support for various authentication methods (in-memory, DAO, JDBC, LDAP).\n\n3. **Example Project**:\n   - The tutorial walks through creating a web application using Eclipse and converting it to a Maven project.\n   - It covers three authentication methods: in-memory, DAO, and JDBC.\n\n4. **Database Setup**:\n   - For JDBC authentication, it uses a MySQL database with tables for user details and roles.\n   - Example SQL scripts are provided to create and populate these tables.\n\n5. **Maven Dependencies**:\n   - The tutorial includes the necessary Maven dependencies for Spring Security.\n\n6. **Configuration**:\n   - Detailed steps on configuring Spring Security in the web application, including setting up security filters and defining user roles.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"d5bb4d1e-f63c-4a50-9000-43f5702823c1","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.141Z"},"updatedDate":{"$date":"2024-08-29T18:33:16.868Z"},"uniqueId":"08445c6a-c18d-42e3-94c6-b0d13d1daea1","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e3a0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To inject a `java.util.Properties` object into a Spring Bean, you can follow these approaches:\n\n### Approach 1: Using `@PropertySource` and `@Value`\n\n1. **Define a properties file** (e.g., `application.properties` or `custom.properties`) in your `src/main/resources` directory.\n\n    ```properties\n    my.property1=value1\n    my.property2=value2\n    ```\n\n2. **Create a configuration class** to load the properties and inject them into a Spring Bean.\n\n    ```java\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.context.annotation.PropertySource;\n    import org.springframework.core.env.Environment;\n    import org.springframework.beans.factory.annotation.Autowired;\n\n    @Configuration\n    @PropertySource(\"classpath:custom.properties\")\n    public class AppConfig {\n\n        @Autowired\n        private Environment env;\n\n        @Bean\n        public java.util.Properties properties() {\n            java.util.Properties properties = new java.util.Properties();\n            properties.put(\"property1\", env.getProperty(\"my.property1\"));\n            properties.put(\"property2\", env.getProperty(\"my.property2\"));\n            return properties;\n        }\n    }\n    ```\n\n3. **Inject the `Properties` into your Spring Bean**.\n\n    ```java\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Component;\n\n    import java.util.Properties;\n\n    @Component\n    public class MyBean {\n\n        private final Properties properties;\n\n        @Autowired\n        public MyBean(Properties properties) {\n            this.properties = properties;\n        }\n\n        public void printProperties() {\n            System.out.println(\"Property1: \" + properties.getProperty(\"property1\"));\n            System.out.println(\"Property2: \" + properties.getProperty(\"property2\"));\n        }\n    }\n    ```\n\n### Approach 2: Using `@ConfigurationProperties`\n\n1. **Define a properties file** in the `src/main/resources` directory.\n\n    ```properties\n    my.config.property1=value1\n    my.config.property2=value2\n    ```\n\n2. **Create a configuration properties class**.\n\n    ```java\n    import org.springframework.boot.context.properties.ConfigurationProperties;\n    import org.springframework.stereotype.Component;\n\n    @Component\n    @ConfigurationProperties(prefix = \"my.config\")\n    public class MyProperties {\n\n        private String property1;\n        private String property2;\n\n        // Getters and Setters\n\n        public String getProperty1() {\n            return property1;\n        }\n\n        public void setProperty1(String property1) {\n            this.property1 = property1;\n        }\n\n        public String getProperty2() {\n            return property2;\n        }\n\n        public void setProperty2(String property2) {\n            this.property2 = property2;\n        }\n    }\n    ```\n\n3. **Inject the properties class into your Spring Bean**.\n\n    ```java\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Component;\n\n    @Component\n    public class MyBean {\n\n        private final MyProperties myProperties;\n\n        @Autowired\n        public MyBean(MyProperties myProperties) {\n            this.myProperties = myProperties;\n        }\n\n        public void printProperties() {\n            System.out.println(\"Property1: \" + myProperties.getProperty1());\n            System.out.println(\"Property2: \" + myProperties.getProperty2());\n        }\n    }\n    ```\n\n### Approach 3: Manually Loading Properties\n\n1. **Load properties manually** in your configuration class.\n\n    ```java\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.context.annotation.Configuration;\n\n    import java.io.IOException;\n    import java.io.InputStream;\n    import java.util.Properties;\n\n    @Configuration\n    public class AppConfig {\n\n        @Bean\n        public java.util.Properties properties() throws IOException {\n            java.util.Properties properties = new java.util.Properties();\n            try (InputStream input = getClass().getClassLoader().getResourceAsStream(\"custom.properties\")) {\n                if (input != null) {\n                    properties.load(input);\n                }\n            }\n            return properties;\n        }\n    }\n    ```\n\n2. **Inject the `Properties` into your Spring Bean** as shown in Approach 1.\n\nChoose the approach that best fits your use case and configuration needs.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"7c57b56a-81d4-45b5-b583-7dc3b70c6f5a","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.159Z"},"updatedDate":{"$date":"2024-08-28T18:07:25.689Z"},"uniqueId":"2ec91e04-7684-4074-bedf-280850a8ec30","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e403"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The Spring Framework utilizes several design patterns to provide flexibility, modularity, and maintainability in applications. Some key design patterns used in Spring are:\n\n1. **Dependency Injection (DI)**: \n   - **Pattern**: Inversion of Control (IoC)\n   - **Description**: Spring uses DI to manage dependencies between beans, promoting loose coupling and easier testing. Dependencies are injected into beans rather than being created or looked up by the beans themselves.\n\n2. **Singleton**:\n   - **Pattern**: Singleton\n   - **Description**: By default, Spring beans are singleton-scoped, meaning that a single instance of the bean is created and shared throughout the application context. This reduces overhead and promotes reuse.\n\n3. **Factory Method**:\n   - **Pattern**: Factory Method\n   - **Description**: Spring's `BeanFactory` and `ApplicationContext` use the factory method pattern to create and manage bean instances. This allows for flexible bean creation and configuration.\n\n4. **Proxy**:\n   - **Pattern**: Proxy\n   - **Description**: Spring uses dynamic proxies (JDK dynamic proxies or CGLIB proxies) to implement aspects such as transactions, security, and caching. Proxies act as intermediaries to add additional behavior to bean methods.\n\n5. **Template Method**:\n   - **Pattern**: Template Method\n   - **Description**: Spring provides template classes (e.g., `JdbcTemplate`, `HibernateTemplate`) that encapsulate common tasks and provide hooks for customization. This pattern simplifies error handling and resource management.\n\n6. **Observer**:\n   - **Pattern**: Observer\n   - **Description**: Spring's event handling system is based on the observer pattern. Beans can listen to and publish events using the `ApplicationEventPublisher` and `ApplicationListener` interfaces.\n\n7. **Decorator**:\n   - **Pattern**: Decorator\n   - **Description**: Spring's support for AOP (Aspect-Oriented Programming) uses the decorator pattern to add behavior to existing beans without modifying their code.\n\n8. **Adapter**:\n   - **Pattern**: Adapter\n   - **Description**: Spring provides adapter classes (e.g., `HandlerAdapter`) to bridge between different components or APIs. This allows for integration with various technologies and simplifies interaction.\n\n9. **Strategy**:\n   - **Pattern**: Strategy\n   - **Description**: Spring's `Strategy` pattern is used in various places, such as `BeanFactory` and `MessageSource`, where different implementations can be swapped at runtime depending on the context or configuration.\n\n10. **Builder**:\n    - **Pattern**: Builder\n    - **Description**: Spring's `BeanDefinitionBuilder` allows for the creation and configuration of `BeanDefinition` objects in a fluent API style, which simplifies the process of defining complex bean configurations programmatically.\n\nThese patterns collectively help Spring to provide a powerful and flexible framework for building Java applications, encouraging best practices and promoting clean code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"1c7eab21-53aa-4b4b-9ef2-5d1bbcbc258e","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.176Z"},"updatedDate":{"$date":"2024-08-28T18:11:57.311Z"},"uniqueId":"59a14251-7faa-455f-8af7-a215db9ae893","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e466"},"name":"Some of the best practices for Spring Framework are: Avoid version numbers in schema reference,","heading":"Some of the best practices for Spring Framework are: Avoid","smartContent":{"content":"<div><!--block-->Some of the best practices for Spring Framework are:</div><ol><li><!--block-->Avoid version numbers in schema reference, to make sure we have the latest configs.</li><li><!--block-->Divide spring bean configurations based on their concerns such as spring-jdbc.xml, spring-security.xml.</li><li><!--block-->For spring beans that are used in multiple contexts in Spring MVC, create them in the root context and initialize with listener.</li><li><!--block-->Configure bean dependencies as much as possible, try to avoid autowiring as much as possible.</li><li><!--block-->For application level properties, best approach is to create a property file and read it in the spring bean configuration file.</li><li><!--block-->For smaller applications, annotations are useful but for larger applications annotations can become a pain. If we have all the configuration in xml files, maintaining it will be easier.</li><li><!--block-->Use correct annotations for components for understanding the purpose easily. For services use @Service and for DAO beans use @Repository.</li><li><!--block-->Spring framework has a lot of modules, use what you need. Remove all the extra dependencies that gets usually added when you create projects through Spring Tool Suite templates.</li><li><!--block-->If you are using Aspects, make sure to keep the join pint as narrow as possible to avoid advice on unwanted methods. Consider custom annotations that are easier to use and avoid any issues.</li><li><!--block-->Use dependency injection when there is actual benefit, just for the sake of loose-coupling don’t use it because it’s harder to maintain.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fa4cd7a8-762c-4302-9cde-ab0000ae1794","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.191Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.191Z"},"uniqueId":"bb51d747-9913-4db6-9b60-df1fdf48072e","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e4c9"},"name":"New features in Spring 3.0 compare to its previous version: Spring MVC Test Framework Asynchronous","heading":"New features in Spring 3.0 compare to its previous version:","smartContent":{"content":"<div><!--block--><strong>New features in Spring 3.0 compare to its previous version:</strong></div><ul><li><!--block-->Spring MVC Test Framework</li><li><!--block-->Asynchronous MVC processing on Servlet 3.0</li><li><!--block-->custom @Bean definition annotations in @Configuration classes</li><li><!--block-->@Autowired and @Value to be used as meta-annotations</li><li><!--block-->Concurrency refinements across the framework</li><li><!--block-->Loading WebApplicationContexts in the TestContext framework</li><li><!--block-->JCache 0.5 (JSR-107)</li></ul><div><!--block--><br><strong>New features in Spring 4.0 compare to Spring 3.0:</strong></div><ul><li><!--block-->JSR-335 Lambda expressions</li><li><!--block-->JSR-310 Date-Time value types for Spring data binding and formatting.</li><li><!--block-->JSR-343 JMS 2.0.</li><li><!--block-->JSR-338 JPA 2.1.</li><li><!--block-->JSR-349 Bean Validation 1.1.</li><li><!--block-->JSR-236 Java EE 7 Enterprise Concurrency support.</li><li><!--block-->JSR-356 Spring’s WebSocket endpoint mode.</li><li><!--block-->Configuring and implementing Spring style application using Groovy 2. Also they specify that first class support for the Groovy applications.</li><li><!--block-->Also spring plans to add the HATEOS (Hypermedia as the Engine of Application State) support for REST APIs.</li><li><!--block-->RestController annotation</li><li><!--block-->Removed Deprecated Packages and Methods,&nbsp;<a href=\"http://docs.spring.io/spring-framework/docs/3.2.4.RELEASE_to_4.0.0.RELEASE/\">check out the API Differences Report</a></li><li><!--block-->Java 8 Support</li><li><!--block-->Java EE 6 and 7 or above is now considered the baseline for Spring Framework 4</li><li><!--block-->Groovy Bean Definition DSL,&nbsp;<a href=\"http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.html\">read more about this API</a>.</li><li><!--block-->Core Container Improvements</li><li><!--block-->General Web Improvements</li><li><!--block-->WebSocket, SockJS, and STOMP Messaging</li><li><!--block-->Testing Improvements</li></ul><div><!--block-->Also Spring 4 is the minimum requirement for running spring boot applications.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"feaa7442-6930-4cd1-a8cf-e8b21021a66b","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.209Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.209Z"},"uniqueId":"5f6ec369-341d-4ac0-93de-767807152119","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e560"},"name":"Ashok Jhasya Be mature Try to learn from others. If there is no learning from","heading":"Ashok Jhasya Be mature Try to learn from others. If","smartContent":{"content":"<ul><li><!--block--><strong>Ashok Jhasya</strong><ul><li><!--block-->Be mature<ul><li><!--block-->Try to learn from others. If there is no learning from anyone, better to maintain distance.</li></ul></li><li><!--block-->Follow process.</li><li><!--block-->Be&nbsp;<strong>discplined</strong>.</li></ul></li><li><!--block--><strong>Nakul Giri (MySQL DB Expert)</strong><ul><li><!--block-->Suggestion to myself<ul><li><!--block-->Jyada tension mat lo. Jab dukan jamni hogi, jam jayegi.</li></ul></li></ul></li><li><!--block--><strong>Fayaz (L2 Analyst, Java) - Gain Manager, Resolve Jiffy</strong><ul><li><!--block-->Learn and command to do some more java debugging tasks.</li></ul></li><li><!--block--><strong>Kirti Tripathi (L2 Analyst, Java) - Gain Manager, Resolve Jiffy</strong><ul><li><!--block-->She did not said this but as per her expressions<ul><li><!--block-->Don't smell bad. If smoked, then just keep your breath fresh.<ul><li><!--block-->Chew mint.</li><li><!--block-->Wash your face</li><li><!--block-->Gargle</li></ul></li></ul></li></ul></li><li><!--block--><strong><em>Karan Janjua</em></strong><ul><li><!--block-->I talked with him on 26th Nov 2017<ul><li><!--block-->He said, Premendra tum&nbsp;<strong><em>cool raha karo</em></strong>. Concentrix me utna politics nahi hai.</li><li><!--block-->Freelancing me opportunity ke liye apni koi site host karo.</li></ul></li></ul></li><li><!--block--><strong>Anshul Bansal</strong><ul><li><!--block-->Never accept own or team's fault. 99.99% people do same, so why do we go other to to them.</li></ul></li><li><!--block--><strong>Kirti Tripathi</strong><ul><li><!--block-->13-Dec-2018<ul><li><!--block--><strong>Do not overthink</strong>. If you are being stucked in any situation, change place, thought.</li><li><!--block-->maintain secrecy. Do not break trust, otherwise people will not talk to you.</li><li><!--block-->Be polite. Refrain to be rude. Jo ped me jitna fal lagta hai wo utna hi jhuk jata hai.</li></ul></li></ul></li><li><!--block--><strong>Satish Verma</strong><ul><li><!--block--><strong>Jitni salary mil rahi hai, usi ke according kaam karna chahiye. Apna mast life jina chahiye.</strong></li></ul></li><li><!--block--><strong>Harish Bareja</strong><ul><li><!--block-->Do not try to make people confused with you activities, by speech, writing, facial expression.</li><li><!--block--><strong>Be clear with what you want to express.</strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.242Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.242Z"},"uniqueId":"0039fc20-92ea-4d0c-ace0-47d8d595b84b","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e562"},"name":"Sanjay As last discussed, I agreed to do leadership. I have to understand my new","heading":"Sanjay As last discussed, I agreed to do leadership. I","smartContent":{"content":"<ul><li><!--block--><strong>Sanjay&nbsp;</strong><ul><li><!--block-->As last discussed, I agreed to do leadership.&nbsp;<ul><li><!--block-->I have to understand my new responsibility.</li></ul></li><li><!--block-->Forget all misshaping of past personal and professional life. Take lessons from them and try to practice it.&nbsp;</li><li><!--block-->Yogesh devgan chahte hain ki tum ownership lo aur task khud se complete karney ka try karo. - 15-Jan-2018<ul><li><!--block-->Dusro se kaam karwao.</li><li><!--block-->Shiekh sir ne tumhhari dubara joining ke samay kaha tha ki \"<strong>Premendra management ka kaam nahi kar payega.</strong>\"<ul><li><!--block-->Tum ye baat galat saabit karo.</li><li><!--block-->Ab yaha se job se nikaal diye jaaney ki baat man se nikal do aur dusro se kaam nikalne par focus karo.</li></ul></li></ul></li></ul></li><li><!--block--><strong>Naresh&nbsp;</strong><ul><li><!--block-->Say No to tasks for which you have no idea, like WAS configuration.</li></ul></li><li><!--block--><strong>Yashwant singh</strong><ul><li><!--block-->Time se office aao, apna kaam karo aur time se nikal jao.</li></ul></li><li><!--block--><strong>and other colleagues</strong></li></ul><div><!--block--><strong>Sheikh Ibbrahim</strong></div><ul><li><!--block-->Dar ke rahne wala aadat chhoro.</li><li><!--block-->Sab se communicate karo.<ul><li><!--block-->19-Jan-2018<ul><li><!--block-->Sab se question karo.<ul><li><!--block-->Jab tum question karte ho toh khud hi tum dusro par haawi hone lagte ho.</li><li><!--block-->Question karney ke baad khud hi thori der me pyaar se uska answer de do. Isse dusre man hi man me ye maan lete hain ki ye banda se koi sawal nahi karna. Jo ye bol raha hai, usko maan lene me hi bhalai hai.</li></ul></li><li><!--block-->Try one thing- Never say \"NO\", rather first analyse issue, take understanding of problem-statement and then say \"give me 30 minutes, and thik for solution like you are going to be burnt and you will have to attempt for your last escape.\"&nbsp;</li><li><!--block-->Life me ek baar Sheikh sir ko bhi laga ki wo bahut sochtne lage hain.&nbsp;<ul><li><!--block-->Sheikh sir ke pitaji ke dehant ke baad, unke ghar ki halat sahi nahi thi. Ghar me arthik tangi thi.</li><li><!--block-->Sheikh sir sochte they ki mere sath hi aisa kyu hua.</li><li><!--block-->Fir sir ko realize hua ki \"<strong>Jo hua hai kuch acche ke liye hi hua hai</strong>\". Uske baad sheikh sir ko path mil gaya.</li></ul></li></ul></li></ul></li><li><!--block-->Team me sab se baat ko samjho, tab bahar me khud se us baat ko represent karne ka try karo. (18-Dec-2017 , take 3 months and change my behave)</li><li><!--block--><br></li></ul><div><!--block--><strong><br>Yogesh Devgan</strong></div><ul><li><!--block-->Don't chew pan masala in front of any lady employee.</li><li><!--block--><strong>Leadership</strong><ul><li><!--block-->How -&nbsp;<ul><li><!--block-->1) Understand the expectation-level of Management. How much I fit into it. Do I need help of others? Whom and how I will get the help?</li><li><!--block-->2) Understand and make grip on given task.&nbsp;</li><li><!--block-->3) Delegate the work to subordinates and monitor it.</li></ul></li></ul></li><li><!--block-->Take understanding for CCE project.</li><li><!--block-->Humko task assign karne ke baad bhula nahi jaata. Hum chahte hain ki task assign karke hum ko follow up nahi lena pare.- 15-Jan-2018<ul><li><!--block-->Agar tumko problem hogi toh hum help karenge. but tum ownership lo aur assigned task khud se complete karne ka try karo.</li></ul></li><li><!--block--><strong>Be informed from mails and tickets.</strong></li><li><!--block-->Extract RCAs for resolvejiffy and gainmanager</li></ul><div><!--block--><strong>Somen Bose</strong></div><ul><li><!--block--><strong>My discussions with Somen Bose regarding my revised goals</strong><ul><li><!--block--><strong>1 st march 2018</strong><ul><li><!--block-->RJ GM - Final SME in next 3 months</li><li><!--block-->SCRM - Training Documents&nbsp;<ul><li><!--block-->Arrange training internal - discuss to whom training dena hai.</li><li><!--block-->Backend configuration</li><li><!--block-->Administration&nbsp;</li></ul></li><li><!--block-->give understanding to other team members - uni , qaa, dots</li><li><!--block-->extra movement kya le sakte hain</li><li><!--block-->kya kya activity karte ho, ek week ka -- next week ka reschedule.</li><li><!--block-->UCSR - Php -&nbsp; .net<ul><li><!--block-->KT phase 1 + Functional Understanding</li><li><!--block-->KT phase 2 + Functional Understanding</li><li><!--block-->code review&nbsp;</li><li><!--block-->Database analysis and review</li><li><!--block-->understanding server level configuration and management</li><li><!--block-->effective support and level-2 support</li><li><!--block-->code analysis</li><li><!--block-->Functional understanding</li><li><!--block-->Zero down time</li><li><!--block-->resolve tickets in defined TAT</li><li><!--block-->Transition</li></ul></li></ul></li></ul></li><li><!--block--><strong>Coordinate with team member - Team Coordination</strong><ul><li><!--block-->How -&nbsp;</li></ul></li><li><!--block-->2018 - Automation of support<ul><li><!--block-->How -&nbsp;</li></ul></li><li><!--block-->Support 24*7 , extended support<ul><li><!--block-->How -&nbsp;</li></ul></li><li><!--block-->Java Application Leadership , Also explore application of other technology<ul><li><!--block-->How -&nbsp;</li></ul></li><li><!--block--><strong>Collect All RFC details related to deployments in Application Support by 8 Jan and track their status.</strong></li><li><!--block-->take control of everything related to GM (Functionality, code, deployment, RFC) till 31st Dec</li><li><!--block-->Rekha will do all business related communications for GM applications.</li><li><!--block--><br></li></ul><div><!--block--><br><strong><em>Amit Tyagi</em></strong></div><ul><li><!--block-->Java Leadership</li><li><!--block-->Support devops activities, if possible. Mainly for migration purposes</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.249Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.249Z"},"uniqueId":"f83714b8-1fb8-49f7-a5ed-3af3ff950d0f","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e564"},"name":"Accenture Radhika Goplan Agar bol ke khud ko express karney me problem ho rahi hai,","heading":"Accenture Radhika Goplan Agar bol ke khud ko express karney","smartContent":{"content":"<ul><li><!--block--><strong>Accenture</strong><ul><li><!--block--><strong>Radhika Goplan</strong><ul><li><!--block-->Agar bol ke khud ko express karney me problem ho rahi hai, toh likh ke express karne ka try karo.</li></ul></li><li><!--block--><strong>Kushal Doshi</strong><ul><li><!--block-->I never loose, either I win or I learn.</li></ul></li><li><!--block-->Jayesh Vankani<ul><li><!--block--><br></li></ul></li><li><!--block-->Sachin&nbsp;<ul><li><!--block--><br></li></ul></li></ul></li><li><!--block--><strong>HCL Infosystems</strong></li><li><!--block--><strong>Novelvox</strong></li></ul><div><!--block--><br></div><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.254Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.254Z"},"uniqueId":"b21a2cb6-621d-4864-a503-f65808769d2d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e566"},"name":"During visit of Mumbai/Pune/Bangalore Viplove Gupta Do not break hierarchy. Kabhi apney supervisor ko bypass","heading":"During visit of Mumbai/Pune/Bangalore Viplove Gupta Do not break hierarchy.","smartContent":{"content":"<ul><li><!--block--><strong>During visit of Mumbai/Pune/Bangalore</strong><ul><li><!--block--><em>Viplove Gupta</em><ul><li><!--block-->Do not break hierarchy.&nbsp;</li><li><!--block-->Kabhi apney supervisor ko bypass karke uske upar jaaney ki koshish mat karo. Agar jana hai toh apney supervisor ke sath jao.</li></ul></li><li><!--block--><em>Eklawya</em><ul><li><!--block-->Personal life me kisi ko jhakney nahi dena chahiye.</li></ul></li><li><!--block--><em>Krishna Kumar Kantiwal</em><ul><li><!--block--><strong>Life me ek baar jor ka master-stroke lagta hai aur life badal jati hai.</strong></li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.259Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.259Z"},"uniqueId":"d18c3af1-c009-4193-ab52-83c15a6e0719","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e568"},"name":"BCE Bhagalpur Pankaj sir 2k2 Mec Hai toh hai lauda.","heading":"BCE Bhagalpur Pankaj sir 2k2 Mec Hai toh hai lauda.","smartContent":{"content":"<div><!--block--><strong>BCE Bhagalpur</strong></div><ul><li><!--block--><strong>Pankaj sir 2k2 Mec</strong><ul><li><!--block-->Hai toh hai lauda.</li></ul></li><li><!--block--><br></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.263Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.263Z"},"uniqueId":"7711fcd0-af3b-4fb1-b790-e7570306137f","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e56a"},"name":"My childhood days Shashikant Tiwari sir- Sanskrit teacher- 8th class Man ko daato nahi man","heading":"My childhood days Shashikant Tiwari sir- Sanskrit teacher- 8th class","smartContent":{"content":"<div><!--block--><strong>My childhood days</strong></div><ul><li><!--block-->Shashikant Tiwari sir- Sanskrit teacher- 8th class<ul><li><!--block-->Man ko daato nahi man ko mod do</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3f182927-620a-4306-9c1f-e9e3e859002d","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.268Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.268Z"},"uniqueId":"d72362aa-441f-4aa4-a064-f04e1d812ccf","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5df"},"name":"Maa Be healthy. Wake up on time. Sleep on time. Be quite. Talk with papa","heading":"Maa Be healthy. Wake up on time. Sleep on time.","smartContent":{"content":"<div><!--block--><strong><em>Maa</em></strong></div><ul><li><!--block-->Be healthy. Wake up on time. Sleep on time.</li><li><!--block-->Be quite.</li><li><!--block--><strong>Talk with papa with patience.</strong></li><li><!--block-->Do not angry.</li><li><!--block-->Do not do any stupid things, like chew, see motu-patlu</li><li><!--block-->Kahi bhi papa ko hi baat karney do. Khud se kahi bhi apney problem ke baare me baat mat karo.</li><li><!--block--><strong><em>Darr ke baat mat karo. Jo bolna hai saaf saaf aur boldness se bolo.</em></strong></li><li><!--block-->Job hone ke baad<ul><li><!--block-->Aage ke option ke liye try karo.</li><li><!--block-->Gutkha kha chodo.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.286Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.286Z"},"uniqueId":"eb4cb2ba-c60d-4d3c-a7e5-268d50c4e0e3","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5e1"},"name":"Papa 18-Jan-2018 - Divya gyan. Gyani vyakti ka mann nirmal hona chahiye. Premendra tumhara mann","heading":"Papa 18-Jan-2018 - Divya gyan. Gyani vyakti ka mann nirmal","smartContent":{"content":"<div><!--block--><strong><em>Papa</em></strong></div><ul><li><!--block-->18-Jan-2018 -&nbsp;<strong>Divya gyan.</strong><ul><li><!--block-->Gyani vyakti ka mann nirmal hona chahiye. Premendra tumhara mann nirmal nahi hai isiliye tum dukh me rahte ho.</li></ul></li><li><!--block--><strong>Jab office join kar lo tab</strong><ul><li><!--block--><strong>Apna kaam karo.</strong></li><li><!--block--><strong>Computer par time se baitho.</strong></li><li><!--block--><strong><em>Sarkari job ke liye try karo.</em></strong></li><li><!--block--><strong><em>Hisab se kharcha karo. Only 6000/- rupees ki jarurat hai ek mahina me.</em></strong></li></ul></li><li><!--block--><strong>Go office on time. and come on time.</strong></li><li><!--block-->Sab se baat karo.</li><li><!--block-->Daro mat</li><li><!--block-->Sab se rai lekar koi reply karo.</li><li><!--block--><strong>Reduce belly, by exercising or running.</strong></li><li><!--block--><strong>Pati patidaari me daab ke baat kar sako tab hi jaya kar.</strong><ul><li><!--block--><strong>Jab kisi se baat karo to uske bole words me se ek point dhundho, aur phir usi point me se 5-10 points nikal ke usko chup kar do.</strong></li></ul></li><li><!--block--><strong>Aass pass ke area ka muaayana karo. Usko samjho.&nbsp;</strong></li><li><!--block-->Apney PF, aur other investment ka dhyan rakho. Kuch samay baad apna fixed account bhi khol lo.</li><li><!--block-->Be happy. Do not take stress.</li><li><!--block-->Take interest in family's work.</li><li><!--block-->Study optimum.</li><li><!--block-->Take enough rest.</li><li><!--block-->Take responsibility.</li><li><!--block--><strong>Kisi ka bhi ek rupiya loot ke/thug ke nahi khana chahiye.&nbsp;</strong><ul><li><!--block-->Apna khila dena chahiye but dusre ka nahi khana chahiye.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.291Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.291Z"},"uniqueId":"ce8b5468-48c7-47d4-8255-5cf72cfbc749","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5e3"},"name":"Brother Be happy. Do not take stress. If you are going back to previous company,","heading":"Brother Be happy. Do not take stress. If you are","smartContent":{"content":"<div><!--block--><strong><em>Brother&nbsp;</em></strong></div><ul><li><!--block-->Be happy. Do not take stress.</li><li><!--block-->If you are going back to previous company, do not make only compromises.</li><li><!--block-->Agar koi salary le ke daba raha hai toh mat dabo. Company ne jo kursi di hai uski izzat karo.</li><li><!--block-->Bike ko start kake ghar se mat nikala karo, kabhi unbalance ho ke galati ho sakti hai.</li><li><!--block--><strong>Court me jab apney case ke liye gawahi de rahe ho to, bold ho ke apni baat karo.</strong></li><li><!--block-->Common life me bold raho. Galati dikhne par bhi jaldi accept mat karo aur root cause tak jaa ke usko repeat mat karo</li></ul><div><!--block--><br><strong><em>and sister</em></strong></div><ul><li><!--block-->Be happy. Do not take stress.</li><li><!--block-->Serious muh bana ke mat raha karo.</li><li><!--block-->Maa ki help karo.</li><li><!--block-->14-Jan-2018<ul><li><!--block--><strong>Excuse dena sikho, nahi toh log chain se jiney nahi denge.</strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.297Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.297Z"},"uniqueId":"18b1d50d-9439-4554-9a56-b8b1a58e99c6","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5e5"},"name":"Neighbours Satyam,Sarita Aunty, Maya aunty, Dadaji, Dadiji- Sirf door se pranam-pati kijiye aur apney raste","heading":"Neighbours Satyam,Sarita Aunty, Maya aunty, Dadaji, Dadiji- Sirf door se","smartContent":{"content":"<div><!--block--><strong>Neighbours</strong></div><ul><li><!--block--><strong>Satyam,Sarita Aunty, Maya aunty, Dadaji, Dadiji-</strong>&nbsp;<ul><li><!--block-->Sirf door se pranam-pati kijiye aur apney raste chaliye. Unka haal chaal puchiye aur apne liye expect kijie ki wo mere ghar aaye tab hum apna haal-chaal batayenge.</li><li><!--block-->Jyada der khada hoke baat mat kijiye.</li></ul></li><li><!--block--><strong>Satyam Bhaiya</strong><ul><li><!--block-->Jab koi aapse apke problems ke bare me puche toh jitna ho sake cool jawab dena chahiye.</li><li><!--block-->jyada nahi sochna chahiye<ul><li><!--block-->Jo jitna besharm hota hai, utna hi khush rahta hai.</li><li><!--block-->Koi nanga rah ke bhi koi guilty feel nahi karta, aur dusre sahi hone ke baad bhi tension me jite hain.</li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.301Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.301Z"},"uniqueId":"14eb9fb1-911e-479f-b4e0-0434ac1de0bf","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5e7"},"name":"Advocate for my case Memorize things and events mentioned in petition and replicate same in","heading":"Advocate for my case Memorize things and events mentioned in","smartContent":{"content":"<div><!--block--><strong>Advocate for my case</strong></div><ul><li><!--block-->Memorize things and events mentioned in petition and replicate same in front of court.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.306Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.306Z"},"uniqueId":"aff1f2af-4963-4813-9932-6e8c7121f61d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5e9"},"name":"Shri Mata Vaishno devi darbar Vighn aate hain, aapko un ko pahchan ke aur un","heading":"Shri Mata Vaishno devi darbar Vighn aate hain, aapko un","smartContent":{"content":"<div><!--block--><strong>Shri Mata Vaishno devi darbar</strong></div><ul><li><!--block-->Vighn aate hain, aapko un ko pahchan ke aur un se bach ke apne karm ko karna hota hai.</li><li><!--block-->Dharm pariksha leta hai. Aniti ko pahchan ke apne karm ko karna chahiye.</li><li><!--block-->Swarg pahuchney ke do raste hain. Koi sukh bhog ke swarg jata hai aur koi dukh bhog ke. Apne karm ko pahchan ke bas us path par badhte rahna chahiye.</li><li><!--block--><strong>Manushya ke jiwan me kasht aate hain. Kashto ka samna karna chaiye. Kashto ka samna karne se manushya ka jiwan mahan hota hai. Aasakti aur Laparwahi se vighna aur pareshaniya hoti hai. Aaskti aur Laparwahi nahi karni chahiye.</strong></li><li><!--block-->Iss sansar me sab koi apne liye hi jita hai.<ul><li><!--block-->Ek ladka ek sanyasi ke pass gaya aur usey bolne laga ki aap sirf sansarik batein hi toh pravachan me batate hain. Tab sanyasi ne usko kaha ki ye dawa pilo aur tumhare saare ang shithil ho jayenge. Us ladke ne dawa pili. Tab sanyasi ne uske pariwar ke sab dusre sadasyo ko bula ke kaha ki tum me se koi ek ye dudri dawa pilo aur ye ladka thik ho jayega. But wo vyakti mar jayega. Sab ney koi na koi bahana banaya par wo dawa nahi pi. Tab ladke ko gyan prapt hua ki \"<strong>Iss duniya me sab apney liye hi jite hain, sare rishte naate maaya hai aur vyakti sansarik moh maya me fas kar dukh hi pata hai.</strong>\"</li><li><!--block--><strong>Live example from my life-&nbsp;</strong><ul><li><!--block-->19-Feb-2018 - I had doubt on above teachings. Hum 8:00 baje gym ke liye nikle. Par gym ke pass pahuch kar sadhu chacha ke ghar chale gaye. Chachi aur Chacha ne ajnabi ke jaisa vyavhar kiya. Chacha bol rahe they ki jab tak tuhar&nbsp;<strong>papa katu vachan bolal aur gali dewal na chorihan, rishta naata na ban payi.&nbsp;</strong>Chacha chachi mere case ke liye puch rahe they. Chachi boli ki tuhar vajan kam bhel ba, hum chacha ko hus deni ki wo appan umar ke log se bhi budha lage lan. Chacha sun lelan, puchlan ta hum bol deni ki ha chacha tuhar shikayat karat rahni chachi se.Last me chachi humko chai ke liye roki. humko laga ki dusra cup chai chacha piyenge, but wo toh sunil ke liye tha. Humko bahut kaharab laga, aur hum chai adhura chor kar chacha chachi ko pranam kar ke vapas aa gaye.&nbsp;<strong>Humko samajh jana chachiye ki ab mere liye koi rishta naata nahi hai. Apne baare me socho premendra !!!!!!!!!!!!!!</strong></li></ul></li></ul></li><li><!--block-->Vyakti ko madhur vachan bolney chahiye. Wo bolna chahiye jo dusro ko acha lage.</li><li><!--block-->Siddhi kya hai. Koi bhi maa bhagwati/Mahadev ji ka mantra jo baar baar chintan manan kiya gaya ho, vahi ek samay ke baad Siddhi ho jati hai.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.312Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.312Z"},"uniqueId":"05663d54-9c88-4c58-9481-744788496518","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5eb"},"name":"Self 08-July-2017 Hum khud se bahut baat karte hain, Humko ghamand bahut jaldi ho jata","heading":"Self 08-July-2017 Hum khud se bahut baat karte hain, Humko","smartContent":{"content":"<div><!--block--><strong>Self</strong></div><ul><li><!--block-->08-July-2017<ul><li><!--block-->Hum khud se bahut baat karte hain, Humko ghamand bahut jaldi ho jata hai.</li><li><!--block-->Ghamand ka ulta namrata hota hai.</li></ul></li><li><!--block-->05-July-2017<ul><li><!--block--><strong>Meri help agar koi karega toh woh mai hi hu.</strong><ul><li><!--block-->Ek baar issue analyse kar lenge toh fir 60 % issue hum khud hi solve kar sakte hain. Baaki 40% issue ke liye well wishers ko call kar sakte hain.</li><li><!--block-->Iss gyan ki keemat mera Accenture ka job hai.<ul><li><!--block-->Yaha mai dusro se help mangta raha, proper response nahi kiya ki ye kaam me mujhey jyada time lag sakta hai. Chup raha aur usko manager ne ego pe le liya. Aur mera job janey wala hai.</li></ul></li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.317Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.317Z"},"uniqueId":"029b92fb-20f6-4555-872e-0c1e390fa49b","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5ed"},"name":"Office expecatation Senior ko issue ki report do. Jo problem aa rahi hai usko batao","heading":"Office expecatation Senior ko issue ki report do. Jo problem","smartContent":{"content":"<ul><li><!--block--><strong>Office expecatation</strong><ul><li><!--block-->Senior ko issue ki report do. Jo problem aa rahi hai usko batao aur pucho ki aage kya karna hai.</li><li><!--block-->Couleges se issue discuss karo, batao kya tum help kar sakte ho aur kya tumhari expectation hai.</li><li><!--block-->Juniors ko guide karo. unki problem suno aur unko solution do.</li><li><!--block-->Business/Clients se issue ka detail pucho aur usko solve karney ka try karo. Jo obstacles/additional information chahiye wo maango.</li></ul></li><li><!--block--><strong>Home expectation</strong><ul><li><!--block--><strong>Hamesha common thinking banao</strong>&nbsp;ki \"Jo hua acche ke liye hua, jo ho raha hai achhe ke liye ho raha hai, jo hoga acche ke liye hoga.\" Ye khud nahi bolna hai balki dusro ke muh se aana chahiye.</li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.322Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.322Z"},"uniqueId":"aced9c86-528a-4f96-8514-021f02d2e261","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e5ef"},"name":"Expectations of God Message conveyed from one old man on 11-Feb-2018, who was employee in","heading":"Expectations of God Message conveyed from one old man on","smartContent":{"content":"<div><!--block--><strong>Expectations of God</strong></div><ul><li><!--block-->Message conveyed from one old man on&nbsp;<strong>11-Feb-2018</strong>, who was employee in Haryana transport, and also was some level of corrupt. But he never hurted any guy heart. If a person had not enough money to bribe, then he had not forced him to provide much money.<ul><li><!--block--><strong><em>Apney karm ke prati imandaar raho. Varna man ashant rahega.</em></strong></li><li><!--block--><strong><em>Paise bachao.</em></strong></li><li><!--block--><strong><em>Kabhi bhi mehnat karney se mat ghabrao. Sirf duty hour khatam karke khush mat howo. Aage badhna hai toh extra hours (Apne current duty me aur Apne future ke liye) invest karo.</em></strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"bb7d2ab9-db18-4457-b19e-a31603fe3e65","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.327Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.327Z"},"uniqueId":"d5b9934c-0198-4fc3-9499-4b2b09eca93e","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e664"},"name":"1. People will ask \"Accenture chor ke dobara yaha kyu join kar liye?\" Location problem","heading":"1. People will ask \"Accenture chor ke dobara yaha kyu","smartContent":{"content":"<div><!--block-->1. People will ask \"Accenture chor ke dobara yaha kyu join kar liye?\"</div><ul><li><!--block-->Location problem and family issues</li><li><!--block-->Be calm and observe people reaction</li></ul><div><!--block-->2. People will ask \"Kam paisa me kyu join kar liye\"</div><ul><li><!--block-->Sab jagah interview se rahe they par final offer letter nahi aa raha tha. Job security nahi mil rahi thi , isiliye wapas puraney package par yahi join kar liye.</li></ul><div><!--block-->3. Management will try to put some extra pressure, with same salary package, on myself,</div><ul><li><!--block-->to manage team and work 24*7</li><li><!--block-->to go in calls and defend team for any issue occurred.</li><li><!--block--><strong>Solution</strong><ul><li><!--block-->Find ways of small excuses to get rid of extra pressure , or</li><li><!--block-->distribute the pressure to multiple persons.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"0106d4bb-ae1d-4ad5-ad20-5ea60c37ca78","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.348Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.348Z"},"uniqueId":"417ecd7b-f21a-4839-8192-bd701a98e067","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e6d9"},"name":"05:00 AM - 05:30 AM = { Green Tea + Bathroom Subah me utne ke","heading":"05:00 AM - 05:30 AM = { Green Tea +","smartContent":{"content":"<div><!--block--><strong>05:00 AM - 05:30 AM = {</strong></div><ul><li><!--block-->Green Tea + Bathroom&nbsp;</li><li><!--block-->Subah me utne ke baad apna bichauna samet kar.</li><li><!--block-->\tSubah me utne ke baad apna dawa khud bana ke pi kar.\t</li></ul><div><!--block--><strong>}</strong>&nbsp;<br><strong>05:30 AM - 06:00 AM =</strong>&nbsp;Talk with parents&nbsp;<br><strong>06:00 AM - 07:00 AM =</strong>&nbsp;Study<br><strong>06:00 AM - 07:00 AM =</strong>&nbsp;Gym + Milk Purchase&nbsp;<br><strong>08:00 AM - 09:00 AM =</strong>&nbsp;Bath + Preparation for day (office/interview)<br><br><strong>if(office-working-day){</strong><br><strong>&nbsp; &nbsp; &nbsp; &nbsp;09:00 AM - 7:00 PM =</strong>&nbsp;office works<br><strong>}<br><br>if(week-off &amp;&amp; leave){<br>&nbsp; &nbsp; &nbsp; &nbsp;09:00 AM - 7:00 PM =&nbsp;</strong></div><ul><li><!--block-->Ask for home works,&nbsp;</li><li><!--block-->do scheduled non-study works</li><li><!--block-->Watch TV</li><li><!--block-->Talk more with parents</li></ul><div><!--block--><strong>}<br><br>if(week-off &amp;&amp; interview-scheduled-today){<br>&nbsp; &nbsp; &nbsp; &nbsp; 09:00 AM - 7:00 PM =</strong>&nbsp;go for interview and reach home<strong><br>}<br><br>if(interview-scheduled){<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Collect document<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Preparation of interview questions<br>}<br><br>07:00 PM - 09:30 PM =&nbsp;</strong>return to home, dinner, talk with parents.<br><br><strong>09:30 PM - 10:30 PM =&nbsp;</strong>Planning for next day + Revision +Evaluation of day<br><br><strong>Study{<br>&nbsp;&nbsp;</strong>Study 5 english words daily,<br><strong>&nbsp;&nbsp;</strong>Study 5 interview questions daily<br><strong>&nbsp;&nbsp;</strong>Study 5 sentence patterns on Saturday Sunday<strong><br>}<br></strong><br><strong><em>10:30 PM - 5:00 AM -</em></strong>&nbsp;Sleep<br><br>=====<br>My Daily routine at Rage gym, Faridabad - 30 minutes</div><ul><li><!--block--><strong>Monday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/357\">Back</a>&nbsp;5 exercises</li><li><!--block--><strong>Tuesday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/358\">Chest</a>&nbsp;5 exercises</li><li><!--block--><strong>Wednesday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/359\">Shoulder</a>&nbsp;5 exercises</li><li><!--block--><strong>Thursday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/360\">Biceps</a>&nbsp;5 exercises</li><li><!--block--><strong>Friday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/360\">Triceps</a>&nbsp;5 exercises</li><li><!--block--><strong>Saturday-</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/361\">Legs</a>&nbsp;5 exercises</li><li><!--block--><strong>Sunday -</strong>&nbsp;<a href=\"http://127.0.0.1:8888/topic-management/topic-mgmt/topic-mgmt-home.html#/topics-list/362\">Rest or Just belly exercises</a>&nbsp;5 exercises</li></ul><div><!--block--><strong>initial warm up - These are regular exercise to increase stamina</strong></div><ul><li><!--block-->Running in ground - 10 rounds - every day - 20 minutes</li><li><!--block-->Cardio/Trade-mill - 10 min - every day&nbsp;</li><li><!--block-->Cycling - 10 min - every day</li><li><!--block-->Jumping on toe - 10 min - every day</li><li><!--block-->Jumping on small stool -&nbsp;</li><li><!--block-->Jumping over bench - .</li></ul><div><!--block--><br><strong>After muscle exercise</strong></div><ul><li><!--block-->Crunch on inclined bench - 100 crunch - every day</li></ul><div><!--block--><br>================<br><br>1:30 hours of study schedule -- 40 minutes</div><ul><li><!--block--><strong>Monday -</strong>&nbsp;Study any novel</li><li><!--block--><strong>Tuesday -</strong>&nbsp;Programming , development or bug fix</li><li><!--block--><strong>Wednesday -</strong>&nbsp;Remember 10 Interview questions</li><li><!--block--><strong>Thursday -</strong>&nbsp;Rest</li><li><!--block--><strong>Friday -</strong>&nbsp;Programming , development or bug fix</li><li><!--block--><strong>Saturday-</strong>&nbsp;Remember 10 Interview questions</li><li><!--block--><strong>Sunday -</strong>&nbsp;Study any novel</li></ul><div><!--block-->20 minutes - Remember 5 words daily<br><br>20 minutes - Reserved , may be used for planning<br><br>10 minutes - Rest<br><br>=================================<br><br>Weekly activity</div><ul><li><!--block-->Purchase vegetables</li><li><!--block-->Polish shoes</li><li><!--block-->Take backup<ul><li><!--block-->Videos downloaded</li><li><!--block-->interview-mgmt data</li><li><!--block-->topic-mgmt data</li></ul></li></ul><div><!--block--><br>============</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"b2b8e1c2-1467-4b83-9eb2-1043baf36c3f","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.372Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.372Z"},"uniqueId":"d1d15dfc-c0d6-44ff-a8bd-44c6da691f54","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e74e"},"name":"Thank you God for your blessings. - I live with my maa papa. - I","heading":"Thank you God for your blessings. - I live with","smartContent":{"content":"<div><!--block--><strong><em>Thank you God for your blessings.</em></strong><br>- I live with my maa papa.<br>- I have my own home.<br>- I have all my organs working and I am well enough to do whatever I wish.<br>- Hum saarey pariwar se gussa ho ke Bangalore/Mumbai job karney chaley gaye the, waha bahut dukh bhoga. Family ko miss kiya. Khud ki galatiyon ka ehsas hua.&nbsp;<strong>Thank you God ki aapney wapas mujhey mere ghar bhej diya.<br>-&nbsp;</strong>Humko apne puraney company me job mil gaya. Ye mere waha par kiye huye acchey kaam aur inn logo ki acchai ke karan mila.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4030a6db-394c-4ef9-974d-431e60ba0f27","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.393Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.393Z"},"uniqueId":"ddca1d6f-2bce-4993-a833-5f9d3370e180","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e7c3"},"name":"21-Oct-2017 - Today I met Aayush on the roads. He was going to take hair","heading":"21-Oct-2017 - Today I met Aayush on the roads. He","smartContent":{"content":"<div><!--block-->21-Oct-2017<br><br>- Today I met Aayush on the roads. He was going to take hair cut. He told me to go to home.<br>- I talked with Bipin chacha and chachi. Pahle chachi humko dekh ke muh ghuma li. phir hum chachi ko pair chu ke pranam kiye. Chacha aaj papa ki bahut shikayat kiye.Chachi boli ki woh humko pahchan nahi payi.<br>- Hum chacha ke sara baat suney.</div><ul><li><!--block-->Tuhar papa subah me uth ke koi ek aadmi ke pakad lewe lan aur gali dewe lan.</li><li><!--block-->chachi shikayat karat rahli ki maa narendra puja me aail rahe log aur bina khana khaile chal gail log.</li><li><!--block-->Papa ek baar rasta me milal rahlan aur koi baat na kailan.</li><li><!--block-->&nbsp;Phir itna bole ki aap saare bhai ek hi jaise hain. sab ko kisi na kisi chij ka ghamand hai. Appko apne friend circle ka ghamand hai.</li><li><!--block-->Hum paani pini aur chal aini.</li></ul><div><!--block-->- Shaam ko papa ke ye baat bataini, woh gussa karat rahlan ki tu daab ke baat na kar pawe le . Agar tu daab ke baat na kar paye le toh mat jaya karo.<br>- Chacha se baat kar ke aur papa ke baat sun ke lagal ki hum chacha ke ghar jaake galati kaini. Saadhu chacha humko us randi ke sath hi bandh dihan. Wo hummar well wisher naikhan.&nbsp;<br><br><br>25-Oct-2017<br><br>- Bike banwane ke liye, Abinash ke ghar ke paas gaye. Waha bike de ke wapas aa rahe they toh, Abinash se baat hui. Wo december january me apni wife ko wapas le ke aayega. Hum apna problem bataye toh, wo bhi ladki walo pe case karne ke liye kaha.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":5,"linkedQuestionsId":"2222b9c6-cbf6-4979-be9d-d76a1afe80e4","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.423Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.423Z"},"uniqueId":"b2ff00d0-785f-4f95-89dc-cf2021868bb3","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e7c5"},"name":"27-Oct-2017 - Chhath puja ke firti. Papa Car se shrilal ji ke ghar gaye. Narendra","heading":"27-Oct-2017 - Chhath puja ke firti. Papa Car se shrilal","smartContent":{"content":"<div><!--block-->27-Oct-2017<br><br>- Chhath puja ke firti. Papa Car se shrilal ji ke ghar gaye. Narendra aur Rimjhim bhi gaye.<br>- Hum maa se baat kiye. Maa ko fir se papa ki burai kiye. Maa sab suni. Par ye bhi kahe ki ab sab thik ho jayega.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2222b9c6-cbf6-4979-be9d-d76a1afe80e4","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.427Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.427Z"},"uniqueId":"a9224281-c4c5-4ee3-a427-b8603b81474c","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e7c7"},"name":"28-Oct-2017 - 29 Oct ko ladka wale rimjhim ko dekhne aayenge. Aaj safai me busy","heading":"28-Oct-2017 - 29 Oct ko ladka wale rimjhim ko dekhne","smartContent":{"content":"<div><!--block-->28-Oct-2017<br><br>- 29 Oct ko ladka wale rimjhim ko dekhne aayenge. Aaj safai me busy rahe.<br>- Saam ko hanuman mandir gaye they, waha pandit ji se baat hui. Mera problem puchey, Hum bataye, toh boley ki case daal do un log par. Jab ek do taarikh ko yaha daudenge, toh apney sulah karenge.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2222b9c6-cbf6-4979-be9d-d76a1afe80e4","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.433Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.433Z"},"uniqueId":"78a6f5e3-e0e6-4926-a18b-f3ad25c69508","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e7c9"},"name":"29-Oct-2017 - Ladka wale , Delhi se aaye they. Rimjhim ko dekhe. Shri lal ji","heading":"29-Oct-2017 - Ladka wale , Delhi se aaye they. Rimjhim","smartContent":{"content":"<div><!--block-->29-Oct-2017<br>- Ladka wale , Delhi se aaye they. Rimjhim ko dekhe. Shri lal ji bhi aaye they.</div><ul><li><!--block-->Ladki ki height aur age par suspicion hai.</li></ul><div><!--block-->- Shri bhagwan fufa call kiye they. Kishun sah ne papa aur narendra se baat kiya. Wo koi ladki ke bare me mere liye baat kar rahe they. Papa , most probably, 15 Nov ko waha jayenge.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2222b9c6-cbf6-4979-be9d-d76a1afe80e4","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.438Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.438Z"},"uniqueId":"9d93a7bd-625e-4a18-bfe7-c1e2c26dd05e","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e83e"},"name":"Daily Updates --------------------- WEEK 20-Nov-2017 to 24-Nov-2017 ================================ 20-Nov-2017 - Analysed one QAA issue in","heading":"Daily Updates --------------------- WEEK 20-Nov-2017 to 24-Nov-2017 ================================ 20-Nov-2017 -","smartContent":{"content":"<div><!--block--><strong><em>Daily Updates<br>---------------------<br>WEEK 20-Nov-2017 to 24-Nov-2017<br>================================<br>20-Nov-2017<br>- Analysed one QAA issue in which \"Overall Performance Report was giving error 500 while fetching data for a particular date range\" . According to analysis, this issue is coming for such date range for which no data was found and due to null pointer exception, which is not properly handled in code, issue was coming. Shared this RCA to development team.<br>----------------------<br>WEEK 13-Nov-2017 to 17-Nov-2017<br>=====================================================<br>17-Nov-2017<br>- Resolved one QAA issue to , due to which users were not able to login into application, post its migration to new servers in building 14.<br><br>----------------------------<br>16-Nov-2017<br>- Resolved and investigated RJ issues<br>- Taken interview of php and java guys<br><br>---------------------<br>15-Nov-2017<br>- Resolved and investigated RJ issues<br>- Taken interview of php and java guys<br>------------------------<br>14-Nov-2017<br>- Resolved RJ issues<br>- Taken interview of php guys<br>---------------<br><br>13-Nov-2017<br>- Investigated one ResolveJiffy issue (Report for one form was not coming correctly) and found the solution after whole day effort.<br>- Participated in GainManager payout activity<br><br>--------------------------------<br></em></strong><br><strong>12-Nov-2017<br>- Participated in Resolvejiffy migration activity.</strong></div><ul><li><!--block--><strong><em>Persons involved</em></strong><ul><li><!--block-->Deepesh, Vivek</li><li><!--block-->Damodar , Rajesh</li><li><!--block-->Ishank, Nilesh</li><li><!--block-->Anil, Radhika , Yeswanth</li><li><!--block-->Anshul, Prem, Satish, Amit, Kirti and Naresh</li><li><!--block-->Yogesh, Amit, Somen, Sheikh</li></ul></li><li><!--block--><strong><em>Fixed some intermittent issue</em></strong><ul><li><!--block-->Users were not able to see proper login page.&nbsp;</li><li><!--block-->Form was not able to be saved successfully.</li><li><!--block-->Users of&nbsp;<strong>wez&nbsp;</strong>&nbsp;process were not able to fetch records for more than 2 days.</li><li><!--block-->For some cases the auto generated mails were not working.</li></ul></li><li><!--block--><strong><em>Some useful questions while rectifying issues</em></strong><ul><li><!--block-->What is the frequency to use of the reported functionality by users? Could any workaround to be provided by users?</li><li><!--block-->When last used this reported functionality? Was the functionality working that time? If yes, can any artifact or extracted document be provided to us so that we could further analyse the issue?</li></ul></li><li><!--block--><strong><em>Some important remembrable points</em></strong><ul><li><!--block-->If page not opening in a particular process, then firewall might be the issue. Local network team near that process should be contacted in this case.</li></ul></li><li><!--block-->Some high CPU utilization alerts were coming even after application servers were in stopped mode</li><li><!--block--><strong><em>Post the activity completion following things must be in monitoring</em></strong><ul><li><!--block-->Disk, memory, CPU utilization</li></ul></li></ul><div><!--block-->---------------------------------------------------------------------------------<br><br>11-Nov-2017<br>- Saturday - Weekly off<br>----------------------------------------------------------------------------------<br><br><strong><em>10-Nov-2017<br>- Induction</em></strong></div><ul><li><!--block-->What is Concentrix?</li><li><!--block-->How many employees there in Concentrix?</li><li><!--block-->What is COEBC (Code of Ethical Business Conduct)?</li></ul><div><!--block--><strong><em>- Met with team and understood my works</em></strong></div><ul><li><!--block-->I have to lead Resolvejiffy and GainManager application.</li><li><!--block-->There is ResolveJiffy migration activity on 11-Nov-2017 and 12-Nov-2017.</li><li><!--block-->I have to monitor the migration activity.</li></ul><div><!--block-->------------------------------------------------------------------------------------<br><br><strong><em>09-Nov-2017<br>- I went to office and met with my old team.<br><br></em></strong><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"7ca15f0e-1e94-43f2-a160-dd3d6e2569db","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.462Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.462Z"},"uniqueId":"4cc0034f-998e-401f-b608-a9f3809a9373","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e840"},"name":"Weekly Updates ---------------------- 11 and 12-Nov-2017 - Resolvejiffy migration activity. We fixed some intermittent issues","heading":"Weekly Updates ---------------------- 11 and 12-Nov-2017 - Resolvejiffy migration activity.","smartContent":{"content":"<div><!--block--><strong>Week</strong><strong><em>ly Updates<br>----------------------<br>11 and 12-Nov-2017<br>- Resolvejiffy migration activity. We fixed some intermittent issues post migration and tuned up as per user feedback. Application is running perfectly post migration.</em></strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7ca15f0e-1e94-43f2-a160-dd3d6e2569db","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.468Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.468Z"},"uniqueId":"540e4cfd-fb91-450b-b9a5-656c59c7a6ff","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e842"},"name":"Monthly Updates ----------------------","heading":"Monthly Updates ----------------------","smartContent":{"content":"<div><!--block--><strong>Month</strong><strong><em>ly Updates<br>----------------------</em></strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7ca15f0e-1e94-43f2-a160-dd3d6e2569db","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.473Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.473Z"},"uniqueId":"51386713-926d-45bb-a3d9-f28470d99576","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e8b7"},"name":"- Hum bahut pressure me tutate nahi hain. Balki aur active ho jatey hain.","heading":"- Hum bahut pressure me tutate nahi hain. Balki aur","smartContent":{"content":"<div><!--block-->- Hum bahut pressure me tutate nahi hain. Balki aur active ho jatey hain.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"542142cb-c5c9-4698-a17c-942de21aa3e5","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.496Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.496Z"},"uniqueId":"31af2f8c-63ec-4ca1-8e3d-2a163dd3b776","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e92c"},"name":"29-Dec-2017 - office- I was planning to take work-from-home. I had informed Yogesh sir for","heading":"29-Dec-2017 - office- I was planning to take work-from-home. I","smartContent":{"content":"<div><!--block--><br>29-Dec-2017<br>- office-</div><ul><li><!--block-->I was planning to take work-from-home. I had informed Yogesh sir for the same. Also I had informed Somen sir for the same, but did not get confirmation from him, which I later confirmed from Yogesh to treat as \"yes\" if no response.</li><li><!--block-->I was planning to do following , while taking work-from-home<ul><li><!--block-->Collect all actiionables asigned from different sources</li><li><!--block-->Send mails to collect FAQs, Current Issues and others to Anshul, Fayaz, Kirti</li><li><!--block-->Send mail to Shahid to close ticket.</li><li><!--block-->Send mail to Fayaz, Kirti, to get all information for RJ/GM/WebDOTS/QAA/UNI<ul><li><!--block-->UAT Environments data</li><li><!--block-->Prod environments data</li><li><!--block-->Development/Test environments data.</li></ul></li><li><!--block-->Check for pending tasks from my side.</li><li><!--block-->Collect and upload docs in SharePoint</li><li><!--block-->Collect default responses to be written on ticket.</li></ul></li><li><!--block-->I called Yogesh sir to share my understandings , issues facing. But he asked me if we can discuss F2F and in new year.<ul><li><!--block-->I also agreed as I would ready my points by that time.</li><li><!--block-->I will have to prepare<ul><li><!--block-->my understandings for my role and difficulties or challenges being faced<ul><li><!--block-->difficulties<ul><li><!--block-->not being properly informed</li><li><!--block-->had to do much followups&nbsp;</li></ul></li></ul></li></ul></li></ul></li></ul><div><!--block--><br>----------------------------------------------------------------------------<br>28-Dec-2017<br>-<br><br>------------------------------------------------------------------------<br>27-Dec-2017<br>- Anshul said</div><ul><li><!--block-->Jo hota hai acche ke liye hi hota hai. shayad jindgi aapko kuch sikhana chahti thi.</li></ul><div><!--block--><br>-------------------------------<br>26-Dec-2017<br>- Fayaz&nbsp;</div><ul><li><!--block-->Manager me quality hona chahiye ki wo acche se samjhe ki&nbsp;<strong>Issue/ Problem kya hai?</strong></li><li><!--block--><br></li></ul><div><!--block-->--------------------------------------------------------<br>24-Dec-2017</div><ul><li><!--block-->in home<ul><li><!--block-->Papa asked to go in other gym and ask for their rates, look for the facilities available there.<ul><li><!--block-->After coming from gym, I informed papa for 3400/- charge and more equipment and pronounciation of \"Ladies Gym\" for my current gym I informed papa to stick with my current gym.</li></ul></li><li><!--block-->I noticed very good change in papa. He was repairing the broken roof near kitchen paani tanki. Isaid to maa \"Papa change ho gail baran ki hum pahle andha rahni\". Maa said tu andha rahle. Rimjhim said papa toh aise hi rahlan.</li><li><!--block-->In after noon papa asked me to go to market and purchase one low cost shoe, for approx 600/-, for daily use. But later he was asking to wait for Narendra to come home. But then he said , after Maa push,&nbsp; to go and explore market.<ul><li><!--block-->Papa asked to go after wearing costly shoe. He asked this as a marketing strategy, \"<strong>Jab sasta wala saaman kharide jo toh mahanga wala saaman pahan ke jao, isse saman acha dikhaya jata hai aur pasand nahi aaney par dusra dukan par ja sakte hain.</strong>\"</li><li><!--block-->&nbsp;I followed papa suggestion. I went in ballabhgarh market and purchased one shoe, worth 750 , discounted price 550.</li><li><!--block-->Then I purchased fruits and went back to home. Papa felt glad by seeing shoe, but initially had doubt for size 9 shoe. But I made him confirmed that 8 size shoe was not being fit in my feet.</li><li><!--block-->Some teachings/findings from Papa for me<br><br></li><li><!--block--><strong>Tumko kisi bhi chij me involved ho jane ki bimari hai.</strong>&nbsp;Tum kisi ki bhi help karney lagte ho, apna kaam bhul jaate ho. Tirkaney ka, deh nikalne ka loor nahi hai. Finally apna kaam pending rah jata hai aur personally koi benefit nahi hota.<br><br></li><li><!--block--><strong>4 aur 2 ka math-</strong>&nbsp;A ke pass 4 rupiya hai aur B ke pass 2 rupiya hai. A agar B ko ek rupiya de dega toh B , A ke barabar ho jayega. Agar B , A ko ek rupiya de dega toh A aur B ke bich me 5:1 ka ratio ho jayega.</li></ul></li><li><!--block-->In evening papa expressed his thought<ul><li><!--block-->I should go to Lal Quila like place, where I could see different, good and bad nature people.</li><li><!--block-->I could also go to Mathura vrindavan after high winter season get passed, in second half of January.</li><li><!--block-->Papa said , his grand father used to say that \"Bhagwan purana chawal aur naya vastar ke kabhi kami mat diha.\"</li><li><!--block-->Papa calculated and said I have spent enough pocket money this month, around 10000/- for going to office.</li><li><!--block-->Papa said that neither me nor Narendra had good sense of mathematics to save money. At least we could save 2000/- per month. Saving money is just passion and it help for bad time.</li></ul></li></ul></li><li><!--block-->in gym<ul><li><!--block-->I did exercise for only 45 minutes. As usual, I chewed RG before going into gym.</li><li><!--block-->After gym, I visited another gym<ul><li><!--block-->I met with Tarang, the trainer, he said I can give 3400/- or less for 3 months. That gym, Faster Fitness, has more equipment.</li><li><!--block-->I said, currently I go to Rage Gym. He said that is ladies gym.</li></ul></li></ul></li><li><!--block-->In neghbour hood,<ul><li><!--block-->&nbsp;dadaji came to our home to see the tiles being fitted. He said that extra tiles would be cut by tomorrow and labourer would put cement in the gap near balaige.</li></ul></li></ul><div><!--block-->-----------------------------------------------------------<br>23-Dec-2017</div><ul><li><!--block-->- in morning, maa said \"<strong>agar tu apna aap ke care kar paibe, tab hi hum sab ke care kar paibe</strong>.\"</li><li><!--block--><strong>One good observation or good thing noticed/ experienced with my self.</strong><ul><li><!--block-->I tried to go bathroom without consuming Rajnigandha or gutkha or khaini.</li><li><!--block-->I drank much hot water, took aloe-vera and amla juice, drank herbal tea.&nbsp;</li><li><!--block-->Later I experienced that my stomach got empty from its upper part.</li><li><!--block--><strong>Minute</strong><ul><li><!--block-->I felt much relief doublefold<ul><li><!--block-->I was happy for not consuming bad things.</li><li><!--block-->I felt confidence that I can resist for bad things. still I can get better results.</li></ul></li><li><!--block--><br></li></ul></li></ul></li><li><!--block-->-&nbsp;<strong>Issue in pipe connected with tanki of kitchen</strong><ul><li><!--block-->Papa contacted Prem ji plumber to check issue.</li><li><!--block-->He came around 11 PM. He suggested that chhat fore kar pipe badalna hoga. Papa uss samay machli laney bahar gaye they.&nbsp;</li><li><!--block-->Rimjhim papa ko call kar ke ye baat batayi, Papa ke aanry tak \"Tau mistry\" ko chhat fodne se rok diya.</li><li><!--block-->mera estimation tha ki 3000-4000 rupiya ka kharcha hoga. Papa ne baad me 25000-30000 rupiya ka estimation bataya.</li><li><!--block-->Papa ghar pe aaye toh \"Tau mistry\" ko thora aur ceiling forne ko kaha.</li><li><!--block-->1-2 inch niche pipe sahi condition me thi, Papa ne \"Tau mistry\" ko aagey chhat forney se roka. papa ne vahi pe churi bana ke repair karney ko kaha,</li><li><!--block-->Prem mistry ne 75 rupiye ka saman mangaya. ek 4 inch pipe .75 inch wala, ek&nbsp;</li><li><!--block--><strong>minute</strong><ul><li><!--block-->total 75+150 rupiye me pipe repair ho gaya.</li><li><!--block-->Papa ney wisely tarike se total 250-300 me hi ye issue resolve kara liya.</li><li><!--block-->Agle 2 saal me ghar ke saare pipes diwar for ke thik karana hoga.</li></ul></li></ul></li><li><!--block--><strong>Multiple escalation related to my habit to chew gutkha</strong><ul><li><!--block-->From morning till evening, rimjhim ne humko 2 baar papa ke gutkha ko churate pakara. ek baar hum paikhana me jakar gutkha khane gaye tab bhi rimjhim ko shak ho gaya aur usney maa se kah diya. Hum total 4 rajnigandha tulsi khaye.</li><li><!--block-->Maa machli bana rahi thi, hum se puchi ki paikhana me gutkha khaney gaye they na? hum bol diye ha.<ul><li><!--block-->Hum maa ko vishwas dilaye ki ab ye aadat chutney ke hi saare lakshan dikh rahe hai. Jindgi ke saare problems solve honey ki hi conditions dikh rahi hai.</li></ul></li></ul></li><li><!--block--><strong>office&nbsp;</strong>:-<ul><li><!--block--><strong>GainManager Monthly job re-run on production server:-</strong><ul><li><!--block-->4:30 me Fayaz ne call kiya. Local computer se job run karne me problem ho gaya tha. Naveen ne server par .java aur .class files copy karke run karney ko kaha.&nbsp;</li><li><!--block-->5 baje se 9 baje tak hum Fayaz ke sath baithey they. files replace karke java files ko standalone run karney ko try kiya.</li><li><!--block-->Fir bhi kuch exception aa rahe they. Duplicacy ka kuch error aa raha tha. Mainey Naveen ki help lene ko kaha. Naveen out-of-office tha, usney us samay help karney me unability show ki.</li><li><!--block--><strong>Minute</strong><ul><li><!--block-->Activity ko postpone karna pada.</li><li><!--block-->Ab activity Monday ko hoga. Amit Dhal se dubara approval lene ke liye mail daal diya.</li><li><!--block-->As per Yogesh, humko Naveen aur Rajesh ko bhi iss activity me pahle se hi involved rakhna chahiye tha. Business ko time par activity me jyada time laney ka information de dena tha.</li><li><!--block-->Workaround - 1) job ko server se trigger kar sakte hain. 2) UAT me prod db ko point karke bhi job trigger kar sakte hain.</li></ul></li></ul></li></ul></li></ul><div><!--block-->--------------------------------------------------------------------------<br>22-Dec-2017<br>- in home</div><ul><li><!--block-->\t\t-&nbsp;<strong>Future discussion for myself&nbsp;</strong><ul><li><!--block-->\t\t\t- in morning papa asked whether I am searching for any government job. He expressed his interest as he does not like me to carry 7 kg laptop on back and coming late in night.</li><li><!--block-->\t\t\t- he said that he could not understand myself and come here after leaving hometown.</li><li><!--block-->\t\t\t- I said I feel difficulty in searching government job for me. I have been cut off fom my freind circle. I have no clue how to search jobs with help of my freinds. I also said ki aap hamesha apna future plan banate rahe , kabhi humse nahi puchey ki hum usko kaise haasil kar sakenge.</li><li><!--block-->\t\t\t-<strong>&nbsp;suggestions from papa</strong><ul><li><!--block-->\t\t\t\t- explore in internet</li><li><!--block-->\t\t\t\t- talk with freind for any government job</li></ul></li><li><!--block-->\t\t\t-<strong>Minute&nbsp;</strong>-&nbsp;<ul><li><!--block-->\t\t\t\t- Je tuhra samajh me aaye kar.</li><li><!--block-->\t\t\t\t- Papa said to Maa that I have limited mentality and can not go beyond that.</li><li><!--block-->\t\t\t\t- Also papa said after taking bath that he had once only 2 kg tishi. then he made his efforts and after some time he earned 20 quintol tishi or some other material.</li></ul></li></ul></li></ul><div><!--block-->\t- in gym</div><ul><li><!--block-->\t\t- Diet plan to get effect in reducing weight -</li><li><!--block-->\t\t\t- Amit , from sector 23 near sant halwai shop, suggested to take diet plan from Ashok, gym owner and trainer. he also suggested to take light diet in morning and evening. Take heavy food in afternoon.</li></ul><div><!--block--><br>--------------------------------------------------------------<br>21-Dec-2017<br><br>\t- in gym,</div><ul><li><!--block-->\t\t- Talked with Ashok, informed him about my reluctancy for doing exercises. He suggested that avoid cold things to consume. It affects stamina in winters.</li></ul><div><!--block-->- in home</div><ul><li><!--block-->\t\t- in morning talked with dadaji</li><li><!--block-->\t\t\t- he asked<ul><li><!--block-->\t\t\t\t- last sunday tumhare yaha kon aaye they?</li><li><!--block-->\t\t\t\t- Bihar me tumhari koi property hai ki nahi</li><li><!--block-->\t\t\t\t- rimjhim ki shaadi ka koi baat bana?</li><li><!--block-->\t\t\t\t- vakeel ko abhi tak 50000/- rupaye de diye. case ki chinta choro aur apni shaadi karo. shaadi budhape ke liye karte hain. budhape me khana bana nahi sakte , help karney wala chahiye.</li><li><!--block-->\t\t\t\t- bipin ko man layak job nahi mil raha tha, so usney business kar liya. abhi 40 lakh ka customer&nbsp;</li></ul></li><li><!--block-->\t\t- Birthday wish to kamlesh murdhariya. He said thanks for mentioning his name in feedback given at Accenture.</li><li><!--block-->\t\t- Purchased panchang 2018, exchanged soyabeen.</li><li><!--block-->\t\t- Paid 950/- from ICICI account for two pen drive.</li><li><!--block-->\t\t- In evening, talked with papa. He was asking to control expenses.<ul><li><!--block-->\t\t\t- I should eat adaquately, save some money for future and cut-off some expenses.</li></ul></li></ul><div><!--block-->\t- Office&nbsp;</div><ul><li><!--block-->\t\t- in morning called Yogesh and informed that I am not able to come today. Taking leave. informed Somen via SMS , mentioning also informed Yogesh.</li></ul><div><!--block--><br>\t\t<br>----------------------------------------------------------------<br>20-Dec-2017<br><br>\t-&nbsp;<strong>office</strong></div><ul><li><!--block-->\t\t- Helped kirti for preeparing steps of different application level jobs of GainManager</li><li><!--block-->\t\t- Restarted res4 as it was not responding</li><li><!--block-->\t\t-&nbsp;<strong>Atteneded meetings</strong><ul><li><!--block-->\t\t\t- GainManager call for issues-&nbsp;<ul><li><!--block-->Naveen will check issues and enhancements and will let us know. Shahid will provide more details for test cases.</li></ul></li><li><!--block-->\t\t\t- GainManager job re-run on UAT db server.<ul><li><!--block-->&nbsp;duplicacy removed. with help of Naveen</li></ul></li><li><!--block-->\t\t\t- Resolvejiffy development call -&nbsp;<ul><li><!--block-->10th jan for deployment of CCTR phase 1. UAT Sign-off pending from dev team.&nbsp;</li></ul></li><li><!--block-->\t\t\t- Resolvejiffy issue discussion post migration with Server, network and dba team.<ul><li><!--block-->&nbsp;- server team will change hyper-v, increase RAM on db server.</li></ul></li></ul></li><li><!--block-->-&nbsp;<strong>Discussion about Gain Manager application with Fayaz.</strong><ul><li><!--block-->GainManager is a payout calculation tool<ul><li><!--block-->It is a SOX application. It contains employee sensitive data.</li><li><!--block-->WFM and DPE mainly use this application.</li><li><!--block-->Feed-data is uploaded in GM application, based on which&nbsp;<strong>incentive&nbsp;</strong>gets calculated for agents of BPOs of different process.</li><li><!--block-->For our IT-Apps group no incentive is applicable.</li></ul></li><li><!--block--><strong>- HRIS team</strong><ul><li><!--block-->HRIS team<strong>&nbsp;looks into L1 issues of GM. Shahid knows about functionality of different parts of GM. Shahid and teams are connected with actual client. They train users for how to use the tool. They troubleshoot L1 issues of GM application.</strong></li></ul></li><li><!--block--><strong>-Payout team</strong><ul><li><!--block--><strong>&nbsp;Mohd Asif is from \"Payout team\". He knows why to use GM application. Kis-kis jagah par GM application use ho sakta hai. He deals with actual client's (BPO agents') issues.&nbsp;</strong></li></ul></li></ul></li></ul><div><!--block-->-----------------------------------------------------------------------------------------------<br>19-Dec-2017<br><br>\t-in home<br><br>\t\t- I discussed my&nbsp;<strong>last day problem</strong>&nbsp;(I had sent mail to one person from audit team , without discussing the issue with all team members and only relying on Anshul statement that \"RJ Application\" has no \"automatic logout\" functionality, which was later found incomplete resolution given by me to audit team, as I found configuration for session-time-out in webshere as well as web.xml file for RJ application.)&nbsp;<strong>with parents.</strong><br><br>\t\t- Papa suggested, dusre se baat karo<br><br>\t\t\t- Kam shabdo me , tapak se jawab do. Galat sahi mat socho.<br><br>\t\t\t- Pyaar se jawab do.<br><br>\t\t- Maa suggested<br><br>\t\t\t- Sihur shihur mat karo. Furti lao.<br><br>\t\t- Sister said<br><br>\t\t\t- Pariwar hamesha bamboo kare la hi hola.<br><br>\t\t\t- Papa tuhar ka badai karas, sudhar laawe la tuhra khud mehnat kare ke padi.<br><br><br>------------------------------------------------------------<br>18-Dec-2017<br><br>\t- In Office<br><br>\t\t- One un-reported issue when users were facing intermittent page loading error in resolvejiffy. Two nodes were not running correctly.<br><br>\t\t- In afternoon, One auditor has mailed to team. I only talked with Anshul and replied on that mail. Yogesh Devgan, Harish Bareja, Sheikh Ibbrahim- All get panicked. They helped to resolve the issue.<br><br>\t\t- Sheikh ne pahle mere rajnigandha kam karne ki aadat ko appreciate kiya. Unhone kaha ki tune ye aadat kaise control kiya.<br><br>\t\t- Hum Sheikh Ibbrahim se baat karne ko bechain they. Unke piche bhaag rahe they. Unhoney samjhaya ki-<br><br>\t\t\t- Dar ke rahne wala aadat chhoro.<br><br>\t\t\t- Sab se communicate karo.<br><br>\t\t\t- Team me sab se baat ko samjho, tab bahar me khud se us baat ko represent karne ka try karo.<br>------------------------------------------<br>14-Dec-2017<br>- Papa said yesterday fufa called Narendra to say that he will return 25000 /- asap.<br>- Papa was worried that now he will not get any support from him.<br>- I talked with Anshul and discussed my issue. she said \"agar uske ghar wale uska support nahi karte toh ladki sudhri rahti\".<br>-----------------------------<br>13-Dec-2017<br>- Papa talked in morning that yestrday fua had called him and chided why he did not gave money.<br>-----------------<br><strong>12-Dec-2017<br>-&nbsp;</strong>ResolveJiffy was down in morning. BRC call started.<br><br>\t<br>------------------------------------------<br><strong>11-Dec-2017<br>-&nbsp;</strong>In morning I did hot talk with papa</div><ul><li><!--block-->Relation chalane ke liye kabhi sahi hone ke baad bhi jhukna parta hai<ul><li><!--block-->Narendra supported this talk</li></ul></li><li><!--block-->Final conclusion -&nbsp;<ul><li><!--block-->Ekta rakhni hogi</li><li><!--block-->Aage ka jyada mat socho sab accha hoga.</li></ul></li><li><!--block-->- Logged one jira issue for zetta-quality module - Agent was not able to view coaching scheduled for him.</li><li><!--block-->Discussed two issues of GainManager -&nbsp;<ul><li><!--block-->1) AutoRevokeDaily activity mail being triggered twice&nbsp;</li><li><!--block-->2) Employee tagging copy for december month - it may impact payout of january</li></ul></li><li><!--block-->some issue reported by Yogesh D. in the ResolveJiffy Dashboard for Nov 17</li><li><!--block-->HR activity pending shared by HR&nbsp;</li></ul><div><!--block-->-------------------------------<br><strong>10-Dec-2017<br></strong>- Jab koi aadmi se hum kaam karweni, tab ukra bhr pet khana khila dewe ke chahi, par ukar mazdoori me na kate ke chahi. Isse ukar kaam kare me mann lgal rahe la aur u bhi mann se thor jyada kaam kare la. (Management tactics learnt from Papa, while discussion why he gave all his labour-charge and did not bargained there.)<br><br>\t- Dopahar me khane ke baad hum bahar ghumney gaye they jaha hum rajnigandha kharid kar khaye. Wapas aaney par hum jab darwaze par khade they tab hum gutkha thuk rahey they ki upar se maa dekh li hai. Maa wahi se humko ghur rahi thi. Uske adhikar se bhar kar humko dekhney aur hum par gussa karney ke karan hum baccho jaisa dar gaye hain. Maa upar chhat par bulayi hai. waha hum maa se jhuth bole hain ki hum laung kha kar thuk rahe they.&nbsp; Maa humse boli ki tu kutta hai tu sudhar nahi sakta. Hum maa se boley ki maa kutta na sudhr saka ta par kutta ke pilla sudhar saka ta. Hum maa se wada kiye ki hum ab gutkha na khayem.<br><br>\t-Shaam ko waqueel ko uski fees ka baki ka 10000/- rupiya de diye hain.<br><br>\t<br>----------------------------------<br><strong>09-Dec-2017<br></strong><br>\t- I left to Ballabhgarh to pick bus to go Sohna and then Damadama Adventure Club. We enjoyed a lot there.&nbsp;<br><br>\t- We all did various activities there. We did \"free fall\". I was frightening that I might not complete this activity. I was facing challenge while holding my weight with my arms on the ropes in the second part of this activity, however anyhow I completed it.&nbsp;<br><br>\t- Then We did another activity where people have to walk on hanging ropes. There was various sections of this walking activity, however only the first one was tough. Rest all were relatively simple.<br><br>\t- Then we did \"sky-walk\" activity. This was similar to the previous one, but the difference was that , in this activity, first climb on nets, then walk on hanging ropes then with the help of one rope, come down while sliding over the rope.<br><br>\t- Also we did one activity where we have to climb on net then come back.&nbsp;<br><br>\t- I believe all activities were inspired by army training.<br><br>\t- This camp adventure changed my way of observe the world and people around myself. I realised, I am doing well but still it needs much improvements. Below are some points where I need to improve.<br>-------------------------------------------------<br><strong>08-Dec-2017<br><br>-</strong>&nbsp;I got my salary (30471/-) credited in my account from the DD submitted 2 days back in my account.<br><br>\t- I went with Anshul for the reepair of her phone. It was just minor problem as her mobile software got some problem due to running the mobile in less charged state. After that I asked her if she could go with me for have some tea/coffee. She said yes and went with me in CCD. There she ordered coffee from her choice. While paying the bill, she first advanced her credit card. Suddenly I exclaimed that why Anshul you want to pay the bills. Later I appologised for my sudden random exclaimation. She said, I know you and your nature so nothing to be feel bad here.<br><br>\t- She discussed there some time comes in each life when she/he feels bad , but she/he have to bear that time. She accepted there was some such kind of time in her life also. She was hoping let the next year be some more better than current year. I also indirectly nodded my head from my life side as I am also facing same life's challenge.<br><br>\t- In evening, I was in discussion with Fayaz, Mohd. Khurshid and Shahid Imam for some GainManager issue. I was in office till 10'o clock. Later when I left the office I was wishing to call Yogesh to say that why should we stay in office for only some unofficially reported issue/doubt of Shahid Imam. But I did not get chance to talk with Yogesh for same as when I called Yogesh's phone was busy and as reply when Yogesh called back I was picking the cab. Later I shared my issues/concerns with Yogesh in one-o-one mail when I reached home before going in bed that night.<br><strong>-------------------------------------</strong><br><strong>07-Dec-2017</strong><br>\t- Sheik asked me to make no excuses and come to get-together on saturday<br>\t- I helped fayaz to prepare sheet for all GM issues<br>\t- I configured rad was on my laptop<br>\t- Nakul was saying some random abduction-of-guy-for-marriage-in-bihar, i was not feeling well in this discussion.<strong><br><br>--------------------------------------<br>5-Dec-2017<br>-&nbsp;</strong>QAA issue - Sunil R. Yadav - Check why inactive employees are showing in tool.<br>- Laptop application configuration<br>- GainManager issue analysis- Page got crashed for one employee when he wants to check his bucket.<br>- Discussion with Somen for my SOD.<strong><br></strong>----------------------<br><strong>04-Dec-2017</strong><br>\t- Gain Manager Password Change activity - done by rajesh<br>\t- QAA issue reported by sunil r yadav<br>\t- talked with Anshul -- for what does \"Good English\" means? - One should speak english very fluently and should use heavy words.<br>\t- talked with sanjay -- for secure future -- alternative in carreer<br>\t- Karan Janjua farewell - he suggested that I should be cool. Concentrix is a good company.<br>\t- follow up for my last salary<br>--------------------------------------<br><strong>28-Nov-2017<br>- I reached to court for my date to appear for evidence with Papa and Narendra.<br>- After long wait , lawyer came in second half. He gave his 1 hour to log my statement in front of judge.<br>- Next date of evidence by father or Narendra will occur on 7-Feb-2018.<br>- I filed divorce case . Most probably summon would be sent by tomorrow to them.</strong><br>--------------------------------------------------------<br><strong>27-Nov-2017<br>Anshul Bansal<br>- She helped me to solve one QAA issue, where users have got QAA review ids double up. She called manager of sunil from AAP process and made him agree that he is ok for having dump without QAA Review ids.</strong></div><ul><li><!--block-->She said \"99.99% log apni galati hote huye bhi nahi mante hain. Aise hi chalta hai.\"</li></ul><div><!--block--><strong>- Intagging of two employee in GainManager<br>- ResolveJiffy version 1.2 deployment for CCTR account RFC - follow up for getting UAT Signoff and other required documents from Development team<br>- QAA Dump report share to UPL process.<br>- Sheikh sir talked with me in evening<br>- Yogesh sir contacted Kapil from desktop team for my laptop issue. Laptop might be available on wednesday.<br></strong><br>-------------------------------------------------<br><strong><em>26-Nov-2017</em></strong><br><strong><em>Karan Janjua</em></strong></div><ul><li><!--block-->I talked with him on 26th Nov 2017<ul><li><!--block-->He said, Premendra tum&nbsp;<strong><em>cool raha karo</em></strong>. Concentrix me utna politics nahi hai.</li><li><!--block-->Freelancing me opportunity ke liye apni koi site host karo.</li></ul></li><li><!--block-->In office&nbsp;<ul><li><!--block-->I shared QAA dump report.&nbsp;</li><li><!--block-->Did follow up for ResolveJiffy application with self and Rajesh N. as suggested by sheikh ibbrahim</li><li><!--block-->Did follow up for OneTouch application with Bimal KJ as suggested by Yogesh.</li></ul></li></ul><div><!--block--><br>--------------------------------------------------<br><strong>25-Nov-2017</strong></div><ul><li><!--block--><strong><em>Home</em></strong><ul><li><!--block-->Papa talked with dadaji about current status. Papa also asked me to talk with dadaji and ask him to call once the lawyer to get over my case as soon as possible.</li><li><!--block-->I talked with dadaji around 3:30 PM and requested him to call once the lawyer.He instantly called the lawyer and asked the lawyer to file the divorce petition and close my case asap.</li><li><!--block-->I called the lawyer and asked him to give some time today to discuss further steps as well as some probable question to be asked by judge on next hearing date 28th Nov 2017.</li><li><!--block-->Lawyer listened our issue and asked he will file one divorce case and charged 20000/- . I gave 2000/- today and said I will provide 10000/- on 28th. and will pay the rest amount in next month once i'll recieve my next salary.</li></ul></li><li><!--block--><strong>Office</strong><ul><li><!--block-->ResolveJiffy Server down<ul><li><!--block-->Occurence<ul><li><!--block-->24/11/2017</li><li><!--block-->25/11/2017</li></ul></li><li><!--block-->Locations affected - Chandigarh, Mumbai</li><li><!--block-->Initial cause<ul><li><!--block-->Server and network issue.</li><li><!--block-->Mount issue</li><li><!--block-->issue in DB Archival logs</li></ul></li><li><!--block-->Initial discussed steps to solve the issue<ul><li><!--block-->Mount point should be changed by server team (Deepesh)</li><li><!--block-->Request from DBA team - increase number of CPU</li><li><!--block-->No change activity from DBA team, only activity from server team</li></ul></li><li><!--block-->Persons joined the BRC bridge<ul><li><!--block-->Application Support Team - Sheikh, Fayaz, Premendra, Amit Tyagi</li><li><!--block-->Server Team - Deepesh,&nbsp;</li><li><!--block-->Mayank, Rhonny, Joe, Aswini, Rajesh Nissankarao</li></ul></li><li><!--block-->Downtime activity window - 22:30 to 24:30</li><li><!--block-->ECR 13058</li></ul></li></ul></li></ul><div><!--block-->---------------------------------------------------------------------------<br><br><strong>11-Nov-2017</strong></div><ul><li><!--block--><strong><em>Home</em></strong><ul><li><!--block-->Papa aaj subah se babut pareshan they. wo Vinod fufa, Sri Lal ji se baat kiye. Bahut pareshan they.</li><li><!--block-->Shaam ko hum maa se baat kar rahe the. Maa se bole ki \"Admi kahi se paisa laaye, sab ghar wale khush rahte hain. Paisa hi important hota hai.\" . Papa yahi puch rahe they ki kya bole hum se bhi bolo. Thora darr aur gusse me hum papa se baat kiye aur bole ki<ul><li><!--block-->Appko samne wale ki baat sunni chahiye.</li><li><!--block-->Apko apne layak kutumb chahiye ki , narendra layak uski wife?</li><li><!--block-->Last me hum bole ki aap jyada bolte hain isiliye log aap ko use karte hain.</li><li><!--block-->Shri bhagwan fufa aapse sirf paise ke liye dosti karte hain</li></ul></li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4320da40-e51e-48cd-9a71-fb40855eddee","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.528Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.528Z"},"uniqueId":"76055018-d0e7-480f-b1e4-d72105e7aa49","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1e92e"},"name":"Home 04-Dec-2017 - Talked with family. - Need to purchase one ear phone. - Papa","heading":"Home 04-Dec-2017 - Talked with family. - Need to purchase","smartContent":{"content":"<div><!--block--><strong>Home<br><br><br>04-Dec-2017</strong><br>- Talked with family.<br>- Need to purchase one ear phone.<br>- Papa instructed to spend money with care.<br>--------------------------------------<br><strong>28-Nov-2017<br>- I reached to court for my date to appear for evidence with Papa and Narendra.<br>- After long wait , lawyer came in second half. He gave his 1 hour to log my statement in front of judge.<br>- Next date of evidence by father or Narendra will occur on 7-Feb-2018.<br>- I filed divorce case . Most probably summon would be sent by tomorrow to them.</strong><br>--------------------------------------------------------<br><strong>27-Nov-2017<br><br></strong><br>-------------------------------------------------<br><strong><em>26-Nov-2017</em></strong><br><br></div><div><!--block--><br>--------------------------------------------------<br><strong>25-Nov-2017</strong></div><ul><li><!--block--><strong><em>Home</em></strong><ul><li><!--block-->Papa talked with dadaji about current status. Papa also asked me to talk with dadaji and ask him to call once the lawyer to get over my case as soon as possible.</li><li><!--block-->I talked with dadaji around 3:30 PM and requested him to call once the lawyer.He instantly called the lawyer and asked the lawyer to file the divorce petition and close my case asap.</li><li><!--block-->I called the lawyer and asked him to give some time today to discuss further steps as well as some probable question to be asked by judge on next hearing date 28th Nov 2017.</li><li><!--block-->Lawyer listened our issue and asked he will file one divorce case and charged 20000/- . I gave 2000/- today and said I will provide 10000/- on 28th. and will pay the rest amount in next month once i'll recieve my next salary.5<br><br></li></ul></li></ul><div><!--block-->---------------------------------------------------------------------------<br><br><strong>11-Nov-2017</strong></div><ul><li><!--block--><strong><em>Home</em></strong><ul><li><!--block-->Papa aaj subah se babut pareshan they. wo Vinod fufa, Sri Lal ji se baat kiye. Bahut pareshan they.</li><li><!--block-->Shaam ko hum maa se baat kar rahe the. Maa se bole ki \"Admi kahi se paisa laaye, sab ghar wale khush rahte hain. Paisa hi important hota hai.\" . Papa yahi puch rahe they ki kya bole hum se bhi bolo. Thora darr aur gusse me hum papa se baat kiye aur bole ki<ul><li><!--block-->Appko samne wale ki baat sunni chahiye.</li><li><!--block-->Apko apne layak kutumb chahiye ki , narendra layak uski wife?</li><li><!--block-->Last me hum bole ki aap jyada bolte hain isiliye log aap ko use karte hain.</li><li><!--block-->Shri bhagwan fufa aapse sirf paise ke liye dosti karte hain</li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4320da40-e51e-48cd-9a71-fb40855eddee","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.535Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.535Z"},"uniqueId":"f08551fa-6bbc-4e91-a527-b0e651b2b6d9","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ea16"},"name":"13-Nov-2017 - When walk on treadmill, make less sound for better results of exercise. ---------------------------------------------------------------------------------","heading":"13-Nov-2017 - When walk on treadmill, make less sound for","smartContent":{"content":"<div><!--block--><strong>13-Nov-2017</strong><br>- When walk on treadmill, make less sound for better results of exercise.<br>---------------------------------------------------------------------------------<br><strong>22-Oct-2017</strong><br><br>I asked Mukesh about the energy drink he takes.<br><br>As per him it is BCAA . It has no side-effects. it just gives muscles extra energy, so we do not feel weakness. It has no side effects. It costs 2500, 3500 respectively for 30 , 60 scoops.<br><br>--------------------------------------------<br><strong>15-Dec-2017<br><br></strong>One guy called me \"kya haal hai uncle?\". That guy is natively from Siwan.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":8,"linkedQuestionsId":"8f9fdb92-5642-40c5-b53b-735472e41843","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.575Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.575Z"},"uniqueId":"18f42967-11f6-4c9a-911b-da6df4754602","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ea8b"},"name":"For first 5 years observe the lady for her behaiour, expectations What she likes What","heading":"For first 5 years observe the lady for her behaiour,","smartContent":{"content":"<div><!--block-->For first 5 years</div><ul><li><!--block-->\tobserve the&nbsp;<ul><li><!--block-->\t\tlady for her behaiour, expectations</li><li><!--block-->\t\tWhat she likes</li><li><!--block-->\t\tWhat she dis-likes</li><li><!--block-->\t\tTry to find way to make her agree for my will</li></ul></li><li><!--block-->\tDo not talk serious topic</li><li><!--block-->\tAsk her to go to visit any tour with me and make her agree to get the permission by her to my parents</li></ul><div><!--block-->After 5-7 years, when there is one kid,&nbsp;</div><ul><li><!--block-->As per observation, try to start some serious topics, future planning</li></ul><div><!--block--><br><strong><em>NEVER&nbsp;</em></strong></div><ul><li><!--block-->Ask her to spy my parents.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1845c849-88dd-4a31-bb99-423343952bc6","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.596Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.596Z"},"uniqueId":"18eb9f4a-ea03-4278-9ab3-21f4cabeb46d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1eb00"},"name":"23-Oct-2017 Biceps exercise Warmup 04-Nov-2017 3000 /- jama kiye. till feb 07 2018 tak ka.","heading":"23-Oct-2017 Biceps exercise Warmup 04-Nov-2017 3000 /- jama kiye. till","smartContent":{"content":"<div><!--block-->23-Oct-2017</div><ul><li><!--block-->Biceps exercise</li><li><!--block-->Warmup</li></ul><div><!--block-->04-Nov-2017</div><ul><li><!--block--><strong>3000 /- jama kiye. till feb 07 2018 tak ka.</strong></li></ul><div><!--block-->13-Feb-2018</div><ul><li><!--block-->Gym me 3000 rupiye Feb 08 - May 08, 2018 tak ka bill jama kara diye.</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"560460e4-96ec-4a4f-9986-8fd0187b0c59","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.618Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.618Z"},"uniqueId":"0fbc5e87-5c12-489b-9317-e3964b4efa14","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1eb75"},"name":"Every second target Mere aur meri family ke sath accha hi hoga. Mai acchey ke","heading":"Every second target Mere aur meri family ke sath accha","smartContent":{"content":"<div><!--block--><strong>Every second target</strong></div><ul><li><!--block-->Mere aur meri family ke sath accha hi hoga. Mai acchey ke liye prayas karuga. Mujhey khud par bharosa hai. Mujhey bhagwan par bharosa&nbsp; hai. Mujhey Apney Maa-Papa par bharosa hai.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"419fdfbb-b4ca-4903-bd19-cf702d686dd2","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.639Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.639Z"},"uniqueId":"bf833ee4-780c-400a-b6e7-da2abcd961e7","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1eb77"},"name":"Long term tasks 01 - Prepare my communication skill Scope/Performance level - I could understand","heading":"Long term tasks 01 - Prepare my communication skill Scope/Performance","smartContent":{"content":"<div><!--block--><strong><em>Long term tasks</em></strong></div><ul><li><!--block--><strong><em>01 - Prepare my communication skill</em></strong><ul><li><!--block--><strong>Scope/Performance level -&nbsp;</strong>I could understand and talk with clients and seniors.</li><li><!--block--><strong>Importance/Priority-</strong></li><li><!--block--><strong>Sub-steps</strong><ul><li><!--block-->Collect commonly used words and practice it</li><li><!--block-->Collect commonly used sentence patterns</li><li><!--block-->Collect commonly used grammatical rules, verb forms, prepositions&nbsp;</li></ul></li><li><!--block--><strong>target-date -&nbsp;</strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"419fdfbb-b4ca-4903-bd19-cf702d686dd2","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.645Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.645Z"},"uniqueId":"872cc5ec-a1e9-4cb4-b1a0-bff98d7566cb","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ebec"},"name":"30-Oct-2017 705, Palm vihar, Gurgaon. Near Iffco cowk Thay asked project related question. AXSLogic is","heading":"30-Oct-2017 705, Palm vihar, Gurgaon. Near Iffco cowk Thay asked","smartContent":{"content":"<div><!--block--><strong>30-Oct-2017</strong></div><ul><li><!--block-->705, Palm vihar, Gurgaon. Near Iffco cowk</li><li><!--block-->Thay asked project related question.</li><li><!--block-->AXSLogic is the company name.</li><li><!--block-->They will discuss with dimpy for salary related things.</li><li><!--block--><strong>Richa reached me on 14-Nov-2017 to discuss opportunity, as axslogic shortlisted me. But meanwhile I had joined back in concentrix. Hence I politely refused the offer.</strong></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"8401a08c-a834-40ae-9877-8dc9ea0e920c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.666Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.666Z"},"uniqueId":"17f5195a-66f1-4b59-b74b-07d75f72bd60","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ebee"},"name":"13-Oct-2017 Concentrix They took document 27-Oct-17- Thay were sending new version of document from gee.","heading":"13-Oct-2017 Concentrix They took document 27-Oct-17- Thay were sending new","smartContent":{"content":"<div><!--block--><strong>13-Oct-2017</strong></div><ul><li><!--block-->Concentrix</li><li><!--block-->They took document</li><li><!--block-->27-Oct-17- Thay were sending new version of document from gee. Document and offer letter is awaiting.</li><li><!--block-->30-Oct-2017 - I did follow up with Swarooparani. She said she will share the document by EOD. Document and offer letter is awaiting.</li><li><!--block-->02-Nov-2017 - Swarooparani called and asked me to go to Fill employment details form at Building 6A. I did that and now expecting offer letter by 03-Nov-2017.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8401a08c-a834-40ae-9877-8dc9ea0e920c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.671Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.671Z"},"uniqueId":"d03d7556-6c47-469a-a8f4-9cba3947e85b","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ec63"},"name":"I can try for An MBA from IGNOU. Abhi 3-4 saal hai, sarkari job ke","heading":"I can try for An MBA from IGNOU. Abhi 3-4","smartContent":{"content":"<div><!--block-->I can try for</div><ul><li><!--block-->An MBA from IGNOU.</li><li><!--block-->Abhi 3-4 saal hai, sarkari job ke liye try kar sakte hain.</li></ul><div><!--block--><br>In dono option ke liye common syllabus hai</div><ul><li><!--block-->Verbal Reasoning</li><li><!--block-->Math</li><li><!--block-->English</li></ul><div><!--block--><br>Iske alawa job ke liye padhna hoga</div><ul><li><!--block-->Apna engineering ka syllabus</li><li><!--block-->General knowledge</li><li><!--block-->History</li><li><!--block-->Geography</li><li><!--block-->Civics</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":7,"linkedQuestionsId":"d7864ec8-5dc6-4a70-8cf5-823839dbd03a","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.696Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.696Z"},"uniqueId":"5933927e-add2-4b10-b275-8644fc84dc51","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ec65"},"name":"Apart from these following options:- An MBA from IGNOU. Abhi 3-4 saal hai, sarkari job","heading":"Apart from these following options:- An MBA from IGNOU. Abhi","smartContent":{"content":"<div><!--block-->Apart from these following options:-</div><ul><li><!--block-->An MBA from IGNOU.</li><li><!--block-->Abhi 3-4 saal hai, sarkari job ke liye try kar sakte hain.</li></ul><div><!--block-->I can try for do something work by own. It means own business (<strong><em>Entrepreneurship</em></strong>), own&nbsp;</div><ul><li><!--block-->As discussed with Jayanta on 04-Nov-2017<ul><li><!--block--><strong><em>apna kaam kaise start kar sakte hain,&nbsp;</em></strong>Iske baarey me pata karo ki&nbsp;<ul><li><!--block--><strong>apna kaam kaise start kar sakte hain. Jab tum MBA ke liye soch rahe ho toh uske baarey me bhi toh tum kuch nahi jante ho. Aise hi explore karo</strong></li><li><!--block-->Iske liye kon sa option suitable rahega.</li><li><!--block-->Kitna paisa lagega.</li><li><!--block-->Kya legal procedure hoga.</li></ul></li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":7,"linkedQuestionsId":"d7864ec8-5dc6-4a70-8cf5-823839dbd03a","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.701Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.701Z"},"uniqueId":"b4b97611-c670-4e73-a46e-e2fdca27a391","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ec67"},"name":"-- Do Post Graduate Diploma in Data Science from UpGrad.com with IITB","heading":"-- Do Post Graduate Diploma in Data Science from UpGrad.com","smartContent":{"content":"<div><!--block-->--&nbsp;<strong><em>Do Post Graduate Diploma in Data Science from UpGrad.com with IITB</em></strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d7864ec8-5dc6-4a70-8cf5-823839dbd03a","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.706Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.706Z"},"uniqueId":"70134079-ad38-471f-aa8a-bdb595955c7c","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ecdc"},"name":"I will practice followed by increase doing In office I will try to explain/defend myself","heading":"I will practice followed by increase doing In office I","smartContent":{"content":"<ul><li><!--block--><strong>I will practice followed by increase doing</strong><ul><li><!--block--><strong>In office</strong><ul><li><!--block--><strong>I will try to explain/defend myself by my own to my managers and will practice self-defense (Target Date - 31-Dec-2017)</strong></li></ul></li><li><!--block--><strong>In home</strong><ul><li><!--block--><strong>I will listen carefully and calmness the words of papa</strong></li><li><!--block--><br></li></ul></li><li><!--block--><strong>Within society</strong></li></ul></li><li><!--block--><strong>I will less do followed by will stop completely</strong><ul><li><!--block--><strong>Chew pan masala (Target Date - 31-Dec-2017)</strong></li><li><!--block--><strong>Worry (Target Date - 31-Dec-2017)</strong></li><li><!--block--><strong>Smoking (Target Date - 31-Dec-2017)</strong></li><li><!--block--><strong>In Home</strong><ul><li><!--block--><strong>I will not do complaint of papa to Maa</strong></li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"27491264-4574-46ba-b439-2a3a0bb24742","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.725Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.725Z"},"uniqueId":"8d93c863-e028-4a72-8cc5-07ee9c719f4d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ed51"},"name":"1. I did not practice to defend myself in my previous life. References related to","heading":"1. I did not practice to defend myself in my","smartContent":{"content":"<ul><li><!--block-->1.<strong>&nbsp;I did not practice to defend myself in my previous life</strong>.<ul><li><!--block-->References related to this fact<ul><li><!--block-->I relied on my managers and did not directly made conversations with my upline managers. Hence they have theft my credits.</li></ul></li><li><!--block-->&nbsp;I was expecting some other guy will come and will defend me if i explain situation to him.In thins way I might be misinterpreted or misused by others. Or, they might take advantages for their own benefits. It has happened many times. So My confession is that&nbsp;<strong>I will try to explain myself by my own and will practice self-defense</strong>.</li></ul></li><li><!--block-->2.&nbsp;<strong>Hum jaldi gussa ho jate hain.</strong></li><li><!--block-->3.&nbsp;<strong>Raat me sone se pahle MB, sabere weakness hota hai.</strong></li><li><!--block-->4.&nbsp;<strong>Hum bahut jaldi hopeless ho jate hain. Jab chijein mere expectations ke hisab se nahi hoti, to aisa hota hai.</strong></li><li><!--block--><strong>5. I can not say no, with reasons. hence more work is load on my self and at last I would be questioned that what tasks I have done, and why some tasks are not completed?</strong></li><li><!--block--><strong>6. I do not take decisions boldly&nbsp;</strong></li><li><!--block--><strong>7. I think in hapzard way, I do not stick to one agenda for a long time.&nbsp;</strong></li><li><!--block--><strong>8. I fear from mistakes from myself, bad habits of mine. hence i make compromise.</strong></li><li><!--block--><strong>9. Hum bahut jaldi pressure me aa jate hain. Jab ek sath do ya adhik kaam aa jate hain toh hum decide nahi kar pate ki pahle koun sa kaam karein.</strong></li></ul><div><!--block--><br><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c6e0a1a7-eef9-4291-9e94-b55fd9ccc5eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.745Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.745Z"},"uniqueId":"8cc4bff8-b6dd-4963-9561-00ab31c07868","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ed53"},"name":"Mother-Father Hum shuru se jaanat rahni ki humra se na ho payi, but hum bol","heading":"Mother-Father Hum shuru se jaanat rahni ki humra se na","smartContent":{"content":"<div><!--block-->Mother-Father</div><ul><li><!--block-->Hum shuru se jaanat rahni ki humra se na ho payi, but hum bol na paini.&nbsp;</li><li><!--block-->Humra jaade soche ke bimari ba.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c6e0a1a7-eef9-4291-9e94-b55fd9ccc5eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.75Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.75Z"},"uniqueId":"4f12575c-58d8-4806-96e7-675331dce5a6","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1edc8"},"name":"14-Nov-2017 I talked with Sanjay and we discussed the issue I faced in Accenture. As","heading":"14-Nov-2017 I talked with Sanjay and we discussed the issue","smartContent":{"content":"<div><!--block--><strong>14-Nov-2017</strong></div><ul><li><!--block-->I talked with Sanjay and we discussed the issue I faced in Accenture.<ul><li><!--block-->As discussed with him, he suggested that I should only take lesson from this event.<ul><li><!--block-->Usney kaha ki tumney bhi galati kiya hai.&nbsp;<strong>Tum khud ko defend nahi kiye.&nbsp;</strong>mere event se Sanjay ne bhi lesson liya ki usko bhi aagey koi offer milega toh wo alert rahega ki aisa bhi ho sakta hai.</li><li><!--block-->Mujhey HR se Jayesh ki galati batani chahiye thi ki mai apna kaam sahi se kar raha tha, but Jayesh ne meri expected help nahi&nbsp; ki.</li></ul></li></ul></li></ul><div><!--block--><strong>17-Nov-2017</strong></div><ul><li><!--block-->I talked with Nakul, Yashwant on dinner table. They asked about where do I live in Faridabad. Also they asked for my home's price. Nakul had point that I have purchased the home in more cost. I could get home in cheaper rate in delhi, near rohini.</li></ul><div><!--block--><strong>18-Nov-2017</strong></div><ul><li><!--block-->I talked with Arvind, one of my batchmates. I discussed about my personal problem, my marital issue.</li></ul><div><!--block--><strong>19-Nov-2017</strong></div><ul><li><!--block-->While walking, I met with dadaji and he asked about current status of marital issue.</li></ul><div><!--block--><strong>20-Nov-2017</strong></div><ul><li><!--block-->After having lunch, I was walking with Nakul. He was suggesting that I should take some activities, like making roster, due to which I might be connected with team.</li><li><!--block-->Also he was taking that we should take care about things that after a certain age,35-40, companies would not offer jobs. We should invest some money,25000-35000, for learning new technologies to be in job.</li></ul><div><!--block--><strong>27-Nov-2017</strong></div><ul><li><!--block-->Anshul discussed after talking with one QAA user that 99.99% people do not accept their mistakes. In this way things go on.</li></ul><div><!--block--><strong>29-Nov-2017</strong></div><ul><li><!--block-->I talked with Sanjay and discussed that I have lodged divorce petition. Also he discussed that he is planning one e-commerce website. I asked few questions to understand his definiteness of purpose.</li><li><!--block-->He pointed out that I get happy or sad very soon. This is not good. I must refrain from this.</li></ul><div><!--block--><strong>05-Dec-2017</strong></div><ul><li><!--block-->I asked Sanjay to go for a tea in evening. Then I wished to go on ground floor to get one Rajnigandha. I was planning to return back once I purchased the Rajnigandha. But while talking with him, he drove me to building 14 for tennins court. Actually he used to play tennis there.<ul><li><!--block-->I discussed<ul><li><!--block-->\t\t\t- My personal relations with my wife. I said that she had not cooperated me for sex. She always said that she was ill in night and do not inform this to either my parents or her parents. And in morning she becomes well. Again next night she used to follow same process.</li><li><!--block-->\t\t\t- Fayaz is not giving me information for common issue and functionality overview for GM. He said he would have not proper knowledge for the application. I requested him to give me some time for the discussion of GM overview from his side.</li></ul></li></ul></li><li><!--block-->I discussed with Somen and he gave overview of my responsibilities.<ul><li><!--block-->\t\tHe mainly focused that till 20th I should take control of everything related to GM (Functionality, code, deployment, RFC)</li><li><!--block-->\t\tI should keep an eye on other application as well, but at last I have to lead these application.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4dab3442-efe8-4e22-a68d-4b26078325db","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.772Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.772Z"},"uniqueId":"a8c3bbaf-4121-41b9-9a7f-5e82e050979c","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1eeb0"},"name":"In Morning- Gahar ke kaam me hath bata ke Subah me utne ke baad apna","heading":"In Morning- Gahar ke kaam me hath bata ke Subah","smartContent":{"content":"<div><!--block-->In Morning-</div><ul><li><!--block-->Gahar ke kaam me hath bata ke\t<ul><li><!--block-->Subah me utne ke baad apna bichauna samet kar.</li><li><!--block-->\tSubah me utne ke baad apna dawa khud bana ke pi kar.\t</li><li><!--block-->Gutkha nahi khayenge toh bathroom ganda nahi karenge. Isse maa ko bathroom roz roz nahi dhona padega.</li><li><!--block-->Bathroom se aakar flush kar ke. Isse maa ko bathroom roz nahi dhona hoga.</li></ul></li><li><!--block-->Escalations/ Problem ko sun ke pyaar se usko solve karney me.</li><li><!--block-->Jhagre/Gusse wale situation me pyaar se , cool dimag se solve karney me.</li><li><!--block-->Office time par jayenge aur raat me 7:30 tak nikal jayenge. Isse maa papa time par so sakenge.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b5523ee7-6c4b-4761-a16c-a3c84bb327fc","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.808Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.808Z"},"uniqueId":"6dc3c2b0-6fb8-4c73-b1f3-bfcead04298d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef25"},"name":"Gutkha khane se humko aur dusro ko kya pareshani hoti hai? 24-Dec-2017 --> Self-confidence impacted","heading":"Gutkha khane se humko aur dusro ko kya pareshani hoti","smartContent":{"content":"<div><!--block--><strong><em>Gutkha khane se humko aur dusro ko kya pareshani hoti hai?<br></em></strong><br></div><ul><li><!--block-->24-Dec-2017 --&gt;&nbsp;<ul><li><!--block-->Self-confidence impacted hota hai. Gutkha khane se pahle ek bechaini rahti hai, fir khane ke baad pachtawa hota hai. Thori der me muh bhar jata hai. Usi samay koi baat karney aa jata hai, tab kafi inconvinience feel hota hai. Kabhi kabhi CAB me baithe rahte hain aur gutkha ke chalte muh bhara rahta hai, tab situation aisi hoti hai ki thuk bhi nahi sakte aur kuch bol bhi nahi sakte.</li></ul></li><li><!--block-->06-Dec-2017<ul><li><!--block--><em>Mera daat kharab hota hai.</em></li><li><!--block--><em>Dusro ke majak ka patra bante hain. Dusre, Yogesh, Ashok ungli karte hain. Tab hi baat karte hain jab mera muh bhara hota hai.</em></li><li><!--block-->Ladkiyo ko smell se pareshani hoti hai.</li><li><!--block-->Paise faltu me kharch hote hain.</li></ul></li><li><!--block--><br></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.829Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.829Z"},"uniqueId":"c740c898-1831-4fbd-93aa-55ba1b98b623","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef27"},"name":"Yeh aadat humko kaise lagi (history)? College time me, jab second year me Jayant ne","heading":"Yeh aadat humko kaise lagi (history)? College time me, jab","smartContent":{"content":"<div><!--block--><strong><em>Yeh aadat humko kaise lagi (history)?<br></em></strong><br></div><ul><li><!--block-->College time me, jab second year me Jayant ne mujhey chhor ke PriyaNaveen aur Sudhir ke sath room le liya, tab hum Bipin aur Ranjeet ke sath room le liye. Bipin gutkha aur khaini khata tha. Usko khate dekh hum bhi us se maang ke khana chalu kiye. Phir thode din me wo humko bhi kharidne ke liye bolne laga. Humko bhi internally feel hota tha ki humko usko apney upar bolney ka koi mauka nahi dena chahiye. Yeh khardney aur khilane ke bich me humko bhi interest aaney laga. Padhte samay muh me kuch rakhney ki aadat hone lagi. Vaise hi logo se dosti hone lagi jo gutkha khate they, ciggerate pite they. Acche log hum se duri banane lage.</li><li><!--block-->Shuru se hum image conscious nahi they.</li><li><!--block-->Khud par overconfidence tha ki hum iss aadat ko control kar lenge.</li><li><!--block-->Dhire dhire mere bhitar bahut sare karan se frustration badne laga. Gutkha, sharab, ciggerate, khaini se humko thora relief milta tha.<ul><li><!--block-->First year me marks kam aaya. Distinction nahi aaya.</li><li><!--block-->Jayant dusre log ke sath room le liya.</li><li><!--block-->Ghar ki sthiti sahi nahi thi.</li><li><!--block-->First year me ek ladki ko propose kar diye they. Iske chalte batchmates, senior mera majak banate they.</li><li><!--block-->Roommates mann layak nahi mile they.</li><li><!--block-->Humko feel hota tha ki hum ko log aache log ki category me nahi dekhte they.</li></ul></li><li><!--block-->Iss frustration se hum apney main goal se bhatakne lage they. Aur apne frustration, dukh ko dabaney ke liye, khud ko khud ki najar me hero banane ke liye, khud ko bold feel karney ke liye hum galat chijo ka sewan karney lage.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.834Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.834Z"},"uniqueId":"1978cd0b-b34a-4433-b9eb-f8117c1872e9","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef29"},"name":"Kab kab humko lagta hai ki mujhey gutkha khana chor dena chaiye aur humko laga","heading":"Kab kab humko lagta hai ki mujhey gutkha khana chor","smartContent":{"content":"<div><!--block--><strong><em>Kab kab humko lagta hai ki mujhey gutkha khana chor dena chaiye aur humko laga ki humko ye aadat chorney ke liye strong warning mili hai?&nbsp;<br></em></strong><br></div><ul><li><!--block--><strong>Till 23-Dec-2017 - Multiple escalation related to my habit to chew gutkha</strong><ul><li><!--block-->From morning till evening, rimjhim ne humko 2 baar papa ke gutkha ko churate pakara. ek baar hum paikhana me jakar gutkha khane gaye tab bhi rimjhim ko shak ho gaya aur usney maa se kah diya. Hum total 4 rajnigandha tulsi khaye.</li><li><!--block-->Maa machli bana rahi thi, hum se puchi ki paikhana me gutkha khaney gaye they na? hum bol diye ha.<ul><li><!--block-->Hum maa ko vishwas dilaye ki ab ye aadat chutney ke hi saare lakshan dikh rahe hai. Jindgi ke saare problems solve honey ki hi conditions dikh rahi hai.</li></ul></li></ul></li><li><!--block--><strong>Multiple escalation related to my habit to chew gutkha</strong><ul><li><!--block-->From morning till evening, rimjhim ne humko 2 baar papa ke gutkha ko churate pakara. ek baar hum paikhana me jakar gutkha khane gaye tab bhi rimjhim ko shak ho gaya aur usney maa se kah diya. Hum total 4 rajnigandha tulsi khaye.</li></ul></li><li><!--block-->10-Dec-2017 - Dopahar me khane ke baad hum bahar ghumney gaye they jaha hum rajnigandha kharid kar khaye. Wapas aaney par hum jab darwaze par khade they tab hum gutkha thuk rahey they ki upar se maa dekh li hai. Maa wahi se humko ghur rahi thi. Uske adhikar se bhar kar humko dekhney aur hum par gussa karney ke karan hum baccho jaisa dar gaye hain. Maa upar chhat par bulayi hai. waha hum maa se jhuth bole hain ki hum laung kha kar thuk rahe they.&nbsp; Maa humse boli ki tu kutta hai tu sudhar nahi sakta. Hum maa se boley ki maa kutta na sudhr saka ta par kutta ke pilla sudhar saka ta.&nbsp;<strong>Hum maa se wada kiye ki hum ab gutkha na khayem.&nbsp;</strong></li><li><!--block-->Yogesh devgan ne November me mere pocket se gire Vimal ke packet ko mujhey vapas kiya. Tab bahut strong shame feel kiye they mann me. Mann kiya ki hum usi samay yeh aadat chor de.</li><li><!--block-->Humko gutkha, sharab , ciggerate , khaini ke sewan ke baad humesha laga hai ki hum galat kar rahe hain.</li><li><!--block-->Jab dusre mera majak banate hain, usi samay log mere se baat karna chahte hain, tab iss aadat ke liye afsos hota&nbsp; hai.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.839Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.839Z"},"uniqueId":"e2e82c21-cfa7-47da-ac44-c1e9bf242778","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef2b"},"name":"Kaun si chijein humko gutkha khaney ko vivash karti hai? Mere mann ka frustration. Mera","heading":"Kaun si chijein humko gutkha khaney ko vivash karti hai?","smartContent":{"content":"<div><!--block--><strong><em>Kaun si chijein humko gutkha khaney ko vivash karti hai?</em></strong></div><ul><li><!--block-->Mere mann ka frustration.</li><li><!--block-->Mera current situation me \"at a loss\" position me chale jana.<ul><li><!--block-->Jab ek sath multiple kaam dikhte hain.</li><li><!--block-->Jab papa humko datate hain.</li><li><!--block-->Jab gurgaon janey ke liye cab jaldi nahi milti hai.</li><li><!--block-->Jab apne past life ki galatiyon ko dekhte hain.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.844Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.844Z"},"uniqueId":"6a21c0f1-0ecf-41a4-b5a6-ac5e525de094","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef2d"},"name":"Kaun si chijein humko gutkha khaney ko vivash karti hai? Mere mann ka frustration. Mera","heading":"Kaun si chijein humko gutkha khaney ko vivash karti hai?","smartContent":{"content":"<div><!--block--><strong><em>Kaun si chijein humko gutkha khaney ko vivash karti hai?</em></strong></div><ul><li><!--block-->Mere mann ka frustration.</li><li><!--block-->Mera current situation me \"at a loss\" position me chale jana.<ul><li><!--block-->Jab ek sath multiple kaam dikhte hain.</li><li><!--block-->Jab papa humko datate hain.</li><li><!--block-->Jab gurgaon janey ke liye cab jaldi nahi milti hai.</li><li><!--block-->Jab apne past life ki galatiyon ko dekhte hain.</li></ul></li><li><!--block--><strong>Jab mere pass khudra nahi hota</strong><ul><li><!--block-->Gutkha ke dukan par jaldi khudra ho jata hai.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.85Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.85Z"},"uniqueId":"53161b86-9812-404a-bf18-8da1f00f9322","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef2f"},"name":"Gutkha khana chorne se humko kya fayde honge? Instant benefits Paise bachenge. Gutkha khate pakare","heading":"Gutkha khana chorne se humko kya fayde honge? Instant benefits","smartContent":{"content":"<div><!--block--><strong><em>Gutkha khana chorne se humko kya fayde honge?</em></strong></div><ul><li><!--block-->Instant benefits<ul><li><!--block-->Paise bachenge.</li><li><!--block-->Gutkha khate pakare jaaney par ghar, office aur dusri jagaho par honey wali be-izzati se bach sakenge.</li><li><!--block-->Self-confidence badhega.</li><li><!--block-->Muh se aaney wali badbu se mukti milegi.</li></ul></li><li><!--block-->Long term benefits<ul><li><!--block-->Daat aur swasthya sahi rahega.</li><li><!--block-->Logo me izzat badh sakti hai.</li><li><!--block-->Majak ke patra nahi banenge.</li><li><!--block--><strong>Unneccesary sochne ki aadat se mukti payenge.</strong></li><li><!--block-->Time ka sahi use kar sakte hain.</li><li><!--block-->Ho sakta hai ki hum time par office se nikalney lage.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":8,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.854Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.854Z"},"uniqueId":"2e7566a5-8d57-4fdc-b240-e549b0d04c09","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef31"},"name":"Gutkha chorney ke liye hum kya prayas kar rahe hain? Gutkha ki jagah laung kha","heading":"Gutkha chorney ke liye hum kya prayas kar rahe hain?","smartContent":{"content":"<div><!--block--><strong>Gutkha chorney ke liye hum kya prayas kar rahe hain?<br></strong><br></div><ul><li><!--block-->Gutkha ki jagah laung kha rahe hain.</li><li><!--block-->Office me seat par gutkha nahi kha rahe hain, from Nov 15.</li><li><!--block-->Ghar par commit kar liye hain ki gutkha khate hain. Isse maa, papa, bahan ki najro me hum gire ya uthey, par ab unki nazar mujhpe rahegi. Roz unki baatein sun ke mann gutkha khane ke prati de-motivate hoga.</li><li><!--block--><strong>Agar humko gutkha khaney ka, ciggerate piney ka ya aur koi galat kaam karney ka mann karta hai toh -- hum ye kahenge ki Hanuman ji ke mann me ye galat kaam karney ki iksha ho rahi hai. --</strong><ul><li><!--block-->Isse humko sochna padega ki hum wo kaam kare ki nahi. Agar karney ki iksha hai bhi tab bhi usko 5 min- 3 ghanta ke liye postpone karenge.</li></ul></li><li><!--block-->Khudra ko bacha ke rakhenge.<ul><li><!--block-->Kudra haasil karney ke kuch acche dukan ka pata rakhenge.</li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.859Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.859Z"},"uniqueId":"2a095cba-37d5-4ebe-b791-b2295674ee74","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1ef33"},"name":"Hum kitni der tak gutkha chore hain? Iss dauran humko kaisa feel hota hai? Between","heading":"Hum kitni der tak gutkha chore hain? Iss dauran humko","smartContent":{"content":"<div><!--block--><strong>Hum kitni der tak gutkha chore hain? Iss dauran humko kaisa feel hota hai?<br></strong><br></div><ul><li><!--block--><strong>Between 14 - 17 ghante&nbsp;</strong>&nbsp;(2nd Jan 2018, 08:00 to 2nd Jan 2018, 11:00 )<ul><li><!--block-->Iss dauran hum bahar gym karney gaye they.&nbsp;</li><li><!--block-->Bahar (Hanuman ji ka) Mann mujhey fusla raha tha ki<ul><li><!--block-->yaha kha lo, ghar pahuchney tak gandh chali jayegi.</li><li><!--block-->ghar pahuch ke nahaney se pahle kha lena, kisi ko pata nahi chalega.</li><li><!--block-->Gutkha nahi khaney se (Hanuman ji ka) &nbsp;<del>mera</del>&nbsp;mann nahi lag raha.</li></ul></li><li><!--block-->Lo after 16 hour 15 minute hanuman ji ate gutkha. but thank god aaj thora kam khaye.</li></ul></li><li><!--block--><strong>After 14 ghante</strong>&nbsp;(1st Jan 2018, 18:00 to 2nd Jan 2018, 08:00 )<ul><li><!--block-->Hum apna mann ab Hanuman ji ka mann kah diye hain. Agar hum kuch galat kar bhi dete hain, to ye (Hanuman ji ka) Mann-Iksha se hua hai.<ul><li><!--block-->Abhi 14 ghante se (Hanuman ji ka) Mann bechain hai, but bhitar hi bhitar khush bhi hai, ki&nbsp;<strong>hum&nbsp;</strong>(<strong>H</strong>an<strong>u</strong>man ji ka&nbsp;<strong>M</strong>ann)&nbsp;<strong>&nbsp;14 ghante se gutkha nahi khaye.&nbsp;</strong>Agar khate bhi hain toh&nbsp;<strong>hum&nbsp;</strong>(<strong>H</strong>an<strong>u</strong>man ji ka&nbsp;<strong>M</strong>ann) se.</li></ul></li><li><!--block-->(Hanuman ji ka) Mann me tarah tarah ke tension wale khyal aate hain.</li><li><!--block-->(Hanuman ji ka) Mann darna chahta hai.</li><li><!--block-->Raat me (Hanuman ji ka) Mann soney nahi de raha tha.</li><li><!--block-->(Hanuman ji ka) Mann subah me dhamki bhi de raha tha.</li><li><!--block-->(Hanuman ji ka) Mann humko tarah tarah se dara raha hai, dhamki de raha hai ki pocket me hi toh rakha hai, khata kyu nahi.</li><li><!--block-->(Hanuman ji ka) Mann dara raha hai ki&nbsp;</li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3a9872c4-e567-4207-bc51-37d816fdf02c","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.864Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.864Z"},"uniqueId":"b2100314-0b00-4efb-bc94-b18f628104b3","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1efa8"},"name":"Daily Expense :- Dec 17 06-Dec - 110(Cab up down)+200(Rajnigandha) 05-Dec - 110(Cab up down)+150(Rajnigandha)","heading":"Daily Expense :- Dec 17 06-Dec - 110(Cab up down)+200(Rajnigandha)","smartContent":{"content":"<div><!--block--><strong>Daily Expense :-&nbsp;<br><br>Dec 17<br>06-Dec<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 110(Cab up down)+200(Rajnigandha)<br>05-Dec&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- 110(Cab up down)+150(Rajnigandha) + 150 (Paneer burger)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- 30000 salary for Nov 17 DD<br>04-Dec&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- 110(Cab up down)+ 100 (Karan Janjua Farewell)+ 150 (Rajnigandha)<br><br><br><br><br><br><br><br><br><br><br></strong><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4f4defb-0304-4341-87cf-b0d9ff070996","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.882Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.882Z"},"uniqueId":"95c4010a-82fb-4fb3-b283-4a06132ce1d2","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1efaa"},"name":"Weekly Expense :-","heading":"Weekly Expense :-","smartContent":{"content":"<div><!--block--><strong>Weekly Expense :-&nbsp;</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4f4defb-0304-4341-87cf-b0d9ff070996","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.887Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.887Z"},"uniqueId":"fbd33861-82a9-49a9-8b6a-9a7749dbcf43","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1efac"},"name":"Monthly Expense :-","heading":"Monthly Expense :-","smartContent":{"content":"<div><!--block--><strong>Monthly Expense :-&nbsp;</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4f4defb-0304-4341-87cf-b0d9ff070996","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.891Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.891Z"},"uniqueId":"dffab4b2-3c37-47d5-931d-bc4f178d40e6","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1efae"},"name":"Yearly Expense :-","heading":"Yearly Expense :-","smartContent":{"content":"<div><!--block--><strong>Yearly Expense :-&nbsp;</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4f4defb-0304-4341-87cf-b0d9ff070996","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.896Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.896Z"},"uniqueId":"3530e297-85cf-4c50-aa7b-9eb1474ba409","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1efb0"},"name":"Purchase/Expense plan:- Dec 17 24-Dec-2017 Full slim trousure, for gym. One low costly shoe, for","heading":"Purchase/Expense plan:- Dec 17 24-Dec-2017 Full slim trousure, for gym.","smartContent":{"content":"<div><!--block--><strong>Purchase/Expense plan:-<br><br>Dec 17</strong></div><ul><li><!--block-->24-Dec-2017&nbsp;<ul><li><!--block-->Full slim trousure, for gym.</li><li><!--block-->One low costly shoe, for regular office use.</li></ul></li><li><!--block--><del>Headphone&nbsp;</del>- Done purchased from Sec 55 market worth 100/- on 22nd Dec</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4f4defb-0304-4341-87cf-b0d9ff070996","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.9Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.9Z"},"uniqueId":"1aade5ca-6964-478f-9ad9-7f128509065d","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f025"},"name":"Positive - Humko khud par 45% vishwas h. Negative - Hum baat karney me hichakte","heading":"Positive - Humko khud par 45% vishwas h. Negative -","smartContent":{"content":"<div><!--block--><strong>Positive<br>-&nbsp;</strong>Humko khud par 45% vishwas h.<br><br><br><br><strong>Negative<br>- Hum baat karney me hichakte hain.<br>- Koi decision hurry burry me le lete hain.<br>- Dusre ki baat samajhne me problem hoti hai.</strong></div><ul><li><!--block-->lagta hai ki hum usko apni baat nahi samjha payenge ya uski baat mujhe samajh nahi aayegi.-- ye illusion hai. isko sudharna hai.</li></ul><div><!--block--><strong>- Choti se baat ko soch soch ke bada bana lete hain.<br>- Apney dare huye aur maasomiyat wale face ko dikha ke apni galati chupana chahte hain.<br>- Hum clear no nahi bol pate hain. Jab mere scope se bahar hota hai tab gaali bhi khate hain aur naa bhi bolte hain.<br></strong><br>- Papa only concentrate that i am earning less and i have no secure future.<br>- In office I might not perform well and I might be kicked-off from here.<br>- People in office are not pleased to see me again.<br>- Chanpatiya wale hum log ko pareshan karne ke liye jarur kuch karenge.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.932Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.932Z"},"uniqueId":"9b00d4de-8f83-48d0-97cc-8bdd9321f6ea","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f027"},"name":"31-Dec-2017 - Papa went to meet ShriLalJi. - I talked with maa for all previous","heading":"31-Dec-2017 - Papa went to meet ShriLalJi. - I talked","smartContent":{"content":"<div><!--block-->31-Dec-2017<br>- Papa went to meet ShriLalJi.<br>- I talked with maa for all previous life events and said that all will be good next year.<br><br>26-Dec-2017 to 30-Dec-2017<br>- Iss duration me meri mainly office me following logo se baat huyi</div><ul><li><!--block-->Fayaz<ul><li><!--block-->Manager ko aisa hona chahiye ki puche \"<strong>Issue kya hai?</strong>\"</li></ul></li><li><!--block-->Satish<ul><li><!--block-->Yaha support me limited kaam hai. Jaan bujh ke solution nahi kiya jata, nahi to revenue kaha se generate hoga.</li></ul></li><li><!--block-->Dhanesh<ul><li><!--block-->He was asking as Yogesh had not alerted us to renew the ID of vendors on time.</li></ul></li><li><!--block-->Sanjay Sharma<ul><li><!--block-->I explained my problem of not being properly informed</li><li><!--block-->Fayaz is not answering and postponing my queries to uncertain future.</li><li><!--block-->He responded to be some rude, take control. Make them clear that they can not bypass you.</li></ul></li><li><!--block-->Yogesh Devgan<ul><li><!--block-->Tried to inform him for my difficulties but he postponed it to next year.</li></ul></li><li><!--block-->Papa Narendra<ul><li><!--block-->Discussed for relations of dada and his brothers. Papa tried to explain he is not bad. World is more bad.</li><li><!--block-->Duniya me koi kisi ko accha ya khush nahi dekhna chahta.</li></ul></li><li><!--block-->Maa<ul><li><!--block-->My nana was four brothers and four sisters. out of which 2 brothers and three sisters are step.</li><li><!--block-->Her dada ji name was Shri Mungalal sah</li></ul></li><li><!--block-->Amartya<ul><li><!--block-->HRIS team par hawi rahiye.</li><li><!--block-->Duniya me sa paisa hai tab hi pujta hai</li></ul></li><li><!--block-->Dinesh<ul><li><!--block-->Try to do freelancing.</li></ul></li><li><!--block-->Lala in gym<ul><li><!--block-->He lost his younger brother. He advised me some daily workout for increase stamina.</li><li><!--block-->Do not come in gym after chew rajnigandha.</li></ul></li></ul><div><!--block-->---------------------------------------------------------------------<br>25-Dec-2017</div><ul><li><!--block-->- Mere me lack of communication hai. Hum sahi se apni baat represent nahi hai kar pate.</li><li><!--block-->Hum ko darr lag raha hai ki humara job chala jayega.</li><li><!--block-->Yogesh sir ko Fayaz mere baare me galat information de raha hai. Wo waha bol raha hoga ki hum usko support nahi kar rahe.&nbsp;</li><li><!--block-->Humare me lack of confidence hai, hum Somen sir ko update nahi de rahe last 3 week se. kyuki humko yaad hi nahi rahta ki kal hum kya kaam kiye they. but hum roz bahut kaam kar rahe hain. Jisko help ki jarurat hoti hai, hum bina der kiye uski help kar dete hain. Dusro ki tarah hum late nahi karte.&nbsp;<ul><li><!--block-->Isme mera apna kaam, jiski shayad mere se expectation hai , wo pending rah jata hai. Iske liye mujhey Yogesh sir baar baar bol dete hain hai ki \"Premendra jo expectation humko tumse hai, wo fayaz ya dusre logo se nahi hai\".</li></ul></li><li><!--block-->Aaj humko apni shift me thodi der ho gayi aur hum iske liye apni shift se pahle wale bande \"Jogender\" ko bol diye. but wo mere pe hi chadne laga ki \"sir aap kaha ho, kab tak aaoge?\". Lastly hum thora gussa hoikar usko bol diye ki thori der wait karo.&nbsp;<ul><li><!--block-->Agar \"Jogender\" ney kisi ko bol diya ki hum usko daate hain, toh mere liye problem ho jayegi.</li></ul></li><li><!--block-->Hum baar baar Amit singh ke aane ke baad , \"Jogender\" ka shikayat kiye. iske liye bhi humko dar lag raha hai ki Amit mujhey hi galat na samjhey. Wo kisi ko bol na de.</li><li><!--block--><strong>Yogesh sir</strong>&nbsp;se, dopahar me meri baat huyi, aur wo mujhey downtime , severity se related kuch bata rahe they. But meri samajh me nahi aa raha tha aur main kafi dara hua tha.&nbsp;<ul><li><!--block-->Baad me wo bolne lage ki premendra tu wo GainManager wala issue dekh le.&nbsp;<ul><li><!--block-->Wo baar baar force kar rahe they ki , tujhey usme kuch mila.&nbsp;<strong>Prem tere se jo expectation hai, wo tu nahi kar pa raha</strong>.</li></ul></li></ul></li></ul><div><!--block--><br><br>------------------------------------------------<br><strong>24-Dec-2017</strong></div><ul><li><!--block--><strong>- 12 :00 PM -&gt;&gt; Hum office me kal Fayaz ke sath GM ke application level jo ko nahi chala paaye. Iska mere aage ke job-life par accha effect nahi hoga. Agar, Fayaz ne meri shikayat ki ya apne ko defend karney ke liye mujhe culprit bataya ki hum sahi se usko support nahi kiye; ya kahi Amit Dhal ya Yogesh Devgan Ya Somen Bose ney mujhe in-effecient recourse samjh toh mera job khatre me aa jayega.</strong></li><li><!--block-->1:15 PM --&gt;&gt;&nbsp;<strong>Hum apni life me 10-15 % confidence badha sakte hain Agar</strong><ul><li><!--block--><strong>Sab se acche se communicate karne lage. At least ghar me, office me, neghbours me, unknown logo ke sath better communicate kar pau.</strong></li><li><!--block--><strong>hum gutkha khana control kar le.</strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.941Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.941Z"},"uniqueId":"bbc44fd8-4af2-4ef7-bacf-d8013cea8f4e","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f029"},"name":"05-Mar-2018 Hum gym nahi gaye. Maa ko samjhaye ki papa ko samjhao ki koi bhi","heading":"05-Mar-2018 Hum gym nahi gaye. Maa ko samjhaye ki papa","smartContent":{"content":"<div><!--block--><br></div><div><!--block--><br><strong>05-Mar-2018</strong></div><ul><li><!--block-->Hum gym nahi gaye.&nbsp;</li><li><!--block-->Maa ko samjhaye ki papa ko samjhao ki koi bhi kaam karney ka jab man kare toh ek ghanta minimum delay karo. jaldbaazi me koi kaam mat karo.</li><li><!--block-->Man me khayal aaya ki papa ke prati meri jimmedari hai ki hum unko dhadhash bandhaye.</li><li><!--block-->Narendra ne Sadhu chacha ko call kiya. wo bole ki abhi wo Payal ko metro chorney ja rahe hain 8:30 AM par ghar aake call karenge, jab ghar par aayenge, tab ghar pe aa jaiha. ya shaam ko khud hi chacha yaha humare ghar par aa jayenge.</li></ul><div><!--block--><strong>04-Mar-2018</strong></div><ul><li><!--block-->Home<ul><li><!--block-->7:00 PM<ul><li><!--block-->Iss gutkha ne mera dimag kafi kharab kar diya hai.</li><li><!--block-->Papa ka din bhar ka hukhna humse bardasht nahi hota.</li><li><!--block-->Shaam ko papa humko \"Jinda Lash\" bole, hum bhadak gaye. Papa se jhagra kiye. Papa ko achanak bata diye ki hum 11-Feb-2018 ko Dhruv chacha se baat kiye they. Papa heart attack ka natak karney lage. Kahne lage dushman se baat kar liye. Usney tumhari maa ke **** dabaye they.</li><li><!--block-->Narendra Rimjhim ne mujhey mara gali diya. ghar se nikal diya.</li><li><!--block-->Maa ki tabiyat kharab honey lagi, wo daur ke humko pakad layi.</li><li><!--block-->Hum kyu jiye?</li></ul></li><li><!--block-->4:45 PM<ul><li><!--block-->Subhah se mann ashant hai.</li><li><!--block-->Papa ke muh se sirf negative baatein hi sunai de rahi hai.</li><li><!--block-->Gussa ho ke aaj fir ghar se chale janey, mar janey ke liye kaha.</li><li><!--block-->Hum besharm hain vapas aa gaye.</li><li><!--block-->sab se gussa hain. 3 baar dahi bara kha liye.</li><li><!--block-->Mujhey samajh aa gaya hai ki mere man me mata pita bhai bahan ke liye koi feeling nahi hai. hum sirf apne dukh se dukhi hain. Hum marna chahte hain.</li><li><!--block-->Roz gutkha kha ke jaan dena chahte hain.</li><li><!--block-->Aage andhera dikhta hai. koi rasta nahi hai. professionally bhi hum successful nahi hain.</li><li><!--block-->Ghar pe bhi hum problem hi hain.</li></ul></li><li><!--block--><strong>Kal ke waqueel ke pass bolney ke incident ke liye Maa, Papa, Bhai, Bahan se jhagra</strong><ul><li><!--block-->Subah me maa se bole ki \"Narendra se kal hum jhagra kiye hain ki tu kyu bola waqueel se kyu baat kiya. humko kyu nahi baat karne diye.\"</li><li><!--block-->Narendra bola ki sab jagah tum hi toh baat kiye they. jab tum chhupp ho gaye tab hi hum bole.&nbsp;</li><li><!--block-->hum jhagra kiye ki \"tu bola hi kyu\", jab ghar se baat hua tha ki tum nahi bolega (ye baat maa hum se boli thi.) tab tum bola hi kyu.</li><li><!--block-->Narendra ke support me papa bole ki koi apna muh gaad band karke baat nahi karta.&nbsp;</li><li><!--block-->hum jawab diye ki jab jaroorat padi tab hum bhi dekh lem ki tu kitna muh gaad ke tezz bara. kitna hummar support karba.</li><li><!--block-->narendra bola ki tu kis support ke baat kara tare. hum sab bahar se, waqueel ke samne tuhar support kar saka tani, but court me tumko hi apna baat rakhna hoga.</li><li><!--block-->phir hum papa se jhagra karney lage ki tu kyu bolala ki hum u ladki ke le ke aawe ke chaha tani. aisa bola tara ta ka hum samjhi tu humra par vishwas na kare la?</li><li><!--block-->papa gali delan aur hum sab ke life ke sara problem la humre ke jimmedar batailan</li><li><!--block-->hum papa ko unke rough boli la gussa kaini. phir unko bolni ki tuhra sahe ke loor naikhe, dussar ke sun ke tapak se jawab de dewe la. appan sara bata dewe la but dussar ke samajh na pawe la. tu kabhi compare kariha appan umar ke dussar log se, tu \"licchar\" bara.</li><li><!--block-->Hum papa ko bolni ki tuhra, narendra ke aadmi pahchaney ke loor naikhe. tu dunno se koi thora mitha batiya li ta tu usse phas jala. Rajeshwa kabhi tuhra bahut acha lagat rahe, aaj wahi rajeshwa tihar baas kar dele ba. log ke sune ke aadat hi naikhe tuhra. tatkal hi statement jaari karba.Tu appan papa ke bada beta bara nu, par tu meth na ban paila isiliye tu hum sab par appan meth giri dikhawe la. Hum papa ko ye bhi bolni ki tu \"<strong>Bolta tota</strong>\" bara. Hum tuhra par bahut vishwas kaile rahni, par tu sirf bole la, baaki kisi kaam ke naikha.&nbsp;</li><li><!--block-->Papa se ye bhi shikayat kaini ki tu log ke subah ke bhatarkatha se bhi humra se wo ladki jhagra karat rahe.</li><li><!--block-->Papa ilzam lagailan ki \"Tuhro me galati ba, u ladki me ta galati badhle ba.\"</li><li><!--block-->papa gussa ho gailan aur humko \"phir se\" ghar se jaye ke bol delan.</li><li><!--block-->maa rimjhim roke ke koshish kailas log. narendra last me bol delas ki hum waqueel ke samne bhi kuch na bolem. phir bhi hum nikle ke mood bana leni.</li><li><!--block-->ll</li><li><!--block-->hum nikle ke samay papa ko bol deni ki \"<strong>Papa tu hamesha aagi moote ke koshish kaile bara, par tu kabhi bhi na moot paiba.</strong>\" .&nbsp;</li><li><!--block-->ll</li><li><!--block-->room se nikal ke hum jaake 2 rajnigandha kharidni. phir hum ballabhgarh jaake 2 kilo seb kharid ke vapas jaye la sochni. but jis tempu me baithni wo railway station ki taraf pahle jat rahe. hum bhi station utar gaini. vaha kuch der ruk ke paidal ghar ki taraf laute lagni. sochni ki hum se galati bhel ba hum ghar jaake u log ke sunem isi me hummar prayaschit ba.</li><li><!--block-->ll</li><li><!--block-->laut ke hum du go shikhar kharidni.</li><li><!--block-->ll</li><li><!--block-->ghar aa ke pata lagal ki papa kisi aur se baat kaile rahlan. yahi pe teeno gora ke shaadi ke baat kara taran.</li><li><!--block-->ll</li><li><!--block-->khana kha ke hum yahi lekh likha tani.</li><li><!--block-->ll</li><li><!--block-->rimjim aail rahe daat ke bhaga deni. maa ail rahe prasadi lewe se mana kar deni. ye log hummar baat sirf hum gussa honi tab hi maane la.</li></ul></li><li><!--block--><strong>Mere dukh ka karan kya hai?</strong><ul><li><!--block-->jo hai us se santushti nahi hai. jo nahi uske liye dukhi hain.</li><li><!--block-->Mere pass bhai hai jo mere sath waqueel ke pass gaya. gawahi dene ke liye ready hai, par wo mujhey bolne nahi deta, mere sath jaane par mere chupp hone par bolne lagta hai,. kyu bola?</li><li><!--block-->papa hain, jo sab tarah se meri help kiye , but wo gaali kyu dete hai, mujhey bolne kyu nahi dete. urgency mode me kyu rahte hain? ek baar me meri baat kyu nahi samjhte</li><li><!--block-->Maa hai, sab maanti hai, sab sunti hai. but papa ko nahi batati, papa ke samne palat jati hai.</li><li><!--block-->bahan hai, sab sunti hai narendra ka, usko gupt rakhti hai, but mere se baat nahi karna chahti.</li></ul></li></ul></li></ul><div><!--block--><br>-----------------------------------------------<br>27-Feb-2018 to 03-Mar-2018</div><ul><li><!--block-->01-Mar-2018<ul><li><!--block-->Sham me ghar aaney par pata chala ki ladke ne narendra ko message ko mana kar diya ki mat aiye. Raat me koi bhi sahi se anhi soya.</li></ul></li><li><!--block-->02-Mar-2018<ul><li><!--block-->Holi tha. normal bita.</li><li><!--block-->Sab dukhi they.</li><li><!--block-->Papa maa ke sath pandit ji se mile. unhoney Satyadev Sah, mujesar ke baare me bataya.</li></ul></li><li><!--block-->03-Mar-2018<ul><li><!--block-->Shaam me Vakeel se milne gaye.</li><li><!--block-->Vakeel se kahe ki jaldi iss se mukt karaiye. Vakeel ne kaha ki jo chal raha hai chalney do. agar dikkat hogi toh judge se bhi setting karenge.</li><li><!--block-->Maa ke mana karne ke baad bhi narendra bich me bola. hum gussa huye aur usko warning diya ki agar chup nahi rah sakte toh mere sath mat aao.</li></ul></li></ul><div><!--block-->----------------------------------<br>26-Feb-2018<br>\tTum resign kyu kiye they ?<br>\t\tHarish Bareja<br>\t\t\tmy response - tension, timesheet,&nbsp;<br>\t\tYogesh Devgan<br>\t\t\tmy response - tension, juniors, escalations, timesheet, my un-responsiveness, fear of making any wrong<br>\t\tSheikh Ibbrahim<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tSomen Bose<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tSanjay<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tNaresh<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tFayaz<br>\t\t\tmy response - tension<br>\t\tYashwant<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tAmit Tyagi<br>\t\t\tmy response - tension<br>\t\tFamily<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tNakul<br>\t\t\tmy response - tension, juniors, escalations, timesheet<br>\t\tUday<br>my response - tension, juniors, escalations, timesheet<br><br>\t\t<br><br>My tasks<br><br>\tunique string id<br><br>\tparent child relation for topics and questions<br><br>\tvesion control for topics and questions<br><br>\t--- target 31 march 2018<br><br>\t<br><br>----------------------------------<br><strong>22-Feb-2018 to 24-Feb-2018</strong></div><ul><li><!--block-->I resigned from cnx. on 23rd all seniors barked and rejected my resignation.</li></ul><div><!--block--><br><strong>13-Feb-2018</strong></div><ul><li><!--block-->Home<ul><li><!--block-->Shri Mata Vaishno Devi Darbar<ul><li><!--block-->Jiv aur Bhagwan ke bich me \"Ahankar\" ek matra badha hai. Ahankar kisi bhi chij ka ho jata hai jiv ko. Apne gyan ka, dhan ka, rup ka, bal ka, sage-sambandhiyo ka, - parantu jiv bhul jata hai ki usne ye saari chije bhagwan ki kripa se hi paayi hai aur ek din ye sab us se chut jayega aur use fir bhagwan ki sharan me hi jana hai.</li><li><!--block-->Jiv aur Bhagwan ke bich me milane wali kadi ka naam \"Guru\" hai. Guru hi Jiv ko bhagwan se milate hain.</li><li><!--block-->Raja parikshit ko unke guru ne sirf sadhe 3 gadi me moksha prapt kara diya.</li><li><!--block-->Jiv ko apne shabdo pe dhyan dena chahiye. Jiv bolta hai ki mere maata pita mere sath rahte hain. isme abhimaan ka bodh hota hai. Jiv ko bolna chahiye ki \"Mera saubhagya hai ki mujhey mere mata pita ke sath rahne ka subhagya prapt hua hai \"</li></ul></li></ul></li><li><!--block-->Office<ul><li><!--block-->Din me Gainmanager DC movement, Resolvejiffy tomcat switch, DC Movement discussion with Somen bose aur UNI Code lookup for one table for comments me kaam kiya. Ek password ke liye GainManager ka Rajesh, Amartya, Sandeep se baat kiye.</li><li><!--block-->Raat me SugarCRM ke class ke pahle hum so gaye.</li><li><!--block-->3 baje Fayaz se baat huyi, Usko 45 server par 443 port se application up karne me help kiye. but usne jab mail likha toh mera naam nahi likha.</li></ul></li><li><!--block-->Gym<ul><li><!--block-->Gym me 3000 rupiye Feb 08 - May 08, 2018 tak ka bill jama kara diye.</li><li><!--block-->Ashok manually file entry karte hain, unko computer aur excel use karney ka sujhaw diya. Ashok computer layenge aur hum unse unki help karne ki baat kahe they.</li></ul></li><li><!--block-->Ass Pass</li></ul><div><!--block--><br><br><strong>12-Feb-2018</strong></div><ul><li><!--block-->Home<ul><li><!--block-->Kal subah man kafi parehan tha.</li><li><!--block-->Papa ne Vaishno devi aarti ke dauran kaafi gussa kiya.</li><li><!--block-->Hum kal Vaishno devi ki puri aarti sunne ka nishchay kiye par mera man ye soch raha tha ki aarti khatam hone ke baad hi humko gutkha khana hai.<ul><li><!--block-->Vaishno devi pravachan me&nbsp;<ul><li><!--block-->Manushy ka dukh ka karan uski apni soch hai ki ye mera hai. Vastav me sansar me jo kuch bhi humare pass hai vo humne paya hai. Ye ek din humse vapas le liya jayega. Chahe ye hamara sukh ho, dukh ho, gyan ho, dhan ho, humare sage sambandhi ho; sab humney yahi paya hai aur yahi vapas kar dena hai. Ye sansarik chijo pe mamatwa hi hamare dukh ka karan hai.</li></ul></li></ul></li><li><!--block-->Fir hum gym ke liye nikle par bahar ghumney lage. Man bechain tha. Ghar se hanuman mandir, vaha se Sector 55-56 more, vaha se labor chaowk aur fir ghar vapas aaye. Is dauran man me vichar aaya ki \"Hum pahle kisi baa par shok dukh akr lete hain. Fir bahut sochney par ki hum aisa kyu feel kar rahe hain, kaafi time waste karne ke baad, jab man me khayal aata hai ki 'Jo hua aacha hua, jo ho raha hai acha ho raha hai, jo hoga acha hoga' tab man shant ho jata hai.\" tab hum man shant kar lete hain. Iss dauran jo galati kiye uske liye man fir se shok me dubney lagta hai.<ul><li><!--block-->Ghumney ke dauran khaya aaya ki hum unique strin for all topic, group, view, question , answer ke liye \"topic/group/view/question/answer\"+id+System.getTmestamp combination try kar sakte hai. Ye field mandatory nahi hoga from DB side. But puraney entry ke liye ek generate unique string ka option de denge. unique string ke sath wale url ko hi um apney reference me use karenge. isse integer ID ki dependency khatam ho jayegi.</li><li><!--block-->Daily update ka bhi ek format template bana lenge. Isi ko hum use karenge.</li></ul></li></ul></li><li><!--block-->Office<ul><li><!--block-->Aarti ke baad pareshan man se hum Yogesh Devgan ko call kiye aur agle 3 din ghar se kaam karne ki permission mange. Yogesh Devgan ne permission de di aur Somen Bose ko bhi inform karney ko kaha.</li><li><!--block-->Din me office ka kaam kiye. Shaam ko 7 PM se aaram kiye fir 10:30 se classroom attend kiye. 2:30 AM tak class chala<ul><li><!--block-->ResolveJiffy tomcat migration ka plan meeting</li><li><!--block-->GainManager ka DC movement ke liye discussion</li><li><!--block-->GainManager AutoSaveMonthly job failure RCA discussion with Development team.</li><li><!--block-->Raat me GainManager application slowness BRC call attend kiye.</li></ul></li></ul></li><li><!--block-->Ass Pass<ul><li><!--block-->Dada ji bataye ki 9 Feb ko divorce case me hearing ke liye Rajesh Rakesh aur ek stranger aaye they. Mere vakeel ne bataya ki wo log compromise karna chahte hai. Jake ladki ko vapas le aane ke liye bol rahe hain. Dadaji ne bhi compromise karney ke liye mana kiya.</li></ul></li></ul><div><!--block--><br><br><strong>11-Feb-2018</strong></div><ul><li><!--block-->Sabere me papa se baat huyi.<ul><li><!--block-->Papa ne kaha ki wo mujhey kabhi maaf nahi kar sakte</li><li><!--block-->7:45 me hum papa ko apna problem batana chahe ki humse shayad ye job nahi chalney wala. Hum haar manana chahte hain taaki sahi rasta dhundh sakein.<ul><li><!--block-->Maa bich me hi bol uthi ki kyu nahi hoga tumse?</li><li><!--block-->Papa bhi gussa ho gaye aur bol diye ki tu ja ke train me kata jo.&nbsp;<ul><li><!--block-->Hum gussey me papa ko pranam karke train pakdne nikal gaye.<ul><li><!--block--><strong>Dhruv chacha se baat kiye</strong><ul><li><!--block-->mere bolney par ki dharmesh humare ghar nahi aata, wo bole ki dharmesh ko tumhare papa se milney par rok hai. Bipin ji apni marzi ke maalik hain, jo chahe karein, par dharmesh par rok hai.</li><li><!--block-->Wo papa ko paisa kamaney ke baad ghamandi bol rahe they</li><li><!--block-->hum bole ki aisa nahi hai. papa ghamandi nahi hain, papa ne kisi ka ek rupiya nahi khaya hai, balki logo nay unka paisa khaya hai, unko bura bhala kaha hai. chacha ye sun ke topic badalney lage.<ul><li><!--block--><strong>Minute</strong><ul><li><!--block-->Bhola ji hum sab ke aur Motihari chor delan aur Bhagwan Bhola ji ke chor delan.</li><li><!--block-->Chacha hum sab bahut kasht me bani, ashirwad hi diha ki kasht khatam ho.</li><li><!--block-->Chacha - Bhagwan ke naam la, sab thik hoi. sab ke jindgi me kasht ba.</li><li><!--block-->chacha - 3 september 2017 ko dukan ke chhat gir gain rahe, mare se bachal rahni. Chaat kanjoosi se na, balki baadh ail rahe usse chhat kamjor ho gail rahe.</li><li><!--block-->Chacha - Facebook pe papa ke friend request accept na kaini. Hum bataini ki papa thore hi chalawelan FB, wo babi chalawe le.</li></ul></li></ul></li></ul></li><li><!--block--><strong>Naval chacha ko call kiye</strong><ul><li><!--block-->Wo netork nahi honey ka, premendra ya bhola ji ko nahi pahchananey ka natak kar ke call kaat diye.</li></ul></li><li><!--block-->Railway station se bus stand, Ballabhgarh chale gaye.<ul><li><!--block-->Bus se mathura ke liye nikal gaye.<ul><li><!--block-->Bus me ek budhe aadmi ne mere se baat kiya.<ul><li><!--block-->Wo kah rahe they ki pahle wo kam salary me bhi pet kaat ke saal ke last me kuch paisa bacha lete they aur 10 tola sona kharid lete they. Aajkal log paisa jyada kamate hain , par uska durupayog karte hain. hum jawab diye ki aajkal log tension me jyada rahte hain. budhe aadme ne kaha ki aajkal log apna karm thik se nahi karte isiliye dukhi rahte hain. Wo roz 2 bigha khet jot ke apni duty jaate they.</li></ul></li><li><!--block-->Mathura me ghumey. Krishan jamam sthal gaye. din me total 1000 rupiye kharcha kiye.<ul><li><!--block-->Vaha \"Sonkh More\" ke pass \"Krishan Janam Sthal\" par gaye. Gufa me ghume, yugal chawi ka darhsan kiye, electronic yantron wali jhanki dekhi.</li><li><!--block-->5:00 baje bus pakar ke wapas aa gaye.</li></ul></li><li><!--block-->Bus bhada 130 rupiya *2 + 150 prasad + 500 khana + 200 local mathura travel.</li></ul></li><li><!--block-->Shaam ko 7:45 me ghar aa gaye</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><div><!--block--><strong>10-Feb-2018</strong></div><ul><li><!--block-->Office<ul><li><!--block--><strong>QAA ka ek issue dekhe.</strong><ul><li><!--block-->Kapil kharape ko ticket par bata diye ki 0 quality aur 5 operation audit huye they.</li></ul></li><li><!--block--><strong>Shaam ko 7:30 PM se 10:30 PM ResolveJiffy WAS to tomcat migration activity me kaa kiye.</strong><ul><li><!--block-->Support aur Implementation ka call join kiye.</li><li><!--block-->Server team, network team, development team, testing team, implementation team aur support team ne task perform kiya.</li><li><!--block-->Minute<ul><li><!--block-->Activity rolled back, due to technical reasons. Will reschedule activity.</li></ul></li></ul></li></ul></li><li><!--block-->Home<ul><li><!--block-->Man me nishay aaya ki ek expectation \"Office\" aur ek \"Family\" banana hai.&nbsp;</li><li><!--block-->Office expecatation<ul><li><!--block-->Senior ko issue ki report do. Jo problem aa rahi hai usko batao aur pucho ki aage kya karna hai.</li><li><!--block-->Couleges se issue discuss karo, batao kya tum help kar sakte ho aur kya tumhari expectation hai.</li><li><!--block-->Juniors ko guide karo. unki problem suno aur unko solution do.</li><li><!--block-->Business/Clients se issue ka detail pucho aur usko solve karney ka try karo. Jo obstacles/additional information chahiye wo maango.</li></ul></li><li><!--block-->Home expectation<ul><li><!--block--><strong>Hamesha common thinking banao</strong>&nbsp;ki \"Jo hua acche ke liye hua, jo ho raha hai achhe ke liye ho raha hai, jo hoga acche ke liye hoga.\" Ye khud nahi bolna hai balki dusro ke muh se aana chahiye.</li></ul></li></ul></li></ul><div><!--block--><br><br><strong>29-Jan-2018</strong></div><ul><li><!--block-->Sanjay , Sumit ko bol diya ki mujhse pressure nahi liya ja raha</li><li><!--block-->3 din me 102 baar hanuman chalisa padhe.</li></ul><div><!--block--><br><strong>20-Dec-2018 to 26-Dec-2018</strong></div><ul><li><!--block-->Hum night shift me they.</li><li><!--block-->Ghar par sab worried hain ki kaise karega.</li><li><!--block-->26-Jan ko hum sabse jyada pareshan they. Papa maa se apna problem bole.<ul><li><!--block-->Papa abhi tak hamari life ki saari problem ke liye mujhey hi doshi samajhta hai.<ul><li><!--block-->Tum hum sab ko bich amjhdhar me fasa diye.</li></ul></li><li><!--block-->Par baad me papa bole ki agar tumse job nahi chal raha to tum pyaar se waha na bol do aur ghar par hi baith jao. Nahi toh agar chala sakte ho toh shanti se chala lo.</li></ul></li><li><!--block-->My learning from this week<ul><li><!--block-->Ye duniya jaisi hai waisi hi rahegi. isko badalna ke koi jarurat nahi hai.</li></ul></li><li><!--block--><strong>Escalations</strong><ul><li><!--block-->Ashok Jhasya ne Zetta ke ek user ke login issue ke liye Nitesh ko mail likh diya. Yogesh ne mujhe agle din samjhaya ki kya&nbsp; Nitesh ko mail likhna chahiye tha? Humko call kyu nahi kiya? Tumko chijein yaad kyu nahi rahti?</li></ul></li></ul><div><!--block-->21-Jan-2018</div><ul><li><!--block-->Office&nbsp;<ul><li><!--block-->Subah me 8:30 me office se nikle aur 10:00 baje ghar pahuche.</li></ul></li><li><!--block-->Home<ul><li><!--block-->Pados me ek aunti/dadi expire kar gayi thi.</li><li><!--block-->Ghar aakar unke ghar par mile&nbsp;</li><li><!--block-->Papa Narendra se baat kiye they aur wo apne dosto ke liye achar maang liya.<ul><li><!--block-->Papa dopahar me jakar bazar se achar ka saman le aaye.</li><li><!--block-->Maa aur rimjhim achar banane me lage hain.</li></ul></li><li><!--block-->2:30 me meri nind khul gayi.<ul><li><!--block-->Hum maa se jakar bole ki papa ko akele mat chora karo.</li><li><!--block-->Papa bhi thori der me hum log ke pass aa gaye.</li><li><!--block--><strong>Aaj papa bahut dino baad mere se itna sat ke baithe. Pahle wo maa ki god me sar rakh ke soye they, fir wo thori der ke liye mere jangh par bhi sar rakh ke soye.</strong><ul><li><!--block-->Papa ne pyaar se shikhayat ki ke Premendra apni jindgi me ulajh gaya hai.<ul><li><!--block-->Hum papa se kahe ki&nbsp;<strong>thora time dijiye hum aapko apni life me change lakar (unke hisab ka job kar ke batayenge)</strong></li></ul></li></ul></li></ul></li></ul></li></ul><div><!--block-->----------------------------------<br>20-Jan-2018</div><ul><li><!--block-->Home<ul><li><!--block-->Papa se kal Sheikh sir se jo baat hui thi wo bataye.<ul><li><!--block-->Papa bole ki wo pyaar se tum par kaam ka bojh laad rahe hain.</li><li><!--block-->Sikho, aur jo bole wo karo par jawab dene ke alawa unse cross question bhi pucho. unko kharab nahi lagega.</li></ul></li></ul></li><li><!--block-->Neighbour<ul><li><!--block-->Dadaji se sabere me baat hui.</li><li><!--block-->unhone kaha ki dusro se kaam karwane ke liye suggestive hone ke sath sath thora sakht bhi hona padta hai.<ul><li><!--block--><strong>Minute</strong><ul><li><!--block-->Dadaji ne kaha ki yaha delhi/haryana/panjab ke log gusse me apni patni ki baat baat par hatya kar dalte hain,&nbsp;<ul><li><!--block--><strong>Iss baat par hum bol pare ki dadaji humko bhi uss din jab wo larki fasi laga rahi thi toh kaafi gussa aya tha, par apne maa papa ke iss ghar ke alawa humare pass aur kuch nahi hai. Isiliye hum wo baat sah gaye.</strong></li></ul></li></ul></li></ul></li></ul></li><li><!--block-->Office<ul><li><!--block-->Shaam ko office pahuche.</li><li><!--block-->Metro more se jo gaadi pakre uska tyre burst kar gaya. Bhagwan ki daya se bhitar hum sab ko kuch nahi hua. fir ek truck par baith kar hum sikandarpur pahuche.</li></ul></li></ul><div><!--block-->-----------------------<br>19-Jan-2018</div><ul><li><!--block-->Home<ul><li><!--block-->Subah me papa ko dobara se gutkha khate dekh mann dukhi ho gaya</li><li><!--block-->Maa ko aur rimi ko serial dekhne ke liye tok diya.</li><li><!--block-->Papa ne Bahut sunaya ki tum sarkari job ke liye try karo.<ul><li><!--block-->Hum bol diye ki humse sarkari job ke taiyari nahi ho sakta.</li></ul></li><li><!--block-->7:30 me taiyar hokar office ke liye nikle.</li></ul></li><li><!--block-->Ladka se mulakat<ul><li><!--block-->Ladka ka naam Hariom Gupta hai</li><li><!--block-->Wo 3 bhai aur 1 bahan hai.</li><li><!--block-->uske papa 3 bhi hain. Sabse bade chacha aur uske papa, jo sabse chote bhai hain, Gaon me rahte hain.</li><li><!--block-->Uski bahan MA ki hai. Jijaji ICICI me manager hain.</li><li><!--block-->Ladka baad me apna kuch business start karna chahta hai, kyuki yaha job me din prati din pressure badhega. Par uske according salary nahi badhegi.</li><li><!--block-->Ladka at least itni samajhdar patni chahta hai jo ghar ka aur bahar ka uska business ka kaam samhal sake.</li><li><!--block-->Ladke ne ola se mera ffice tak ka travel book kar diya.</li><li><!--block-->Hum one-go me apney office aa gaye.</li></ul></li><li><!--block-->Office<ul><li><!--block-->Office me hum koi kaam nahi kar paye, but office wale supportive hain. unhoney khud se kuch aisa mail kiya ki mera kaam highlight hota rahe.</li><li><!--block-->Shaam ko apna laptop building#14 me jama kara diye.</li><li><!--block-->Office me 200 ka rg aur cig consume kiye.</li></ul></li><li><!--block-->Raat me 9:30 tak ghar aa gaye. Khana khaye aur so gaye.</li></ul><div><!--block-->-------------------------------------------------------<br>14-Jan-2018 to 18-Jan-2018 ---&nbsp;<strong>Divya gyan</strong></div><ul><li><!--block-->Home<ul><li><!--block-->Papa maa rimi narendra se man bhar baat hua<ul><li><!--block-->Minute<ul><li><!--block-->Sab me kami hota hai. Kami chhor ke apne matlab ke chij par focus karo , apne duties ka palan karo, khush raho.&nbsp;</li><li><!--block-->Burai ko apne man se nikalo.</li></ul></li></ul></li></ul></li></ul><div><!--block-->----------------------------------------------------------------<br>13-Jan-2017</div><ul><li><!--block-->- I woke up around 5:30 AM.</li><li><!--block-->Took medicine, tea</li><li><!--block-->Requested didi to give her rope , i tried to do rope jumping exercise. Rassi tut gaya.</li><li><!--block-->Papa ke tokney par, Hum 6:15 me tahalney chale gaye.&nbsp;</li><li><!--block-->Tahalney aur gutkha ke dukan khojney ke dauran hum mandir pahuch gaye. vaha aarti me shamil huye.<ul><li><!--block-->Arti ke baad pandit ji prasad diye. Hum unko bole ke thonga me prasad dijiye. Vo apne ek chela se 500 rupiye ka thonga laney ko kahey.</li><li><!--block-->Humse pandit ji bole \"Sector me hi ek family hai, ladka aur pariwar ke bare me bologe toh detail de denge\".&nbsp;<ul><li><!--block-->Hum koi reaction nahi diye. Kyuki hum toh koi aur tension (apne&nbsp;<strong>kisi biti baat par overthinking ki problem ke solution find karney</strong>&nbsp;ko mind me le ke mandir pahuchey they)<ul><li><!--block-->Humko aisa laga ki mandir me bhagwan ka aadesh hai ki \"<strong>jab kisi biti ghatna ke upar man ghabraye ta bas ye kaho ki hanuman ji hum falanwa kaam galat ya sahi kar diye hain, khata me likh likh lijiyega aur kuch rebate ho to voh bhi kar dijiyega</strong>\"</li></ul></li></ul></li></ul></li><li><!--block-->Ghar par aake jaldi se naha liye. Nahaney se pahle gutkha khaye aur paikhana me gaye. but waha late honey ke khayal se gutkha thuk ke nahae chale gaye.</li><li><!--block-->Nashta kar ke office ke liye nikle, raste me kirti ko call kar ke bol diya ki wo 8:30 ke baad GM activity start kar de, agar hum late ho toh.</li><li><!--block-->Fir Yogesh devgan ko message kar diya ki raste me hain.</li><li><!--block-->Office 8:45 AM me pahuch gaye,&nbsp;<ul><li><!--block-->GM Payout activity ke steps note karney lage ek word document me.</li></ul></li><li><!--block--><strong>Kirti se baat kiye</strong><ul><li><!--block-->Kirti lucknow ki hai. 2 bahen aur ek bhai. Kirti mid me hai.</li><li><!--block-->Kirti ko apni life se judi kuch baate bataye,&nbsp;<ul><li><!--block-->jaise meri shaadi,&nbsp;</li><li><!--block-->ladki ka mere sath nahi rahna, jhagra karna.</li><li><!--block-->Mere aur pariwar ke according behave nahi karna</li><li><!--block-->Unki family ka hum logo se kabhi contact nahi karna.</li><li><!--block-->Hum logo ka ladka wala honey ke bawjood unke pass jana aur ladki ko december me le ke aana.</li><li><!--block-->Fir ladki ka apne chote bhai ke sath chale jana.</li><li><!--block-->Unke aur hamare side se legal actions ka status, abhi november me hum divorce case file kar diye hain.</li><li><!--block-->Isi sab ke chalte hum sab ladki ko bahan ki nazar se toh dekh sakte hai, but dubara shaadi karney me mera koi interest nahi hai.</li></ul></li><li><!--block-->Kirti ne apne baare me bataya ki<ul><li><!--block-->Jo log mera trust todte hain wo mujhey pasand nahi.</li><li><!--block-->personal life ke baare me ek hudd ke baad sab koi ko nahi batana chahiye.</li><li><!--block--><strong>Agar koi mera trust todta hai toh mai chupp ho jati hu. Uski kisi baat ka jawab nahi deti.</strong></li></ul></li><li><!--block-->Kirti has worked on several new tools like CXP,&nbsp;</li><li><!--block--><strong>Learnings - Jyada mat socho. Jab ek topic ya chij se mann bhar jaye toh, kuch change try karo.</strong></li></ul></li><li><!--block--><strong>Satish Verma 2:30 me office aaya. Satish se baat kiye.</strong><ul><li><!--block-->As discussed, he blames others to not sharing full information.&nbsp;</li><li><!--block-->I suggested to have willingness to observe things.</li><li><!--block-->He is from jharkhand, but he is not much trustworthy. He is careless.</li><li><!--block-->Satish Verma is also doing Freelancing projects and also maintains some contacts for front end developers.</li><li><!--block--><strong>Learnings - Jitni salary mil rahi hai, usi ke according kaam karna chahiye. Apna mast life jina chahiye.</strong></li></ul></li><li><!--block-->Raat me 9:30 PM par Yogesh Devgan ko \"Gain Manager Payout activity\" ka final status de ke ghar ke liye nikal gaye.</li><li><!--block-->Ghar pe maa se baat kiye.<ul><li><!--block-->Maa ko bataye ki aaj&nbsp; ek ladki ke sath office me they. Pahli baar kisi ladki se baat kiye.&nbsp;<strong>Agar ladki ko faith ho ki ye ladka acchi niyat se mere se baat karta hai, tabhi wo baat karti hai.</strong></li></ul></li></ul><div><!--block--><br>--------------------------------------<br>12-Jan-2018</div><ul><li><!--block-->Home&nbsp;<ul><li><!--block-->- Subah me Maa se baat hui. Maa bata rahi thi ki papa baar-baar puja path ka waste, calender aur other kaagaz, jala dete hain. Maa ro rahi thi.</li><li><!--block-->&nbsp; - Maa ko samjhaye ki tu unko samjha di aur wo nahi maane, ab unko bolna chor de. saaman idhar udhar rakhne ki jagah Vahi rakho.&nbsp;</li><li><!--block-->\t-&nbsp;<strong>Man shant rakho, jo hona hoga vahi hoga. Bhagwan kabhi apne par dosh nahi lete. Hum jo karte hain usi ka fal samney aata hai. dimag se ye baat nikal do ki kuch bura hoga.</strong></li></ul></li><li><!--block-->Office<ul><li><!--block-->In office day was good, 2&nbsp; ResolveJiffy issue came, but no issue found from our side.</li><li><!--block--><strong>One user was asking me to login into webex session and was asking me to check issue on his desktop. I felt nervous at that time. I discussed this with Kirti, Fayaz, Sanjay, Ashok, Yashwant. But lastly i was not able to get solution or peace in my mind. Then I went to bathroom, but soon I decided to come back on seat, as people in office might start gossiping for the issue. In spite of this day was awesome!</strong></li></ul></li><li><!--block-->Ashok jhasya approached me and said, higher management is looking for all things. They do not take any action, but they wait for right time. Discipline essential in organisation.</li><li><!--block--><br></li></ul><div><!--block-->------------------------------------<br>05-Jan-2018</div><ul><li><!--block-->Office<ul><li><!--block-->Basic information i must know in office<ul><li><!--block-->Name and contact numbers of team members</li><li><!--block-->Roster and shift of people</li></ul></li><li><!--block-->Suggestions from Yogesh<ul><li><!--block-->Take control on servers related to applications</li><li><!--block-->Ask Harish to create id of yourself on servers</li><li><!--block-->Collect login credentials of servers</li></ul></li><li><!--block-->Two tasks in weekend<ul><li><!--block-->WAS configuration videos</li><li><!--block-->Job search in other sectors</li><li><!--block-->&nbsp;</li></ul></li></ul></li></ul><div><!--block-->------------------------------------<br>03-Jan-2018<br>-&nbsp;<strong>In morning, went to Gym</strong></div><ul><li><!--block-->Learnt one exercise<ul><li><!--block-->Bend on a ball, then do crunch after stretching legs.</li></ul></li></ul><div><!--block-->-&nbsp;<strong>My time requirements</strong></div><ul><li><!--block-->In morning<ul><li><!--block-->1.30 hrs- 2 hrs gym</li><li><!--block-->1 hrs prepare for day</li><li><!--block-->1.30-2.30 hrs - avg 2 hrs commute to office</li></ul></li><li><!--block-->In evening<ul><li><!--block-->1 hr packup from office</li><li><!--block-->1.30-2.30 hrs - avg 2 hrs commute back to home</li><li><!--block-->1 hrs dress for night + dinner</li><li><!--block-->1-2 hrs prepare for next day + analysis of day</li><li><!--block-->5-8 hrs sleep</li></ul></li></ul><div><!--block-->-&nbsp;<strong>In office,</strong></div><ul><li><!--block-->Took update from Kirti for<ul><li><!--block-->RJ CCTR Deployment approval process is in progress.</li><li><!--block-->UAT Sign-off not reecieved</li><li><!--block-->GM job has been run successfully this month.</li></ul></li><li><!--block-->Shared same to Yogesh.</li><li><!--block-->Tried to investigate one Zetta coaching issue&nbsp;</li><li><!--block-->One person from same sector met from Sikandarpur.<ul><li><!--block-->He can pick and drop me to office every day. charge 50/-.</li></ul></li><li><!--block--><strong>What escalation&nbsp;</strong></li></ul><div><!--block-->------------------------------<br>01-Jan-2018</div><ul><li><!--block-->Happy New Year</li><li><!--block-->Office<ul><li><!--block-->Aaj Yogesh sir se baat hui<ul><li><!--block-->Unko call kiye new year ke liye</li><li><!--block-->Allegation - no preventive action taken for gainmanager monthly job</li><li><!--block-->My allegation - no proper information being provided</li><li><!--block-->Will discuss on Wednesday</li></ul></li></ul></li><li><!--block-->Home<ul><li><!--block-->I discussed same with maa and narendra. They said \"<strong>hamesha socho kuch nahi hoga</strong>\".. Koi na koi rasta niklega</li></ul></li></ul><div><!--block-->--------------------------------<br>11-Dec-2018</div><ul><li><!--block-->Sab accha hoga.&nbsp;</li><li><!--block-->Hum sharafat ka chola odhna chate hain. Chahte hain ki dusre mere liye defend kare.</li><li><!--block--><strong>Hum bure hain. Dusre mere baare me bura sochte hain, par accha bolte hain. Humko bhi accha bolna hai.</strong></li></ul><div><!--block-->-------------------------------------<br><strong>05-Dec-2017 to 10-Dec-2017<br></strong><br></div><ul><li><!--block--><strong>-Naresh scolded me for why coming frequently for was related issues/ Why dont I say to Yogesh you do not know about websphere configuration.</strong><ul><li><!--block-->I was fearing saying No as I would loose my job</li><li><!--block--><br></li></ul></li></ul><div><!--block--><br>-----------------------------------------<br>04-Dec-2018</div><ul><li><!--block-->- Went with Ramakant ji<ul><li><!--block-->He is from UP Mainpuri</li><li><!--block-->Working in SGS, geneva based testing company</li><li><!--block-->having 3 brothers, elder one works at Rishikesh, in glass-factory</li><li><!--block-->have one 60 gaz plot in sector 56</li></ul></li><li><!--block-->In office<ul><li><!--block-->Reached office 0n 10:45 AM.</li><li><!--block-->smoked with Satya<ul><li><!--block-->Discussed that currently I am not comfortable for senior position.</li></ul></li><li><!--block-->Took breakfast with Anshul and SandeepSingh<ul><li><!--block-->Discussed for&nbsp;<ul><li><!--block-->Politics gossips</li><li><!--block-->Future alternatives<ul><li><!--block-->Freelancing</li><li><!--block-->Online coaching</li></ul></li></ul></li></ul></li><li><!--block-->ResolveJiffy<ul><li><!--block-->Cleared heap-dump</li><li><!--block-->No update from AnilP for RJ deployment</li></ul></li><li><!--block-->QAA<ul><li><!--block-->Shared dump to AAP process</li><li><!--block-->Follow up with Server team for SMTP server issue</li></ul></li><li><!--block-->GM<ul><li><!--block-->Amit dhal discussed with NaveenNamburu for issues discussed last month.</li></ul></li><li><!--block-->Sanjay discussed CCE project<ul><li><!--block-->he was facing configuration issues</li><li><!--block-->I suggested to use Spring STS Suite to configure code.</li></ul></li></ul></li><li><!--block--><strong>Escalations</strong><ul><li><!--block-->I felt multiple times much bechaini.</li><li><!--block-->Ek meeting 9 Jan ko scheduled hai, hum usi din login kar rahe they.</li></ul></li></ul><div><!--block-->----------------------------------------</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":8,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.955Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.955Z"},"uniqueId":"c3976a9a-d132-40b2-a611-e70db82647a7","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f02b"},"name":"2017 - During leaving from accenture 31-Dec-2017 -- Confession with self. Mere mann me ek","heading":"2017 - During leaving from accenture 31-Dec-2017 -- Confession with","smartContent":{"content":"<div><!--block-->2017 - During leaving from accenture</div><ul><li><!--block--><strong><em>31-Dec-2017 --&nbsp;</em></strong><strong>Confession with self.</strong><ul><li><!--block-->Mere mann me ek shaitan baitha hua lagta hai jo baar baar humko galat hi suggestion deta hai.<ul><li><!--block-->Ki gutkha khao.</li></ul></li><li><!--block-->Hum solutions ke liye nahi soch paate<ul><li><!--block--><strong>Duniya me sabko unke problems/queries ka solution hi chahiye.</strong></li></ul></li><li><!--block-->Hum khud ko dhokha dete hai.</li><li><!--block-->Problems ko bada kar ke sochte hain.<ul><li><!--block-->Jabki , sirf itna sochney se kaam chal sakta hai ki&nbsp;<strong>Humko shant rahna hai, dusro ko observer karna hai ki wo kis type ka reaction dete hain</strong></li></ul></li><li><!--block-->Mera problem hai ki<ul><li><!--block-->Hum response nahi karte<ul><li><!--block-->Aur agar karte bhi hai toh galat jagah, galat tareeke se, ya jyada bol dete hain.</li></ul></li><li><!--block-->Gutkha khane, ciggerate pine ke chalte social nahi ho paate.</li></ul></li><li><!--block-->Khud par vishwas nahi hai.<ul><li><!--block-->Dusro ko khud se accha samajh lete hain&nbsp;<ul><li><!--block-->aur explain karne lagte hain ki hum bhi acche hain.</li></ul></li></ul></li></ul></li><li><!--block-->22-July-2017<ul><li><!--block-->Aaj Capgemini ka interview diya.<ul><li><!--block-->Can we create collections of interface objects?</li><li><!--block-->How to prevent web applications from different malware attacks.<ul><li><!--block-->Like multiple requests coming to the applications to choke it.</li></ul></li></ul></li></ul></li><li><!--block-->18-July-2017<ul><li><!--block-->Mere Accenture me failure ka following cause hai.<ul><li><!--block-->4 saal support profile me kaam kiya par hamesha mera mann development profile me jaane ka karta tha. Maine internet se download karke interview questions yaad kiye. Par practice nahi ki. Yaha expectations poora nahi kar paaye aur performance me fas gaye.</li><li><!--block-->Apni profile aur niji jindgi ke problem se yaha kisi se dosti nahi kar paaye. Proper response nahi diya aur sab mere against ho gaye. Managers jab mera defend kar rahe they tab DU Lead ke paas bakwas kar aaye ki mujhey kuch nahi aata, hum ko jaaney do, humko nikal do.</li><li><!--block-->Khud ko defend karney ki jagah, khud ko weaker bana ke exposed kar diya.</li><li><!--block-->Khud ki burai par control nahi kiya, isiliye fail ho gaya.</li></ul></li></ul></li><li><!--block-->10-July-2017<ul><li><!--block-->Last week<ul><li><!--block-->infosys me interview dene gaye they.&nbsp;</li><li><!--block-->Marine drive ghumey gaye</li><li><!--block-->Sunday ko office gaye</li><li><!--block-->Shaam ko D-mart se shopping kiye</li><li><!--block-->Ghar pe baat kiye.</li></ul></li><li><!--block-->Aaj gym me ek dost banaye.<ul><li><!--block-->Isse jiwan ki chinta kam lag rahi hai.</li></ul></li></ul></li><li><!--block-->08-July-2017<ul><li><!--block-->Aaj Infosys ka interview dene gaye they.<ul><li><!--block-->Aap kis chij me expert hain.</li><li><!--block-->Aap itni jaldi job kyu change karna chate hain.</li><li><!--block-->Estimation ka kon kon sa tool hota hai.</li><li><!--block-->Appney kon kon se tool par kaam kiya hai.</li><li><!--block-->Aap future me kya banna chahte hain<ul><li><!--block-->Agar aap Software Architect banna chahte hain toh kya aapko pata hai ki software architect kya karta hai.</li></ul></li><li><!--block-->Team handling kya hota hai.<ul><li><!--block-->Team handling me kya karna hota hai</li></ul></li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.961Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.961Z"},"uniqueId":"82b13dbd-fa27-4ed7-b084-66bd7110fd77","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f02d"},"name":"Life from 29th March to 02nd May 2017 29th march ko ghar se Bangalore ke","heading":"Life from 29th March to 02nd May 2017 29th march","smartContent":{"content":"<div><!--block--><strong>Life from 29th March to 02nd May 2017</strong></div><ul><li><!--block-->29th march ko ghar se Bangalore ke liye nikle.</li><li><!--block-->29th ko sham ko Abinash Pati ke rrom par pahuche.</li><li><!--block-->Abinash ke room par jakar 1700+500+1000+1000 ka daru, beer piye aur pilaye.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.966Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.966Z"},"uniqueId":"6e8c54de-3f89-446f-a9da-6a928974e419","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f02f"},"name":"During my accenture days- from January 2017 to August 2017 02-May-2017 Mai kaisi life jina","heading":"During my accenture days- from January 2017 to August 2017","smartContent":{"content":"<div><!--block--><strong><em>During my accenture days- from January 2017 to August 2017<br><br>02-May-2017</em></strong></div><ul><li><!--block-->Mai kaisi life jina chahta hu.<ul><li><!--block--><strong>Jab office jana hai</strong><ul><li><!--block-->Subah uthkar dawa (Aloe Vera + Amla Juice) piyu.</li><li><!--block-->Kasrat karu (Gym me ya ghar par)</li><li><!--block-->Taiyar hokar office jau.</li><li><!--block-->Office me apna kaam karu. Dopahar me lunch karu.</li><li><!--block-->Shaam ko 5-6:30 tak office se nikal jau.</li><li><!--block-->Raat ko khana khakar, thori padhai karu aur so jau.</li><li><!--block-->Roz Diary ya is application me apne man ki feelings likhu.</li><li><!--block-->Aage badhne, Maa-Papa ke pass jane, Gurgaon me job switch ke liye prayas karu.</li></ul></li><li><!--block--><strong>Jab office nahi jana hai</strong><ul><li><!--block-->Subah uthkar dawa (Aloe Vera + Amla Juice) piyu.</li><li><!--block-->Kasrat karu (Gym me ya ghar par)</li><li><!--block-->Kapda saaf karu. Saaman kharid ke lau. Saman arrange karu.</li><li><!--block-->15 din par baal dadhi banwa lu.</li><li><!--block-->Kahi aas pass bahar ghumney chala jau.</li><li><!--block-->Aage badhne, Maa-Papa ke pass jane, Gurgaon me job switch ke liye prayas karu.</li><li><!--block-->Khana, Nashta karu.</li></ul></li></ul></li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.971Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.971Z"},"uniqueId":"c56897c1-c861-4f90-9f64-b385ac82a137","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f031"},"name":"10-July-2018 What maximum i want from my life? Cig-Gutkha-MB- ko chorna chahta hu, Bhagwan aur","heading":"10-July-2018 What maximum i want from my life? Cig-Gutkha-MB- ko","smartContent":{"content":"<div><!--block--><strong>10-July-2018</strong></div><ul><li><!--block--><strong>What maximum i want from my life?</strong><ul><li><!--block-->\t\tCig-Gutkha-MB- ko chorna chahta hu, Bhagwan aur apne karm me dhyan lagana chahta hu.</li><li><!--block-->\t\t100 LPA ke pakage aur family ke pass rahna chahta hu, apna business karna chahta hu</li><li><!--block-->\t\tOffice timings flexible ho, cooperative cowerkers ho</li><li><!--block-->\t\tAmerica/dusre desh ghumna chahta hu</li><li><!--block-->\t\tSunder patni ho, cooperative ho, uske pariwar wale baat manne wale ho, do bacche ho ek ladki aur ek ladka.</li><li><!--block-->\t\tNarendra Rimjhim ki shaadi acchi jagah ho jaye</li><li><!--block-->\t\tMaa Papa acche se aur surakshit rahe</li><li><!--block-->\t\tSociety me sab humse cooperative rahe</li></ul></li></ul><div><!--block--><br><br><strong>26-June-2018<br></strong><br></div><ul><li><!--block-->\tHum Gym kyu karte hain?<ul><li><!--block-->\t\tMan halkaaur refresh lagta hai.</li><li><!--block-->Gym se aane ke baad lagta hai ki aaj ek accha kaam kiya. Man santusht lagta hai.&nbsp;</li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->\tHumko aisa feel hota hai ki mere bhitar ek shaitaan baitha hai. kah nahi sakta kab se. Ye humse galat kaam karata hai aur baad me hum pachtaney lagte hain.</li><li><!--block-->Fir dusre pal khayal aata hai ki ye hum hi hain jo galatiyaan karte hain aur ilzam kisi man ke shaitan par dalna chahte hain.&nbsp;</li><li><!--block-->Hum yaha tak kaise pahuch gaye aur hum itna dukh aur shok kyu mahsoos karte hain. Meri sthiti aaj pichle saal se lakh guna acchi hai.</li><li><!--block-->Pichle saal jo hua uski yaad aaj bhi aane ke baad humko bahut kharab feel hota hai. Hum apne life me sabse jyada galatiyaan 2017 me hi kiye hain.&nbsp;</li><li><!--block-->Fir bhagwan ne thori daya dikhayi aur hum apne ghar aa gaye. Yaha aa ke humse interview questions yaad nahi ho rahe they. Interviews me mera selecton nahi ho raha tha. Sabko batane ke liye tha ki hum accenture se nikale gaye hain, isisliye shayad mera slection kahi nahi ho raha hai. Jabki bhitar ki sacchai ye bhi hai ki humse taiyari nahi ho rahi thi. hum comics padhte they din bhar aur gutkha khate they.</li><li><!--block-->Hum soche ki apne pahli companyw alo se bol ke job pa lenge. but hum ko chor pe more \"Yogesh\" mil gaye. Yogesh ne bas ek hi shart rakhi ki \"ResolveJiffy aur GainManager\" dekh lega na. Java lead ka sapna dikhaya. humko laga ki chalo hum inn log ko bewkoof bana diye. 40-45 hazar salary aa jaigi aur hum ko jyada kuch nahi karna padega. par hum bhul gaye ki ye log mere baare me mere se bhi acche se jante hain. aate hi poora bojh dene lage aur night shift bhi karaya. hum bhi gutkha chorne ka aaj bhi sirf soch hi rahe hain. humko kuch nahi soojh raha aaj. yaha office me izzat bhi gayi. juniors bhi ab mooh lagate hain. hum anshul ki baat ke hisab se ghoomte hain.&nbsp;</li></ul><div><!--block--><br><br><br><strong>18-June-2018<br>Mainey khud me observe kiya hai kiya hai ki<br><br>\tAgar humko 2 chije abhi hi chorni ho to hum ye do chije chorenge<br><br>\t\t1. Chinta karna<br><br>\t\t2. Gutkha khana<br><br>\t\t3. Shikayat karna<br><br><br><br>agar do chije add karni ho apni life me toh<br><br>\t\t1. Papa maa ke pass baithna<br><br>\t\t2. Somen se baat karna aur unko weekly update dena</strong><br><br><strong>02-June-2018</strong></div><ul><li><!--block--><strong><em>Mere dimag me chal rahe vichar</em></strong><ul><li><!--block-->Mera naya wala atm card kab tak aayega?</li><li><!--block-->Mera jio sim kab chalu hoga?</li><li><!--block-->Kal yogesh devgan ko rude ho ke bol diya ki hum 10 baje resolvejiffy support nahi de payenge, uska kya side-effect hoga?</li><li><!--block-->Hum rimjhim ko exam dilakar aaney ke baad se sirf so rahe hain, kahi meri tabiyat toh kharab nahi hai?</li><li><!--block-->Humko gussa abhut aa raha hai, chijein bhul ja rahe hain, humko koi mansik bimari toh nahi ho gayi hai?</li><li><!--block-->Kal chanpatiya walo ke case ki taarikh thi, uska agala step kya hoga?</li><li><!--block-->Dhruv chacha kab tak jameen wale ko bayana denge?</li><li><!--block-->Pichle saal hum jyada gutkha khate they, paan khaate they, usse mera muh jyada kata rahta tha. Isiliye jyada tension feel karte they. Iss saal usse sahi hain phir bhi tenion hai toh sAhi.</li></ul></li></ul><div><!--block--><br><strong>23-Apr-2018</strong></div><ul><li><!--block-->Kal man me khyal aaya ki \"Ekai saadhe sab sadhe sab sab jaye\". Hum apney routine ko sadhenge.</li></ul><div><!--block--><br><strong>06-Mar-2018 to 03-Apr-2018</strong></div><ul><li><!--block-->03-Apr-2018<ul><li><!--block-->Aaj humko poore parivar ke sath Aaya nagar jana tha. Meri step-dadi ji ka aaj 13wi tha.</li><li><!--block-->Bipin chacha ko apni puri family ke sath waha aaya nagar jana tha. Par wo akele nahi jana chahte they. Isiliye papa ko bhi dhire dhire taiyaar kiye.</li><li><!--block-->Mere papa ney pahle 500 /- dene aur saste me aaya nagar se aaney ka plan banaya tha.&nbsp;<ul><li><!--block-->Bipin chacha ko 2000/- rupiye dene they, kyuki bipin chachi ne aisa kaha tha. Bipin chacha ke ghar pe kal 10-11 baje jaane par yahi baat kiye they chacha , mere papa se.</li><li><!--block-->Pahle dhruv chacha se baat huyi thi aur 500 rupiye dene aur kam paise me hi laut ke aaney ki baat hui thi papa aur dhruv chacha ke bich me. par baad me Bipin chacha aur papa ke bich me baat hui.&nbsp;<ul><li><!--block-->Chacha chachi ke naam par bol ke 200 dene ki baat kahe. Papa bole ki hum dhruv ji se baat kiye hain aur 500 hi dene ko bole hain.&nbsp;</li><li><!--block-->Phir papa narendra ke naam pe bole ki wo bola tha ki 2000 hi de dijiyega.&nbsp;</li><li><!--block--><strong>final decision hua ki dhruv chacha ko mat bataya jayega aur 2000 hi kar diya jayega.</strong></li></ul></li></ul></li><li><!--block-->Bipin chacha ne gaadi me Wednesday ko machli khaney ki ikska boli. Thora kam marcha wala. Papa ne rimjhim ke guruwar ke puja ki baat boli.&nbsp;<ul><li><!--block--><strong>Shukrawar ko machli banawaney ki baat hui.</strong></li></ul></li><li><!--block-->Bipin chacha ne Sanjay/Sunil ke ghar pe Dhruv chacha ke beta se kaha ki&nbsp; \"<strong>Maa baap apney kharchey me se kaat ke bahut mushkil se paise dete hain, usko swarth karne ke liye tumko mehnat karna chahiye.</strong>\"</li><li><!--block-->Subah me ghar se niklne ke samay papa ne dadaji ko chabi dene ko kaha. Chabi dene gaye toh dadaji phone par baat kar rahe they. wo kuch bhi nahi sun rahe they.&nbsp;<ul><li><!--block-->Humko man me chinta ho rahi thi ki \"Late ho raha hai, papa waha intezar kar rahe honge aur gussa kar rahe honge.\"</li><li><!--block-->5 min wait karne par dadiji ne mere se chaabi le li. unhoney chabi ko pranam karke mere se le liya.</li></ul></li><li><!--block-->Dadi ke shradhh ka khana khaney ke samay waha sab step bua (Pinki, Sudha, Munna) log ney humko chawal de ke baat karna chahe. Hum bahut baat nahi kiye par muh se \"<strong>fua</strong>\" nikal hi gaya.</li><li><!--block-->Dadi ke puja me hum dhoop diye.<ul><li><!--block-->Humko sanjay chacha bole ki chal ke dhoop de do.</li><li><!--block-->Hum papa ka wait kar rahe they. But wo nahi dikhe. Phir hum upar ja kar dhoop de diye.</li><li><!--block-->Hum soche ki baaki dadi log ke shraddh me hum nahi ja paye they. Apni dadi ko hum dekhe nahi. Apni dadi ke shraddh me hum itna toh karte hi. Isiliye man se dhoop de diye. Par uske baad mera man nahi lag raha tha. hum waha se nikal gaye.</li></ul></li><li><!--block-->Dadi/Sunil ke ghar ka pata - Smt Kishori Devi,&nbsp;<strong>G-580D , Ph-IV, Aya Nagar . (Near Shiv Mandir, Near Little Angel School).&nbsp;</strong>Ye Aya nagar metro station ke pass me hi hai.<ul><li><!--block-->Ghar ke samney Pinki fua ki dayadin ka ghar hai.</li><li><!--block--><strong>Sunil ke Sala (Arvind Gupta</strong>&nbsp;, Server Admin in Noida, resident of masrakh) se baat hui. Wo papa se bhi baat kiye. Unka mobile number 09999980392 hai.</li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.978Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.978Z"},"uniqueId":"903c02a4-cb45-43c9-994e-350db0012322","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f033"},"name":"24-Sep-2017 How to concentrate on studies Right Time Table Think Big Start Small Peak Concentration","heading":"24-Sep-2017 How to concentrate on studies Right Time Table Think","smartContent":{"content":"<div><!--block--><strong>24-Sep-2017</strong></div><ul><li><!--block--><strong>How to concentrate on studies</strong><ul><li><!--block-->Right Time Table</li><li><!--block-->Think Big Start Small</li><li><!--block-->Peak Concentration Time</li><li><!--block-->Sufficient Sleep</li><li><!--block-->Avoid Stress</li><li><!--block-->Right Diet</li><li><!--block-->Reward yourself</li><li><!--block-->Be Ready</li><li><!--block-->Watch Your Environment</li><li><!--block-->Why Sheet - Task ke niche ye likho ki mere liye ye padhai kyu jaruri hai?</li><li><!--block-->Critical Tasks First</li><li><!--block-->Yoga and Meditation</li></ul></li><li><!--block--><strong>Problems I may get while reading book</strong><ul><li><!--block-->Word which meaning is not clear</li><li><!--block-->Sentence which meaning not clear</li><li><!--block-->Technical term not clear</li><li><!--block-->Question which answer not clear.</li></ul></li><li><!--block--><strong>How to learn new skill quickly?</strong><ul><li><!--block-->20 hours me adaquate learn kar sakte hain.</li><li><!--block--><strong>Rule 1 :-&nbsp;</strong><ul><li><!--block-->Set Target Performance Level<ul><li><!--block-->Why this skill?</li><li><!--block-->How good do I want or need to be?</li><li><!--block-->E.g. Learn English<ul><li><!--block-->Why - To clear interview / To talk with others</li></ul></li></ul></li></ul></li><li><!--block--><strong>Rule 2 :-&nbsp;</strong><ul><li><!--block-->Deconstruction of skill<ul><li><!--block-->Steps - Skill ko tukdo me tod kar imprtant sub-skills ko pahchano aur pahle unko sikho.</li></ul></li></ul></li><li><!--block--><strong>Rule 3 :-&nbsp;</strong><ul><li><!--block-->Research Just Enough<ul><li><!--block--><strong>Focus on End Result</strong>&nbsp;- Theory work adaquately karo, practice jyada karo</li></ul></li></ul></li><li><!--block--><strong>Rule 4 :-&nbsp;</strong><ul><li><!--block-->Removing Barriers<ul><li><!--block-->Avoid Distractions</li><li><!--block-->Remove the barriers</li></ul></li></ul></li><li><!--block--><strong>Rule 5 :-&nbsp;</strong><ul><li><!--block-->Pre-commit 20 hours<ul><li><!--block-->Ye decide karo ki mai apne life ke 20 ghante to at-least dunga hi.. iss skill ko sikhne ke liye..&nbsp;</li><li><!--block-->20 ghante matlab 40 minutes * 30 days</li><li><!--block-->Agar ha to kab? Time fix karo.</li></ul></li></ul></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":5,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.984Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.984Z"},"uniqueId":"429fdf45-52e8-41c5-87ba-c0c1a1740d80","__v":0}
{"_id":{"$oid":"668ef19659d6bcc528b1f035"},"name":"16-July-2012 Jai Shri Ram Mai Faridabad me ek ghar chahta hu. Jisme ek drawing room","heading":"16-July-2012 Jai Shri Ram Mai Faridabad me ek ghar chahta","smartContent":{"content":"<div><!--block--><strong>16-July-2012</strong></div><ul><li><!--block-->Jai Shri Ram<ul><li><!--block-->Mai Faridabad me ek ghar chahta hu. Jisme ek drawing room ho.</li><li><!--block-->Ek kitchen, ek lawn, do amrud ke ped ho.&nbsp;</li><li><!--block-->Bedroom ki kul jarurat hai lagbhag 5 ki sankhya me. Ek mere liye, Ek maa-papa ke liye, ek chotu ke liye aur ek didi ke liye. Ek mehmaan ke liye.</li><li><!--block-->Ghar me ek AC laga ho.</li><li><!--block-->Chaar gadiyaan, do driver ho.</li><li><!--block-->Mai apni gaadi khud chalaunga.</li><li><!--block-->Chhotu bhi apni gaadi khud chalayega</li><li><!--block-->ek driver Maa-papa ke liye ( aur jab didi aayegi toh uske liye bhi) aur ek diver mehmaano aur ghar ke baaki sadasyon ke liye.</li><li><!--block-->Khana grihiniyon ko khud se banana hoga.</li><li><!--block-->Naukri lagbhag ek lakh rupiya mahina ho.</li><li><!--block-->Ek pooja ghar aur ek kitchen aur bhi ho, jisme sirf pooja-path ka saman bane.</li><li><!--block-->Abhi dekhna hai ki inko hasil karney me mujhey kitney din aur lagengey. Tab tak<strong><em>&nbsp;chhoro na kaam, Bisoro na Ram</em></strong>.</li></ul></li><li><!--block-->Jai Shri Ram</li><li><!--block-->Jai Hanuman</li><li><!--block--><strong><em>Premendra</em></strong></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:50.988Z"},"updatedDate":{"$date":"2024-07-10T20:39:50.988Z"},"uniqueId":"995aa386-c73e-4368-b84d-e89a9bbce582","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f037"},"name":"Chat history from Sameer Gupta 01-Jan-2019 Hum saal ka shuruaat kiye Ram naam le ke.","heading":"Chat history from Sameer Gupta 01-Jan-2019 Hum saal ka shuruaat","smartContent":{"content":"<div><!--block--><strong>Chat history from Sameer Gupta<br><br>01-Jan-2019</strong></div><ul><li><!--block-->Hum saal ka shuruaat kiye Ram naam le ke. 10008 baar, Hari iksha se.</li><li><!--block-->Shri Mata Vaishno Devi Darbaar<ul><li><!--block-->Ganesh ji sab se pahle puje jaane wale devta hai.<ul><li><!--block-->Ganesh ji ke roop se bahu kuch sikhne ko milta hai.</li><li><!--block-->Ganesh ji ke sir se sikhne ko milta hai, ki agar jiwan me sukh shanti chahte ho, to apna sir bekar ki musibat se door rakho.</li><li><!--block-->Ganesh ji ki badi badi aakho se sikhne ko milta hai ki chijo ko acche se dekh samajh ke decision lo</li><li><!--block-->Ganesh ji ke bade kaano se sikh milta hai ki, , Kaan se jitna jyada ho, utna suno. Kaan ke kacche mat bano.</li><li><!--block-->Ganesh ji ke bade pet se sikhne ko milta hai ki, baato ko pachana sikho.</li><li><!--block-->Ganesh ji ka Gaj mukh hai, aur Gaj (Hathi) ki jibh piche ki hoti hai. Isse sikhne ko milta hai ki, agar shanti se jina chahte ho to jibh ko hamesh piche rakho, soch samjh ke bolo.</li><li><!--block-->Ganesh ji naak(Soond) bahut badi hai, isse sikhne ko milta hai ki apni pratishtha (naak) ki hamesh raksha karo.</li><li><!--block-->Ganesh ji ke Gaj-Danto se sikhne ko milta hai ki apni saari baate sab ko khol ke mat batao (Hathi ke daat khane ke aur, dikhane ke aur)</li></ul></li><li><!--block-->Jai shri ganesh.</li><li><!--block-->Maa se hum ye hi subah me puch rahe they ki Ganesh ji ka bada pet kyu hota hai, aur shaam ko Ganesh ji ke baare me ye sikh mili.</li></ul></li></ul><div><!--block--><strong>30-Dec-2018</strong></div><ul><li><!--block-->29 Dec ki raat night shif karne me hum so gaye they, Yogesh ne mail kiya, toh maine bhi amit tyagi ko rakh ke reply kar diya.</li></ul><div><!--block--><br><strong>28-Dec-2018</strong></div><ul><li><!--block-->Kamlesh ke sath 500 rs ka loss hua, for beer . But police ne khule me pite pakad liya</li></ul><div><!--block--><strong><br>26-Nov-2018</strong></div><ul><li><!--block-->I am alone at home. Mother Father Brother and Sister all have gone to Motihari. I am here alone&nbsp;</li><li><!--block-->I&nbsp; consumed alcohol after a long ago today.</li><li><!--block-->Mai koi khushi feel nahi kar raha, daaru pi ke. Bas chull thi , ek man me iksha thi.</li><li><!--block-->Mai paap me doob gaya hu.</li></ul><div><!--block--><strong><br>21-Nov-2018</strong></div><ul><li><!--block-->21Nov ko subah me Amit Tyagi meri seat pe aaye aur puchey ki tu fir se resign karna chata hai</li><li><!--block-->maine ek do reason batayae ki kyu?</li><li><!--block-->fir hum bole ki hum list bana ke aate hain.</li><li><!--block-->Yogesh ko bataye.</li><li><!--block-->Sanjay ko call kiye par wo nahi phone nanhi uthaya&nbsp;</li><li><!--block-->fir 1 ghante me Amit Tyagi ke cabin me gaye.</li><li><!--block-->waha sheikh aur yogesh they</li><li><!--block-->waha apna reson bataye.</li><li><!--block-->sab sun ke Amit yagi ne kaha ki \"<strong>ek tera shift timings ka problem samajh aata hai, baaki tere me willing ness to learn new things ki kami hai.</strong>\"</li><li><!--block-->Shaam ko naresh se baat huyi,&nbsp;<strong>naresh ne kaha ki tu inki mercy par kab tak rahega. apna new job dekho.</strong></li></ul><div><!--block--><strong><br>20-Nov-2018</strong></div><ul><li><!--block-->I talked with Sanjay.</li><li><!--block-->Usko bataya ki 12th Oct ko Somen ne call kar ke mujhey kaha tha ki performance sudharo, nahi toh job pe khatra hai.</li><li><!--block-->Yogesh ne dusro ki help karne par mujhey chutiya kaha tha.</li><li><!--block-->I am feeling fear, tension, tiredness. 9:30PM pe office se nikle.</li><li><!--block-->Din me interview liye they. Most probably uska selection ho jayega.</li><li><!--block-->Sheikh sir \"I know,I dont know\" ke case me manager dwara employee par pressure daal ke kaam karane ki baat kiye.</li></ul><div><!--block--><br><strong>12-Oct-2018</strong></div><ul><li><!--block-->Somen Bose call kerke ultimatum diye ki ek mahiney me performance sudharo nahi toh job khatre me hai tumhari.</li><li><!--block-->Yogesh ka kahna hai ki agar tum dusro ki madad karney se apna kaam nahi kar pate aur dusre tumhari help nahi karte to tum chutiye ho</li><li><!--block-->Mainey ye baate Sandeep se ki. Manoj ko bhi batayi.</li></ul><div><!--block--><br><strong>20-May-2018</strong></div><ul><li><!--block-->Aaj 20 May ko hum 10 din baad gym gaye..</li><li><!--block-->Gym me mujhey exercise karney ka mann nahi karta kyuki..&nbsp;<ul><li><!--block-->hum ko gym me matha ghumta hua lagta hai..&nbsp;</li><li><!--block-->humko feel hota hai ki hum achhe se excercise nahi kar rahe aur log humko dekh ke has rahe hain..&nbsp;</li><li><!--block-->mere pet me gas hai aur paad na khul jaye.. hum ko exercise yaad nahi</li></ul></li></ul><div><!--block--><br><strong>19-May-2018</strong></div><ul><li><!--block-->Dear sir</li><li><!--block-->I am not able to do work in such uncertain timings... its like torture... resigning.. just request for cleaner relieving letter.. however i am not going to do any further private job...</li><li><!--block-->Thanks</li><li><!--block--><strong>The above mail i written to Yogesh Devgan</strong></li><li><!--block-->Vaqya shaam ka hai.. hum nikalney wale they .. tabhi 8:30 me yogesh ney production logs me check karney ko kaha.. ki tadhika ke latest logs waha aa rahe hain..uss logs ka humko idea nahi tha.. radhika ko call kiya.. usney bhi baat sunai.. phir uss issue ko check karte huye pata laga ki deployment wali file me garbar hai.. phir thori thori der karte 11 baje hum office se nikle.. humko mumbai me jaisi bechaini aur gussa aata tha vaisa aaney laga</li><li><!--block-->Shaam ko dhruv chacha aur papa ki baat huyi..ek half pant aur ek half shirt kharidaya.. bipin chacha ko de diye.</li><li><!--block-->Narendra aaya usko lene sohna more gaye.. raste me usko dhruv chacha sadhu chacha papa ki half pant half shirt ki kahani sunaye..</li><li><!--block-->Par pahle humko uska haal puchna chahiye tha ... ye miss hai</li></ul><div><!--block--><br><strong>17-May-2018</strong></div><ul><li><!--block-->Duniya ke bare me mere kuch anubhav<ul><li><!--block-->Duniya kabhi bhi apni galati nahi sweekarti</li><li><!--block-->Duniya successful logo ke talwe chatti hai</li><li><!--block-->Duniya kamjor besahara ko durkarti hai</li><li><!--block-->Duniya dukh nahi sunna chahti</li><li><!--block-->Duniya lalachi hoti hai</li><li><!--block-->Duniya me acche log nahi ke barabar hain</li><li><!--block-->Duniya me sab apna swarth dekhte hain</li></ul></li><li><!--block-->Dear Customer, your Account XX2297 has been debited with INR 10,000.00 on 17-May-18. Info: TRF TO FD no. 107013013365. The Available Balance is INR 7,880.59.For dispute,call 04033667777.</li><li><!--block-->Dear Customer, Term Deposit XX3365 for Rs.10000.00 has been opened on 17-May-18. The deposit details will be updated on Net Banking within 1 working day.</li></ul><div><!--block--><br><strong>13-May-2018</strong></div><ul><li><!--block-->12 may ko 12 baje vaqueel se milney gaye.. wo dusre vakeel se baat kiya tha but baat nahi bana.. wo batayega... ek dusra aadmi mila.. wo bhi divorce ka mara hai</li><li><!--block--><strong>HR 51 BG 5523... 10 Rupiye lene hain</strong></li></ul><div><!--block--><br><strong>10-May-2018</strong></div><ul><li><!--block-->Wednesday ko kharcha 150+175+45 hai</li><li><!--block-->Waqar se shaam me baat kiye..</li><li><!--block-->Wo pucha ki Accenture kyu chhor diye.. hum usko waha manager se issue.. kaam ka pressure aur lack of cooperation reason bataye..</li><li><!--block-->Usko bole ki yaha pressure badha hai.</li><li><!--block-->Mera laptop on nahi ho raha.. desktop team ko dikhana hoga</li></ul><div><!--block--><br><strong>08-May-2018</strong></div><ul><li><!--block-->11 baje office pahuche.. mere 500&nbsp; rs ke note par kuch likha tha.. usse 2 rajnigandha aur 1 milk shake office ke pass ke dukan se liye.. raste me cab wale se toll par paise khulle karney ko kahe they.. par humko shakk hai ki toll wale ne koi dusra pen se likha note de diya tha..</li><li><!--block-->Office me kirti mera kaam nahi ki aur apne kaam ke liye mere sir pe chadh jati hai</li><li><!--block-->Harish ne meri 1 baje se 11 baje ki shift laga di thi.. shaam ko devgan aur harish mere se baat kar rahe they.&nbsp; Unko bol diya ki late night na hum fbd se na ggn se nikal sakte hain...</li><li><!--block-->Sanjay ko kal hum hi pakre they . Ab wo bhi samajh gaya hai ki hum koi pareshani honey par hi usko pakadte hain.. vavjudh iske ki ab hum samajh gaye hain ki wo meri baato ko yogesh harish sheikh ko batata hai.. hum bich me decide kiye they ki usse baat nahi karenge.</li><li><!--block-->Shaam ko 9 baje office se nikle. &nbsp; 10:30 me ghar pahuche.</li><li><!--block-->Kal ka kharcha 20+75+75+70+80 hai</li></ul><div><!--block--><br><strong>07-May-2018</strong></div><ul><li><!--block-->Maa se sone janey se pahle baat hui... maa ka kahna tha ki vakeel se baat karte raho.. hum maa par bhadak gaye ki tu sirf ek hi baat bolti hai.. papa jo bolte hain usi ko dohrati hai.. asal me hum pahle plan kar rahe they ki next Wednesday ko wakeel se baat kar lete hain.. par maa ke tokney par humko gussa aa gaya aur hum usko bol diye ki humko apna marzi se baat karna hai toh hum agla mahina baat karenge..</li><li><!--block-->Raat me sone janey se pahle hum 7 baar hanuman chalisa padh ke soye..</li><li><!--block-->Raat me mouthwash kar ke muh me laung rakh ke soye they... raat me bina AC ke bhi acchi nind aayi&nbsp; aur sunah aankh 5:15 tak khul gayi..</li><li><!--block-->Subah me gas bhi kam feel ho raha hai..</li><li><!--block-->Humko roz raat ko hanuman chalisa padh ke sona hai aur mouthwash kar ke aur laung muh me rakh ke..</li><li><!--block-->Hum raat me maa se baat kiye toh ye bhi bole they ki humko vakeel par vishwas nahi hai...</li><li><!--block-->Subah me uth ke 20 rupiya liye aur ghar se tahalney ke liye nikle.. gaunchi.. fir waha se labour chowk.. fir sanatan mandir.. hanuman mandir.. gutkha kharide.. hanuman ji ke mandir se ghar aaye.. raste me ek sardar ji se mile .. usse ek baar chacha baat kiye they jameen ke liye.. jab hum yaha jameen khoj rahe they.. man me aaya ki usse yaha wali jameen ke liye baat kare.. par phir papa ka khyal aaya.. kya janey papa gussa ho jaye.. uss sardar se baat na kare.. phir ghar aa ke dawa khaye aur latrine karney aaye aur yaha gutkha khaye</li><li><!--block--><strong>Gutkha khaney ka ek bahana ye bhi hai ki papa gutkha kyu khate hain.. gutkha sirf muh me rakhney ki chull hoti hai mujhey .. fir gutkha muh me jate humko vahi tension bechaini sorrow feel hota hai..</strong></li><li><!--block-->6:45 me gym ke liye nikle.. 7:15 am me gym pahuchey.. bich me sector market me gutkha khaye</li><li><!--block-->Gym janey se pahle papa ko sardar ke bare bataye.. par wo bole ki bahri logo se baat nahi karna hai abhi..</li><li><!--block-->Papa ko gym me aaney wale ek ladke ke bare me bhi bataye.. par papa usse baat karn ko bho mana kar diye..</li><li><!--block-->Gym me back ka exercise kiye..</li><li><!--block-->Aaney pe dadaji se baat hui.. unhone bhi vakeel se kal mere baat karne ke baad baat ki thi.. vakel dadaji se bola ki wo reply dega aur divorce ho jayega par isme time lagega</li><li><!--block-->Dadaji ko bataye pahle wp pe uski dp se pata chalta tha ki wo idhar udhar rahti hai.. kolkata apni didi ke ghar pe bhi rahi hai</li></ul><div><!--block--><br><br><strong>06-May-2018</strong></div><ul><li><!--block-->5 may ko subah 8 baje uthey... maa ne gym se aa ke chacha ke pass pakora pahuchaney ko kaha... vaha chachi ke yaha baith gaye..&nbsp; aayush ka chemistry ka questions solve kiya... chachi se baat kiye.. aayush bich me sec 14 janey ke liye chacha se maar khaya tha.. chachi ka bp low tha... chacha 12 baje chotka ka result le ke aaye aur phir badka ko fiitjee pahuchaney ke liye car se sec 15 nikle... hum bhi unke sath gaye... raste me chacha bataye ke abhay uncle ka ladka iit pt nikal liya h.. nit fix h ab.. ab mains me taiyari kar raha h... 2 baje vapas ghar gaye.. dopahar me 1 number market gaye.. vaha ghari ka belt badalwaye.. vaha se vapas aaney par office call me they.. 12 baje free huye.. subah fir office call tha.. resolve ka downtime tha.. 9 baje gym ke liye nikle..</li><li><!--block-->Dopahar me man me aaya ki papa mere se kya chahte hain isko likhe... par fir film dekhte huye khyal aaya... fir film chalaye toh film me kho gaye.. jhony mera naam movie dekhkhte kyal aaya ki bahar papa ke sath tv pe dekhte hain... par sab andar wale me kamre me chale gaye.. hum frustration me gutkha khaye.. line cut gaya toh fir yaha laptop pe film dekhney lage.. ab film me man nahi lag raha. Yaha fir gutkha khaye aur ye sab likhney lage</li><li><!--block-->Hum wo karna chahte hain jo man me aata hai.. par man har pal badalta hai.. fir ek kaam karte huye man dusre pe badal jata hai... fir frustration... gutkha cig mb khaini bechaini guilty feel.. raat me nind nahi aana.. man ka rona.. chijo ka bhul jana..</li><li><!--block-->Iske baad papa maa bahan bhai ki shikayat..</li><li><!--block-->Office walo ki shikayat</li><li><!--block-->Relatives neighbors ki shikayat.. utre chehre...</li><li><!--block-->Khud ke man ka frustration</li><li><!--block-->Dopahar me maa mujhey vakeel ke pass janey ko kah rahi thi.. papa se bhi baat huyi ki vakeel se baat karo aur le de ke matter ko khatam karao... papa ka kahna hai ki tu 6 mahina baithey rahega tab bhi vakeel tumko call nahi karega...</li><li><!--block-->Maa ka kahna hai ki vakeel se baat karo apna takleef batao aur unke vakeel se baat karke le de ke khatam karo isko</li><li><!--block-->Humko vakeel ke pass janey ka mann nahi hai.. shayad ye mera bura shaitan humko rokta hai.. humko lagta hai ki papa ko itna pressure me nahi aana chahiye.. wo log pareshan kyu nahi hote.. unko takleef nahi hoti kya.. mera vakeel jaan bujh kar humpe hi pressure bana raha hai. Wo jyada me thagwayega..</li><li><!--block-->Par aaj jab hum papa ki baat sun rahe they tab itna samajh aa gaya ki papa ko lagta hai ki hum unki baat sunke gussa hote hain.. mera jhaat sunagta hai..</li><li><!--block-->Hum uss samay ye soch ke baithey they ki hum papa maa par vishwas karte hain.. par past me kahi hui meri baat papa ko yaad hain</li><li><!--block-->Waqueel se baat karney ka mann bana liye.. meanwhile papa narendra ko phone laga ke apna dukhda ro diye ki parmendra wakeel ko call nahi kar raha...</li><li><!--block-->Wakeel bola ki wo unke wakeel se baat kiya tha.. wo unn logo se baat karke batayega.. agar koi baat banti hai tab..</li><li><!--block-->Usse phir agle week mil lete hain</li></ul><div><!--block--><br><strong>05-May-2018</strong></div><ul><li><!--block-->Jo hum cig pite hain.. gutlha khate hain.. paan khate hain.. extra milk shake pite hain.. chocolate khate hain... uske chalte jo difficulties aate hai. Gala sukta hai&nbsp; tension hota hai.. nind puri nahi hoti. Wo sab agli subah me pata chalta hai</li></ul><div><!--block--><br><strong>04-May-2018</strong></div><ul><li><!--block-->Kal raat ko khaini kha ke nahi soye.. kal cihgerate bhi ek hi pi thi .. wo bhi subah me... isiliye aaj subah me kam bechaini ho rahi hai...</li><li><!--block--><strong>Agar hum gutkha ciggerate khaini mb chhor de toh meri chinta kam ho jayegi..</strong></li><li><!--block-->Bechaini kam hai toh ghari ke second ki sui ki aawaz bhi kam chubh rahi hai</li><li><!--block-->Aaj subah me 5:30 am par uthney ke baad bhi hum gym nahi gaye... chinta kal jitni nahi hai.. phir bhi susti feel kar rahe tbey.. mata ka bhajan sunte huye so gaye they</li><li><!--block-->Office ki chinta hoti hai.. meri baat sunke bhi satish amit fayaz kirti anshul uday ansuni kar dete hain.. yogesh mere pe pressure banate hain.. mera mann office me nahi lagta hai... wo log bhi ab meri koi izzat nahi karte</li><li><!--block-->Mera mann jyadatar dukhi aur nirash rahta hai...</li><li><!--block-->Aur papa maa rimi ke bihar jaaney ke baad aur dukhi rahega... isiliye jyada galtiyaan karega.. mujhey iss situation se bachney ke liye plan banana hoga... hum Narendra ki tarah strong nahi hain.. hum chhoti chhoti baato pe naraz ho jate hain .. depression me aa jate hain.. apna rotine follow nahi karte .. thatmata ke baith jate hainn...</li><li><!--block-->Kabhi kabhi gym nahi janey ka man karta hai.. tab hum apney man ko samjha sakte hain ki gym jane se agar fayda nahi toh nuksan bhi nahi hoga.. aadhe ghante ke liye hi sahi gym jana chahiye</li><li><!--block-->Jab hum kisi topic ko present karte hain toh pahle usse related terminology , related words , findout karte hain.. phir what are those different words pe discuss karte hain..</li><li><!--block-->Phir deeper me topic discuss karte hain</li><li><!--block-->Jab hum gym me hath ka exercise nahi kar pate.. vajan nahi utha pate aur pull up nahi kar pate... toh itna tay hai ki hum jyada jor se thappad maar hi nahi sakte...</li><li><!--block-->Jarur wo ladki jaan bujh ke nautanki karti thi... sab uska socha samjha plan tha..</li></ul><div><!--block--><br><strong>03-May-2018</strong></div><ul><li><!--block-->Sabere uth ke mere sir me dard aur pet me gas .. bechaini ki sabera jaldi ho gaya.. tension ki yogesh different logo ki madad se mujhey roz rok lete hain.. mere kaam ka koi appreciation nahi hai.. mera bhavishya andhkar me hai.. mera sharir ful raha hai..&nbsp; type ke kyal aate hain</li><li><!--block-->dosto ke calls hum nahi lete hain .</li><li><!--block-->Kal shaam ko Sheikh sir bol rahe they ki tum explain karmey me bahut darte ho</li></ul><div><!--block--><br><strong>02-May-2018</strong></div><ul><li><!--block-->Kal raat 1 may ko pf transfer ka request daal diye.</li><li><!--block-->Pichle 10 din se din me 5 rajni gandha aur 3 cig aur 4 badam milk aur samosa consume kar rahe hain . Lagbhag roz 300 atm card se aur 250 pocket money se kharch kar rahe hain</li><li><!--block-->Shaam ko 10 baje office se aaney par bhi raat me 12:30 sote hain</li><li><!--block-->Subah sir bhari lagta hai.. pet phula hua lagta hai .. man ashant rahta hai..der se uthey ki feeling aati hai..</li><li><!--block-->Ye sab mere galat routine ke karan</li><li><!--block-->Aaj sochte hain ki atm card lekar nahi jaayein</li><li><!--block-->Aaj humko pf ke liye office me baat karni hai..</li><li><!--block-->Ghar se printout nikana hai</li><li><!--block-->Resolve aur qaa ka dashboard banana hai..</li><li><!--block-->Resolve ka downtime detail share karna hai</li><li><!--block-->Gainmanager dashboard publish karna hai</li><li><!--block-->Gainmanager ka wo deployment karna hai</li><li><!--block-->Ucsr ka video dekhna hai</li><li><!--block-->Pulse ka video dekhna hai</li><li><!--block-->Gym ke liye 7 baje nikle.. vaha ja ke cycling ke dauran meri uss ladki se baat hui jisko hum roz dekhte hain.. usney mujhey pankha chalaney ko kaha..</li><li><!--block-->Hum Ashok gym trainer ki madad se pankha chala diye..</li><li><!--block-->Warmup excercise ke baad jab scheduled shoulder exercise karney gaye tab man me khyal aaya ki hum bahut din se body part ka excercise nahi kiye hain.. yaad nahi hoga.. kaise puche trainer se.. finally shoulder ka excercise nahi kiye...</li><li><!--block-->Mera man acha kaam karney se rokta hai aur bura kaam karney ko bechain ho jata hai</li><li><!--block-->Gutkha khane ko le ke aaj Yashwant Kirti Fayazuddin Yogesh Sheikh sab ne criticism kiya.. now its time to quit this habit</li><li><!--block-->Fayazuddin ne kaam bhi nikalwa liya aur bol bhi diya.</li><li><!--block--><strong>Agar aaj gutkha ka cup nahi hota to hum 8 baje hi nikal jate</strong></li><li><!--block-->Jab mujhey samajh me aa gaya hai ye log mera majak udate hain .. mujhey jaldi jane nahi dete.. baad me meri galati nikalte hain..</li><li><!--block-->Tab bhi mai khud ko change kyu nahi kar pata..</li><li><!--block-->Tab mere mann me khyal aata hai ki hum inse chhal sikhney aaye hain.. man handling me ye bahut jaruri hai.. aur mann me ek vishwas aata hai ki apna kuch gawa ke hum aadmi pehvhanana sikh rahe hain</li></ul><div><!--block--><br><strong>01-May-2018</strong></div><ul><li><!--block-->Aaj ki shaam bhi unique thi.&nbsp; Sikandar pur se jis gaadi me baithey wo masjid more ke garjne laga ki hardware chhorney ke 10 rs aur lega.. humko gussa aaya par chup ho gaye shri krishna ki kripa se.. phir hardware pahuch ke usney paise bhi nahi liye..</li><li><!--block-->Aage metro more se gaunchi tempu wale ne bhi 5rs hi liye..</li><li><!--block-->Ghar aa ke maa ne chehre pe khushi dekhi toh wo bhi khub baat ki..</li><li><!--block-->Boli ki usko vishwas tha ki hum dhire dhire shant ho jayenge..</li><li><!--block-->Raat me Swtlana tulasi ka russian media me Indian classical performance dekhe.. laga kahi toh India jinda hai .. acha laga</li><li><!--block--><strong>Good wala night</strong></li><li><!--block-->Subah 6 baje uthey.. uth ke as usual nind puri nahi hui thi.. alas aa raha tha.. papa ka gutkhaa&nbsp; chura ke khaye.. dawa chai piye.. 7 baje gym ke liye gaye.. packet wale dahi laaye</li><li><!--block-->Gym jane aalas aa raha tha.. man me vichar aa raha tha ki aaj late ho gaya h.. 7:30 tak toh hum ko gym se vapas aana tha .. ab tak gaye hi nahi..</li><li><!--block-->Gutkha khane ke liye man ko rokney par man me khyal aata h ki kitna der nahi khayenge.. phir toh khana hi hai</li><li><!--block-->Kal pf wala kaam bhi nahi kiye</li><li><!--block--><strong>Aaj gym me weight kiye 71 kgs.. ghatney ki jagah badh gaya hai</strong></li></ul><div><!--block--><br><strong>30-Apr-2018</strong></div><ul><li><!--block-->29 April ko shri lal chacha ke pass gaye they.. unko jis hisab se chot aayi thi aur jitna loss hua tha car chinn gaya tha paisa maal lut gaya tha uss hisab se wo dukh ko bardasht karke phir bhi listeninig mode me hi they... wo shant they aur phir bhi sab ke sawalo ka jawab de rahe they... unka shant rahna mujhey accha laga... chinta unko bhi hoti hogi.. par wo chinta jahir kar ke dusro ko dukhi nahi kar rahe they..</li><li><!--block-->Mere papa aur hum toh patience kho dete hain..</li><li><!--block-->Ek chuppi sau dukh dur rakhti hai.. shri lal ji se yahi sikh milti h</li><li><!--block--><strong>09999699415 -&nbsp;</strong>Deepak nephew of shri lal chacha</li><li><!--block-->Subah me hum gym nahi gaye<ul><li><!--block-->Papa kuch nahi bole</li><li><!--block-->Maa bhi kuch nahi boli</li><li><!--block-->Hum vaishno devi ki aarti sunte huye maa se mange ki aap mera man sthir kijiye.. aur ek ghante vahi nind aa gayi</li><li><!--block-->Maa uthney ke baad boli ki kal sab accha raha..hum commit kiye ki hum hi galat kiye hain kal</li><li><!--block-->Aaj jaisa din mere liye unique hai</li><li><!--block-->Maa maa bhagwati papa sab ko dhanywad</li></ul></li></ul><div><!--block--><br><strong>29-Apr-2018</strong></div><ul><li><!--block--><strong>Sri lal ji ke ghar ka pata</strong><ul><li><!--block-->B6-104/105,Rohini sec 11</li></ul></li><li><!--block-->Subah me humko shri lal ji ke pass janey ka mann nahi tha.. papa ke kahney par shaving karwaney gaye</li><li><!--block-->Phir aaney ke baad papa ko directly bol diye ki humko janey ka mann nahi hai... par ye papa maa maaney nahi.. phir humko bhi laga ki hum jyada jidd kar rahe hain.. hum taiyar ho gaye</li><li><!--block-->Shri lal ji ke ghar 11 baje pahuche. Unki beti poonam didi jaisi lagti hai.. shri lal ji ki poti aur natini , anvi aur chavi se baat hui..</li><li><!--block-->Vaha mera man nahi lag raha tha.. papa aur shlg ke baat ke bich hum bol diye ki humko papa ki baat boli acchi nahi lagti...</li><li><!--block-->Baad me papa ka shikayat bhi kiye ki inse koi mithi boli bol leta hai toh ye flat ho jaate hain...</li><li><!--block-->Vaha se khana kha ke hum log 3:30-4 baje nikle..</li><li><!--block-->5:30-6 baje ghar aa gaye hum log..</li><li><!--block-->Avinash ko chhorney pul tak bike se gaye.. raste me wo sec55 market se apni beti ke liye saaman kharida.. humse aaj chup kyu they ye puch raha tha... hum usko bol diye ki shlg ke fuli lal aakh dekh ke mera man dukhi tha..</li><li><!--block-->Usko drop kar ke mother dairy se dudh liye.&nbsp; Ice cream khaye aur ghar aa gaye</li><li><!--block--><strong>Kal shaniwar ko Bipin chacha shaam ko meat bana ke khilaye they..</strong></li></ul><div><!--block--><br><strong>28-Apr-2018</strong></div><ul><li><!--block-->27 April ko shaam ko sanjay se baat kiye. Wo bhi madharchod jaisa ladki walo ki statement ko powerful bata diya. Hum sirf gaddaro se hi ghire hain.</li><li><!--block-->Sanjay se bhi ab kuch nahi batana. Actually ab office me kisi madharchod ko apna marital issue nahi batana. Sab saale majak hi banate hain.</li></ul><div><!--block--><br><strong>27-Apr-2018</strong></div><ul><li><!--block-->Gym se 9:30 tak aaye.. subah me thori der laptop par 8 baje tak baithey rahe.. Akshay kant ko mail bheje for gainmanager...</li><li><!--block-->Yogesh ke bhai Neeraj ka phone aaya tha.. kab nikenge... unhoney bata pul aane ko kaha.. 10:30 me bata pul pahuchey.. unko saman diya.. unhoney Yogesh ko dene ke liye ek packet diya.. Neeraj se mere personal issue ki baat hui.. unka suggestions tha ki chhor do wo khud hi line pe aayenge.. unse request kiye ki hum aapko vakeel ka details denge.. aap thora pata kara dena ki vakeel humko double cross to nahi kar raha.. Neeraj ne humko Neelam pul chor diya...</li><li><!--block-->Ghar se nikalte huye papa ne maa se kahalwaya ki hum pf loan ka pata kare..</li><li><!--block-->12 baje office pahuche..</li><li><!--block-->Din me office me Sheikh se pf loan ki baat hui..</li><li><!--block-->Retiral team se bhi baat hui.. pahle pf transfer karney ko kaha..</li><li><!--block-->Shaam ko kirti ke sath chai piye aur apni kahani suna diye.. ek ladki ke dhokhey ki kahani dusri ladki ko kah sunaii.. mera man usko apni kahani suna ke aur bechain ho gaya aur hum 8 baje office se nikal gaye.</li><li><!--block-->Raat me maa se baat hui.. maa ko bataye ki pf loan ke liye baat kiye hai 15-20 din lagenge..</li><li><!--block-->11 baje sone aaye.. raat me ac nahi chalaye... laptop pe kaam karney ki iksha nahi hui..</li><li><!--block-->Video dekhe aur so gaye...</li><li><!--block-->27 april ko 6 baje uthey.. dawa chai pi ke .. bathroom se aa ke ..apni ram kahani likhney lage..</li><li><!--block-->7 baje gym ke liye nikle.</li><li><!--block-->22 april se 26 april roz ka kharcha 200 rs pocket se aur 300 rs atm se hai</li></ul><div><!--block--><br><br><strong>26-Apr-2018</strong></div><ul><li><!--block-->25 April ko hum subah me gym ke liye 6:30 me nikle...</li><li><!--block-->Raste me humko dadaji mil gaye.. wo bole ki tum kal aggressive kyu ho gaye they.. hum bayaye ki papa humko ghar se janey ke liye kahte hain.. hum yahi bardasht nahi kar paye... Chanpatia wale 4.5 lac ki jagah 9 lac rupees mangney lage hain.. dadaji ne kaha ki unka lalach badh raha hai.. wo vakeel se baat karney ke liye bole..</li><li><!--block-->Phir hum chacha ke pass gaye unko 24 April ko court ladki aur venkatesh ka bataye... chacha ne green tea pilaya... papa ke liye bole ki tuhar papa se koi mitha baat kar le toh usse acha iss duniya me koi nahi hota.. papa ke bare me galat aur ugra bhavna jo mere me hai uska Ek karan ye chacha bhi hain.. unke pass se 7:45 me hum nikle... gym gaye ... 9:15 tak gym kiye... ghar aake office gaye..</li><li><!--block-->Office me gm rj ki rfc pe kaam kiye..&nbsp; shaam tak follow up kiye...</li><li><!--block-->Shaam ko as usual humko uljhaney ke liye Yogesh ne Yashwant ko newrelic ucsr bataney ko kaha.. 10:15 tak ghar aaye... maa se pata chala ki bipin chacha aaye they..</li><li><!--block-->Khana khaye... tv dekhe... 12 baje soney chale gaye... mb kiye</li><li><!--block-->26 april ko 7 baje uthey aur uth ke apni kal ki story likhi..</li><li><!--block-->25 April ko subah me dadaji ki Narendra se bhi baat huyi thi.. jarurat padney par gawahi dene ki bhi baat huyi thi..</li></ul><div><!--block--><br><strong>25-Apr-2018</strong></div><ul><li><!--block-->Kal humko kya ho gaya tha?<ul><li><!--block-->Un logo ko dekh ke man me aag lag gaya tha. Bahar papa ko un logo se phir se baat karte dekh humko apney man me aag lag gaya. Humko laga ki ye phir se kaam bigdega..&nbsp; papa kisi ko 10 baat bol sakte hain.. par kisi ka bura nahi kar sakte.. papa apni baat me khud hi fas jaate hain.. hum apney man me dukhi they ki mere sath ye kya ho gaya.. hum apney man me sahi they.. papa apney kiye ko sahi saabit kar rahe they..</li><li><!--block-->Narendra dono baap beta ki baat sambhal raha tha.. hum mauka dekh rahe they ki papa ko kaise chup kare...</li><li><!--block-->Vakeel pe papa pe aur khud pe bhi mera awishvash hi kal mere ugra hone ka karan tha..</li></ul></li></ul><div><!--block--><br><strong>24-Apr-2018</strong></div><ul><li><!--block--><strong>Rakesh Chanpatia ka dost</strong><ul><li><!--block-->Venkatesh</li><li><!--block-->Jehanabad</li></ul></li><li><!--block-->Aaj 24 April 2018 ko meri divorce case ki sunwai thi... hum 9 baje tak gym se aake taiyar ho gaye they.. phir papa humko vakeel ke pass nikalney ko bol diye they...</li><li><!--block-->Papa aur Narendra piche se aail ha log.&nbsp; Hum vaha pahuch kar vakeel ko call kiye.. wo humko seat par baithney ke liye kahe..</li><li><!--block-->Seat par pahuch kar humko vakeel nahi mile.. phir hum unke chamber pe chale gaye.. vaha pahuchte vakeel se mulakat ho gayi hai..</li><li><!--block-->Vakeel ke sath seat par aaye..seat par aate huye hum vakeel se bole ki taarikh thoda jaldi jaldi lijiye.. vakeel ne koi reply nahi diya... phir unhoney humko judge ke court ke pass janey ko kaha.. wo bole ki tum call kar lena jab tumhara naam pucha jaye...</li><li><!--block-->Hum Narendra ko call karke bata diye ki hum court me ja rahe hain...</li><li><!--block-->Thodi der me Narendra aaya aur bataya ki Chanpatia wala sab ladki ke sath aaya hai sab..</li><li><!--block-->Court me hum baith kar judge ko dekh rahe they.. phir uska vakeel ladki aur uske bhai sab apney dost log ke sath aaye they... hum apney vakeel ko call karney ko bole..</li><li><!--block-->Vakeel ke aaney me late tha... humko vakeel ke late se aaney par uss ke upar bahut gussa aa raha tha.. hum Narendra se bole bhi ki humko vakeel pe shakk hai ki wo kahi hum log ko hi double cross na kar de. .</li><li><!--block-->Meanwhile judge ne mera naam pukara... uske vakeel ne ragini kumari aur khud ko introduced kiya..phir judge ne Premendra aur uske vakeel ke liye rukney ko kaha... hum bahar aakar vakeel ko call kiye aur uske phone nahi uthaney par hum usko message kar diye ki...</li><li><!--block-->\" Hi sir<br>Please come.. judge is asking for me... \"</li><li><!--block-->Pahle mere judge ki assistant dikhi ...phir usko dekh kar hum uss se puchey ki vakeel sahab aa rahe hain... usney kaha ki haa.. tab usi assistant ke sath hum judge ke pass chale gaye... judge ne jab Premendra Ragini kaha aur us ladki ko mainey khud ke samney dekha toh hum full depression me feel karney lage... kya se kya ho gaya... aaj wo mere samney khadi hokar mujhey barbaad karney ka attempt kar rahi thi...</li><li><!--block-->Mere se judge sahab ne pucha ki... haaji Premendra kya problem hai... mainey ek baar apne vakeel ki assistant ko dekha... phir uske ha bolne par ki vakeel sahab aa rahe hain.. tab tak tum apni baat bolo...</li><li><!--block-->Mainey kaha ki sir meri shaadi ko 3 saal ho gaye hain... par mushkil se ye 6 mahiney bhi mere sath rahi hogi... baar baar suicide attempt karti hai... iske pariwar wale bhi meri family ko threat karte hain... aaj lagatar 2 saal se ye mere sath nahi rah rahi hai...isiliye mainey ab divorce ki petition daali hai...</li><li><!--block-->Phir wo ladki boli ki \"meri shaadi 3 june 2015 ko hui hai... shaadi ke ek week baad se hi ye humko bahut marte they... ye jo faasi wali baat bol rahe hain wo jhuth hai... hum sath me rahna chahte hain\"</li><li><!--block-->Jab uski baat khatam hui tab hum dekhe ki mera vakeel bhi aa gaya tha...</li><li><!--block-->Phir mere vakeel ne humko bahar jaaney ko kaha...</li><li><!--block-->Hum bahar aaye toh dekhe ki papa unke group se kisi venkatesh se baat kar rahe they... phir mere vakeel aaye toh unhoney humko niche baithney ko kaha...</li><li><!--block-->Tab wo log bhi alag ho gaye...</li><li><!--block-->Hum papa aur Narendra vakeel ke seat par aa gaye..</li><li><!--block-->Vaha vakeel ne Chanpatia walo ka statement copy karaney ko de diya...</li><li><!--block-->Copy kara ke aaye tab tak Chanpatia wali ke dost log phir se papa aur Narendra se baat karney lage...</li><li><!--block-->Unme se ek vekatesh from jehanabad..jo ki khud ko vaha ke ek mla ka saala bata raha tha... papa se paise ke liye baat karney laga...</li><li><!--block-->Hum bahut gussa huye... hum unko yaar bhi bol diye... ladki ke jija prem ko bhi bata diya... papa ko humesha ki tarah hum hi bure lage... papa chup honey ka naam nahi le rahe they... humko unka baat karna accha nahi lag raha tha...</li><li><!--block-->Hum ye bhi bole ki ye log abhi humari baat sun rahe hain... phir humare hi khilaf gawah ban jayenge...</li><li><!--block-->Jaise taise baat khatam huyi... Narendra se unhoney number exchange kiya...</li><li><!--block-->Phir hum bole ki ek baar vakeel se baat kar lo... meanwhile hum papa ke pass khade they... vakeel ne shaam ko milney ki baat kahi...</li><li><!--block-->Ghar par hum paglo jaisa sab se Narendra Rimjhim maa aur papa se jhagra kiye...</li><li><!--block-->Maa ko thappad mare.. papa ko gali diye.. Narendra ko mare... Rimjhim ka baal khiche...</li><li><!--block-->Ghar se bhagney ki koshish kiye...</li><li><!--block-->Aaj ghar me kohram ho gaya tham.. phir hum 4:20 par office me message kar diye ki aaj hum leave pe hi hain...</li><li><!--block-->Phir tab se yaha park me baithey hain... ye park sbi ke piche hai...</li><li><!--block-->Meri jine ki ikshha nahi hai...</li><li><!--block-->Rimi ko Narendra ko sharape ki tum log bhi ek din aise hi rowoge.. papa ek din tumko bhi aise hi dhokha denge...</li><li><!--block-->Mera dimag kharab ho gaya tha... baar baar papa ko bol rahe they ki tu aakhir u sab se baat kyu kaila...</li><li><!--block-->6:30 me Narendra ne bataya ki vakeel 7 baje ke baad milney ko bulaye hain.</li><li><!--block-->Vaha vakeel ne baat kiya aur kaha ye kagazi karwahi hai.. chalney do 2-3 saal chalega... aap log paise dene ke liye razi hain?</li><li><!--block-->Narendra ne 4.5 lac ka said and agreed amount bola aur vakeel ne kaha ki wo 7 din me unke vakeel se unka estimation puchenge...</li><li><!--block-->Aane ke baad venkatesh se jahanabad wala se baat hua Narendra ka wo 4 lac gahna plus 5 lac khorish ka baat kiya... total 9&nbsp; lac... Narendra ne kaha ki ye jyada amount hai.. papa se baat karenge aur isme unke papa se bolo involved hone ko.. guardian level ka baat hona chahiye.. venkatesh ke papa teacher hain.. wo iss baat ko sweekar kiya...</li><li><!--block-->Papa sab sunke fir se khud ko sahi saabit karne lage... humko acha nahi laga aur hum bahar ghumney aa gaye..</li><li><!--block-->Baaki dekhte hain aage kya hota hai... dekhte hain aage bhagya me kya acha likha hai..</li><li><!--block-->Din me papa ko hum bol diye they ki hum aapko kabhi pujte they... ab aapse nafrat karte hain...</li><li><!--block--><strong>Next hearing date 13 August 2018 hai</strong></li></ul><div><!--block--><br><strong>23-Apr-2018</strong></div><ul><li><!--block-->Shaam me fayaz ne sms kiya. Vahi puch raha tha.. are you there.. uske pass ek issue tha jisko wo daba ke baitha tha... jab usse nahi hua tab usney wo mere sir par madh diya...</li><li><!--block--><strong>Yaha se mujhey ye sikh milti hai ki</strong>&nbsp;kabhi fayaz ki baton me mat aao aur sirf help karney ke naam par overtime mat karo..&nbsp; ye log sakro baar mere se aise hi help le lete hain aur phir jab unse nahi hota hai tab mujhey time bita kar fasate hain...</li><li><!--block-->Jab off time me ye koi issue bole toh inko bolo ki mail kar de.. kyuki kal ke help ke baad bhi kisi ko kaha clear hoga ki maine kuch kiya hai.. ye log chalu hain.. help le ke credit kha jate hain..</li></ul><div><!--block--><br><strong>22-Apr-2018</strong></div><ul><li><!--block-->Subah me man me khyal aaya ki ek doha hai<ul><li><!--block-->Ekay sadhe sab sadhe sab sadhe sab jaye..</li><li><!--block-->Mujhe koi ek important goal achieve karney ki try karna chahiye</li><li><!--block-->Mera exercise karne ka man nahi karta.. sirf maa ke muh par shikan aa janey se hum raji ho jate hain.. finally apni ikshaa nahi hai.. isiliye aaj 2 saal baad bhi body sahi se shape me nahi aayi hai</li><li><!--block-->Office me 20 April ko fayaz ne meri taarif ki thi ki hum code par bahut jaldi pahuch jate hain</li></ul></li><li><!--block-->Vaqueel ke pass janey ki aaj bhi ikshaa nahi ho rahi..&nbsp;<ul><li><!--block-->Humko apna life waste lag raha hai.. hum shakki ho rahe hain.. khud se khush nahi hain.. office bhi nahi jana chahte.. mera koi dost nahi hai... hum jab kuch karte hain bura hi karte hain.. bura hi muh se nikalta hai.. lagta hai ki mera focus sirf buri chijo pe hi hai.. man me ek ikshaa hai ki jo routine mainey banaya hai usko follow karu.. par jab implementation ki baat aati hai toh hum sirf apne man me bechaini feel karte hain.. sone ke ikshaa hoti hai.. pet humesha bhari lagta hai.. dimag me negative vichar hi aate hain.. man karta hai sab chor char ke kahi bhag jaye..</li><li><!--block-->Jab kisi se baat karte hain toh lagta hai ki wo sirf meri galatiyan nikal raha hai.. humko man me lagta hai ki wo mujhe bura samajh raha hai.. humko ye bhi lagta hai ki hum usko apni baat nahi samjha paye...</li><li><!--block-->Humko sirf bura hi feel hota hai.. man me sirf bechaini hoti hai..</li><li><!--block-->Papa se baat karney jate hain toh lagta hai ki wo sirf meri burai dekh rahe hain.. humko sirf gaali de rahe hain..</li><li><!--block-->Akele rah ke bhi dekh liya hai.. humko akele bhi khud ko manage karna nahi aata.. galat sangat se khud ko bacha nahi pate.. sahi log se meri baat chit band ho jati hai..</li><li><!--block-->Sab pe hum shakk karte hain</li><li><!--block-->Maa bhagwati se sirf khud ko maar dalney ke liye kahte hain..</li><li><!--block-->Maa bhagwati se sirf khud ko maar dalney ke liye kahte hain..</li><li><!--block-->Gutkha chorney ke liye sochte hain.. par 1 ghante bhi gutkha chorney par man bechain lagney lagta hai..</li><li><!--block-->Atmahatya karne ka sochte hain par&nbsp; 2 minutes saans rokney par hum bechain ho jate hain</li><li><!--block-->Mai apni life me haar chuka hu.. ab meri sarkari naukri nahi ho sakti.. dost sab mere se aage nikal gaye.. personal aur professional dono me.. sabke baal bacche ho gaye.. shaadi ho gayi.. sab senior position pe chale gaye..</li><li><!--block-->Mere papa ne jaise delhi ncr me ghar kar diya hai.. agar koi layak beta hota.. agar wo ias ips ya kisi aur sarkari job me hota toh papa ke shaan me char chand laga deta...</li><li><!--block-->Par hum papa ke delhi aaney ka wait kar rahe they ki ye log aayenge toh meri life me kuch accha hoga.. humko help hogi..</li><li><!--block-->Apni baat hum nahi manwa pate.. phir gussa ho jate hain tab meri baat suni jati hai.. baad me khub sunne ko milta hai.. sun ke lagta hai ki koi mere se khush nahi hai.. koi mere se baat nahi karna chahta.. sab bas apna koi matlab dekh rahe hain..</li><li><!--block-->Kisi se baat karte hain aur agar wo sawal puchne lagta hai ki kya kyu kaise kyu nahi toh bhi lagta hai ki hum sirf buddhu ban rahe hain.. ye mere di hui information ko ek din mere khilaf hi use karega... life kuch bhi acha hota nahi dikhta...</li><li><!--block-->Hum apni baat nahi rakh pate..khud par humesha shakk rahta hai.. man humesha dukh feel karta hai..</li><li><!--block-->Hum sirf paise ki barbadi karte hain</li><li><!--block-->Kabhi kabhi man me khyal aata hai ki jitna gutkha humko khaney ke iksha hoti hai utney ka juice piyenge.. gutkha avoid karenge..</li><li><!--block-->Par phir sochte hain ki hum ko toh din bhar me kam se kam 10 15 baar gutkha khaney ka man karta hai.. din bhar muh me gutka bhar ke rahte hain.. is tarah humko kitna rupuya ka juice puna hoga.. vaise bhi hum gutkha kha hi lenge ... phir juice pina mere liye additional cost hoga...</li><li><!--block-->Mujhey buri chijo se utni hi nafrat hai jitni dusre kisi ko... par agar hum aaj ki date me gutkha nahi khate toh mera man bechain ho jata hai.. kisi kaam me man nahi lagta... gussa aata hai.. kisi ki baat acchi nahi lagti...</li><li><!--block-->Aur gutkha thuk ke bhi hum fir bechain ho jate hain... galati ho gayi..&nbsp; ab muh mahkega.. chacha ke pass bhi nahi ja sakenge.. unko pata chal jayega ki hum gutkha khaye hain.. maa ko mahak jayega ki hum gutkha khaye hain... rimjhim ko mahak gaya toh wo maa se shikayat kar degi.. maa ko&nbsp; aur dukh hoga... papa ko mahak gaya toh wo baad me maa ko baato baato me kuch suna denge... ek na ek din mujhey bhi kuch na kuch bol hi denge... office me logo ko ek baar phir mera majak banane ka mauka mil jayega.. kirti anshul fayaz yashwant ashok kamlesh naresh yogesh harish sab meri burai karenge... hum ko khud me bhi bura feel hoga..</li><li><!--block-->Itna sochte sochte hum time kill kar dete hain... tension me aa jate hain aur bechain ho jaate hain aur phir gutkha kha lete hain.. phir vahi bechaini.. nind lagna.. pet phulna.. pet ka bhari lagna.. man ke vahi bure vichar.. dusro ke samney meri galati ke ujagar honey ka bhay... meri khud ko sambhal nahi pane ka gam... tension bechaini.. apney bite vaqt me ki gayi galatiyan.. apne life carreer me piche honey ka gam.. aur muh mahakna.. apna tay routine follow na kar pane ka gam.. aur last me ek aur pudiya.. aur phir vahi chackra. &nbsp; Life ko hell bana li hai mainey... bhukh nahi lagti.. man bechain rahta hai.. biti life ke kadwe pal yaad karta rahta h... dusro par shaak karta hai... khud pe rota hai.. maa bhagwati se apney maut ki iksha karta hai... thodi der me maan jata hai.. phir gutkha khata hai.. phir vahi cycle..</li><li><!--block-->Agar mai gutkha kharid ke khana chod du toh papa ke gutkha ko khaney lagta hu... fridge me se khaini nikal ke khata hu...</li><li><!--block-->Meri life ab mere liye bas ek bojh ban gayi hai... mai apni life barbaad kar chuka hu... mai sirf dukh rota rahta hu aur phir aise karm karta hu jisse meri life me ek aur bura chapter add ho jata hai..</li><li><!--block-->Mai mar jana chahta hu .. ya itni dur chala jana chahta hu ki maa papa ko mere se jo dukh hua hai wo kam ho jaye&nbsp; .. wo mujhey bhul jayein..</li><li><!--block-->Kabhi kabhi man halka lagta hai.. lagta hai ek din mujhey apne inn vicharo pe hasna aayega.&nbsp; Sochenge ki kya kabhi hum aisa bhi sochte they..&nbsp; par pata nahi wo din kab aayega...</li><li><!--block-->Park me akele baith ke bhi man halka lagta hai.. iska accha effect hota hai..</li><li><!--block-->Park me akele baith ke.. jab koi sath me na ho. &nbsp; Panchiyon ka chahchahana baccho ka jhule pe jhulte dekhna.. acha lagta hai.</li><li><!--block-->Abhi hum subah me 8 baje se bahar nikle hain.. maa ney gym jane ke liye bheja tha aur hum ghar se bahar nikle par gym janey ka man nahi kiya... yaha sbi bank ke piche wale park me baithey they... phir chole kulche aur raita khaye.. juice piye aur gutkha khate huye khud ko galiyan likh rahe hain...</li><li><!--block-->Mujhey bechaini kab hoti hai... ya ye khu kab nahi hoti... yaani hamesha hoti hai</li><li><!--block-->Jab gale me taar jausa feel hota hai aur pyaas lagti hai</li><li><!--block-->Jab sir dukhta hai.&nbsp;</li><li><!--block-->Jab kisi baat pe shok karte hain</li><li><!--block-->Jab gutkha muh ke bhitar hota hai</li><li><!--block-->11:30 tak baal daadhi banwa ke aaye Aur aake so gaye.. uthey 2 baje.. prasad aur pani piye... fir gutkha khaye...</li><li><!--block-->Man me uthte hi pahla khyal aaya ki maine fir se time kill kiya hai.. galati ki hai..&nbsp; uthte hi gutkha khaney ki iksha hui thi... man me ye bhi vichar aaya tha ki mere sir par shaitan sawar hai aur wo mujgse sirf galat kaam karwa raha hai... mujhe frustrated kar raha hai</li></ul></li></ul><div><!--block--><br><strong>21-Apr-2018</strong></div><ul><li><!--block-->21 april tak hum night shift kiye. Khub sara videos download kiye ab aage unko dekhna hai..</li><li><!--block-->Shaam ko vaqueel ke pass aaye. Pahle mera aaney ka man nahi tha.. phir maa ke gussa honey par hum bahar nikalney ko taiyar ho gaye...<ul><li><!--block-->Pahuchte pahuvhte bhi aaney ka man nahi ban raha tha.. phir 8:05 me vaqueel ke pass pahuche</li><li><!--block-->Man me bas acchi bhavnayein le ke vaqueel ke aaney ka intezar kar rahe hain...</li><li><!--block-->Abhi agar shaam ko hum ghar se nahi nikalte toh shayad maa rimi se jhagra kar lete... isiliye ghar se nikle... phir man me aaya ki hum kuch der ghum kar vapas chale jayein... par aaj tak maa se beimani nahi kar paye hain aur humesha meri chori pakri gayi hai.. isiliye thoda thoda kar ke aakhir yaha vaqueel ke pass pahuch hi gaye...</li><li><!--block-->Thodi der intezar ke baad vaqueel ki wife phone layi aur vaqueel se baat karwayi. Vaqueel ne baat kiya aur kaha ki aaj mai bahar hu. Aapko phone karke aana tha..kal court me milo.. kal bhi court khula hai.. janta darbar hai</li><li><!--block-->Ghar pe aake maa se jhagra kiye ki tum humko jabardasti kyu bheji</li><li><!--block-->Raat me 12:30 par soye</li></ul></li></ul><div><!--block--><br><br><strong>18-Apr-2018</strong></div><ul><li><!--block-->Kal kuch khas nahi kiye...<ul><li><!--block-->Aaj 2 ghanta angular4 ka video learn kiye.</li></ul></li></ul><div><!--block--><br><strong>17-Apr-2018</strong></div><ul><li><!--block-->Jab humko gutkha khane ka man karta hai aur hum subah se prann kiye huye hain ki gutkha nahi khayenge.. tab mere gutkha khane ke liye badhe kadam ko rokne ke liye .. mann se aawaz aati hai ki \"jo hum subah se bhagwan se apni galati ki maafi maang rahe they.. aage galati na karne ki baat kah rahe they .. wo kya tha...\"&nbsp; Tab mere hi man ke dusre kone se aawaz aati hai... jaise koi hass raha ho.. shaitan ki tarah.. aur jawab deta ho ki... \" jo hum soch rahe they wo jhuth tha..&nbsp; chalawa tha..\"</li><li><!--block-->Mera mann isko sunkar jaise haar jata hai aur ek gulam ki tarah fir se galati karney ko taiyar hone lagta hai..</li><li><!--block-->Kal 16 April ko meri night shift thi.. raat bhar jage rahe.. nind nahi aayi.. raat me ticket handling ki aur resolve ki report nikali aur zetta ke issue dekhe.. aur gutkha khaye.. cig piye..</li><li><!--block-->Subah me Sandeep singh ke aaney par hum uske sath niche aaye aur cig aur rajni gandha khaye.. kal ka kul kharcha 350 rs pocket se hai.. subah ghar laut ke aane tak</li><li><!--block--><strong>Confession</strong><ul><li><!--block-->Mai kafi bigda hua hu.. hamesha galat pe hi focus rahta hai.. buri chije chorney ke liye sochta hu.. naam buri chij ka lete hain toh achi chijo pe focus nahi ho pata.. meri achai kisi ko nahi dikhti..</li><li><!--block-->Ist/novelvox me mera shoshan hua.. unhoney itni achi application banwali aur meri salary nahi badhai.. fir Concentrix me dhokha kha gaye.. uske baad Mumbai chale gaye .. uha bhi man sthir na tha.. bure logo se sangat ho gaya..</li><li><!--block-->Burai mujhey khichti hai aur achai se hum bore ho jate hain..</li><li><!--block-->Ab jine ki iksha hi nahi bachi hai..</li><li><!--block-->Soche they wife aayegi toh kuch acha hoga life me.. par wo bhi matlabi nikli.&nbsp; Atmahatya kar ke baatein manwana chahti thi..</li><li><!--block-->Meri life me kuch nahi bacha hai..</li><li><!--block-->Par mai mar bhi nahi sakta.. mere dhokhe se family vaise hi dukhi hai.. maine bhagwan se hamesha family ki khushhali mangi thi.. par meri dua me shakti nahi thi...</li><li><!--block-->Ab hum jina nahi chahte</li></ul></li></ul><div><!--block--><br><strong>16-Apr-2018</strong></div><ul><li><!--block-->Ek din me pahad toeney aur dusre din se usi kaam se ghrina ke karan hum ultimately success ke apney goal se bhatak jate hain.</li><li><!--block-->Shuru se hi hum khud me hi khoye rahte hain... kuch batein man me dabe honey se aur ye sochney se ki \"pata nahi papa ko batayenge toh kya reaction hoga\" hum darr jate they</li><li><!--block-->15 April ko shaam ko 2 litre doodh aur 10000 rs nikalney gaye.. tab pramod ist wale se mulakat ho gayi.. usko bata diya ki hum vapas Concentrix me assistant manager banke vapas aa gaye hain<ul><li><!--block-->Usne mere se baccho ke liye pucha toh mainey bol diya ki Bhagwan ne abhi rok laga di hai</li></ul></li><li><!--block-->Kal 7 ghante video dekhe... raat me last me akbar birbal dekhe.. aaj kya kar raha hu.. man thora bechain hai.. meri life aisi kyu hui.. kyu meri life me Pappu babloo mukesh aur mukesh ke chote bhai aaye.. meri life ki chuppi ka karan vahi pe hai.. waha se hi galatiyan enter hui meri life me.. kisi se kuch baat na karna.. chupp aur khoya khoya rahna.. kisi ki baat ka jawab nahi de pana</li><li><!--block-->Jiwan me sirf udasi dikh rahi hai... kash hum 2009 me delhi nahi aaye hote.. ya aa ke jaise bipin vapas chala gaya tha vaise hum bhi laut gaye hote .&nbsp; Ya pankaj ke sath nahi rahe hote... ya jaise mere baaki branchmates chale gaye vaise chale gaye hote toh aaj jo mansik kasht jhel rahe hain vo na jhelte</li><li><!--block-->Aaj family delhi me fas gayi hai... mujhey apna future andhkar me dikh raha hai.. kuch samajh nahi aata kya karu.. mind concentrate nahi kar raha</li></ul><div><!--block--><br><strong>15-Apr-2018</strong></div><ul><li><!--block-->15 April ko subah sapna aaya ki hum Chanpatia walo ke ghar pahuch gaye.. waha koi ladki ki hatya ho gayi thi.. uske pati ne uske Gupta ang ko damage kar ke usko mara tha</li><li><!--block-->14 April ko Bipin chacha mutton le ke aaye they.<ul><li><!--block-->14 April ko 3-4 ghante javascript ka video dekhe..</li></ul></li><li><!--block-->15 April ko 5 ghante modern india aur 1 ghante modern pakistan video dekhe...</li><li><!--block--><strong>Mere me ek notice kiya hai ki</strong>&nbsp;<ul><li><!--block-->Hum bade kaam ko bhi ek din me hi khatam karna chahte hain... na ki 20-30 minutes ke daily intervals&nbsp; me tod ke... isse kaam ka 10-20 % kar ke thak jate hain aur agle din se karna chhor dete hain.. ya ek din me hi frustrated ho jate hain.. iska example aaj ka mera 7 ghante ke modern India history ka video ek hi din me khatam karne ki koshish hai.. 3 ghante baad siir dukh raha hai.. ab shaam ko tension ho raha hai ki baaki aaj nahi khatam kiya toh fir pending hi rah jayega.. papa soch rahe honge ki din bhar computer pe hi laga rahta hai.. mujhey ab shaam me tension ho rahi hai ki maa ki koi help nahi ki... itna time deke mainey kya sikha...</li></ul></li><li><!--block-->Aaj subah se 100 rs ka gutkha aur 50 rs shaving aur 100 rs extra kanji wada.. rajni gandha pe kharcha hai..</li><li><!--block-->Kal 14 march ko 150 rs ka kharcha hai</li></ul><div><!--block--><br><strong>14-Apr-2018</strong></div><ul><li><!--block-->Office<ul><li><!--block-->12 April ko office pahuchte hi resolve ka ek issue aaya.&nbsp; Jaate hi logs check karney ke liye Yogesh ka call aya. Mai din bhar usi me laga raha. Shaam ko fix available hua toh usko deploy karne ke liye rfc approve karney ke liye yogesh ne kaha. Fayaz ko ping kiya ki 8-10 support kar do usney mana kar diya. Mainey yogesh ko bataya. But usney koi help nahi bataya. Fir rfc ka kaam kar ke 10 baje office se nikle. 12 baje ghar pahuche. Mainey Yogesh ko late se ghar pahuchney pe message kar diya.</li><li><!--block-->12 april ko Harish se shaam me mere frequent night shift ke liye baat kiya. Usney koi satisfactory reply nahi kiya. Wo bole ki 3 Week ke baad tumko night shift me dala hai.</li><li><!--block-->13 ko subah mail kar diya ki i am not comfortable with frequent night shifts.</li><li><!--block-->Din me kuch jyada kaam nahi raha. Shaam ko yogesh aaye aur bole ki tumko nahi likhna chahiye tha ki tum jyada support karte ho.. tum extra kya kar rahe ho... 13 ko subah fayaz pyaar se baat kar ke mere se Yogesh harish ka shikayat kiya. Hum bole ki ye log mere mazboori ka fayda utha rahe hain...</li><li><!--block-->Shaam ko sanjay se baat hui.. wo bhi mere se hi defensive rah ke questions karney ko bole ..</li><li><!--block-->8:30 pm tak Ashok jhasya ki help kiye... eclipse php setup me</li><li><!--block-->Eclipse php setup me ashok ka help kiye. Phir 8:30 me office se nikal gaye</li><li><!--block-->Raat se agle din shaam tak tension me they ki pata nahi kya hoga? 14 April ki shaam ko sheikh sir ka mail aaya tah laga ki aage jo hoga acha hoga.</li><li><!--block-->Resolve down hua tha.. usmey help kiye...</li></ul></li></ul><div><!--block--><br><strong>12-Apr-2018</strong></div><ul><li><!--block-->Office<ul><li><!--block-->Sanjay ke sath core java, lambda expression ka baat kiye</li><li><!--block--><strong>Sheikh sir se baat kiye,&nbsp;</strong><ul><li><!--block-->wo active rahney ki baat kiye.&nbsp; Budhe jaisa mat raho ye bhi bole..</li></ul></li><li><!--block-->Shaam ko resolve ka deployment tha. Main work naresh fayaz Anshul ko karna tha</li></ul></li><li><!--block-->Subah me gym gaye they</li><li><!--block-->Kal ka total kharch 140 rs cash aur 105 rs atm se</li></ul><div><!--block--><br><br><strong>11-Apr-2018</strong></div><ul><li><!--block-->Kal 7:30 tak gym se aa gaye they.</li><li><!--block-->Office<ul><li><!--block-->Office 11 baje tak pahuch gaye they.</li><li><!--block-->Pure din me shaam tak pocket se 140+20 rs kharch kiye.</li><li><!--block-->20 rs fayaz se vapas liye they</li><li><!--block-->ATM se 85 + 95 rs kharch kiye</li><li><!--block-->Sanjay ne din me haldiram ka Raj-Kachouri khilaya</li><li><!--block-->Usse apne case ke bare me , yaha office ke challenges ke liye baat kiye</li></ul></li><li><!--block-->shaam ko 10:15 tak ghar aa gaye</li><li><!--block-->raat me plax kar ke aur laung muh me rakh ke soye</li><li><!--block-->subah me 5:30 me uthey</li><li><!--block-->dawa kha liye aur green tea pi liye</li><li><!--block-->7 baje gym ke liye nikal gaye</li><li><!--block-->kal 3 rajnigadha, 1 cig aur 2 shikar khaye</li><li><!--block-->Aaj kal se thori be chaini hai..</li><li><!--block-->but plax karney ka fayda hai</li><li><!--block-->11 apr ko 2 rajnigandha aur 1 cig piye shaam me</li></ul><div><!--block--><br><strong>10-Apr-2018</strong></div><ul><li><!--block-->Kal din me papa sudha fua ke husband Vinod fufa se rimi ke liye baat kiye. Wo help karenge. Fir babli didi aur Geeta mausi se baat kiye.</li><li><!--block-->Shaam ko hum office ka resolve jiffy ke liye call attend kiye. Resolve ke db ka version 11 ke liye upgrade hona hai. Fir shayad ye MSSQL pe move hona h. Version 11 ka testing mid may tak development team karegi.<ul><li><!--block-->Resolvejiffy ka deployment 11 April ko hoga.</li></ul></li><li><!--block-->Raat me sone ke samay splash kiye plax se. Sabere me bechaini kam hai.&nbsp;<ul><li><!--block-->Pet ka dard kam hai. Paikhana thik hi hua. Ab gym ke liye nikalte hain. Dawa aur green tea pina hai.</li></ul></li></ul><div><!--block--><br><strong>09-Apr-2018</strong></div><ul><li><!--block-->3 pm ko narendra rimi padmawat movie dekhne lage.. hum apna laptop khol ke 3 pm se 12:30 am night tak old movies download kiye..</li><li><!--block-->Shaam ko 6-7 baje motor se paani nahi aa raha tha.. hum dekh rahe they aur sikhna chah rahe they ki kya issue hai aur kaise solve kare? Tab tak papa aaye muh me gutkha chaap kar aur mujhey isharo me vaha se hatney ko kaha. Humko unka mujhey hatana acha nahi laga. Isiliye maine unse kah diya ki aisan kyu kare la? Papa humse kuch nahi bole par apna kaam karney lage. Par unhoney bhi sahi se motor me paani nahi daala. Fir rimjhim aur Narendra ne motor me paani dala aur usko sahi kiya.</li><li><!--block-->Apney bed par aakar papa ney maa se shikayat kar di ki hum abhi gussa huye they.</li><li><!--block-->Raat me 12:30 am par so ke meri nind 1:30 am me tut gayi... fir humko gutkha ki talab hui.. tension me they... fir 2:30 - 3 baje tak hum thoda tension me they..<ul><li><!--block-->Last me geeta saar padhe.. usme se ek line baar baar repeat kiye man me .. hey bhagwan hum khud ko aapko samarpit karte hain.. aap mujhey sweekar karo.. phir 3:00 baje tak mujhey nind aa gayi...</li><li><!--block-->5:00 am par meri nind fir khul gayi.. uthte hi humko 3 pm baje se raat bhar ka saara baat likhne ka man kiya...</li></ul></li><li><!--block-->Subah me uthkar hum bahar khada they .. sarita aunti motor chalaney aur pani bharney bahar aayi thi.. wo jaan bujh kar vahi ruki thi aur mere se baat karney ka wait kar rahi thi.. unhoney mere se motor chalaney aur paani aaney ki baat ki..<ul><li><!--block-->Hum bahar khade ho kar papa maa ki baat.. papa ko itni sunne wali biwi bacche milney ki kismat aur meri futi kismat ke liye tension me they.&nbsp; ..</li><li><!--block-->Fir 5:40 am par aakar hum yaha apni baat likhney lage</li><li><!--block-->7:30 AM par hum gym ke liye nikal gaye</li><li><!--block-->9 baje aaye toh Dharmesh aaya tha</li><li><!--block-->Wo papa se baat kar raha tha.. khana khaya..</li><li><!--block-->Papa ney usko bagal me Bipin ya uske papa se usko milwaya tha,, kyuki wo L&amp;T ya ek dusri mechanical company me kaam karte hain</li><li><!--block-->Khana khakar jab wo hath dhone aaya tha toh shayad usney mujhey rajnigandha khate dekh liya tha... ye ek next escalation hai .. aur shayad ab wo bhi Bipin chacha aur Dhruv chacha se iske baare me kahega</li><li><!--block-->jab wo janey laga toh papa ne usko 200 rupiye dilwaye.. wo mana kar raha tha.. par maa ke hath se papa ne usko finally dilwa hi diya...</li><li><!--block-->Mujhey personally ye acha nahi laga kyuki dhruv chacha isi ke liye toh mujhey boley they ki tuhar papa ko paisa ke abhimaan hai...</li><li><!--block-->Khair papa diye toh hum kuch nahi bole</li><li><!--block-->12 baje Sumit ke papa ji aaye they.. bike lautane.. jameen ka bhav kam hi lag raha hai shayad.. phir papa defend kiye aur bole ki 9.5lac se kam me mat baat kariye..</li><li><!--block-->Jate huye unko photocopy of jameen dastavez dilwaye...</li><li><!--block-->Let's look aage kya hota hai</li></ul></li><li><!--block-->Subah me papa shrilal ji ya Sanjay sunil ke kisi ristedaar se rimi ke liye kuch baat kar rahe they.. details abhi mujhey clear nahi hai.. let's look aagey kya hota hai...</li></ul><div><!--block--><br><strong>08-Apr-2018</strong></div><ul><li><!--block-->Kal shaam ko bipin chacha apni family ke sath mere ghar machli khaney aaye.</li><li><!--block-->Chachi ko pranam karney me hum chachachi se takra gaye. Humko kharab feel hua aur tab se aaj 2 baje tak khud ko guilty feel kar rahe hain. Ab hum chachi ko dur se hi pranam kar lenge.</li><li><!--block-->Chacha machli kha ke narendra aur papa se government job aur apni aur Narendra ki allowonces ke liye baat kar rahe they.</li><li><!--block-->Hum aayush ke sath bahar tahalney nikal gaye.</li><li><!--block-->Aayush ne bataya ki usko ultimate relaxation sabse jyada pasand hai.. uske pahle IIT aur then management , human handling aur human pscicology me interest hai.</li><li><!--block-->Aaj subah me vaishno devi ka bhajan sunte samay papa idhar udhar jaise prince bipin ya sadhu chacha ke bike mangwaney ke baat kar rahe they.. humko acha nahi laga&nbsp; &nbsp; hum bole ki apni bike diye hi kyu..&nbsp; iss par maa se jhagra ho gaya&nbsp; &nbsp; hum soney chale gaye.<ul><li><!--block-->Uthey to dharmesh aaya tha aditya ke sath machli khaney..</li><li><!--block-->Hum thori der baat kiye unse aur phir bahar nikal ke gutkha kharid kar aur chola bhatura kha kar aa gaye</li><li><!--block-->Phir ghar ka khana kha kar phir se sone chale gaye&nbsp; .</li><li><!--block--><strong>Mere man me chinta chal rahi hai ki</strong><ul><li><!--block-->Rimi ki shaadi kaise hogi</li><li><!--block-->Papa maa ko bihar me MOTIHARI me jameen kab milegi</li><li><!--block-->Hum akele yaha kaise rahenge</li><li><!--block-->Narendra ka shaadi kaise hoga</li><li><!--block-->Hum yaha acha se rahenge na</li></ul></li></ul></li></ul><div><!--block--><br><strong>07-Apr-2018</strong></div><ul><li><!--block-->Sabere 5 baje uthey.. fir fayaz ne laptop kholte hi pung kar diya .. uski thori help kiye.. fir dawa khaye aur so gaye.. 9 baje maa ke baar baar jaganey par gussa huye aur fir naha kar taiyar huye.. subah me 10 rupiya ka gutkha bhi kharide.. fir khana khaye.. khana me chawal ke sath daal nahi tha.. roti di thi.. uske liye gussa huye.. fir narendra ke sath court gaye.. papa nahi gaye court .. iske liye maa se papa ke samney puchey.. gussahuye..</li><li><!--block-->Court pahuchte hi Narendra ne kaha ki aaj vaqueel se baat kar ke gawahi agle date par talwa do.. uska reasoning tha ki agar bich me 16 april ya 24 april ko Chanpatiyan ke side se agar kuch action hota hai toh humlog gawahi usi ke according de sakte hain...</li><li><!--block-->Court ke bahar baithkar Narendra se kuch baat kiye.. papa ke burai kiye.. bole ki humko tumse papa rimi se koi matlab nahi hai.. maa ke liye ji rahe hain.. maa ke deh khatam tum log bhaad me jaao..</li><li><!--block-->Narendra bhi bola ki papa kabhi apna galati nahi mante.. maa ko fasa kar jitate hain.. barginiya wala case me bhi tumko dhaal bana kar rista tod diye..</li><li><!--block-->Lautney me Narendra ko bataye ki ab hum papa ko bura nahi mante.. inke sabhi bhai aur ristedaar inse bhi gaye gujre hain..</li><li><!--block-->Lautney me Ballabhgarh me narendra ne humko 10 rupiya ka ganna juice pilaya..</li><li><!--block-->Court me next taarikh 12 june ki mili.. aaj gawahi nahi huyi.. judge mere se puch rahi thi ki tum Premendra ho..toh bahar kon baitha hai.. tum dono twin ho kya..</li><li><!--block-->Ghar aakar papa machli lane chale gaye.. pahle wo prince se bike mangney ko kah rahe they.. fir Narendra maa ney mana kar diya..</li><li><!--block-->2 baje mera mann vaishno devi jaaney ka hua.. papa maa kuch nahi bole.. par wo aaj mere janey ke paksh me nahi they...</li><li><!--block-->Fir hum bhi sochey ki yogesh iss week hrishikesh tour pe hain.. jana thik nahi hoga.. maa ka bulawa nahi tha ... baad me jayenge</li><li><!--block-->Papa par 4 baje hum gussa ho gaye ki bike kyu de dela sumit ko????</li><li><!--block-->5000 rupiya nikale atm se.. 100 rupiya ka gutkha kharid liye...</li><li><!--block-->Shaam ko chacha aihan machri khobse...</li><li><!--block-->Papa narendra se AC thik karaney ke liye baat kar taran...</li><li><!--block-->Humko 2-3 t shirts aur 2-3 casual pajama kharidna hai.. 2000-3000 till 30 june 2018</li><li><!--block-->For home causal or gym or any trip like rishikesh par janey ke liye</li></ul><div><!--block--><br><strong>06-Apr-2018</strong></div><ul><li><!--block-->3 march ko dharmesh ne bataya tha ki september me dhruv chacha ke dukan ka insurance ka paisa bhi nahi mila tha. Date of submission of cheque ka kuch issue ho gaya tha. Claim nahi mila tha.</li><li><!--block--><strong>Dada ki 2 bahan thi</strong><ul><li><!--block-->1 ki shaadi shishwa aur ek ki shaadi dhekhan hui hai.</li><li><!--block-->Gauri chacha papa ke fufere bhai hain</li><li><!--block-->Siswa tarkulwa se 2 kilometers dur hai</li></ul></li><li><!--block-->Sabere papa ghar pe baat kar rahe they ki aaj chacha ko tarua khila dete hain.. machli kal banwa denge...<ul><li><!--block-->Mahanga lauki kharidne se papa gussa ho gaye..</li><li><!--block-->Tarua pahuchane gaye toh chacha taiyar ho rahe they .. wo tarua aur roti sabji dahi khaney lage.. chachi chacha ke mote pet ko dekh ke over exclaim karne lagi .. chacha bole ki chor do humko.. chacha humse boli ki cjacha ke chhor di.. hum bole ki kaise chhor debu chachi tu.. inka la itna tapasya kaile baru... fir chacha ko bataye ki uss din cab me chachi saari me maa ke jaisi hi lag rahi thi...</li><li><!--block-->Waha se aaye toh nahaney jane lage.. but maa ko upset hote dekh 9:15 tak gym chale gaye.. uss samay 8:40 ho raha tha</li><li><!--block-->Gym se aake nahake kganey ke samay papa maa ko chacha chachi ke vartalap bataye..</li><li><!--block-->Aayush ka admission modern dps sec 87 near sec 17 faridabad me hia hai</li></ul></li><li><!--block-->I feel difficulty in ticket incident management and severity management discussion.. need to view some videos and tutorial for same in leasure time</li></ul><div><!--block--><strong><br></strong><br><strong>05-Apr-2018</strong></div><ul><li><!--block-->Jyada sochne aur chinta ke karan hum aaj gym nahi gaye. 9:20 am tak soye rahe... 8 baje vaishno devi aarti ke baad aage wala chowki par so ke maa bhagwati se apne liye mrityu maang rahe they.. unse bole ke hum past me sirf galati kiye hain aaj bhi galati kar rahe hain.. isiliye mujhey samapt kar do maa kyuki aage bhi mere se sirf galati hi hogi..</li><li><!--block-->Mere papa ne jo kaha tha wo kiya.. sirf mainey hi apna kaam dhang se nahi kiya.. aur apney pariwar ko dhokha diya.. poori family ko dukh me dala.. office me bhi apna kaam dhang se nahi kiya.. mujhey mar jana chahiye</li></ul><div><!--block--><br><strong>04-Apr-2018</strong></div><ul><li><!--block-->Mere papa ne pahley decide kiya tha ki 500 rupiya denge, par sadhu chacha aur chachi ke kahney par , dhruv chacha ke mana karney par bhi,&nbsp; papa bhi 2000 rupiye dene ke liye taiyar ho gaye.</li><li><!--block-->Mujhey ek rolling chair 2-3 hazar wala kharidna hai.. till 5 april 2019</li><li><!--block-->Ghadi ka belt badlwana hai 500-2000 ka kharcha.. till 5 dec 2018</li><li><!--block--><strong>Papa expects</strong><ul><li><!--block-->Hum chanchal rahe.</li></ul></li></ul><div><!--block--><br><strong>03-Apr-2018</strong></div><ul><li><!--block-->Papa ki worries<ul><li><!--block-->Humar 2 lakh dub na nu jaii</li><li><!--block-->Hum ek pust piche ho gaini</li></ul></li></ul><div><!--block--><br><strong>26-Mar-2018</strong></div><ul><li><!--block-->Mera duty/kartavya kya hai?</li><li><!--block-->Mere agal se kon kon se log linked hain? Unki mere se kya expectations hain? Meri unse kya expectations hain? Un log ka meri ya mere family ki life me kya importance hai?</li><li><!--block-->Meri khud se expectations hai ki subah me time par uth ke kasrat karu nitya kriya kar ke office ka kaam karu dopahar me khana khau shaam me time par ghar aa jau raat me time par so jau.</li></ul><div><!--block--><br><strong>22-Mar-2018</strong></div><ul><li><!--block-->Kal raat me fayaz ne gainmanager ke ek issue ke liye code debug karaya. Fir wo khana khane ke naam par seat se chala gaya. Muhey nind aa rahi thi . Hum message kar ke soney chale gaye.</li><li><!--block-->Consequence of saying no to fayaz &nbsp; kuch aisa karega ki job jayegi ya somen sheikh yogesh harish kuch bura bol ya kar de... my reaction jo hoga accha hoga.</li></ul><div><!--block--><br><strong>21-Mar-2018</strong></div><ul><li><!--block-->Dhruv chacha shaam me papa se baat kiye.<ul><li><!--block-->Raat me step dadi gujar gayi.</li><li><!--block-->Subah me dhruv chacha papa se baat kiye aur bataye ki sanjay chacha ne subah unko ye bataya tha. Bipin chacha ko sanjay chacha ne call nahi kiya hai.</li><li><!--block-->9:15 pe dhruv chacha ne call kiya aur bataya ki tu chal ja. Munna fua call kaile rahe. Bolat rahe ki Bhola bhaiya ko bata da.</li></ul></li></ul><div><!--block--><br><strong>20-Mar-2018</strong></div><ul><li><!--block-->Step dadi bahut bimar bari ye khabar bipin chacha se milal. Papa unse mile gailan.</li><li><!--block-->Office me Anshul aur Kirti ke kaam ko na bol deni.</li></ul><div><!--block--><br><strong>11-Mar-2018</strong></div><ul><li><!--block-->Subah me gym jane se pahle chacha ke pass gaini<ul><li><!--block-->Chacha herbal tea pilailan</li><li><!--block-->Chachi ko bataini ki labour ke sath chai pilalu se chai chor ke chal gail rahni</li></ul></li><li><!--block-->Shaam ko chacha ke pass baigan ke sabji deni<ul><li><!--block-->Chacha kahlan ki bhagwan ek darwaza band kare lan ta dusra khol dewe lan</li></ul></li></ul><div><!--block--><br><strong>11-Feb-2018</strong></div><ul><li><!--block-->Hum shuru se hi bahut darte hain. Hum bahut jaldi maan lete hain ki mere se nahi ho payega. Hum akele nahi kar payenge. But last me jab hum ekdum akele pad jate hain , jab mere paas koi vikalp nahi hota tab hum hi koshish kar ke situations se ladna chalu kar dete hain. Khud par avishwas hi mere dukh ka sabse bada karan hai. Humko khud par vishwas nahi hai Isiliye dusre bhi mere pe vishwas nahi kar paate. Humko khud ki acchai par vishwas nahi rahta Ya samay ke sath ye vishwas kam ho jata hai. Hum shuru me give up kar dete hain. Isiliye galti kar dete hain, pareshan rahte hain.</li><li><!--block--><strong>Life me 2-3 example jab hum pahle give up kiye fir baad me hum thak haar kar situations se lade aur partial victory haasil kiye.</strong><ul><li><!--block-->1. Cycle chalana</li><li><!--block-->2. Bike car chalana</li><li><!--block-->3. Sanjay driver ke baar baar kahne par ki hum hopeless ho jaate hain hum last me usko car me bitha kar ghar tak laye.</li><li><!--block-->4. Pahle wife ke behavior ko expose karne me dare fir last me vahi jab mujhey thane me le gayi tab jab khud ko vaha akela paya tab khud ko apne dhang se defend kiye aur sakushal vaha se vapas aaye.</li><li><!--block-->5. Professional life me baar baar ownership lene me give up kiye. Hum akele nahi kar payenge. Apni limit ka khud pata nahi rakhe.<ul><li><!--block--><strong>Recent example of give up</strong><ul><li><!--block-->j</li></ul></li></ul></li><li><!--block-->6. Higher management se aadesh aaya ki report nikalo uni ka , jisme</li></ul></li></ul><div><!--block--><strong><br></strong><br><br><strong>27-Jan-2018</strong></div><ul><li><!--block--><strong>Self realization</strong><ul><li><!--block-->Papa is right from beginning</li><li><!--block-->I misinterpreted him. I was thinking he is just killing my time but he was giving lessons of life</li></ul></li></ul><div><!--block--><br><strong>25-Jan-2018</strong></div><ul><li><!--block--><strong>Mere me kamiyan</strong><ul><li><!--block-->1. Hum situation me fas jate hain. Kaam ko dusro pe thopte nahi.</li><li><!--block-->2. Ek hi galati baar baar karte hain.</li></ul></li><li><!--block--><strong>Humko kya karna hai</strong><ul><li><!--block-->Kshanik sukh ke chij se dur rahna hai</li><li><!--block-->Kshanik dukh ki situation sweekar karna hai</li></ul></li><li><!--block--><strong>Humara kaam kya hai</strong><ul><li><!--block-->Jo mere expertise domain ke bhitar ka kaam hai wo karna hai aur dusri chijo ko (proper response ke sath) dusro par distribute karna hai.</li></ul></li></ul><div><!--block--><br><strong>21-Jan-2018</strong></div><ul><li><!--block--><strong>Meri duty kya hai</strong><ul><li><!--block-->Ghar par papa maa bhai bahan khush rahe</li><li><!--block-->Office me din nikal jaye</li><li><!--block-->Extra pressure other than home discard karu excuse du</li><li><!--block-->Aage aane wali pareshani ko calculation karu aur usje niwaran ka upay karu</li></ul></li></ul><div><!--block--><br><strong>20-Jan-2018</strong></div><ul><li><!--block--><strong>HDFC URGO plan</strong><ul><li><!--block-->40000 annual premium</li><li><!--block-->5 saal</li><li><!--block-->Tax benefits</li><li><!--block-->Life insurance cover for 4 lac in case of death of nominee</li><li><!--block-->After 5 year 2 lac 95 thousand</li></ul></li></ul><div><!--block--><br><strong>16-Jan-2018</strong></div><ul><li><!--block-->I feel difficulty<ul><li><!--block-->1.asking que</li><li><!--block-->2. Assignment of tasks</li><li><!--block-->3. Creation of plans</li></ul></li></ul><div><!--block--><br><strong>12-Jan-2018</strong></div><ul><li><!--block--><strong>I fear to speak-&nbsp; impact / consequence faced due to this issue</strong><ul><li><!--block-->1. People avoid from further discussion</li><li><!--block-->2. People might retaliate the embarrassment observed while fail to communicate</li><li><!--block-->3. I feel guilty for&nbsp; not being better expression of my concern/agreements/disagreement/query to other. Also time passes I feel uneasiness in further discussion with other.</li></ul></li><li><!--block--><strong>Monday ko kedar sir call kiye they. Unko bol diya ki mumbai khata hai. Aap acche hain but baaki log Mumbai ke aap jaise nahi hain.</strong><ul><li><!--block-->Aaj friday 12 dec ko office aaney ke baad kedar sir ko call lagaya tha aur unse baat kiye ki hum Mumbai me office aur room par apney weak verbal communication skill ke karan kitna problem me rahe. Kaise saara kaam karney ke baad bhi waha hr aur manager ne resignation ke liye force kiya aur kyu mere man me aaya ki ye jagah Mumbai mujhey yaha se jaaney ke liye kah rahi hai. Kedar ne saari baatein suni aur kuch gain manager ki payout activity ke liye brief me bataya. Unhone fir baad me call karney ko kaha aur aaj ki humari baat khatam ho gayi</li><li><!--block-->Friday 12 jan 2018 ki baat hai above conversation</li></ul></li></ul><div><!--block--><br><strong>10-Jan-2018</strong></div><ul><li><!--block--><strong>Why i fear to speak?</strong><ul><li><!--block-->Hum ek bolenge toh log char batein sunayenge</li></ul></li></ul><div><!--block--><br><strong>05-Jan-2018</strong></div><ul><li><!--block--><strong>Basic information i must know in office</strong><ul><li><!--block-->1. Name and contact numbers of team members</li><li><!--block-->2. Roster and shift of people in team</li></ul></li><li><!--block--><strong>Suggestions from yogesh</strong><ul><li><!--block-->Take control on servers related to applications</li><li><!--block-->Ask harish to create my id on servers</li><li><!--block-->Collect login credentials of servers</li></ul></li><li><!--block-->Two tasks in weekend<ul><li><!--block-->1. Was configuration</li><li><!--block-->2. Job search</li></ul></li><li><!--block--><strong>Oath of Prem</strong><ul><li><!--block-->I will reply either proper or improper to all except Sanjay Yogesh Somen shiekh Amit Tyagi</li><li><!--block-->2. I will not do freindly behave but only professional behavior</li><li><!--block-->3. No formality eat or distribution of sweet</li><li><!--block-->4. Speak cut to cut</li><li><!--block-->5. Will raise concern</li><li><!--block-->6. Will reach and leave office on time</li></ul></li></ul><div><!--block--><br><strong>03-Jan-2018</strong></div><ul><li><!--block--><strong>My time requirements</strong><ul><li><!--block-->In Morning<ul><li><!--block-->1.30 hrs for daily works tea medicine hot water</li><li><!--block-->1.30-2 hrs gym</li><li><!--block-->1 hr prepare for day</li><li><!--block-->1.30-2.30 - avg 2 hrs commute to office</li></ul></li><li><!--block-->In Evening<ul><li><!--block-->1 hr packup from office</li><li><!--block-->1.30-2.30 - avg 2 hrs commute back to home</li><li><!--block-->1 hrs dress for night + dinner</li><li><!--block-->1-2 hrs prepare for next day+ analysis of day</li><li><!--block-->5-8 hrs sleep</li></ul></li></ul></li></ul><div><!--block--><br><strong>01-Jan-2018</strong></div><ul><li><!--block-->Aaj yogesh sir se baat hui..<ul><li><!--block-->Unko call kiya new year ke liye</li><li><!--block-->Allegation - no preventive action taken for gainmanager monthly job</li><li><!--block-->My allegation - no proper information being provided</li><li><!--block-->Will discuss on Wednesday</li></ul></li><li><!--block-->I discussed same with maa and narendra . They said \"always think kuch nahi hoga\".. koi na koi rasta niklega</li></ul><div><!--block--><br><strong>31-Dec-2017</strong></div><ul><li><!--block-->Mere mann me ek shaitan baitha hua lagta hai jo baar baar humko galat hi suggwstion deta hai<ul><li><!--block-->Ki gutkha khao</li><li><!--block-->Hum solutions ke liye nahi soch pate... duniya me sabko yahi chahiye.. solution ya proper response ki kab tak hoga</li><li><!--block-->Hum khud ko dhokha dete hain</li><li><!--block-->Problem ko bada kar ke sochte hain</li><li><!--block-->Jab sirf itna sochne se kaam chal sakta hai ki humko shant rahna hai, dusro ko observe karna hai ki wo kis type ka reaction dete hain,</li></ul></li><li><!--block--><strong>Meri problem hai ki</strong><ul><li><!--block-->Hum response nahi karte aur karte hain to galat , jyada boldete hain. Gutkha kganey ke chalte social nahi ho pate</li><li><!--block-->khud par vishwash nahi hai</li></ul></li></ul><div><!--block--><br><strong>22-July-2017</strong></div><ul><li><!--block-->Aaj Capgemini ka interview diya<ul><li><!--block-->Can we create collection of interface objects</li><li><!--block-->How to prevent web applications from different malware attacks. Like multiple requests coming to the applications to choke it.</li></ul></li></ul><div><!--block--><br><strong>18-July-2017</strong></div><ul><li><!--block--><strong><em>Mere accenture me failure ka following cause hai</em></strong><ul><li><!--block-->1. 4 saal support profile me kaam kiya par hamesha mera mann development profile me jaane ka karta tha. Maine internet se download kar ke interview questions yaad kar liye. Par practice nahi thi. Yaha expectations poora nahi kar paya aur performance me fas gaya.</li><li><!--block-->2. Apni profile aur apni niji jindgi ke problem se yaha kisi se dosti nahi kar paya. Proper response nahi diya aur sab mere against ho gaye. Managers jab mera defend kar rahe they tab DU lead ke pass bakwas kar aaya ki mujhey kuch nahi aata.</li><li><!--block-->3. Khud ko defend karne ki jagah khud ko weaker bana ke exposed kar diya.</li><li><!--block-->4. Khud ki burai par control nahi kiya. Isiliye fail ho gaya.</li></ul></li></ul><div><!--block--><br><strong>10-July-2017</strong></div><ul><li><!--block-->Last week infosys interview dene gaye, marine drive ghume, sunday office gaye, shaam ko d mart se shopping kiye, ghar pe baat kiye.</li><li><!--block-->Aaj gym me ek dost banaye.</li><li><!--block-->Isse jiwan ki chinta kam lag rahi h.</li></ul><div><!--block--><br><strong>8-July-2017</strong></div><ul><li><!--block-->Hum khud se bahut baat karte hain..&nbsp; humko ghamand bahut jaldi ho jata hai</li><li><!--block-->Ghamand ka ulta namrata hota hai</li><li><!--block--><strong>Aaj infosys ka interview dene gaye they</strong><ul><li><!--block-->Aap kis chij me expert hain</li><li><!--block-->Aap itni jaldi job kyu change karna chahte hain</li><li><!--block-->Estimation ka kya softwares hota hai</li><li><!--block-->Aapney kaun kaun se tool par kaam kiya hai</li><li><!--block-->Aap future me kya banana chahtey hain</li><li><!--block-->Aagar aap software architect banana chahtey hain toh kya aapko pata hai ki software architect kya karta hai</li><li><!--block-->Team handling kya hota hai</li><li><!--block-->Team handling me kya karna hota hai</li></ul></li></ul><div><!--block--><strong>5-July-2017</strong></div><ul><li><!--block-->Meri help agar koi karega toh woh mai hi hu. Ek baar issue analyse kar lenge toh fir 60% issue hum khud hi solve kar sakte hain. Baaki 40% issue ke liye well wishers ko call kar sakte hain.&nbsp;</li><li><!--block-->Iss gyan ki keemat hai mera Accenture ka job. Yaha mai dysro se help mangta raha, response nahi kiya ki ye kaam me mujhey jyada time lag sakta h. Chup raha aur usko manager ne ego pe le liya. Aur mera job jaaney wala hai.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.009Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.009Z"},"uniqueId":"25cf7077-70c1-43f2-b9e8-6f43865c2b74","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f039"},"name":"10-Oct-2010 NALCO, UPRVUNL, CSPHCL Atmavishwas acchey kaam karney se aata hai. Atmavishwas apney mann ki","heading":"10-Oct-2010 NALCO, UPRVUNL, CSPHCL Atmavishwas acchey kaam karney se aata","smartContent":{"content":"<div><!--block--><strong>10-Oct-2010</strong></div><ul><li><!--block-->NALCO, UPRVUNL, CSPHCL</li><li><!--block-->Atmavishwas acchey kaam karney se aata hai. Atmavishwas apney mann ki aawaz hai. Atmavishwas hausla deta hai, jujhney ki</li><li><!--block--><strong>This is my motto</strong><ul><li><!--block-->GAP rokna hai</li><li><!--block-->Experience lena hai.</li><li><!--block-->Jam ke taiyari karna hai.</li></ul></li></ul><div><!--block--><strong>09-Oct-2010</strong></div><ul><li><!--block-->Aaj ek baar mai us \"<strong>Premendra</strong>\" ki yaad karna chahta hu, jo mai ban sakta tha aur aaj bhi mann ke kisi koney me dubka pada hai.<ul><li><!--block-->Vah \"<strong>Premendra</strong>\", jo ciggerate gutkha aadi buraiyon se door rahta hai.</li><li><!--block-->Vah \"<strong>Premendra</strong>\" jo ishwar ko manta hai aur manta hai ki apna kaam imaandari se karney walo ko hi ishwar sahayta karta hai.</li><li><!--block-->Vah \"<strong>Premendra</strong>\" jo nirasha me bhi aasha ki kiran ko hi dekhta hai aur jiska ek hi siddhant hai ki \"<strong><em>Chahe mai ghistunga, rengunga, par mai sirf apney lakshya ki taraf hi badhunga aur mere lakshya ki taraf badha ek kadam mujhey lakshya se ek kadam najdeek kar dega</em></strong>\"</li><li><!--block-->Vah \"<strong>Premendra</strong>\" jo dusro ka dil nahi dukhata aur bevajah naraz honey walo se khud hi naraz ho jata hai.</li><li><!--block-->Vah \"<strong>Premendra</strong>\" jo jiwan me hamesha aasha ki kiran dekhta hai aur nirantar apney lakshya ki taraf badhney ko agrasar hai. ---&nbsp;<strong><em>Premendra 09/Oct/2010</em></strong></li></ul></li><li><!--block--><strong>JANAMI DHARMAM NA CHA ME PRAVRITIH |, JANAMYAADHARMAM NA CHA ME NIVRITIH ||</strong><ul><li><!--block-->Anjaaney ME KOI APRADH HO TOH WO KSHAMYA HO SAKTA HAI, PAR JAANBUJH KE KIYA GAYA APRADH AKSHAMYA HO JATA HAI. Mainey jaan-bujh ke apradh kiye hain. Isiliye mujhey jail-jaisi saza huyi hai. Aaj yaha par mere paas pita ka paisa hai. Khana kha chuka hu. Sangeet sun raha hu.&nbsp;<strong>Par akela hu. Koi nahi jisse batiya saku.&nbsp;</strong>Padhai me man nahi lag pa raha hai.&nbsp;<strong><em>Abhi iss samay sabse jyada jarurat mehnat, lagan aur parishram se apni padhayi karney ki hai aur mai iss kaam me khud ko saksham nahi pa raha hu.&nbsp;</em></strong>Koi chij acchi nahi lag rahi hai. -&nbsp;<strong><em>Premendra 09/Oct/2010</em></strong></li></ul></li></ul><div><!--block--><strong>02-Sep-2010</strong></div><ul><li><!--block-->Mai manta hu ki mujhse galatiyaan ho jaati hain aur kuch galatiyaan mai kar chuka hu - kuch jaan bujh kar aur kuch anjaaney me - par ab sochna ye hai ki aage kya karna hai, ki gayi galatiyon ko rona hai ya jo sapna man me dekha hai usey poora karna -&nbsp;<strong><em>Premendra, 02/09/2010</em></strong></li></ul><div><!--block--><strong>28-Aug-2010</strong></div><ul><li><!--block--><strong>Kami kaha hai?</strong><ul><li><!--block-->Ghar se soney, pahanney,udaney ke liye paisa mil raha hai.</li><li><!--block-->Yaha rahney, soney aur padhney ka mahoul hai.</li><li><!--block--><strong>Kami sirf hum me hai. Nahi kar pa rahe hain. Karan man ki bechaini, ya aur kuch bhi ho, hum nahi kar pa rahe hain.</strong></li></ul></li><li><!--block--><strong>My confession</strong><ul><li><!--block-->Duniya gol hai. Vaqt ke sath duniya aage badhti hai, par ek din phir usi jagah pahuch jati hai, jaha safar shuru huya tha. Aaj jo dikhta hai, vahi kal bhi tha aur vahi parso bhi hoga. Badlega toh wo honge iss duniya ko dekhney, sunne aur samajhney wale.<ul><li><!--block-->Ye bhumika hai uss baat ki jisey aaj mere mann ne bahut gahrai se mahsus kiya aur sacchai ko anuman lagakar mann darr gaya.</li></ul></li><li><!--block--><strong>Jiwan me aur iss duniya me,&nbsp; uss vishal parwat aur ussey bahati kal-kal karti Ganga-sa sambandh hai. Duniya vah vishal parwat hai, jaha ek unchey gomukh se jiwan-rupi Ganga nikalti hai aur parwat se apni hi chal me nikalti chali jaati hai. Jiwan ki ek disha hai aur uss disha me ye badhti jaati hai. Jindgi ka ek bhi bita pal, Ganga ki uss dhara ki tarah hai, jo parwat se utartkar maidan me aa gayi hai aur ab wo parwat par vapas nahi ja sakti.</strong></li><li><!--block-->Jiwan badhta hi chala jata hai . Aur hum jeev, jo jiwan ko apni aatma me dharan karte hain, samajhte hain ki duniya chal rahi hai. Jabki chalna jeewan ko hi hai, duniya vahi thi, hai aur rahegi.</li><li><!--block-->Ye baatein mere mann me aayi, toh isiliye nahi ki mujhey likhna accha lagta ho, ya mujhey kuch samajh aa gaya hai.&nbsp;<strong>Balki isiliye ki ab mai samajh gaya hu ki ab mere jiwan me badlaw aaney wale hain. Sadharan shabdo me, mainey mahsoos kiya ki aaj mere vartmaan pariprekshya me aagey kya ho sakta hai aur wo kitna bhayawah hoga.</strong></li><li><!--block-->Aaj mai ek vidhyarthi hu. Sahi-galat karte huye jiwan me kuch sikh raha hu. Par meri chal wo nahi, jo honi chahiye. Parwat se girta Ganga ka paani yahi samajhta hai ki ye meri mastani chal aur mera kal-kal jhal-jhal girta roop hamesha hi rahega aur iss bhram me wo kabhi-kabhi kisi vishal parwat ghaati me vishram kar leti hai. Par ye hi bhool hai, jo maidani bhaag ke samney aaney par hi dhristigochar ho paati hai.<ul><li><!--block-->Thik aise hi jindgi ko mainey aaj tak kharch kiya. Jiwan ki shruaat honey aur meri chetna ke jagney ke liye jis samay-antral me mera lakshya aagey badhna hona chahiye tha, wo lakshya aaj tak prapt ho jana tha.&nbsp;<strong>Par Ganga ki unn jal-tarango ki tarah mai ek awrodh par vishram karney laga.&nbsp;</strong>Jis awrodh ko mujhey khil-khil kar ke aagey jana tha, wahin mainey vishram ka man bana liya.&nbsp; Maidani bhag me aaney par, jaise Ganga ki jal-tarangein jaise dhimi par jaati hain, thik vaisey hi ab jiwan ke unchey-nichey raste ab sapat aur tedhe hote ja rahe hain.</li><li><!--block-->Par ye toh hona hi tha, jab jal-tarangein maidan me aayin.&nbsp;<strong>Par kuch toh hua, jo hona na tha. Ye tha uss bandh par vishram karna.&nbsp;</strong>Par ab kya ho? Jiwan ab ek shant, veeran aur akele safar par chal padi hai.&nbsp;<strong>Ab raste aur tedhey-medhey aur chaal aur dhimi hi honi hai.</strong></li></ul></li><li><!--block-->Agar mera yah model, jiwan ko kuch hadd tak samjhata hai, to wo bhawishya ki bhi ek dhundhli tasweer ki rachna kar sakta hai. Uss tasweer me, jaha khel wahi hai, par sirf mohre badal rahe hain aur usi ke anusar khiladiyon ka ohda aur unki sanrachna, sochney samajhney ka awsar milta hai.</li><li><!--block-->Agar aaj mainey galati ki, aur kisi aur ne wo galati 10-15 saal pahle ki ho, to agar mainey ye galati chaalu rakhi , toh mera bhi wahi hashra hoga, jo uss \"Kisis aur\" ka aaj hai; ya sthiti isi ke ird-gird hi hogi.</li><li><!--block--><strong>Aur agar avrodhon ki vimayen, toh unka jiwan par asar bahu-vimiy hoga. -&nbsp;</strong>Yahi hai wo darr jo mann me aata hai. -&nbsp;<strong><em>Premendra 25/Aug/2010</em></strong>&nbsp;</li></ul></li></ul><div><!--block--><br><strong>19-Aug-2010</strong></div><ul><li><!--block-->Kuch samajh nahi aata ki aage kya karu? dekhte-dekhte ye samay nikal gaya aur aaj ye nahi tay kar pa raha ki kya khoya aur kya paya? inn beete huye 1 saal me. Ummid ki kiran dikhti hai aur phir gayab ho jaati hai. Aage jindgi kaun si karwat legi, tay nahi kar pa raha.</li><li><!--block-->Sochta hu ki apni naukri kar lunga, uske pahle jam ke taiyari kar lunga. Par kar nahi pa raha. Mann me tarah tarah ke vichar aate hain aur mai unn vicharon me apni manjil bhul jata hu. Raat ko nind nahi aati aur dinn ko chain nahi rahta. Mann ko ekagra nahi kar pata.</li><li><!--block-->Janta hu ki meri samasya ka hal bhi mere hi pass hai. Mann laga ke taiyari karni hai aur parinaam sukhad hoga. Par mann nahi laga pa raha. Khud ki hi galati hai. Par sudharney ka rasta nahi sujh raha.</li><li><!--block-->Mera antarman kahta hai ki mai wo sab kar sakta hu, jo mai chahta hu. Jaise ki khub acchey se padhai kar sakta hu aur apney aap ko khush rakhte huye apney sharir par dhyan de sakta hu.Ya phirr apney bhitar ki sabhi buraiyon ko ek jhatke me door kar sakta hu.<ul><li><!--block-->\"<strong>Parr .. aur sari musibatein isi parr.. kintu .. parantu.. ityaadi\"&nbsp;</strong>se ho jaati hai. Mann me aayi antarman ki aawaz kahi dab jaati hai aur mai khud ko bechain, akela, lachar, mazboor aur samasyaon tatha nirasha se ghira mahsus karney lagta hu. Ek pal me hi wo sara junoon, utsah aur josh samapt ho jata hai. Aakho ke aagey ek andhera chha jata hai aur mann tarah tarah ki bhawna-sambhawna aur hone-nahi-hone ke chakkar me fas jata hai.</li></ul></li><li><!--block-->Ho sakta hai, arthaat mai puri tarah se janta toh nahi par mahsoos hota hai, ki mere mann me aaney wali bhawnaon ka koi matlab nahi ho, par phir bhi dil ghabra jata hai. Jaise paani me doobta koi kisi sahare ki talash me hath-paav marta hai aur lahron se ladney ki jagah doobta jata hai, kuch vaisa hi mere sath har roz hota hai. Aur mai bas ek mook-darshak-jaisa kim-kartawya-vimood hoke sirf sochta rah jaata hu.</li><li><!--block--><strong>Kya karu? bas isi prashna me uljha rahta hu. Kya mai jo soch raha hu wo sahi hai? - ye sawal barabar dimag ko asthir banaye rakhta hai.&nbsp;</strong>Kaise naiya paar hogi?- bas ye baat man ko bechain kiye deti hai. -&nbsp;<strong><em>Premendra 19/Aug/2010</em></strong></li></ul><div><!--block--><br><strong>13-Aug-2010</strong></div><ul><li><!--block--><strong>What if my God asks me to which kind of companion do you want and promises to fulfill exactly the same,&nbsp; what should my answer?</strong><ul><li><!--block-->I have very beautiful imagination of my life-partner. Everyone wants beautiful lady as his co-partner. That is the one of the most necessity of most of the people in this world.&nbsp; But something is also in this world is need afterall. I want also a good, cute, charming and a dazzling beauty. And after finding such an unique partner I'll wish and pray to God. But if I may have to compromise with the beauty of my lifepartner, as mostly people have to do ( afterall no one can get the good one because then what for the rest!), then I want she should always be cheerful, cooperative and with good sense of humor.&nbsp;</li><li><!--block-->But if it is also a different task for God to allot me such a life-partner with optimum beauty, with cheerful, cooperative and good sense of humor, I want such a girl as my life-partner who can understand me and pusuade me time to time and obviously the time I need it really.</li><li><!--block-->I don't know how exactly she will but I have a very enthusiasm about her. How other people get a companion of their favor, I want to get my dreams imagination&nbsp; to come over the earth.</li><li><!--block-->When I'll meet her first time, what if my reaction? I don't know but she is some other than my imagination.</li><li><!--block-->How she will smile with me and I will see only in her eyes. I also want to request to God give me such a good friend like co-partner, that she must have big eyes like a beautiful female-deer. Her eyes must have an attraction that I loose all my tension and start to talk with her hours and hours. I just see in her eyes and say all the things which effervesce in my heart and she reacts in such a way that I just move ahead and step more.</li><li><!--block-->A big room, with well furnished furniture. A big bed on which there is a well-mannered dunlop and a big light-rose-colored bed-sheet. A deem-light and a song from my choice in very slow volume. The air is just after a rain and it has so freshness and good smell that rejuvenate we both. She smiles and move towards me and I towards her while talking. I, as more I say as she moves towards me and confidently watch in my eyes and I see the confidence and love in her eyes. She sometimes smiles during the conversation without watching on either the clocks or anything else. I just want to go deep inside her eyes. She sometimes raise her hands to rearrange the hairs which have come on the front face but I stop her hands by my hands because I feel an interrupt and I by my ownself start to rearrange those hairs in my own way. I just take the front hairs and take them just back of the ears and slowly touch her face and say her with an artificial anger to try to concentrate dear. And then I, with an an artificial expression, say that where I was and then she explains everything in the same fashion in what manner I told to her. This makes me happy and become delighted in my own inner-heart. Then I take the conversation afterward.</li><li><!--block-->That beautiful night, with her, in a big well furnished room, on a big bed with big dunlop and over which a light-rose-colored bedsheet, over which I explain every my feelings that currently efferves in my mind and she curiously listen everything. The very dramatic and romantic situation. The light music in my room is so fantastically making the environment light and I just enjoying these all with my spouse. In the moon-light, which is coming from windows on which a silky curtain is just flowing with wind, which is coming from the half closed windows glass and making us both more and more romantic.</li></ul></li></ul><div><!--block--><br><br><strong>28-Jan-2010</strong></div><ul><li><!--block-->Kya likhu , mai khud se nirash ho gaya hu. Samajh nahi pa raha hu kya sahi hai. Dil me ek bojh sa ho gaya hai. Bahut dino se safalta nahi mil payi hai. Ya yu kahu ki bahut dino se thik se mehnat nahi kar pa raha hu. Mai khud se hi naraz hu. Mai khud ko jis mukam par dekhna chahta hu, usi ke liye taiyar nahi kar pa raha hu. Ek baar meri gaadi rukti hai toh phir khud ko usi jagah pata hu jaha se chala tha.&nbsp;</li><li><!--block-->Udhar maa-papa aas lagaye baithey hain ki kab mai kuch karunga. Kab unhey kahunga ki mai apney pairo par khada ho gaya. Sabhi gharwale aas lagaye hain ki mai padhkar ek mukam haasil karu. Aur yaha mai khud se jujh raha hu. Apney bhitar soye huye josh ko talash raha hu. Kuch dino ke liye josh aata hai. Par phir na jane kaise mai phir se usi soch me doob jata hu ki kaise aage badhunga mai, jabki mai puri tarah taiyar nahi hu. Khud se jujhta hu aur dil hi dil me rota hu. Phir duniya ki ranginiyo me doobkar apni kamiyo ko bhul jana chahta hu. Shayad kismat bhi sath nahi de rahi, isiliye mujhey recession ka ek bahana bhi mil gaya hai apni kamiyo par chadar karney ke liye.</li><li><!--block-->Sabhi sacchai samajh rahe hain. Par mai toh jantya hi hu ki mai apni duty thik se nahi kar pa raha hu. Jaaney kab tak chalega ye? Mai ghar par toh jhuth bol deta hu ki ha padhai ho rahi hai, par kya apno ko mai chhal pa raha hu? Lagta hai ki majil thori hi door hai. Par chalney ki himmat nahi karta hu. Safalta ka sapna toh dekh raha hu, par mehnat se katrata hu.</li><li><!--block-->Khyalo me toh kai saare sapney dekha leta hu par vashtavikta me kuch nahi kar raha hu. Bas jindgi ko bojh ki tarah dho raha hu.</li><li><!--block--><strong>Meri bas khud se ek hji shikayat hai ki agar khub mehnat ki hoti toh shayad kahi aur khub acchey se hota. Par khud me ikshashakti ki kami mahsoos hoti hai.</strong></li><li><!--block--><strong>Roz subah uthkar khud pe rota hu. Phir ulte-sidhey tareeke se khud ko manakar mehnat karney se khud ko bacha leta hu. Par aakhir kab tak? Akhir kis se jhuth bolta hu. Kisko dhokha deta hu? Mai sirf sansadhano ka durupayog kar raha hu.</strong></li><li><!--block--><strong>Sacche dil se kahu toh kami khud me hi dikhti hai. Apni saari pareshaniyo ka karan khud me hi pata hu. Ek baar mehnat karna shuru kar du toh shayad manjil jyada door nahi hai. Par khud ko kaise samjhau?&nbsp;</strong>Shayad koi dusra hota toh use samjhata, usey fatkarta, usey sahi rah dikhata aur apna ji-jaan laga deta ki sahi rasta usey dikh jaaye, par khud par jor nahi chalta.</li><li><!--block-->Mainey apni samasya kabhi apney maa-papa ya anya kisi ko nahi batayi. Khud me hi ghutata rahta hu. Sochta hu ki unhey dukha hoga, ye jaan kar ki mai aajtak unhey dhokha deta raha. Par sacchey dil se, dil par hath rakha kar sochta hu ki kya mai sahi kar raha hu? Kya sahi me unhey sacchai nahi pata chal rahi hogi ki mai kya kar raha hu?</li><li><!--block--><strong>Shayad Ishwar mere sath hai. Isiliye wo sabhi ko chhup rakhey huye hai. Unhey dhiraj bandhaye huye hai ki ek din mai safal jarur howunga.&nbsp;</strong></li><li><!--block--><strong>Premendra Kumar (28/1/2010)</strong></li></ul><div><!--block--><strong>31-Jan-2010</strong></div><ul><li><!--block-->What can I do when my ownself is not with me rather this is against me</li><li><!--block--><strong>Premendra Kumar (31/1/2010)</strong></li><li><!--block-->I love you ****** But you never accepted me , your will !! I love you ******.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.019Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.019Z"},"uniqueId":"dbddd34e-993a-47c6-b131-ca1715de8a40","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f03b"},"name":"2009-2010 In this copy I'll try to write down my wishes. I want to fulfill","heading":"2009-2010 In this copy I'll try to write down my","smartContent":{"content":"<div><!--block--><strong>2009-2010</strong></div><ul><li><!--block-->In this copy I'll try to write down my wishes. I want to fulfill them. In&nbsp; stead of that I don't know whether I'll finally fulfill them or not. But they always pops in mind and I get inspired to fulfill them. What in future, I dont know, here I am mentioning them. -&nbsp;<strong>Premendra.</strong></li><li><!--block--><strong>7 Reasons to be happy</strong><ul><li><!--block-->Enjoy the present moment.</li><li><!--block-->To be happy now can benefit your future</li><li><!--block-->Turning into joy can improve your health.</li><li><!--block-->Feel you'll be always happy, you can do it right now.</li><li><!--block-->Everyday is a new opportunity to be better than yesterday.</li><li><!--block-->You can be who you want to be right now, no matter what your situation looks like.</li><li><!--block-->Finding joy in the present moment, this will make a difference.</li></ul></li><li><!--block--><strong>100 Reasons to be Happy today</strong><ul><li><!--block-->Every new day is another chance to change your life.</li><li><!--block-->This opportunity is an opportunity to be better than yesterday.</li><li><!--block-->You can be who you want to be right now.</li><li><!--block-->The glass is both half-empty and half-full.</li><li><!--block--><strong>Happiness comes from your own actions.</strong></li><li><!--block-->You have great friends.</li><li><!--block-->You can learn new thing today.</li><li><!--block-->The summer is coming soon.</li><li><!--block-->You are alive.</li><li><!--block-->You are already complete.</li><li><!--block-->You are unique.</li><li><!--block-->You have an influence on the world.</li><li><!--block-->You can change the world.</li><li><!--block-->You can feel emotions.</li><li><!--block-->You can change your perceptions.</li><li><!--block-->You have accomplished great things.</li><li><!--block-->You can be creative.</li><li><!--block-->You can change your state of mind by engaging in a physical activity.</li><li><!--block-->You can take responsibility and be empowered.</li><li><!--block--><strong>There is only now.</strong></li><li><!--block-->`Just think over what you do have and be happy.</li><li><!--block-->There is something good in everyday.</li><li><!--block-->You can eat something healthy today to make you feel good.</li><li><!--block--><strong>Life is beautiful.</strong></li><li><!--block-->We are in this life together.</li><li><!--block--><strong>Shared joy is a double joy, shared sorrow is half sorrow.</strong></li><li><!--block-->You can start writing down the good things that happen.</li><li><!--block-->You can achieve something today.</li><li><!--block-->The weather is good.</li><li><!--block-->You can listen to music.</li><li><!--block-->You can enjoy the sunrise.</li><li><!--block-->You can enjoy the sunset.</li></ul></li><li><!--block--><strong>What are primary responsibility of a Software Developer:-</strong><ul><li><!--block-->Primary responsibilities of a software developer is to&nbsp;<strong>analyse the problem and gather the information</strong>&nbsp;about a particular program, and then&nbsp;<strong>on the basis of the analysis the programmer makes an error-free program/software which meet all the requirement</strong>&nbsp;of the company.</li><li><!--block-->The developer is also responsible for making a program within due date. He should do proper documentation of the program so that it will be easier for a program so that it will be easier for a newcomer to easily understand the code and modify/change it according to required needs.</li></ul></li><li><!--block--><strong>Different phases of software development.</strong><ul><li><!--block-->Requirement &amp; Analysis phase.</li><li><!--block-->Design phase</li><li><!--block-->Coding phase.</li><li><!--block-->Testing and Integration phase.</li></ul></li><li><!--block--><strong>Software Developer responsibilities , in summary</strong><ul><li><!--block-->Time Bounded coding</li><li><!--block-->Proper Documentation for ease of understanding, modify or change according to requirement.</li></ul></li><li><!--block--><strong>Top 10 qualities of Excellent Manager</strong><ul><li><!--block-->Creativity</li><li><!--block-->Structure</li><li><!--block-->Intuition</li><li><!--block-->Knowledge</li><li><!--block-->Commitment</li><li><!--block-->Being Human</li><li><!--block-->Versatility</li><li><!--block-->Lightness</li><li><!--block-->Discipline/Focus</li><li><!--block-->Big Picture, Small Actions.</li></ul></li><li><!--block--><strong>Top 10 Qualities of a Project Manager</strong><ul><li><!--block-->Inspires a shared vision</li><li><!--block-->Good Communicator</li><li><!--block-->Integrity</li><li><!--block-->Enthusiasm</li><li><!--block-->Empathy</li><li><!--block-->Competence</li><li><!--block-->Ability to delegate task</li><li><!--block-->Coolunder pressure</li><li><!--block-->Team building skills</li><li><!--block-->Problem solving skills</li></ul></li><li><!--block--><strong>Ten qualities of an Effective Team Player</strong><ul><li><!--block-->Demonstrate reliabilities</li><li><!--block-->Communicates constructively</li><li><!--block-->Listens actively</li><li><!--block-->Functions as an active paricipant</li><li><!--block-->Shares openly and willingly</li><li><!--block-->Cooperates and piches in to help.</li><li><!--block-->Exhibits flexibility</li><li><!--block-->Shows commitment to the team.</li><li><!--block-->Works as a problem-solver</li><li><!--block-->Treats others in a respectful and supportive manner</li></ul></li><li><!--block--><strong>Ten qualities of Valuable Employee</strong><ul><li><!--block-->Listening to instructions</li><li><!--block-->Taking responsibility</li><li><!--block-->Taking initiative</li><li><!--block-->Giving credit to others</li><li><!--block-->Being responsive</li><li><!--block-->Performing your duties cheerfully</li><li><!--block-->Being dependable</li><li><!--block-->Staying healthy</li><li><!--block-->Becoming self-displined</li><li><!--block-->Exceeding expectations</li></ul></li><li><!--block--><strong>Top 5 characteristics of the Ideal Employee</strong><ul><li><!--block-->Dependability</li><li><!--block-->Honesty &amp; Integrity</li><li><!--block-->Positive, proactive attitude</li><li><!--block-->Willing to work.</li><li><!--block-->Uses downtime productively</li></ul></li><li><!--block--><strong>5 key qualities of a Good Employee</strong><ul><li><!--block-->Enthusiasm</li><li><!--block-->Strong work ethic</li><li><!--block-->Initiative</li><li><!--block-->Reliability</li><li><!--block-->Great communication skills</li></ul></li><li><!--block--><strong>\"Kaam kahela ki humra chhu.. tab dekh.. Kaam Kaam ke sikhawela\"&nbsp; - Maa</strong></li><li><!--block--><strong>Duties &amp; Responsibilities of a Software Engineer</strong><ul><li><!--block-->A computer software engineer works in manufacturing, engineering, government and educational institutions. He uses his well-developed analytical and problem solving skills to design and develop sofware for business applications, computer game and operating systems</li></ul></li><li><!--block--><strong>Planning and Creating</strong><ul><li><!--block-->A software engineer begins each new task by analyzing the client's needs. He selects the mathematical, engineering and/or computer techniques that provides most efficient.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.025Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.025Z"},"uniqueId":"795e5b3c-2b40-4621-86f2-2ed050e797a0","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f03d"},"name":"================================================================= 08/01/2017, 21:12 hi try to add me ================================================================= 05/07/2017, 09:31 ?????? ???? ??? ??","heading":"================================================================= 08/01/2017, 21:12 hi try to add me ================================================================= 05/07/2017,","smartContent":{"content":"<div><!--block--><strong>=================================================================<br></strong>08/01/2017, 21:12<br><br>hi try to add me<br><br><strong>=================================================================</strong><br>05/07/2017, 09:31<br><br>?????? ???? ??? ?? ????? ??? ??? -<br><br>1. ?????????&nbsp; &nbsp; 2. ???&nbsp; &nbsp; 3. ??????<br><br>4. ?????&nbsp; &nbsp; &nbsp; 5. ?????<br><br><br><br>( ?? ?????? ?? ????? , ?????? ???? ?? ????? ?? ?? ????? ?? , ?????? ???? ????? ??????? ??? ???? ?? ???? ?? )<br><br><br><br>???? ????? ???? ??… ?????? ?? ??????? ?????? ??????? ??? ?? ?????????, ??? ?? ??????<br><br>?? ???? ?????? ??? ……??? , ???? ?? ????? ?? ???? ?????? ?? ?<br><br><br><br>???? …. ?????????? ?? ??????? ?? ?? ?????…..<br><br>???? ????? ????? ??? ??? -<br><br>1. ????????&nbsp; &nbsp; &nbsp; 2. ??????? &nbsp; 3. ?????<br><br>4. ?????&nbsp; &nbsp; &nbsp; &nbsp; 5. ?????&nbsp; &nbsp; 6. ??<br><br>7. ??&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 8. ????&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;9. ???????<br><br>10. ????????&nbsp; &nbsp; &nbsp; &nbsp;11. ??????? &nbsp; 12. ???????????<br><br>13. ?????????? &nbsp; 14. ???????&nbsp; &nbsp; &nbsp;15. ????????<br><br>16. ??????&nbsp; &nbsp; &nbsp;17. ??&nbsp; &nbsp; &nbsp; &nbsp;18. ??????<br><br>19. ?????? &nbsp; 20. ?????&nbsp; &nbsp; &nbsp; &nbsp;21. ???????<br><br>22. ?????????&nbsp; &nbsp; &nbsp;23. ????????? 24. ?????<br><br>25. ???????&nbsp; &nbsp; &nbsp; &nbsp;26. ?????????&nbsp; 27. ????????<br><br>28. ????????? 29. ??????? 30. ?????<br><br>31. ?????&nbsp; &nbsp; &nbsp; &nbsp; 32. ?????? &nbsp; 33. ????????<br><br>34. ??????????&nbsp; &nbsp; 35. ???????&nbsp; &nbsp; 36. ??????????<br><br>37. ??????? &nbsp; 38. ???????&nbsp; 39. ???????? 40. ???????????41. ??????&nbsp; 42. ?????<br><br>43. ??????&nbsp; &nbsp; 44. ??????? 45. ????????<br><br>46. ?????&nbsp; &nbsp; &nbsp; &nbsp;47. ???????&nbsp; 48. ?????<br><br>49. ????????? &nbsp; 50. ??????&nbsp; &nbsp; &nbsp;51. ????<br><br>52. ???????? &nbsp; 53. ?????????&nbsp; &nbsp; 54. ??????????<br><br>55. ?????????&nbsp; 56. ?????&nbsp; &nbsp; 57. ?????? 58. ?????? &nbsp; 59. ??????? 60. ????????<br><br>61. ????????? &nbsp; 62. ???????&nbsp; &nbsp; &nbsp;63. ??????<br><br>64. ?????????&nbsp; &nbsp; &nbsp; &nbsp; 65. ???????&nbsp;<br><br>66. ?????????&nbsp; &nbsp; &nbsp; &nbsp; 67. ?????????<br><br>68. ?????? &nbsp; 69. ????????&nbsp; &nbsp; 70. ??????<br><br>71. ??????&nbsp; 72. ??????&nbsp; &nbsp; 73. ??????????<br><br>74. ??????? &nbsp; 75. ??????? 76. ????????<br><br>77. ????&nbsp; &nbsp; 78. ?????? 79. ??????&nbsp;<br><br>80. ???????? 81. ???????&nbsp; 82. ???????<br><br>83. ??????&nbsp; 84. ???&nbsp; 85. ?????????<br><br>86. ???????????&nbsp; &nbsp; 87. ????????<br><br>88. ??????????&nbsp; &nbsp; &nbsp;89. ?????<br><br>90. ???????????&nbsp; &nbsp; 91. ?????<br><br>92. ??????????&nbsp; &nbsp; 93. ?????????<br><br>94. ??????????&nbsp; &nbsp; &nbsp;95. ?????????<br><br>96. ??????&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;97. ???????<br><br>98. ????????&nbsp; &nbsp; &nbsp; &nbsp; 99. ????<br><br>100. ????????<br><br><br><br>( ?? 100 ?????? ?? ????? ?????? ?? ?? ????? ??… ????? ???\"\"??????\"\"??,<br><br>????? ?????\"??????\"????? ?? )<br><br><br><br>\"???? ???-???? ????\"?? ???? ???-<br><br><br><br>? . ????? ????? ??????<br><br>?.- ????????? ?? ?????? ?? ??????&nbsp;<br><br><br><br>? . ?? ??????<br><br>?.- ?? ?? ???? 7 ???? ??? ???? ??????<br><br><br><br>?. ????? ?? ??? ??? ???? ??????<br><br>?.- ?????? ?? ????<br><br><br><br>?. ????? ???? ???<br><br>?.- ??????&nbsp;<br><br><br><br>?. ??? ??????<br><br>?.- ??????????? ?? ?????? ????<br><br><br><br>?. ????? ??? ??? ??????<br><br>?.- ???? 45 ???? ???<br><br><br><br>?. ???? ??????<br><br>?.- ????????? ?? ???? ??? ?????? ?? ????????? ?????? ?? ??? ?? ??? ???? ??????? ?? ????-????? ?????? ?? ????<br><br><br><br>?. ????? ?????? ???<br><br>?.- ??? 18 ??????<br><br><br><br>?. ????? ????? ???<br><br>?.- 700 ?????<br><br><br><br>?. ???? ??? ????-???? ????? ??? ???<br><br>?.- ?????-?????-???? ??? ?????? ?? ??????? ???????? ?? ??? ??, ?? ?????? ?? ???? ?? ??????? ??????? ?? ????? ?? ??????? ?? ???? ???&nbsp;<br><br><br><br>?. ???? ?? ?????? ?? ?????&nbsp;<br><br>?? ??? ??? ???? ?? ?????<br><br>?.- ?????????? ??? ???? ??<br><br><br><br>?. ?????? ?? ???? ???? ?? ???? ????? ??????? ???? ???<br><br>?.- ????? ???????? ??<br><br><br><br>?. ???? ?? ????? ??? ????-?????? ??? ??? ???<br><br>?.- ???????? ???<br><br><br><br>?. ???? ??? ???????? ?? ??? ??....?<br><br>?.- ???? ??????? ?? ?? ?????? ?????-???? ?? ?? ?????? ???<br><br><br><br>?. ???? ?? ????? ??? ???? ???<br><br>?.- ?????????<br><br><br><br>?. ???? ?? ??? ???? ???<br><br>?.- ????? ????????? ?? ??? ????<br><br><br><br>?. ???? ??? ????? ????? ????? ??? ???<br><br>?.- ????????? ?? ??- 574<br><br>?????? ??- 85&nbsp;<br><br>?????????? ??- 1<br><br>???? ??- 40.<br><br><br><br>???? ????-???? ?? ???? ?? ?? ???? ??? ??????? ??????? ???? ??? ?????? ?? ?????? ???? ???? ???????<br><br><br><br>????? ????? ????? ???? ???<br><br><br><br>33 ???? ????&nbsp; 33 ???? ???? ????? ??? ?????<br><br>???? ????<br><br><br><br>???? = ???????&nbsp;<br><br>??????? ??????? ??? ???? ?? ?? ???? ???? ??,<br><br><br><br>???? ?? ???? ?????? ???? ?? ?? ?? ???? ???? ?? ?????<br><br><br><br>?????? ???? ?? ?????????? ???? ?? ??? ?? ??? ???? ??? ?? ??????? ?? 33 ???? ???? ????? ??? ?? ?? ?? ????? ?????? ??? ?? ???? ????? ??? ?? ????? 33 ???? ???? ????? ???...<br><br><br><br>??? 33 ?????? ?? ???? ????? ??? ????? ???? ?? :-<br><br><br><br>12 ?????? ???<br><br>?????? , ????, ???, ??????,<br><br>?????, ????, ???, ???, ?????????, ???,<br><br>?????, ???????, ?? ??????...!<br><br><br><br>8 ?????? ?? :-<br><br>????:, ??, ?????, ???, ??, ????, ???, ???????? ?? ???????<br><br><br><br>11 ?????? ?? :-&nbsp;<br><br>?????: ,??,??????, ???????,<br><br>????????, ????????, ????, ???????,<br><br>?????, ????????, ?????, ?? ??????<br><br><br><br>???<br><br>?? ?????? ??? ??????? ?? ??????<br><br><br><br>??? :- 12+8+11+2=33 ????&nbsp;<br><br><br><br>??? ??? ?????? ?? ??? ??? ???? ??<br><br>?? ?? ??????? ?? ???? ?? ????<br><br>???? ?? ???????? ?<br><br><br><br>??????????????????<br><br>? ?????? ????? ?? ???? ????? ?????? ??<br><br><br><br>This is very good information for all of us ... ?? ????????? ...<br><br><br><br>?? ???? ???? ?? ?? ?? ??????? ?? ??? ?????? ......<br><br><br><br>???? ???? ?? ????????&nbsp;<br><br>?? ??????.<br><br>?????? ?? ??????<br><br>???? ?? ???????.&nbsp;<br><br>????? ???? ????? ?? ????&nbsp;<br><br>?????? ?? ??? ?????? ??? ???? ??????...<br><br><br><br>????&nbsp; ?? ????-<br><br><br><br>????? ???? ,&nbsp;<br><br>????? ???? !<br><br><br><br>????&nbsp; ??? ?? -<br><br><br><br>??? ?? ,&nbsp;<br><br>???? ?? ,&nbsp;<br><br>??? ?? !<br><br><br><br>???? &nbsp; ??? ??? -<br><br><br><br>????? ,&nbsp;<br><br>????????? ,<br><br>????????? ,&nbsp;<br><br>?????? !<br><br><br><br>????&nbsp; ??? ??? -<br><br><br><br>???????? ,&nbsp;<br><br>???????? ,<br><br>??????? ???? ,&nbsp;<br><br>????????? ??? !<br><br><br><br>???? &nbsp; ?????? -<br><br><br><br>????? ??? ( ???????? )<br><br>??????? ??? ( ?????? ???????? )&nbsp;<br><br>??????? ??? ( ??????????? ) ,&nbsp;<br><br>?????????? !<br><br><br><br>???? ??? ???-<br><br><br><br>?????? ,&nbsp;<br><br>??????? ,&nbsp;<br><br>???????? ,&nbsp;<br><br>?????? !<br><br><br><br>????&nbsp; ??? ????? -<br><br><br><br>?????????? ,&nbsp;<br><br>?????? ,&nbsp;<br><br>????????? ,&nbsp;<br><br>??????? !<br><br><br><br>???? ??? ??????? -<br><br><br><br>?? ,&nbsp;<br><br>?????? ,&nbsp;<br><br>????? ,&nbsp;<br><br>?????? !<br><br><br><br>????&nbsp; ???? ???? -<br><br><br><br>??? ?? ?? ,&nbsp;<br><br>??? ,&nbsp;<br><br>??? ,<br><br>??????? ,&nbsp;<br><br>??<br><br><strong>=================================================================</strong><br>Meri help agar koi karega toh woh mai hi hu. Ek baar issue analyse kar lenge toh fir 60% issue hum khud hi solve kar sakte hain. Baaki 40% issue ke liye well wishers ko call kar sakte hain.<br><br><br><br>Iss gyan ki keemat hai mera Accenture ka job. Yaha mai dysro se help mangta raha, response nahi kiya ki ye kaam me mujhey jyada time lag sakta h. Chup raha aur usko manager ne ego pe le liya. Aur mera job jaaney wala hai.<br><br><br><strong>=================================================================</strong><br>08/07/2017, 08:59<br>Hum khud se bahut baat karte hain..&nbsp; humko ghamand bahut jaldi ho jata haiGhamand ka ulta namrata hota hai<br><br><br><strong>=================================================================</strong><br>08/07/2017, 16:44<br>Aaj infosys ka interview dene gaye they<br><br><br><br>Aap kis chij me expert hain<br><br>Aap itni jaldi job kyu change karna chahte hain<br><br>Estimation ka kya softwares hota hai<br><br>Aapney kaun kaun se tool par kaam kiya hai<br><br>Aap future me kya banana chahtey hain<br><br>Aagar aap software architect banana chahtey hain toh kya aapko pata hai ki software architect kya karta haiTeam handling kya hota haiTeam handling me kya karna hota hai<br><br><br><strong>=================================================================</strong><br>10/07/2017, 09:50<br>Last week infosys interview dene gaye, marine drive ghume, sunday office gaye, shaam ko d mart se shopping kiye, ghar pe baat kiye.<br><br><br><br>Aaj gym me ek dost banaye.&nbsp;<br><br><br><br>Isse jiwan ki chinta kam lag rahi h.<br><br><br><strong>=================================================================</strong><br><br>18/07/2017, 13:19<br>Mere accenture me failure ka following cause h<br><br>1. 4 saal support profile me kaam kiya par hamesha mera mann development profile me jaane ka karta tha. Maine internet se download kar ke interview questions yaad kar liye. Par practice nahi thi. Yaha expectations poora nahi kar paya aur performance me fas gaya.<br><br>2. Apni profile aur apni niji jindgi ke problem se yaha kisi se dosti nahi kar paya. Proper response nahi diya aur sab mere against ho gaye. Managers jab mera defend kar rahe they tab DU lead ke pass bakwas kar aaya ki mujhey kuch nahi aata.<br><br>3. Khud ko defend karne ki jagah khud ko weaker bana ke exposed kar diya.4. Khud ki burai par control nahi kiya. Isiliye fail ho gaya.<br><br><br><strong>=================================================================</strong><br>22/07/2017, 11:22<br>Aaj Capgemini ka interview diya<br><br><br><br>Can we create collection of interface objects<br><br><br><br>How to prevent web applications from different malware attacks. Like multiple requests coming to the applications to choke it.<br><br><br><strong>=================================================================</strong><br>31/12/2017, 03:24<br>Mere mann me ek shaitan baitha hua lagta hai jo baar baar humko galat hi suggwstion deta hKi gutkha khaoHum solutions ke liye nahi soch pate... duniya me sabko yahi chahiye.. solution ya proper response ki kab tak hogaHum khud ko dhokha dete hainProblem ko bada kar ke sochte hainJab sirf itna sochne se kaam chal sakta hai ki humko shant rahna hai, dusro ko observe karna hai ki wo kis type ka reaction dete hain,Meri problem hai ki<br><br><br><br>Hum response nahi karte aur karte hain to galat , jyada boldete hain. Gutkha kganey ke chalte social nahi ho patekhud par vishwash nahi hai<br><br><br><strong>=================================================================</strong><br>01/01/2018, 18:00<br>Aaj yogesh sir se baat hui..<br><br><br><br>Unko call kiya new year ke liye<br><br><br><br>Allegation - no preventive action taken for gainmanager monthly job<br><br><br><br><br><br>My allegation - no proper information being provided<br><br><br><br>Will discuss on WednesdayI discussed same with maa and narendra . They said \"always think kuch nahi hoga\".. koi na koi rasta niklega<br><br><br><strong>=================================================================</strong><br>03/01/2018, 11:02<br>My time requirements<br><br>1.30 hrs for daily works tea medicine hot water<br><br>1.30-2 hrs gym<br><br>1 hr prepare for day<br><br>1.30-2.30 - avg 2 hrs commute to officeIn evening<br><br>1 hr packup from office<br><br>1.30-2.30 - avg 2 hrs commute back to home<br><br>1 hrs dress for night + dinner<br><br>1-2 hrs prepare for next day+ analysis of day<br><br>5-8 hrs sleep<br><br><br><strong>=================================================================</strong><br>05/01/2018, 19:21<br>Basic information i must know in office<br><br>1. Name and contact numbers of team members<br><br>2. Roster and shift of people in teamSuggestions from yogesh<br><br>Take control on servers related to applications&nbsp;<br><br>Ask harish to create my id on servers<br><br>Collect login credentials of servers<br><br><br><strong>=================================================================</strong><br>05/01/2018, 21:22<br>Two tasks in weekend<br><br>1. Was configuration<br><br>2. Job search<br><br><br><strong>=================================================================</strong><br>05/01/2018, 23:22<br>Oath of Prem<br><br>I will reply either proper or improper to all except Sanjay Yogesh Somen shiekh Amit Tyagi<br><br>2. I will not do freindly behave but only professional behavior<br><br>3. No formality eat or distribution of sweet<br><br>4. Speak cut to cut<br><br>5. Will raise concern<br><br>6. Will reach and leave office on time<br><br><br><strong>=================================================================</strong><br>10/01/2018, 09:43<br>Why i fear to speak?<br><br>Hum ek bolenge toh log char batein sunayenge<br><br><br><strong>=================================================================</strong><br>12/01/2018, 10:00<br>I fear to speak-&nbsp; impact / consequence faced due to this issue<br><br>1. People avoid from further discussion<br><br>2. People might retaliate the embarrassment observed while fail to communicate<br><br>3. I feel guilty for&nbsp; not being better expression of my concern/agreements/disagreement/query to other. Also time passes I feel uneasiness in further discussion with other.<br><br><br><strong>=================================================================</strong><br>12/01/2018, 11:58Monday ko kedar sir call kiye they. Unko bol diya ki mumbai khata hai. Aap acche hain but baaki log Mumbai ke aap jaise nahi hain.<br><br><br><br><br><br>Aaj friday 12 dec ko office aaney ke baad kedar sir ko call lagaya tha aur unse baat kiye ki hum Mumbai me office aur room par apney weak verbal communication skill ke karan kitna problem me rahe. Kaise saara kaam karney ke baad bhi waha hr aur manager ne resignation ke liye force kiya aur kyu mere man me aaya ki ye jagah Mumbai mujhey yaha se jaaney ke liye kah rahi hai. Kedar ne saari baatein suni aur kuch gain manager ki payout activity ke liye brief me bataya. Unhone fir baad me call karney ko kaha aur aaj ki humari baat khatam ho gayiFriday 12 jan 2018 ki baat hai above conversation<br><br><br><strong>=================================================================</strong><br>16/01/2018, 22:18I feel difficulty&nbsp;<br><br>1.asking que<br><br>2. Assignment of tasks<br><br>3. Creation of plans<br><br><br><strong>=================================================================</strong><br>20/01/2018, 15:59HDFC URGO plan&nbsp;<br><br>&nbsp;<br><br>40000 annual premium<br><br>5 saal<br><br>Tax benefits<br><br>Life insurance cover for 4 lac in case of death of nominee<br><br>After 5 year 2 lac 95 thousand<br><br><br><strong>=================================================================</strong><br>21/01/2018, 09:47Meri duty kya hai<br><br>Ghar par papa maa bhai bahan khush rahe<br><br><br><br>Offuce me din nikal jaye<br><br>Extra pressure other than home discard karu excuse du<br><br><br><br><br><br>Aage aane wali pareshani ko calculation karu aur usje niwaran ka upay karu<br><br><br><strong>=================================================================</strong><br>25/01/2018, 09:47Mere me kamiyan<br><br><br><br>1. Hum situation me fas jate hain. Kaam ko dusro pe thopte nahi.<br><br>2. Ek hi galati baar baar karte hain.<br><br><br><strong>=================================================================</strong><br>25/01/2018, 10:54Humko kya karna hai<br><br><br><br>Kshanik sukh ke chij se dur rahna hai<br><br>Kshanik dukh ki situation sweekar karna haiHumara kaam kya hai<br><br>Jo mere expertise domain ke bhitar ka kaam hai wo karna hai aur dusri chijo ko (proper response ke sath) dusro par distribute karna hai.<br><br><br><strong>=================================================================</strong><br>27/01/2018, 08:45Self realization<br><br><br><br>Papa is right from beginning<br><br>I misinterpreted him. I was thinking he is just killing my time but he was giving lessons of life<br><br><br><strong>=================================================================</strong><br>11/02/2018, 05:04Hum shuru se hi bahut darte hain. Hum bahut jaldi maan lete hain ki mere se nahi ho payega. Hum akele nahi kar payenge. But last me jab hum ekdum akele pad jate hain , jab mere paas koi vikalp nahi hota tab hum hi koshish kar ke situations se ladna chalu kar dete hain. Khud par avishwas hi mere dukh ka sabse bada karan hai. Humko khud par vishwas nahi hai Isiliye dusre bhi mere pe vishwas nahi kar paate. Humko khud ki acchai par vishwas nahi rahta Ya samay ke sath ye vishwas kam ho jata hai. Hum shuru me give up kar dete hain. Isiliye galti kar dete hain, pareshan rahte hain.&nbsp;<br><br><br><br>Life me 2-3 example jab hum pahle give up kiye fir baad me hum thak haar kar situations se lade aur partial victory haasil kiye.<br><br>1. Cycle chalana<br><br>2. Bike car chalana<br><br>3. Sanjay driver ke baar baar kahne par ki hum hopeless ho jaate hain hum last me usko car me bitha kar ghar tak laye.<br><br>4. Pahle wife ke behavior ko expose karne me dare fir last me vahi jab mujhey thane me le gayi tab jab khud ko vaha akela paya tab khud ko apne dhang se defend kiye aur sakushal vaha se vapas aaye.<br><br>5. Professional life me baar baar ownership lene me give up kiye. Hum akele nahi kar payenge. Apni limit ka khud pata nahi rakhe.<br><br><br><strong>=================================================================</strong><br>12/03/2018, 00:32Recent example of give up<br><br><br><br>6. Higher management se aadesh aaya ki report nikalo uni ka , jisme11 March 2018<br><br><br><br>Subah me gym jane se pahle chacha ke pass gaini<br><br>Chacha herbal tea pilailan<br><br>Chachi ko bataini ki labour ke sath chai pilalu se chai chor ke chal gail rahni<br><br><br><br><br><br>Shaam ko chacha ke pass baigan ke sabji deni<br><br><br><br>Chacha kahlan ki bhagwan ek darwaza band kare lan ta dusra khol dewe lan<br><br><br><strong>=================================================================</strong><br>21/03/2018, 10:59<br>20 March 2018<br><br><br><br>Step dadi bahut bimar bari ye khabar bipin chacha se milal. Papa unse mile gailan.<br><br><br><br>Office me Anshul aur Kirti ke kaam ko na bol deni.<br><br><br><strong>=================================================================</strong><br>26/03/2018, 05:12<br>Mera duty/kartavya kya hai?<br><br>Mere se kon kon se log linked hain? Unki mere se kya expectations hain? Meri unse kya expectations hain? Un log ka meri ya mere family ki life me kya importance hai?Meri khud se expectations hai ki subah me time par uth ke kasrat karu nitya kriya kar ke office ka kaam karu dopahar me khana khau shaam me time par ghar aa jau raat me time par so jau.<br><br><br><strong>=================================================================</strong><br>05/04/2018, 10:41<br>Papa expects<br><br><br><br>Hum chanchal rahe.<br><br><br><strong>=================================================================</strong><br>06/04/2018, 11:15<br>Dada ki 2 bahan thi<br>1 ki shaadi shishwa aur ek ki shaadi dhekhan hui hai.<br>Gauri chacha papa ke fufere bhai hain<br>Siswa tarkulwa se 2 kilometers dur hai<br><br><br><strong>=================================================================</strong><br>06/04/2018, 16:29<br>I feel difficulty in ticket incident management and severity management discussion.. need to view some videos and tutorial for same in leasure time<br><br><br><strong>=================================================================</strong><br>07/04/2018, 17:23<br>Sabere 5 baje uthey.. fir fayaz ne laptop kholte hi pung kar diya .. uski thori help kiye.. fir dawa khaye aur so gaye.. 9 baje maa ke baar baar jaganey par gussa huye aur fir naha kar taiyar huye.. subah me 10 rupiya ka gutkha bhi kharide.. fir khana khaye.. khana me chawal ke sath daal nahi tha.. roti di thi.. uske liye gussa huye.. fir narendra ke sath court gaye.. papa nahi gaye court .. iske liye maa se papa ke samney puchey.. gussahuye..Court pahuchte hi Narendra ne kaha ki aaj vaqueel se baat kar ke gawahi agle date par talwa do.. uska reasoning tha ki agar bich me 16 april ya 24 april ko Chanpatiyan ke side se agar kuch action hota hai toh humlog gawahi usi ke according de sakte hain...<br><br><br><br>Court ke bahar baithkar Narendra se kuch baat kiye.. papa ke burai kiye.. bole ki humko tumse papa rimi se koi matlab nahi hai.. maa ke liye ji rahe hain.. maa ke deh khatam tum log bhaad me jaao..<br><br><br><br>Narendra bhi bola ki papa kabhi apna galati nahi mante.. maa ko fasa kar jitate hain.. barginiya wala case me bhi tumko dhaal bana kar rista tod diye..<br><br><br><br>Lautney me Narendra ko bataye ki ab hum papa ko bura nahi mante.. inke sabhi bhai aur ristedaar inse bhi gaye gujre hain..<br><br><br><br>Lautney me Ballabhgarh me narendra ne humko 10 rupiya ka ganna juice pilaya..<br><br><br><br>Court me next taarikh 12 june ki mili.. aaj gawahi nahi huyi.. judge mere se puch rahi thi ki tum Premendra ho..toh bahar kon baitha hai.. tum dono twin ho kya..Ghar aakar papa machli lane chale gaye.. pahle wo prince se bike mangney ko kah rahe they.. fir Narendra maa ney mana kar diya..2 baje mera mann vaishno devi jaaney ka hua.. papa maa kuch nahi bole.. par wo aaj mere janey ke paksh me nahi they...<br><br><br><br>Fir hum bhi sochey ki yogesh iss week hrishikesh tour pe hain.. jana thik nahi hoga.. maa ka bulawa nahi tha ... baad me jayengePapa par 4 baje hum gussa ho gaye ki bike kyu de dela sumit ko????<br><br><br><br>5000 rupiya nikale atm se.. 100 rupiya ka gutkha kharid liye...<br><br><br><br>Shaam ko chacha aihan machri khobse...<br><br><br><br>Papa narendra se AC thik karaney ke liye baat kar taran...Humko 2-3 t shirts aur 2-3 casual pajama kharidna hai.. 2000-3000 till 30 june 2018<br><br><br><br>For home causal or gym or any trip like rishikesh par janey ke liye<br><br><br><strong>=================================================================</strong><br>08/04/2018, 13:29Kal shaam ko bipin chacha apni family ke sath mere ghar machli khaney aaye.&nbsp;<br><br><br><br>Chachi ko pranam karney me hum chachachi se takra gaye. Humko kharab feel hua aur tab se aaj 2 baje tak khud ko guilty feel kar rahe hain. Ab hum chachi ko dur se hi pranam kar lenge.<br><br><br><br>Chacha machli kha ke narendra aur papa se government job aur apni aur Narendra ki allowonces ke liye baat kar rahe they.<br><br><br><br>Hum aayush ke sath bahar tahalney nikal gaye.<br><br><br><br>Aayush ne bataya ki usko ultimate relaxation sabse jyada pasand hai.. uske pahle IIT aur then management , human handling aur human pscicology me interest hai.Aaj subah me vaishno devi ka bhajan sunte samay papa idhar udhar jaise prince bipin ya sadhu chacha ke bike mangwaney ke baat kar rahe they.. humko acha nahi laga&nbsp; &nbsp; hum bole ki apni bike diye hi kyu..&nbsp; iss par maa se jhagra ho gaya&nbsp; &nbsp; hum soney chale gaye. &nbsp;<br><br><br><br>Uthey to dharmesh aaya tha aditya ke sath machli khaney..<br><br><br><br>Hum thori der baat kiye unse aur phir bahar nikal ke gutkha kharid kar aur chola bhatura kha kar aa gayePhir ghar ka khana kha kar phir se sone chale gaye&nbsp; .Mere man me chinta chal rahi hai ki<br><br><br><br>Rimi ki shaadi kaise hogi<br><br>Papa maa ko bihar me MOTIHARI me jameen kab milegi<br><br>Hum akele yaha kaise rahenge<br><br>Narendra ka shaadi kaise hoga<br><br>Hum yaha acha se rahenge na<br><br><br><strong>=================================================================</strong><br>09/04/2018, 05:363 pm ko narendra rimi padmawat movie dekhne lage.. hum apna laptop khol ke 3 pm se 12:30 am night tak old movies download kiye..&nbsp;<br><br><br><br>Shaam ko 6-7 baje motor se paani nahi aa raha tha.. hum dekh rahe they aur sikhna chah rahe they ki kya issue hai aur kaise solve kare? Tab tak papa aaye muh me gutkha chaap kar aur mujhey isharo me vaha se hatney ko kaha. Humko unka mujhey hatana acha nahi laga. Isiliye maine unse kah diya ki aisan kyu kare la? Papa humse kuch nahi bole par apna kaam karney lage. Par unhoney bhi sahi se motor me paani nahi daala. Fir rimjhim aur Narendra ne motor me paani dala aur usko sahi kiya.<br><br><br><br>Apney bed par aakar papa ney maa se shikayat kar di ki hum abhi gussa huye they.Raat me 12:30 am par so ke meri nind 1:30 am me tut gayi... fir humko gutkha ki talab hui.. tension me they... fir 2:30 - 3 baje tak hum thoda tension me they..&nbsp;<br><br><br><br>Last me geeta saar padhe.. usme se ek line baar baar repeat kiye man me .. hey bhagwan hum khud ko aapko samarpit karte hain.. aap mujhey sweekar karo.. phir 3:00 baje tak mujhey nind aa gayi...5:00 am par meri nind fir khul gayi.. uthte hi humko 3 pm baje se raat bhar ka saara baat likhne ka man kiya...Subah me uthkar hum bahar khada they .. sarita aunti motor chalaney aur pani bharney bahar aayi thi.. wo jaan bujh kar vahi ruki thi aur mere se baat karney ka wait kar rahi thi.. unhoney mere se motor chalaney aur paani aaney ki baat ki..&nbsp;<br><br><br><br>Hum bahar khade ho kar papa maa ki baat.. papa ko itni sunne wali biwi bacche milney ki kismat aur meri futi kismat ke liye tension me they.&nbsp; ..<br><br><br><br>Fir 5:40 am par aakar hum yaha apni baat likhney lage<br><br><br><strong>=================================================================</strong><br>09/04/2018, 13:527:30 AM par hum gym ke liye nikal gaye9 baje aaye toh Dharmesh aaya tha<br><br>Wo papa se baat kar raha tha.. khana khaya..<br><br>Papa ney usko bagal me Bipin ya uske papa se usko milwaya tha,, kyuki wo L&amp;T ya ek dusri mechanical company me kaam karte hain<br><br><br><br><br><br>Khana khakar jab wo hath dhone aaya tha toh shayad usney mujhey rajnigandha khate dekh liya tha... ye ek next escalation hai .. aur shayad ab wo bhi Bipin chacha aur Dhruv chacha se iske baare me kahega<br><br><br><br>jab wo janey laga toh papa ne usko 200 rupiye dilwaye.. wo mana kar raha tha.. par maa ke hath se papa ne usko finally dilwa hi diya...<br><br><br><br>Mujhey personally ye acha nahi laga kyuki dhruv chacha isi ke liye toh mujhey boley they ki tuhar papa ko paisa ke abhimaan hai...<br><br><br><br>Khair papa diye toh hum kuch nahi bole12 baje Sumit ke papa ji aaye they.. bike lautane.. jameen ka bhav kam hi lag raha hai shayad.. phir papa defend kiye aur bole ki 9.5lac se kam me mat baat kariye..<br><br><br><br>Jate huye unko photocopy of jameen dastavez dilwaye...<br><br><br><br>Let's look aage kya hota haiSubah me papa shrilal ji ya Sanjay sunil ke kisi ristedaar se rimi ke liye kuch baat kar rahe they.. details abhi mujhey clear nahi hai.. let's look aagey kya hota hai...<br><br><br><strong>=================================================================</strong><br>10/04/2018, 05:58Kal din me papa sudha fua ke husband Vinod fufa se rimi ke liye baat kiye. Wo help karenge. Fir babli didi aur Geeta mausi se baat kiye.<br><br><br><br>Shaam ko hum office ka resolve jiffy ke liye call attend kiye. Resolve ke db ka version 11 ke liye upgrade hona hai. Fir shayad ye MSSQL pe move hona h. Version 11 ka testing mid may tak development team karegi.<br><br><br><br>Resolvejiffy ka deployment 11 April ko hoga.<br><br><br><br>Raat me sone ke samay splash kiye plax se. Sabere me bechaini kam hai.&nbsp;<br><br><br><br>Pet ka dard kam hai. Paikhana thik hi hua. Ab gym ke liye nikalte hain. Dawa aur green tea pina hai.<br><br><br><strong>=================================================================</strong><br>11/04/2018, 06:39Kal 7:30 tak gym se aa gaye they.<br><br>Office 11 baje tak pahuch gaye they.<br><br>Pure din me shaam tak pocket se 140+20 rs kharch kiye.<br><br>20 rs fayaz se vapas liye they<br><br>ATM se 85 + 95 rs kharch kiye<br><br><br><br>Sanjay ne din me haldiram ka Raj-Kachouri khilaya<br><br>Usse apne case ke bare me , yaha office ke challenges ke liye baat kiye<br><br>shaam ko 10:15 tak ghar aa gaye<br><br>raat me plax kar ke aur laung muh me rakh ke soyesubah me 5:30 me uthey<br><br>dawa kha liye aur green tea pi liye<br><br>7 baje gym ke liye nikal gayekal 3 rajnigadha, 1 cig aur 2 shikar khaye<br><br>Aaj kal se thori be chaini hai..<br><br>but plax karney ka fayda hai<br><br><br><strong>=================================================================</strong><br>12/04/2018, 05:4311 apr ko 2 rajnigandha aur 1 cig piye shaam me<br><br><br><br>Sanjay ke sath core java, lambda expression ka baat kiyeSheikh sir se baat kiye, wo active rahney ki baat kiye.&nbsp; Budhe jaisa mat raho ye bhi bole..&nbsp;<br><br><br><br>Shaam ko resolve ka deployment tha. Main work naresh fayaz Anshul ko karna tha<br><br><br><br>Subah me gym gaye theyKal ka total kharch 140 rs cash aur 105 rs atm se<br><br><br><strong>=================================================================</strong><br>14/04/2018, 06:3112 April ko office pahuchte hi resolve ka ek issue aaya.&nbsp; Jaate hi logs check karney ke liye Yogesh ka call aya. Mai din bhar usi me laga raha. Shaam ko fix available hua toh usko deploy karne ke liye rfc approve karney ke liye yogesh ne kaha. Fayaz ko ping kiya ki 8-10 support kar do usney mana kar diya. Mainey yogesh ko bataya. But usney koi help nahi bataya. Fir rfc ka kaam kar ke 10 baje office se nikle. 12 baje ghar pahuche. Mainey Yogesh ko late se ghar pahuchney pe message kar diya.12 april ko Harish se shaam me mere frequent night shift ke liye baat kiya. Usney koi satisfactory reply nahi kiya. Wo bole ki 3Week ke baad tumko night shift me dala hai.<br><br><br><br><br><br>13 ko subah mail kar diya ki i am not comfortable with frequent night shifts.<br><br><br><br>Din me kuch jyada kaam nahi raha. Shaam ko yogesh aaye aur bole ki tumko nahi likhna chahiye tha ki tum jyada support karte ho.. tum extra kya kar rahe ho... 13 ko subah fayaz pyaar se baat kar ke mere se Yogesh harish ka shikayat kiya. Hum bole ki ye log mere mazboori ka fayda utha rahe hain...&nbsp;<br><br><br><br>Shaam ko sanjay se baat hui.. wo bhi mere se hi defensive rah ke questions karney ko bole ..<br><br><br><br>8:30 pm tak Ashok jhasya ki help kiye... eclipse php setup me<br><br><br><strong>=================================================================</strong><br>15/04/2018, 06:56Eclipse php setup me ashok ka help kiye. Phir 8:30 me office se nikal gaye &nbsp;<br><br><br><br>Raat se agle din shaam tak tension me they ki pata nahi kya hoga? 14 April ki shaam ko sheikh sir ka mail aaya tah laga ki aage jo hoga acha hoga.&nbsp;<br><br><br><br>Resolve down hua tha.. usmey help kiye...<br><br><br><br>15 April ko subah sapna aaya ki hum Chanpatia walo ke ghar pahuch gaye.. waha koi ladki ki hatya ho gayi thi.. uske pati ne uske Gupta ang ko damage kar ke usko mara tha<br><br><br><br><br><br>14 April ko Bipin chacha mutton le ke aaye they.<br><br><br><strong>=================================================================</strong><br>15/04/2018, 18:0314 April ko 3-4 ghante javascript ka video dekhe..<br><br><br><br><br><br>15 April ko 5 ghante modern india aur 1 ghante modern pakistan video dekhe...Mere me ek notice kiya hai ki&nbsp;<br><br><br><br>Hum bade kaam ko bhi ek din me hi khatam karna chahte hain... na ki 20-30 minutes ke daily intervals&nbsp; me tod ke... isse kaam ka 10-20 % kar ke thak jate hain aur agle din se karna chhor dete hain.. ya ek din me hi frustrated ho jate hain.. iska example aaj ka mera 7 ghante ke modern India history ka video ek hi din me khatam karne ki koshish hai.. 3 ghante baad siir dukh raha hai.. ab shaam ko tension ho raha hai ki baaki aaj nahi khatam kiya toh fir pending hi rah jayega.. papa soch rahe honge ki din bhar computer pe hi laga rahta hai.. mujhey ab shaam me tension ho rahi hai ki maa ki koi help nahi ki... itna time deke mainey kya sikha...Aaj subah se 100 rs ka gutkha aur 50 rs shaving aur 100 rs extra kanji wada.. rajni gandha pe kharcha hai..Kal 14 march ko 150 rs ka kharcha hai<br><br><br><strong>=================================================================</strong><br>16/04/2018, 05:51Ek din me pahad toeney aur dusre din se usi kaam se ghrina ke karan hum ultimately success ke apney goal se bhatak jate hain.<br><br><br><br>Shuru se hi hum khud me hi khoye rahte hain... kuch batein man me dabe honey se aur ye sochney se ki \"pata nahi papa ko batayenge toh kya reaction hoga\" hum darr jate they15 April ko shaam ko 2 litre doodh aur 10000 rs nikalney gaye.. tab pramod ist wale se mulakat ho gayi.. usko bata diya ki hum vapas Concentrix me assistant manager banke vapas aa gaye hainUsne mere se baccho ke liye pucha toh mainey bol diya ki Bhagwan ne abhi rok laga di haiKal 7 ghante video dekhe... raat me last me akbar birbal dekhe.. aaj kya kar raha hu.. man thora bechain hai.. meri life aisi kyu hui.. kyu meri life me Pappu babloo mukesh aur mukesh ke chote bhai aaye.. meri life ki chuppi ka karan vahi pe hai.. waha se hi galatiyan enter hui meri life me.. kisi se kuch baat na karna.. chupp aur khoya khoya rahna.. kisi ki baat ka jawab nahi de pana<br><br><br><strong>=================================================================</strong><br>16/04/2018, 14:48Jiwan me sirf udasi dikh rahi hai... kash hum 2009 me delhi nahi aaye hote.. ya aa ke jaise bipin vapas chala gaya tha vaise hum bhi laut gaye hote .&nbsp; Ya pankaj ke sath nahi rahe hote... ya jaise mere baaki branchmates chale gaye vaise chale gaye hote toh aaj jo mansik kasht jhel rahe hain vo na jhelteAaj family delhi me fas gayi hai... mujhey apna future andhkar me dikh raha hai.. kuch samajh nahi aata kya karu.. mind concentrate nahi kar raha<br><br><br><strong>=================================================================</strong><br>17/04/2018, 12:40Jab humko gutkha khane ka man karta hai aur hum subah se prann kiye huye hain ki gutkha nahi khayenge.. tab mere gutkha khane ke liye badhe kadam ko rokne ke liye .. mann se aawaz aati hai ki \"jo hum subah se bhagwan se apni galati ki maafi maang rahe they.. aage galati na karne ki baat kah rahe they .. wo kya tha...\"&nbsp; Tab mere hi man ke dusre kone se aawaz aati hai... jaise koi hass raha ho.. shaitan ki tarah.. aur jawab deta ho ki... \" jo hum soch rahe they wo jhuth tha..&nbsp; chalawa tha..\"&nbsp;<br><br><br><br>Mera mann isko sunkar jaise haar jata hai aur ek gulam ki tarah fir se galati karney ko taiyar hone lagta hai..Kal 16 April ko meri night shift thi.. raat bhar jage rahe.. nind nahi aayi.. raat me ticket handling ki aur resolve ki report nikali aur zetta ke issue dekhe.. aur gutkha khaye.. cig piye..<br><br><br><br>Subah me Sandeep singh ke aaney par hum uske sath niche aaye aur cig aur rajni gandha khaye.. kal ka kul kharcha 350 rs pocket se hai.. subah ghar laut ke aane tak<br><br><br><strong>=================================================================</strong><br>17/04/2018, 15:34Mai kafi bigda hua hu.. hamesha galat pe hi focus rahta hai.. buri chije chorney ke liye sochta hu.. naam buri chij ka lete hain toh achi chijo pe focus nahi ho pata.. meri achai kisi ko nahi dikhti..&nbsp;<br><br><br><br>Ist/novelvox me mera shoshan hua.. unhoney itni achi application banwali aur meri salary nahi badhai.. fir Concentrix me dhokha kha gaye.. uske baad Mumbai chale gaye .. uha bhi man sthir na tha.. bure logo se sangat ho gaya..&nbsp;<br><br><br><br>Burai mujhey khichti hai aur achai se hum bore ho jate hain..&nbsp;<br><br><br><br>Ab jine ki iksha hi nahi bachi hai..&nbsp;<br><br><br><br>Soche they wife aayegi toh kuch acha hoga life me.. par wo bhi matlabi nikli.&nbsp; Atmahatya kar ke baatein manwana chahti thi..&nbsp;<br><br><br><br>Meri life me kuch nahi bacha hai..<br><br><br><br>Par mai mar bhi nahi sakta.. mere dhokhe se family vaise hi dukhi hai.. maine bhagwan se hamesha family ki khushhali mangi thi.. par meri dua me shakti nahi thi...Ab hum jina nahi chahte<br><br><br><strong>=================================================================</strong><br>18/04/2018, 18:27Kal kuch khas nahi kiye...<br><br><br><br>Aaj 2 ghanta angular4 ka video learn kiye.<br><br><br><strong>=================================================================</strong><br>21/04/2018, 20:1021 april tak hum night shift kiye. Khub sara videos download kiye ab aage unko dekhna hai..Shaam ko vaqueel ke pass aaye. Pahle mera aaney ka man nahi tha.. phir maa ke gussa honey par hum bahar nikalney ko taiyar ho gaye...&nbsp;<br><br><br><br>Pahuchte pahuvhte bhi aaney ka man nahi ban raha tha.. phir 8:05 me vaqueel ke pass pahucheMan me bas acchi bhavnayein le ke vaqueel ke aaney ka intezar kar rahe hain...<br><br><br><br>Abhi agar shaam ko hum ghar se nahi nikalte toh shayad maa rimi se jhagra kar lete... isiliye ghar se nikle... phir man me aaya ki hum kuch der ghum kar vapas chale jayein... par aaj tak maa se beimani nahi kar paye hain aur humesha meri chori pakri gayi hai.. isiliye thoda thoda kar ke aakhir yaha vaqueel ke pass pahuch hi gaye...<br><br><br><strong>=================================================================</strong><br>22/04/2018, 06:30Thodi der intezar ke baad vaqueel ki wife phone layi aur vaqueel se baat karwayi. Vaqueel ne baat kiya aur kaha ki aaj mai bahar hu. Aapko phone karke aana tha..kal court me milo.. kal bhi court khula hai.. janta darbar haiGhar pe aake maa se jhagra kiye ki tum humko jabardasti kyu bhejiRaat me 12:30 par soyeSubah me man me khyal aaya ki ek doha hai<br><br><br><br><br><br>Ekay sadhe sab sadhe sab sadhe sab jaye..<br><br><br><br>Mujhe koi ek important goal achieve karney ki try karna chahiye<br><br><br><strong>=================================================================</strong><br>22/04/2018, 08:11Mera exercise karne ka man nahi karta.. sirf maa ke muh par shikan aa janey se hum raji ho jate hain.. finally apni ikshaa nahi hai.. isiliye aaj 2 saal baad bhi body sahi se shape me nahi aayi haiOffice me 20 April ko fayaz ne meri taarif ki thi ki hum code par bahut jaldi pahuch jate hainVaqueel ke pass janey ki aaj bhi ikshaa nahi ho rahi..&nbsp;<br><br><br><br>Humko apna life waste lag raha hai.. hum shakki ho rahe hain.. khud se khush nahi hain.. office bhi nahi jana chahte.. mera koi dost nahi hai... hum jab kuch karte hain bura hi karte hain.. bura hi muh se nikalta hai.. lagta hai ki mera focus sirf buri chijo pe hi hai.. man me ek ikshaa hai ki jo routine mainey banaya hai usko follow karu.. par jab implementation ki baat aati hai toh hum sirf apne man me bechaini feel karte hain.. sone ke ikshaa hoti hai.. pet humesha bhari lagta hai.. dimag me negative vichar hi aate hain.. man karta hai sab chor char ke kahi bhag jaye..&nbsp;<br><br><br><br>Jab kisi se baat karte hain toh lagta hai ki wo sirf meri galatiyan nikal raha hai.. humko man me lagta hai ki wo mujhe bura samajh raha hai.. humko ye bhi lagta hai ki hum usko apni baat nahi samjha paye...&nbsp;<br><br><br><br>Humko sirf bura hi feel hota hai.. man me sirf bechaini hoti hai..Papa se baat karney jate hain toh lagta hai ki wo sirf meri burai dekh rahe hain.. humko sirf gaali de rahe hain..Akele rah ke bhi dekh liya hai.. humko akele bhi khud ko manage karna nahi aata.. galat sangat se khud ko bacha nahi pate.. sahi log se meri baat chit band ho jati hai..&nbsp;<br><br><br><br>Sab pe hum shakk karte hainMaa bhagwati se sirf khud ko maar dalney ke liye kahte hain..Gutkha chorney ke liye sochte hain.. par 1 ghante bhi gutkha chorney par man bechain lagney lagta hai..Atmahatya karne ka sochte hain par&nbsp; 2 minutes saans rokney par hum bechain ho jate hainMai apni life me haar chuka hu.. ab meri sarkari naukri nahi ho sakti.. dost sab mere se aage nikal gaye.. personal aur professional dono me.. sabke baal bacche ho gaye.. shaadi ho gayi.. sab senior position pe chale gaye..Mere papa ne jaise delhi ncr me ghar kar diya hai.. agar koi layak beta hota.. agar wo ias ips ya kisi aur sarkari job me hota toh papa ke shaan me char chand laga deta...&nbsp;<br><br><br><br>Par hum papa ke delhi aaney ka wait kar rahe they ki ye log aayenge toh meri life me kuch accha hoga.. humko help hogi..&nbsp;<br><br><br><br>Apni baat hum nahi manwa pate.. phir gussa ho jate hain tab meri baat suni jati hai.. baad me khub sunne ko milta hai.. sun ke lagta hai ki koi mere se khush nahi hai.. koi mere se baat nahi karna chahta.. sab bas apna koi matlab dekh rahe hain..Kisi se baat karte hain aur agar wo sawal puchne lagta hai ki kya kyu kaise kyu nahi toh bhi lagta hai ki hum sirf buddhu ban rahe hain.. ye mere di hui information ko ek din mere khilaf hi use karega... life kuch bhi acha hota nahi dikhta...<br><br><br><br>Hum apni baat nahi rakh pate..khud par humesha shakk rahta hai.. man humesha dukh feel karta hai..&nbsp;<br><br><br><br>Hum sirf paise ki barbadi karte hainKabhi kabhi man me khyal aata hai ki jitna gutkha humko khaney ke iksha hoti hai utney ka juice piyenge.. gutkha avoid karenge..&nbsp;<br><br><br><br>Par phir sochte hain ki hum ko toh din bhar me kam se kam 10 15 baar gutkha khaney ka man karta hai.. din bhar muh me gutka bhar ke rahte hain.. is tarah humko kitna rupuya ka juice puna hoga.. vaise bhi hum gutkha kha hi lenge ... phir juice pina mere liye additional cost hoga...Mujhey buri chijo se utni hi nafrat hai jitni dusre kisi ko... par agar hum aaj ki date me gutkha nahi khate toh mera man bechain ho jata hai.. kisi kaam me man nahi lagta... gussa aata hai.. kisi ki baat acchi nahi lagti...&nbsp;<br><br><br><br>Aur gutkha thuk ke bhi hum fir bechain ho jate hain... galati ho gayi..&nbsp; ab muh mahkega.. chacha ke pass bhi nahi ja sakenge.. unko pata chal jayega ki hum gutkha khaye hain.. maa ko mahak jayega ki hum gutkha khaye hain... rimjhim ko mahak gaya toh wo maa se shikayat kar degi.. maa ko&nbsp; aur dukh hoga... papa ko mahak gaya toh wo baad me maa ko baato baato me kuch suna denge... ek na ek din mujhey bhi kuch na kuch bol hi denge... office me logo ko ek baar phir mera majak banane ka mauka mil jayega.. kirti anshul fayaz yashwant ashok kamlesh naresh yogesh harish sab meri burai karenge... hum ko khud me bhi bura feel hoga..<br><br><br><br>Itna sochte sochte hum time kill kar dete hain... tension me aa jate hain aur bechain ho jaate hain aur phir gutkha kha lete hain.. phir vahi bechaini.. nind lagna.. pet phulna.. pet ka bhari lagna.. man ke vahi bure vichar.. dusro ke samney meri galati ke ujagar honey ka bhay... meri khud ko sambhal nahi pane ka gam... tension bechaini.. apney bite vaqt me ki gayi galatiyan.. apne life carreer me piche honey ka gam.. aur muh mahakna.. apna tay routine follow na kar pane ka gam.. aur last me ek aur pudiya.. aur phir vahi chackra. &nbsp; Life ko hell bana li hai mainey... bhukh nahi lagti.. man bechain rahta hai.. biti life ke kadwe pal yaad karta rahta h... dusro par shaak karta hai... khud pe rota hai.. maa bhagwati se apney maut ki iksha karta hai... thodi der me maan jata hai.. phir gutkha khata hai.. phir vahi cycle..<br><br><br><br><br><br>Agar mai gutkha kharid ke khana chod du toh papa ke gutkha ko khaney lagta hu... fridge me se khaini nikal ke khata hu...Meri life ab mere liye bas ek bojh ban gayi hai... mai apni life barbaad kar chuka hu... mai sirf dukh rota rahta hu aur phir aise karm karta hu jisse meri life me ek aur bura chapter add ho jata hai..Mai mar jana chahta hu .. ya itni dur chala jana chahta hu ki maa papa ko mere se jo dukh hua hai wo kam ho jaye&nbsp; .. wo mujhey bhul jayein.. &nbsp;<br><br><br><br>Kabhi kabhi man halka lagta hai.. lagta hai ek din mujhey apne inn vicharo pe hasna aayega.&nbsp; Sochenge ki kya kabhi hum aisa bhi sochte they..&nbsp; par pata nahi wo din kab aayega...Park me akele baith ke bhi man halka lagta hai.. iska accha effect hota hai..&nbsp;<br><br><br><br>Park me akele baith ke.. jab koi sath me na ho. &nbsp; Panchiyon ka chahchahana baccho ka jhule pe jhulte dekhna.. acha lagta hai.Abhi hum subah me 8 baje se bahar nikle hain.. maa ney gym jane ke liye bheja tha aur hum ghar se bahar nikle par gym janey ka man nahi kiya... yaha sbi bank ke piche wale park me baithey they... phir chole kulche aur raita khaye.. juice piye aur gutkha khate huye khud ko galiyan likh rahe hain...Mujhey bechaini kab hoti hai... ya ye khu kab nahi hoti... yaani hamesha hoti hai<br><br><br><br><br><br>Jab gale me taar jausa feel hota hai aur pyaas lagti hai<br><br>Jab sir dukhta hai.&nbsp;<br><br>Jab kisi baat pe shok karte hain<br><br>Jab gutkha muh ke bhitar hota hai<br><br><br><strong>=================================================================</strong><br>22/04/2018, 14:11<br>11:30 tak baal daadhi banwa ke aaye Aur aake so gaye.. uthey&nbsp;<br>2 baje.. prasad aur pani piye...&nbsp;<br>fir gutkha khaye...&nbsp;<br><br>Man me uthte hi pahla khyal aaya ki maine fir se time kill kiya hai.. galati ki hai..&nbsp; uthte hi gutkha khaney ki iksha hui thi... man me ye bhi vichar aaya tha ki mere sir par shaitan sawar hai aur wo mujgse sirf galat kaam karwa raha hai... mujhe frustrated kar raha hai<br><br><br><strong>=================================================================</strong><br>23/04/2018, 04:18Shaam me fayaz ne sms kiya. Vahi puch raha tha.. are you there.. uske pass ek issue tha jisko wo daba ke baitha tha... jab usse nahi hua tab usney wo mere sir par madh diya...&nbsp;<br><br><br><br>Yaha se mujhey ye sikh milti hai ki kabhi fayaz ki baton me mat aao aur sirf help karney ke naam par overtime mat karo..&nbsp; ye log sakro baar mere se aise hi help le lete hain aur phir jab unse nahi hota hai tab mujhey time bita kar fasate hain...&nbsp;<br><br><br><br>Jab off time me ye koi issue bole toh inko bolo ki mail kar de.. kyuki kal ke help ke baad bhi kisi ko kaha clear hoga ki maine kuch kiya hai.. ye log chalu hain.. help le ke credit kha jate hain..<br><br><br><strong>=================================================================</strong><br>24/04/2018, 16:35<br>Rakesh Chanpatia ka dost&nbsp;<br>Venkatesh&nbsp;<br>Jehanabad<br>Aaj 24 April 2018 ko meri divorce case ki sunwai thi... hum 9 baje tak gym se aake taiyar ho gaye they.. phir papa humko vakeel ke pass nikalney ko bol diye they...&nbsp;<br><br>Papa aur Narendra piche se aail ha log.&nbsp; Hum vaha pahuch kar vakeel ko call kiye.. wo humko seat par baithney ke liye kahe..<br><br>Seat par pahuch kar humko vakeel nahi mile.. phir hum unke chamber pe chale gaye.. vaha pahuchte vakeel se mulakat ho gayi hai..&nbsp;<br><br>Vakeel ke sath seat par aaye..seat par aate huye hum vakeel se bole ki taarikh thoda jaldi jaldi lijiye.. vakeel ne koi reply nahi diya... phir unhoney humko judge ke court ke pass janey ko kaha.. wo bole ki tum call kar lena jab tumhara naam pucha jaye...&nbsp;<br><br>Hum Narendra ko call karke bata diye ki hum court me ja rahe hain...Thodi der me Narendra aaya aur bataya ki Chanpatia wala sab ladki ke sath aaya hai sab..Court me hum baith kar judge ko dekh rahe they.. phir uska vakeel ladki aur uske bhai sab apney dost log ke sath aaye they... hum apney vakeel ko call karney ko bole..&nbsp;<br><br>Vakeel ke aaney me late tha... humko vakeel ke late se aaney par uss ke upar bahut gussa aa raha tha.. hum Narendra se bole bhi ki humko vakeel pe shakk hai ki wo kahi hum log ko hi double cross na kar de. .<br><br>Meanwhile judge ne mera naam pukara... uske vakeel ne ragini kumari aur khud ko introduced kiya..phir judge ne Premendra aur uske vakeel ke liye rukney ko kaha... hum bahar aakar vakeel ko call kiye aur uske phone nahi uthaney par hum usko message kar diye ki...<br><br>\"Hi sir<br><br>Please come.. judge is asking for me... \"<br><br>Pahle mere judge ki assistant dikhi ...phir usko dekh kar hum uss se puchey ki vakeel sahab aa rahe hain... usney kaha ki haa.. tab usi assistant ke sath hum judge ke pass chale gaye... judge ne jab Premendra Ragini kaha aur us ladki ko mainey khud ke samney dekha toh hum full depression me feel karney lage... kya se kya ho gaya... aaj wo mere samney khadi hokar mujhey barbaad karney ka attempt kar rahi thi...&nbsp;<br><br>Mere se judge sahab ne pucha ki... haaji Premendra kya problem hai... mainey ek baar apne vakeel ki assistant ko dekha... phir uske ha bolne par ki vakeel sahab aa rahe hain.. tab tak tum apni baat bolo...&nbsp;<br><br><br>Mainey kaha ki sir meri shaadi ko 3 saal ho gaye hain... par mushkil se ye 6 mahiney bhi mere sath rahi hogi... baar baar suicide attempt karti hai... iske pariwar wale bhi meri family ko threat karte hain... aaj lagatar 2 saal se ye mere sath nahi rah rahi hai...isiliye mainey ab divorce ki petition daali hai...&nbsp;<br><br>Phir wo ladki boli ki \"meri shaadi 3 june 2015 ko hui hai... shaadi ke ek week baad se hi ye humko bahut marte they... ye jo faasi wali baat bol rahe hain wo jhuth hai... hum sath me rahna chahte hain\"<br><br>Jab uski baat khatam hui tab hum dekhe ki mera vakeel bhi aa gaya tha...<br><br><br>Phir mere vakeel ne humko bahar jaaney ko kaha...&nbsp;<br><br>Hum bahar aaye toh dekhe ki papa unke group se kisi venkatesh se baat kar rahe they... phir mere vakeel aaye toh unhoney humko niche baithney ko kaha...<br><br>Tab wo log bhi alag ho gaye...<br><br>Hum papa aur Narendra vakeel ke seat par aa gaye..<br><br>Vaha vakeel ne Chanpatia walo ka statement copy karaney ko de diya...&nbsp;<br><br>Copy kara ke aaye tab tak Chanpatia wali ke dost log phir se papa aur Narendra se baat karney lage...<br><br>Unme se ek vekatesh from jehanabad..jo ki khud ko vaha ke ek mla ka saala bata raha tha... papa se paise ke liye baat karney laga...&nbsp;<br><br>Hum bahut gussa huye... hum unko yaar bhi bol diye... ladki ke jija prem ko bhi bata diya... papa ko humesha ki tarah hum hi bure lage... papa chup honey ka naam nahi le rahe they... humko unka baat karna accha nahi lag raha tha...&nbsp;<br><br>Hum ye bhi bole ki ye log abhi humari baat sun rahe hain... phir humare hi khilaf gawah ban jayenge...<br><br>Jaise taise baat khatam huyi... Narendra se unhoney number exchange kiya...&nbsp;<br><br>Phir hum bole ki ek baar vakeel se baat kar lo... meanwhile hum papa ke pass khade they... vakeel ne shaam ko milney ki baat kahi...Ghar par hum paglo jaisa sab se Narendra Rimjhim maa aur papa se jhagra kiye...<br><br>Maa ko thappad mare.. papa ko gali diye.. Narendra ko mare... Rimjhim ka baal khiche...<br><br>Ghar se bhagney ki koshish kiye...Aaj ghar me kohram ho gaya tham.. phir hum 4:20 par office me message kar diye ki aaj hum leave pe hi hain...<br><br><br><br><br><br>Phir tab se yaha park me baithey hain... ye park sbi ke piche hai...<br><br><br><br>Meri jine ki ikshha nahi hai...<br><br><br><br><br><br>Rimi ko Narendra ko sharape ki tum log bhi ek din aise hi rowoge.. papa ek din tumko bhi aise hi dhokha denge...Mera dimag kharab ho gaya tha... baar baar papa ko bol rahe they ki tu aakhir u sab se baat kyu kaila...<br><br><br><strong>=================================================================</strong><br>24/04/2018, 21:256:30 me Narendra ne bataya ki vakeel 7 baje ke baad milney ko bulaye hain. &nbsp;<br><br><br><br><br><br>Vaha vakeel ne baat kiya aur kaha ye kagazi karwahi hai.. chalney do 2-3 saal chalega... aap log paise dene ke liye razi hain?<br><br><br><br>Narendra ne 4.5 lac ka said and agreed amount bola aur vakeel ne kaha ki wo 7 din me unke vakeel se unka estimation puchenge...<br><br><br><br>Aane ke baad venkatesh se jahanabad wala se baat hua Narendra ka wo 4 lac gahna plus 5 lac khorish ka baat kiya... total 9&nbsp; lac... Narendra ne kaha ki ye jyada amount hai.. papa se baat karenge aur isme unke papa se bolo involved hone ko.. guardian level ka baat hona chahiye.. venkatesh ke papa teacher hain.. wo iss baat ko sweekar kiya...&nbsp;<br><br><br><br>Papa sab sunke fir se khud ko sahi saabit karne lage... humko acha nahi laga aur hum bahar ghumney aa gaye..&nbsp;<br><br><br><br>Baaki dekhte hain aage kya hota hai... dekhte hain aage bhagya me kya acha likha hai..<br><br><br><br><br><br>Din me papa ko hum bol diye they ki hum aapko kabhi pujte they... ab aapse nafrat karte hain...Next hearing date 13 August 2018 hai<br><br><br><strong>=================================================================</strong><br>25/04/2018, 05:51Kal humko kya ho gaya tha?<br><br><br><br>Un logo ko dekh ke man me aag lag gaya tha. Bahar papa ko un logo se phir se baat karte dekh humko apney man me aag lag gaya. Humko laga ki ye phir se kaam bigdega..&nbsp; papa kisi ko 10 baat bol sakte hain.. par kisi ka bura nahi kar sakte.. papa apni baat me khud hi fas jaate hain.. hum apney man me dukhi they ki mere sath ye kya ho gaya.. hum apney man me sahi they.. papa apney kiye ko sahi saabit kar rahe they..<br><br><br><br>Narendra dono baap beta ki baat sambhal raha tha.. hum mauka dekh rahe they ki papa ko kaise chup kare...<br><br><br><br>Vakeel pe papa pe aur khud pe bhi mera awishvash hi kal mere ugra hone ka karan tha..<br><br><br><strong>=================================================================</strong><br>26/04/2018, 07:0525 April ko hum subah me gym ke liye 6:30 me nikle...&nbsp;<br><br><br><br>Raste me humko dadaji mil gaye.. wo bole ki tum kal aggressive kyu ho gaye they.. hum bayaye ki papa humko ghar se janey ke liye kahte hain.. hum yahi bardasht nahi kar paye... Chanpatia wale 4.5 lac ki jagah 9 lac rupees mangney lage hain.. dadaji ne kaha ki unka lalach badh raha hai.. wo vakeel se baat karney ke liye bole..<br><br><br><br><br><br>Phir hum chacha ke pass gaye unko 24 April ko court ladki aur venkatesh ka bataye... chacha ne green tea pilaya... papa ke liye bole ki tuhar papa se koi mitha baat kar le toh usse acha iss duniya me koi nahi hota.. papa ke bare me galat aur ugra bhavna jo mere me hai uska Ek karan ye chacha bhi hain.. unke pass se 7:45 me hum nikle... gym gaye ... 9:15 tak gym kiye... ghar aake office gaye..<br><br><br><br>Office me gm rj ki rfc pe kaam kiye..&nbsp; shaam tak follow up kiye...<br><br><br><br>Shaam ko as usual humko uljhaney ke liye Yogesh ne Yashwant ko newrelic ucsr bataney ko kaha.. 10:15 tak ghar aaye... maa se pata chala ki bipin chacha aaye they..&nbsp;<br><br><br><br>Khana khaye... tv dekhe... 12 baje soney chale gaye... mb kiye<br><br><br><br>26 april ko 7 baje uthey aur uth ke apni kal ki story likhi..25 April ko subah me dadaji ki Narendra se bhi baat huyi thi.. jarurat padney par gawahi dene ki bhi baat huyi thi..<br><br>27/04/2018, 06:29Gym se 9:30 tak aaye.. subah me thori der laptop par 8 baje tak baithey rahe.. Akshay kant ko mail bheje for gainmanager...<br><br><br><br>Yogesh ke bhai Neeraj ka phone aaya tha.. kab nikenge... unhoney bata pul aane ko kaha.. 10:30 me bata pul pahuchey.. unko saman diya.. unhoney Yogesh ko dene ke liye ek packet diya.. Neeraj se mere personal issue ki baat hui.. unka suggestions tha ki chhor do wo khud hi line pe aayenge.. unse request kiye ki hum aapko vakeel ka details denge.. aap thora pata kara dena ki vakeel humko double cross to nahi kar raha.. Neeraj ne humko Neelam pul chor diya...<br><br><br><br>Ghar se nikalte huye papa ne maa se kahalwaya ki hum pf loan ka pata kare..<br><br><br><br>12 baje office pahuche..Din me office me Sheikh se pf loan ki baat hui..&nbsp;<br><br><br><br>Retiral team se bhi baat hui.. pahle pf transfer karney ko kaha..&nbsp;<br><br><br><br>Shaam ko kirti ke sath chai piye aur apni kahani suna diye.. ek ladki ke dhokhey ki kahani dusri ladki ko kah sunaii.. mera man usko apni kahani suna ke aur bechain ho gaya aur hum 8 baje office se nikal gaye.&nbsp;<br><br><br><br>Raat me maa se baat hui.. maa ko bataye ki pf loan ke liye baat kiye hai 15-20 din lagenge..<br><br><br><br>11 baje sone aaye.. raat me ac nahi chalaye... laptop pe kaam karney ki iksha nahi hui..<br><br><br><br>Video dekhe aur so gaye...<br><br><br><br>27 april ko 6 baje uthey.. dawa chai pi ke .. bathroom se aa ke ..apni ram kahani likhney lage..<br><br><br><br>7 baje gym ke liye nikle.22 april se 26 april roz ka kharcha 200 rs pocket se aur 300 rs atm se hai<br><br>28/04/2018, 09:4327 April ko shaam ko sanjay se baat kiye. Wo bhi madharchod jaisa ladki walo ki statement ko powerful bata diya. Hum sirf gaddaro se hi ghire hain.&nbsp;<br><br><br><br>Sanjay se bhi ab kuch nahi batana. Actually ab office me kisi madharchod ko apna marital issue nahi batana. Sab saale majak hi banate hain.<br><br>28/04/2018, 20:06?? ???????????????????????? ??<br><br>??? ??? ??? ??? ??? ????? ???????????????? ?? ???? ?<br><br>?? ??????? ???? ???? ??? ??? ??? ????? ???? ?? ???? ??<br><br>??????? ??? ??????? ?? ???? ??????? ????? ?<br><br>?????? ?? ???? ???? ??? ??? ??? ????? ???? ?? ???? ??<br><br>???????? ????????? ???? ?? ?????: ???? ???? ?<br><br>???? ???? ???? ????????? ??? ??? ????? ???? ?? ???? ??<br><br>?? ?????????????? ????? ?? ???????????????????? ?<br><br>?? ?????? ????? ?????????? ??? ??? ????? ???? ?? ???? ??<br><br>???????? ???? ????? ??????????? ??????? ?<br><br>??????? ???? ???? ??? ??? ??? ????? ???? ?? ???? ??<br><br>????????????? ????? ????????? ??? ?????? ?<br><br>?????????????????? ????? ??? ??? ????? ???? ?? ???? ??<br><br>???????? ?????? ??? ?? ??? ????? ???????? ?<br><br>???? ???? ??? ??????????? ??? ??? ????? ???? ?? ???? ??<br><br>?????????? ?????? ????????? ????????? ?<br><br>??? ??? ????????? ????? ??? ??? ????? ???? ?? ???? ??<br><br>?????: ?????: ????? ????? ?????????????? ?? ???? ?<br><br>?? ???? ???? ???????? ???? ??? ??? ????? ???? ?? ???? ??<br><br>??????????????????? ???? ?: ?????????? ?????? ?<br><br>????? ???????????????? ??? ??? ????? ???? ?? ???? ??<br><br>- ?? ??? ! ?? ??? ! ?? ??? ! ?? ??? ! ?? ??? ! ?? ????? ! ?? ??????? ????????? ???? ! ?? ?? ! ?? ??????? ! ?? ???? ! ???? ????? ??? ! ?? ??? ! ?? ??? ! ???? ???????? ???? ??? ? ?? ??????? ??????? ??? ! ?? ?? ! ?? ???? ! ?? ??????? ! ?? ????? ! ?? ????????????? ?? ! ?? ???? ???? ????? ??? ?? ??? ! ?? ??? ! ???? ????? ???????? ??? ?<br><br>?? ?????-?????? ! ?? ????? ???? ????????? ( ??? ?? ????????? ) ????? ?? ????? ???? ??? ????? ??? ????? ??? ??????? ???? ?? , ?????? ?? ??? ! ?? ??? ! ???? ?? ???? ???? ??? ? ?? ????????? ?? ??????? ! ?? ????? ! ?? ????? ??? ? ?? ???????????? ?? ??????? ???? ???? ! ?? ?? ?? ?? , ?? ?? ! ?? ????? ????? ! ???? ?? ?? ? ?? ?? ??????? ?? ! ?? ??? ! ?? ??? ! ?? ???? ???????? ???? ???? ?<br><br>?? ???????? ???? ! ?? ?????????? ! ?? ?????-????-??? ! ?? ???????????? ! ?? ????? ???? ???? ! ???? ????? ??? ! ?? ??? ! ?? ??? ! ???? ??????????? ??? ? ?? ????????? ?? ?????????? ! ?? ??????? ! ?? ??????? ?????? ! ?? ??? ! ?? ?????? ! ?? ????????? ???-???? ! ?? ????? ! ?? ??? ! ?? ??? ! ???? ???????? ???? ??? ?<br><brbr><br>29/04/2018, 12:15Sri lal ji ke ghar ka pata<br><br><br><br>B6-104/105<br><br>Rohini sec 11<br><br>29/04/2018, 19:19Subah me humko shri lal ji ke pass janey ka mann nahi tha.. papa ke kahney par shaving karwaney gaye<br><br><br><br>Phir aaney ke baad papa ko directly bol diye ki humko janey ka mann nahi hai... par ye papa maa maaney nahi.. phir humko bhi laga ki hum jyada jidd kar rahe hain.. hum taiyar ho gaye<br><br><br><br>Shri lal ji ke ghar 11 baje pahuche. Unki beti poonam didi jaisi lagti hai.. shri lal ji ki poti aur natini , anvi aur chavi se baat hui..<br><br><br><br>Vaha mera man nahi lag raha tha.. papa aur shlg ke baat ke bich hum bol diye ki humko papa ki baat boli acchi nahi lagti...<br><br><br><br>Baad me papa ka shikayat bhi kiye ki inse koi mithi boli bol leta hai toh ye flat ho jaate hain...<br><br><br><br>Vaha se khana kha ke hum log 3:30-4 baje nikle..<br><br><br><br>5:30-6 baje ghar aa gaye hum log..<br><br><br><br>Avinash ko chhorney pul tak bike se gaye.. raste me wo sec55 market se apni beti ke liye saaman kharida.. humse aaj chup kyu they ye puch raha tha... hum usko bol diye ki shlg ke fuli lal aakh dekh ke mera man dukhi tha..&nbsp;<br><br><br><br>Usko drop kar ke mother dairy se dudh liye.&nbsp; Ice cream khaye aur ghar aa gayeKal shaniwar ko Bipin chacha shaam ko meat bana ke khilaye they..<br><br>30/04/2018, 04:1629 April ko shri lal chacha ke pass gaye they.. unko jis hisab se chot aayi thi aur jitna loss hua tha car chinn gaya tha paisa maal lut gaya tha uss hisab se wo dukh ko bardasht karke phir bhi listeninig mode me hi they... wo shant they aur phir bhi sab ke sawalo ka jawab de rahe they... unka shant rahna mujhey accha laga... chinta unko bhi hoti hogi.. par wo chinta jahir kar ke dusro ko dukhi nahi kar rahe they..Mere papa aur hum toh patience kho dete hain..Ek chuppi sau dukh dur rakhti hai.. shri lal ji se yahi sikh milti h<br><br>30/04/2018, 06:4209999699415<br><br><br><br>Deepak nephew of shri lal chacha<br><br>30/04/2018, 10:31Subah me hum gym nahi gaye<br><br><br><br>Papa kuch nahi bole<br><br><br><br>Maa bhi kuch nahi boli<br><br><br><br>Hum vaishno devi ki aarti sunte huye maa se mange ki aap mera man sthir kijiye.. aur ek ghante vahi nind aa gayi<br><br><br><br>Maa uthney ke baad boli ki kal sab accha raha..hum commit kiye ki hum hi galat kiye hain kalAaj jaisa din mere liye unique haiMaa maa bhagwati papa sab ko dhanywadHhh<br><br>01/05/2018, 01:13Aaj ki shaam bhi unique thi.&nbsp; Sikandar pur se jis gaadi me baithey wo masjid more ke garjne laga ki hardware chhorney ke 10 rs aur lega.. humko gussa aaya par chup ho gaye shri krishna ki kripa se.. phir hardware pahuch ke usney paise bhi nahi liye..&nbsp;<br><br><br><br>Aage metro more se gaunchi tempu wale ne bhi 5rs hi liye..&nbsp;<br><br><br><br>Ghar aa ke maa ne chehre pe khushi dekhi toh wo bhi khub baat ki..&nbsp;<br><br><br><br>Boli ki usko vishwas tha ki hum dhire dhire shant ho jayenge..<br><br><br><br>Raat me Swtlana tulasi ka russian media me Indian classical performance dekhe.. laga kahi toh India jinda hai .. acha lagaGood wala night<br><br>01/05/2018, 10:03Subah 6 baje uthey.. uth ke as usual nind puri nahi hui thi.. alas aa raha tha.. papa ka gutkhaa&nbsp; chura ke khaye.. dawa chai piye.. 7 baje gym ke liye gaye.. packet wale dahi laayeGym jane aalas aa raha tha.. man me vichar aa raha tha ki aaj late ho gaya h.. 7:30 tak toh hum ko gym se vapas aana tha .. ab tak gaye hi nahi..Gutkha khane ke liye man ko rokney par man me khyal aata h ki kitna der nahi khayenge.. phir toh khana hi haiKal pf wala kaam bhi nahi kiyeAaj gym me weight kiye 71 kgs.. ghatney ki jagah badh gaya hai<br><br>02/05/2018, 06:21Kal raat 1 may ko pf transfer ka request daal diye.&nbsp;<br><br><br><br>Pichle 10 din se din me 5 rajni gandha aur 3 cig aur 4 badam milk aur samosa consume kar rahe hain . Lagbhag roz 300 atm card se aur 250 pocket money se kharch kar rahe hainShaam ko 10 baje office se aaney par bhi raat me 12:30 sote hainSubah sir bhari lagta hai.. pet phula hua lagta hai .. man ashant rahta hai..der se uthey ki feeling aati hai..<br><br><br><br>Ye sab mere galat routine ke karanAaj sochte hain ki atm card lekar nahi jaayeinAaj humko pf ke liye office me baat karni hai..<br><br><br><br>Ghar se printout nikana haiResolve aur qaa ka dashboard banana hai..<br><br><br><br>Resolve ka downtime detail share karna hai<br><br><br><br>Gainmanager dashboard publish karna hai<br><br><br><br>Gainmanager ka wo deployment karna hai<br><br><br><br>Ucsr ka video dekhna hai<br><br><br><br>Pulse ka video dekhna hai<br><br>02/05/2018, 08:30Gym ke liye 7 baje nikle.. vaha ja ke cycling ke dauran meri uss ladki se baat hui jisko hum roz dekhte hain.. usney mujhey pankha chalaney ko kaha..&nbsp;<br><br><br><br>Hum Ashok gym trainer ki madad se pankha chala diye..Warmup excercise ke baad jab scheduled shoulder exercise karney gaye tab man me khyal aaya ki hum bahut din se body part ka excercise nahi kiye hain.. yaad nahi hoga.. kaise puche trainer se.. finally shoulder ka excercise nahi kiye...Mera man acha kaam karney se rokta hai aur bura kaam karney ko bechain ho jata hai<br><br>02/05/2018, 21:06Gutkha khane ko le ke aaj Yashwant Kirti Fayazuddin Yogesh Sheikh sab ne criticism kiya.. now its time to quit this habitFayazuddin ne kaam bhi nikalwa liya aur bol bhi diya.&nbsp;<br><br><br><br>Agar aaj gutkha ka cup nahi hota to hum 8 baje hi nikal jate<br><br>02/05/2018, 23:07Jab mujhey samajh me aa gaya hai ye log mera majak udate hain .. mujhey jaldi jane nahi dete.. baad me meri galati nikalte hain..<br><br><br><br>Tab bhi mai khud ko change kyu nahi kar pata..<br><br><br><br>Tab mere mann me khyal aata hai ki hum inse chhal sikhney aaye hain.. man handling me ye bahut jaruri hai.. aur mann me ek vishwas aata hai ki apna kuch gawa ke hum aadmi pehvhanana sikh rahe hain<br><br>03/05/2018, 06:05Sabere uth ke mere sir me dard aur pet me gas .. bechaini ki sabera jaldi ho gaya.. tension ki yogesh different logo ki madad se mujhey roz rok lete hain.. mere kaam ka koi appreciation nahi hai.. mera bhavishya andhkar me hai.. mera sharir ful raha hai..&nbsp; type ke kyal aate haindosto ke calls hum nahi lete hain .Kal shaam ko Sheikh sir bol rahe they ki tum explain karmey me bahut darte ho<br><br>04/05/2018, 05:42Kal raat ko khaini kha ke nahi soye.. kal cihgerate bhi ek hi pi thi .. wo bhi subah me... isiliye aaj subah me kam bechaini ho rahi hai...Agar hum gutkha ciggerate khaini mb chhor de toh meri chinta kam ho jayegi..Bechaini kam hai toh ghari ke second ki sui ki aawaz bhi kam chubh rahi hai<br><br>04/05/2018, 07:58Aaj subah me 5:30 am par uthney ke baad bhi hum gym nahi gaye... chinta kal jitni nahi hai.. phir bhi susti feel kar rahe tbey.. mata ka bhajan sunte huye so gaye theyOffice ki chinta hoti hai.. meri baat sunke bhi satish amit fayaz kirti anshul uday ansuni kar dete hain.. yogesh mere pe pressure banate hain.. mera mann office me nahi lagta hai... wo log bhi ab meri koi izzat nahi karte<br><br>04/05/2018, 09:29Mera mann jyadatar dukhi aur nirash rahta hai...&nbsp;<br><br><br><br>Aur papa maa rimi ke bihar jaaney ke baad aur dukhi rahega... isiliye jyada galtiyaan karega.. mujhey iss situation se bachney ke liye plan banana hoga... hum Narendra ki tarah strong nahi hain.. hum chhoti chhoti baato pe naraz ho jate hain .. depression me aa jate hain.. apna rotine follow nahi karte .. thatmata ke baith jate hainn...Kabhi kabhi gym nahi janey ka man karta hai.. tab hum apney man ko samjha sakte hain ki gym jane se agar fayda nahi toh nuksan bhi nahi hoga.. aadhe ghante ke liye hi sahi gym jana chahiye<br><br>04/05/2018, 16:32Jab hum kisi topic ko present karte hain toh pahle usse related terminology , related words , findout karte hain.. phir what are those different words pe discuss karte hain..Phir deeper me topic discuss karte hain<br><br>04/05/2018, 23:17Jab hum gym me hath ka exercise nahi kar pate.. vajan nahi utha pate aur pull up nahi kar pate... toh itna tay hai ki hum jyada jor se thappad maar hi nahi sakte...<br><br><br><br>Jarur wo ladki jaan bujh ke nautanki karti thi... sab uska socha samjha plan tha..<br><br>05/05/2018, 05:40Jo hum cig pite hain.. gutlha khate hain.. paan khate hain.. extra milk shake pite hain.. chocolate khate hain... uske chalte jo difficulties aate hai. Gala sukta hai&nbsp; tension hota hai.. nind puri nahi hoti. Wo sab agli subah me pata chalta hai<br><br>06/05/2018, 09:325 may ko subah 8 baje uthey... maa ne gym se aa ke chacha ke pass pakora pahuchaney ko kaha... vaha chachi ke yaha baith gaye..&nbsp; aayush ka chemistry ka questions solve kiya... chachi se baat kiye.. aayush bich me sec 14 janey ke liye chacha se maar khaya tha.. chachi ka bp low tha... chacha 12 baje chotka ka result le ke aaye aur phir badka ko fiitjee pahuchaney ke liye car se sec 15 nikle... hum bhi unke sath gaye... raste me chacha bataye ke abhay uncle ka ladka iit pt nikal liya h.. nit fix h ab.. ab mains me taiyari kar raha h... 2 baje vapas ghar gaye.. dopahar me 1 number market gaye.. vaha ghari ka belt badalwaye.. vaha se vapas aaney par office call me they.. 12 baje free huye.. subah fir office call tha.. resolve ka downtime tha.. 9 baje gym ke liye nikle..<br><br>06/05/2018, 13:51Dopahar me man me aaya ki papa mere se kya chahte hain isko likhe... par fir film dekhte huye khyal aaya... fir film chalaye toh film me kho gaye.. jhony mera naam movie dekhkhte kyal aaya ki bahar papa ke sath tv pe dekhte hain... par sab andar wale me kamre me chale gaye.. hum frustration me gutkha khaye.. line cut gaya toh fir yaha laptop pe film dekhney lage.. ab film me man nahi lag raha. Yaha fir gutkha khaye aur ye sab likhney lageHum wo karna chahte hain jo man me aata hai.. par man har pal badalta hai.. fir ek kaam karte huye man dusre pe badal jata hai... fir frustration... gutkha cig mb khaini bechaini guilty feel.. raat me nind nahi aana.. man ka rona.. chijo ka bhul jana..Iske baad papa maa bahan bhai ki shikayat..<br><br><br><br>Office walo ki shikayat<br><br><br><br>Relatives neighbors ki shikayat.. utre chehre...<br><br><br><br>Khud ke man ka frustration<br><br>06/05/2018, 17:06Dopahar me maa mujhey vakeel ke pass janey ko kah rahi thi.. papa se bhi baat huyi ki vakeel se baat karo aur le de ke matter ko khatam karao... papa ka kahna hai ki tu 6 mahina baithey rahega tab bhi vakeel tumko call nahi karega...Maa ka kahna hai ki vakeel se baat karo apna takleef batao aur unke vakeel se baat karke le de ke khatam karo iskoHumko vakeel ke pass janey ka mann nahi hai.. shayad ye mera bura shaitan humko rokta hai.. humko lagta hai ki papa ko itna pressure me nahi aana chahiye.. wo log pareshan kyu nahi hote.. unko takleef nahi hoti kya.. mera vakeel jaan bujh kar humpe hi pressure bana raha hai. Wo jyada me thagwayega..Par aaj jab hum papa ki baat sun rahe they tab itna samajh aa gaya ki papa ko lagta hai ki hum unki baat sunke gussa hote hain.. mera jhaat sunagta hai..Hum uss samay ye soch ke baithey they ki hum papa maa par vishwas karte hain.. par past me kahi hui meri baat papa ko yaad hain<br><br>06/05/2018, 20:34Waqueel se baat karney ka mann bana liye.. meanwhile papa narendra ko phone laga ke apna dukhda ro diye ki parmendra wakeel ko call nahi kar raha...&nbsp;<br><br><br><br><br><br>Wakeel bola ki wo unke wakeel se baat kiya tha.. wo unn logo se baat karke batayega.. agar koi baat banti hai tab..<br><br><br><br>Usse phir agle week mil lete hain<br><br>07/05/2018, 05:18Maa se sone janey se pahle baat hui... maa ka kahna tha ki vakeel se baat karte raho.. hum maa par bhadak gaye ki tu sirf ek hi baat bolti hai.. papa jo bolte hain usi ko dohrati hai.. asal me hum pahle plan kar rahe they ki next Wednesday ko wakeel se baat kar lete hain.. par maa ke tokney par humko gussa aa gaya aur hum usko bol diye ki humko apna marzi se baat karna hai toh hum agla mahina baat karenge..<br><br><br><br>Raat me sone janey se pahle hum 7 baar hanuman chalisa padh ke soye..Raat me mouthwash kar ke muh me laung rakh ke soye they... raat me bina AC ke bhi acchi nind aayi&nbsp; aur sunah aankh 5:15 tak khul gayi..<br><br>Subah me gas bhi kam feel ho raha hai..Humko roz raat ko hanuman chalisa padh ke sona hai aur mouthwash kar ke aur laung muh me rakh ke..Hum raat me maa se baat kiye toh ye bhi bole they ki humko vakeel par vishwas nahi hai...<br><br>07/05/2018, 06:29Subah me uth ke 20 rupiya liye aur ghar se tahalney ke liye nikle.. gaunchi.. fir waha se labour chowk.. fir sanatan mandir.. hanuman mandir.. gutkha kharide.. hanuman ji ke mandir se ghar aaye.. raste me ek sardar ji se mile .. usse ek baar chacha baat kiye they jameen ke liye.. jab hum yaha jameen khoj rahe they.. man me aaya ki usse yaha wali jameen ke liye baat kare.. par phir papa ka khyal aaya.. kya janey papa gussa ho jaye.. uss sardar se baat na kare.. phir ghar aa ke dawa khaye aur latrine karney aaye aur yaha gutkha khayeGutkha khaney ka ek bahana ye bhi hai ki papa gutkha kyu khate hain.. gutkha sirf muh me rakhney ki chull hoti hai mujhey .. fir gutkha muh me jate humko vahi tension bechaini sorrow feel hota hai..<br><br>07/05/2018, 08:506:45 me gym ke liye nikle.. 7:15 am me gym pahuchey.. bich me sector market me gutkha khayeGym janey se pahle papa ko sardar ke bare bataye.. par wo bole ki bahri logo se baat nahi karna hai abhi..&nbsp;<br><br><br><br>Papa ko gym me aaney wale ek ladke ke bare me bhi bataye.. par papa usse baat karn ko bho mana kar diye..Gym me back ka exercise kiye..Aaney pe dadaji se baat hui.. unhone bhi vakeel se kal mere baat karne ke baad baat ki thi.. vakel dadaji se bola ki wo reply dega aur divorce ho jayega par isme time lagegaDadaji ko bataye pahle wp pe uski dp se pata chalta tha ki wo idhar udhar rahti hai.. kolkata apni didi ke ghar pe bhi rahi hai<br><br>08/05/2018, 05:2611 baje office pahuche.. mere 500&nbsp; rs ke note par kuch likha tha.. usse 2 rajnigandha aur 1 milk shake office ke pass ke dukan se liye.. raste me cab wale se toll par paise khulle karney ko kahe they.. par humko shakk hai ki toll wale ne koi dusra pen se likha note de diya tha..Office me kirti mera kaam nahi ki aur apne kaam ke liye mere sir pe chadh jati haiHarish ne meri 1 baje se 11 baje ki shift laga di thi.. shaam ko devgan aur harish mere se baat kar rahe they.&nbsp; Unko bol diya ki late night na hum fbd se na ggn se nikal sakte hain...Sanjay ko kal hum hi pakre they . Ab wo bhi samajh gaya hai ki hum koi pareshani honey par hi usko pakadte hain.. vavjudh iske ki ab hum samajh gaye hain ki wo meri baato ko yogesh harish sheikh ko batata hai.. hum bich me decide kiye they ki usse baat nahi karenge.Shaam ko 9 baje office se nikle. &nbsp; 10:30 me ghar pahuche.Kal ka kharcha 20+75+75+70+80 hai<br><br>10/05/2018, 08:47Wednesday ko kharcha 150+175+45 hai<br><br><br><br>Waqar se shaam me baat kiye..<br><br><br><br>Wo pucha ki Accenture kyu chhor diye.. hum usko waha manager se issue.. kaam ka pressure aur lack of cooperation reason bataye..<br><br><br><br>Usko bole ki yaha pressure badha hai.<br><br><br><br>Mera laptop on nahi ho raha.. desktop team ko dikhana hoga<br><br>13/05/2018, 08:2712 may ko 12 baje vaqueel se milney gaye.. wo dusre vakeel se baat kiya tha but baat nahi bana.. wo batayega... ek dusra aadmi mila.. wo bhi divorce ka mara hai<br><br>15/05/2018, 10:43HR 51 BG 5523... 10 Rupiye lene hain<br><br>17/05/2018, 13:13Duniya ke bare me mere kuch anubhav<br><br><br><br>Duniya kabhi bhi apni galati nahi sweekarti<br><br><br><br>Duniya successful logo ke talwe chatti hai<br><br><br><br>Duniya kamjor besahara ko durkarti hai<br><br><br><br>Duniya dukh nahi sunna chahti<br><br><br><br>Duniya lalachi hoti haiDuniya me acche log nahi ke barabar hain<br><br><br><br>Duniya me sab apna swarth dekhte hainDear Customer, your Account XX2297 has been debited with INR 10,000.00 on 17-May-18. Info: TRF TO FD no. 107013013365. The Available Balance is INR 7,880.59.For dispute,call 04033667777.Dear Customer, Term Deposit XX3365 for Rs.10000.00 has been opened on 17-May-18. The deposit details will be updated on Net Banking within 1 working day.<br><br>19/05/2018, 06:14Dear sir<br><br><br><br>I am not able to do work in such uncertain timings... its like torture... resigning.. just request for cleaner relieving letter.. however i am not going to do any further private job...&nbsp;<br><br><br><br>ThanksThe above mail i written to Yogesh DevganVaqya shaam ka hai.. hum nikalney wale they .. tabhi 8:30 me yogesh ney production logs me check karney ko kaha.. ki tadhika ke latest logs waha aa rahe hain..uss logs ka humko idea nahi tha.. radhika ko call kiya.. usney bhi baat sunai.. phir uss issue ko check karte huye pata laga ki deployment wali file me garbar hai.. phir thori thori der karte 11 baje hum office se nikle.. humko mumbai me jaisi bechaini aur gussa aata tha vaisa aaney laga<br><br>19/05/2018, 22:51Shaam ko dhruv chacha aur papa ki baat huyi..ek half pant aur ek half shirt kharidaya.. bipin chacha ko de diye.<br><br><br><br>Narendra aaya usko lene sohna more gaye.. raste me usko dhruv chacha sadhu chacha papa ki half pant half shirt ki kahani sunaye..<br><br><br><br>Par pahle humko uska haal puchna chahiye tha ... ye miss hai<br><br>20/05/2018, 09:39Aaj 20 May ko hum 10 din baad gym gaye..<br><br><br><br>Gym me mujhey exercise karney ka mann nahi karta kyuki.. hum ko gym me matha ghumta hua lagta hai.. humko feel hota hai ki hum achhe se excercise nahi kar rahe aur log humko dekh ke has rahe hain.. mere pet me gas hai aur paad na khul jaye.. hum ko exercise yaad nahi<br><br>20/05/2018, 19:10<br><br>21/05/2018, 09:56Aaj 7 baje uthey.. dawa khaye. Papa aur Narendra se fd ka baat hua.. icici ka account faridabad transfer karney ki baat hui.. gym me stamina and back excercise kiye.. ek 10 ka gutkha kharide..Kal shaam ko 5 july 2017 se 20 may 2018 ka pura kahani likhe apne application me<br><br>21/05/2018, 12:40Dopahar me hum sbi me investment ke liye baat karney gaye.. sbi me fd ka 2 saal se niche me 6.4 aur 2 saal se upar me 6.5 ka interest h.. sip ka aur option bhi manager ne bataya<br><br>21/05/2018, 18:08https://www.sbimf.com/en-us/financial-planning-calculators/return-value-calculator#<br><br>21/05/2018, 20:141:30 pm ke kareeb papa maa ko sip ka bataye.. papa bole ki aaj hi jake 10k ka sip kara lo.. papa ne question kiya tha ki sip me agar kabhi paise miss kar diye ya kabhi jyada paise dalney ho toh kya condition hoga..<br><br><br><br>Branch ja ke manager se baat huyi.. usney bataya ki sip me ek hi baar month me 5th ko paise auto-deduct honge.. jyada ke liye phir naya kholna hoga.. mgr ne ek app bataya.. 5k 5k ke do investment kar diye.&nbsp; Mobile number change ka request bhi de diya.. ghar me aaj sirf investment ki baat huyi..7:45 me ghar se office ke liye nikal gaye..<br><br>25/05/2018, 08:18Raat me amit singh ke sath kaam kiye.. soye bhi.. cig aur rajnigandha khaye..Tuesday ko subah me office se aaney ke baad ghar ka kuch kaam kiye aur 1 baje so ke 7 baje uthey..<br><br><br><br>Raat me uday kiran bhi aaya tha.. beer piye aur soye.. subah 8'30 me office se nikleIss week pani ka pipe thik karane me 15000 rs lageThursday ko office se aane ke baad rimi ka exam centre dhundhney gayeThursday ko din me nahi soye.. shaam ko film dekhey haseena parkar.. 1 baje soyeGym me excercise karney ka mann nahi karta.. subah me thakawat lagti hai.. sir ghumta hai<br><br>26/05/2018, 06:3126 may. &nbsp; Aaj subah me acchi nind aayi thi..&nbsp; raat me 11 baje soye they.. subah me mobile me dekha toh somen bose aur yogesh devgan ka call tha.. raat me resolvejiffy aur dots ke server unreachable ho gaye they..<br><br>27/05/2018, 07:35Mainey somen ko message kar diya ki hum soye they isiliye call pick nahi kiye..Gym se aake hum naha dho ke taiyar huye.. pahle rimi ke sath station one mall se papa ka mobile laye.. phir office ke liye cab pakre.. office me aaj 350 rs kharch kiye. Dots server accessible nahi tha.. Server aur BRC Call join kiye.. raat me 10:30pm par office se nikle . 12 baje ghar aaye.. jogender call kiya .. wo wpms activity me bhi involved tha.. 2 baje so gaye.. 6:00am par uthey 27 ko..<br><br><br><br>Aaj subah ram ka naam leke man bahut halka lag raha hai6:30am me ghar se nikle.. 10 ka shikhar kharide.. 8 baje gym me gaye..Maa kahti hai ki tum khud ka khyal nahi rakh paate toh humara khyal kaise rakhoge.. maa aur kahti hai ki wo apni maa ko kahti thi ki Maa tu hatt hum kar lem.. usko hum sab bacchey ye nahi kahte.<br><br>27/05/2018, 11:19Aaj bahut din ke baad humko papa se baat karney ka mauka mila... aaj PM akshardham se patparganj ka road show kar rahe they.. ek expressway Delhi to meerut expressway ka first phase ka udghatan ke liye road show...&nbsp;<br><br><br><br>Papa mere se baat kar rahe they.. aur mai unko dekh ke soch raha tha ki ek din agar hum papa ki jagah aur meri jagah mera beta ho.. tab agar hum kuch bole ya kare toh hum apney bete se jaisa behave expect karenge... kya hum vaisa behave apne papa se kar rahe hain...???<br><br><br><br>Humko khud pe bahut pachtawa ho raha hai.. hum papa ko bahut dukh diye hain... mere papa apney papa ki jitni izzat karte they.. utni hum apne papa ki nahi kiye... isi tarah mera beta beti bhi meri izzat nahi karega... hum uss izzat ko paney ke liye eligible hi nahi hain... !!!meri buddhi ko janey kya ho gaya tha... hum maa papa ko bahut dukh diye hain... Bhagwan humko kabhi maaf nahi karenge... hum dand ke patra hain..&nbsp;<br><br><br><br>Aaj ke dukh se pareshan hain ... par aage aur kathin ghadi aayegi... uske liye aaj se hi humko dhan, mann aur sharir ki shakti ka sanchay karna chahiye..<br><br>28/05/2018, 06:50Kal 27 may ko chandan chourasia se baat huyi.. uski shaadi priyanka kumar se huyi hai.. wo uske transfer ke liye doc file me change karna chahta hai .. usne mujhey pdf file diya.&nbsp; Mere se meri marital status ke liye pucha.. wo kahta hai ki abhi mere case me time lagega. Bahan bhai ki shaadi toh hogi hi..<br><br>28/05/2018, 13:15Mai 10-15 saal se ek bhram me tha ki gutkha khaini ya cig se mera concentration badhta hai.. ye chijein mera dhyan bhatkati hain.. humko pariwar se door karti hai.Hum apney life ka jyada samay sirf iss chinta me kate hain ki kya ye mere se hoga.. ya humse galati hua hai..Samay ke sath humko pata chala ki ye chinta kisi kaam ki nahi thi..Bachpan se papa humko so ke padhney se mana karte hain.. aur humko ye baat acchi nahi lagti.. aaj humko afsos hota hai ki hum papa ki baat kyu nahi maney..<br><br>28/05/2018, 18:08Dear Investor, we acknowledge the receipt of your request for purchase of units in Folio No.&nbsp; / Application No. &nbsp; in&nbsp; SBI Blue Chip Fund Reg Plan-G for Rs. Rs.5,000.00. Processing of the transaction is subject to verification of documents and cheque/DD payment clearance from your bank.-SBIMF<br><br>29/05/2018, 10:49Dear Premendra Kumar,<br><br><br><br>Greetings from SBI Mutual Fund!<br><br><br><br>Your Folio number 20362178 has been created in SBI Mutual Fund. It is our consistent effort and desire to enhance your investment experience with us.<br><br><br><br>In order to help us serve you better, we request you to please spare a few minutes of your valuable time to enable us to validate the data captured, and rectify errors, if any, that you may notice.&nbsp;<br><br><br><br>We request you to click on click here to see the data captured in our records. You will also have an option to input the corrections, if any, in the data displayed.&nbsp;<br><br><br><br>In case the corrections that you input do not match with the information provided by you in the original application form, you may have to submit a separate written request (along with requisite documentary proof) to enable us to carry out the said corrections.&nbsp;<br><br><br><br>In case you require any further assistance or clarification, please call us on 1800 425 5425 (Toll Free) or write to us at enq_L@camsonline.com.&nbsp;<br><br><br><br>Thank you for choosing to invest in SBI Mutual Fund. Looking forward to a continued association and assuring our best service,<br><br><br><br>Regards,<br><br><br><br>SBI Mutual Fund<br><br>31/05/2018, 06:24Kal shaam me sanjay se baat huyi.. usko Yogesh ne mera bheja message dikha diya tha aur sanjay ne usko bataya tha ki agar Premendra nakhre kar raha hai toh usko kar lene do. Wo ekdum dalal ki tarah baat kar raha tha.&nbsp;<br><br><br><br>Yaha jyada din chalne wala nahi. Ye log bhi normal maukaparast nikle.<br><br>01/06/2018, 10:04Mera card ka 700 rupees kat gaya.<br><br>Papa rimjhim ko exam dilane kyu nahi jaate<br><br>Meri RFCs ka kya hoga<br><br>Mere sath hi ye sab aisa kyu ho raha hai<br><br>03/06/2018, 05:30Atm card din me 2 june ko aa gayaShaam ko mera gio Number activate ho gaya2 june ko hum 150 rs ka gutkha khayeKal papa machli laaye.... sadhu chacha and family ko sham me machli khilaye... hum machli kha ke 4 baje office pahuchey<br><br>03/06/2018, 09:17Aaj subah hum apna mobile number gio wala activate karaye.. uske baad apna debit card activate karaye..<br><br><br><br>Ghar wale sbi account me 24000 transfer kiye apne icici wale account se.&nbsp;<br><br><br><br>Papa kah rahe they ki apna paisa iss month 3000 hi nikalo.. 2000 humse le lena...&nbsp;<br><br><br><br><br><br>Hum papa ko jawab de diye ki papa tu apna jo paisa dewe ni usi se matlab rakha na... papa ko surely meri baat achi nahi lagi hogi.. humko bhi ye baat bol ke acha nahi laga..<br><br><br><br>Mera justification hai ki atm card se 100-200 kar ke hum kharcha kar dete hain.. isiliye account me kam paisa hi rakhna chahte hainDear Customer, your Account XX2297 has been debited with INR 24,000.00 on 03-JUN-18. Info: MMT*Ref815408291512*20172787. The Available Balance is INR 25,202.25.For dispute,call 04033667777.Your a/c no. XXXXXXXX7422 is credited by Rs.24000.00 on 03-06-18 by a/c linked to mobile 8XXXXXX624-PREMENDRA KUMAR (IMPS Ref no 815408291512).<br><br>10/06/2018, 05:08Aaj raat ko , 9 june ki raat 10 june ki subah, hum sapna dekh rahe they ki hum Chanpatia me hain. Hamesha ki tarah hum ko lag raha tha ki humara sharir hulka ho gaya hai aur hum dharti se upar hawa me udd rahe hain aur Chanpatia ke ghar ke room me udd rahe hain..waha uss room me chhajja par sharab ki botlein dekhey. Waha ladki ki yaad mujhey ek baar bhi nahi aayi. Bas hum uss ghar me udd rahe hain.&nbsp;<br><br><br><br>Thori der me rakesh aaya aur uss se mera jhagra hua.. hum usko utha ke udney lage.&nbsp;<br><br><br><br>Thori der me meri nind khul gayi.Kal 3 ghante Yashwant ki help kiye par aisa feel ho raha tha ki Yashwant ko lag raha hai ki hum ghar pe hain.. wo mere se puch raha tha ki tumse itna baat kiye par koi halla gulla nahi sunai de raha.<br><br><br><br>9 june ko chacha ko kachri dene gaye they.. uss samay ghar pe chachi thi.. chacha aur aayush gym gaye they.. chachi chai pilayi... pani pilayi.. mirinda bhi di.. unke yaha 8 baje se 9:30 tak rahe.. chachi aur baad me chacha ne kaja ki aaj tuhar jameen ke kaam me Dhruv chacha registry kaeayenge.. kagaz me 10000 rupiya laga hai..Office me sanjay se last week baat huyi thi ki wo agile estimation and planing ki book padhey aur mujhey samjhaye..<br><br><br><br>Humko office walo pe shakk hai ki wo log humko accha nahi samajhte..<br><br><br><br>Office me bhi hum gutkha khate hain.. kisi ke bagal me nahi baithna chahte..&nbsp;<br><br><br><br>Ghar pe hum piche wale room me gutkha khate hai, bed pe baith ke videos dekhte hain, papa maa rimi chhotieeee se baat nahi karte.. padhai nahi karte.. chinta me rahte hain..&nbsp;<br><br><br><br>Life me jo chije me hum majorly time invest kar rahe hain unme gutkha khana, cig pina, chinta karna, raam ka naam le ke din katna, gym janey se pahle gutkha khana , aaney ke baad nahane me late karte huye gutkha khana aur video dekhte huye chinta karna, raat ko late sona hain.Meri ruchi sirf apni samasya likhne me hai.. dubara hum apna likha hua padhna nahi chahte..<br><br><br><br>Aisa lagta hai ki hum jaan bujh kar chinta me rahna chahte hain. Taaki kaam na karna pade.. humko sabse jyada khud se narajgi hai..<br><br><br><br>Humko sirf negative words and thoughts aate hain..Hum papa maa se apni problem kahna chahte hain , par aisa lagta hai ki wo meri problems sunke sirf ek dusre se ladte hain.. wo log humko mere problems ka solution dene ki jagah khud me hi ladte hain..&nbsp;<br><br><br><br>Office me yogesh bhi yahi dikhana chahte hain ki wo mere kaam se khush nahi hain.. mere technical knowledge ka unke liye koi mol nahi hai.. muhhey kya aata hai se jyada unka focus mujhey kya nahi aata aur hum kaha atakte hain - pe jyada focus hota hai yogesh ka. Somen se meri baat nahi hoti.. sheikh se mainey baat karna band kar diya hai.. anshul kirti as usual pahle ki tarah hum se apna kaam nikalwana chahti hain.. par khud mere ek bhi query ya sawal ka jawab nahi dena chahti...Meri ek major problem hai ki hum chinta karna chahte hain. Chahte hain ki koi meri suney aur solution bataye. Meri kahi baatein kisi aur ke aage repeat na kare aur mera majak na banaye. Humko na aaj ki date me cnx me acha lag raha hai na accntr me acha laga tha. Yaha cnx me bhi ab log humse baat nahi karna chahte.. cnx me bhi log sirf apna kaam hum pe thopna chahte hain... khud kya karte hain batana nahi chahte...&nbsp; yahi haal accntr me bhi tha.&nbsp;<br><br><br><br>Pichle saal iss samay hum jyada musibat me they &nbsp; .... chain ki nind&nbsp; humko sirf ajit ke room pe hi aayi thi... uske baad jab Koparkhairne me rahe toh waha sharabi shababi kababi roommates, mera nonstop pan, ghatiya masaledar khana, akelapan, chinta, waha ki garmi , bhid, umas, office ka silence aur non-cooperation- inn sab me hi ulajh gaye.. mera maksad hum bhul gaye.. bhul gaye ki Accenture jake hum kya sapney dekhey they aur aage humko kya sab mil sakta hai...Waha ek chij mere dik-bhramit roommates ko jarur chubhti thi aur wo hai mera roz gym ke liye time par nikal jana..<br><br>10/06/2018, 19:43Aaj mainey mama ka birthday dekha facebook par .. unko wish karney ke liye call kiye.. wo bahut roughly baat kiye.. unka mood thik nahi tha.. birthday wish karney par wo bhadak gaye.. humse nana ka naam puchne lage .. mami se bhi baat huyi.. wo humko samjhane lagi ki miya bibi ka jhagra hota hi rahta hai.. hum bole ki agar uske sath akele rahte toh wo humko bhi marwa deti.. uske mami chup huyi.. phir majak karney lagi ki humko hi le chaliye..<br><br>11/06/2018, 09:58Aaj subah 11 june ko papa rimi se chacha ko call karaye.. kathal ka pakora bhijwane ke liye.. par chacha ne mana kar diya.. phir papa ne humko rimi ke sath bike par ja ke chachi se puch ke aaney ko kaha.. chachi bell bajane par bhi nahi uthi.. papa subah se maayush hain...&nbsp;<br><br><br><br>Maa ne pucha ki humse chacha chachi ke yaha koi galati toh nahi hua hai ?? Hum bole nahi koi galati nahi hua hai.<br><br><br><br>Rimi se baat kiye ki kahi Saturday 9 june ko jo chachi se meri baat huyi thi ki sab heroin shuru me ta mushaharin hi lagti hai... baad me jaise jaise famous hoti hai sundar ho jati hai. Kahi chachi chacha isse toh dukhi nahi hain...<br><br>12/06/2018, 21:22Aaj court me 12 june ki tarikh thi... mera mann waha jakar bechain ho gaya tha...<br><br><br><br>Waqueel ke ek staff ne lautate huye paise man liye.. thora ajeeb laga..<br><br><br><br>phir nikalte huye waqueel se mulakat huyi.. divorce wale case ki jaldi jaldi tarikh ke liye case fast track court me dalney ki baat huyi...<br><br><br><br>mere aaj wale case ki next taarikh 15 oct 2018 hai<br><br>13/06/2018, 05:44Mainey apney life me bahut galatiyan ki hain. Mainey mere maa papa ko bahut dukh diya hai.<br><br><br><br>Dosti karne me bhi hum bahut kacche hain. Galat logo se hi dosti ki hai.<br><br>13/06/2018, 15:06Court jaaney ke baad meri jine ki iksha hi samapt ho jati hai.. na ghar pe mann lagta hai na office.. kisi se baat karney me bhi darr lagta hai.. sab meri galati nikalney me hi lage rahte hain.. kyu ji raha hu.. meri life me kuch bhi nahi bacha.. jaldi gussa ho jata hu.. kisi chij me mann nahi lagtaBhagwan maut bhi nahi dete.. khud ko control nahi kar pate.. pichle saal acchi company me job hua tha.. roommates company environment aur khud ki problems ke chalte job nahi bacha paaye..&nbsp;<br><br><br><br>Ab jine ki koi iksha nahi hai.. lagta hai ki fas gaya hu sab ke bich me..Bhagwan humko maut de doKutta billi kuch bhi bana do jaha kasht honey par hum ko kuch sense hi na hoHum jinda laash ki jindgi kab tak jiyenge<br><br>17/06/2018, 14:1017 June ko dadaji se baat huyi<br><br><br><br>dadaji ka kahna hai tumhare ghar pe jo police aayi thi, puchey ko ki yaha ladai ho rahi hai kya? ho sakta hai ki unn logo ne hi call karaya ho, unki koi chaal ho, harrass karney ki koshish ho.<br><br><br><br>uss number ke piche search karna chahiye.<br><br><br><br>Dadaji ko kaha ki ab hum kya kare.<br><br><br><br>Dadaji bole ki ye batein apney papa ko nahi batana. wo waise hi tension me rahte hainkal 16 ko Sadhu chacha naval chacha ke sath aaye theyiss week court janey ke karan mann dukhi hi rahta tha<br><br>18/06/2018, 06:4817 june ko din bhar office ke kaam me busy they.Gain manager payoutShaam ko Suresh chacha aaye.. wo char dham ki yatra kar ke aa rahe they. Papa maa hum aur rimi unse baat kiyeChachi ka Chanpatia walo se relation hai. Wo mameri fuferi bahan hainAaj subah se mujhey ek chinta sata rahi hai ki humko khud pe control nahi hai. Isiliye hum jo plan karte hain wo nahi kar pate aur jo chijein mujhey nahi karni chahiye wahi mere se ho jata hai.Example toh bhare huye hain<br><br>18/06/2018, 09:2516 june sunday ko meri manoj se 7 pm pe baat huyi. Usko Chanpatia, waha ke mere rishte aur apne divorce ki baat kahi. Usne bhi kaha ki wo ladki ko ghar me mat aaney dijiye.<br><br><br><br><br><br>Mainey Manoj se 16 june ko Yogesh harish ka bhi baat kiya ki ye log kahi aur job nahi kar sakte. Yogesh harish rekha alag alag kaam assign karte hain . fir jiska kaam nahi hota wo somen se meri shikayat karta hai.Aaj subah gym se aaye toh dekhey ki papa dhruv chacha se baat kar rahe they. Wo ro ke dhruv chacha se baat kar ke ro rahe they ki suresh chacha Chanpatia walo ke samney papa ko kaise bol diye ki wo humko maar dega.&nbsp;<br><br>Bahar hum dekhey ki dadaji apney park me kuch kar rahe they.&nbsp;<br><br><br><br>Humko shakk hi rahta hai ki dadaji jaanbujh ke papa ki batein sunte hain.&nbsp;<br><br><br><br>Par hum kisko samjhaye. Dadaji sunte hain toh unko kuch kah nahi sakte. Papa ko bataye ki aap chilla ke ro ke baat mat kijiye, toh ye sab karenge par meri baat nahi manengey. Ho sakta hai ki wo dadaji se hi na lad le ya dadaji ko kuch bol de.<br><br>18/06/2018, 19:11Aaj office me yogesh devgan ne kaha ki wo mere se baat karna chahte hain<br><br>1. Tum phone se net use karte ho toh jab tum call pe rahoge toh tumse baat nahi ho sakegi.. tum dongle lo ya dusre phone me normal sim dalo.<br><br><br><br>2. Dnd ya call block karte ho<br><br>3. Rfc closure ke liye agar koi help nahi karta toh tum direct aveek akshay praveen ko pakro. Change implementation ke pahle va gap report attach kar do aur change implementation ke baad phir se va report le ke dikha do ki mere change se koi extra va gap nahi aaya hai.&nbsp;<br><br>4. Raat me bhi call aaye toh attend karo.<br><br>19/06/2018, 10:33Resolvejiffy demo by rafhikaGm daily monitoring sheetGm 443 port issueGm kirti v queryUni 13 server down issueYogesh query for db2 upgradation<br><br>20/06/2018, 15:14Today on 20th june<br><br><br><br>Naveen called me and asked for VA gap closure. Guru was with him. I simply said why don't you ask Yogesh for same. I have no clear idea for how to close VA gaps.<br><br><br><br>He said am I sure he should talk with Yogesh for this. I said yes.<br><br><br><br><br><br>Now i am expecting some escalation and some termination of mine from here.While replying my tone was very rough<br><br>24/06/2018, 06:0922 june 2018 ko Naval chacha ke marriage annivarsary tha. Mere ghar papa maa khir pudi banwaye.<br><br><br><br>Sadhu chacha and family aur naval chacha and family shaam ko aaye they hamare ghar khana khaney.<br><br><br><br><br><br>Naval chacha mere daat ko dekh ke puchey ki hum paan khate hain kya. Hum bole Mumbai me khate they.<br><br><br><br>Naval chachi aur unki maa humko rimi ko aur maa ko 200 rupiye di. Total 1000Papa chacha chachi ko kapra diye23 june ko rimi aur hum naval chacha chachi se milney sadhu chacha ke ghar gayeNaval chacha humse mere shaadi ka puchey.Sadhu chacha humko apney bete aayush ko daatate huye bole ki humara time nikal gaya haiHum bahut gutkha kha rahe hainAs per naval chacha kohuarwa wale dada 12 jan 2003-4 ko mare they. Uske baad naval chacha ko job laga tha. Hum chacha ko bole ki jaise aapka bura time nikal gaya vaise mera bhi nikal jaye dua kijiyegaDharmesh kolkata oriente company me kaam karney ja raha hai. As per papa aur Dhruv chacha Dharmesh yaha job se nikal diya gaya hai3 baje 23 june ko chachi log humko ashirvaad diya ki ab patoh pair chuye.. but hum bole ki hum ab sanyashi ho jayenge.. hanuman ji ke bhakt ho jayengeKal hum bahut soyeHum chain ki nind nahi le pa raheAaj shayad Dhruv chacha hum log ke jameen ka kaam karenge<br><br>25/06/2018, 02:53Mera sabse bada dushman hum khud hain.&nbsp;<br><br><br><br>Mere jiwan me mere bachpan se aaj tak kisi na kisi chij ki atishyokti bhari hai.<br><br>Bachpan me tv dekhne ka bhoot sawar tha.<br><br>Phir comics<br><br>Phir tv chuta to gandiagazines<br><br>Phir maa se bakbak aur papa ki shilayat<br><br>Phir patna gaye toh dukh mahsoos karna<br><br>Phir college me cig sharab<br><br>Phir delhi me bhi cig sharab gutkha<br><br>Maa papa ke aane ke baad gutkha<br><br>Aaj gutkhaHum apne aap ke sabse bade dushman hainDusre bahari log mera use kiye hain<br><br>25/06/2018, 04:52Aaj subah papa ko 4:30 am par uthkar paani bharte dekhe. Acha laga ki papa maa ki help kar rahe hain.Mujhey har ek do ghante par gutkha khane ki lat lag gayi hai. Mujhey apni ye lat sudharni hai.Cue-routine-reward cycle<br><br><br><br>It is to change any habitTarget - to change my habit to chew gutkha<br><br><br><br>Cue-bechaini, restlessness, papa ki gaali, baaki apni copy se collect karenge<br><br><br><br>Routine- chew gutkha<br><br><br><br>Reward- cue se kshanik rahat, fir dhire dhire cue ke liye taiyari<br><br>25/06/2018, 14:40Humko gutkha khaney ka mann kar deta hai jab hum ko office me kisi se bata bati ho jata hai<br><br><br><br>Ya koi humko daat deta hai.<br><br><br><br>Tab humko gutkha kha ke apney pressure pr thora rahat milta hai<br><br><br><br><br><br>Side effects - sorrow ki gutkha kha liye. Ab muh mahkega<br><br>26/06/2018, 04:21Ab mera mann cnx support se bhar gaya hai. Bewazah ka escalation hota hai waha<br><br>&nbsp;Yogesh attentive rahne ko bolke bhayanak dohan karte hain. Din ke 10 baje se raat me 11 baje tak khatna<br><br>Kisi bhi samay call kar dete hain.Kal office me pahuchte hi humko Yogesh ne daat diya ki tum ticket kyu nahi dekhte. Hum man hi man chidh gaye. Bole ki maa chudao Yogesh tum apni.<br><br><br><br>Shaam ko resolvejiffy slow ho gaya. Yogesh ne call kiya. Hum mobile nahi dekhe.&nbsp;<br><br><br><br>10:09 par Yogesh ne dubara call kiya. Tab mainey call back kiya aur unko suna diya ki humko expectation nahi tha ki mobile par call aayega.&nbsp;<br><br><br><br>Yogesh humse bol rahe they ki tum sweekar lo ki tum laptop ke pass nahi they.<br><br><br><br>Hum 9:36 pm par Jogender ke skype message ka jawab de rahe they.<br><br>Humko yogesh ke sath kaam nahi karna hai.<br><br>26/06/2018, 08:00Mera man hamesha bechain rahta hai. Hum jo likhte hain usko padhney ka mera kabhi man nahi hota. Apney sabse bade dushman hum khud hain.&nbsp;<br><br><br><br>Ye diary hum bachpan se likhte hain ki humko ki gayi galatiyan duhrani na pare. Par hum isko kabhi nahi padhte.&nbsp;<br><br><br><br>Mera dukh shok sab mera natak hai. Kyuki man bechain nahi rahega toh hum galatiyan nahi karenge.&nbsp;<br><br><br><br>Humko mar jana chahiye. Hum kisi layak nahi hain. Hum achha soch jarur sakte hain par achha kar nahi sakte. Hum ek problem hain . Humko mar jana chahiye<br><br>26/06/2018, 13:45Sadhu chacha shuru me sohna me job kiye. Phir gurgaon. Then Ballabhgarh me rubber factory me. Uske baad chacha ka NHPC me job ho gaya 98 ke ass pass<br><br>27/06/2018, 07:13Naval chacha ke job 2004-5 me huaNaval chacha ke ek ladka, Navneet aur ek ladki , Mansi hai.Navneet bada hai.<br><br>27/06/2018, 11:47https://myitreturn.com/dashboard_filer?a_year=2017-18Aaj 2017-18 ka concentrix wala income tax bhare hain.<br><br>27/06/2018, 13:42Mere dimag me 2 batein daur rahi&nbsp; hain:-<br><br><br><br>1. Sanjay ne mere 11am to 11pm wale split shift pe kaha tha ki isme tumko jine ka time kab milega?<br><br>2. Naresh ne kaha tha ki jab tak tu&nbsp; chupchap sun raha hai tab tak tu yaha safe hai.Yogesh ne mere 11am to 11pm ke split shift pe ye kahi se nahi socha hai ki hum jine ke liye kitna time payenge iss shift me? Yogesh mazboor ho sakte hain par acche nature ke nahi lagte. Ye sab mile huye hain.Ye sab matlab yogesh Harish sheikh somen.. sheikh ko mainey ek baar kaha tha ki hum pe mumbai wale ne khub pressure bnaya tha par hum man hi man&nbsp; chillaye par kuch nahi kahe<br><br>28/06/2018, 06:01Kal shaam ko shahid aaya tha . 25 july ko uska last working day hai. Wo salary issue se resign kar raha hai.&nbsp;<br><br><br><br>Usko mainey apne Accenture aur uske salary issue, politics aur mumbai ki baat batayi.Shahid se itni baat kya mujhey karni chahiye?Din me 2:15 pm par hum office pahuchey. Yogesh ne 1 baje call kiya tha. Puch rahe they ki tum 11 baje kyu nahi aate?Mujhey lagta hai ki jaldi mera cnx se patta katney wala hai.<br><br>30/06/2018, 09:03Aaj subah papa humko pakora dene ke liye sadhu chacha ke ghar bheje. Waha hum ko chachi ke bhai aur bhabhi se baat huyi.&nbsp;<br><br><br><br>Mama puch rahe they ki tumhare janpul wale jameen par bada dukan ban raha hai. Panch mandir wala jameen bhi accha tha. Hum bole ki kitna tension le? Jitna bhagya me tha mil gaya.<br><br><br><br>Phir chachi ke puchney par mama ne mami se ek Ramchandra babu ke pota ka naam bataye. Wo sunil ji ka ladka hai. Shankar chacha ke relations me lagta hai.<br><br><br><br>Hum number le ke papa ko de diyePapa bole accha pariwar nahi hI<br><br>30/06/2018, 17:59As per papa, Ramchandra babu (sdo) , lakhaura , ke sautele bade bhai Ramashray sah, shankar chacha ke sasur hain. Ramashray sah ke do beti aur ek beta tha. Ramashray sah ke ek beti se shankar chacha ke shaadi hua tha. Dusri beti mar gayi hai.&nbsp; Ramashray sah ka beta pagal hai. Ramchandra sah ki patni vyabhicharini aurat thi.<br><br><br><br>Ramashray sah aur Anjali ke dada ka sadhu ka relations hai.<br><br>??<br><br>1<br><br>01/07/2018, 05:12Mere bhitar bhatkav bahut jyada hai. Hum jo schedule karte hain usse bhatak jate hain.&nbsp;<br><br><br><br>Friday ko schedule kiya ki iss weekend me hum do functionality development karenge interview mgmt me, hum energy laga rahe hain captain vyom , javafx jaisi chijo ka video dekhne me<br><br>01/07/2018, 09:45Hum marna chahte hain. Hum apni life barbaad kar chuke hain. Bhagwan humko maut do.<br><br>02/07/2018, 06:14Kal 1 July ko Dhruv chacha confirm kiye ki unhoney jameen ke liye 3 lakh rupiye de diye. 15 tarikh tak jameen ka kaam ho jayega.<br><br><br><br>Kal Shankar chacha, Dhruv chacha se lakhaura wale ladke ka pata chala. Shankar chachi ladka ke dadi ko fua kahti hai.Sadhu chachi ke bhai jinhoney ladke ke bare me bataya tha.. unka naam Biltu hai<br><br>03/07/2018, 06:05Kal 2 july ko anshul 3 baje chai pine ko boli. Chai pite huye wo mere se mere personal life ka puchi. Mainey usko bataya 16 feb ki incident. Wo boli ki aapko uski maa se shikayat karney ka dhamki nahi dena chahiye tha. Mainey usko ek hi baat bola ki hum aapko puri baat nahi bata pa raha.Kyuki aap shadi shuda nahi hoWo apna age 25 saal bata rahi thi<br><br>06/07/2018, 09:042 july ko mainey gm ka count check kiya. Hunko HG aur emptag count garbar laga. Kirti se pucha. Wo boli sb thik hai. Mainey naveen se pucha. Usney HRIT team se confirm karney ko kaha.<br><br><br><br>2 july ko budget report ka data diya mainey kyuki pahle kirti ne jo data diya tha wo galat tha.&nbsp;<br><br><br><br>3 july ko pata chala ki mera diya data bhi galat hai. Baad me naveen ke sath analysis se pata chala ki kuch HGs may se june me carry forward hi nahi huye they. Mera man darr gaya. Fir naveen ne uat me carry forward dubara chalaya. Aur budget report nikal ke hrit team ko diya. Ye report sahi tha. 3 july ko aur bhi kuch kaam they mere pass.karne wala hum akela. Kirti to laudi hai. Ek kaam le ke baith jati hai.&nbsp;<br><br><br><br>Yaha bahut pressure hai. Resolvejiffy gainmanager bol ke iska business technical development support sab thamana chahte hain. Sath me baaki application ka bhi. Wo bhi same salary me.&nbsp;<br><br><br><br>4 july ko hum office nahi gaye. Darr ke mare. Mera situation same ek saal pahle ka ho gaya tha. 4 july 2017 ko bhi humko resign dalney ke liye press kiya tha Accenture ki hr ne. Aaj 4 july 2018 ko mainey khud hi resign daal diya. Fir hum so gaye ya kaho behosh ho gaye. 10 baje somen ko message kar diye ki well nahi hain nahi aa sakte. Work&nbsp; from home le liye. 12 baje aakh lag gayi. 4 baje uthey. Bich me Somen Rekha Harish Kirti Anshul sab ka call aya tha. Somen ne mail bhi kiya ki tum dusri baar phone nahi uthaye.<br><br><br><br>Yaha sab dara ke dhamka ke mere se kaam kara rahe hain.&nbsp;<br><br><br><br>Kal 5 july ko hum din bhar soye. Hum resign dalney ke gam me tension me rahe.<br><br><br><br>Din me Kirti ne call kar ke sunaya ki usko ye faltu ke chillam chilli thik nahi lagti. Usko anshul ne resolvejiffy ki RFC approve karaney ke liye bol diya tha. Usney rekha se meri shikayat ki thi. Isiliye Rekha ne hum ko call kiya tha.&nbsp;<br><br><br><br>Mai 4-5 july ko koi call join nahi kiya. Aaj bhi koi call join nahi karenge.&nbsp;<br><br><br><br>Maa ko mainey apni kahani batayi toh wo boli ki tuhra se tohre layak kaam hi bole la nu kare la kono iita dhoye ke thore kahat hoi.Let's see aage kya hota hai.<br><br>07/07/2018, 04:28Shaam ko 4 baje faridabad sector 55 thana se ek police wale aaye they. Wo hum sab paancho logo ka bellable warrant laye they ki aap pancho log ko thane chalna hoga. Maa mujhey aa ke batayi. Hum office ka kuch kaam kar rahe they. Maa papa ke kahney par hum bagal me dadaji ke pass gaye. Police wale ne kaha ki aap apney waqueel se bhi meri baat karao. Dadaji ne pahle dhankar se baat ki. Fir wo mere ghar aaye. Hum dadaji se milney unke ghar gaye they.&nbsp;<br><br><br><br>Mainey waqueel se police wale ki baat karayi. Police wala 4000 rs le gaya. Waqueel ke kahney par humne likha diya ki ghar par koi nahi mila. Yaha tala laga hua tha.&nbsp;<br><br><br><br>Fir hum waqueel se milney gaye. Raste me Yogesh ko call kiya ki hum agle 3-4 ghante available nahi hain. Raste me mere mobile se radhika sandeep singh narendra ko missed call chala gaya.<br><br><br><br>Police wala samjha raha tha ki tumlog me se ek Premendra hi ja ke waha Bettiah se apni bail kara le. Baaki log ka naam case se hatwa le. Nahi toh agli baar fir notice aayega. Waha bihar me ek waqueel kar lo.<br><br><br><br>Waqueel ne kaha ki ye case bihar se wo nahi la payega. Agli baar bhi aise hi police wale ko warrant firana hoga. Abhi humare side se koi karyawahi nahi hogi.&nbsp;<br><br><br><br>Waqueel ne kaha ki unke waqueel ko usney 4 lakh ka offer diya tha par wo bol raha tha ki wo log ladki bhejna chahte hain. Waqueel mere se bola ki Premendra tum sulah kar lo. Hum bole ki wo ladki ke sath hum nahi rah sakte. Wo baar baar suicide karti hai. 16 feb 2016 ko ladki akele me mere se bol rahi thi ki tum Premendra humko lene kyu aye they December me. Uski patna me kahi shaadi tay ho gayi thi.<br><br><br><br>Raste me humko samosa khane ka man kiya. Hum pao bhaji kharide.mithai khaye. Ghar pe aane ke pahle Narendra se bhi baat huyi. Narendra photo maag raha tha ki wo kagaz ka photo copy chahiye.&nbsp;<br><br><br><br>Ghar aa ke papa humko chacha se milney bheje. Papa se hot talk hua. Hum papa se bole ki chacha aap par ilzam lagate hain. Papa ka ilzam tha ki tum jawab nahi dete. Isiliye sab chacha log tumse papa ki shikayat karte hain.<br><br><br><br>Papa se baat karke hum cchacha ke pass gaye.&nbsp;<br><br><br><br>Chacha se baat huyi . Chacha&nbsp; ka kahna tha ki waqueel sab nahi chahta ki case ka niptara ho. Chacha Bettiah me waqueel karney ki baat kar rahe they. Taaki&nbsp; waha ka kagaz yaha na aaye. Ek application case ko yaha transfer karaney ka bhi laga denge.<br><br><br><br>Chacha ke pass se hum 9:30 pm par aaye.Raat me maa ko hum bole ki hum dada ji ek baar puchenge ki kahi waqueel hum logo ko double cross toh nahi karega. Waqueel pe hum faith kar sakte hain ki nahi.<br><br><br><br>Shaam ko chacha ke pass jane se&nbsp; pahle papa waqueel se baat kiye. Waqueel ne papa ko samjgaya ki abhi apne side se kuch nahi karna. Wo court level par baat kar raha hai.Mere office wale meri Saturday ko do shift laga diye hain. Yogesh shaam ko bataye ki mujhey do shift karni hai.ek subah fir ek raat me.<br><br><br><br>Office wale mauke ka pura fayda le rahe hain.<br><br>08/07/2018, 08:20Din me office ka kaam tha 8 am se. Din bhar lage rahe.<br><br><br><br>Subah me chacha ko pakora dene gaye. Chacha naha rahe they. Chachi se baat huyi..<br><br><br><br>Chachi ko bole ki hum me sab buraiyan hain par hum chhouribaaz nahi hain. Wo ladki humko apne jaisa galiz banana chahti thi. Chachi ke kisi baba ke pass jane ki baat par hum bole ki humko inn sab baato me vishwas nahi hai par humko kisi dusre ko hasna bhi nahi hai.<br><br><br><br>Wo ladki jaisa chahti thi hum agar chhouribaaz hote toh hum dono ki chandaal chandaalin ki jodi hoti.din me yogesh d ne ghar pe perney ke baad shaam ko office aaney ko bole. Raat me purging activity postponed ho gayi. Query ready nahi tha.Raat me amit singh aur sanjay sharma se yogesh ki shikayat kiyeShaam me 7 june ko dadaji se baat huyi . Unko 6 june ko waqueel se baat , apna waquel ke prati doubt aur narendra ki apne dost ke papa se bellable warrant ki baat kahe. Dadaji bole ki agar agli baar bhi hum logo lautana hi hai toh itna paisa nahi denge. Wo khud hi bol denge ki wo log ab yaha nahi rah rahe. Kaha gaye pata nahi<br><br>09/07/2018, 09:237 july ko meri double shift thi. Din me 8am to 2pm.. jo ki extend ho ke 8pm tak ho gayi. Fir 10:30 pm to 9 am. Ghar pe 10:30am pe aaye. Chachi ko kofta ka sabji dene narendra gaya tha. Din me hum soye. Fir shaam ko waqueel se milne ka time liye.<br><br><br><br>Shaam ko waqueel se baat huyi. Waqueel ka kahna hai ki hum bihar jayenge toh lakh rupiye lag sakte hain. Wo yahi court se divorce ka vyavastha kar raha hai. Mangalwar budhwar ko waqueel ko call karna hai ki wo mere divorce case ko fast track court me daale.&nbsp;<br><br><br><br>Ghar aake hum thoda frustrated they. Raat me papa maa narendra se baat kiye. Bhagwat gita sun ke so gaye.&nbsp;<br><br><br><br>Rimi Chacha chachi ke sath film dekhne gayi thi.<br><br>09/07/2018, 16:46Gain Manager monitoring sheet<br><br>Resolvejiffy rfc accept and work for closure<br><br>Old RFCs closure<br><br>Resolvejiffy dashboard<br><br>Qaawebdotsuni dashboard<br><br>Check if anything for purging actionableQaa first time login slowness<br><br>Webdots issue<br><br>10/07/2018, 06:06Yogesh harbara kar jyada kaam me fasa dete hain. Ping kar ke qaa wale issue ke liye pareshan karte hain.Raat me shrimad bhagwat Gita sunte huye 12 baje ke ass pass humko mb ka mann kar diya. Hum Shrimad bhagwat Gita sunana chor kar 2 baar mb kiye. Fir so gaye.<br><br><br><br>9 baje hum 45 rs ka gutkha kharidney nikle. Maa ko bole ki tahalney ja rahe hain.<br><br><br><br>Subah 6 baje uthey. Raat me acchi nind nahi aayi.As per Shrimad bhagwat Gita mere me tamo gunn ki aur rajo gunn ki adhikta hai.<br><br>10/07/2018, 13:48Aaj office me aake hum baithey hi they ki yogesh ne aake QAA wale issue ke liye humko tok diya. Mere se ye issue ho nahi raha but Yogesh isko mere upar hi laade ja rahe hain. Pahle application start karaya phir server.. issue jyo ka tyo.. phir mere se ek folder misplace ho gaya 39 me.. aur hum darr gaye ki jarur mere chalte hi server start nahi ho raha..&nbsp;<br><br><br><br>Anshul se baat karte huye mere muh se nikal gaya ki aur koi nahi toh Rakesh jaisa hi wasadmin lete aao. Anshul ye sun ke bol padi rakesh kya bura tha.. aapko bolne ka tameez nahi hai.. isiliye aspke sath koi kaam nahi karna chahta..baat mujhey buri lagi.. hum tunak ke bol pade ki ye QAA Issue mere se nhi ho raha.. aur hum niche gutkha khaney aa gaye.Baat aise sahi hai boli usney but mainey ye baat lightly hi kahi thi.. ye Anshul Kirti yoges<br><br>Yogesh sab man me vish bhar ke bairhey hain mere liyePar mujhey yaha se nikalney ka rasta nahi sujh raha<br><br>11/07/2018, 13:20Shaam ko 5:30pm par office se nikle.<br><br>Rekha Bari ne raste me call ki.. uska kahna tha ki tumko call me decided activity ke liye mail karke niklna chahiye tha.. hum 7:30 pm tak pahucney ki baat kahe.. man iss chakra se dukhi aur gussa tha..Subah 8 baje waqueel ke pass gaye.. 10k for put case in fast track court.. apni shaadi ke pahle ki baat.. phone na ithana.. churi se hath katna<br><br>13/07/2018, 05:39Dopahar me Yogesh ne 100 rs party for Yashwant birthday and Nakul fare well liye.<br><br><br><br>Shaam ko jab hum nikalne lage 5:30 pm par tab Yogesh bole ki humko aaj 3:30pm par nikalna chahiye tha. Ab humko 9:30 pm par nikalney ko kahe. Mujhey bahut krodh hua. Ye sirf bajha ke rakhne ka upay tha unka. Qaa ke downtime aur purging activity ka approval mails bhejte huye humko raat ka 10 baj gaya nikalte huye.<br><br><br><br>Raat me hum 11:30pm par ghar pahuchey.<br><br><br><br>Agle din 12 july ko pura din hum shrimad bhagwat Gita suney. Din&nbsp; ke samay office ka call aaya. Hum recieve nahi kiye. Shaam ko jaldi khana kha ke hum so gaye.&nbsp;<br><br><br><br>Dopahar me maa ke kahney par hum bank jakar sip ke apney installment nahi katney ki baat kahe. Vaha se ek Sector 16 ke Mittal sahab ka number mila. Unse pata chala ki mera ek sip 10th aur dusra 15th ko autodeduct hoga.<br><br><br><br>Raat me 13th July ko hum rekha aur kirti ke escalation mails par reply kiye ki sirf hi messages mat bhejo agar critical hai toh exact issue message karo.<br><br><br><br>Din me Bhagwat Gita sunte huye bhi humko office ki baato ki chinta ho rahi thi.<br><br>14/07/2018, 05:1613 july ko 3 baar bhagwat Gita suney. Par isse mera mann shant nahi hua. Pichle saal jab hum company Concentrix join kar rahe they tab sochey they ki dubara sanjay mil jayega jaha hum usse baat karenge. Apna bojh halka kar lenge usse baat kar ke. Par aisa nahi hua. Yaha toh khud hi bahut aag lagi hai. Koi mere se mere bare me na puch kar sirf kaam laad dete hain. Mere se baat kar ke mera hi naapi utha liye sab aur phir mere na bol paney wale ki baat jaan kar humko 24 ghanta wala mazdoor bana diye.&nbsp;<br><br><br><br>Inka mann hi nahi bharta. Kaam jyada hai toh karney wale jyada rakho par yaha managers jyada aur implementors kam hain.Humko manager bol ke implementor bana diya hai<br><br>14/07/2018, 07:05Meri jine ki iksha khatam ho gayi hai. Sangharsh karne ki iksha khatam ho gayi hai. Hum marna chahte hain. Mera koi apna nahi hai. Hum apno ke upar bojh ho gaye hain.<br><br>16/07/2018, 08:25Mere dukho ka saar hai&nbsp;<br><br><br><br>??? ?????? ???? ?????, ???? ???? ???? ??? ???????.Shaniwar ko office me manoj se baat kiye aur sab office walo ki shikayat kiye.<br><br><br><br>Sunday ko kuch log aaye aur Narendra ko mile. Papa aasha me they ki wo log mere liye kuch karenge. Par wo aadmi sirf apni beti ke liye hi aaya tha.Mujhey meri jindgi bojh lag rahi hai. Pata nahi kyu ji rahe hain.Savere 5 baje chanpatiya wali ke maa vinod fufa ke pass gayi thi. Iss sunday ko wo vinod fufa ke ghar par fariyauta karwaegi. Papa ko aur hum sab ko gaali de rahi thi.. fua boli ki humar duari par kyu gariyawa taru. Hum janat naikhi ka unka .. hum u log ke dekhat naikhi kaSavere se mann bechain tha. Ye sun ke wo Chanpatia wale vinod fufa ke pass gaye they.. mann thora shant hua..<br><br>16/07/2018, 23:20[7/16, 20:50] Rimjhim: Raghupati Devi&nbsp; subere Vinod fufa ke pass Gael rahli....Or sham Ko Suresh chacha ke ghr...Waha fariyawta huaa 10 August Ko aawta SB....Maa papa or ladki or bhai..SB kagaj bna&nbsp; di...Paisa 6.5 lakh li<br><br>[7/16, 20:51] Rimjhim: Aao to ghr pe details me papa bataeyan<br><br>[7/16, 20:51] Rimjhim: Papa tmko call krlan to out of area bol ta<br><br>[7/16, 20:55] Rimjhim: KB le aaebe ghr<br><br>[7/16, 21:00] Rimjhim: Bolo av kuchh<br><br>17/07/2018, 07:47Kal subah office me jate hi hum apne seat ke pass ki network cable kisi aur ke dwara use karte huye dekhe. Humko bhi ek bahana chahiye tha seat chorney ka.. so Yogesh ke bagal me baithney ko chale gaye.. but yogesh ne kisi trainee ko apne bagal me bitha liya.. phir hum Somen Rekha se baat karney meeting room me chale gaye...&nbsp;<br><br><br><br>Rekha ne disclipne ka ilzam lagaya.. yogesh ne discpline aur proactive na hone ka ilzam lagaya..<br><br><br><br>Hum shift timings aur personal issues ka rona roye.. warning mili.. pahle ki performance abhi se behtar thi .. ye bola..Dopahar me naresh pankaj ko cig pilaye aur piye.. unse apna kuch bhi discuss nahi kiya..&nbsp;<br><br><br><br>Shaam ko ghar aane par pata chala ki Chanpatia wala sab Suresh chacha ke ghar gaya tha.. as per raghupati devi.. 4.5 lac me unke maalik nahi maan rahe they.. sadhu chacha suresh chacha ka number diye.. papa aur sadhu chacha aur suresh chacha baat karke 6.5 lac aur 10 August ko fbd aaney ki baat tay karaye unse..&nbsp;<br><br><br><br>Humko maa ye sab batayi.. hum maa se kahe ki dekho wo aa jaye tab kuch baat ho.. wo pahle bhi tay karke paani me baith chuke hain..<br><br><br><br>Aage HARI ki iksha...<br><br>18/07/2018, 09:26Kal 17 july ko office me gainmanager ke liye kaam kiye. Phir raat me 1130 me ghar aaye. Aaj sanjay naresh uday ke sath 300 rs cafeteria me khane me kharch kiyeRaat me kirti ne call kiya tha ki gm issue ke liye<br><br>19/07/2018, 07:48Humko itna samajh aa gaya hai ki hum ek chakra me fas gaye hain. Yogesh ek swarthi aadmi hai. Humko fasa ke dara ke kaam karana chahta hai.Personal problem office man ki ashanti me hum ulajh gaye hain<br><br>19/07/2018, 11:48Aaj subah hum 8 baje uthey. Maa 2-3 baar boli ki gym jo. Hum maa par gussa ho gaye. Bole ki sab dekhat naikhis fir bhi baar baar pareshan kare le.&nbsp;<br><br><br><br>Maa bhi gussa ho gayi.<br><br><br><br>Uske baad hum gym ke liye nikal gaye. Par gym nahi gayeMan vyathit hai ki chije bad se badtar hi hui hain.. papa ka vilap kabhi khatam nahi hota.. unka man nahi bharta.. maa ko papa me koi dosh nahi dikjta... hum papa aur current situation ko jhel nahi paate..<br><br><br><br>Pata nahi kab tak jina hai<br><br>19/07/2018, 19:53Aaj bahut dino baad Amit Tyagi se baat huyi.. aate hi 2-4 sawal kiye ki abhi tum kya kar rahe ho aur mujhey pulse me go thorough karne ko bol gaye agle 15 din me.. mujhey pata nahi mai pulse me kya go through karu.. mere pass uat prod db ka credentials nahi hai. Kon se server par run hota hai.. kya db hai. Kon user use karte hain . Application ka bpo kon hai.. kon kon si functionality hai.. bug fix kon karega.. kuch clear nahi hai.. aage mai pulse se related swal kis se karu.. ye bhi clear nahi hai..<br><br>20/07/2018, 18:21Aaj sanjay ke sath dopahar me niche ghumney gaye..<br><br><br><br>Niche humari baat hui<br><br>Hum yogesh ki shikayat kiye. Bole ki yogesh baar baar ungli karte hain. Somen ke samney kuch aur represent kar rakha hai.. aur actual me kuch aur kaam de rakha hai.. jab hum koi kaam kar rahe hote hain usi samay choti choti chijo ke liye pareshan karte hain.&nbsp;<br><br><br><br>Sanjay ka suggestions hai ki khud ke kaam higjlight karo<br><br>Agar ownership mil raha hai toh lo... but apni conditions bhi rakho..<br><br>Jo jaisa kar raha hai uske sath vaisi hi strategy apnao...Sanjay ne rasta dikhaya ki pahle khud ko manage karna sikh lo. Fir tum ko people bhi manage karney honge.<br><br><br><br>Sanjay ke according apna kaam highlight karo.. jab tak tum apna kaam highlight nahi kar paoge. Tab tak team ka kaam highlight kaise karoge.Sanjay pahle mere se baat nahi karta tha.. ab baat karney laga hai.. wo bhi same phase se gujar raha hai.<br><br>22/07/2018, 06:49Sanjay ke according humko pahle self management se khud ko highlight karna chahiye tab hum baad me people management se apne sath kaam karne walo ke kaamo ko highlight kar sakte hain.Aaj 5 saal se hum self management me fase hain. Kyuki mera dhyan sirf khud ki samasyaon pe hi hai.Jis man ki bechaini se hum struggle kar rahe hain ye duniya ki sabse common problem hai. Aur iska solution bhi sabse common hai.. jaise kachua thori si bhi aapda ka sanket pakar khud ke ango ko apne kawach me samet leta hai vaise hi humko apne sabhi indriyo ko indriya vishayo se khich kar ek jagah ekatra karna hai. Yahi self management hai.<br><br>22/07/2018, 12:56Kal 21 july ko subah me hum sadhu chacha ke ghar pe pakora pahuchane gaye. Waha chacha se 20 july wale avishwas prastav aur pappu ki jhappi ki baat huyi. Phir hum chacha ko last week ke motihari me Suresh chacha ke pass Chanpatia walo ke aaney ki baat ka jikra kiye. Sadhu chacha phone pe Suresh chacha se baat kiye. Sadhu chacha Suresh chacha ko samjhaye ki agar wo sab na aawa ta toh u sab ke call mat kara. Phir uske baad chacha nahaney jane lage.<br><br><br><br>Ghar aa ke papa ko chachi ke bimar hone, chacha ke gym se aaney, payal ke aalo chilney, chacha ka chai bana ke pilaney, chacha ka suresh chacha se baat karney aur unko apne side se further baat na karney ki baat kah diye.<br><br><br><br>Maa se bhitar wale room me baat kiye. Maa ko bol diye ki humko shaadi nahi karna. Maa boli ki ab aisi ladki nahi milegi. Tum aate hi uss par vishwas kar liye.. isiliye dhokha khaye.&nbsp;<br><br><br><br>Aaj subah 22 july ko hum gym nahi gaye. Piche wale gate ke pass gutkha khate aur mobile chalate papa dekh liye. Aa ke maa ko bataye honge. Maa humse puchi aur humko lajwane ke liye hume boli ki dukandar bhi dono baap beta ko pahchanta hoga. Hum maa ko bole ki humara toh koi level nahi hai phir bhi hum vahi galati kyu karte hain jo sirf papa me hai. Papa ko irne pe bhi sharam nahi aati??Maa koi jawab nahi di aur uth ke chali gayiKal Kirti ne gm issue pe reply kiya tha usss pe bhi mann vichlit tha<br><br>22/07/2018, 14:51Narendra ke pass Vinod Fufa call kiye they. Kal unki Suresh chacha se baat huyi. Wo Chanpatia wale na fufa ke pass aaye na Suresh chacha ke pass. Ab unko koi contact nahi karna hai.<br><br><br><br>Maa boli ki 13 August ko unse koi baat nahi karna hai. Hum man me sochey ki agar hum bolenge ki papa ko unse baat karney se rok lijiye bas.. par kuch nahi kahe... bolney ka koi fayda nahi.. wo papa ka hi paksh lenge aur fir ladai hi hogi jiska paap mere sir par hi madha jayega... hum khud se pidit hain.. papa ki batien humko acchi nahi lagti.. maa rimi narendra ka dukh aur mere prati hi gussa hai..<br><br><br><br>Khud ko hi sambhalna hoga...<br><br>23/07/2018, 03:49??? ?????? ???? ????? ???? ???? ???? ??? ???????<br><br><br><br><br><br>?? ???? ??? ????? ???? ?? ???? ??? ??? ?? ?????? ?? ????? ?? ??? ????? ???? ??????? ???? ??? ???? ???? ???? ?????? ??? ??? ???? ??? ????? ??? ??? ???? ??? ??? ?? ?? ????? ???? ??? ?? ??? ?? ??? ?? ????? ?? ??? ??? ?? ??? ???? ?? ????? ???? ?? ????&nbsp;<br><br><br><br>??? ?? ??? ????? ? ??? ??? ?? ??<br><br>?? ???? ??<br><br>?? ?? ??? ??? ?? ???? ???? ???? ?????? ????? ?? review ?? ???? ??? ???? ???? ???? ???? ????? ???? points add ?? ???? ????? ?? ????? ??? ???? ?? ?????? ??? ??? ???<br><br>23/07/2018, 05:53Ciggerate pike gutkha kha ke sote hain toh subah urh ke sir bhari lagta hai.<br><br><br><br>Kal laung muh me rakh ke soye they. Aaj subah acchi ninni aayi thi. Man bhi halka lag raha hai. Sirf (parantu) abhi gutkha khaney ki iksha khatam nahi huyi hai. Par kal raat me laung khaney se kam jarur huyi hai.Laung khaney se aaj man halka lag raha hai<br><br>26/07/2018, 05:59Sanjay se Tuesday 24 july ko shaam me baat huyi thi.. for my personal issue.&nbsp;<br><br><br><br>Iss week me har din 150 ka gutkha cig aur night me MB aur sote samay laung aur subah me less tension aur time par gym<br><br>27/07/2018, 08:19Wednesday 25 july ko hum office gaye they. Din normal raha... shaam ko laung khakar soye.26 july ko baarish ho rahi thi. Hum gym gaye. Gym se aaney me bhig gaye. Hum 2 gutkha kharide. Din me khaye. Office nahi gaye. Din me Ramayan dekhe YouTube par. Shaam ko khana khaye. Aur 12 baje so gaye. Sote samay kal 3 din baad khaini khaye. 27 july ko subah khaini ke effect se piche sir me dard ho raha tha. Man me bechaini badh gayi thi. Dudh laney ke bahaney gutkha kharid ke laye. 45 rs ka. Man me dwandwa chalta hai.<br><br>28/07/2018, 06:45Pichle kuch weeks se hum Ramayana Mahabharata Gita updesh sun rahe hain. Mera uddeshya hai ki hum samjhey ki kon se karma karney se mera aur mere pariwar ka kalyan hoga.<br><br>28/07/2018, 12:33Mere dada ka na swargiya shri Chandu sah<br><br>Unke papa ka naam swargiya shri vikram sah<br><br>Unke papa ka naam swargiya shri Narayan Sah<br><br>Unke papa ka naam swargiya shri bodhu sah<br><br>29/07/2018, 04:33Dada august 13 ya 5 2008 jis din bhi mangalwar tha usi din diwangat huye they.Kal 28 july ko humko achanak uth k bhagwat gita padhney ka mann kiya. Par mujhey bhagwat gita me bhagwan dwara apne vishay me kahi baate atishyokti lagti hain. Humko lagta hai ki bhgwan abhimaan me atishyokti karte hain. Mere anusar bhgwan bhi kahi na kahi se toh utpann huye hi hoge. Wo bhi kisi ki santan hain. Wo apne mata pita ki jagah khud ko hi kyu bada kahte hain.Maa bhagwati sabse ucch hainAaj subah uthte huye mujhey ek sapna aaya ki mere kandhe par bojh hai aur mai upar ek qutub minar jaisi imarat par chadhna chahta hu. Par 2 sidhi chadhney par mai us imarat se ek ko bojh ke sath utarte huye dekhta hu. Hum bojh ke sath hai. Hum usko niche kaise jane de aur khud upar kaise jaye. Humko uchai se dar bhi lagta hai. AB KYA KARU ... YAHI SOCHTE MERI NIND KHUL GAYI.<br><br>29/07/2018, 13:47Aaj 7 baje gym ke liye nikle. 8 baje le gym kiye aur phir achanak chacha ke pass jane ka mann kiya. Thora dare phir sochey ki aaj chacha ke pass ja kar itna puchenge ki humara jameen kab tak hoga.&nbsp;<br><br><br><br>Chacha ke ghar gaye toh chacha so rahe they. Hum wait karney lage ki chacha uthey. Chachi aayi toh humko dekh ke chacha ko uthai. Chachi me koi shakti jarur hai jisse wo samajh gayi ki hum yaha kya puchney aaye hain. Chachi ne chacha se pucha toh chacha ne bataya ki iss mahiney me mera jameen ho jayega. Sun ke santosh hua. 9:30 am par hum vaha se nikle.&nbsp;<br><br><br><br>Phir ghar aaye toh maa ko laga ki hum gym nahi gaye they. Maa bura bhala boli toh hum maa se jhagra kiye. Phir shaving ke liye nikal gaye. Pahle gutkha kharide phir chola bhatura khaye. Phir shaving kara ke ghar aaye. Phir naha ke puja kiye. Bhagwat Gita padhe. Khana khaye. Narendra aaya hai. Hum phir so gaye.&nbsp;<br><br><br><br>Aditya aaya chacha ke sath aur papa ki chacha se baat huyi. Phir hum gutkha kha ke hugte huye saari baat likhey.<br><br>29/07/2018, 21:013 baje maruti Showroom Neelam chowk jake narendra ke sath car ko bechney ke liye baat karney gaye.&nbsp;<br><br><br><br>Aake 3 pm se 6pm gita ka audio suney.&nbsp;<br><br><br><br>Shaam ko Narendra se chhat par baat kiye. Narendra sawal kiya ki tum kaisa life jina chahte ho. Tum apne life me aage kya karna chahte ho ya jindgi bhar ghumatu bhotia ka jindgi jina chahte ho.<br><br><br><br>Hum narendra se gussa me baat kiye. Usko shant rahne ko bol ke usko bechain hi kiye.<br><br><br><br>Phir niche aa ke room me usse baat kiye ki apna business ya teaching ka kaam karna chahte hain. Papa ka jiddipan ka shikayat kiye. Papa ke chije ya toh ekdum sahi hota hai ya ekdum galat. Bagal me dadaji shuru me papa ki bat sunte they. Chacha ke ghar pakora pada raha. Ye beman ka mel humko acha nahi lagta hai.<br><br>01/08/2018, 06:00Monday subah 30 july ko 3:30am par uth kar ek baar shrimad bhagwat gita ka shravan kiye. Gym gaye. 10 baje office nikle. Mann pichle sal 31 july 2017 ko Accenture choney ki ghatna se dukhi tha. Ghar pe Maruti truevalue wala aaya tha. Wo 2.95 lac ka value lagaya. Office me Kedar aaye. Unko dekh ke mann aur vichlit ho raha tha. Shaam ko Kedar party ke liye le jana chahte they. Humko janey ka man nahi&nbsp; tha. Hum ye baat Waqar se kah diye. Yogesh ki baat ki Prem ki 9.30 pm tak dependency hai ka sahara liye.<br><br><br><br>Mangalwar 31 july ko salary aayi. Meri gadi bik gayi&nbsp; 2.5 lac sbi account me aa gaya. Man 31 july 17 se khinn tha. Sanjay ke bagal me baithey. Sheikh ke room me chataye. Raat me ghar aaney me bhig gaye.Kal mb bhi kiya. Monday Tuesday ko cig khub piye.<br><br>01/08/2018, 23:11Aaj Wednesday 1 August ko saare GM jobs chal gaye. Office party me jam ke paneer khaye. 2-3 cig piye.<br><br>07/08/2018, 08:52Aaj 4-5 din se ramayan padh rahe hain. Acha lagta hai. Aur apni badkismati ko rote hain ki jab hum college me akele they, jab hum patna me akele they, jab hum delhi me engineering ke baad aaye they .. tab bajay rone ke hum ramayan Mahabharat padhe hote. Ho sakta hai isse mere life me koi chamatkar nahi hota par hum buri sangati aur bure vichar se bach jate. Mere me ek gunn hai ki hum one night study se bhi average se acha result dete hain. Toh humko santosh karna chahiye tha ki hum apni life me bahut bada kuch nahi kar payenge par kuch acha jarur kar lenge.<br><br><br><br>Phir vichar aata hai ki ye sab hona hi tha.&nbsp;<br><br><br><br>Ab present ko sudharna hai. Routine follow karenge.<br><br>14/08/2018, 06:217 August se 12 August tak lagbhag padhai kiye apna project pe kaam kiyeRamcharit manas padhte huye aisa laga ki Maa Saraswati ji ne kaha ki MERE LIFE KA EKMATRA PROBLEM MERE MANN KI BECHAINI HAI. baaki issues isi se related hain.13 August ko divorce case ki hearing thi. Din court me nikal gaya. Waha meri gawahi huyi. Affidavit par sign kiye.<br><br><br><br>Wakeel se puchey ki 2 mahiney par date kyu aaya. Usney kaha ki tezi se hi kaam ho raha hai.Ab ghar me papa ki aur pados se kisi ki gawahi karani hai.Dadaji se baat kiye. Wo Goyal uncle aur apne Bipin uncle se bhi baat karney ko kahe.Subah me hanuman ji ke mandir gaye the 13 August ko. Waha hanuman ji ke pass gyan mila ki meri kisi samasya ka samadhan aaj kal ya parso me nahi hoga. Ek saal baad hoga. Toh aaj tension kyu le?<br><br>15/08/2018, 06:37Meri current routine me hain<br><br>Gutkha<br><br>Worries<br><br>Cig<br><br>Mb<br><br>Laptop<br><br>Papa ki bateinKal 14 August ko wakeel se mile . Wakeel ne papa aur chacha ka naam aur address liya. 13 August ko meri divorce case hearing ke baad hum wakeel se mile they. Wo kah raha tha ki case tezi me hi badha rahe hain. Meri written me gawahi affidavit kara di. Ab ek ghar se aur ek pados se gawahi karani hai. 14 August ko Rana neta bhi mulakat huyi wakeel ke pass.<br><br><br><br>Dadaji se baat kiye gawahi ke liye. Unhoney chacha se baat karne ko kaha. Goyal uncle se bhi baat karne ko bhi kaha.&nbsp;<br><br><br><br>Chacha se baat kiye. Chacha taiyar ho gaye gawahi ke liye.<br><br>16/08/2018, 05:5015 August ko maa raat me samjha rahi thi ki gurkha chor do. Hum maa ko bole ki pahle papa ka churwao.<br><br><br><br>Hum ko malum hai papa nahi chorenge. Hum se bhi gutkha nahi chhut raha hai. Humse chinta karna bhi nahi chhut raha hai. Humse apna routine bhi follow nahi ho raha hai.<br><br>17/08/2018, 06:23Mere me sahanshakti nahi haiMERe me routine follow nahi karney ka dosh hai.Raat me hanuman chalisa padh ke nahi sote hainRaat me hum jyada dukhi ho jate hainKal 16 August 2018 ko atal bihari vajpyi ka nidhan ho gayaRoz ki tarah subah me aaj bhi bechai feel kar rahe hain.Apne gutkha khaney ki aadat par afsos kar rahe hain. Raat me hanuman chalusa nahi padhe.<br><br>18/08/2018, 22:37Three more carreer options from my choice.&nbsp;<br><br>DevOps<br><br>Python&nbsp;<br><br>Data Science<br><br>19/08/2018, 18:16When i read any book or watch any tutorial video.. firstly i feel interest and then greedily i continue to study or watch. But after some time i feel i am being distracted from study. Basically i should pause there. I need some mechanism or process or application to maintain the current state of study. Also i need some mechanism to store summary in same place.<br><br><br><br>This is requirement from very long time. I should work upon this need.Jab hum office jate hain toh gutkha cig consume karte hain hi.. isse shaam ko pet me jalan hoti haiThree more carreer options from my choice.&nbsp;<br><br>DevOps<br><br>Python&nbsp;<br><br>Data Science<br><br>Data Security<br><br>20/08/2018, 07:3619 August ko subah me office gaye. 8 am se morning shift thi. Office me koi khas kaam nahi kiye. Ek do program download kar ke run kiye. Shaam ko 7 baje ghar pe aaye.&nbsp;<br><br><br><br>Raat me maa ke room me soye. AC nahi chala tha. Hum confusion me nahi chalaye ki rimi ka tabiyat thik nahi hai.&nbsp;<br><br><br><br>Sabere maa se pata chala ki papa ne humko Shankar chacha chachi se baat karney ko kaha hai.<br><br><br><br>Shankar chachi Chanpatia wali ki maa ke sath VinodFUFA fufa ke ghar gayi thi.<br><br><br><br>Chachi se baat huyi. Chachi sab sunne ke baad boli ki faisla karwake paisa de ke alag ho jao.&nbsp;<br><br><br><br>Chacha se baat huyi. Chacha bole ki jhagra hone par log jhuth sach bolta hai. Jab chachi gayi thi toh chacha nahi they. Par jo bola usko proof karna hota hai.<br><br><br><br>Hum chacha ki baat se pareshan ho gaye ki chacha humko bole ki unko. Maa rimi se jhagra kiye. Do baar vaishno devi arti band kar diye. Phir gym ke liye nikle.<br><br><br><br>Kaise faisla hoga humara. Kitna hugna hoga. Kab faisla hoga.<br><br>20/08/2018, 13:20Gym to nahi gaye par Narendra se baat kiye. Wo bola ki apna baat kahney me mat hichko. Dusre ko galat sabit karney ke liye khud ko sahi sabit karna hi hoga.<br><br><br><br>Man bechain hai. Pata nahi meri life hum kab se galatiya kar rahe hain. Ab jine ki iksha khatam ho gayi hai.<br><br>22/08/2018, 16:16I was thinking word search game tells how much my mind is active but in reality now I felt it measures how much my mind is in tense situation at that time.&nbsp;<br><br><br><br>Today i was in immense tension and i tried the game and i reached second position.<br><br><br><br>How to get rid from tense situation. This is the biggest question for my current life.Yaha aa ke mainey galati ki. Ye log Concentrix me mujhey fresher jaisa treat kar rahe hain. Mujhey yaha se nikal jana chahiye.<br><br>26/08/2018, 12:39www.deconstructingexcellence.com/the-48-laws-of-power-summary/<br><br>27/08/2018, 08:51Shaniwar ko chacha ke ghar gaye they pakora dene. Tab chacha se baat huyi thi ki wo motihari nahi jana chahte hain retirement ke baad. Wo yahi apney dosto ke sath rahna chahte hain. Unko apne baccho pe vishwas nahi hai ki bachhe budhapa me unke sath rahenge.<br><br><br><br>Chacha bahut sare akele guardian ke bare me bata rahe they jo faridabad me hi akele rahte hain.&nbsp;<br><br><br><br>Chacha retirement ke baad Motihari nahi jana chahte kyuki unke anusar waha log unko bahar se bahut paisa kama ke aaya huya samjhenge aur paise mangenge. Paisa dene ya nahi dene dono me log bura manenge. Paisa dene ke baad vapas mangney par log muh fulayenge. Nahi dene par muh bhari karenge.<br><br><br><br>Hum bole paise mat dijiye. Jisme aapko tension na ho wo kaam kijiye. Tab chacha bole ki apni kshamta ke anusar agar kisi ne 2 lakh mange hain toh 20 hazar deke , jitna de ke bhul sakte hain, bhul jayenge.<br><br><br><br>Chacha humko samjha rahe they ki hum duniya nahi dekhe hain. Wo bahut sare swarthi bete aur lachar guardian ka example de rahe they.<br><br><br><br>Chacha ke ek renter retirement ke baad ek jameen kharidna chahte they. Chacha ne suggest kiya ki apne bete se puch lijiye.&nbsp; Bete ne chacha ke renter se puch liya ki apka retirement me mila paisa kya hua. Chacha ke renter ne paise karz chukane aur beti ki shaadi me kharch kar diya tha. As result chacha ke renter ne jameen kharidna chor diya.<br><br><br><br>Hum chacha ko bole ki apna adhikar guardian ko nahi chorna chahiye.<br><br><br><br>Chacha ko hum Chanpatia wali ke maa aur mausi ke Vinod fufa ke pass jane aur mere aur Chanpatia wali ke akele ghar pe rahne ke uske proposal ka bataye. Chacha ne iss baat ka virodh kiya.<br><br><br><br>Chacha ko hum Chanpatia wali ke February2016 me mere ghar pe bhi alag rahne ke liye bawal kiya tha. Us din usney jo apna bag pack kiya wo aaj tak vaise hi hai.Shaniwar ko resolve jiffy ka successful&nbsp; deployment kiya.<br><br>28/08/2018, 06:30Humko shuru se pet ki problem thi. Ye bhi reason hai ki hum khaini gutkha cig try kiye. Pet saaf karney ke liye<br><br>28/08/2018, 11:46Savere me office nikalte samay vakeel se baat kiye. Wo document ke liye next week me aaney ko kah raha thaPahle wakeel ne next week of 13th August me document dene ko kaha tha. Ab sala mukar raha hai. Kabhi kabhi iss wakeel pe shakk hota hai ki akhir wo kya karna chahta hai. Kahi mujhey fasa to nahi raha .. ya kahi dusri party se toh nahi mila hua... par kya kare koi option nahi hai..&nbsp;<br><br><br><br>Ab wakeel se iss week Saturday ko face to face ja ke milenge<br><br>01/09/2018, 10:1131 August ko subah me jaanbujh kar mainey Anshul ko bataya ki kal 1 September ko hum interview dene ja rahe hain. Uss samay us kamini ne kaha ki wo manage kar legi par phir thori der me boli ki uska movie ka plan hai. Kirti chupp thi. Phir Harish ka mail aa gaya ki kal ka deployment kaun karega. Hum mail par likh diye ki hum available nahi hain. Thori der me Harish ne call karke 7:30 pm pe deployment karne ko kaha. Uske pahle yogesh se baat huyi.&nbsp;<br><br><br><br>Anshul se kuch bhi batana safe nahi hai.<br><br>02/09/2018, 07:101 August ko hum 7 baje uthey. Interview dene jana tha but hum khud ko prepared nahi paye aur interview dene janey ki himmat nahi kar paye. Hum gutkha khaye 100 rs ka. Din me frustrated rahe. HR ka call pe call aaya par hum nahi uthaye.&nbsp;<br><br><br><br>Hum internally himmat haar chuke hain.<br><br><br><br>Hum shaam ko vakeel ke pass gaye. Vakeel abhi milney se mana kar diya. Usney document ke liye agle week aaney ko kaha.<br><br>02/09/2018, 16:34Subah me jab hum uthey toh pata chala Rimjhim chachi se baat ki.Chachi kal chahti thi ki hum unke liye kuch khana leke aaye. Hum samajh nahi paye.<br><br><br><br>Papa iske liye humko bahut daate aur gaali diye. Hum bhi papa se jhagra kiye.<br><br><br><br>Dopahar me hum suney ki aaj jammen ka naapi hua. Jameen kuch kam hai. Agle sunday fir kuch naapi hoga. Papa fir frustrate they.<br><br>05/09/2018, 04:53Pichle 10-15 din se mera pet sahi nahi hai. Pet me jalan rahti hai. Man bhari rahta hai.Kal work from home kiye. Raat me Yogesh ne WhatsApp karke kaha ki hum gridx ko mail nahi kiye hain.Shaam ko hum wakeel ko call kiye they. Wo phir se agle week document ke aane ko tarka diya. Kahta hai ki wo busy hai. Lagta hai ki mere case ko seriously nahi le raha ya mujhey dhokha de raha hai.<br><br>05/09/2018, 08:32Mainey kal pure din work from home kiya. Kal hum Brian Tracy ka video 80-20 rule suney.&nbsp;<br><br><br><br>Iske anusar hum sabhi log sara samay chote aur kam meaningful kamo ke temptation me uljhey rahte hain. Jab ki humey chahiye ki hum apne kamo ki suchi banaye aur phir usme se jo kaam sabse jaruri lage usi ko lagatar har samay kare. Phir us kaam ke ho janey par dusra important kaam chuney aur usko kare.&nbsp;<br><br><br><br>80 percent productivity 20 percent important kaamo ko karney se aati hai.<br><br>05/09/2018, 11:21Hum itna sab sunte aur padhte hain.. Ramayana bhagwat gita.. phir bhi mera man ashant kyu rahta hai?<br><br>07/09/2018, 07:576 aug ko hum subah me training kiye. Summarize kiye behavior competency framework ko. Kirti Sanjay se discuss bhi kiye . Raat me&nbsp; BCF ko topic me dalney ko soche they but daal nahi paye.&nbsp;<br><br><br><br>Topic revision me hum shuru se procrastination karta hu.<br><br><br><br>As usual bahut sare issues mail kiye gaye but hum kuch khas nahi kar paye<br><br>09/09/2018, 06:58Aaj subah uthte huye humko sapna aaya ki hum apne purane panch mandir wale ghar me hain. Achanak Chanpatia wali waha dikhi. Thori der baad hum papa aur maa bichla upar baithey they tab wah bhi wahi aa gayi. Hum usse shikayat karne lage aur wo chupchap sun rahi thi aur papa maa meri baat kaat rahe they isiliye unko hum mare bhi. Par wo ladki kuch bhi nahi bol rahi thi. Isi bich meri nind khul gayi.&nbsp;<br><br><br><br>Uth ke afsos hua ki hum kya ye sapna dekh rahe they?<br><br><br><br><br><br>Aaj meri life ke kuch questions<br><br>1. Wakeel kagaz kyu nahi de raha jisko papa chacha se sign karana hai&nbsp;<br><br>2. Hum Yogesh Somen Rekha Harish ke sath kaam nahi karna chahte phir hum waha se nikal kyu nahi pa rahe.<br><br>3. Hum khud ko sambhal kyu nahi pa rahe. Hum gytkha chinta ktu nahi chhor pa rahe. Hum apna tay routine follow kyu nahi kar pa rahe.<br><br>09/09/2018, 20:16<br><br>14/09/2018, 07:3310 sep Monday ko subah se mera man dukhi tha. Humko lag raha tha ki hum jiyenge nahi. Hum vaishno devi jane ka sochey. Par jaye kaise.<br><br><br><br>Phir hum ghar se kapre aur mobile charger leke aur 2500 rs aur ATM card le ke nikle. Ghar pe bole office ja rahe hain. Par railway station gaye. Waha delhi ki emu train nahi dikhi. Metro se kashmiri gate gaye. Waha se katra ki HRSTC ki bus pakre.&nbsp;<br><br><br><br>Phir 3am 11 sep ko katra pahuche. 5am par token kataye. Shaam 7 pm 11Sep ko vapas karra aa gaye. Raat me 10 pm par bus pakre.<br><br><br><br>12 Sep ko 2 pm par vapas ghar aa gaye.<br><br><br><br>Vaishno devi jane se mann halka hua. Self realization hua ki meri life ki problems ka root cause hum khud hi hain. Agar hum apna aadat aur routine sudhar le toh mere life ki problem kam ho jayegi.yatra ke liye ghar aur office me jhuth bole. Ghar pe ki late night work karna hai. Office me ki emergency leave for my marital issue.<br><br>17/09/2018, 05:55Shaniwar 15 sep ko wakeel ko call kiye they usney humko Sunday 16 Sep ko subah aaney ko kaha.&nbsp;<br><br><br><br>Sunday subah uske pass gaye tab wakeel ne dubara mere se papa aur chacha ke details liye. Pahle wale usse gum ho gaye they. Wakeel se mainey pucha ki 23 march ke baad ka agar pucha jayega toh hum kya batayenge. Wakeel iss baat ko nahi samajh pa raha tha .. mere se 3 baar pucha. Phir kaha ki tumko bolna hai ki humse koi contact nahi kiya h inhoney. Wakeel ko bataya ki chacha tour par rahte hain. Aap jaldi kagaz banwa ke sign kara lijiye.&nbsp;<br><br><br><br>Wakeel ne shaam ko steno se kagaz banwaney ko kaha. Shaam ko call kiye toh bola ki steno nahi aaya. Usney kaha ki wo khud call karega. Ab usko call karega.Subah 16 sep ko papa ne kaha ki tum apna online kaam lene wale ko try karoHumko shak h ki mera wakeel humko double cross kar raha hai.<br><br>25/09/2018, 12:25|| #??????_??_?????# ||<br><br>********************<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbspbr><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ???? ???? ?? ??, ?? ??? ???, ????? ?? ??? ???? ??? ?? ?? ? ?? ???? ??? ???? ??, ? ??? ????? ?? ????, ? ???? ??? ?????? ??, ?? ?? ???? ????? ??, ???? ?????? ??? ?? ????? ?? ??, ?? ?? ???????? ????, ???? ???? ?? ???:&nbsp; ????! ??? ????? ????? ???? ? ?? ???? ?? ????? ??, ? ???? ?? ???? ??? ?? ????? ????? ???? ??, ?? ?? ??? ?????? ??? ?? ?? ?? ??? ??? ?? ???? ??? ?? ??? ??? ?????? ??? ???, ???? ???? ????? ??? ?? ????? ???? ???? ???? ???? ??????? ??? ?? ???? ??? ?? ???????? ?? ???:&nbsp; ??????? ??? ???? ??, ???? ???? ????? ?? ??????? ?? ???????? ???? ???? ??, ?? ?? ???? ???? ?? ??, ????? ?? ????? ?? ???????? ????-???? ????? ?? ?? ?? ????? ?? ??, ?? ?? ??? ?????????, ?? ?? ?? ???? ???? ?? ???? ????? ?? ???????? ??? ? ???? ???? ?? ?????? ???? ?? ??? ?? ??? ?? ???? ??? ?? ???? ????? ???, ??? ????, ???? ???-??? ????? ???? ?? ???????? ?? ???:&nbsp; ???? ?????? ????? ???? ????? ?????? ?? ???? ??? ??? ????? ?????? ??? ???? ????? ?? ???? ????, ????? ???? ????? ?? ???: ???? ????? ????, ?? ????? ?? ?? ?????? ?????? ?????? ??? ? ?? ???????<br><br><br><br>????? ?? ???:&nbsp; ?????, ????? ??? ???? ???? ????? ???? ??? ??? ????<br><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ?? ?????? ?? ???:&nbsp; ? ?? ??? ???, ? ??? ????, ???? ???-?????? ?? ?? ???? ???? ????? ?? ?? ????, ????? ?? ????????, ?? ????? ????? ?? ?? ?? ??????? ?? ?? ???? ??, ?? ?? ??? ?????? ??? ??? ??????? ?? ????? ????? ?? ??? ?? ???? ?? ??? ?? ???????? ?? ???, ????? ?? ??? ??, ?? ?? ?? ???? ??? ????? ?? ??? ???? ???? ????? ???? ???? ????? ??? ??????? ??? ???? ?? ??????, ???? ????? ????!<br><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ????? ?? ???: ?????, ??????? ???? ???? ?????? ??? ??? ????? ?????? ?? ?? ?????? ???? ???? ??? ??? ?? ???? ???? ??? ?? ?? ?? ??? ? ???????, ?? ?? ???? ???? ?????, ????? ?? ?????, ???? ?? ????, ?????? ??? ???????? ????? ????? ????? ????????? ????, ???? ???? ??? ???? ?? ????? ??? ???? ?? ????? ????? ???? ???, ??? ?? ??????? ???? ???, ?? ??? ?? ?? ????, ???? ?? ???? ??? ????, ????? ??? ???? ???? ?? ???? ???? ??, ???? ???? ?????<br><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ?? ????? ??? ?? ???? ???? ??? ??? ???? ??? ?? ?? ?? ??? ???, ?? ?? ???????? ???? ?? ?? ???? ??, ?? ?? ???? ????? ??, ???? ?????? ??, ???? ??????? ??, ?? ?? ?? ?? ???? ?? ????? ???, ?? ? ???? ????, ?? ???? ??? ? ????, ?? ??? ?? ??? ?? ??? ?? ????, ?? ???? ??????? ?? ?? ?? ?? ??? ??? ???? ??? ?????? ??????, ?????? ?? ?? ?? ????&nbsp;<br><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbspbr><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;?? ???? ?? ????, ???? ???? ????, ?? ???, ?? ???? ????, ?? ?? ??? ????? ??? ???? ????? ????? ?? ????? ??? ??? ??? ?? ???? ???: ????, ????? ??? ???? ????-???? ??? ???? ???? ?????? ?? ????-???? ??? ???? ??? ?? ???, ????-???? ????? ???? ?? ????? ?? ????? ?? ??, ??????? ?? ????? ?? ???, ?? ??? ?? ???? ?? ??? ??? ?? ???? ???? ????? ??????? ??, ???? ??? ????? ???? ??, ??? ????? ???? ??, ???? ??? ?? ???? ??, ?? ?????? ???? ?? ?????? ????? ?? ????? ???<br><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ????? ?? ???: ?????, ??? ??? ?? ??? ??????? ???? ???? ??, ?? ?? ?? ???? ???? ?? ????? ????? ?? ???? ??? ??? ????? ???, ???? ???????? ????? ???? ??? ?? ??? ???? ?? ???? ??? ??? ????? ???, ???? ?? ?? ???????? ????? ??, ?? ????? ??, ???????? ???? ??? ??? ??? ?? ????? ???? ??? ?? ???? ???? ???? ????-???? ????? ?????, ????-???? ?????, ??????? ????? ???? ??? ??????? ??? ??? ????? ????? ???? ?? ??? ???????? ???? ??? ??? ??????, ??? ???? ?? ???? ???? ???? ???&nbsp;<br><br>************************<br><br>08/10/2018, 14:02?? ???? ???? ?? ??? ??? ????? ??| ?? ???? ?? ???? ?? ?? ????? ?? ??? ?? ?? ?? ??| ???? ?? ?????????? ??? ????? ?? ?????| ???? ???? ?? ???? ?????. ?? ? ?/? ????? ??? ?? ???? ???? ?? behave ?? ??? ???. ?? ???? ??? ?? ?? ?? ??? ?? ??? ?? ???? ??? ??. ??? ?? ??? ??? ???? ??? ?? ??? ???? ??. ???? ??? ?? ???? ???????? ????? ???? ???? ??. ??? ??? ?? ??? ??? ???? ????. ?? ???? ?? ??? ??? ?? ?? ??? ???? ??? ???? ???? ??? ?????? divorce case ???? ???. ???? ?? ?????? ???? ????? ?????? ??.?? ????? ?? ?? ?????? ???? ?? ?????????? ?? ??.<br><br>09/10/2018, 07:46Wakeel ne taaid ko 1200 rs dilaye.Subah 5-6 ke bich hum let ke ramcharit manas sun rahe they. Tabhi humko sapna aaya ki hum apne purane panch mandir wale ghar me hain aur koi palalwan sa aadmi pahle dwar pe aaya phir ghar me ghusney laga. Hum ko atpata laga us aadmi ka nature toh hum uska pair pakar ke rokney lage. Tab wo ruka nahi aur mere rokney ko ignore kar diya. Isi bich meri nind khul gayi.<br><br><br><br>Iss sapney se mujhey mera ghar ke prati duty yaad aa gaya ki hum ghar ke beta haun. Meri duty ghar ko bahri khatre se bachana hai. Iske liye humko khud ko mazboot aur shaktishali banana hoga.<br><br>13/10/2018, 08:16Kal 12 October ko somen ne call karke kaha ki wo mujhey last 1 month de rahe hain. Performance improve karo ya nikale jaoge.<br><br><br><br>Jyada time lagta hai to do.&nbsp;<br><br><br><br>Yogesh se baad me baat kiye.<br><br>1. Dusro ka kaam apna kaam chhorkar kar rahe ho iska matlab tumhare pass time hai.<br><br>2. Tumhare kaam pending hain.<br><br>3. Jab koi follow up ke baad tumhara kaam nahi kar raha toh kaam assign karney wale ko inform karo.Sandeep singh se hum ye saari baat boleSandeep gutur gutur sb suna<br><br>09/11/2018, 07:02Kal 09 nov ko hum 2 cig piye. Naresh se aur manoj se baat kiye. Manoj ke samney yogesh Harish somen waqar ki burai kiye. Kahe ki ek side humko waqar jaisa banane ko kahte hain aur dusri taraf mazdooro wale kaam dete hain. L1 activity me involve kar dete hain.&nbsp;<br><br><br><br>2 cig aur 6 rg 3 shikhar.. iske karan raat ko nind nahi aayi.. sabere paikhana saaf se nahi hua.. raat bhar tension raha..&nbsp; laptop me fan error aa raha hai..Agar krodh ko positively use kare toh dand ... lobh ko postively use kare toh aasha.. mad abhimaan ko positively use kare toh atmvishwas..<br><br>15/02/2019, 03:3230 jan 2019 to 14 feb 2019<br><br><br><br>. 14 feb ko dhruv chachi ko unke bhagini Jassi ke pass gajiabad chhorne gaye.. chachi se khub baat huyi.. chachi naval aur suresh chachi ke shikayat ki.. hum lightly baat kah diye ki humre liye sab chachi ek hai.. jo khilayegi wo jyada manti hai...&nbsp;<br><br><br><br>.. 9 feb ko sadhu chachi se baat huyi thi..&nbsp;<br><br><br><br>Papa jo ladka dekhney gaye they wo 14 feb ko humare matter ko issue bana ke mana kar diya..[2/14, 21:13] prem05515: [2/14, 11:50] Home@fbd: Plot No. 132, Krishna Kunj-II, Nandgram (Landmark - Near Double Pani Tanki), Ghaziabad<br><br>[2/14, 12:07] Home@fbd: Metro se Jane ke liye kaha&nbsp; jayeke hoe<br><br><br><br><br><br>Vaishali metro station -&gt; mohan nagar -&gt; new bas adda , near double pani tanki -&gt; sabji mandi -&gt; Krishna Kunj-II, Nandgram<br><br>[2/14, 21:15] prem05515: Dhruv chachi ke bhagini ke sadural.<br><br><br><br>Bhagini ke husband central secretriat me job kare lan.<br><br><br><br>Chachi ke 3 bhai aur chachi sabse choti bahan bari<br><br><br><br>Ye bhagini chachi ke 2nd number bhai ke beti hayi.<br><br>[2/14, 21:59] prem05515: Chachi ki bhagini ka naam Jassi hai<br><br>16/02/2019, 18:14Aaj 16 feb ko subah office se nikle chachi ko lane ke liye... unke bhatiji ke ghar se..<br><br><br><br>Shaam ko 4 baje pahuche..<br><br><br><br>Aaj fir chachi se us ladki aur uski kartoote kahe.. pata nahi chachi mere bare me kya sochti hogi..&nbsp;<br><br><br><br>Maa gussa hai ki hum time manage nahi kiye...&nbsp;<br><br><br><br>Chachi ke bade bhai doctor.. middle wale stono.. chote wale shopkeeper hain..&nbsp;<br><br><br><br>Chachi apne padhne ki baat baar baar batayi...<br><br>17/02/2019, 18:27AAj 17 feb ko 9 am pe uthey. 11 baje puja karke kha rahe they to chachi ko lotus temple jane ka yaad aaya. Maa aur rimi ko bhi taiyar kar li . Metro me apne ek kalka ji le pass rahne wale bhai ko call ki. Hum tab hi samajh gaye.. ki inke ghar me chachi ki hi chalti hai.. kalka mandir pe ye ladies line me ghus gayi.. full bekahli chachi hai.. humko chachi ki mithi boli katne lagi hai.. hum chachi ko kahe ki apne bhai ke sath aap jaiye.. metro se ballabh garh aa jaiyega..<br><br>18/02/2019, 03:40Aaj 18 feb ko papa maa rimi aur chachi narendra ke pass ja rahe hain.. waha pahuch kar papa phir surely jaipur jayenge..&nbsp;<br><br><br><br>Chachi ke aaney se lekar abhi tak 10-15 hazar toot gaye honge.. aage 5-10 hazar aur tootenge..&nbsp;<br><br><br><br>Ghar aake chachi ke janey ke baad phir papa hookenge...&nbsp;<br><br><br><br>Sara raita phaila ke baad me sala hookta hai toh mann karta hai maar dalu sale ko..Humse paise bacha ke logo par lootata hai.. meri aankh nikalti hai... ye chachi laaz me pada ke humko thagne aur jhagra bone ke liye hi bheji gayi hai.. papa paise ke ghamand me kharcha kiye ja rahe hain....<br><br>18/02/2019, 07:59Kal chachi ka manchalapan dekh kar samajh aa gaya ki ye bhi usi ladki ki tarah hain.. inka koi dur ka bhai aaya to usse milne ke liye metro pe intezar kara di.&nbsp; Bhai aaya toh vahi kud kud ke jis par baithey they usi par kudne lagi.&nbsp;<br><br><br><br>Duniya ki sari aurate chachi aur ragini ki tarah hi hoti hain.. kewal bal se hi unko vas kiya ja sakta hai.. sab tab tak khush rahti hain jab tak hum aukat se jyada kharcha kare ya apne aukat se jyada unki badtamiziyan sahe .. virodh karte hi ye kupit ho jati hain.. mere baap ko muh fad dene ki aadat hai. &nbsp; Aur unke muh fadne ki kimat hum sab ko bhogna padta hai..18 feb ko chachi se subah puchey ki aapka jaipur janey ka bhi plan hai kya.. chachi daat nipor ke boli ki .. ha jo dekhney wala jagah hai wo to dekhenge hi na ...&nbsp;<br><br><br><br>Humare bhi muh se nikla ki.. ha ha ekdum dekh lijiye... sala sab lalachi kutumbi aur muhfaru baap mere hi matthe pe aana tha...Aaney ke baad papa ko 20-25 hazar ka dukh start hoga aur wo fir hookhenge<br><br>19/02/2019, 11:5910 baje kal 18 feb ko jab hum puja kar rahe they tab narendra ka call aya. Usney kaha ki sadhu chacha se baat bhel.. unka suresh chacha se baat bhel rahe.. ladki wala kaha ta ki case close ke liye hum sab ko bail karaye ke hoi..&nbsp;<br><br><br><br>Narendra apne dost ke papa se aur hum wakeel se confirm kaini ki aisa kuch rule na hola.. wakeel bihar me wakeel karne ko kaha.. sadhu chacha suresh ji se baat karne ko kahe..<br><br><br><br>Dophar me wakeel se ja ke mile.. usney kaha ki aisa koi rule nahi hota.. phir bhi waha koi wakeel karo..&nbsp;<br><br><br><br>Suresh ji se hum bhi dopahar me baat kiye.. bole ki u sab mutual wala kagaz nahi lagaya hoga.. isiliye aise kah raha hai..&nbsp; hum suresh ji ko kahe ki shaam ko aapko wakeel se baat kara denge..<br><br><br><br>Sham ko wakeel ne dono documents ka certified copy de diya.. wakeel ki suresh ji se baat kara diye.. wakeel samjhaya ki unko application lagane ko kaho.. agar judge issue karega toh dekha jayega..<br><br><br><br>Suresh ji fir u sab se baat kar ke humko confirm kiye.. ki wo sab 19 feb ko kagaz lagayega..&nbsp;<br><br><br><br>Sadhu chacha ke ghar ja ke ye sab bata diye..Sadhu chacha bhi bol diye ki nishchint raho.. wo sab paisa ke chalte aisa bola ta..&nbsp;<br><br><br><br>Maa rimi ko same chij bata diye..Ab sab Ram ke hawale hai<br><br>20/02/2019, 15:08Aaj subah office aate samay narendra ne bataya ki usko suresh ji call karke kisi admi se wakeel bana ke baat karwa rahe they. Wo us aadmi se kah rahe they ki wo narendra ko bole ki hum log ko bail karana hi padega.&nbsp;<br><br><br><br>Narendra ne unko Amit se baat karaya.<br><br><br><br>Uske baad hum Rajan saurabh mani Amrendra sir Anand sir ko message kiye. Motive Motihari Bettiah me wakeel ka naam janna tha.&nbsp;<br><br><br><br>Saurabh mani 15 min baat karke iss baat par to agree ho gaye ki issue hai aur uss psycho ladki se tumko alag ho jana chahiye.. but wo wakeel ke liye help nahi kiye.Saurabh mani ne suggest kiya ki patna jao wakeel dhundho<br><br>25/02/2019, 08:44?? ??? ??? ?? ?? ??? ?? ?? ??? ?? ??? ????? ???? ???? 5000 ?? ???? ???? ????? ????? ?? ?? ?? ?????? ???? ?? ??? ?? ???? ???? ?????Humko daaru pine ka man hua to instantly plan ban gaya.. le ke bhi aa gaye.&nbsp; Aur pine ke baad agli subah pachtawa hua.&nbsp; Ache kaam agar iss dedication se ho to baat hi kya ho?<br><br>26/02/2019, 07:59AAj 7-8 din ke baad humko acchi nind aayi thi. Hum maa papa ke bina bechain ho jate hain. Although humko papa ki boli pasand nahi.. phir bhi hum akele jyada pareshan ho jate hain.. humko papa maa ke bina nahi raha jata hai..<br><br>26/02/2019, 21:14My observations<br><br>1. Humare bhitar dedication hai par current me uska use hum negative activities perform karne me karte hain. Ek baar man me vichar aaya ki gutkha khana hai daru pina hai.. phir man usi ke hisab se ghum jata hai.. hum khud ko rok nahi pate.. sahi kaam karne ke pahle hum 10 baar sochte hain..hum utney bure nahi par mera man humko darata hai.. man hi mera sabse bada dushman hai.. humko apni sadgati ke liye man ko kabu karna hai.Mere liye kisi se baat karney ka matlab hai.. hum bolte hai aur log sunte hain aur maze lete hain.. koi suggestions nahi deta.. log apne man ke hisab se points dhundhte hain aur apne friend circle me discuss karte honge.<br><br>03/04/2019, 21:32Aaj 3 April 2019 ko hum sab ( papa , maa , rimi, Narendra, sadhu chachi , sadhu chacha ) ladki dekhne birla mandir me gaadi book karke gaye. Vaha Shrilal chacha bhi aaye they.&nbsp;<br><br><br><br>Vaha papa ko ladki pasand ho gayi. Mere se kuch puchney ko kaha gaya. Hum ladki ki maa ko bulaye. Uski maa ko hum bole ki hum maa papa ke sath hi rahenge. Agar ye bihar jayenge to hum bhi chale jayenge.&nbsp;<br><br><br><br>Ladki ki maa ne mere se sawal kiya ki hum ladki ko khush rakhenge ? Hum jawab diye ki taali ek hath se nahi bajti. Chachi ne mere jawab ko samjha ke bol diya.&nbsp;<br><br><br><br>Phir ladki se meri baat karayi gayi. Ladki janana chahti thi ki wo Ragini kyu chhor ke gayi?<br><br><br><br>Ladki padhna chahti hai. Hum correspondence course ka suggestion kiye.<br><br><br><br>Aage Ram ki iksha.<br><br>04/04/2019, 07:57Meri beti ko khush rakhba nu?<br><br>Paisa kitna kama la?<br><br>Pahili ke kahe chhor dela?<br><br>Daru tadi ke aadat ta naikhe?Future security<br><br><br><br>Mere jawab<br><br>Kyu chor dela- jo fact samney dikh raha hai.. usi se samajhiye.. hum apna paksh hi rakhenge.&nbsp;<br><br>Daru tadi nahi.. gutkha pan yes office me..<br><br><br><br>Job private hai.. par secured hai..&nbsp;<br><br>Padhai karo.. hum se jo ho sakega karenge..Chacha ka statement- jine ke liye bahut himmat chahiye..<br><br>04/04/2019, 22:37Aaj sham me shlg ka papa se baat hua. Ladki ki maa doubt me hai. Papa se shlg ne mere age related doubt ko bataya. Papa ne jyada bhaw khane par mana kar dene ko kaha.&nbsp;<br><br><br><br>Meri maa se baat huyi. Hum maa ko bole ki hum exercise karenge. Humko sirf papa ki gali aur comments se problem hai.<br><br><br><br>Maa ka kahna hai ki khali case se nikalne tak chup raho fir jo man me aaye karna.<br><br>05/04/2019, 09:15Papa se ek baat kahni hai&nbsp;<br><br><br><br>Aap meri ek baat maniye. Aap turant jawab dene ki apni aadat badaliye. Aap gutkha choriye ya nahi .. ya aap gaali dena chor de.. par ye ek aadat badaliye.. jab sath ke sath jawab dena jaruri lage tab bhi kam se kam 5-10 min late kijiye.Somen se ek baat karni hai<br><br><br><br>Hum yaha dusri baar isiliye join kiye they ki aap log ke sath time flexibility tha.. aap log ko meri lproblem pata hai.. isiliye kabhi insant chhutti chahiye to mil jayegi aur mera job aur experience letter secure rahega. Par aap log thora thora kar ke bahut bojh de chuke ho. Ab kuch naya lene se pahle existing bojh adjust karo. Aur clear karo ki aap ko kya kaam chahiyeJab kabhi ladki se kuch puchney ko kaha jaye to..<br><br>1. Tumhara routine kya hai?<br><br>2. Shaadi ke baad ye routine change hoga, kaise adjust karogi?<br><br>3. Agar padhna chahti ho to kya planning hai? Study kaise manage karogi?<br><br>4.4. Hobbies kya haain?<br><br>5. Kya pasand nahi hai?<br><br>6. Kabhi akele rahi ho . If yes kitne der tak? Aur kab?<br><br>05/04/2019, 11:07Shrilal chacha ko hum offuce pahuch ke call kiye they. Chacha bole ki tumhare matter se bhi babiya ke case me log hichak jate hain.hum chacha se kahe ki ladki ki maa ko hum pe doubt hai. Ladki acchi hai. Ladki ko padhna hai toh correspondence se padh sakti hai. Roz lane le jane me problem hai.chacha kahe ki coaching kar sakti hai na. Hum ha bole. Papa ko nahi pata ye bhi bata diye. Hum office pahuch ke call kiye hain ye chacha ne pucha tha.Kirti se hum kal somen se jo baat huyi thi wo bata diye. Kirti ka kahna hai ki waqar ki tarah humko bhi filter hoke L3 tasks mile vaise baat kijye<br><br>07/04/2019, 03:25kal meri chandan chaurasia ki wife se batt huyi. wo bahut acchi hain.unhone mere se baat ki.<br><br>10/04/2019, 23:19Aaj papa ki shlg se baat huyi thi. Uss ladki guddi kumari ka kisi ladke se affair hai.<br><br>11/04/2019, 09:03Mera kartawya kya hona chahiye<br><br>Apne niyat karmo ka paripalan.<br><br>Vighna aur maya ke prapamcho se duraw<br><br>Khali samay me ishwar ki shrishti aur uske bhogo ka dharmpurwak awlokan aur bhog<br><br>Ihlok aur parlok sudharna<br><br>23/04/2019, 13:42Aaj 22 April 2019 ko hum log pancho jan faridabad se motihari aa gaye. Dhruv chacha ke ghar par thahre.&nbsp;<br><br><br><br>Vakeel dewwrat shriwastav se mile. Kal 23 April ko Bettiah court me bail petition karna hai.<br><br><br><br>Suresh chacha last moment me dhokha diye. Bataye ki kal uske bade bhai ko BOKARO se chhutti nahi mila. \"Tu log pahle bail karawa log\" wo sab 26 ko gawahi dene aayega.<br><br><br><br>Papa Narendra ke sath wakeel se baat karne gaye hain. Jo hoga bhagwan Ram ki marzi se hoga.Chalte samay kal dadaji ne kaha ki shayad Bhagwan hum sab ko sikh dena chahte hain. Isiliye ye dukh diye.<br><br>24/04/2019, 15:45Aaj 23 April ko hum papa Narendra aur Devwrat wakeel Bettiah gaye. Waha Devwrat wakeel sahab ne apne ek jankaar Ashok ji ko contact kiya. Ashok ji aur unke senior sab ne Devwrat wakeel sir se vichar vimarsh kiya aur papa se kaha ki ab iss case me kuch nahi rakha. Baad me ladki ke wakeel Gupta ko contact kiya. Kagaz de ke Devwrat wakeel sir ne Gupta wakeel se confirm kiya ki kal unn log ko bula lijiye.<br><br><br><br>Total 5000 rs kharcha hua aaj. Kal ka kharcha bhi 5000-10000 hoga.<br><br><br><br>As per Suresh chacha cum musa kal 24 April ko kal Bettiah chalenge.24 April 2019<br><br>Left home in morning around 5 am for bettiah. That pimp Ragini came along with her chachera bhai and one of her jija based from Bettiah.<br><br><br><br>Humara total 25-30 k kal se abhi tak kharch hua.&nbsp;<br><br><br><br>Aaj ka kaam ki bail ho gaya aur case closure Ram ji ki iksha par close hoga.<br><br><br><br>26 April ko that pimp Ragini ki gawahi hogi.<br><br>25/04/2019, 10:17Case khatam hone ke baad<br><br><br><br>Ggn me alag dera le ke rahenge<br><br>Salary se ghar pe kuch nahi denge<br><br>Ghar se no contact<br><br>Baap ke marne par narendra se 8-10 lac ka fd katayenge aur jaha kahega sign karke baaki usi ko de denge.<br><br>27/04/2019, 14:3426 April ko ladki aur uske bhai ki gawahi huyi. Phir same day humari bhi gawahi ho gayi.&nbsp;<br><br><br><br>Rajesh 29 April ko available nahi rahne ka bahana kiya. Judge ne 24 June ka date de diya.<br><br><br><br>Judge ke Ragini se sawal.<br><br>Tumhare papa ka kya naam hai. Usne omprakash gupta kaha. Jabki sah likha tha document me.<br><br><br><br>Tumhare ex husband ka naam kya hai -Premendra kumar<br><br><br><br>Tumhare ex husband kya kaam karte hain- nahi pata. Ragini ne aage kaha ki wo kitna kamate hain ye bhi nahi pata.<br><br><br><br>Tum phir shaadi karogi- ha kyu nahi karenge.<br><br><br><br>Uske bhai ne kaha ki uska final settlement ho gaya hai.Ghar pe aa ke mai bhai aur maa se baat kar raha tha ki Bettiah ki ladki muhjor hoti hai.&nbsp;<br><br><br><br>Dhruv chachi ko bura laga aur wo muhjorpan ko character tak le gayi. Phir hum bhi gusse me aa ke bol diye ki Bettiah ki ladki charaterless nahi hoti par bahut mohjor hoti hai.&nbsp;<br><br><br><br>Chachi ko bura laga. Bahut bura bhala sunai. Suresh chacha ki burai ki.&nbsp;<br><br><br><br>Shayad baad me maa rimi se ladi hogi.<br><br><br><br>Dopahar me chacha se bike mange they .. wo khana khakar jane ko kahe.. hum paidal jane lage. Phir chacha ne bike de diya.&nbsp;<br><br><br><br>Hum Motihari-ghorasahan road me bike chalaye. 8 km tak gaye.<br><br><br><br>Phir wapas aa ke Shankar chacha ke ghar gaye. Chacha akele they pani pi ke aa gaye.27 April ko train pakad ke ghar ja rahe hain.Ab phir june me aana hai.Consequence of chachi jhagra kand<br><br>. Sadhu chachi tokegi ki Dhruv chachi se jhagra kar ke aa rahe ho.&nbsp;<br><br>. Papa datenge<br><br>. Dhruv chachi mera rishta bhadkayegi<br><br>. Dhruv chachi mera burai karegi.Aaj nikalte huye bol to diye ki chachi galati sahi maaf kariha. But wo attitude dikha rahi thi.<br><br>28/04/2019, 05:32Target revenge- dhruv chachi se unki badtamiz boli ka badla.<br><br>Kyu- hum Bettiah walo ko manchadhi aur muhjor kah rahe they. Wo baat ko character pe le gayi. Kyu muhjor to wo khud hai. Ab chachi ko unki muhjori ka badla dena hai.Kaise?<br><br>- dhruv chhi ka mayka ka history collect karna hai. Unki mayka ki weakpoints character related collect karna hai. Beti muhjor ho to maza aa jaye.Dhruv chachi ne aisa kyu kiya?<br><br>1. Wo jab bhi akele padti to mere se nawal chachi aur suresh chachi ke shikayat karti thi. Especially in morning when i used to go for take warm water.<br><br>2. Mere ghar jab aayi thi to hum unko unke relatives se milne ke ad-hoc plan me support nahi kiye they.<br><br>3. Unke bhai kalka ji ke pass wale se nahi milwaye they.<br><br>4. Wo naapi utha chuki hai ki meri papa se nahi banti.<br><br>5. Chanpatia wali ke judge ke samney ke statement se chachi bahut maza le rahi thi.Summary of Motihari trip<br><br>Iss baar ke motihari trip me kya accha hua?<br><br>* Sati mandir wale dadaji, Shanker chacha, munna chacha, lalan chacha, ananad chacha, vinod fua, vinod fufa ke beta deepak, Devwrat shriwastawa<br><br><br><br>Se bhent hua.<br><br>2. Chanpatia wala sab ka case almost close ho gaya.<br><br><br><br>3. Sikh mili ki below persons sirf paisa ke liye papa se sate hain<br><br>Dhruv chachiHum dhruv chachi se bus me apna sara kahani kahe. Tab sab shanti se suni. Shayad usko samajh nahi aaya.<br><br><br><br>Phir akele me wo baari baari se nawal chachi aur suresh chachi ki burai ki. Hum usko support nahi kiye.<br><br><br><br>Uski samajh se hum uske favor ke nahi hain. Aur mere man me us kali bhains ke liye respect nahi. Wo gharphorni hai.&nbsp;<br><br><br><br>But iske pahle ki hum dhruv chachi ki burai karte usne mujhey hi defame karna start kar diya.Iss badbolepan ki hum chachi ko kya saza de?Dhruv chachi ka badbolapan meri life ka turning point ban sakta hai. Agar maine khud ko thora bhi improve karliya to dhruv chachi jaise log mere se aur jalenge.<br><br><br><br>How to take revenge?<br><br>Papa ka faith aur love jeet loon. Isse mere khilaaf bolne par papa ke supporters ( ke paise ke sare lobhi log)&nbsp; meri help karenge.<br><br>2. Dhruv chacha se baat karte rahein ki wo mera pakridayal wala jameen bikwa de.Papa ke fairh aur love ko jitne ke liye humko unke hisab se chalna hoga. Samay se sharir, office, ghar ke liye time de.<br><br>Papa ki uchit anuchit baat par koi reaction na de.Dhruv chachi ke mere pe ilzam<br><br><br><br>1. Ho sakta hai ki apko patni ko theek dhang se rakhne nahi aata.<br><br>2. Wo jo chahti ho aap usko nahi de pa rahe ho.Chachi ko maine maa kaali ka roop samjha tha. Wo sahi me Kalika devi ki tarah , bewazah hi sahi, mere se gussa ho gayi.&nbsp;<br><br><br><br>Humko iss event ko milestone bana ke khud me sudhar lana chahiye. Sath hi sath iss maya jagat me usse badla lene ka bhi prayas karna chahiye.<br><br><br><br>Agar meri maa mujhey itna bolti to hum itna gussa nahi hote. Par chachi ki baatein , uska tunakpan aur uska aggression hum bhul nahi pa rahe.<br><br><br><br>Chachi ke sath ke iss event ko humko apne bhitar positiveness badhane me use karna chahiye. Chachi se badla lene ka yahi sabse accha tareeka hoga.Successful married life ke liye husband wife me se koi ek ko samajhdar hona padta hai.&nbsp;<br><br><br><br>Jaise maa papa me maa samjhdar hai aur papa muhphat.<br><br><br><br>Dhruv chacha chachi me chacha.<br><br>Bipin chacha chachi me bipin chacha.<br><br>Sati mandir wale dada aur dadi me dada.<br><br>Kolhuarwa wale dada dadi me dada.Kisi bhi pair me chache koi accha ho.. dono ka talmel hona most essential hai. Dono ek dusre ka respect karne wale hona chahiye.Mere case me wo ladki mera mere pariwar ka care karne wali nahi thi. Isiliye humara breakup hua.Ladki jyadatar muhphat aur badtameez hi hoti hai. Meri maa jaisi sidhi bahut kam hoti hain.<br><br>28/04/2019, 17:1826 April ko jab Dhruv chacha aaye they tab maa ne chachi ke batane se pahle chacha se meri baat ya chachi se bahasa bahasi ke liye maafi manga tha. Tab chachi ne matter nuetralize kiya.&nbsp;<br><br><br><br>Dhruv chachi 3rd class pimp hain.Ghar walo ka expectation<br><br>Personality banao<br><br>Daat saaf karo<br><br>28/04/2019, 22:0028 April ko shaam me Dhruv chacha call kiye they. Wo samjha rahe they ki chachi se tumko aisi baat nahi karni chahiye thi.&nbsp;<br><br><br><br>Chacha apna importance bata rahe they<br><br>. Tumlog ke jameen ke liye bahut papad bele<br><br>. Wo sab rimiya ke dekha suni ke samay bawal karne wale they, tab chacha ne unko dhamkaya tha<br><br>. Aaj hum log ko sharan diye<br><br>. Jameen ke rakhwali kar rahe hain<br><br>. Mere liye ramgarhwa wale relation me hum log ke favor me bolenge.<br><br><br><br>Hum chacha se maafi mange. Bole ki uss din mera dimag kharab ho raha tha. Chacha jab jyada gyan diye to hum bole ki chachi uss din gussa me khandan ke bare me bhi anap sanap boli jo humko accha nahi laga. Chacha turant papa ko phone dene ko kahe.<br><br><br><br>Papa bole ki ye Dhruv ji se mera ek second nahi chalega. Bas sah rahe hain. Tum bhi saho. Jab jameen tumhare kabja me ho jaye tab baat karna.<br><br>29/04/2019, 14:4229th April ko office join kiye.&nbsp;<br><br><br><br>Sanjay se baat huyi<br><br>. Waha bihar me 90% kaam ho gaya. Ab judge ke mood pe hai. 24 June ko next date hai.&nbsp;<br><br>. Thoda sa last me cooperate nahi kiya sab.<br><br>. Sanjay ka kahna hai ki un logo pe pressure daal ke 29th Monday ka date lena chahiye tha. Hum reply kiye ki jo ho raha hai mutual basis pe ho raha hai. Isiliye pressure nahi dale.<br><br>01/05/2019, 08:1130 April ko subah me Dhruv chacha call pe papa se bayaye ki wo machali nahi khaye.. kyuki chachi chhad me chot laga li. Uske sar me chhot lag gaya hai.<br><br><br><br>Papa maa samjha rahe they ki Dhruv chacha hum bhatija log ko nahi thagenge. Hum log ko chachi thagegi. Wo kuch saman lane ko kahe to usse paisa mat lo. Apne man se kala jamun aur mazaa la do. Chachi ko yahi sab pasand hai.Bagal me Prince se baat huyi . Uski saas abhi bhi thik nahi huyi hai. Shayad plaster utarney par phir operation hoga prince ki saas ka.<br><br><br><br>Cig gutkha me 250 rs kharcha kiye.<br><br>Total kharcha 400 rs.<br><br>02/05/2019, 11:301st may ko shaam me sanjay sharma se baat kiye. Usko phir se apne marital issue ka bataya.<br><br><br><br>Uska kahna hai ki tum log anyay sah rahe ho. Unko paise kyu de rahe ho.&nbsp;<br><br><br><br>Hum baar baar decide karte hain ki ab apni marital issue ke bare me kisi office person se baat nahi karenge. Par pahle interview.. phir ofice me yogesh somen se issue.. phir marital issue ka current update..&nbsp;<br><br><br><br>Iss discussion me apni past life aur engineering college me mera proposal.. phir rejection.. bahuf baate kah deta hu..<br><br>04/05/2019, 00:22Sanjat 300<br><br><br><br>Sheikh 100<br><br>05/05/2019, 23:133Rd may party<br><br>Prateek amit se bakchodi for family hardwar sihora dahane jayegi. BHU Narendra Rai ne piche ek party me kuch mila ke pila diya tha.BHU AUR saap me saap maro.4th may wakeel se mile. He confirmed ki 10th June ko case disposed kara dega5th family haridwar se ghum ke .. snan kar ke 8.40 pm tak aa gayi<br><br>27/05/2019, 06:484th may se 27th may<br><br><br><br>Mainly mera focus gutkha khane aur chinta karney par raha. Chunav ke din me Facebook par post karna, post forward karna mainly ye kaam kiye. 23 may ko Modi ki dubara government ban gayi. Last week Friday se sunday tak bahut movie dekhe.<br><br>Rakhtcharitra 1 2<br><br>Gangs of Wasseypur 1 2<br><br>Tango Charlie<br><br>16 December<br><br>Shootout at Lokhandwala<br><br><br><br><br><br>At least 10 movie. Friday night soye bhi nahi.<br><br><br><br>Gutkha bahut khaye.<br><br><br><br>Sunday 26th may ko apna sip redeem karne ka request daal diye.<br><br><br><br>Hum paglo ki tarah harkat kar rahe hain.&nbsp;<br><br><br><br>Fayaz ne bhi call kar ke apna Splunk ka code configure karaya.&nbsp;<br><br><br><br>Office ka kaam kam kiye hain.<br><br><br><br>Hum skipping irregular kar rahe hain.<br><br><br><br>Sunday ko skipping nahi kiye.<br><br><br><br>Hum jo target decide kiye they skipping , vocabulary - word meaning practice ka , paisa bachane ka .. vaisa kuch nahi kar rahe. Ramayana bhi roz 2 page hi padh rahe hain.Apna thoughts collect bhi nahi kar rahe. Sirf chinta karna aur gutkha khana bas ye hi continued hai. Baaki mere se ghar ka aur office ka koi kaam nahi ho raha.<br><br>23/06/2019, 20:5828th May to 22 june<br><br><br><br>HUm officele kaam me khud ko busy kar liye hain. Exercise bhi nahi kar rahe. Office se roz 10.00-10.30 tak nikalte hain aur ghar 12 baje raat ko pahuchte hain. Nind 2 baje tak aati hai. Phir agle din ka vahi routine. Maa kya kare .. udhar papa sunate honge aur idhar mere se naraz hogi. Hum pichle 2 mahine se iss june ka intezar kar rahe they.&nbsp;<br><br><br><br>Kal train me chadhte hi ek pagal aadmi se bhet ho gayi. Achanak mujhey hi pocketmar samajh liya. Bahut ho halla hua. Phir thori der me halla sunke railway police wale aaye. Unhone saaf kaha ki jo log reservation kara ke travel kar rahe hain.. wo chori nahi karenge.. jab police walo ne us aadmi ko uske apne bag me dhundhney ko kaha to usko yaad aa gaya ki uska purse uske bag me hi hai.<br><br><br><br>Sab logo ne us aadmi ko bahut bura bhala kaha. Papa ne chappal bhi utha liya tha.<br><br><br><br>Us aadmi ka baap hum log ke sath Motihari tak aaya.&nbsp;<br><br><br><br>Aaj Saturday ko Dhruv Chacha ke ghar aaye.. Monday ko meri hearing hai. Us din case closed ho jana chahiye.<br><br>01/07/2019, 06:0123 june to 30 june<br><br><br><br>I worked everyday from 24th to 30th from chacha shop.&nbsp;<br><br><br><br>Monday 24th ko Rajesh dogla nahi aaya. Judge ne next week Monday ko date de diya. 24th to 30th 2 baar Sujata ko raste me dekhe. Pahli baar&nbsp; Avadhesh ne dikhaya. Bataya ki iska bhi chora chori chal raha hai. Dusri baar chacha ne maa beti ko dikhaya.&nbsp;<br><br><br><br>Rajesh s/o suresh chacha se bhi baat huyi thi. Wo koi exam diya hai aur uska result aane wala hai. Par rumour hai ki private walo ko nahi lenge.<br><br><br><br>Aaj 1st july ko neta ji bhi Bettiah chalenge.<br><br><br><br>Aage Ram ki iksha...<br><br>02/07/2019, 05:231 july<br><br>Neta ji bhi hum log ke sath bettiah gaye. Uska bhai gawahi de diya. Uske baad ek baar phir ek surprise pata chala ki judgement ke pahle bahas hoga. Uske 7 din ke bhitar&nbsp; judgment hoga. Hum sab registrar se request aur bribe karke bahas ka date aaj se 2 months ke baad ka liye taaki phir se chutti mil sake.&nbsp;<br><br><br><br>Ghar pe aake abhi ek week aur rukna par sakta hai.<br><br>06/07/2019, 21:085 july ko shaam ko nawal chacha se baat hua. Wo apna boundary banwa rahe hain. Dhruv chachi ke quarreling behave ko target kar rahe they. Hum bhi chacha ko apna Bettiah court se aane par apna mental condition bataye. Chachi ke gussa ke liye delhi me unke mausere bhai ke ghar nahi jane ko karan bataye. Nawal chacha ke man me bahut vishad hai.<br><br>16/07/2019, 11:046 july to 16 july<br><br><br><br><br><br>13 july ko shaadi ho gayi. Shaadi me sasur publicly dhoti kurta pahanne ke liye aggressive ho gaye they. Nawal chacha aur mere baaki chachi log bhi humko insist karne lage they. Narendra dwara babu ji ke aane aur bich bachaw se humko jaimala wala room me kapra badlwaya gaya. Shadi me khatti mithi bahut baate huyi. Saaliyo ko hum sidhe lage. Badi didi log aache se baat ki.<br><br><br><br><br><br>&nbsp;Agle din 14 ko sab koi rest kiye. 14 ki shaam ko panch mandir aur maai sthan me maa aur chachi puja ki. 15 ko machli kha ke hum log station aa gaye. Waha railway police wala tempu walo ki chabi le liya. Unki chabi churwane me 500 ghoos dena pada.<br><br><br><br>16 ko train timely aa gayi. Patni ka&nbsp; mere se sawal tha ki aap bahut experienced honge. Hum Chanpatiyan ke humko chankane ki kahani bata diye. Patni ke man me kya vichar hua hoga? Wo ab meri baate kis kis ko batayegi ? Hum apna sara query, confusion, doubts Ram pe chorte hain.<br><br>16/07/2019, 22:2016 july ko rimjhim , Narendra , maa aur papa baar baar mere aur vandana ke milne me vyvdhan diye. 2 min akele chorkar chhapa maar rahe hain. Hum log ka baat karna doobhar kar diya hai. Rimjhim jitna humko sata rahi hai bhagwan kare usko Adityamall se milne me usse dugna vyavdhan ho. Narendra jitna smart ban raha hai usko bhi utna hi kasht ho.<br><br>17/07/2019, 01:56Pahle din ki baat ki summary<br><br><br><br>1.&nbsp; Abhi itna jaldi baccha nahi<br><br>2. Teacher job ka form bharo, exam do. Uske baad hi koi baat hogi na.<br><br>3. Gutkha choriye. Baaki koi nasha nahi kariyega.<br><br>4. Dono ghar ke bich ka relation kaisa hoga vo tumhari iss baat par depend karta hai ki tum kon si baat share karti ho. Tumhari samajhdari hi sab ki khushi ke liye jimmedar hogi.<br><br>5. Raksha bandhan me ghar jana hai.&nbsp;<br><br>6.<br><br>19/07/2019, 06:1316 july to 19 july<br><br><br><br>Vandana ke sath samay accha beet raha hai. Par hum vandana se kiya vaada ( nasha chorney ka) nahi n8bha rahe hain. 17 ko ghar pe Shri Satyanarayan bhagwan ki puja huyi. Maa papa ne hum dono ko puja pe bithaya. Vandana ko lambi puja path me nind aati hai. Par Vandana bahut sahansheel hai. Vandana apne ghar me dabangg didi hai. Hamesha haste rahti hai.&nbsp;<br><br><br><br>Vanadana ko hum naagin ke bare me, mymbai me apne paap ke bare me sab baya diye.&nbsp;<br><br><br><br>Vandana se hum bahut khush hain. Mujhey to wo 14 saal ki navyauvna lagi.<br><br><br><br>Muhdekhai me usko ghari gift kiye. 18 ko vandana ne apni ek saheli se baat karayi. Wo bhi vandana ke jaisi hi hashmukh hai.<br><br>19/07/2019, 09:0619 july ko subah me maa 3 liter dudh lane bheji.<br><br>Hum chacha ke ghar gaye<br><br>MOM<br><br>as per chacha talk to vakeel and get their vakeel in our favor and take 4-5 sub sequent dates to realize them the pain.<br><br>Hari dori chulane ka rasm monday ke jagah Wednesday ko kare. Monday ko somwari hai.<br><br>As discussed with chachi i accepted ladki acchi hai.biwi ki demands<br><br>Office ghumna hai<br><br>Gutkha choro18 july ko biwi 1000 rs li. Jab jarurat hoga de degi.<br><br>21/07/2019, 07:2920 July ko subah me hum papa se puch ke Vandana ke sath delhi ghumney gaye. Papa 1500 rs diye. Papa ka metro card bhi rakh liye.&nbsp;<br><br><br><br>Kalka ji gaye. Bich me Vandana ke ek chachere bhai, jo Delhi me kashmere gate ke pass rahte hai, unki wife se baat huyi. Bhaiya market nikle they. Bhabhi ne apna address bheja but hum kahe ki aaj nahi kabhi aur chalenge. GIP mall ghumey. Noida me khaye. Vandana khaney me aana kani karti hai. Shaam ko hum cannaught place aaye. Park me baith ke Vandana apne Satyam bhai se baat ki. Phir mummy ji bhi baat ki. India gate nahi gaye. 9.30 tak ghar aa gaye.&nbsp;<br><br><br><br>Vandana roz subah utha deti hai. Rimi ke sath tahal rahe hain.Friday ko office me 200 ka mithai khilaye.<br><br>21/07/2019, 19:1620 july ko 1500 rs me se 1100 rs kharcha21 july ko 2000 me 1700 kharchaDopahar me papa puche ki ladki kaisi biya. Hum kahe ki achhi biya, samajhdar biya. Baat sune le. Sun ke jawab bhi dewe le. Jayaz baat par gussa bhi kare le.&nbsp;<br><br><br><br><br><br>Shaam me dadaji bhi puche ki ladki kaha tak padhi hai. Hum bole ki graduation phir b. ed. Dadaji kahe ki double graduation hua ye toh.Papa ne kaha ki apna&nbsp; Patna me bhi jugar karte raho. Yaha 1 lakh mahina me bhi kuch nahi bachega.<br><br>22/07/2019, 06:0422 july 2019<br><br><br><br>Intercourse at around 4 am. Uske baad baatchit.&nbsp;<br><br><br><br>\"Akhir aisa kon sa baat par aap log ka itna jhagra hota tha aur chora chori hua?\" --- aaj 4-5 din acche se baat karne aur meri taraf se Vandana ko puri baat batane ke baad ye sawal bahut kuch batata hai.&nbsp;<br><br><br><br>This is like reverse KT. I think ab mujhey samajhna chajiye ki mujhey hum logo ke bich baat chit ka topic badalna chahiye. Hum khud ki activity me sudhar lana chahiye. Humara daily routine update hona chahiye. Humko gutkha chorna hai taaki vandana mere bhitar koi aur burai bhi identify kar sake.Humko vandana ke relatives se iske pasand napasand puchney chahiye.<br><br>22/07/2019, 07:521. Sab second hand chij hum ko mil raha hai nahi chahiye. - ye baat tab jab hum vandana ko rimi wala mobile lene ko kahe.<br><br>2. Teen-char ultimatum ke baad papa maa se meri shikayat kar di ki hum gutkha khate hain- galat sahne wali nahi hai. Usko abhi mere par avishwas hai. Hum ye sab chorney ka asafal prays pichle 3 saal se kar rahe hain. Par ab ye chorna hi hoga. Aaj se hi.<br><br>24/07/2019, 06:1924 july ko papa ji se baat huyi. Papa ji ne kaha ki aapko hi vandana ko apne saache me dhalna hai<br><br>26/07/2019, 05:3315 july to 26 july<br><br><br><br>Wife has continuously weeped for going to home. Wife blames her bade papa for making her marriage so far from Ramgarhwa.<br><br><br><br>25 July ki raat me 2 ghante wife isi ke liye royi ki usko ghar jana hai. Wife mere se shikayat kar rahi thi ki hum jhuth bolte hain.<br><br>26/07/2019, 09:45Wife ne office nikalne ke samay 100 rs mange. Hum 200 ka note diye. Wo 100 rs nahi lautayi.&nbsp;<br><br><br><br>Net jama 1200/-<br><br>28/07/2019, 06:3327 jul ko subah me saam vandana ke bhai ne call kia ki wo anand vihar aa gaa hai. usko ghar lae.wo sham ko jaladhar nikla.shaam ko wakeel se baa kie. usko 1 aug ko dae lene ki baa kahe.shaam me vandanna ke jijaji savri didi ke dulha se baa kiewo nov me vaisno devi jaengeunko kali mandir ke pass apne mausa ke bare me kahe<br><br>28/07/2019, 09:35mummy ji se 27 jul ko baat huyi thi. wo meri chachi log ke bare me puch rahi thi<br><br>29/07/2019, 22:22Wife se total 500 rs liye they.. 1000 return karna hai<br><br>31/07/2019, 20:55Wife took 200 in morning<br><br>01/08/2019, 16:201 aug ko date tha. Wakeel apna staff bhej diya. 26 sep ka date mila.<br><br>04/08/2019, 21:293 aug ko IndiaBulls ventures me Interview clear ho gaya8.28Offer letter Tuesday ko milega<br><br>06/08/2019, 05:315 aug wife informed that her bettiah sister Savitri di has purchased the protein powder worth 2300 for her and i need to pay this amount. Earlier protien powder was demanded from me but I refused to purchase it due to conversation and suggestions from medical shop owner Brajesh as well as Dr Ravi bhaiya. Reason for its side effects.&nbsp;<br><br><br><br>Wife was also complaining for weakness and bodyache. I am in favor of medical checkup from gynecologist and take medicines accordingly but i am afraiding from asking this suggestions to wife due to fear of increase of conflicts . I am in situation of dillemma for asking this to maa due to growth of anger of wife.<br><br><br><br>Also i am taking short sleep of 12 am to 4 am due to which i am feeling some anxiousness and anger. I am also not able to fully quit my chewing bad habit which may now cause conflicts and anger to maa and wife.<br><br><br><br>There is another tension of my offer letter waiting from indiabulls org.. this also making me anxious and angry.Lets wait for wish of Ram for my current situation.<br><br>07/08/2019, 18:10I get pressurised very quickly.. how could I manage myself at other places if I get switched to other organisation?<br><br><br><br>I start to feel soon tense.. and lost.. in this way it is very difficult for me to manage tough situation.. I have become addicted to this place and my current situation..<br><br><br><br>May Ram save me.<br><br>08/08/2019, 18:28Offer letter aaj bhi nahi Mila. Kal milna chahiye<br><br>12/08/2019, 09:58Friday ko dadaji ko bataye ki&nbsp; 19th ke baad bihar jana hai.Saturday ko mere pocket se shikhar nikla..&nbsp; Wife bahut royi..&nbsp; Hum vishwas diye ki hum ab gutkha nahi khayenge..&nbsp; Wife ko bhi bole ki rone aasu girane ka Koi jarurat nhi hai<br><br>13/08/2019, 10:3912 Aug -<br><br><br><br>Offer letter aaj bhi nahi aayega.&nbsp;<br><br><br><br>Shaam ko sanjay se kuch baat huyi ki wife job karna chahti hai..&nbsp; Sanjay was advising ki yaha job karne ke liye baat karo..&nbsp; Maine sanjay se ye nahi kaha ki hum bhi bihar jana chahte hain..&nbsp;<br><br><br><br>Shaam ko 8 baje office se nikal gaye..<br><br>23/08/2019, 06:5614 Aug ko offer letter aaya.&nbsp; Hum resignation daal diye.&nbsp; Resignation ke pahle hum sheikh se baat kiye par wo 10 % increment ki baat kahe.&nbsp; I was not agree for that.&nbsp; Tab hum resignation ka process initiate kar diye.&nbsp; Aage Ram ki ikshaMonday 19 aug ko yogesh somen ko resignation ke liye inform kiye. Par wo log formally liye20 21 Aug ko hum bimar they.&nbsp; Ghar se kaam kiye21 ki raat me wife gutkha le ke jhagra ki. Hum ko bahut kuch sunai.. Hum ko rimi Narendra ka wp chat padhai.. Hum ko gussa aa raha tha ki ye choti choti baat care kar rahi hai.. Hum 1.30 PM par papa ke sone chale gaye22 Aug ko hum shaam ko wife se sone se pahle bahut baat kiye.. Wife is just curious to make quit my bad habits<br><br>27/08/2019, 05:50Last friday i talked to amit tyagi..&nbsp; He asked if I would go this time.. I replied and requested to increase salary..&nbsp; But he said loyalty cause... May be he will not increase nor retainWife se itna baat karne aur samjhane ke baad bhi usko na to meri baat samajh me aati hain aur na hi sacchi lagti hain.Papa maa ne monday ko doctor A. K. Minz se dikhwa diya.. Tabiyat thik hai.. Last week viral tha usi ke chalte weakness hai.Wife ko mayke jaake 5000 rs chahiye.. Pata nahi mere karan puchne par wo karan bataiyegi ya jhagra karegi..Wife ne kal shaam ko faluda ke liye na kaha to bas wo na hi raha.. Bahut jiddi hai.. Meri baato ka uspe koi asar nahi hota.. Shayad mera hi koi asar nahi hai<br><br>27/08/2019, 09:51Kal wife mere kehne par faluda aur badam shake me se kuch nhi khayi. Uska na ka matlab na hi hai same nagin ki tarah.&nbsp; Din me soti hai.. Hum soye to jagaye rakhegi aur baad me ilzam degi.. Hum fir se fas gaye.. Ye ladkiya sirf paisa hi chahti hain<br><br>02/09/2019, 10:3928 aug to 1 sep<br><br><br><br>Wife ko chappal kharidwaye..&nbsp; Usne ek number bada kharid liya.. Ghar pe aake kahne lagi ki sahi hai.. Papa maa ke tokne par kahne lagi ki jaiye aap bahas kijiyeBaad me dubara jake sahi number liPapa maa ki baat se usko daat lagti hai<br><br>11/09/2019, 08:192 sep to 11 sep<br><br><br><br>Vandana ko bhi motihari bettiah aana tha..&nbsp; September me mera tabiyat kharab hi raha.. &nbsp;<br><br><br><br>9 sep ko vandana ke sath hum uski didi ke ghar aaye. Iski maa se hum shikayat kiye ki<br><br>.&nbsp; E hum pittati hai<br><br>.&nbsp; Jiddi hai. Khana barbaad karti hai<br><br>.&nbsp; Kitchen me kabhi safai nahi karti..&nbsp;<br><br>.&nbsp; Din me so jati hai aur raat me 2 baje tak humko pareshan karti hai..&nbsp;<br><br><br><br>Iski didi dher methin ban rahi thi.. Unse hum kyu shikayat kare.. Vanadana iski savita didi se hi influenced hai..&nbsp;<br><br><br><br>Aaj 11 sep ko hum dekhe ki ye vanadana apne jija se bilkul sat ke baith ke unko nashta kara rahi thi.. Pata nahi purana prem abhi kam ya khatam nahi hua hai..&nbsp;<br><br><br><br>Vandana Cwali se besi nimman nahi hai..&nbsp;<br><br><br><br>Iski maa aur didi shikayat sunke humara muh hi band karne ka try ki.. Ki humko shikayat nahi karna chahiye.. Hum dher bolenge to ye sab bhi galdodrayegaSavitri didi mere anand chacha ka kuch jyada hi burai kar rahi thi.. Vandana ki soch aur uski vichar iski isi bahan se prabhawit hai.. Savitri didi aur vandana ko negative khojne aur burai niharne me hi ruchi haiShaadi wale din bhi mere me burai pahle savitri didi ko hi dikha tha..&nbsp; Meri bahan ki burai bhi yahi savitri didi pahle ki thi..&nbsp;<br><br><br><br>Jo jitna chikna banta hai.. Uske piche me utni hi gandgi hoti hai.. Par hum relation chalana chahte hain.. Par vanadana sirf apne savitri didi ke sasural aur apne jija ke bhai log se hi comparison karti hai..&nbsp;<br><br><br><br>Sala meri life me sab 76ri san hi mili.. Koi baat nahi aaj ke baad hum kabhi yaha iske didi ke sasural nahi aayenge<br><br>19/09/2019, 11:52I will<br><br>Serve my family<br><br>Serve my body as resting place for God<br><br>Learn one new skill every year<br><br>26/09/2019, 04:4711 sep to 25 sep<br><br><br><br>11 sep ko judge nahi baitha tha.&nbsp; 21sep ka date mila.&nbsp;<br><br><br><br>12 sep ko hum vandana ke sath patna nikle.&nbsp; 11 sep ki shaam ko hum kali mandir gaye. Vandana ko dur se hum mausa ka ghar dikha diye. raat me vandana humko supplement powder ka dibba dikhai jo iske didi ne kharida tha.&nbsp; Hum bole ki hum faridabad pahuch ke paisa de denge.&nbsp; But jaisa ki hum ko suggest kiya hai mere ravi bhaiya ne aur brajesh medical ne tumko ye dawa chupa ke khana hoga.&nbsp; Uski bahan ko bol diye ki aap sikhati hain vahi yah bolti hai.&nbsp;<br><br><br><br>12 sep ko patna nikle. Raste me bus me vandana se bata bati hua.&nbsp; Patna me room liye beliey road me.&nbsp; 12 se 18 tak patna ghumi. 19 ko motihari aaye. 21 ko bettiah me case close ho gaya.&nbsp;<br><br>22 ko train pakad ke 23 ko fbd aaye.&nbsp;<br><br><br><br>24 ko hardwar ghume. Bhukh se hum tension me aa gaye they.&nbsp; 25 ko wife ke sath din me soye. 25 ki shaam ko sadhu chacha ke ghar gaye. Chachi ko laga hum matlab se aaye hain.&nbsp;<br><br><br><br>Aaj 26 ko case ka date hai<br><br>27/09/2019, 04:4926 ko court me gaye.&nbsp; Waha subah me Prem singh se baat huyi.&nbsp; Usne bataya ki abhi chanpatia wale date lenge. Unko 6 nov ke baad ka date chahiye.&nbsp; Par upar 2 nov ka hi date mila. Judge uske pahle ka date lene ke liye kah raha tha.&nbsp;<br><br><br><br>Ghar pe aa ke paise bank me jama kara diye.2 nov ko chhath hai.. Most probably wo log us din nahi aayenge.Shaam ko vanadana rimi ke kisi baat pe naraz ho gayi. Wo rimi ko daat ke boli to hum usko suna diye.&nbsp; Papa ji 8 baje call karke humko hi samjha rahe they.&nbsp; Hum unko bol diye ki itni choti baat aapko bata ke vanadana aap log ko pareshan kar di.&nbsp;<br><br><br><br>Humko papa ji ka iss tarah bolna acha nahi laga.Aaj mera current company me resign hai<br><br>29/09/2019, 16:0427th concentrix me resign kar diye..&nbsp; Jaate huye Amit Tyagi humko 4-5 din aur dene ko kahe.&nbsp; Hum unko direct nahi nahi bole.. Unhone somen se baat karne ko kaha.&nbsp; Hum somen se baat karke apna final nahi suna diye.&nbsp; Ab sab Ram bharose..28 ko nayi jagah join kar liye. Pura 30 page ka document bharwaya29 ko vanadana ka 14700 ka ring kharidaya. Vanadana ke muh delhai ka 5500 aur baaki papa ka500 vanadana ko papa baad me de diye<br><br>30/09/2019, 15:353 applns<br><br>Web desktop Android<br><br><br><br>Naveen singh<br><br>Brijesh<br><br>Rashi<br><br>Saroj<br><br>Virender<br><br>30/09/2019, 22:22Ankur BAShare market glossaryTax knowledge<br><br>01/10/2019, 12:38Ganesh new joined<br><br>Sushant testing<br><br>10/10/2019, 11:31Basant sir probably from server support<br><br>13/10/2019, 13:37Aaj maine kuch calculations kiya ki mere aage 40 saal( 30 year work and 10 year retirement) ke liye mujhey approximately 6 crore rupee chahiye<br><br><br><br>7lac per year*40 year=2.8 cr<br><br>Surprise expense=2.8 crApproximately 6 crore required<br><br><br><br>15 lac per annum<br><br>14/10/2019, 19:57I chided vandana for being more involved for land sell matter. I had objection why she try to reconfirm from me Or my sister..&nbsp;<br><br><br><br>I dont bother what will be her reactions<br><br>15/10/2019, 18:37Abhilasha devAnmol zaheer for deployment support<br><br>17/10/2019, 09:36My schedule has again become uncertain. I am not following my routine from last 2 months<br><br>19/10/2019, 16:0630 sep to 19 oct<br><br><br><br>Wife naihar ja ke kabhi sidhe dhang se baat nahi karti. Usko hamesha humse shikaayat hi rahti hai.&nbsp;<br><br><br><br>Jab bhi baat karti hai to chubhne wali baat hi kahti hai<br><br>22/10/2019, 09:5820 oct ki raat me wife ne WhatsApp par message kiya ko wo 5am @22nd oct pe call karegi.. Hum tab so rahe they.. Baad me din bhar call kiye par wo phone nahi uthai..&nbsp;<br><br><br><br><br><br>23 ki subah hum call kiye..&nbsp;<br><br><br><br>Wo tab muh dhone ja rahi thi..&nbsp;<br><br><br><br>Apne wahi purane style me apna demand rakhne lagi..&nbsp;<br><br><br><br>According to her uske bhai ne coat pant ka shaadi wala paisa khoj raha hai.. Uski bahan ne Vandana ko kaha hai ki jijaji charo bahan ke liye kapra dete.. Unki ye shaukh nahi pura hua..&nbsp;<br><br><br><br>Hum bas puchey ki tum bas unki baatein suno aur humare taraf se kuch mat kaho.. Wahi tumhare apne hain na.. Hum to tumhare dushman hain..&nbsp;<br><br><br><br>Man me to aaya ki bolu tum aur tumhare sirf humko lajwanae ka kaam hi karti ho.. Tumko bahut shaukh nahi pura hua.. Par kabhi tumhare bhai bahan maa papa ko apna kami dikhta hai??&nbsp;<br><br><br><br>Pahli baar tumhare naihar se humare ghar tumko lene aaya tha.. Par aise hi khali haath.. Kya tumhare ghar walo ko saari kapda bhi nahi jura tha..&nbsp;<br><br><br><br>Aaj hum pura family ke taraf se tumko 2 anguthi, saari.. Bhai ko kapra.. Ghar ke liye fruits.. Approximately 50000 ka kharcha kiya tab bhi tumko abhi kami hai..&nbsp;<br><br><br><br>Jante hain bolenge to tum mera jaban pakar logi.. Isiliye chup rah jaate hain<br><br>22/10/2019, 12:54Code review ke task me i am not able to decide what to do next..&nbsp;<br><br><br><br>Cobertura report is totally negative.. No test case written..&nbsp;<br><br><br><br>Now I think I should ask birender to share current requirements which are in pipeline<br><br>27/10/2019, 04:15Hum kal 10:00 baje soye aur aaj 4 baje uth gaye.. 4 baje automatic nind khul gayaAgar hmko 6 ghanta nind mil jaye to sabere man fresh ho jata hai<br><br>08/11/2019, 19:51Why did I went to Bipin chacha house today?&nbsp;<br><br><br><br>Today at last my matrimonial case has been closed and now decree of divorce will be issued in some time.&nbsp;<br><br><br><br>In morning everything was uncertain. Will they come? If they will come will they carry the required documents to be submitted in court. Will my case get closed today?&nbsp;<br><br><br><br>And as the day starts to elapsing all the questions started to get answered.<br><br>09/11/2019, 13:12Confessions of a thug by philip Meadows TaylorBook<br><br>16/11/2019, 05:46Now a days i am not logging all my thoughts. This doesn't mean no thoughts are popping in my mind but either I am not getting time or I have sploited my daily life with so many things (like chewing, game, negative thoughts for job, new company, colleagues ) that i feel reluctant to log my thoughts.&nbsp;<br><br><br><br>Yesterday on 15th Nov I talked to Abhishek from HR for employees count as 25k which was given as reason for stick with only limited banks to credit salary.&nbsp;<br><br><br><br>Also I talked to one new Couluegue for reluctanty to share knowledge due fear of job&nbsp; loss. People not guiding well due to same.<br><br>19/11/2019, 06:36Yesterday on 18th Nov I was informed that V's father has said to sent back V only if I will go there. It was a tremendous shock for me as it was earlier well decided how she will return. I called V in night but she just rounded off the topic. She is not truely reliable. Let's wait what happens in final day. If the new decision will come in effect I will prefer some procrastination in going there post 7th . As I fear I will again be forced to stay for one or two days before return. But if things will change it will ruin the status of V's family in front of mine forever.&nbsp;<br><br><br><br><br><br>Let's wait what Ram ji has decided.<br><br>21/11/2019, 07:41On 21st nov in morning, V's dad called and asked to come on 7dec and he will send back ASAP. V's dad is the dumbest guy.&nbsp;<br><br><br><br>I will remember this disrespect forever and take revenge.<br><br>21/11/2019, 09:06Ke hu ke sath hum vandana ke kaise bhej dem.Ke hu ke sath hum vandana ke kaise bhej dem.<br><br><br><br>This line said by suresh ji will be revenged foreverToday I realized consequences of more talking. People who talks more get trapped most. Better to keep&nbsp;<br><br>1. Conversation small<br><br>2. Listen&nbsp;<br><br>3. Question<br><br>4. Interrupt by some urgency in case of unproductive, meaningless, loosing talks<br><br>5. Quit if people in front of you/me has no more topics<br><br><br><br>But never speak more<br><br>21/11/2019, 13:33She called while I was in office. Asked that she dreamed of my hug and asking vandana tum mujh se baat kyu nahi kar rahi ho. Meanwhile i was chanting Ram to make situation better. Alas! I have no in-laws happiness.&nbsp;<br><br><br><br>I was thinking to say if dreams show opposite. But I kept my words<br><br>21/11/2019, 16:37Father called her randomly. She asked to arrange vehicle. I opposed. Finally I asked I can reschedule my journey and can go there and bring her on 6th. I asked to get this confirmed from V as well as her bastard dad.&nbsp;<br><br><br><br>She confirmed and my ticket booked for 4thBut I will still revenge.<br><br>23/11/2019, 07:28From last 2 days post that bastard said to sameer that he can't send V with other than him.. His conscious became reluctant and he is finding no more difference in v and r.&nbsp;<br><br><br><br>Sameer has two challenges. One is his dad's behave to expose everything and other is v. How will he control. He is showing anger and reluctancy from 2 days in spite of feeling deep sorrow for her 2nd better half. That better half is very stubborn and sameer feeling problem in future due to this.&nbsp;<br><br><br><br>On 22nov v raised concerns for being blocked on call, but sameer denied in spite of she felt right. That was to control v for future. Sameer knows he became dwah post separation from r, so he will not become charwah post separation from v. He is not dumb but he just want to break illusion of v.&nbsp;<br><br><br><br>Let's see what Ram wishes<br><br>25/11/2019, 10:21<br><br><br><br>You removed a message25 nov<br><br><br><br>Last night I had talked around 2 hrs.. No useful talks.. She do not want accept her mistake. She had no regret.&nbsp;<br><br><br><br>On 25th before leaving to office i scolded and asked not to carry that sweater. She do want to abide. Lastly at least said she will not carry.. She's just a stubborn lady<br><br>26/11/2019, 01:42She scolded so brutal. I have now total broken??<br><br>26/11/2019, 09:54She is izzatmaar<br><br>28/11/2019, 22:26She did one formal and meaningless talk today for raining in faridabadShe's so stubborn and proud<br><br>09/12/2019, 21:16She is just focused with money.. She only focus over money currencyShe cpnspired with my younger brother chhotu and doged me for 700<br><br>11/12/2019, 12:22[11/12, 12:17 PM] Premendra05515: Var paksh me dulha ke dost sab me ek mere sath isi flight me travel kar raha hai<br><br>[11/12, 12:20 PM] Premendra05515: Raman chaudhry<br><br>Native bharouch, up<br><br>Working same work as that of Aditya ji.. Paper cup manufacturing...&nbsp;<br><br><br><br>E vahi shaksh hauhan je \"na ji na\" Ki jidd lagaye rahlan<br><br>[11/12, 12:21 PM] Premendra05515: Samne baithal baran<br><br>11/12/2019, 20:58She is such arrogant. While marriage ceremony of vinita during dinner I asked her to help my eldest chachi for dinner but she showed arrogance. So i chided her.&nbsp;<br><br><br><br>My eldest brother saw this event&nbsp; but he only asked me to not chide her. He also not showed interest to help chachi.&nbsp;<br><br><br><br>She made urge to fua but surely not explained everything.&nbsp;<br><br><br><br>Let's see what she will do after coming here<br><br>13/12/2019, 04:37Misbehave from her<br><br>1. She didn't greeted after my urge to meet to my relatives came from village. She just responded that she has already met with her.&nbsp;<br><br>2. She didn't helped my widowed eldest auntie during dinner at wedding ceremony.<br><br>13/12/2019, 09:43I have promised my sister to quit chewing in next 6 months. Date 11 December 2019..<br><br>18/12/2019, 09:14She has made lie with her mother. She said had not received any saaree on occasion of my sister marriage.&nbsp;<br><br><br><br>As confirmed in my family she has been given 2 saaree<br><br>1 JAN 2020, 05:50?? ???? 2020 ?? ???????? ??? ?????? ?? ???? ??? ???????? ??????? , ???????, ??????, ??????, ?????, ?????????, ????????? ?? ??????? ?? ??? ??? ????? ???? ???? ?? ?? ?????? ??? ?<br><br>?????? ???? ??????? ?? ??? ?? ???? 2020 ?????? ???2020 resolutions<br><br><br><br>Gutkha quit karna hai<br><br>Body building<br><br>Job chorkar aage kya karna hai ye clear karna hai<br><br>5 JAN 2020, 20:45Pal Bhar Thahar Jaao<br><br>Dil Ye Sambhal Jaaye<br><br>Kaise Tumhe Roka Karun<br><br>Meri Taraf Aata Har<br><br>Gham Phisal Jaaye<br><br>Aankhon Mein Tum Ko Bharun<br><br>Bin Bole Baatein Tumse Karun<br><br>'Gar Tum Saath Ho<br><br>Agar Tum Saath Ho<br><br>Behti Rehti<br><br>Nahar Nadiya Si<br><br>Teri Duniya Mein<br><br>Meri Duniya Hai<br><br>Teri Chaahaton Mein<br><br>Main Dhal Jaati Hoon<br><br>Teri Aadaton Mein<br><br>'Gar Tum Saath Ho<br><br>Teri Nazron Mein<br><br>Hai Tere Sapne<br><br>Tere Sapno Mein<br><br>Hai Naraazi<br><br>Mujhe Lagta Hai<br><br>Ke Baatein Dil Ki<br><br>Hoti Lafzon Ki Dhokebaazi<br><br>Tum Saath Ho Ya Na<br><br>Ho Kya Fark Hai<br><br>Bedard Thi Zindagi Bedard Hai<br><br>Agar Tum Saath Ho<br><br>Agar Tum Saath Ho<br><br>Palkein Jhapakte<br><br>Hi Din Ye Nikal Jaaye<br><br>Baithi Baithi Bhaagi Phirun<br><br>Meri Taraf Aata Har<br><br>Gham Phisal Jaaye<br><br>Aankhon Mein Tum Ko Bharun<br><br>Bin Bole Baatein Tumse Karun<br><br>'Gar Tum Saath Ho<br><br>Agar Tum Saath Ho<br><br>Teri Nazron…<br><br>8 JAN 2020, 23:44Jo khwabon khayalon mein socha nahin tha<br><br>Tune mujhe itna pyaar diya<br><br>Main jab bhi jahaan bhi<br><br>Kadi dhoop mein tha<br><br>Teri zulf ne mujh pe saya kiya<br><br><br><br>Haan jo khwabon khayalon mein socha nahin tha<br><br>Tune mujhe itna pyaar diya<br><br>Main jab bhi jahaan bhi<br><br>Kadi dhoop mein tha<br><br>Teri zulf ne mujh pe saya kiya<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai??? ?? ???? ??? ?????<br><br>????? ?? ??? ????<br><br>????? ?? ??? ???? ??<br><br>??? ??? ????? ??<br><br>???? ???? ????<br><br>?? ??? ?? ?? ???? ??<br><br>?? ??? ?? ?????<br><br>? ?? ????? ??<br><br>??? ?? ?? ????? ????? ??<br><br>??? ??????? ?? ???? ??<br><br>????? ?? ??? ???? ??<br><br>??? ?? ???? ??? ?????<br><br>????? ?? ??? ????<br><br>????? ?? ??? ???? ??<br><br>???? ??? ??????<br><br>?? ? ??? ??????<br><br>???? ?? ??? ????? ??<br><br>????? ?? ?????<br><br>???? ?? ?????<br><br>??? ?? ????? ?? ??<br><br>????? ?? ???? ??<br><br>????? ?? ??? ???? ??<br><br>??? ?? ???? ??? ?????<br><br>????? ?? ??? ????<br><br>????? ?? ??? ???? ??<br><br>?? ???? ???? ??<br><br>?? ? ???? ??? ??<br><br>???? ?? ?? ??? ?? ???<br><br>?? ???? ??? ??<br><br>????? ??? ?? ????<br><br>????? ???? ??? ?? ????<br><br>???? ???? ?? ???? ??<br><br>????? ?? ??? ???? ??<br><br>??? ?? ???? ??? ?????<br><br>????? ?? ??? ????<br><br>????? ?? ??? ???? ??Jo khwabon khayalon mein socha nahin tha<br><br>Tune mujhe itna pyaar diya<br><br>Main jab bhi jahaan bhi<br><br>Kadi dhoop mein tha<br><br>Teri zulf ne mujh pe saya kiya<br><br><br><br>Haan jo khwabon khayalon mein socha nahin tha<br><br>Tune mujhe itna pyaar diya<br><br>Main jab bhi jahaan bhi<br><br>Kadi dhoop mein tha<br><br>Teri zulf ne mujh pe saya kiya<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br><br><br>Hey… we could fall in love<br><br>I say… I could fall in love with you<br><br>Hey… we could fall in love<br><br>And I say… I could fall in love with you<br><br><br><br>Koi bhi aisa lamha nahi hai<br><br>Jismein mere tu hota nahi hai<br><br>Main so bhi jaaun mein raaton mein lekin<br><br>Tu hai ki mujhmein sota nahi hai<br><br>Tu hai ki mujhmein sota nahi<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br><br><br>Hai teri inaayat tujhse mili hai<br><br>Hothon pe mere hansi jo khili hai<br><br>Use mera chehra chhupa bhi na paaye<br><br>Tujhe paake haasil hui jo khushi hai<br><br>Tujhe paake haasil hui jo khushi hai<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br><br><br>Jo khwabon khayalon mein socha nahin tha<br><br>Tune mujhe itna pyaar diya<br><br>Main jab bhi jahaan bhi<br><br>Kadi dhoop mein tha<br><br>Teri zulf ne mujh pe saya kiya<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br><br><br>Haan tu hai, haan tu hai<br><br>Meri baaton mein tu hai<br><br>Meri khawaabon mein tu<br><br>Yaadon mein tu<br><br>Iraadon mein tu hai<br><br>Iraadon mein tu hai<br><br>16 JAN 2020, 00:15Ticket for journey to vaishno devi scheduled for 14th feb. She asked her brother to join us on that day.. But when she asked me for my choice I refused by saying kabab me haddi.&nbsp;<br><br><br><br>As I asked same to mom that was not acceptable to her. She started quarreling for point that she wants to manage her whole clan.. This is not acceptable for me to carry her whole clan<br><br>16 JAN 2020, 09:59The situations are reoccurring. This is less because of her stubbornness but more because of my misfortune. I can't get a desired better half. She also want to go against my will. She is surrounded by selfish and greedy people.&nbsp;<br><br><br><br>Let Ram bless me.<br><br>17 JAN 2020, 09:49<br><br>0:27I slapped her because she was replying on my subsequent talks.. I had warned several times to refrain from this kind of situations...<br><br>2:03<br><br>18 JAN 2020, 16:32<br><br>20 JAN 2020, 03:04She had informed her elder uncle for 17jan incident. He will check this once coming at our home<br><br>24 JAN 2020, 10:03I am not able to stop chewing.&nbsp;<br><br><br><br>In office I have been made involved with such KRA issue which was occurring from November 2019. People are now blaming me and due to my \"get trapped\" attitude I am feeling fear of job loss.&nbsp;<br><br><br><br>2 or 3 clashes have been occurred with sr mgr, deepak, team using kra.&nbsp;<br><br><br><br>Still issue resolution will take one more week time. Let's see what Ram has decided to me.New way to alternative job profile would be to become a data scientist.&nbsp;<br><br><br><br>I am listening tutorials for the same.&nbsp;<br><br><br><br>Ram you are universal Victorian<br><br>17 FEB 2020, 12:2914 feb ko wife ke sath vaishno devi gaye..&nbsp;<br><br><br><br>Major mistake ye ki ki himkoti par pay phone booth se kahi call ki aur fir 2 km baad miliYe khud galati kare aur koi inko galat na banaye.. Aur koi dusra galati ki jimmedari lele.. To sab thik lagta hai vandana ko<br><br>24 FEB 2020, 05:41I want to improve my life but if I quit bads for just six hours I become impatient.. How would I quit..&nbsp;<br><br><br><br>Wife is angry.. My family is in tension..&nbsp;<br><br><br><br>I can not understand my sister is happy or not..<br><br>25 FEB 2020, 09:11Vandana hum tumse gussa hain..&nbsp;<br><br><br><br>Hum tumhare liye khud ko badalna chahte hain.. To hum bhi to kuch mang sakte hain na..&nbsp;<br><br><br><br>Aaj tumko likh ke apni baat samjhana chahte hain.. So please try to understand and let me know agar tumko meri baat samajh na aaye..&nbsp;<br><br><br><br>Hum chahte hain ki<br><br><br><br>&nbsp;1.tum apni ghar ki duties samjho aur uske hisab se apna timing change karo..&nbsp;<br><br><br><br>2. Raat me time se so jao taaki sabere time se uth sako aur agar hum time se nahi uthey to humko utha do..&nbsp;<br><br><br><br>3. Dost saheli se baat din me kar lo.. Raat sirf humare sone aur personal life ke liye rakho.. Din me time nikal ke rest kar lo..&nbsp;<br><br><br><br>Aur bhi baat karni hai.. Par abhi ek baar me sab baate nahi ho sakti..&nbsp;<br><br><br><br>Try to understand and let me know if still I am not able to make clear my thoughts to you..&nbsp;<br><br><br><br>Sorry agar meri baat tumko achi nahi lage<br><br><br><strong>=================================================================</strong><br>27 FEB 2020, 06:08Why I chew?&nbsp;<br><br><br><br>One of the reasons is I feel anxiousness and angriness if I have not consumed for 6-7 hours.. My behave get changed.. &nbsp; And if I get chance for going out I feel it becomes tough to resist my chewing tender<br><br><strong>=================================================================</strong><br>SUN 00:52Photo<br><br>25 April 2020 ko fir se raat bhar jagayi.. Sab ko peri.. Ense puchiye na kahe jhagra hota hai<br><br>25 April 2020<br><br>Vandana pahle humko akele me bula ke aur phir khaini gutkha ko bahana kar ke hum se jhagra ki. 2:30pm se raat bhar papa maa aur humse jhgra ki.<br><br><br><br>Vandana ke allegations&nbsp;<br><br>1. Humko kyu jhakjhore<br><br>2. Aage kaise chalega<br><br>3. Humko bole ki wo sundar thi<br><br>4. Aap humare bhai Satyam ko kyu block kiye<br><br>5. Humko aap paisa kyu nahi dijiyega, ye humara adhikaar hai.&nbsp;<br><br>6. 10 din thik rahte hain phir jhagra karte hain<br><br>7. Humare relatives se baat nahi karte hain.&nbsp;<br><br><br><br>&nbsp;Mere allegations<br><br>1. Ye hum ko akele me bula ke jhagda karti hai<br><br>2. Paisa mangti hai<br><br>3. Tum khana banao<br><br>10:45 pe iske papa ne mere papa ko call karke jaan ki dhamki di.&nbsp;<br><br>26 April 2020 ko papa ne isko bol diya ki tum mera thali mat dhona.&nbsp;<br><br>27 April ko din bhar maa se baat karke papa apna thali chor diye.<br><br>02-May-2020<br><br>1 may ko satyam se baat kiye they. usko baat baat me itna bole ki “Hum dusre roomme hain. Office ka kaam kar rahe hain.”&nbsp;<br><br>Satyam vandana se puch diya ki “Aap Jijaji alag alag rah rahe hain kya?”<br><br>Vandana ispe umad ke bahut boli. ye bhi boli ki pahli kharab nahi thi , premendra kharab hai. Anwarat bolti ja rahi thi. Hum ek sath bahut thappad mare.<br><br>Maa papa ne bahut samjhaya usko. abhi baar baar ro rahi hai.&nbsp;<br><br>Aaj ke jhagra ka karan “Aap Satyam se kyu kahe hum alag alag rah rahe hain?”.Isko bahana bana ke humko bahut&nbsp; sunai.<br><br><strong>=================================================================</strong><br>23 MAR 2020, 12:19<br><br><br>https://youtu.be/LUrrN6cEBRQ<br><br>https://www.youtube.com/watch?v=Kc-Xf_T7ctA&amp;feature=share<br><br>https://www.youtube.com/watch?v=Kc-Xf_T7ctA&amp;feature=share<br><br>25 April 2020 ko fir se raat bhar jagayi.. Sab ko peri.. Ense puchiye na kahe jhagra hota hai<br><br><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1bd84adf-5ad2-4c2a-b33e-93bccedd8734","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.082Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.082Z"},"uniqueId":"91f54713-8733-4228-8eb4-5e00c2613e7f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f0b2"},"name":"Should do Always keep in mind Teachings from 2017 Humko khud par bharosa hai. Humko","heading":"Should do Always keep in mind Teachings from 2017 Humko","smartContent":{"content":"<div><!--block--><strong>Should do</strong></div><ul><li><!--block--><strong>Always keep in mind</strong></li><li><!--block-->Teachings from 2017<ul><li><!--block--><strong>Humko khud par bharosa hai.</strong></li><li><!--block--><strong>Humko Maa-Papa par bharosa hai.</strong></li><li><!--block--><strong>Humko bhagwan par bharosa hai</strong></li></ul></li><li><!--block-->1st January 2018 Self-Inspiration<ul><li><!--block--><strong>Jo hoga accha hoga.</strong></li><li><!--block--><strong>Mera mann ab mera nahi hai. Ab ye Hanuman ji ka mann hai.&nbsp;</strong><ul><li><!--block-->Agar mera mann mujhey kuch galat karney ko kahta hai toh, hum usko Hanuman ji ke mann ke baat samjhenge. Agar kuch galat karney ka mann kar raha hai toh, kahenge ki \"Hanuman ji ko ye karney ka mann kar raha hai.\"&nbsp;<ul><li><!--block-->&nbsp;thodi der ke baad usko karney ka schedule karenge.&nbsp;<ul><li><!--block-->Kam se kam 5 - 30 minute for good and important works.</li><li><!--block-->For Bad works (MB, ciggerate, gutkha etc), minimum 2 ghanta baad ka time. Agar yaad raha aur time par yaad par gaya toh, us samay sochenge. Agar scheduled time (say 12:00 PM) paar ho gaya toh phir naya scheduled time after 2-3 hours.&nbsp;</li></ul></li></ul></li></ul></li><li><!--block-->Hum bure hain. Dusre mere baare me bura sochte hain, par accha bolte hain. Humko bhi accha bolna hai.</li><li><!--block--><strong>Man shant rakho, jo hona hoga vahi hoga.</strong>&nbsp;Bhagwan kabhi apne par dosh nahi lete. Hum jo karte hain usi ka fal samney aata hai. dimag se ye baat nikal do ki kuch bura hoga.</li><li><!--block--><strong>jab kisi biti ghatna ke upar man ghabraye ta bas ye kaho ki hanuman ji hum falanwa kaam galat ya sahi kar diye hain, khata me likh likh lijiyega aur kuch rebate ho to voh bhi kar dijiyega.</strong></li><li><!--block-->18-March-2018- New year of vikram samvat- From hanumanji mandir-<ul><li><!--block-->Apni ki gayi galati ke liye bhagwan se maafi mango. Bolo ki dubara nahi karenge. Agar dubara galati ho jaye toh fir maafi mango.</li></ul></li><li><!--block--><strong>6 May 2018 -</strong><ul><li><!--block-->Bhagwan ek badi si tasweer hai. Hum sab jeev usi tasweer ke chote chote bindu hain. Bhagwan hum sab me hai atma ki tarah, aur hum sab ka super set hi bhagwan hai.</li><li><!--block-->Humko sab jeevo ka aadar karna chahiye.</li><li><!--block--><strong>Humko Mann, Karm aur Vachan se bhagwaan ko yaad karna chahiye. Usney jo diya uske liye dhanyawaad karna chahiye aur us me khush rahna chahiye.</strong>&nbsp;<ul><li><!--block-->Mann bhawishya ka prateek hai, kahta hai ye karo, wo karo.</li><li><!--block-->Karm vartmaan ka prateek hai. Hume vartmaan me stheer rahna chahiye aur apne karm karney chahiye</li><li><!--block-->Vachan bhhot ya past ka prateek hai. Manushya wo bolna chahta hai jo ya usney kiya hai ya jisse wo prabhaveet hua hai aur aage karne ka mann bana raha hai.</li><li><!--block-->Manushya ko apney mann, karm aur vachan se ek hona chahiye.</li></ul></li></ul></li></ul></li><li><!--block-->Feb 24 2018<ul><li><!--block-->Jo hua accha hua, jo ho raha hai acha ho raha hai, jo hoga acha hoga.</li></ul></li><li><!--block-->Boldness ke sath rahenge.<ul><li><!--block-->Darenge nahi,</li><li><!--block-->Agar hum koi kaam nahi kar sakte, ya uske baare me nahi jante toh boldness ke sath accept karenge.</li></ul></li><li><!--block--><strong>Talk with all</strong>.<ul><li><!--block-->Keep your conversation short.Also Identify, when to stop, as samney wala aadmi aapka baat samajh gaya hai aur ab wo aage iss topic par baat nahi karega.&nbsp;</li><li><!--block-->Apni baat repeat mat karo</li></ul></li><li><!--block-->Gym karna hai.<ul><li><!--block-->Cycling, Cardio, Jumping on small stool, jumping over bench- These are regular exercise to increase stamina.</li><li><!--block-->Back-Monday, Chest - Tuesday, Arm - Wednesday, Tricep - Thursday, Shoulder -Friday, Thies/Legs - Saturday, Mix/Missing - Sunday.</li><li><!--block-->Do not eat outside food.</li></ul></li><li><!--block-->Office me<ul><li><!--block-->Junior couleagues ko apne sawalo ke jawab dene ke liye kahna hai. Unko feel karna hai ki humko bypass karke nahi ja sakte wo log. Apne task me sabse jyada knowledge hum ko hi hai.</li><li><!--block-->Seniors se summarize way me apna problem batate rahna hai.</li></ul></li><li><!--block-->Ghar me&nbsp;<ul><li><!--block-->Humko papa se, maa se, bhai se, bahan se koi baat nahi karni hai.</li></ul></li><li><!--block--><strong>Daily Routine</strong><ul><li><!--block-->subah, dopahar aur raat ke khaney ke alawa kuch bhi nahi khayenge. Paani bharpoor piyenge</li></ul></li><li><!--block--><strong>16-07-2012</strong><ul><li><!--block--><strong><em>chhoro na kaam, Bisoro na Ram</em></strong></li></ul></li></ul><div><!--block--><strong>Should refrain</strong></div><ul><li><!--block-->Be others over on me. (Haawi nahi hone dena hai.)</li><li><!--block-->Darenge nahi, confront karenge.</li><li><!--block-->Avoid all activities, which I can not justify to seniors as what I did in that, or&nbsp;<strong>Why I invested my time there</strong>, for example<ul><li><!--block-->Helping any team member for his issue, but found no solution for that at all that day. Wo kisi se shikayat kar sakta hai ki mainey usko solution nahi provide kiya. Also hum upar justify nahi kar sakte ki mainey uski help ki.</li></ul></li><li><!--block-->Agar dusre mujhey mere kaam ke bich me kuch puchte hain ya karney ko kahte hain toh , hum unko \"let me check\" kah sakte hain.</li><li><!--block-->Khud se karne ka try karna aur successfully complete karney ke baad uska khud dhindhora pitna, wo bhi galat jagah par-- isse nuksan hi hoga. == isse bacho</li><li><!--block-->Chupchap sunna, fir galat jagah par bolna-- isse bachna chahiye.</li></ul><div><!--block--><br><br><br></div><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1d21527e-4878-41a2-a65a-980d96e51203","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.112Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.112Z"},"uniqueId":"2ab70b56-2b6b-4189-a0aa-ea17096e55a7","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f0b4"},"name":"My oaths Never expect. just do what best i can, give result, document it and","heading":"My oaths Never expect. just do what best i can,","smartContent":{"content":"<div><!--block-->My oaths</div><ul><li><!--block-->Never expect. just do what best i can, give result, document it and forget.</li><li><!--block-->Agar hum niche likhi baatein nahi follow kar paate toh , dusra/teesra attempt lenge.</li><li><!--block--><strong>Home</strong><ul><li><!--block-->Subah 5:00 AM- 6:00 AM tak uth jayem</li><li><!--block-->Raat me 7-9 PM ke bich me office se nikal jayem. 8-10 PM ke bich me ghar aa jayem.</li><li><!--block-->Subah me 6:30 AM tak gym chal jayem aur 7:30 AM tak ghar aa jayem.</li><li><!--block-->Subah me 8:30 AM tak office ke liye ready ho jayem.</li><li><!--block-->Hum Gutkha Ciggerate use na karem. Khaini wo bhi raat me use karem.</li><li><!--block-->Roz 1 ghanta personal study karem.</li></ul></li><li><!--block-->110-200 rupiya me ek din ka office expense karem.</li><li><!--block--><strong>Office</strong><ul><li><!--block-->Office me agar koi kaam deta hai toh&nbsp;<ul><li><!--block-->question karenge&nbsp;</li><li><!--block-->requirement samjhenge.</li><li><!--block-->Initial requester kon hai ye pata karenge, fir data direct usi ko de denge.</li><li><!--block-->Agar kaam me koi challenge dikh raha hai toh, bol ke, mail kar ke, skype kar ke batayenge.</li></ul></li><li><!--block-->Office me apne personal matter ka baat karem.<ul><li><!--block-->Sanjay, Naresh, Sheikh, Somen, Amit Tyagi se kar sakte hain,</li><li><!--block-->Other than above kisi se na</li></ul></li><li><!--block-->Office me jo kaam humra tough laga ta khul ke bol dem</li><li><!--block--><br></li></ul></li><li><!--block--><br></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"1d21527e-4878-41a2-a65a-980d96e51203","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.117Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.117Z"},"uniqueId":"59002223-3c0f-4b3e-bc40-1a7cb15c64a0","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f129"},"name":"Good effect dene wali chijein Laung/Clove Isko khakar, burai bahar nikalti hai Bhawan ka bhajan","heading":"Good effect dene wali chijein Laung/Clove Isko khakar, burai bahar","smartContent":{"content":"<div><!--block--><strong>Good effect dene wali chijein</strong></div><ul><li><!--block-->Laung/Clove<ul><li><!--block-->Isko khakar, burai bahar nikalti hai</li></ul></li><li><!--block-->Bhawan ka bhajan<ul><li><!--block-->Karodo log isko kar ke man me shanti feel karte hain.</li></ul></li><li><!--block-->Chai<ul><li><!--block-->Isme nicotine bhi hai, par ye hum socially pi sakte hain. Isko pi ke bhi mann shant ho jata hai.</li></ul></li><li><!--block--><strong>Anulom-Vilom</strong><ul><li><!--block-->isse mann shant hota hai.</li></ul></li><li><!--block-->Maa Papa se baat<ul><li><!--block-->Maa Papa se baat karke acha lagta hai.&nbsp;<ul><li><!--block-->Baat karne ke dauran positive baatein sochna acha lagta hai.</li></ul></li></ul></li><li><!--block-->Hanuman chalisa paath</li><li><!--block-->Hanuman chalisa mantra ka manan<ul><li><!--block-->Sankat se Hanuman Churawe, man karm vachan dhyan jo lawe.</li><li><!--block-->Sankat kate mite sab pira, jo sumire hanumat balweera.</li></ul></li><li><!--block-->Koi acchi purani event par discussion.</li><li><!--block-->Good future plan.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"d8f99041-4303-49f7-bf1c-2e75e300536e","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.135Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.135Z"},"uniqueId":"4697dda5-3219-41f1-a550-189411fb3b97","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f12b"},"name":"Bad effect dene wali chijein Inka sewan kar ke thori der ke liye shanti milti","heading":"Bad effect dene wali chijein Inka sewan kar ke thori","smartContent":{"content":"<div><!--block--><strong>Bad effect dene wali chijein</strong></div><ul><li><!--block-->Inka sewan kar ke thori der ke liye shanti milti hai, but baad me guilty feel hota hai.</li><li><!--block-->All narcotics<ul><li><!--block-->Names<ul><li><!--block-->Khaini</li><li><!--block-->Gutkha</li><li><!--block-->Ciggerate</li><li><!--block-->Sharab</li></ul></li><li><!--block-->Inko khakar instant relief milta hai, but long term me suffering feel hoti hai.</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d8f99041-4303-49f7-bf1c-2e75e300536e","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.14Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.14Z"},"uniqueId":"3d25eff6-b116-432e-b1cc-4d70cc877c0b","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f1a0"},"name":"Fear Feel extremly cold.","heading":"Fear Feel extremly cold.","smartContent":{"content":"<div><!--block-->Fear</div><ul><li><!--block-->Feel extremly cold.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e738ab7f-8b43-462b-a1b1-cda564f4e6af","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.159Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.159Z"},"uniqueId":"bccdec6c-c71b-4286-a5b5-8c32a29a950d","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f1a2"},"name":"Shame/Sorrow/Deep thinking Mind is revolving","heading":"Shame/Sorrow/Deep thinking Mind is revolving","smartContent":{"content":"<div><!--block-->Shame/Sorrow/Deep thinking</div><ul><li><!--block-->Mind is revolving</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e738ab7f-8b43-462b-a1b1-cda564f4e6af","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.164Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.164Z"},"uniqueId":"d38230ce-1896-41f3-abff-533a592b6fc6","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f1a4"},"name":"Tiredness Mind is revolving Feeling sleepy","heading":"Tiredness Mind is revolving Feeling sleepy","smartContent":{"content":"<div><!--block-->Tiredness</div><ul><li><!--block-->Mind is revolving</li><li><!--block-->Feeling sleepy</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e738ab7f-8b43-462b-a1b1-cda564f4e6af","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.168Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.168Z"},"uniqueId":"1301ac75-bfc4-4dc3-8ed5-698b9fd17e5e","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f219"},"name":"\"Luckily .. ye kaam ho gaya\" Uparwale ki daya se ... Bhagwan ki daya se","heading":"\"Luckily .. ye kaam ho gaya\" Uparwale ki daya se","smartContent":{"content":"<ul><li><!--block-->\"Luckily .. ye kaam ho gaya\"<ul><li><!--block-->Uparwale ki daya se ...</li><li><!--block-->Bhagwan ki daya se</li><li><!--block-->Maa bhagwati ki kripa se..</li></ul></li><li><!--block-->Humse ye galati ho gayi.. {bol ke expect karte hain ki log bole ki koi baat nahi..}<ul><li><!--block-->Ha hum try kiye.. itna hua par baaki nahi ho paya ....&nbsp;<strong>kya karna hai aage</strong></li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e7f723d3-f419-49c7-a4c1-6f1e6508a9d0","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.188Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.188Z"},"uniqueId":"6f0140b1-cdb1-4a17-8f5f-ac76f1442ebe","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f28e"},"name":"Sunil Chacha 1) Arvind Gupta Home near Mashrakh, Siwan/Chapra 2 daughters Contact @09999980392 Sunil chacha","heading":"Sunil Chacha 1) Arvind Gupta Home near Mashrakh, Siwan/Chapra 2","smartContent":{"content":"<div><!--block--><strong>Sunil Chacha<br><br>1) Arvind Gupta&nbsp;</strong></div><ul><li><!--block-->Home near Mashrakh, Siwan/Chapra</li><li><!--block-->2 daughters</li><li><!--block-->Contact @09999980392</li><li><!--block-->Sunil chacha ke sala</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e49f1861-7854-4d80-b45d-fb50c1293c66","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.208Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.208Z"},"uniqueId":"bd276145-5bd1-45a6-9214-0fb36622508c","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f290"},"name":"Papa Sons of late Shri Mangal sah (Kolhuarwa wale dada) Bipin Chacha aka Sadhu Chacha","heading":"Papa Sons of late Shri Mangal sah (Kolhuarwa wale dada)","smartContent":{"content":"<div><!--block--><strong>Papa</strong></div><ul><li><!--block-->Sons of late Shri Mangal sah (Kolhuarwa wale dada)<ul><li><!--block--><strong>Bipin Chacha aka Sadhu Chacha</strong></li><li><!--block-->Dhruv Chacha</li><li><!--block-->Nawal Chacha</li><li><!--block-->Suresh Chacha</li><li><!--block-->Nirmala fua</li></ul></li><li><!--block-->Sons of Shri Nagina sah (Sati mandir wale dada)<ul><li><!--block-->Kanhaiya Chacha</li><li><!--block-->NandKishore Chacha</li><li><!--block-->Ananad chacha aka Bhultush chacha</li><li><!--block-->Munna chacha</li><li><!--block-->Lalan chacha</li><li><!--block-->Radha fua</li><li><!--block-->Sita fua</li></ul></li><li><!--block-->Sons of late Shri Chandu Sah<ul><li><!--block-->Bhola Prasad (Papa)</li><li><!--block-->Kaushalya devi (Meri apni fua)</li><li><!--block-->Sajay chacha</li><li><!--block-->Sunil chacha</li><li><!--block-->Munna fua</li><li><!--block-->Pinki fua</li><li><!--block-->Sudha fua</li></ul></li><li><!--block-->Sons of bade dada (Sitaram sah)<ul><li><!--block-->Shankar chacha</li><li><!--block-->late Rajendra chacha<ul><li><!--block-->Om Prakash bhaiya</li></ul></li><li><!--block--><br></li></ul></li></ul><div><!--block--><strong><br></strong><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"e49f1861-7854-4d80-b45d-fb50c1293c66","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.213Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.213Z"},"uniqueId":"dc257863-c3b4-493e-8c2f-8e6c3c6abf29","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f292"},"name":"Maa 1)Kanhaiya mama 2)Chiranjivi mama 3)late Binay mama 4)Vijay mama 5) Sunita Mausi 6) Anita","heading":"Maa 1)Kanhaiya mama 2)Chiranjivi mama 3)late Binay mama 4)Vijay mama","smartContent":{"content":"<div><!--block--><strong>Maa<br><br>1)Kanhaiya mama<br>2)Chiranjivi mama<br>3)late Binay mama<br>4)Vijay mama<br>5) Sunita Mausi<br>6) Anita Mausi<br>7) Geeta Mausi</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e49f1861-7854-4d80-b45d-fb50c1293c66","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.218Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.218Z"},"uniqueId":"c0b83fb2-da02-405f-8d6d-d1fc026e3eeb","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f294"},"name":"Sudha Fua Sasural - Beldarwa, near Bettiah. Fufa ji ke bijli khambha ke tendor ka","heading":"Sudha Fua Sasural - Beldarwa, near Bettiah. Fufa ji ke","smartContent":{"content":"<div><!--block--><strong>Sudha Fua</strong></div><ul><li><!--block-->Sasural - Beldarwa, near Bettiah.&nbsp;</li><li><!--block-->Fufa ji ke bijli khambha ke tendor ka kaam hai.</li><li><!--block-->Papa ko rimi ke liye help karney ke liye bole hain</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e49f1861-7854-4d80-b45d-fb50c1293c66","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.224Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.224Z"},"uniqueId":"4e28af78-be06-4f01-ab17-83b83a6bf6d6","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f309"},"name":"10-July-2018 Cig-Gutkha-MB- ko chorna chahta hu, Bhagwan aur apne karm me dhyan lagana chahta hu.","heading":"10-July-2018 Cig-Gutkha-MB- ko chorna chahta hu, Bhagwan aur apne karm","smartContent":{"content":"<div><!--block--><strong>10-July-2018</strong></div><ul><li><!--block-->\t\tCig-Gutkha-MB- ko chorna chahta hu, Bhagwan aur apne karm me dhyan lagana chahta hu.</li><li><!--block-->\t\t100 LPA ke pakage aur family ke pass rahna chahta hu, apna business karna chahta hu</li><li><!--block-->\t\tOffice timings flexible ho, cooperative cowerkers ho</li><li><!--block-->\t\tAmerica/dusre desh ghumna chahta hu</li><li><!--block-->\t\tSunder patni ho, cooperative ho, uske pariwar wale baat manne wale ho, do bacche ho ek ladki aur ek ladka.</li><li><!--block-->\t\tNarendra Rimjhim ki shaadi acchi jagah ho jaye</li><li><!--block-->\t\tMaa Papa acche se aur surakshit rahe</li><li><!--block-->\t\tSociety me sab humse cooperative rahe</li></ul><div><!--block-->\t\t</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"f1fcc4ae-16b5-4881-b527-8fc77895d8e7","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.242Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.242Z"},"uniqueId":"3595bbee-3f21-40eb-93a1-89f664d48438","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f4d5"},"name":"The most challenging thing about being a manager is also the most rewarding. It is","heading":"The most challenging thing about being a manager is also","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>The most challenging thing about being a manager is also the most rewarding. It is easy to handle your own personal performance, however as a manager you are responsible for your teams. So you must continually measure their performance, set clear expectations, goals, motivate them, and keep them focused. It is a great feeling to be able to accomplish this.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"023c61a0-ffdb-4a86-9c89-4190afa2a40a","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.311Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.311Z"},"uniqueId":"94605888-e0a3-40ea-be66-57ef6fea35b9","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f53c"},"name":"I prioritize my task by what is most important and urgent to least important and","heading":"I prioritize my task by what is most important and","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I prioritize my task by what is most important and urgent to least important and urgent. If there are some tasks that I can assign to others, I will also delegate.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e59a3d13-f9cc-4155-a52f-cfd0a94a44b9","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.327Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.327Z"},"uniqueId":"e18e5d8a-d511-4bf5-94f7-828dcf08c86f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f5a3"},"name":"I am flexible to my work environment. I can adapt to almost any situation.","heading":"I am flexible to my work environment. I can adapt","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I am flexible to my work environment. I can adapt to almost any situation.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"be79a92b-4b06-409f-92e9-6ee6efedc135","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.344Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.344Z"},"uniqueId":"01165f41-5022-4148-9386-cf135a1ea9d5","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f60a"},"name":"I know the importance of getting work done in a timely manner. So when I","heading":"I know the importance of getting work done in a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I know the importance of getting work done in a timely manner. So when I need to, I will take work home with me.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f803333d-bfdc-4156-84c7-34184da7cb15","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.36Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.36Z"},"uniqueId":"16f131c7-480b-46f7-87fe-a07f26e5c95a","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f671"},"name":"I wanted to join a company like ABC that values their employees and helps them","heading":"I wanted to join a company like ABC that values","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I wanted to join a company like ABC that values their employees and helps them achieve their potential. This position is a great fit for my current skills so I will be able to contribute to the company immediately. There is also an opportunity to continue to develop my abilities to the next level and help in company’s continued success.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"df300f86-0cad-404e-828b-b46ee9c17417","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.377Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.377Z"},"uniqueId":"50739723-17ee-43af-b57c-a908eda1963f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f6d8"},"name":"? ? They would say that I’m straight-forward and my actions are aligned with the","heading":"? ? They would say that I’m straight-forward and my","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><a href=\"https://cdn.career.guru99.com/wp-content/uploads/2012/05/Management_Interview_Questions.jpg\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:400,&quot;url&quot;:&quot;https://cdn.career.guru99.com/wp-content/uploads/2012/05/Management_Interview_Questions.jpg&quot;,&quot;width&quot;:266}\" data-trix-content-type=\"image\" data-trix-id=\"962\" contenteditable=\"false\"><img src=\"https://cdn.career.guru99.com/wp-content/uploads/2012/05/Management_Interview_Questions.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/962/963/https://cdn.career.guru99.com/wp-content/uploads/2012/05/Management_Interview_Questions.jpg\" width=\"266\" height=\"400\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></a></div><div><!--block--><br></div><div><!--block--><br>They would say that I’m straight-forward and my actions are aligned with the goals of the company. They would say that I am an open communicator and give them the tools they need to succeed.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"018650be-cdae-44b8-9577-82ef1e57c05e","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.393Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.393Z"},"uniqueId":"ab8ecbe8-156a-42eb-9953-5b692bdf7b0f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f73f"},"name":"A successful manager must also be a leader because that is how you can motivate","heading":"A successful manager must also be a leader because that","smartContent":{"content":"<div><!--block--><br>A successful manager must also be a leader because that is how you can motivate and influence your employees to perform at their peak ability. A manager must also have a vision of where to take the team and company.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fdaba115-30d8-4d6b-a48d-505418e5a478","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.41Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.41Z"},"uniqueId":"6b4ff904-b699-4658-a2bf-75969ff46e86","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f7a6"},"name":"I believe that as a leader, I have to be the one who is constantly","heading":"I believe that as a leader, I have to be","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I believe that as a leader, I have to be the one who is constantly driving an atmosphere of positivity and focus. I make sure that I am acting and saying positive things around my employees. I remind them daily of the goals and celebrate as we accomplish them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"445704eb-2e53-499c-a112-9f217d0200eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.428Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.428Z"},"uniqueId":"5cc997c5-110f-4c58-8469-2b9f929f27a9","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f80d"},"name":"I try to match up the strengths of my employees with the task or if","heading":"I try to match up the strengths of my employees","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I try to match up the strengths of my employees with the task or if it is something they are learning. If it is the latter, I will provide support and check in to ensure that it’s completed correctly. With an employee that is strong in the task, I will check in periodically. Either way, I set up milestones for the employee to let me know how they are progressing.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"550b9f74-130a-44de-b2a5-efeee1deff8b","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.445Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.445Z"},"uniqueId":"73fb174b-8ce6-4b5d-848c-3bb00d8c397f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f874"},"name":"I clearly communicated the reward and the goal to the staff and ensured they understood","heading":"I clearly communicated the reward and the goal to the","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I clearly communicated the reward and the goal to the staff and ensured they understood how to win the reward. Then on a daily basis, each employee had to keep track of their progress with the rest of the team. That kept each member personally accountable for the reward. This gave an additional motivational piece for them to complete the goal.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8cce858b-6707-4a8a-9fb5-6e62dfb73cc2","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.461Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.461Z"},"uniqueId":"3e4a43a5-cd19-4663-bbeb-4ce86165eeb6","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f8db"},"name":"I have started multiple projects at one time. I know that it is more productive","heading":"I have started multiple projects at one time. I know","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br></div><div><!--block--><br><br></div><div><!--block--><br>I have started multiple projects at one time. I know that it is more productive to complete one task at a time. So anytime I catch myself doing this, I take a step back and prioritize my work.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb65aa3f-9f5c-4947-ab4c-109062cea482","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.479Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.479Z"},"uniqueId":"97f51507-6b96-43fb-b4f6-065080812c6b","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f942"},"name":"I keep a steady pace. This way I am being efficient with my time and","heading":"I keep a steady pace. This way I am being","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I keep a steady pace. This way I am being efficient with my time and going at a pace that I do not make mistakes.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"17478c9c-065d-45a2-9264-92d53664158c","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.494Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.494Z"},"uniqueId":"006db191-656f-4502-af51-b17bd6f98209","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1f9a9"},"name":"It will be to build the relationship with my employees because that will take time","heading":"It will be to build the relationship with my employees","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>It will be to build the relationship with my employees because that will take time . However, I also feel it is one of the most rewarding part of this position. I enjoy relationship-building and helping others achieve success.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"134d5c63-815d-4cfc-bacf-f329be38891e","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.509Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.509Z"},"uniqueId":"ab8fd541-ab6b-4f7d-ae00-52f5ccfce25b","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fa10"},"name":"(Refer to the job description for this question) You need a manager who is confident,","heading":"(Refer to the job description for this question) You need","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>(Refer to the job description for this question) You need a manager who is confident, goal-driven, and can motivate your team. I have those qualities and will be able to take the team to the next level that your organization needs.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"22456087-77e1-4f33-85f3-bdf6c8fd8261","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.525Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.525Z"},"uniqueId":"9da31252-803e-4a28-b0cd-3436992f7dc6","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fa77"},"name":"I continually read book about the subject matter. I listen to feedback that I receive","heading":"I continually read book about the subject matter. I listen","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I continually read book about the subject matter. I listen to feedback that I receive from my leaders and implement them. When opportunities arise that will provide a challenge to my current skills, I will take on the task.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"13c3b434-b60b-4251-973d-f32e47001a22","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.542Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.542Z"},"uniqueId":"6ac5ed19-779a-4ab7-8df3-be9580f47b28","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fade"},"name":"To have a diverse group of people who have a basis of trust and respect","heading":"To have a diverse group of people who have a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>To have a diverse group of people who have a basis of trust and respect for each other. The communication level must be high and the ability to work together as a team.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9b4045b1-a870-441a-b06e-2ab83aa0c433","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.559Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.559Z"},"uniqueId":"6bf04da7-7ec2-4612-a950-63c868797efb","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fb45"},"name":"Yes, I have set budgets in the past. I look at what the typical cost","heading":"Yes, I have set budgets in the past. I look","smartContent":{"content":"<div><!--block-->Yes, I have set budgets in the past. I look at what the typical cost for a certain activity would be based on history or other manager’s experience. I set the budget based on these metrics.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"86153c01-f62a-4cec-8858-b6505756e8cf","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.583Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.583Z"},"uniqueId":"6c9f6900-2e3a-4a89-b3be-47259a972a05","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fbac"},"name":"Some of the paperwork that I would handle for another department on an occasional basis.","heading":"Some of the paperwork that I would handle for another","smartContent":{"content":"<div><!--block-->Some of the paperwork that I would handle for another department on an occasional basis.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ba6152e5-314d-402f-adfd-7a6a79a7672f","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.599Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.599Z"},"uniqueId":"0914434c-eaf0-4242-aa74-5db27cbb579f","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fc13"},"name":"I will contribute my experience and knowledge . I have vision. I am experienced in","heading":"I will contribute my experience and knowledge . I have","smartContent":{"content":"<div><!--block-->I will contribute my experience and knowledge . I have vision. I am experienced in the areas that this company will need to grow and I have a plan that will facilitate that growth.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"77ca72d5-5cc8-4462-b059-59a97139b552","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.615Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.615Z"},"uniqueId":"b0a31331-7b11-4760-9597-4ec22748fabe","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fc7a"},"name":"(Tie this to the attributes of the position) My greatest strength would be my ability","heading":"(Tie this to the attributes of the position) My greatest","smartContent":{"content":"<div><!--block-->(Tie this to the attributes of the position) My greatest strength would be my ability to drive my team to excellence. I give them all the tools they need to be successful, communicate on an open level, and constantly evaluate performance.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a2f6c369-3d8a-4764-aab0-cbe311baafa0","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.631Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.631Z"},"uniqueId":"04c1f1d7-4ef6-475a-a166-e791351f4878","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fce1"},"name":"I would state the news, the reasons behind the news/decision, and I would focus on","heading":"I would state the news, the reasons behind the news/decision,","smartContent":{"content":"<div><!--block-->I would state the news, the reasons behind the news/decision, and I would focus on the positives. I would also take time to ask for any questions or feedback and answer accordingly.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"81879343-480b-47dc-9d93-58d1902343b0","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.646Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.646Z"},"uniqueId":"76943fea-6899-4107-a481-0c46b046b8e7","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fd48"},"name":"I will have an initial one on one meeting with the new employee to let","heading":"I will have an initial one on one meeting with","smartContent":{"content":"<div><!--block-->I will have an initial one on one meeting with the new employee to let them know what my expectations are and also learn about how they like to be managed. That way I will understand how to be effective when I communicate with them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"147b0df4-9700-430c-81d7-05ff29970359","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.662Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.662Z"},"uniqueId":"792c7faa-a5eb-4592-bba2-d9d4dc4d89dc","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fdaf"},"name":"I make sure that there are no distractions when I am speaking to the employee.","heading":"I make sure that there are no distractions when I","smartContent":{"content":"<div><!--block-->I make sure that there are no distractions when I am speaking to the employee. We will meet on a one-on one basis and I will clearly state what the expectation is. I will ask if they have any questions and ask them to re-state it so we are on the same page.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fda3d9a7-79d1-48d4-a34e-1098c10f6506","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.678Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.678Z"},"uniqueId":"7707b6de-3d83-493e-85a8-a5f3e01a0da0","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fe16"},"name":"I will go over what the expectation of their performance is and show them where","heading":"I will go over what the expectation of their performance","smartContent":{"content":"<div><!--block-->I will go over what the expectation of their performance is and show them where they are currently at. I will ask them what they think they can do to help improve their performance. Depending on what their response is, I will offer additional suggestions and reinforce my confidence that their performance will improve if they take those actions. At the end of the conversation, I would set the expectation that their performance must improve.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"865096ab-e913-41fe-b5fe-d9d9842b6cd7","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.695Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.695Z"},"uniqueId":"854b2bd8-f3e0-47ee-a4e2-a7e70874f389","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fe7d"},"name":"Me and the employee, together , will create achievable goals based on the company goals","heading":"Me and the employee, together , will create achievable goals","smartContent":{"content":"<div><!--block-->Me and the employee, together , will create achievable goals based on the company goals and their own personal goals. On a regular basis I will give feedback to my employees on how they are performing.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a63b9534-39e9-44e8-827f-896f4d22b03a","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.711Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.711Z"},"uniqueId":"fa7d76cb-84b8-4bad-ad63-4f34b3bd2651","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1fee4"},"name":"I would show them their performance history so they can see the drop in their","heading":"I would show them their performance history so they can","smartContent":{"content":"<div><!--block-->I would show them their performance history so they can see the drop in their performance. I would then ask them why it has changed. I would reaffirm my commitment to help the employee get back on track and offer actionable steps. I would ask for the employee’s input as well and draw an action plan for improvement based on this.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7db08a39-4674-4fb2-8335-1d8a972bf3df","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.727Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.727Z"},"uniqueId":"afc54a4f-cdd8-4255-bdbd-591d44fdc658","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1ff4b"},"name":"I would meet them all on a one on one basis as soon as possible.","heading":"I would meet them all on a one on one","smartContent":{"content":"<div><!--block-->I would meet them all on a one on one basis as soon as possible. I would use that time to get to know each employee individually. I would ask them what their strengths and what they want out of manager. That way I can adjust my style to each employee accordingly.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"94f05e73-40ec-421d-b199-38772485f5b9","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.742Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.742Z"},"uniqueId":"7eb61e1b-5710-4a2a-a504-0227d0319d4a","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b1ffb2"},"name":"I would diffuse the situation by speaking to each employee individually about the situation. After","heading":"I would diffuse the situation by speaking to each employee","smartContent":{"content":"<div><!--block-->I would diffuse the situation by speaking to each employee individually about the situation. After understanding each side, I would come up with some mutual solutions for the conflict. I would then bring the employees together and mediate a resolution.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6016b715-7f3d-4979-8a35-502607f6e542","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.758Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.758Z"},"uniqueId":"641991a0-a827-4cb4-a26f-20fd977354a3","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20019"},"name":"I take failure as a learning experience. I go back and understand why I failed.","heading":"I take failure as a learning experience. I go back","smartContent":{"content":"<div><!--block-->I take failure as a learning experience. I go back and understand why I failed. That way I can ensure that I don’t make the same mistakes again.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"93c10781-37ac-4174-bfd4-7bee53311a55","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.773Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.773Z"},"uniqueId":"0eeaf277-0dc5-4853-9ded-a6ba37dd2fd3","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20080"},"name":"I find out as much as possible about the problem. Then I look at all","heading":"I find out as much as possible about the problem.","smartContent":{"content":"<div><!--block-->I find out as much as possible about the problem. Then I look at all possible solutions. If there are others who may have some valuable input, I will also find out what their thoughts are. Based on this information, I will choose the course of action that will be the most effective.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6b273a28-40de-40ad-b07d-e6d9e6260dd5","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.789Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.789Z"},"uniqueId":"5ed36a2f-042c-4385-b18c-775980049747","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b200e7"},"name":"I would use Monday to come in early and prioritize my work for the week.","heading":"I would use Monday to come in early and prioritize","smartContent":{"content":"<div><!--block-->I would use Monday to come in early and prioritize my work for the week. I will set up deadlines and goals for each day of the week. I would make sure that I leave time each day for tasks that may come up. That way, I have a plan of attack for each day of the week and also time to handle unexpected activities.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"81ddb6d7-89d6-4621-9364-65646b6c5324","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.805Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.805Z"},"uniqueId":"e01b751e-462f-49f7-a82c-05b3080d1487","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b2014e"},"name":"I am a relationship builder. I get to know my employees and gain their trust","heading":"I am a relationship builder. I get to know my","smartContent":{"content":"<div><!--block-->I am a relationship builder. I get to know my employees and gain their trust and confidence. I am very direct and to the point in my communication style so there is no ambiguity in my messages.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"290948df-621b-40ba-a866-2d6186778568","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.82Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.82Z"},"uniqueId":"0924c93b-a996-49cd-94d7-363902150907","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b201b5"},"name":"I would have given them the opportunity to improve their performance first and set those","heading":"I would have given them the opportunity to improve their","smartContent":{"content":"<div><!--block-->I would have given them the opportunity to improve their performance first and set those expectations. In this conversation, I would also ensure they understand what will happen if they do not improve their performance. However if they are still under-performing, I would refer to the guidelines of the organization first to take the necessary action steps. Then I would meet with the employee and show them how they have not been performing. I would tie that to the action steps that are necessary from this point. We would then set expectations and a plan to improve performance. If the performance issues continue, then we will continue the disciplinary steps.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"961dd09d-316d-46f6-bae6-5b4b548b4e84","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.835Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.835Z"},"uniqueId":"c99028a7-f00d-4d1d-8087-8bf4a5e3293d","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b2021c"},"name":"I get to know each person on an individual level so I can adjust my","heading":"I get to know each person on an individual level","smartContent":{"content":"<div><!--block-->I get to know each person on an individual level so I can adjust my style to suit each person effectively. Its a positive thing to have people with different personalities because you can get a lot of different viewpoints that are valuable for ideas and decision-making.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c143625f-f99e-4612-aeee-91d90f528efc","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.851Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.851Z"},"uniqueId":"47003317-3571-4ccf-b03e-75f6f01ece96","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20283"},"name":"When a change occurs, I ensure that I have all the information about it first.","heading":"When a change occurs, I ensure that I have all","smartContent":{"content":"<div><!--block-->When a change occurs, I ensure that I have all the information about it first. I understand all the implications and the possible reactions to the change. As a manager you must be the first to adapt to the change so I adjust accordingly. Then after communicating the change to my employees, I help them adjust and show my buy-in to the change.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fbe64971-5ed6-49ad-8117-0d1db42e59f1","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.867Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.867Z"},"uniqueId":"223ff2e7-c669-477f-9fa6-773a34f660eb","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b202ea"},"name":"I found it very rewarding to help my employees achieve success and move on to","heading":"I found it very rewarding to help my employees achieve","smartContent":{"content":"<div><!--block-->I found it very rewarding to help my employees achieve success and move on to different roles. There is nothing more satisfying than watching someone grow and achieve their potential.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9eadeb87-381b-4550-87f5-290b450a78a2","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.882Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.882Z"},"uniqueId":"037d7c58-e793-44d3-99db-c3a0b68b6733","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20351"},"name":"Yes, I looked at processes that have not been successful, to find ways to improve","heading":"Yes, I looked at processes that have not been successful,","smartContent":{"content":"<div><!--block-->Yes, I looked at processes that have not been successful, to find ways to improve that process. Once I have my plan, I have taken it to my leader. I keep to the facts and show how the current way of doing it is not effective and how a new approach would be beneficial.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f728d76f-7993-47d6-a533-ba79c2d752ef","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.897Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.897Z"},"uniqueId":"14839509-aaf4-4f1d-b506-3cf44c667ea4","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b203b8"},"name":"I would trace the root-cause and try to minimize the damage. I would then take","heading":"I would trace the root-cause and try to minimize the","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I would trace the root-cause and try to minimize the damage. I would then take this as a learning opportunity and try a different solution for the current problem.. If it was not possible to do this, I would ensure that I do not take the same decision in a future situation.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"227c21bd-bcef-4c99-aa2a-acf7963900f7","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.911Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.911Z"},"uniqueId":"2ad568e3-c65e-4a16-98cb-84e83ef34301","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b2041f"},"name":"At work I evaluate success by meeting the goals that have been set forth by","heading":"At work I evaluate success by meeting the goals that","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>At work I evaluate success by meeting the goals that have been set forth by my leaders and team.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"577a0f16-8a13-4c47-9109-9b88f5904c7d","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.926Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.926Z"},"uniqueId":"07e7ef73-5baa-4b5b-9366-22e28b759dc0","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20486"},"name":"To continue learn and take on additional responsibilities. I see myself contributing as much value","heading":"To continue learn and take on additional responsibilities. I see","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>To continue learn and take on additional responsibilities. I see myself contributing as much value as I can.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b4b69977-4952-4540-a009-60b0d5d7ffdf","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.94Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.94Z"},"uniqueId":"f008c34c-3c15-406d-98f5-705d326c71b1","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b204ed"},"name":"This company has training for their employees that I would be interested in attending. I","heading":"This company has training for their employees that I would","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>This company has training for their employees that I would be interested in attending. I also plan to continue my professional development by attending seminars, continuing my education, and other activities.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"175f669a-4fd1-4eaf-9c31-9db93a364ff3","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.954Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.954Z"},"uniqueId":"89c17162-8286-4dd1-8a1b-22b907d6b3b1","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20554"},"name":"I always build a strong working relationship with my supervisor so in situations like these","heading":"I always build a strong working relationship with my supervisor","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I always build a strong working relationship with my supervisor so in situations like these where I have a different opinion, I can openly speak to them. I would stick to the facts. I would show my supervisor the implications of that decision. Then I would help come up with alternatives</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"14e88317-584c-42a6-babe-6b5785caf2ce","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.97Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.97Z"},"uniqueId":"c33e5168-8877-4e42-adf4-349f6317a223","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b20556"},"name":"I always build a strong working relationship with my supervisor so in situations like these","heading":"I always build a strong working relationship with my supervisor","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I always build a strong working relationship with my supervisor so in situations like these where I have a different opinion, I can openly speak to them. I would stick to the facts. I would show my supervisor the implications of that decision. Then I would help come up with alternatives</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"14e88317-584c-42a6-babe-6b5785caf2ce","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.975Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.975Z"},"uniqueId":"40bf0fca-a535-4530-8ba5-cf36d6ea64c3","__v":0}
{"_id":{"$oid":"668ef19759d6bcc528b205bd"},"name":"When I delegate the task, I talk about, how I thought that they were the","heading":"When I delegate the task, I talk about, how I","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>When I delegate the task, I talk about, how I thought that they were the best person to handle this task. I give them all the resources they need to achieve success. I follow-up and set deadlines as well. During these follow-ups and deadlines, I make sure to show my confidence in the person on their progress.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c53217a2-ced9-4063-a1d8-8b2c8d5cf7e4","order":0,"createdDate":{"$date":"2024-07-10T20:39:51.99Z"},"updatedDate":{"$date":"2024-07-10T20:39:51.99Z"},"uniqueId":"b7ac20d8-fa92-4e95-b920-5fc176009db8","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20624"},"name":"I will review all the relevant facts to consider alternatives. I will then decide on","heading":"I will review all the relevant facts to consider alternatives.","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I will review all the relevant facts to consider alternatives. I will then decide on the most appropriate action.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ca480780-3d61-4fe6-b381-e3bb6eccef38","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.006Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.006Z"},"uniqueId":"f7167f11-e5a1-43d9-b8a9-18e20214bc17","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2068b"},"name":"I take a look at their needs and perspectives to understand why they are reluctant.","heading":"I take a look at their needs and perspectives to","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I take a look at their needs and perspectives to understand why they are reluctant. I would ensure that they have all the tools necessary to complete the task I would communicate the goal, gain commitment, and establish a reward or incentive that will motivate the employee.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0c17d334-026a-449e-9182-a138fa120817","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.021Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.021Z"},"uniqueId":"d46c0525-b380-4616-9254-8b94a27b5cad","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b206f2"},"name":"I would clearly state what the expectations from this person has been and the track","heading":"I would clearly state what the expectations from this person","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I would clearly state what the expectations from this person has been and the track record so far. I would tie that in with the decision that it is time to let them go from the organization due to performance goals not being met. In these situations, it’s important to stick to the facts.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2e71bf91-dc91-41f4-9ee4-1e22c5e3903a","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.036Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.036Z"},"uniqueId":"78b6210f-ffff-4545-8f92-5df3659b9491","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20759"},"name":"I would sit them down and let them know what the qualifications are for the","heading":"I would sit them down and let them know what","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I would sit them down and let them know what the qualifications are for the position and explain the reasons why they are not ready for the position. Then we would work with the employee to put together an action plan that will help them work on the skills they would need for the position. I would regularly check on how they are progressing to ensure they are on the right track.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fc9b86f8-9454-4e54-a58e-670d262abf11","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.051Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.051Z"},"uniqueId":"45c0ec2c-99b1-4d82-962e-ea4afdc0db07","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b207f8"},"name":"The most important value that I have is my integrity. I demonstrate honesty and trust","heading":"The most important value that I have is my integrity.","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>The most important value that I have is my integrity. I demonstrate honesty and trust in all my actions to establish credibility as a leader. By having this conviction behind my words and actions, those who I lead are gain buy in to the direction I take them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"43685a0d-38a1-42b4-aef8-80bd4fb8d6e7","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.081Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.081Z"},"uniqueId":"9fb694cb-e298-49c9-b75e-931e8d203ce5","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20861"},"name":"I gain commitment from my teams by influencing and persuading them to set specific objectives","heading":"I gain commitment from my teams by influencing and persuading","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I gain commitment from my teams by influencing and persuading them to set specific objectives and also buy into the process. Once they have established cooperation and cohesion, they are on board to attain the goal.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c35629e3-6267-4616-9222-5a6e9191528b","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.097Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.097Z"},"uniqueId":"9e96de42-c1ed-49aa-8b31-8ce88528b53e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b208ca"},"name":"A leader can fail when they can’t get their team on board with the goals","heading":"A leader can fail when they can’t get their team","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A leader can fail when they can’t get their team on board with the goals of the organization. Factors outside of a leader’s control may also lead to failure such as available resources, time constraints, and the economy.<br><br>In the example you give, make sure that you talk about how dealt with a difficult challenge and how you analyzed the setback. Make sure you explain how to seek honest feedback to ensure that you learned from the failure.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3715992d-2e59-401e-8ead-9327ae715034","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.114Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.114Z"},"uniqueId":"6fc45e5f-bffa-4ccc-80da-4b3f9bdc9623","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20933"},"name":"A manger is able to handle tasks and responsibilities and ensure that others get their","heading":"A manger is able to handle tasks and responsibilities and","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A manger is able to handle tasks and responsibilities and ensure that others get their work done. A leader will inspire and motivate their team to achieve their goals.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"08a45e07-6e26-43ab-806c-9fd11373278b","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.13Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.13Z"},"uniqueId":"31207705-fbe4-436a-bf03-e8fed9083507","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2099c"},"name":"? ? Being able to lead and inspire a team to perform their best and","heading":"? ? Being able to lead and inspire a team","smartContent":{"content":"<div><!--block--><a href=\"https://cdn.career.guru99.com/wp-content/uploads/2012/06/leader.jpg\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:213,&quot;url&quot;:&quot;https://cdn.career.guru99.com/wp-content/uploads/2012/06/leader-300x213.jpg&quot;,&quot;width&quot;:300}\" data-trix-content-type=\"image\" data-trix-id=\"2396\" contenteditable=\"false\"><img src=\"https://cdn.career.guru99.com/wp-content/uploads/2012/06/leader-300x213.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/2396/2397/https://cdn.career.guru99.com/wp-content/uploads/2012/06/leader-300x213.jpg\" width=\"300\" height=\"213\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></a></div><div><!--block--><br></div><div><!--block--><br>Being able to lead and inspire a team to perform their best and strive to achieve goals. I do this through relationship building, being passionate about the goals, and influencing those around me.</div><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6fee521f-66b6-4f3f-9990-846015ea3957","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.147Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.147Z"},"uniqueId":"780fa004-0f3e-4be9-a18a-32d7e8face06","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20a05"},"name":"When I delegate duties to others that I know I can do better myself. However","heading":"When I delegate duties to others that I know I","smartContent":{"content":"<div><!--block-->When I delegate duties to others that I know I can do better myself. However if I don’t delegate, then I could end up with more work than I can handle myself. I’ve taken courses in time management and learned how to effectively delegate tasks to overcome this weakness.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"02ea75a4-ec3f-425a-8569-dbce5fce0b1b","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.163Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.163Z"},"uniqueId":"60652cd7-2b61-4268-b470-1e633aea934b","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20a6e"},"name":"I talk about the benefits of the idea and how to apply it. I would","heading":"I talk about the benefits of the idea and how","smartContent":{"content":"<div><!--block-->I talk about the benefits of the idea and how to apply it. I would stay open to other thoughts and change my ideas in a way that we can all agree. When you gain buy in from others, you are much more successful in attaining the goals than when you make it mandatory to follow procedure.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"87153063-a66e-4f71-936a-e8c3e3c92176","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.182Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.182Z"},"uniqueId":"261bd918-8f86-441a-a15d-7dab14d3525c","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20ad7"},"name":"I would use a time when we would be gathered in a group, such as","heading":"I would use a time when we would be gathered","smartContent":{"content":"<div><!--block-->I would use a time when we would be gathered in a group, such as a meeting to bring up the praise to the team member. I would recognize their success in front of the group so others could also learn best practices.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bbccbff3-2985-4e90-982b-a9b8e383a42f","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.198Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.198Z"},"uniqueId":"c058566b-e7f3-40aa-ad0c-32c6f34ffbf7","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20b40"},"name":"I feel that I am more effective in a group because everyone has some special","heading":"I feel that I am more effective in a group","smartContent":{"content":"<div><!--block-->I feel that I am more effective in a group because everyone has some special quality that they bring to a group. We can develop our interpersonal skills by helping those in the group who need it as well as learning from those who are successful.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dfd869ea-0984-41d3-874e-aa415b79ea01","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.214Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.214Z"},"uniqueId":"add51520-bf42-49e1-a09f-28ab242df3a0","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20ba9"},"name":"I feel that I should meet with my team at least once a week on","heading":"I feel that I should meet with my team at","smartContent":{"content":"<div><!--block-->I feel that I should meet with my team at least once a week on a set time and day of the week. Communication among teams is critical and this will give the team an opportunity to get together on a regular basis and talk about their challenges and best practices. Also, when our team reaches a milestone, new project begins, an award or promotion is given, or when there is a challenging situation, I would want to bring the team together. Everyone will get the same message that way and we can celebrate successes or come together in challenging times.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"591bb475-7b13-4b18-8d76-63bdd87a884e","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.23Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.23Z"},"uniqueId":"f73bd0f4-c191-43f8-9468-b3ca838d84f4","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20c12"},"name":"In this question, take an example from a situation where you were in a group","heading":"In this question, take an example from a situation where","smartContent":{"content":"<ul><li><!--block-->In this question, take an example from a situation where you were in a group and took responsibility to delegate to achieve goals. Show how you gained buy in from the other members to follow your lead and the result of your leadership.</li><li><!--block-->For instance, in college we were put into groups of four to complete a marketing project. We had to prepare a 15 page paper and 10 minute presentation on a new product that we would introduce to country outside the U.S. I took initiative among the group to lead a discussion on how we should split up the work, when we will meet throughout the semester, and deadlines for each person’s part of the work. Because I was the one to take lead the discussion and had a plan in mind, I gained the buy in of the other members quickly. I took everyone’s e-mail address and created a group email to help us all keep track of our progress and so we could help each other outside of class and our meetings. By the end of the semester, my group achieved a 95% on our project.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"324e4ba5-8692-4c60-93b8-3afedfca4c96","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.244Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.244Z"},"uniqueId":"e2fddad5-159e-4c64-9895-2ed47754e0af","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20c7b"},"name":"I would find common ground between the members who disagree. I would talk about the","heading":"I would find common ground between the members who disagree.","smartContent":{"content":"<div><!--block-->I would find common ground between the members who disagree. I would talk about the importance of the overall goal and the implications if we can’t come together to achieve it. We would then work together to come to an agreement that is a win/win for both sides.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a7d4d6f7-23ff-4df8-afe7-149dcc4f1b9f","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.256Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.256Z"},"uniqueId":"0ba30df2-ab98-400c-823c-ad3a5a839792","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20ce4"},"name":"The type that will support them in their goals and success. They would describe me","heading":"The type that will support them in their goals and","smartContent":{"content":"<div><!--block-->The type that will support them in their goals and success. They would describe me as someone who will clear the way when there are obstacles and always has their back.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d1ef4288-f970-42e2-a182-62ddd0390b73","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.272Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.272Z"},"uniqueId":"7b84321b-1ecf-4ecd-b565-980c7fbf9d41","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20d4d"},"name":"I find out what motivates them individually so I can speak to how a goal","heading":"I find out what motivates them individually so I can","smartContent":{"content":"<div><!--block-->I find out what motivates them individually so I can speak to how a goal or change is going to benefit them. I ensure that I have the right amount of positive and constructive feedback to help them perform effectively. My actions always match my words so when I speak to my team with conviction, they are on-board with performing their best.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c5d994a8-864b-462d-83d0-1bec5611c6df","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.29Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.29Z"},"uniqueId":"a5e4744d-a803-40e4-88a3-78c76b91dbc0","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20db6"},"name":"I perform my best at everything and ensure that my actions match my words. My","heading":"I perform my best at everything and ensure that my","smartContent":{"content":"<div><!--block-->I perform my best at everything and ensure that my actions match my words. My team sees that my expectations that are set for them are the same expectations I put on myself.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"87b28a38-81a9-4881-95fe-c220a84129cb","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.307Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.307Z"},"uniqueId":"17a88ec8-6fd3-4f79-8a14-9daa97445a4a","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20e1f"},"name":"Yes, I treated it much like the relationship that I have with my team. I","heading":"Yes, I treated it much like the relationship that I","smartContent":{"content":"<div><!--block-->Yes, I treated it much like the relationship that I have with my team. I built a strong working relationship with the person, listened to their goals, gave advice, and my personal experience. I shared my best practices and constantly monitored their progress to celebrate their success and move them in the right direction.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4e5aeb4f-a273-45a5-8ef4-95c83126b5fb","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.324Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.324Z"},"uniqueId":"c16599d2-7839-49cf-8327-04a224139aef","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20e88"},"name":"In some ways, although you are part of group, you are alone. It’s a leader’s","heading":"In some ways, although you are part of group, you","smartContent":{"content":"<div><!--block-->In some ways, although you are part of group, you are alone. It’s a leader’s responsibility to see the end goal and vision of an organization to lead others towards it. When others do not see it the same way, you have to be the lone voice to bring them back on track.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d89b47ec-540c-4c4f-8f0a-6236c8538123","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.341Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.341Z"},"uniqueId":"a3295f07-bd6a-4184-a5fb-7888b7161955","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20ef1"},"name":"As a leader, you have to be the first one to embrace change because if","heading":"As a leader, you have to be the first one","smartContent":{"content":"<div><!--block-->As a leader, you have to be the first one to embrace change because if you don’t those around you will quickly see that. After that, I ensure that I can communicate the change with conviction that it’s the right path to adopt .I prepare by ensuring that I can answer any questions that may be asked ,or have the resources to find the answers. I listen to others concerns about the change and help them through the transition.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"322d5412-7d52-4937-8ddd-fb72adca9aac","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.358Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.358Z"},"uniqueId":"fe874d38-ff23-4cef-8d8d-2fcf5c7f6a68","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20f5a"},"name":"By the goals that the team achieves. When someone on the team is successful, then","heading":"By the goals that the team achieves. When someone on","smartContent":{"content":"<div><!--block-->By the goals that the team achieves. When someone on the team is successful, then it reflects on my leadership.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"00ea1f66-19df-4197-8c95-db1e0fcb8137","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.375Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.375Z"},"uniqueId":"c26cba41-a1a1-43a0-8904-7d8e5c8b3e10","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b20fc3"},"name":"I am motivated by my team’s growth and achievement of their professional and personal goals.","heading":"I am motivated by my team’s growth and achievement of","smartContent":{"content":"<div><!--block-->I am motivated by my team’s growth and achievement of their professional and personal goals.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fc1487f8-7027-4d7a-a13e-72bf8279475c","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.39Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.39Z"},"uniqueId":"f95909c1-4c9a-46cc-a801-cabdb09e5ba0","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2102c"},"name":"Their ability to motivate and inspire a team of professionals who can work together to","heading":"Their ability to motivate and inspire a team of professionals","smartContent":{"content":"<div><!--block-->Their ability to motivate and inspire a team of professionals who can work together to achieve the goals of the organization.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3b65482f-0160-4b04-a2d6-44546457df97","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.405Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.405Z"},"uniqueId":"8b486243-061d-4b3f-9db3-09c36e861c21","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21095"},"name":"You have to be open to feedback and be willing to ask for help when","heading":"You have to be open to feedback and be willing","smartContent":{"content":"<div><!--block-->You have to be open to feedback and be willing to ask for help when you are not clear on how to achieve a goal. I would ask my leader first for their feedback on how they believe I should go about achieving the goals. In addition, I would use all the resources available to me to find the best course of action.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"81537d62-e531-4606-a8b9-4a08bfbc1dee","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.422Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.422Z"},"uniqueId":"137303d6-468e-42a7-9695-137f321e1fea","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b210fe"},"name":"I am comfortable with both, however I feel that verbal communication is more effective. When","heading":"I am comfortable with both, however I feel that verbal","smartContent":{"content":"<div><!--block-->I am comfortable with both, however I feel that verbal communication is more effective. When you speak to someone directly, you will be able to see their body language toward the communication. You are also able to address questions/concerns faster than in written communication.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6a5c02dc-aca3-4783-a66b-e2c8cf00b138","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.437Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.437Z"},"uniqueId":"a2cc904b-4272-42c6-9638-f88efecc590e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21167"},"name":"I would bring them together and state the news. I would explain as much as","heading":"I would bring them together and state the news. I","smartContent":{"content":"<div><!--block-->I would bring them together and state the news. I would explain as much as possible as to why it occurred and what steps we will need to take in the future. I would also open it up to the team to speak about their concerns, answer questions, and share their viewpoints as to how we can avoid a similar situation.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"300f3b64-035f-4a76-b73e-c7c1a12440ed","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.452Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.452Z"},"uniqueId":"1fd35a43-fddc-4b3b-885a-beef0a413b43","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b211d0"},"name":"I believe competition among a team is good as long as it is in good","heading":"I believe competition among a team is good as long","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I believe competition among a team is good as long as it is in good spirit. A team has to have a high level of cohesion among its members to prevent misunderstandings. As a leader, it’s my responsibility to ensure that when there is competition that it is being monitored to ensure its positivity.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1f4de33d-6a05-4696-b3e5-a77fe2a125ad","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.468Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.468Z"},"uniqueId":"8247e16b-fc18-44b9-bd0c-4093432162de","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21239"},"name":"Its difficult to make the decision to let an employee go. However, if they are","heading":"Its difficult to make the decision to let an employee","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Its difficult to make the decision to let an employee go. However, if they are not performing the way that they should be, it is the right decision. It is never easy to make a decision that will impact a person’s life.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2265068f-550c-4ef9-83dc-5d2592c7cab0","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.483Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.483Z"},"uniqueId":"db785020-fd1d-4706-913c-f041c8187b67","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b212a2"},"name":"I have not received criticism on the same area over and over. I’m always open","heading":"I have not received criticism on the same area over","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I have not received criticism on the same area over and over. I’m always open to personal and professional growth and welcome any opportunity to improve. When I receive criticism, I work on improving that aspect and furthering my growth.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c337fc1e-2cfb-4b39-89d6-b10286e3fb31","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.499Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.499Z"},"uniqueId":"db521298-208f-4887-ab1f-97d8b06f6c8b","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2130b"},"name":"I would look at the overall goals of the organization and match my team’s strengths","heading":"I would look at the overall goals of the organization","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I would look at the overall goals of the organization and match my team’s strengths up with the reorganization.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"edaa0b7f-289b-436f-801c-d893268d2854","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.514Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.514Z"},"uniqueId":"fa08b930-2e33-4375-a482-a5bd678fe10d","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21374"},"name":"Use an example of when you were part of a team and demonstrate the leadership","heading":"Use an example of when you were part of a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Use an example of when you were part of a team and demonstrate the leadership skills that you used to pertain to your role.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"da154960-0fac-487b-ac4a-89d7a82e3866","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.529Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.529Z"},"uniqueId":"e9450563-89f4-41a9-9f67-aa9ada44ba6c","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b213dd"},"name":"In situations where I must build support for my ideas with cross-functional teams, I ensure","heading":"In situations where I must build support for my ideas","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In situations where I must build support for my ideas with cross-functional teams, I ensure that I communicate my idea clearly and effectively. I listen to their feedback to the idea and I will make amends if they are necessary to build support or improve on the idea. I foster an environment where input is sought and validate my idea by explaining why its the best route.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3ac48e64-2fd0-4f4a-a6e0-fd6ec8e45e96","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.546Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.546Z"},"uniqueId":"c28d9f3f-c883-4d5c-97e1-1ef124b7e642","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21446"},"name":"I take a mediated approach to conflict. I believe it’s important to listen to both","heading":"I take a mediated approach to conflict. I believe it’s","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I take a mediated approach to conflict. I believe it’s important to listen to both sides and understand where each is coming from. There is usually some common ground among conflict and I start there and build.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"23226e74-684c-4ae9-a78e-0001ff68ff77","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.562Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.562Z"},"uniqueId":"2e18be47-086e-472f-ae4d-c44405603a25","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b214af"},"name":"I heard them out to understand why they disagree. I may have to go back","heading":"I heard them out to understand why they disagree. I","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I heard them out to understand why they disagree. I may have to go back and re-explain the directive and reasons for it. I would listen to their feedback and if it is the right thing to do, take it to change the directive. However, if that is not the case I would stick to the facts as to why their commitment is necessary.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ccd07043-a62e-4dca-88b5-61397d6a014f","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.579Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.579Z"},"uniqueId":"e085a1c1-41d1-4c8b-967a-49ea724a6bca","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21518"},"name":"Everyone is equally important. Each person contributes something different to the team and that makes","heading":"Everyone is equally important. Each person contributes something different to","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Everyone is equally important. Each person contributes something different to the team and that makes us as a whole stronger.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7e22c4c4-2f5b-42f0-a023-9e2f0e0e1bab","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.596Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.596Z"},"uniqueId":"faeaeb23-e9f8-43e5-978a-95664b69c42e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21581"},"name":"I match up responsibilities with each member’s strengths. If I have a team member who","heading":"I match up responsibilities with each member’s strengths. If I","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I match up responsibilities with each member’s strengths. If I have a team member who is working on improving an aspect, I will give them the opportunity to take on the task and ensure they have the tools necessary to be successful. I would monitor their progress as well.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e3df2e23-0f0d-4220-8128-68187333af73","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.611Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.611Z"},"uniqueId":"20d931ef-e869-4603-ab7d-7dba85694c87","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b215ea"},"name":"Pick a situation where you showed that you were open to change and show how","heading":"Pick a situation where you showed that you were open","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Pick a situation where you showed that you were open to change and show how you were effectively at changing your decision based on the new facts.<br><br></div><div><!--block--><br>For example, I had created new spreadsheet for managers to use at the end of the night to keep track of sales for the day. This spreadsheet was due in an e-mail every morning and helped us see how we were doing on a daily basis. A few months later, our point of sales system allowed us to input this information in a program that would allow managers to input sales for the day. With this new technology, I decided to do away with the spreadsheet and had the managers use the program to capture the information and send it to me.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5f42cecd-1655-4c5d-bbdd-4348b80f16ec","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.626Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.626Z"},"uniqueId":"a3e1b49c-f8cd-44fc-beff-ee20f365387e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21653"},"name":"I ensure that the team knows the objectives and the timeliness that have been set.","heading":"I ensure that the team knows the objectives and the","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I ensure that the team knows the objectives and the timeliness that have been set. I place milestones so each member can check in on their progress.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb69ab65-7ae9-4621-a1b7-5c721130c050","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.641Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.641Z"},"uniqueId":"87fdc963-7f39-4794-9129-85773a40e068","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b216bc"},"name":"Pick a decision that you would not have all the facts for at the time","heading":"Pick a decision that you would not have all the","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Pick a decision that you would not have all the facts for at the time of the decision. Make sure that you speak about all the different options you had and how you picked the best one out of what you had available. Talk about the results/takeaways.<br><br></div><div><!--block--><br>For instance, I had to decide whether our organization was going to be involved in a new marketing campaign that used social media to advertise our products. At this point in time, our company did not have relevant information on how successful our previous social media marketing campaigns were. If we were to proceed, I was going to have dedicate at least one member on my team to its success. It would be time-consuming and if not successful, would take up a lot of productivity time. I decided to take part in the campaign because it was relatively inexpensive and the potential to gather information about best practices when launching them in the future. We ended up with a very successful marketing campaign with measurable results.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e97eb806-9680-40f9-a443-800c976f7c9d","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.657Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.657Z"},"uniqueId":"75fb6c0f-c4d4-4422-a4f4-be9ad39fd719","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21725"},"name":"I look at all sides of an argument first so I know what may come","heading":"I look at all sides of an argument first so","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I look at all sides of an argument first so I know what may come up when I present my position. I base my arguments strictly on facts that are objective.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"20ab2f59-6122-4ae2-bafe-9166f053a78a","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.673Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.673Z"},"uniqueId":"7e186ec2-2438-422c-96cc-ff1f8f8286dd","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2178e"},"name":"Talk about a decision that you made that was necessary, but not popular with your","heading":"Talk about a decision that you made that was necessary,","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Talk about a decision that you made that was necessary, but not popular with your team. Explain how you communicated the decision, listened to their concern, and stood your ground on the decision.<br><br></div><div><!--block--><br>One possible answer –<br><br></div><div><!--block--><br>Last year I decided to change our commission structure to our sales reps. I felt it was a necessary change because there were too many sales reps who were doing the bare minimum to collect a paycheck. Needless to say, many of the sales reps were upset with the decision. I reiterated the reasons for the change and ensured they had the tools they needed to be successful in the new commission structure. The organization saw an increase in their revenue and sales reps were making 5% more with the new commission structure.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"95bebfb7-c536-47c4-a966-4e6ea9197587","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.689Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.689Z"},"uniqueId":"168a685d-2e56-45db-a611-a29f3e30d912","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b217f7"},"name":"I actively listen by para-phrasing what others say to me. That ensures that I am","heading":"I actively listen by para-phrasing what others say to me.","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I actively listen by para-phrasing what others say to me. That ensures that I am on the same page as the other person and keeps me attentive to the conversation.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dccae4d0-9d22-488a-b408-4f6ccda7ed67","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.704Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.704Z"},"uniqueId":"a8ca3cf4-22ea-4ff7-a82a-766aa1f93db2","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21860"},"name":"I organize them by what is the most important and time sensitive to complete.","heading":"I organize them by what is the most important and","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>I organize them by what is the most important and time sensitive to complete.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fa473750-9b48-497b-8fa7-5875b544f0e6","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.762Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.762Z"},"uniqueId":"516e0d0c-a2b5-4755-9b28-8a7c6483eff8","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b218c9"},"name":"Use an example were you were not able to meet a deadline due to outside","heading":"Use an example were you were not able to meet","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Use an example were you were not able to meet a deadline due to outside factors.<br><br></div><div><!--block--><br>For instance , there was a big project that my team was working on and I had split up the work among some members and myself. During that time, one member of the team had to leave due to their spouse getting a position in another city. He left at a critical time and I had to re-assign his duties to someone else. I had to get this new person up to speed with the progression of the project and due to this, was not able to complete it on time. We were still able to complete the project a few days after the deadline even with the change in team member.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6d57c98e-17d8-4e6c-888a-7aa1f25b34dc","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.777Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.777Z"},"uniqueId":"82ed1e51-2763-4f9c-b3b3-02e10b15e5b4","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21932"},"name":"I communicate my confidence in their ability to complete the project. I ensure that I","heading":"I communicate my confidence in their ability to complete the","smartContent":{"content":"<div><!--block-->I communicate my confidence in their ability to complete the project. I ensure that I remove as many obstacles as possible and they have all the tools/answers they need to complete the task. I ensure there’s clear expectations and open communication.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"16c9f737-4523-4d27-9157-d173c0ff7449","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.793Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.793Z"},"uniqueId":"52b83ecf-be79-4067-b953-f7bb4834c9e7","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b2199b"},"name":"I develop my employees by being a mentor, giving effective performance feedback on a regular","heading":"I develop my employees by being a mentor, giving effective","smartContent":{"content":"<div><!--block-->I develop my employees by being a mentor, giving effective performance feedback on a regular basis, and coaching. I take a personal interest in the development of my employees and when they see that I am committed to their growth, they are more motivated.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"979d37d2-89b8-4b9e-bd17-90e1f6e380af","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.808Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.808Z"},"uniqueId":"9f676429-472c-4178-b1d4-2d51d960b440","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21a04"},"name":"Provide an example that shows how you demonstrated your vision to make a positive change","heading":"Provide an example that shows how you demonstrated your vision","smartContent":{"content":"<ul><li><!--block-->Provide an example that shows how you demonstrated your vision to make a positive change in the organization. Also, talk about the results of the change.</li><li><!--block-->For instance, at my previous organization, the management team came up the ranks and never had formal management training. They did not know how to lead their former peers and were uncomfortable having productivity discussions with their teams. I felt there was a need to train these managers on the skills they would need to be successful. So I made my case to the leadership team on why it is important and provided examples I was seeing. Due to this, all managers go through a rigorous management training program that prepares them for their new role.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7998ce39-24f2-4adb-8ec4-f017e45d89d2","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.824Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.824Z"},"uniqueId":"9121b0f3-3cc9-4548-bf78-ee6efb16083c","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21a6d"},"name":"In your example, show how you promote change and innovation. Solutions to unique problems occur","heading":"In your example, show how you promote change and innovation.","smartContent":{"content":"<ul><li><!--block-->In your example, show how you promote change and innovation. Solutions to unique problems occur when there is a constant information flow in all directions to ensure responsiveness to change.</li><li><!--block-->For instance, I was responsible for a sales team in my previous position. A separate production staff handled the orders that my sales team would prepare. This production team had difficulty making the deadlines that my sales team promised their clients. In addition, the product was sometimes not customized to the level the client was looking for. So I decided to change the process that our sales reps put in sales order by having the sales rep communicate with the production team who was responsible for each client’s product. This helped my sales rep create achievable timeliness and a product that was the way the client expects.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"721b040a-e7ee-4756-8a86-1761027ea5b3","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.84Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.84Z"},"uniqueId":"5e317000-f2ed-44d1-8c6f-2e6f7ab178f9","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21ad6"},"name":"A leader’s role is to communicate with clarity to the strategic vision to the management","heading":"A leader’s role is to communicate with clarity to the","smartContent":{"content":"<div><!--block-->A leader’s role is to communicate with clarity to the strategic vision to the management team. This vision must be able to be in the form of a clear direction and plans. There should be clear priories, objectives timeliness, accountability, and performance measures.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"61f80adf-54eb-4fb9-ae02-877171c295b6","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.855Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.855Z"},"uniqueId":"355689f1-74c4-4328-92bc-51a3cdf8fd21","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21b3f"},"name":"This answer should be based on the type of organization you are joining. You should","heading":"This answer should be based on the type of organization","smartContent":{"content":"<div><!--block-->This answer should be based on the type of organization you are joining. You should show that you are able to change your style in different circumstances.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"84a3d7d1-efc3-4d80-9bb5-646a7374b82e","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.871Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.871Z"},"uniqueId":"4e172d19-d73c-46f6-927b-a689dfaacbea","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21ba8"},"name":"I encourage training courses, soft skills workshops, on the job mentoring, and coaching.","heading":"I encourage training courses, soft skills workshops, on the job","smartContent":{"content":"<div><!--block-->I encourage training courses, soft skills workshops, on the job mentoring, and coaching.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"80d2b197-e1a5-45e5-90fa-58651b70a654","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.887Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.887Z"},"uniqueId":"a9e49a12-91a5-44e2-bfeb-a29f5a50276a","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21c11"},"name":"In your example, show how you are not afraid of taking risks to achieve goals","heading":"In your example, show how you are not afraid of","smartContent":{"content":"<ul><li><!--block-->In your example, show how you are not afraid of taking risks to achieve goals at work. Demonstrate your focus on the job at hand and how it inspired others.</li><li><!--block-->For instance, I took on management responsibilities in my previous position to take the place of my manager who had left. I did not have any management experience but I knew that the team was not going to be able to be effective without a leader in place. I may have made a few mistakes, but ultimately was successful in taking on that additional responsibility. The upper level management were impressed by my growth and efforts so they ended up promoting me into that position.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c707029f-a0d4-48e3-a0db-c2d8a306d060","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.903Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.903Z"},"uniqueId":"bd3b4ab4-3100-45d7-99cf-261e848c1b5e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21c4e"},"name":"Exception is an error event that can happen during the execution of a program and","heading":"Exception is an error event that can happen during the","smartContent":{"content":"<div><!--block-->Exception is an error event that can happen during the execution of a program and disrupts it’s normal flow. Exception can arise from different kind of situations such as wrong data entered by user, hardware failure, network connection failure etc.<br><br></div><div><!--block-->Whenever any error occurs while executing a java statement, an exception object is created and then&nbsp;<a href=\"https://www.journaldev.com/546/difference-jdk-vs-jre-vs-jvm\"><strong>JRE</strong></a>&nbsp;tries to find exception handler to handle the exception. If suitable exception handler is found then the exception object is passed to the handler code to process the exception, known as&nbsp;<strong>catching the exception</strong>. If no handler is found then application throws the exception to runtime environment and JRE terminates the program.<br><br></div><div><!--block--><strong>Java Exception handling</strong>&nbsp;framework is used to handle runtime errors only, compile time errors are not handled by exception handling framework.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"19fd497b-39dc-4c61-a4f6-8d4531272e57","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.936Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.936Z"},"uniqueId":"d96b6b2f-67b2-4ad0-afa5-506872b80a41","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21c50"},"name":"Exception is an error event that can happen during the execution of a program and","heading":"Exception is an error event that can happen during the","smartContent":{"content":"<div><!--block-->Exception is an error event that can happen during the execution of a program and disrupts it’s normal flow. Exception can arise from different kind of situations such as wrong data entered by user, hardware failure, network connection failure etc.<br><br></div><div><!--block-->Whenever any error occurs while executing a java statement, an exception object is created and then&nbsp;<a href=\"https://www.journaldev.com/546/difference-jdk-vs-jre-vs-jvm\"><strong>JRE</strong></a>&nbsp;tries to find exception handler to handle the exception. If suitable exception handler is found then the exception object is passed to the handler code to process the exception, known as&nbsp;<strong>catching the exception</strong>. If no handler is found then application throws the exception to runtime environment and JRE terminates the program.<br><br></div><div><!--block--><strong>Java Exception handling</strong>&nbsp;framework is used to handle runtime errors only, compile time errors are not handled by exception handling framework.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"19fd497b-39dc-4c61-a4f6-8d4531272e57","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.942Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.942Z"},"uniqueId":"dbc7b2ac-0c7c-40df-b09d-61ff32a7e43a","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21c76"},"name":"There are four keywords used in java exception handling. throw: Sometimes we explicitly want to","heading":"There are four keywords used in java exception handling. throw:","smartContent":{"content":"<div><!--block-->There are four keywords used in java exception handling.<br><br></div><ol><li><!--block--><strong>throw</strong>: Sometimes we explicitly want to create exception object and then throw it to halt the normal processing of the program.&nbsp;<strong>throw</strong>&nbsp;keyword is used to throw exception to the runtime to handle it.</li><li><!--block--><strong>throws</strong>: When we are throwing any checked exception in a method and not handling it, then we need to use throws keyword in method signature to let caller program know the exceptions that might be thrown by the method. The caller method might handle these exceptions or propagate it to it’s caller method using throws keyword. We can provide multiple exceptions in the throws clause and it can be used with&nbsp;<strong>main()</strong>&nbsp;method also.</li><li><!--block--><strong>try-catch</strong>: We use try-catch block for exception handling in our code. try is the start of the block and catch is at the end of try block to handle the exceptions. We can have multiple catch blocks with a try and try-catch block can be nested also. catch block requires a parameter that should be of type Exception.</li><li><!--block--><strong>finally</strong>: finally block is optional and can be used only with try-catch block. Since exception halts the process of execution, we might have some resources open that will not get closed, so we can use finally block. finally block gets executed always, whether exception occurrs or not.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"61d338ba-8415-4efc-b187-8d48179d0bb9","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.958Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.958Z"},"uniqueId":"5322c91a-bab9-409c-bf35-94264a6a2978","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21c9c"},"name":"Java Exceptions are hierarchical and inheritance is used to categorize different types of exceptions. Throwable","heading":"Java Exceptions are hierarchical and inheritance is used to categorize","smartContent":{"content":"<div><!--block-->Java Exceptions are hierarchical and&nbsp;<a href=\"https://www.journaldev.com/644/inheritance-java-example\">inheritance</a>&nbsp;is used to categorize different types of exceptions. Throwable is the parent class of Java Exceptions Hierarchy and it has two child objects – Error and Exception. Exceptions are further divided into checked exceptions and runtime exception.<br><br><strong>Errors</strong>&nbsp;are exceptional scenarios that are out of scope of application and it’s not possible to anticipate and recover from them, for example hardware failure, JVM crash or out of memory error.<br><br></div><div><!--block--><strong>Checked Exceptions</strong>&nbsp;are exceptional scenarios that we can anticipate in a program and try to recover from it, for example FileNotFoundException. We should catch this exception and provide useful message to user and log it properly for debugging purpose. Exception is the parent class of all Checked Exceptions.<br><br></div><div><!--block--><strong>Runtime Exceptions</strong>&nbsp;are caused by bad programming, for example trying to retrieve an element from the Array. We should check the length of array first before trying to retrieve the element otherwise it might throw ArrayIndexOutOfBoundException at runtime. RuntimeException is the parent class of all runtime exceptions.<br><br></div><div><!--block--><a href=\"https://cdn.journaldev.com/wp-content/uploads/2013/07/exception-hierarchy.png\"><br></a><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2013/07/exception-hierarchy-450x217.png&quot;}\" data-trix-content-type=\"image\" data-trix-id=\"187769\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2013/07/exception-hierarchy-450x217.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/187769/187770/https://cdn.journaldev.com/wp-content/uploads/2013/07/exception-hierarchy-450x217.png\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><a href=\"https://cdn.journaldev.com/wp-content/uploads/2013/07/exception-hierarchy.png\"><br><br><br></a><br></div><div><!--block--><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c2636818-3a8e-4b1c-b267-293e30e2a4d7","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.972Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.972Z"},"uniqueId":"99341ee9-ad8b-4178-80a8-7a92da3b488e","__v":0}
{"_id":{"$oid":"668ef19859d6bcc528b21cc2"},"name":"Exception and all of it’s subclasses doesn’t provide any specific methods and all of the","heading":"Exception and all of it’s subclasses doesn’t provide any specific","smartContent":{"content":"<div><!--block-->Exception and all of it’s subclasses doesn’t provide any specific methods and all of the methods are defined in the base class Throwable.<br><br></div><ol><li><!--block--><strong>String getMessage()</strong>&nbsp;– This method returns the message String of Throwable and the message can be provided while creating the exception through it’s constructor.</li><li><!--block--><strong>String getLocalizedMessage()</strong>&nbsp;– This method is provided so that subclasses can override it to provide locale specific message to the calling program. Throwable class implementation of this method simply use getMessage() method to return the exception message.</li><li><!--block--><strong>synchronized Throwable getCause()</strong>&nbsp;– This method returns the cause of the exception or null id the cause is unknown.</li><li><!--block--><strong>String toString()</strong>&nbsp;– This method returns the information about Throwable in String format, the returned String contains the name of Throwable class and localized message.</li><li><!--block--><strong>void printStackTrace()</strong>&nbsp;– This method prints the stack trace information to the standard error stream, this method is overloaded and we can pass PrintStream or PrintWriter as argument to write the stack trace information to the file or stream.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6b484945-7555-4db7-ad3c-88614dfa3a1e","order":0,"createdDate":{"$date":"2024-07-10T20:39:52.986Z"},"updatedDate":{"$date":"2024-07-10T20:39:52.986Z"},"uniqueId":"f089164e-c8bb-4de4-bbcf-e21ae2f04ddb","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21ce8"},"name":"If you are catching a lot of exceptions in a single try block, you will","heading":"If you are catching a lot of exceptions in a","smartContent":{"content":"<div><!--block-->If you are catching a lot of exceptions in a single try block, you will notice that catch block code looks very ugly and mostly consists of redundant code to log the error, keeping this in mind Java 7 one of the feature was multi-catch block where we can catch multiple exceptions in a single catch block. The catch block with this feature looks like below:<br><br></div><pre><!--block-->catch(IOException | SQLException | Exception ex){\r\n     logger.error(ex);\r\n     throw new MyException(ex.getMessage());\r\n}</pre><div><!--block--><br>Most of the time, we use finally block just to close the resources and sometimes we forget to close them and get runtime exceptions when the resources are exhausted. These exceptions are hard to debug and we might need to look into each place where we are using that type of resource to make sure we are closing it. So java 7 one of the improvement was&nbsp;<strong>try-with-resources</strong>&nbsp;where we can create a resource in the try statement itself and use it inside the try-catch block. When the execution comes out of try-catch block, runtime environment automatically close these resources. Sample of try-catch block with this improvement is:<br><br></div><pre><!--block-->try (MyResource mr = new MyResource()) {\r\n            System.out.println(\"MyResource created in try-with-resources\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }</pre><div><!--block--><br>Read more about this at&nbsp;<a href=\"https://www.journaldev.com/592/java-try-with-resources\"><strong>Java 7 ARM</strong></a>.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"63db341b-08ae-4980-89f3-548461945085","order":0,"createdDate":{"$date":"2024-07-10T20:39:53Z"},"updatedDate":{"$date":"2024-07-10T20:39:53Z"},"uniqueId":"6704fa37-3867-46b6-be6c-d68541f380c0","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21d0e"},"name":"Checked Exceptions should be handled in the code using try-catch block or else main() method","heading":"Checked Exceptions should be handled in the code using try-catch","smartContent":{"content":"- Checked Exceptions should be handled in the code using try-catch block or else main() method should use throws keyword to let JRE know about these exception that might be thrown from the program. Unchecked Exceptions are not required to be handled in the program or to mention them in throws clause.\n- Exception is the super class of all checked exceptions whereas RuntimeException is the super class of all unchecked exceptions.\n- Checked exceptions are error scenarios that are not caused by program, for example FileNotFoundException in reading a file that is not present, whereas Unchecked exceptions are mostly caused by poor programming, for example NullPointerException when invoking a method on an object reference without making sure that it’s not null.\n\nIn Java, exceptions are categorized into two main types: **Checked Exceptions** and **Unchecked Exceptions**. Here's a breakdown of the differences between them:\n\n### 1. **Checked Exceptions**\n   - **Definition**: Checked exceptions are exceptions that are checked at compile-time. The compiler ensures that these exceptions are either caught or declared in the `throws` clause of the method.\n   - **Handling**: If a method can throw a checked exception, it must either handle the exception with a `try-catch` block or declare the exception using the `throws` keyword.\n   - **Examples**:\n     - `IOException`\n     - `SQLException`\n     - `ClassNotFoundException`\n   - **Use Case**: Checked exceptions are typically used for conditions from which the application can reasonably be expected to recover. For example, file handling errors or network communication issues.\n\n   ```java\n   try {\n       FileReader file = new FileReader(\"file.txt\");\n   } catch (FileNotFoundException e) {\n       e.printStackTrace();\n   }\n   ```\n\n### 2. **Unchecked Exceptions**\n   - **Definition**: Unchecked exceptions are exceptions that are not checked at compile-time. They include runtime exceptions and errors.\n   - **Handling**: Methods are not required to handle or declare unchecked exceptions. These exceptions usually indicate programming errors, such as logic flaws or improper use of an API.\n   - **Examples**:\n     - `NullPointerException`\n     - `ArrayIndexOutOfBoundsException`\n     - `ArithmeticException`\n     - `IllegalArgumentException`\n   - **Use Case**: Unchecked exceptions typically represent defects in the program (bugs), such as logic errors or improper use of an API. These are conditions that the application usually cannot recover from.\n\n   ```java\n   int[] arr = new int[5];\n   int num = arr[10];  // This will throw ArrayIndexOutOfBoundsException\n   ```\n\n### Key Differences\n- **Compile-time Checking**: \n  - Checked exceptions are checked at compile-time. \n  - Unchecked exceptions are checked at runtime.\n  \n- **Declaration**: \n  - Methods that can throw checked exceptions must declare them using the `throws` keyword.\n  - There is no requirement to declare unchecked exceptions.\n\n- **Typical Usage**: \n  - Checked exceptions are for recoverable conditions.\n  - Unchecked exceptions are for programming errors.\n\n### When to Use Which?\n- **Use Checked Exceptions** when you want to force the caller to handle potential error conditions, such as file I/O operations.\n- **Use Unchecked Exceptions** for errors that are typically the result of a programming bug, like accessing an invalid array index.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"40152b3a-52a1-4e5d-b7f5-6cd2d3fb6b42","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.016Z"},"updatedDate":{"$date":"2024-09-02T02:56:27.942Z"},"uniqueId":"bb08da13-3797-4c59-a1cb-e679b61a591a","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21d34"},"name":"throws keyword is used with method signature to declare the exceptions that the method might","heading":"throws keyword is used with method signature to declare the","smartContent":{"content":"<div><!--block-->throws keyword is used with method signature to declare the exceptions that the method might throw whereas throw keyword is used to disrupt the flow of program and handing over the exception object to runtime to handle it.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e747aa42-3ce9-4af7-83dd-04c87162d037","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.03Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.03Z"},"uniqueId":"ee0985d0-6d81-43f7-8a03-41d206c3bc88","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21d5a"},"name":"We can extend Exception class or any of it’s subclasses to create our custom exception","heading":"We can extend Exception class or any of it’s subclasses","smartContent":{"content":"<div><!--block-->We can extend Exception class or any of it’s subclasses to create our custom exception class. The custom exception class can have it’s own variables and methods that we can use to pass error codes or other exception related information to the exception handler.<br><br></div><div><!--block-->A simple example of custom exception is shown below.</div><pre><!--block-->package com.journaldev.exceptions;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class MyException extends IOException {\r\n\r\n\tprivate static final long serialVersionUID = 4664456874499611218L;\r\n\t\r\n\tprivate String errorCode=\"Unknown_Exception\";\r\n\t\r\n\tpublic MyException(String message, String errorCode){\r\n\t\tsuper(message);\r\n\t\tthis.errorCode=errorCode;\r\n\t}\r\n\t\r\n\tpublic String getErrorCode(){\r\n\t\treturn this.errorCode;\r\n\t}\r\n\t\r\n\r\n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4c009c07-47a5-455a-bfac-46a0d3ef80a8","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.044Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.044Z"},"uniqueId":"70f22252-a40a-4e6f-b55a-846f43c0105a","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21d5c"},"name":"We can extend Exception class or any of it’s subclasses to create our custom exception","heading":"We can extend Exception class or any of it’s subclasses","smartContent":{"content":"<div><!--block-->We can extend Exception class or any of it’s subclasses to create our custom exception class. The custom exception class can have it’s own variables and methods that we can use to pass error codes or other exception related information to the exception handler.<br><br></div><div><!--block-->A simple example of custom exception is shown below.</div><pre><!--block-->package com.journaldev.exceptions;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class MyException extends IOException {\r\n\r\n\tprivate static final long serialVersionUID = 4664456874499611218L;\r\n\t\r\n\tprivate String errorCode=\"Unknown_Exception\";\r\n\t\r\n\tpublic MyException(String message, String errorCode){\r\n\t\tsuper(message);\r\n\t\tthis.errorCode=errorCode;\r\n\t}\r\n\t\r\n\tpublic String getErrorCode(){\r\n\t\treturn this.errorCode;\r\n\t}\r\n\t\r\n\r\n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4c009c07-47a5-455a-bfac-46a0d3ef80a8","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.049Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.049Z"},"uniqueId":"07de5ea6-c430-4037-a92a-f34e14c7fb29","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21d82"},"name":"OutOfMemoryError in Java is a subclass of java.lang.VirtualMachineError and it’s thrown by JVM when it","heading":"OutOfMemoryError in Java is a subclass of java.lang.VirtualMachineError and it’s","smartContent":{"content":"<div><!--block-->OutOfMemoryError in Java is a subclass of java.lang.VirtualMachineError and it’s thrown by JVM when it ran out of heap memory. We can fix this error by providing more memory to run the java application through java options.<br><br></div><pre><!--block-->$&gt;java MyProgram -Xms1024m -Xmx1024m -XX:PermSize=64M -XX:MaxPermSize=256m</pre><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f6ff45d4-49f1-49ab-837f-07dec4e9c26b","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.062Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.062Z"},"uniqueId":"bd598fef-22d6-4aac-8b9c-14058b2f61e5","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21da8"},"name":"Some of the common main thread exception scenarios are: Exception in thread main java.lang.UnsupportedClassVersionError: This","heading":"Some of the common main thread exception scenarios are: Exception","smartContent":{"content":"<div><!--block-->Some of the common main thread exception scenarios are:<br><br></div><ul><li><!--block--><strong>Exception in thread main java.lang.UnsupportedClassVersionError</strong>: This exception comes when your java class is compiled from another JDK version and you are trying to run it from another java version.</li><li><!--block--><strong>Exception in thread main java.lang.NoClassDefFoundError</strong>: There are two variants of this exception. The first one is where you provide the class full name with .class extension. The second scenario is when Class is not found.</li><li><!--block--><strong>Exception in thread main java.lang.NoSuchMethodError: main</strong>: This exception comes when you are trying to run a class that doesn’t have main method.</li><li><!--block--><strong>Exception in thread “main” java.lang.ArithmeticException</strong>: Whenever any exception is thrown from main method, it prints the exception is console. The first part explains that exception is thrown from main method, second part prints the exception class name and then after a colon, it prints the exception message.</li></ul><div><!--block-->Read more about these at&nbsp;<a href=\"https://www.journaldev.com/611/exception-in-thread-main-java\">Java Exception in Thread main</a>.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"85bfc41c-1e64-4969-9810-9972e6160627","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.077Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.077Z"},"uniqueId":"baa3d7f3-db37-478e-ba64-34859a00e120","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21dce"},"name":"final and finally are keywords in java whereas finalize is a method. final keyword can","heading":"final and finally are keywords in java whereas finalize is","smartContent":{"content":"<div><!--block-->final and finally are keywords in java whereas finalize is a method.<br><br></div><div><!--block-->final keyword can be used with class variables so that they can’t be reassigned, with class to avoid extending by classes and with methods to avoid overriding by subclasses, finally keyword is used with try-catch block to provide statements that will always gets executed even if some exception arises, usually finally is used to close resources. finalize() method is executed by Garbage Collector before the object is destroyed, it’s great way to make sure all the global resources are closed.<br><br></div><div><!--block-->Out of the three, only finally is related to java exception handling.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9e742de8-7a9a-4211-9e0c-fc5d157454e7","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.092Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.092Z"},"uniqueId":"206deb27-6789-4771-84c8-87391541710a","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21df4"},"name":"When exception is thrown by main() method, Java Runtime terminates the program and print the","heading":"When exception is thrown by main() method, Java Runtime terminates","smartContent":{"content":"<div><!--block-->When exception is thrown by main() method, Java Runtime terminates the program and print the exception message and stack trace in system console.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5a19f977-48b4-43dc-87a2-9b40854680ab","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.106Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.106Z"},"uniqueId":"9f9e6127-870d-49f7-a74b-b823d5d1b83a","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21e1a"},"name":"We can have an empty catch block but it’s the example of worst programming. We","heading":"We can have an empty catch block but it’s the","smartContent":{"content":"<div><!--block-->We can have an empty catch block but it’s the example of worst programming. We should never have empty catch block because if the exception is caught by that block, we will have no information about the exception and it wil be a nightmare to debug it. There should be at least a logging statement to log the exception details in console or log files.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6b40c35f-066b-4cae-94bd-2383ca00a58d","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.12Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.12Z"},"uniqueId":"aa111e00-7a4e-45cb-af6d-8f32064cd60f","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21e1c"},"name":"We can have an empty catch block but it’s the example of worst programming. We","heading":"We can have an empty catch block but it’s the","smartContent":{"content":"<div><!--block-->We can have an empty catch block but it’s the example of worst programming. We should never have empty catch block because if the exception is caught by that block, we will have no information about the exception and it wil be a nightmare to debug it. There should be at least a logging statement to log the exception details in console or log files.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6b40c35f-066b-4cae-94bd-2383ca00a58d","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.126Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.126Z"},"uniqueId":"675019ad-7714-430b-9969-c234cf2ef5f1","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21e42"},"name":"Some of the best practices related to Java Exception Handling","heading":"Some of the best practices related to Java Exception Handling","smartContent":{"content":"Here's an expanded version of the list, including best practices related to Java 8:\n\n### Java Exception Handling Best Practices\n\n1. **Use Specific Exceptions for Ease of Debugging**:\n   - Instead of catching generic exceptions like `Exception` or `Throwable`, catch specific exceptions such as `IOException`, `SQLException`, etc. This makes it easier to understand the type of error and debug the issue.\n\n2. **Throw Exceptions Early (Fail-Fast) in the Program**:\n   - Detect and report errors as soon as they occur. This helps in identifying the root cause of an issue and prevents the propagation of incorrect data through the system.\n\n3. **Catch Exceptions Late in the Program**:\n   - Allow exceptions to propagate up the call stack and be handled at the appropriate layer, often at the boundary of the system or component. This approach helps in maintaining separation of concerns and reduces tight coupling.\n\n4. **Use Java 7 ARM (Automatic Resource Management) Feature**:\n   - Use the try-with-resources statement introduced in Java 7 to ensure that resources (like streams, files, sockets, etc.) are closed automatically. This eliminates the need for explicit finally blocks for resource cleanup.\n   - **Example**:\n     ```java\n     try (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\n         // Read file\n     } catch (IOException e) {\n         e.printStackTrace();\n     }\n     ```\n\n5. **Always Log Exception Messages for Debugging Purposes**:\n   - Log exceptions using a logging framework (like SLF4J, Log4j, etc.) instead of printing stack traces to the console. This helps in maintaining a consistent log format and makes it easier to track issues in production.\n   - **Example**:\n     ```java\n     try {\n         // Some code that may throw an exception\n     } catch (IOException e) {\n         logger.error(\"Error reading file: {}\", e.getMessage(), e);\n     }\n     ```\n\n6. **Use Multi-Catch Block for Cleaner Code**:\n   - In Java 7 and later, you can catch multiple exceptions in a single catch block. This reduces code duplication and makes the exception handling code cleaner.\n   - **Example**:\n     ```java\n     try {\n         // Some code that may throw an exception\n     } catch (IOException | SQLException e) {\n         logger.error(\"Error occurred: {}\", e.getMessage(), e);\n     }\n     ```\n\n7. **Use Custom Exceptions**:\n   - Create custom exceptions to represent specific error conditions in your application. This makes the code more expressive and easier to understand.\n   - **Example**:\n     ```java\n     public class InvalidUserInputException extends RuntimeException {\n         public InvalidUserInputException(String message) {\n             super(message);\n         }\n     }\n     ```\n\n8. **Follow Naming Conventions**:\n   - Custom exception classes should end with the word `Exception` to make it clear that they represent an error condition.\n   - **Example**: `InvalidUserInputException`, `DataNotFoundException`, etc.\n\n9. **Document Exceptions Using `@throws` in Javadoc**:\n   - Use the `@throws` tag in method Javadoc to document the exceptions that a method can throw. This improves the readability and usability of the API.\n   - **Example**:\n     ```java\n     /**\n      * Parses the given string to an integer.\n      *\n      * @param str the string to parse\n      * @return the parsed integer\n      * @throws NumberFormatException if the string is not a valid integer\n      */\n     public int parseInt(String str) throws NumberFormatException {\n         return Integer.parseInt(str);\n     }\n     ```\n\n10. **Avoid Swallowing Exceptions**:\n    - Do not catch an exception without handling it properly. If you must catch it, at least log it or rethrow it to ensure that the error condition is not silently ignored.\n\n11. **Avoid Returning Null Instead of Throwing Exceptions**:\n    - While exceptions can be costly in terms of performance, returning `null` in place of throwing an exception can lead to `NullPointerException` down the line, making debugging harder. If an exceptional condition occurs, it’s better to throw an appropriate exception rather than returning `null`.\n\n12. **Use `Optional` for Return Values When Possible**:\n    - Introduced in Java 8, `Optional` can be used to represent the absence of a value, reducing the need to return `null` and thereby reducing the risk of `NullPointerException`. It’s especially useful for methods that might not always return a value.\n    - **Example**:\n      ```java\n      public Optional<User> findUserById(Long id) {\n          return Optional.ofNullable(userRepository.findById(id));\n      }\n      ```\n\n13. **Consider Using Functional Interfaces with `Lambda` for Exception Handling**:\n    - Java 8 introduced lambdas and functional interfaces. When working with lambdas, exceptions can be tricky to handle, as lambdas don’t allow checked exceptions by default. You can create utility methods or wrapper interfaces to handle such cases.\n    - **Example**:\n      ```java\n      @FunctionalInterface\n      public interface CheckedFunction<T, R> {\n          R apply(T t) throws Exception;\n      }\n\n      public static <T, R> Function<T, R> wrap(CheckedFunction<T, R> function) {\n          return t -> {\n              try {\n                  return function.apply(t);\n              } catch (Exception e) {\n                  throw new RuntimeException(e);\n              }\n          };\n      }\n      ```\n\n14. **Use `CompletableFuture` for Asynchronous Exception Handling**:\n    - Java 8 introduced `CompletableFuture` for handling asynchronous operations. Use its `exceptionally` method to handle exceptions in asynchronous code.\n    - **Example**:\n      ```java\n      CompletableFuture.supplyAsync(() -> {\n          // Some async operation\n          return \"Result\";\n      }).exceptionally(ex -> {\n          logger.error(\"Exception occurred: {}\", ex.getMessage(), ex);\n          return \"Fallback Result\";\n      });\n      ```\n\nBy following these best practices, you can write more robust, maintainable, and effective exception handling code in your Java applications, especially when leveraging the features introduced in Java 8.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"78ad79fe-2c9d-419e-88f2-6bf0fa113330","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.141Z"},"updatedDate":{"$date":"2024-08-27T02:23:50.353Z"},"uniqueId":"61c0af9e-29ff-403a-9d25-1e80d8cc494d","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21e68"},"name":"In this section, we will look into some programming questions related to java exceptions. What","heading":"In this section, we will look into some programming questions","smartContent":{"content":"\n## Java Exception Handling Questions\n\nIn this section, we will look into some programming questions related to Java exceptions.\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class TestException {\n\n    public static void main(String[] args) {\n        try {\n            testExceptions();\n        } catch (FileNotFoundException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void testExceptions() throws IOException, FileNotFoundException {\n\n    }\n}\n```\n\n**Explanation:**\nThe above program won’t compile, and you will get an error message: \"The exception `FileNotFoundException` is already caught by the alternative `IOException`.\" This is because `FileNotFoundException` is a subclass of `IOException`. There are two ways to solve this problem:\n\n1. **Use separate catch blocks:**\n\n    ```java\n    try {\n        testExceptions();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    ```\n\n2. **Remove `FileNotFoundException` from the multi-catch block:**\n\n    ```java\n    try {\n        testExceptions();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    ```\n\nYou can choose any of these approaches based on your catch block code.\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport javax.xml.bind.JAXBException;\n\npublic class TestException1 {\n\n    public static void main(String[] args) {\n        try {\n            go();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (JAXBException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void go() throws IOException, JAXBException, FileNotFoundException {\n\n    }\n}\n```\n\n**Explanation:**\nThe program won’t compile because `FileNotFoundException` is a subclass of `IOException`, making the `FileNotFoundException` catch block unreachable. You'll get an error message: \"Unreachable catch block for `FileNotFoundException`. It is already handled by the catch block for `IOException`.\"\n\nTo fix this, adjust the catch block order:\n\n```java\ntry {\n    go();\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (JAXBException e) {\n    e.printStackTrace();\n}\n```\n\nNote that `JAXBException` is not related to `IOException` or `FileNotFoundException` and can be placed anywhere in the catch block hierarchy.\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\nimport java.io.IOException;\nimport javax.xml.bind.JAXBException;\n\npublic class TestException2 {\n\n    public static void main(String[] args) {\n        try {\n            foo();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (JAXBException e) {\n            e.printStackTrace();\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void foo() throws IOException {\n\n    }\n}\n```\n\n**Explanation:**\nThe program won’t compile because `JAXBException` is a checked exception, and the `foo()` method doesn't throw this exception. You'll get an error message: \"Unreachable catch block for `JAXBException`. This exception is never thrown from the try statement body.\"\n\nTo solve this issue, remove the `JAXBException` catch block.\n\nNote that catching `NullPointerException` is valid because it’s an unchecked exception.\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\npublic class TestException3 {\n\n    public static void main(String[] args) {\n        try {\n            bar();\n        } catch (NullPointerException e) {\n            e.printStackTrace();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        foo();\n    }\n\n    public static void bar() {\n\n    }\n\n    public static void foo() throws NullPointerException {\n\n    }\n}\n```\n\n**Explanation:**\nThis is a trick question—there is no problem with the code, and it will compile successfully. We can always catch `Exception` or any unchecked exception even if it’s not in the `throws` clause of the method.\n\nSimilarly, if a method (e.g., `foo`) declares an unchecked exception in its `throws` clause, it is not mandatory to handle that in the program.\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\nimport java.io.IOException;\n\npublic class TestException4 {\n\n    public void start() throws IOException {\n\n    }\n\n    public void foo() throws NullPointerException {\n\n    }\n}\n\nclass TestException5 extends TestException4 {\n\n    public void start() throws Exception {\n\n    }\n\n    public void foo() throws RuntimeException {\n\n    }\n}\n```\n\n**Explanation:**\nThe above program won’t compile because the `start()` method signature is not the same in the subclass. To fix this issue, either:\n\n- Change the method signature in the subclass to be exactly the same as the superclass.\n- Remove the `throws` clause from the subclass method as shown below:\n\n    ```java\n    @Override\n    public void start() {\n\n    }\n    ```\n\n### **What is the problem with the below program?**\n\n```java\npackage com.journaldev.exceptions;\n\nimport java.io.IOException;\nimport javax.xml.bind.JAXBException;\n\npublic class TestException6 {\n\n    public static void main(String[] args) {\n        try {\n            foo();\n        } catch (IOException | JAXBException e) {\n            e = new Exception(\"\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            e = new Exception(\"\");\n            e.printStackTrace();\n        }\n    }\n\n    public static void foo() throws IOException, JAXBException {\n\n    }\n}\n```\n\n**Explanation:**\nThe above program won’t compile because the exception object in a multi-catch block is final, and its value cannot be changed. You will get a compile-time error: \"The parameter `e` of a multi-catch block cannot be assigned.\"\n\nTo fix this error, remove the assignment of `e` to a new exception object.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"1b205e5f-e815-41c7-87a1-6e921e416561","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.156Z"},"updatedDate":{"$date":"2024-08-27T02:37:25.755Z"},"uniqueId":"50881390-d349-45d3-9009-dc808c42c8b9","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21f0a"},"name":"Ant is a build tool that is java based. A build tool performs the following","heading":"Ant is a build tool that is java based. A","smartContent":{"content":"<div><!--block-->Ant is a build tool that is java based. A build tool performs the following tasks:</div><ul><li><!--block-->Compiling java code into byte code</li><li><!--block-->Placing this byte code in a package</li><li><!--block-->Deployment to production systems</li><li><!--block-->Document creation and release notes preparation.</li></ul><div><!--block--><strong>Capabilities of ANT:</strong></div><ul><li><!--block-->ANT tool is extended by using java classes. The configuration files are XML-based. Each task of building directory tree is executed by using the object that implements the Task interface.</li><li><!--block-->ANT provides the cross-platform deployment that can run on any platform.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"56d1dc1b-42a2-443b-b3e8-b17b8fd406df","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.198Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.198Z"},"uniqueId":"29e2d5ca-23f6-4d8b-b09a-7ecef6b91017","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21f66"},"name":"Before start using ant, we should be clear about the project name and the .java","heading":"Before start using ant, we should be clear about the","smartContent":{"content":"<div><!--block-->Before start using ant, we should be clear about the project name and the .java files and most importantly, the path where the .class files are to be placed.<br>For example, we want the application HelloWorld to be used with ant. The Java source files are in a subdirectory called Dirhelloworld, and the .class files are to put into a sub directory called Helloworldclassfiles.<br>1. The build file by name build.xml is to be written. The script is as follows</div><div><!--block-->2. Now run the ant script to perform the compilation:</div><pre><!--block-->C :\\&gt; ant\nBuildfile: build.xml\nand see the results in the extra files and directory created:\nc:\\&gt;dir Dirhelloworld\nc:\\&gt;dir Helloworldclassfiles</pre><div><!--block-->All the .java files are in Dirhelloworld directory and all the corresponding .class are in Helloworldclassfiles directory.<br>Note: mkdir command is to be used in MS-DOS and mk dir command is to be used in UNIX/Linux<br>Dir command is to be used in MS-DOS and ls command is to be used in UNIX /Linux</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6503f28f-aa11-45fd-9d45-aed8b8413c67","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.214Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.214Z"},"uniqueId":"ad6262f6-2ba0-46da-a55d-39260bc606fa","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b21fc2"},"name":"There are a few way to define a classpath in Ant. If you look at","heading":"There are a few way to define a classpath in","smartContent":{"content":"<div><!--block-->There are a few way to define a classpath in Ant. If you look at the&nbsp;<a href=\"http://ant.apache.org/manual/\">Ant Manual</a>, you'll see that the&nbsp;<a href=\"http://ant.apache.org/manual/CoreTasks/java.html\">java task</a>&nbsp;has two attributes for the classpath : classpath and classpathref. You can also use a nested classpath element inside the body of the java task.<br>Let's say that you want to use the a global classpath reference. You could define your classpath like this (example taken from the Ant Manual):<br><br></div><pre><!--block-->&lt;path id=\"project.class.path\"&gt;\n  &lt;pathelement location=\"lib/\"/&gt;\n  &lt;pathelement path=\"${java.class.path}/\"/&gt;\n  &lt;pathelement path=\"${additional.path}\"/&gt;\n&lt;/path&gt;</pre><div><!--block--><br><br>and use it like this:<br><br></div><pre><!--block-->&lt;java classpathref=\"project.class.path\" ...&gt;\n...\n&lt;/java&gt;</pre><div><!--block--><br>or even like this :</div><pre><!--block-->&lt;java ...&gt;\n&lt;classpath refid=\"project.class.path\"/&gt;\n...\n&lt;/java&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"17aef8df-e895-47dc-bf88-ef8b6d12df79","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.229Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.229Z"},"uniqueId":"b0f5e2b2-72d6-40ae-afeb-0982b16ddf45","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b2304a"},"name":"Ant is a small animal who can build magnificent buildings. Ant builds! ANT is a","heading":"Ant is a small animal who can build magnificent buildings.","smartContent":{"content":"# Understanding Apache Ant: The Java Build Tool\n\n## What is Ant?\n\nApache Ant is a Java-based build tool that automates the process of compiling code, packaging binaries, and deploying applications. The name \"Ant\" is a clever reference to its ability to build complex structures—much like the insect, which is known for its ability to create intricate colonies. The tool was originally developed by James Duncan Davidson, who playfully dubbed it \"Another Neat Tool.\"\n\n## Why Use Ant?\n\nAnt is an essential tool for Java developers, offering capabilities similar to those of the Unix `make` utility but with the added benefits of being platform-independent and written in Java. Unlike `make`, which relies on shell scripting, Ant uses XML to define the build process, making it more accessible and easier to manage across different environments.\n\n### Key Features:\n- **Platform Independence:** Written in Java, Ant can run on any platform with a Java Virtual Machine (JVM).\n- **Extensibility:** Ant allows developers to write custom tasks in Java or extend existing ones.\n- **Declarative XML Configuration:** The build process is described in an XML file (`build.xml`), which outlines the tasks and dependencies in a clear, structured manner.\n- **Integration with Java Projects:** Ant is designed specifically for Java projects and integrates well with Java development environments.\n\n## Learning Ant Through Real-World Examples\n\nOne of the best ways to learn Ant is by exploring real-world projects that use it. For instance, downloading and examining the build files for smaller Apache projects like Log4J can provide invaluable insights. These projects often have well-documented build processes that showcase the fundamental capabilities of Ant.\n\n### Practical Tip:\nBy studying an Ant-based project, you not only learn the tool but also gain an understanding of best practices in project structure, naming conventions, and task management—effectively \"hitting two birds with one stone.\"\n\n## The Simplicity and Complexity of Ant\n\nAt its core, Ant is easy to use. Setting up basic tasks like compiling Java files, packaging JARs, and cleaning up build directories can be done with minimal effort. However, the real challenge comes when you need to scale your build process to handle a large, diverse codebase with multiple modules and dependencies.\n\n### Considerations for Complex Systems:\n- **Design Simplicity:** An elegant, simple design is crucial for maintaining a large system. This includes a well-thought-out directory structure and clear, consistent naming conventions.\n- **Code Reusability and Flexibility:** Ant's build scripts should be modular and reusable, allowing for flexibility and ease of maintenance.\n- **Optimization and Maintenance:** A good Ant build process minimizes redundancy and is easy to maintain, even as the project grows.\n\n## Conclusion\n\nWhile Ant is a powerful and versatile tool, mastering it requires more than just technical knowledge. It involves understanding how to design a build process that is both efficient and maintainable. As you delve deeper into Ant, you'll find that the key to success lies in balancing simplicity with the ability to handle complexity—a challenge that every seasoned developer learns to navigate. \n\nFor more detailed guidance, check out [Apache Ant documentation](https://ant.apache.org/manual/index.html) and start experimenting with projects that interest you.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"f3eb2e96-c265-45a5-ba6c-bcbf4dbdda67","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.704Z"},"updatedDate":{"$date":"2024-08-27T02:43:56.495Z"},"uniqueId":"6b771a82-e0a8-4172-9848-3098ae0abe29","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b230a6"},"name":"Simple. Download the most recent version of ant from Apache; unzip it some where on","heading":"Simple. Download the most recent version of ant from Apache;","smartContent":{"content":"<div><!--block-->Simple.<br><br></div><ul><li><!--block-->Download the most recent version of ant from Apache; unzip it some where on your machine.</li><li><!--block-->Install j2sdk 1.4 or above.</li><li><!--block-->Set JAVA_HOME and ANT_HOME to the directory your installed them respectively.</li><li><!--block-->Put %JAVA_HOME%/bin;%ANT_HOME%/bin on your Path. Use ${JAVA_HOME}/bin:${ANT_HOME}/bin on UNIX. Yes, you can use forward slash on windows.</li><li><!--block-->Write a “Hello world” build.xml</li></ul><pre><!--block-->&lt;project name=\"hello\" default=\"say.hello\" basedir=\".\" &gt;\n                    &lt;property name=\"hello.msg\" value=\"Hello, World!\" /&gt;\n                    &lt;target name=\"say.hello\" &gt;\n                      &lt;echo&gt;${hello.msg}&lt;/echo&gt;\n                    &lt;/target&gt;\n                  &lt;/project&gt;</pre><div><!--block-->Type ant in the directory your build.xml located.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fac13f5d-ae57-4920-8660-17d733c44323","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.719Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.719Z"},"uniqueId":"a7f4118b-9f4f-45c6-9c53-91c840083e9d","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b230a8"},"name":"DEFAULT_PREFIX_53414052-baa2-4209-b4c0-59062f4a2ed8","heading":"DEFAULT_PREFIX_53caf63e-a4d4-4a8b-833c-d884bba1fc5e","smartContent":{"content":"<h1> default content. Replace it with meaningful content</h1>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fac13f5d-ae57-4920-8660-17d733c44323","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.724Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.724Z"},"uniqueId":"ef8cdcc7-1e81-49b9-aac6-9eaced00b24d","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23104"},"name":"The following code fails when directory does not exist! <delete> <fileset dir=\"${upperdir.which.exists}\"> <include name=\"${classes.dir}/*.class\" />","heading":"The following code fails when directory does not exist! <delete>","smartContent":{"content":"<div><!--block--><strong><em><br><br></em></strong>The following code fails when directory does not exist!<br><br></div><pre><!--block-->&lt;delete&gt;\n    &lt;fileset dir=\"${upperdir.which.exists}\"&gt;\n      &lt;include name=\"${classes.dir}/*.class\" /&gt;\n    &lt;/fileset&gt;\n  &lt;/delete&gt;</pre><div><!--block-->Your code has many problems.<br><br></div><ol><li><!--block-->You should not use implicit fileset, which is deprecated. You should use nested fileset.</li><li><!--block-->If dir does not exist, the build will fail, period!</li><li><!--block-->If you are not sure, use a upper level dir, which exists for sure. See the following fileset.</li></ol><pre><!--block-->&lt;path id=\"build.classpath\"&gt;\n    &lt;fileset dir=\"${build.lib}\" includes=\"**/*.jar\"/&gt;\n    &lt;fileset dir=\"${build.classes}\" /&gt;\n  &lt;/path&gt;\n \n  &lt;target....&gt;\n    &lt;javac ....&gt;\n      &lt;classpath refid=\"build.classpath\" /&gt;\n    &lt;/java&gt;\n  &lt;/target&gt;\n \n  &lt;target....&gt;\n    &lt;java ....&gt;\n      &lt;classpath refid=\"build.classpath\" /&gt;\n    &lt;/java&gt;\n  &lt;/target&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"418b1e01-490b-41d7-854b-6db5b2d17b01","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.739Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.739Z"},"uniqueId":"bb023098-e893-45e5-b1c7-6539b983247e","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23160"},"name":"Ant sets properties by order, when something is set, the later same properties cannot overwrite","heading":"Ant sets properties by order, when something is set, the","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Ant sets properties by order, when something is set, the later same properties cannot overwrite the previous ones. This is opposite to your Java setters. This give us a good leverage of preset all properties in one place, and overwrite only the needed. Give you an example here. You need password for a task, but don’t want to share it with your team members, or not the developers outside your team.<br><br></div><div><!--block-->Store your password in your ${user.home}/prj.properties<br><br></div><div><!--block-->pswd=yourrealpassword<br><br></div><div><!--block-->In your include directory master prj.properties<br><br></div><div><!--block-->pswd=password<br><br></div><div><!--block-->In your build-common.xml read properties files in this order<br><br></div><ol><li><!--block-->The commandline will prevail, if you use it: ant -Dpswd=newpassword</li><li><!--block-->${user.home}/prj.properties (personal)</li><li><!--block-->yourprojectdir/prj.properties (project team wise)</li><li><!--block-->your_master_include_directory/prj.properties (universal)</li></ol><pre><!--block-->&lt;cvsnttask password=\"${pswd} ... /&gt;</pre><div><!--block-->Problem solved!<br><br></div><div><!--block--><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e2ceafdb-e8f2-407b-a9f6-2bd01c8e1150","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.754Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.754Z"},"uniqueId":"285ffe3a-61f6-4349-9b92-585d62ef80e4","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b231bc"},"name":"No, you can’t! Properties in Ant are immutable. There is a good reason behind this,","heading":"No, you can’t! Properties in Ant are immutable. There is","smartContent":{"content":"<div><!--block--><strong><br><br></strong>No, you can’t!<br><br></div><div><!--block-->Properties in Ant are immutable. There is a good reason behind this, see this FAQ item for more details.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b8e8026a-2af3-43e0-bb9a-d361f782b521","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.77Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.77Z"},"uniqueId":"75c2c528-dcbe-437d-8bdc-956bd24f12d4","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23218"},"name":"Simple, just copy ant-contrib.jar to your ant*/lib directory And add this line into your ant","heading":"Simple, just copy ant-contrib.jar to your ant*/lib directory And add","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Simple, just copy ant-contrib.jar to your ant*/lib directory<br><br></div><div><!--block-->And add this line into your ant script, all ant-contrib tasks are now available to you!</div><pre><!--block-->&lt;taskdef resource=”net/sf/antcontrib/antcontrib.properties” /&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1d7fffb2-5601-401f-8872-7ffb6e027bf9","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.784Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.784Z"},"uniqueId":"83d2b76f-f9fb-49ce-b8b5-9863ecff1896","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23274"},"name":"Use ant-contrib <for> <foreach> tasks General to say, use <for> is better than use <foreach>","heading":"Use ant-contrib <for> <foreach> tasks General to say, use <for>","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Use ant-contrib &lt;for&gt; &lt;foreach&gt; tasks<br><br></div><div><!--block--><br></div><div><!--block-->General to say, use &lt;for&gt; is better than use &lt;foreach&gt; since for each is actually open another ant property space, use more memory too.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"01d7c15b-2125-4509-9733-8fb1f15d2415","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.799Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.799Z"},"uniqueId":"492e5851-6ebb-435a-be68-3707acfeaac7","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b232d0"},"name":"Here is a real world example. <target name=\"run\" depends=\"some.target,some.other.target\"> <java classname=\"${run.class}\" fork=\"yes\"> <classpath> <path refid=\"classpath\"","heading":"Here is a real world example. <target name=\"run\" depends=\"some.target,some.other.target\"> <java","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Here is a real world example.<br><br></div><pre><!--block-->&lt;target name=\"run\" depends=\"some.target,some.other.target\"&gt;\n\n    &lt;java classname=\"${run.class}\" fork=\"yes\"&gt;\n      &lt;classpath&gt;\n        &lt;path refid=\"classpath\" /&gt;\n      &lt;/classpath&gt;\n\n      &lt;jvmarg line=\"${debug.jvmargs}\" /&gt;\n      &lt;jvmarg line=\"${my.jvmargs}\" /&gt;\n      &lt;jvmarg value=\"-Dname=${name}\" /&gt;\n      &lt;jvmarg line=\"${run.jvmargs}\" /&gt;\n      &lt;arg line=\"${run.args}\" /&gt;\n    &lt;/java&gt;\n  &lt;/target&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bb052762-f45d-4211-8241-4c4bd425aa38","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.815Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.815Z"},"uniqueId":"085d0a98-9190-4224-990c-3ecb4cb39e70","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b2332c"},"name":"Many ways Do an echo on where you have doubt. You will find out what","heading":"Many ways Do an echo on where you have doubt.","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Many ways</div><ul><li><!--block-->Do an echo on where you have doubt. You will find out what is the problem easily. Just like the old c printf() or Java System.println()</li><li><!--block-->Use project.log(“msg”) in your javascript or custom ant task</li><li><!--block-->Run Ant with -verbose, or even -debug, to get more information on what it is doing, and where. However, you might be tired with<br>that pretty soon, since it give you too much information.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2daa3e8a-6f57-442a-8065-63852069f46b","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.831Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.831Z"},"uniqueId":"cdc22c7f-0c2a-404f-99a4-2d0d0a9beb9a","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23388"},"name":"Here is an example. <copy todir=\"${to.dir}\" > <fileset dir=\"${from.dir}\" > <exclude name=\"dirname1\" /> <exclude name=\"dirname2\"","heading":"Here is an example. <copy todir=\"${to.dir}\" > <fileset dir=\"${from.dir}\" >","smartContent":{"content":"<div><!--block--><strong><br><br></strong>Here is an example.<br><br></div><pre><!--block-->&lt;copy todir=\"${to.dir}\" &gt;\n    &lt;fileset dir=\"${from.dir}\" &gt;\n      &lt;exclude name=\"dirname1\" /&gt;\n      &lt;exclude name=\"dirname2\" /&gt;\n      &lt;exclude name=\"abc/whatever/dirname3\" /&gt;\n      &lt;exclude name=\"**/dirname4\" /&gt;\n    &lt;/fileset&gt;\n  &lt;/copy&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5e759407-017a-4c54-bf58-3ae84e7498cd","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.847Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.847Z"},"uniqueId":"d2733346-e70f-4003-b603-5b977e51e28f","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b233e4"},"name":"You don’t need to use Runtime etc. Ant have exec task. The class name is","heading":"You don’t need to use Runtime etc. Ant have exec","smartContent":{"content":"<div><!--block--><strong><br><br></strong>You don’t need to use Runtime etc. Ant have exec task.<br>The class name is org.apache.tools.ant.taskdefs.ExecTask. You can create the task by using the code in your customized ant Task.<br><br></div><pre><!--block--><strong><em>ExecTask compile = (ExecTask)project.createTask(“exec”);</em></strong></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"75736d1f-99f0-430a-8689-c52da5a691c0","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.863Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.863Z"},"uniqueId":"d37f4729-c8b5-4344-88a5-9b0acde1a7ea","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23440"},"name":"No, you don’t need to unarchive them first. You don’t need to unzip the files","heading":"No, you don’t need to unarchive them first. You don’t","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->No, you don’t need to unarchive them first.</div><ul><li><!--block-->You don’t need to unzip the files from archive to put into your destination jar/ear/war files.</li><li><!--block-->You can use zipfileset in your jar/war/ear task to extract files from old archive to different directory in your new archive.</li><li><!--block-->You also can use zipfileset in your jar/war/ear task to send files from local directory to different directory in your new archive.</li></ul><div><!--block-->See the follow example:<br><br></div><pre><!--block-->  &lt;jar destfile=\"${dest}/my.jar\"&gt;\n    &lt;zipfileset src=\"old_archive.zip\" includes=\"**/*.properties\" prefix=\"dir_in_new_archive/prop\"/&gt;\n    &lt;zipfileset dir=\"curr_dir/abc\" prefix=\"new_dir_in_archive/xyz\"/&gt;\n  &lt;/jar&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74be184e-6189-43d4-a07e-24e08874a7e1","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.879Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.879Z"},"uniqueId":"e9c5fa4d-5938-452b-b12f-600694a61252","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b2349c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Why Did I Get Such a Warning in Ant?\n\nThe warnings like:\n\n```plaintext\n[javac] Warning: commons-logging.properties modified in the future.\n[javac] Warning: dao\\DAO.java modified in the future.\n[javac] Warning: dao\\DBDao2.java modified in the future.\n[javac] Warning: dao\\HibernateBase.java modified in the future.\n```\n\noccur because the files mentioned have timestamps set in the future relative to the system's current time. This discrepancy often arises due to:\n\n- **Incorrect System Clock**: Your system clock might be out of sync, possibly because of a timezone or daylight saving time issue.\n- **File Timestamp Issue**: The files may have been created or modified on a machine with a different system clock, and then transferred to the current system.\n- **Version Control Timestamp Issue**: If you're using version control, the timestamps might have been preserved from another environment with different time settings.\n\n### Solutions\n\n- **Synchronize System Time**: Ensure that your system's clock is synchronized with an accurate time source, like an NTP server.\n- **Touch the Files**: Use the `touch` command (in Unix-based systems) or equivalent tools to update the modification time of the files to the current time.\n- **Version Control Settings**: Check your version control settings to ensure they handle timestamps consistently across different environments.\n\nFixing the timestamps will resolve these warnings during the Ant build process.","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"aa18b42f-d126-4a44-a107-057061a92b6e","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.895Z"},"updatedDate":{"$date":"2024-08-27T03:26:15.482Z"},"uniqueId":"06a9a121-9eea-4ec2-8536-24806c977614","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b234f8"},"name":"The followings are what I’m doing. - Don’t define java.home by yourself. Ant uses an","heading":"The followings are what I’m doing. - Don’t define java.home","smartContent":{"content":"<div><!--block--><strong><br><br></strong>The followings are what I’m doing.<br><br></div><div><!--block-->- Don’t define java.home by yourself. Ant uses an internal one derived from your environment var JAVA_HOME. It is immutable.</div><div><!--block--><br>- I do the followings:<br>* In my build.properties (read first)<br><br><br><br>jdk13.bin=${tools.home}/jdk1.3.1_13/bin<br><br><br><br>jdk14.bin=${tools.home}/j2sdk1.4.2_08/bin/<br><br><br><br>* In my master properties file (read last), set default<br><br><br><br>javac.location=${jdk13.bin}<br><br><br><br>* In my prj.properties, if I need to use 1.4<br><br><br><br>javac.location=${jdk14.bin}<br><br><br><br>* in my javac task<br><br><br><br>executable=”${javac.location}/javac.exe”</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"822a961a-75e4-423a-8730-02eb4546d529","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.911Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.911Z"},"uniqueId":"0a20d9e4-ad34-4b95-8fe1-257f7fe64702","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b23554"},"name":"There are many ways to solve the problem. Since target if/unless all depend on some","heading":"There are many ways to solve the problem. Since target","smartContent":{"content":"<div><!--block--><strong><br><br></strong>There are many ways to solve the problem.</div><ul><li><!--block-->Since target if/unless all depend on some property is defined or not, you can use condition to define different NEW properties, which<br>in turn depends on your ant property values. This makes your ant script very flexible, but a little hard to read.</li><li><!--block-->Ant-contrib has &lt;if&gt; &lt;switch&gt; tasks for you to use.</li><li><!--block-->Ant-contrib also has &lt;propertyregex&gt; which can make very complicate decisions.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"60b71ac6-aa9f-4106-bd17-c496f343eec4","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.933Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.933Z"},"uniqueId":"8d71a7e6-02c7-46b6-9efc-23a2508d8955","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b235b0"},"name":"<foreach> is actually using a different property space, you can pass any property name/value pair","heading":"<foreach> is actually using a different property space, you can","smartContent":{"content":"<div><!--block--><strong><br><br></strong>&lt;foreach&gt; is actually using a different property space, you can pass any property name/value pair to it. Just use &lt;param&gt; nested tag inside foreach</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"68a70248-831c-40c5-9619-15e5307ddb79","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.95Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.95Z"},"uniqueId":"8c27dff5-fd57-4977-8ca5-357f971c4509","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b2360c"},"name":"Tell you a great trick, it works excellent. In your major build-include.xml, put in this","heading":"Tell you a great trick, it works excellent. In your","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Tell you a great trick, it works excellent.<br>In your major build-include.xml, put in this line<br><br></div><pre><!--block-->  &lt;property file=\"${antutil.includes}/${os.name}-${os.arch}.properties\" /&gt;</pre><div><!--block-->This will auto-detect your platform, and you write one file for each environment specific variables. For example: HP-UX-PA_RISC2.0.properties SunOS-sparc.properties Windows XP-x86.properties … They work great!!!</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"877ed784-c4b4-4e89-9f86-477eb3bc4573","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.966Z"},"updatedDate":{"$date":"2024-07-10T20:39:53.966Z"},"uniqueId":"fd2fa7bf-4cee-46bc-b5e3-3e68c3bf2d5c","__v":0}
{"_id":{"$oid":"668ef19959d6bcc528b236ab"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### What is Hibernate?\n\nHibernate is an open-source Object-Relational Mapping (ORM) framework for Java that provides a powerful and flexible way to interact with databases. It maps Java objects to database tables and vice versa, facilitating database operations without requiring extensive SQL code. \n\n#### Key Features of Hibernate:\n\n1. **Object-Relational Mapping (ORM)**: Maps Java classes to database tables and Java data types to SQL data types.\n\n2. **Data Query and Retrieval**: Supports querying with HQL (Hibernate Query Language) and Criteria API.\n\n3. **Automatic Schema Generation**: Can automatically create or update database schemas based on the entity mappings.\n\n4. **Caching**: Provides caching mechanisms to improve performance by reducing database access.\n\n5. **Lazy Loading**: Supports lazy loading, allowing for efficient retrieval of related data only when needed.\n\n6. **Transaction Management**: Integrates with various transaction management systems, providing a consistent way to manage database transactions.\n\n7. **Database Independence**: Abstracts database-specific details, allowing applications to switch between different databases with minimal changes.\n\n#### Basic Components:\n\n1. **SessionFactory**: The core interface for creating `Session` instances, which represent a single-threaded unit of work.\n\n2. **Session**: The interface used to perform CRUD operations and queries on the database.\n\n3. **Transaction**: Used to manage database transactions.\n\n4. **Entity**: A Java class annotated with Hibernate annotations or XML mappings that represents a table in the database.\n\n5. **Mapping**: Defines how Java classes and their properties are mapped to database tables and columns, typically done using annotations or XML.\n\n#### Example of a Basic Hibernate Setup:\n\n1. **Entity Class**:\n   ```java\n   @Entity\n   @Table(name = \"employees\")\n   public class Employee {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n\n       @Column(name = \"name\")\n       private String name;\n\n       @Column(name = \"salary\")\n       private Double salary;\n\n       // Getters and setters\n   }\n   ```\n\n2. **Hibernate Configuration (hibernate.cfg.xml)**:\n   ```xml\n   <hibernate-configuration>\n       <session-factory>\n           <property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n           <property name=\"hibernate.connection.driver_class\">com.mysql.cj.jdbc.Driver</property>\n           <property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/mydb</property>\n           <property name=\"hibernate.connection.username\">root</property>\n           <property name=\"hibernate.connection.password\">password</property>\n           <property name=\"hibernate.hbm2ddl.auto\">update</property>\n           <property name=\"hibernate.show_sql\">true</property>\n           <mapping class=\"com.example.Employee\"/>\n       </session-factory>\n   </hibernate-configuration>\n   ```\n\n3. **Session Usage**:\n   ```java\n   SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();\n   Session session = sessionFactory.openSession();\n   session.beginTransaction();\n   \n   Employee employee = new Employee();\n   employee.setName(\"John Doe\");\n   employee.setSalary(50000.0);\n   \n   session.save(employee);\n   session.getTransaction().commit();\n   session.close();\n   ```\n\nHibernate simplifies database interactions by handling the underlying complexity of database communication, making it easier to focus on business logic and data manipulation.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"aa6f7a7c-a459-4577-a834-910c965c467c","order":0,"createdDate":{"$date":"2024-07-10T20:39:53.996Z"},"updatedDate":{"$date":"2024-08-27T03:30:56.481Z"},"uniqueId":"e9993e9e-9840-4001-acd9-b3765b55f9cf","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23714"},"name":"ORM (Object Relational Mapping) is the fundamental concept of Hibernate framework which maps database tables","heading":"ORM (Object Relational Mapping) is the fundamental concept of Hibernate","smartContent":{"content":"### What is ORM?\n\nObject-Relational Mapping (ORM) is a programming technique used to convert data between incompatible type systems in object-oriented programming languages and relational databases. ORM provides a way to interact with a database using an object-oriented paradigm, allowing developers to work with data as objects rather than dealing directly with SQL queries.\n\n#### Key Concepts of ORM:\n\n1. **Mapping Objects to Database Tables**:\n   - **Entities**: Classes in the object-oriented application that map to tables in the database.\n   - **Attributes**: Fields in the class that map to columns in the database table.\n\n2. **Automatic SQL Generation**:\n   - ORM frameworks generate SQL queries based on the operations performed on objects, such as save, update, delete, and query.\n\n3. **Object Identity**:\n   - Ensures that an object represents a single row in the database table, with a unique identifier (primary key).\n\n4. **Caching**:\n   - Many ORM frameworks include caching mechanisms to improve performance by reducing database access.\n\n5. **Data Retrieval**:\n   - Allows querying and retrieving data using object-oriented methods instead of writing raw SQL.\n\n6. **Lazy Loading**:\n   - Supports loading related data on demand, rather than loading all related data upfront, which can improve performance.\n\n#### Benefits of ORM:\n\n1. **Productivity**: Reduces the amount of boilerplate code needed to interact with a database, allowing developers to focus more on business logic.\n\n2. **Maintainability**: Simplifies the codebase by abstracting database interactions, making the code easier to maintain and refactor.\n\n3. **Database Independence**: Allows applications to switch between different databases with minimal changes to the codebase.\n\n4. **Type Safety**: Provides compile-time checking of data types and queries, reducing runtime errors.\n\n5. **Automatic Schema Management**: Some ORM tools can automatically generate or update database schemas based on the object model.\n\n#### Example of ORM in Java with Hibernate:\n\n1. **Entity Class**:\n   ```java\n   @Entity\n   @Table(name = \"employees\")\n   public class Employee {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n\n       @Column(name = \"name\")\n       private String name;\n\n       @Column(name = \"salary\")\n       private Double salary;\n\n       // Getters and setters\n   }\n   ```\n\n2. **Session Usage**:\n   ```java\n   SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();\n   Session session = sessionFactory.openSession();\n   session.beginTransaction();\n   \n   Employee employee = new Employee();\n   employee.setName(\"Jane Doe\");\n   employee.setSalary(60000.0);\n   \n   session.save(employee);\n   session.getTransaction().commit();\n   session.close();\n   ```\n\n#### Common ORM Frameworks:\n\n- **Hibernate**: A popular Java ORM framework that provides a comprehensive suite of features for ORM.\n- **Entity Framework**: An ORM framework for .NET languages.\n- **Django ORM**: Built into the Django web framework for Python.\n- **ActiveRecord**: An ORM framework for Ruby on Rails.\n\nORM frameworks help bridge the gap between the object-oriented world and relational databases, streamlining the development process and improving the management of data interactions.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"7e54f7d5-122f-4cf0-81aa-4c862b10453f","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.012Z"},"updatedDate":{"$date":"2024-08-27T03:33:30.307Z"},"uniqueId":"f41fa895-955d-484b-888e-67f73e03f081","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2377d"},"name":"Mappings between class properties and table columns are specified in XML file as in the","heading":"Mappings between class properties and table columns are specified in","smartContent":{"content":"<div><!--block-->Mappings between class properties and table columns are specified in XML file as in the below example:</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2f1a81d8-c78b-4d94-b224-f689c3f15fb4","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.027Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.027Z"},"uniqueId":"284796cc-b986-4745-b327-53a43341a45a","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b237e6"},"name":"Configuration interface of hibernate framework is used to configure hibernate. It’s also used to bootstrap","heading":"Configuration interface of hibernate framework is used to configure hibernate.","smartContent":{"content":"<div><!--block-->Configuration interface of hibernate framework is used to configure hibernate. It’s also used to bootstrap hibernate. Mapping documents of hibernate are located using this interface.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"291d0ec9-2ad8-429d-8399-443b2657ccd0","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.042Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.042Z"},"uniqueId":"1e9af3ff-9ea2-4ff8-b89b-b3d2995eedc1","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2384f"},"name":"We can use extension interfaces in order to add any required functionality which isn’t supported","heading":"We can use extension interfaces in order to add any","smartContent":{"content":"<div><!--block-->We can use extension interfaces in order to add any required functionality which isn’t supported by built-in interfaces.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"813c0be7-5359-4199-be5e-bd81713e7627","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.058Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.058Z"},"uniqueId":"00c1d77e-28f9-426c-916d-e35a9cdc372c","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b238b8"},"name":"No, having .hbm.xml extension is a convention and not a requirement for hibernate mapping file","heading":"No, having .hbm.xml extension is a convention and not a","smartContent":{"content":"<div><!--block-->No, having .hbm.xml extension is a convention and not a requirement for hibernate mapping file names. We can have any extension for these mapping files.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c1060823-f2b9-4af0-9d51-3de8ef2c025d","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.073Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.073Z"},"uniqueId":"f64c3c61-f7a2-41cb-8020-0dacf540ef6b","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23921"},"name":"To create a session factory in hibernate, an object of configuration is created first which","heading":"To create a session factory in hibernate, an object of","smartContent":{"content":"<div><!--block-->To create a session factory in hibernate, an object of configuration is created first which refers to the path of configuration file and then for that configuration, session factory is created as given in the example below:</div><pre><!--block-->Configuration config = new Configuration();\nconfig.addResource(&amp;amp;amp;quot;myinstance/configuration.hbm.xml&amp;amp;amp;quot;);\nconfig.setProperties( System.getProperties() );\nSessionFactory sessions = config.buildSessionFactory();</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3e295e6f-bf46-43da-994d-f852022c3144","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.088Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.088Z"},"uniqueId":"ea48edf5-de4f-412b-a12b-309e9aff4d67","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2398a"},"name":"POJOs( Plain Old Java Objects) are java beans with proper getter and setter methods for","heading":"POJOs( Plain Old Java Objects) are java beans with proper","smartContent":{"content":"<div><!--block-->POJOs( Plain Old Java Objects) are java beans with proper getter and setter methods for each and every properties.<br>Use of POJOs instead of simple java classes results in an efficient and well constructed code.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"52ea34e3-b746-4385-82b6-252638ffec2e","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.104Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.104Z"},"uniqueId":"9a64f930-965a-4383-bb09-899e98114f2e","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b239f3"},"name":"HQL is the query language used in Hibernate which is an extension of SQL. HQL","heading":"HQL is the query language used in Hibernate which is","smartContent":{"content":"<div><!--block-->HQL is the query language used in Hibernate which is an extension of SQL. HQL is very efficient, simple and flexible query language to do various type of operations on relational database without writing complex database queries.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f044fe91-dbb7-4f2a-b3d7-a61f7472dd76","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.12Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.12Z"},"uniqueId":"08bcd5f7-926e-4d49-8940-846e0ee65269","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23a5c"},"name":"In hibernate we can execute stored procedures using code as below: <sql-query name=”getStudents” callable=”true”> <return","heading":"In hibernate we can execute stored procedures using code as","smartContent":{"content":"<div><!--block-->In hibernate we can execute stored procedures using code as below:</div><pre><!--block-->&lt;sql-query name=”getStudents” callable=”true”&gt;\n&lt;return alias=”st” class=”Student”&gt;\n&lt;return-property name=”std_id” column=”STD_ID”/&gt;\n&lt;return-property name=”s_name” column=”STD_NAME”/&gt;\n&lt;return-property name=”s_dept” column=”STD_DEPARTMENT”/&gt;\n{ ? = call selectStudents() }\n&lt;/return&gt;\n&lt;/sql-query&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4b001baa-a97f-43b7-8c88-ce20fefbade9","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.135Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.135Z"},"uniqueId":"7a858435-ce52-4b83-a779-33f14848d7cb","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23ac5"},"name":"Criteria is a simple yet powerful API of hibernate which is used to retrieve entities","heading":"Criteria is a simple yet powerful API of hibernate which","smartContent":{"content":"<div><!--block-->Criteria is a simple yet powerful API of hibernate which is used to retrieve entities through criteria object composition.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bd5a957a-31e7-43f8-bbe6-82ef747832c2","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.151Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.151Z"},"uniqueId":"fec73d29-19f5-414b-af4c-c2483a1cc928","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23b2e"},"name":"Following are some key benefits of using Hibernate template: a. Session closing is automated. b.","heading":"Following are some key benefits of using Hibernate template: a.","smartContent":{"content":"<div><!--block-->Following are some key benefits of using Hibernate template:<br>a. Session closing is automated.<br>b. Interaction with hibernate session is simplified.<br>c. Exception handling is automated.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"60ce2569-1746-440e-9a25-fadcc2cd12f7","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.166Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.166Z"},"uniqueId":"595817b7-ae1e-42c0-bf05-0f20fc85ab72","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23b97"},"name":"We need to add following in hibernate configuration file to enable viewing SQL on the","heading":"We need to add following in hibernate configuration file to","smartContent":{"content":"<div><!--block-->We need to add following in hibernate configuration file to enable viewing SQL on the console for debugging purposes:</div><pre><!--block-->&lt;property name=”show_sql”&gt;true&lt;/property&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c02dbc67-108d-4992-bae7-81bcf6746c51","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.18Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.18Z"},"uniqueId":"50ccae8c-41ff-4855-a941-bc9898e06122","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23c00"},"name":"Following are the two types of collections in hibernate: a. Sorted Collection b. Order Collection","heading":"Following are the two types of collections in hibernate: a.","smartContent":{"content":"<div><!--block-->Following are the two types of collections in hibernate:<br>a. Sorted Collection<br>b. Order Collection</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7711f1e2-b05a-4673-8876-d573e75a9805","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.194Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.194Z"},"uniqueId":"999d51e7-04de-449b-839f-212a78ca11b9","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23c69"},"name":"Sessionsave() method saves a record only if it’s unique with respect to its primary key","heading":"Sessionsave() method saves a record only if it’s unique with","smartContent":{"content":"<div><!--block-->Sessionsave() method saves a record only if it’s unique with respect to its primary key and will fail to insert if primary key already exists in the table.<br>saveOrUpdate() method inserts a new record if primary key is unique and will update an existing record if primary key exists in the table already.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ae19c89-b2c8-431b-af9a-90cd4797f5f3","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.209Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.209Z"},"uniqueId":"77a12fdf-8ace-4eef-b57d-546deed3d488","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23cd2"},"name":"a. Hibernate can be used seamlessly with any type of database as its database independent","heading":"a. Hibernate can be used seamlessly with any type of","smartContent":{"content":"<div><!--block-->a. Hibernate can be used seamlessly with any type of database as its database independent while in case of JDBC, developer has to write database specific queries.<br>b. Using hibernate, developer doesn’t need to be an expert of writing complex queries as HQL simplifies query writing process while in case of JDBC, its job of developer to write and tune queries.<br>c. In case of hibernate, there is no need to create connection pools as hibernate does all connection handling automatically while in case of JDBC, connection pools need to be created.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b5f8fb07-685c-4645-ab9f-0de816028bc7","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.225Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.225Z"},"uniqueId":"fb05d40f-094b-4f77-848b-bfdde1160693","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23d3b"},"name":"We can get hibernate statistics using getStatistics() method of SessionFactory class as shown below: SessionFactory.getStatistics()","heading":"We can get hibernate statistics using getStatistics() method of SessionFactory","smartContent":{"content":"<div><!--block-->We can get hibernate statistics using getStatistics() method of SessionFactory class as shown below:</div><pre><!--block-->SessionFactory.getStatistics()</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"83a2aaa1-4395-49cb-bce3-0889d279c5e2","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.239Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.239Z"},"uniqueId":"db9abd9c-7729-45e4-b411-90d87298eb60","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23da4"},"name":"If an instance is not associated with any persistent context and also, it has never","heading":"If an instance is not associated with any persistent context","smartContent":{"content":"<div><!--block-->If an instance is not associated with any persistent context and also, it has never been associated with any persistent context, then it’s said to be in transient state.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8cdedfbb-13a4-4511-9492-9b2bef4c2ecc","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.254Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.254Z"},"uniqueId":"4b710d75-6376-4ca5-bec2-0f33a9d8adc4","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23e0d"},"name":"Hibernate provides dirty checking feature which can be used to reduce database write times. Dirty","heading":"Hibernate provides dirty checking feature which can be used to","smartContent":{"content":"<div><!--block-->Hibernate provides dirty checking feature which can be used to reduce database write times. Dirty checking feature of hibernate updates only those fields which require a change while keeps others unchanged.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ed3c7848-83a5-42e9-9229-b07b75d667b2","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.269Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.269Z"},"uniqueId":"c37e78a8-5d8f-433a-a19c-3033dd576f72","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23e76"},"name":"Callback interfaces of hibernate are useful in receiving event notifications from objects. For example, when","heading":"Callback interfaces of hibernate are useful in receiving event notifications","smartContent":{"content":"<div><!--block-->Callback interfaces of hibernate are useful in receiving event notifications from objects. For example, when an object is loaded or deleted, an event is generated and notification is sent using callback interfaces.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7654ef74-66e2-448c-965b-cf4973797b64","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.284Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.284Z"},"uniqueId":"5d5ab460-ddda-43cd-b966-3d92ec6ab932","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23edf"},"name":"When an instance was earlier associated with some persistent context (e.g. a table) and is","heading":"When an instance was earlier associated with some persistent context","smartContent":{"content":"<div><!--block-->When an instance was earlier associated with some persistent context (e.g. a table) and is no longer associated, it’s called to be in detached state.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"46ffad96-10d8-4cb5-9b49-070d4a2e2eb8","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.298Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.298Z"},"uniqueId":"d9994cae-3d31-40bb-9690-04b7be421bb5","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23f48"},"name":"Following are the four ORM levels in hibernate: a. Pure Relational b. Light Object Mapping","heading":"Following are the four ORM levels in hibernate: a. Pure","smartContent":{"content":"<div><!--block-->Following are the four ORM levels in hibernate:<br>a. Pure Relational<br>b. Light Object Mapping<br>c. Medium Object Mapping<br>d. Full Object Mapping</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3b97be68-3657-4292-9a5a-e7ace3948b13","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.313Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.313Z"},"uniqueId":"33732903-65a1-43ea-8bd7-a5ceb5a2e712","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b23fb1"},"name":"Transaction management is the process of managing a set of statements or commands. In hibernate;","heading":"Transaction management is the process of managing a set of","smartContent":{"content":"<div><!--block-->Transaction management is the process of managing a set of statements or commands. In hibernate; transaction management is done by transaction interface as shown in below code:</div><pre><!--block-->Session s = null;\nTransaction tr = null;\ntry {\ns = sessionFactory.openSession();\ntr = s.beginTransaction();\ndoTheAction(s);\ntr.commit();\n} catch (RuntimeException exc) {\ntr.rollback();\n} finally {\ns.close();\n}</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"aa51e12e-7636-4981-bf0b-47680736954c","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.328Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.328Z"},"uniqueId":"b6af8d37-3131-479b-9401-a264da32c441","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2401a"},"name":"We can use any of the following two methods of hibernate configuration: a. XML based","heading":"We can use any of the following two methods of","smartContent":{"content":"<div><!--block-->We can use any of the following two methods of hibernate configuration:<br>a. XML based configuration ( using hibernate.cfg.xml file)<br>b. Programmatic configuration ( Using code logic)</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d92a2d6f-0380-42a5-ae4a-431f836395b2","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.345Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.345Z"},"uniqueId":"c1336d05-9c1b-40a5-80a8-32cc093009f2","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24083"},"name":"Hibernate supports multiple cache services like EHCache, OSCache, SWARMCache and TreeCache and default cache service","heading":"Hibernate supports multiple cache services like EHCache, OSCache, SWARMCache and","smartContent":{"content":"<div><!--block-->Hibernate supports multiple cache services like EHCache, OSCache, SWARMCache and TreeCache and default cache service of hibernate is EHCache.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0acb3aed-9273-4644-97f2-66bed12d152e","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.361Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.361Z"},"uniqueId":"4017f6ea-8acf-4ef6-a427-0ee685af2dce","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b240ec"},"name":"In hibernate; we have following two types of mapping associations between entities: a. One-to-One Association","heading":"In hibernate; we have following two types of mapping associations","smartContent":{"content":"<div><!--block-->In hibernate; we have following two types of mapping associations between entities:<br>a. One-to-One Association<br>b. Many-to-Many Association</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9056fac0-9abb-4ed0-bda2-e82d1e89ea23","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.379Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.379Z"},"uniqueId":"ab8fc993-879b-4113-92e1-f041485b7093","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24155"},"name":"Hibernate Query By Criteria (QBC) API is used to create queries by manipulation of criteria","heading":"Hibernate Query By Criteria (QBC) API is used to create","smartContent":{"content":"<div><!--block-->Hibernate Query By Criteria (QBC) API is used to create queries by manipulation of criteria objects at runtime.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f859e648-76f6-451d-9aa3-5a9b19a6f0ee","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.394Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.394Z"},"uniqueId":"7de941ab-bca9-447f-93a4-4f36dc359469","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b241be"},"name":"Hibernate provides following four ways to fetch objects from database: a. Using HQL b. Using","heading":"Hibernate provides following four ways to fetch objects from database:","smartContent":{"content":"<div><!--block-->Hibernate provides following four ways to fetch objects from database:<br>a. Using HQL<br>b. Using identifier<br>c. Using Criteria API<br>d. Using Standard SQL</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d72f0a94-8075-4a19-ab50-79b39fe54184","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.411Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.411Z"},"uniqueId":"12c187d4-b0b6-403e-97ba-c9b45362a31a","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24227"},"name":"Database primary key is specified in the configuration file hbm.xml. Generator can also be used","heading":"Database primary key is specified in the configuration file hbm.xml.","smartContent":{"content":"<div><!--block-->Database primary key is specified in the configuration file hbm.xml. Generator can also be used to specify how primary key is being created in the database.<br>In the below example, deptId acts as primary key:</div><pre><!--block-->&lt;id name=”deptId” type=”string” &gt;\n&lt;column name=”columnId” length=”30?/&gt;\n&lt;generator/&gt;\n&lt;/id&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9f1a90eb-d360-439c-a9b8-de8a611300d9","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.427Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.427Z"},"uniqueId":"aaa4ba99-95bd-4170-a9da-f11f2409cfe6","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24290"},"name":"Objects which have been detached and are no longer associated with any persistent entities can","heading":"Objects which have been detached and are no longer associated","smartContent":{"content":"<div><!--block-->Objects which have been detached and are no longer associated with any persistent entities can be reattached by calling session.merge() method of session class.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"42bbd808-d146-4261-a8f8-323a91e4de0c","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.443Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.443Z"},"uniqueId":"d38d8261-89e6-42e9-954c-7bede3636f6b","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b242f9"},"name":"Hibernate second level cache can be disabled using any of the following ways: a. By","heading":"Hibernate second level cache can be disabled using any of","smartContent":{"content":"<div><!--block-->Hibernate second level cache can be disabled using any of the following ways:<br>a. By setting use_second_level_cache as false.<br>b. By using CACHEMODE.IGNORE<br>c. Using cache provider as org.hibernate.cache.NoCacheProvider</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b2531e30-fc68-465e-b1ca-5c0bdecf8f4a","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.459Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.459Z"},"uniqueId":"af1d40c0-ae41-4cdf-94e6-c5ae249fa339","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24362"},"name":"All the mapping between classes and tables, properties and columns, Java types and SQL types","heading":"All the mapping between classes and tables, properties and columns,","smartContent":{"content":"<div><!--block-->All the mapping between classes and tables, properties and columns, Java types and SQL types etc is defined in ORM metadata.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"935ab837-87f9-4566-8935-e862d1c51810","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.478Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.478Z"},"uniqueId":"81a7f34d-369a-400c-8d42-525a3875ca36","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b243cb"},"name":"With hibernate 3.2, default transaction factory is JDBCTransactionFactory.","heading":"With hibernate 3.2, default transaction factory is JDBCTransactionFactory.","smartContent":{"content":"<div><!--block-->With hibernate 3.2, default transaction factory is JDBCTransactionFactory.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"44be2052-3dcd-4a94-ba13-50ea4d18bac8","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.494Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.494Z"},"uniqueId":"3f240afe-48b3-4686-bf7d-3bc8245ffa39","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24434"},"name":"Java Applications and components are managed in hibernate by a standard API called JMX API.","heading":"Java Applications and components are managed in hibernate by a","smartContent":{"content":"<div><!--block-->Java Applications and components are managed in hibernate by a standard API called JMX API. JMX provides tools for development of efficient and robust distributed, web based solutions.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"90afcbbc-742e-419a-8ee6-274e14df0be7","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.512Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.512Z"},"uniqueId":"f5e142b6-497c-4827-915f-6ac75309f5ea","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2449d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To bind Hibernate `SessionFactory` to JNDI (Java Naming and Directory Interface), follow these steps:\n\n### 1. **Configure JNDI Resource in `server.xml` (for Tomcat)**\n\nFirst, configure the JNDI resource in the application server's configuration file. For Tomcat, you would modify the `server.xml` file to add a `Resource` entry.\n\n```xml\n<Context>\n    <Resource name=\"jdbc/YourDataSource\"\n              auth=\"Container\"\n              type=\"javax.sql.DataSource\"\n              maxTotal=\"20\"\n              maxIdle=\"10\"\n              maxWaitMillis=\"10000\"\n              username=\"dbuser\"\n              password=\"dbpassword\"\n              driverClassName=\"com.mysql.cj.jdbc.Driver\"\n              url=\"jdbc:mysql://localhost:3306/yourdatabase\"/>\n</Context>\n```\n\n### 2. **Configure Hibernate to Use JNDI**\n\nIn your `hibernate.cfg.xml` (or equivalent configuration file), set up Hibernate to look up the `DataSource` from JNDI:\n\n```xml\n<hibernate-configuration>\n    <session-factory>\n        <!-- JDBC Database connection settings -->\n        <property name=\"hibernate.connection.datasource\">java:comp/env/jdbc/YourDataSource</property>\n\n        <!-- Hibernate Dialect -->\n        <property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n\n        <!-- Enable Hibernate's automatic session context management -->\n        <property name=\"hibernate.current_session_context_class\">thread</property>\n\n        <!-- Echo all executed SQL to stdout -->\n        <property name=\"hibernate.show_sql\">true</property>\n\n        <!-- Drop and re-create the database schema on startup -->\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\n\n        <!-- Specify the naming strategy -->\n        <property name=\"hibernate.ejb.naming_strategy\">org.hibernate.cfg.ImprovedNamingStrategy</property>\n\n        <!-- Add your mapping files here -->\n        <mapping resource=\"path/to/your/hibernate/mapping/file.hbm.xml\"/>\n    </session-factory>\n</hibernate-configuration>\n```\n\n### 3. **Create a `web.xml` Configuration (for Web Applications)**\n\nEnsure that your `web.xml` is properly set up to handle JNDI resources:\n\n```xml\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n\n    <resource-ref>\n        <description>DB Connection</description>\n        <res-ref-name>jdbc/YourDataSource</res-ref-name>\n        <res-type>javax.sql.DataSource</res-type>\n        <res-auth>Container</res-auth>\n    </resource-ref>\n\n</web-app>\n```\n\n### 4. **Access JNDI DataSource in Java Code**\n\nIn your Java code, you can access the `SessionFactory` from JNDI:\n\n```java\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\npublic class HibernateUtil {\n    private static SessionFactory sessionFactory;\n\n    static {\n        try {\n            InitialContext ctx = new InitialContext();\n            DataSource ds = (DataSource) ctx.lookup(\"java:comp/env/jdbc/YourDataSource\");\n\n            sessionFactory = new Configuration()\n                .setDataSource(ds)\n                .configure() // Load hibernate.cfg.xml\n                .buildSessionFactory();\n        } catch (NamingException e) {\n            throw new RuntimeException(\"Error initializing Hibernate SessionFactory\", e);\n        }\n    }\n\n    public static SessionFactory getSessionFactory() {\n        return sessionFactory;\n    }\n}\n```\n\n### 5. **Additional Configuration**\n\n- Ensure that your Hibernate JAR files are in the classpath.\n- Ensure that your application server is properly configured to handle JNDI lookups.\n\nBy binding `SessionFactory` to JNDI, you can manage database connections more efficiently and centralize connection management.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"1fec5a6a-c3bc-45cb-814e-13197cbdf282","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.529Z"},"updatedDate":{"$date":"2024-08-27T03:52:29.296Z"},"uniqueId":"2198b9de-f790-4c60-a85e-4f78726f50c1","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24506"},"name":"Object identification can be done in hibernate in following three ways: a. Using Object Identity:","heading":"Object identification can be done in hibernate in following three","smartContent":{"content":"<div><!--block-->Object identification can be done in hibernate in following three ways:<br>a. Using Object Identity: Using == operator.<br>b. Using Object Equality: Using equals() method.<br>c. Using database identity: Relational database objects can be identified if they represent same row.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f29c1f57-f759-4984-9df2-0c05c399ff39","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.547Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.547Z"},"uniqueId":"4de4e20e-d726-4b0a-acf3-16b69933ccca","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2456f"},"name":"Following fetching strategies are available in hibernate: 1. Join Fetching 2. Batch Fetching 3. Select 4. Sub-select Fetching","heading":"Following fetching strategies are available in hibernate: 1. Join Fetching 2. Batch Fetching 3. Select 4. Sub-select Fetching","smartContent":{"content":"Here's an expanded explanation of the different fetching strategies available in Hibernate:\n\n### Fetching Strategies in Hibernate\n\nHibernate provides various strategies to control how related entities are fetched from the database. These strategies help in optimizing the performance of your application by managing how and when data is loaded. Here are the different fetching strategies:\n\n1. **Join Fetching**\n   - **Description**: Join fetching retrieves associated entities using a SQL `JOIN` clause. This strategy is used to load an entity and its related entities in a single SQL query.\n   - **Example**: If you have an entity `Author` with a collection of `Books`, join fetching will fetch both `Author` and `Books` in one query using a SQL join.\n   - **Usage**: Use the `@Fetch(FetchMode.JOIN)` annotation or HQL/JPQL `join fetch` clause.\n\n   ```java\n   @Entity\n   public class Author {\n       @OneToMany(fetch = FetchType.JOIN)\n       @JoinColumn(name = \"author_id\")\n       private Set<Book> books;\n   }\n   ```\n\n   ```java\n   String hql = \"SELECT a FROM Author a JOIN FETCH a.books WHERE a.id = :authorId\";\n   ```\n\n2. **Batch Fetching**\n   - **Description**: Batch fetching retrieves multiple entities in a single query by using a batch size. Instead of loading associated entities individually, Hibernate will load them in batches to reduce the number of queries.\n   - **Example**: If you have a list of authors and you want to fetch their books, batch fetching will load books for authors in batches instead of one at a time.\n   - **Usage**: Use `@BatchSize(size = N)` annotation to specify the batch size.\n\n   ```java\n   @Entity\n   @BatchSize(size = 10)\n   public class Author {\n       @OneToMany(fetch = FetchType.LAZY)\n       private Set<Book> books;\n   }\n   ```\n\n3. **Select Fetching**\n   - **Description**: Select fetching (also known as lazy fetching) retrieves associated entities in separate SQL queries. Initially, only the main entity is loaded, and additional queries are issued when accessing the related entities.\n   - **Example**: Fetch an `Author` entity first, and then execute additional queries to fetch the associated `Books` when needed.\n   - **Usage**: Default fetch type for `@OneToMany` and `@ManyToMany` relationships.\n\n   ```java\n   @Entity\n   public class Author {\n       @OneToMany(fetch = FetchType.LAZY)\n       private Set<Book> books;\n   }\n   ```\n\n4. **Sub-select Fetching**\n   - **Description**: Sub-select fetching retrieves associated entities using a subquery in the `WHERE` clause. This strategy issues a subquery to fetch the associated entities after fetching the main entity.\n   - **Example**: Fetch an `Author` entity and use a subquery to fetch its `Books`.\n   - **Usage**: Use the `@Fetch(FetchMode.SUBSELECT)` annotation.\n\n   ```java\n   @Entity\n   public class Author {\n       @OneToMany(fetch = FetchType.LAZY)\n       @Fetch(FetchMode.SUBSELECT)\n       private Set<Book> books;\n   }\n   ```\n\n### Choosing the Right Strategy\n\n- **Join Fetching**: Use when you need to load related entities in a single query, and the join does not lead to performance issues or excessive data retrieval.\n- **Batch Fetching**: Use to reduce the number of SQL queries when dealing with collections of entities, especially when you have a large number of entities to load.\n- **Select Fetching**: Use when you want to load related entities lazily, and the performance impact of additional queries is acceptable.\n- **Sub-select Fetching**: Use when dealing with complex queries where subqueries can optimize the retrieval of associated entities.\n\nBy understanding and correctly applying these fetching strategies, you can optimize the performance and efficiency of your Hibernate-based applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"45d7d440-2775-4f1e-9a4b-b3a1d8f2b984","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.564Z"},"updatedDate":{"$date":"2024-08-27T04:40:26.621Z"},"uniqueId":"c6e94181-a707-494d-9edf-83694be0210b","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b245d8"},"name":"To map java objects with database tables, we need to have Java beans properties names","heading":"To map java objects with database tables, we need to","smartContent":{"content":"<div><!--block-->To map java objects with database tables, we need to have Java beans properties names same as column names of a database table. Then mapping is provided in hbm.xml file as given below:</div><pre><!--block-->&lt;hibernate-mapping&gt;\n&lt;class name=”Student”  table=”tbl_student”&gt;\n&lt;property  column=”studentname” length=”255?\nname=”studentName” not-null=”true”  type=”java.lang.String”/&gt;\n&lt;property  column=”studentDisciplne” length=”255?\nname=”studentDiscipline” not-null=”true”  type=”java.lang.String”/&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"6909f2cc-d0c6-4fb1-93fe-8bd111e43cd6","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.582Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.582Z"},"uniqueId":"74741427-ab77-4092-9722-fe3daa23f7bb","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24641"},"name":"Derived properties are those properties which are not mapped to any columns of a database","heading":"Derived properties are those properties which are not mapped to","smartContent":{"content":"<div><!--block-->Derived properties are those properties which are not mapped to any columns of a database table. Such properties are calculated at runtime by evaluation of any expressions.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"46b1b9cd-96c2-495f-b429-9f51ada27455","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.599Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.599Z"},"uniqueId":"3a3741fb-c6bc-415f-8075-1fa7a8706cf9","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b246aa"},"name":"Named SQL queries are those queries which are defined in mapping file and are called","heading":"Named SQL queries are those queries which are defined in","smartContent":{"content":"<div><!--block-->Named SQL queries are those queries which are defined in mapping file and are called as required anywhere.<br>For example, we can write a SQL query in our XML mapping file as follows:</div><pre><!--block-->&lt;sql-query name = “studentdetails”&gt;\n&lt;return alias=”std”/&gt;\nSELECT std.STUDENT_ID AS {std.STUDENT_ID},\nstd.STUDENT_DISCIPLINE AS {std.discipline},\nFROM Student std WHERE std.NAME LIKE :name\n&lt;/sql-query&gt;</pre><div><!--block-->Then this query can be called as follows:</div><pre><!--block-->List students = session.getNamedQuery(\"studentdetails\")\n.setString(&amp;amp;quot;TomBrady&amp;amp;quot;, name)\n.setMaxResults(50)\n.list();</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0c8ac2d2-6055-48e5-b3ee-1a33920d677d","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.615Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.615Z"},"uniqueId":"f180986e-e3ce-48b1-8370-a574d1d0bb1a","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24713"},"name":"Load() methods results in an exception if the required records isn’t found in the database","heading":"Load() methods results in an exception if the required records","smartContent":{"content":"<div><!--block-->Load() methods results in an exception if the required records isn’t found in the database while get() method returns null when records against the id isn’t found in the database.<br>So, ideally we should use Load() method only when we are sure about existence of records against an id.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b8b5f8ad-8860-49d6-9924-3c826b9b5bdf","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.631Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.631Z"},"uniqueId":"ffe53dae-af60-43bf-b153-4a1229a79db9","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2477c"},"name":"Version property is used in hibernate to know whether an object is in transient state","heading":"Version property is used in hibernate to know whether an","smartContent":{"content":"<div><!--block-->Version property is used in hibernate to know whether an object is in transient state or in detached state.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"485ec349-8590-4e20-a3e0-f6bfcd13197d","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.648Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.648Z"},"uniqueId":"219aa4bd-1b1f-495e-a2d7-1aaf8c89308d","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b247e5"},"name":"In Attribute oriented programming, a developer can add Meta data (attributes) in the java source","heading":"In Attribute oriented programming, a developer can add Meta data","smartContent":{"content":"<div><!--block-->In Attribute oriented programming, a developer can add Meta data (attributes) in the java source code to add more significance in the code. For Java (hibernate), attribute oriented programming is enabled by an engine called XDoclet.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2d763fde-bbb6-4add-8497-4ecff42a3d3f","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.663Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.663Z"},"uniqueId":"8e280b75-f95f-4657-8c28-c4a0554cf864","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b2484e"},"name":"session.lock() method of session class is used to reattach an object which has been detached","heading":"session.lock() method of session class is used to reattach an","smartContent":{"content":"<div><!--block-->session.lock() method of session class is used to reattach an object which has been detached earlier. This method of reattaching doesn’t check for any data synchronization in database while reattaching the object and hence may lead to lack of synchronization in data.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f246992e-87fa-4e29-b01d-4a6b2ea35340","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.68Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.68Z"},"uniqueId":"82b47a59-e642-4234-87a7-4625e3ee2937","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b248b7"},"name":"Yes, hibernate fully supports polymorphism. Polymorphism queries and polymorphism associations are supported in all mapping","heading":"Yes, hibernate fully supports polymorphism. Polymorphism queries and polymorphism associations","smartContent":{"content":"<div><!--block-->Yes, hibernate fully supports polymorphism. Polymorphism queries and polymorphism associations are supported in all mapping strategies of hibernate.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"33d6ca2e-04ff-4752-bfe5-1086b3dbd3cd","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.695Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.695Z"},"uniqueId":"cfb0fe22-fd93-4674-96c4-150987255271","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24920"},"name":"Hibernate has following three inheritance models: a. Tables Per Concrete Class b. Table per class","heading":"Hibernate has following three inheritance models: a. Tables Per Concrete","smartContent":{"content":"<div><!--block-->Hibernate has following three inheritance models:<br>a. Tables Per Concrete Class<br>b. Table per class hierarchy<br>c. Table per sub-class</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c14db901-2850-4903-b6a6-244b35d362ee","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.709Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.709Z"},"uniqueId":"181aed97-7578-4229-b747-a78fcabd0b2e","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24989"},"name":"If we don’t want an application to update or delete objects of a class in","heading":"If we don’t want an application to update or delete","smartContent":{"content":"<div><!--block-->If we don’t want an application to update or delete objects of a class in hibernate, we can make the class as immutable by setting mutable=false</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"97c58295-e17e-4180-a9c9-8fa8f6a5dd08","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.725Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.725Z"},"uniqueId":"de634995-b9c6-4dcf-81a6-0dd2d06a89be","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b249f2"},"name":"General hibernate flow involving RDBMS is as follows: a. Load configuration file and create object","heading":"General hibernate flow involving RDBMS is as follows: a. Load","smartContent":{"content":"<div><!--block-->General hibernate flow involving RDBMS is as follows:<br>a. Load configuration file and create object of configuration class.<br>b. Using configuration object, create sessionFactory object.<br>c. From sessionFactory, get one session.<br>d. Create HQL query.<br>e. Execute HQL query and get the results. Results will be in the form of a list.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b4b8cf18-32d0-4367-8f5f-6f63f9926d02","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.741Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.741Z"},"uniqueId":"e9d072d2-00cb-4544-a6a0-609dcf5c5980","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24a5b"},"name":"Light Object Mapping is one of the levels of ORM quality in which all entities","heading":"Light Object Mapping is one of the levels of ORM","smartContent":{"content":"<div><!--block-->Light Object Mapping is one of the levels of ORM quality in which all entities are represented as classes and they are mapped manually.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e2a2ebbc-e78a-4566-a876-d46231075e2b","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.757Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.757Z"},"uniqueId":"8b8d32b6-1474-4314-b2ca-fae696aaac8f","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24ac4"},"name":"Managed associations relate to container management persistence and are bi-directional while hibernate associations are unidirectional.","heading":"Managed associations relate to container management persistence and are bi-directional","smartContent":{"content":"Managed associations relate to container management persistence and are bi-directional while hibernate associations are unidirectional.\n\nHere's an expanded explanation of the differences between managed associations and Hibernate associations:\n\n### Differences Between Managed Associations and Hibernate Associations\n\n**Managed Associations** and **Hibernate Associations** are concepts related to how relationships between entities are handled in different contexts. They primarily differ in their management, directionality, and the context in which they are used.\n\n#### 1. **Managed Associations**\n\n**Managed Associations** are related to persistence contexts in Java EE (Jakarta EE) environments or other container-managed contexts. They involve a framework or container that manages the lifecycle and persistence of entities, such as Java Persistence API (JPA) with an application server.\n\n- **Context**: Managed by a container or framework that handles the lifecycle of entities and their associations.\n- **Directionality**: Typically bi-directional, meaning that changes in one side of the association are reflected on the other side. For instance, if you have a `Customer` with a list of `Orders`, changes to the `Orders` list should be reflected in the `Customer` entity.\n- **Management**: The container manages the persistence, transaction, and entity states, including synchronization of associations.\n- **Example**: In a JPA context with an application server, you might use `@OneToMany` and `@ManyToOne` annotations to establish bi-directional relationships that are managed by the container.\n\n   ```java\n   @Entity\n   public class Customer {\n       @OneToMany(mappedBy = \"customer\", cascade = CascadeType.ALL)\n       private List<Order> orders;\n   \n       // getters and setters\n   }\n   \n   @Entity\n   public class Order {\n       @ManyToOne\n       @JoinColumn(name = \"customer_id\")\n       private Customer customer;\n   \n       // getters and setters\n   }\n   ```\n\n#### 2. **Hibernate Associations**\n\n**Hibernate Associations** are specific to Hibernate, a popular Object-Relational Mapping (ORM) framework. Hibernate manages the persistence of entities and their relationships using its own mechanisms and configuration.\n\n- **Context**: Managed directly by Hibernate, independent of the Java EE container. Hibernate controls the session and transaction management.\n- **Directionality**: Can be unidirectional or bi-directional. You can have a one-to-many relationship where only one side (the parent) is aware of the relationship, or both sides can be aware of each other.\n- **Management**: Hibernate handles the session, transaction, and caching aspects, including how associations are fetched and synchronized.\n- **Example**: In a Hibernate context, you might use `@OneToMany` and `@ManyToOne` annotations, but the management and configuration are handled by Hibernate itself.\n\n   ```java\n   @Entity\n   public class Customer {\n       @OneToMany(mappedBy = \"customer\", fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n       private Set<Order> orders;\n   \n       // getters and setters\n   }\n   \n   @Entity\n   public class Order {\n       @ManyToOne(fetch = FetchType.LAZY)\n       @JoinColumn(name = \"customer_id\")\n       private Customer customer;\n   \n       // getters and setters\n   }\n   ```\n\n### Key Differences\n\n- **Container vs. Framework Management**: Managed associations are handled by the Java EE container or persistence context, while Hibernate associations are managed by the Hibernate framework.\n- **Directionality**: Managed associations are usually bi-directional, reflecting changes on both sides of the relationship. Hibernate associations can be either unidirectional or bi-directional.\n- **Lifecycle Management**: In managed associations, the container handles lifecycle and persistence, whereas Hibernate manages these aspects through its own session and transaction mechanisms.\n\nUnderstanding these differences is crucial when working in different environments or using different ORM tools, as they affect how you model, persist, and manage entity relationships in your application.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"e3c6febf-8f3c-4fd4-a895-4d867bd96c7a","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.771Z"},"updatedDate":{"$date":"2024-08-27T04:48:48.659Z"},"uniqueId":"25227c99-d5a1-4c48-8964-e9b41c3b406f","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24ad6"},"name":"Quartz is a richly featured, open source job scheduling library that can be integrated within","heading":"Quartz is a richly featured, open source job scheduling library","smartContent":{"content":"Quartz is a powerful and widely-used job scheduling library for Java applications. It provides a robust framework for scheduling and executing tasks or jobs in a Java environment. Quartz supports a variety of features and is highly customizable, making it suitable for many scheduling needs. \n\n### Key Features of Quartz\n\n1. **Job Scheduling**: Allows you to schedule jobs to be executed at specific times or intervals. Jobs can be scheduled to run at fixed intervals, at specific times of day, or based on complex schedules using cron expressions.\n\n2. **Job Management**: Provides a mechanism to define, configure, and manage jobs. Jobs are represented by classes that implement the `Job` interface, which includes the `execute` method where the job logic is defined.\n\n3. **Persistent Storage**: Supports persistent job storage, allowing jobs and their schedules to be stored in a database. This ensures that jobs are not lost if the application restarts.\n\n4. **Clustered Scheduling**: Supports clustered configurations for distributed job scheduling, ensuring that jobs are not duplicated across multiple nodes in a cluster.\n\n5. **Job Recovery**: Offers mechanisms for job recovery and retry in case of failures, ensuring that jobs are executed as intended even if there are transient issues.\n\n6. **Flexible Triggers**: Provides various types of triggers, including simple triggers, cron triggers, and calendar-based triggers, to specify when and how frequently jobs should run.\n\n7. **Job Listeners and Trigger Listeners**: Allows for the registration of listeners that can respond to job or trigger events, enabling custom logic before or after job execution.\n\n### Basic Components of Quartz\n\n1. **Job**: Represents a unit of work to be executed. A job is defined by creating a class that implements the `Job` interface and implementing the `execute` method.\n\n   ```java\n   public class MyJob implements Job {\n       @Override\n       public void execute(JobExecutionContext context) throws JobExecutionException {\n           // Job logic here\n       }\n   }\n   ```\n\n2. **JobDetail**: Describes the job and holds job-specific data. It includes information such as the job class and any job data.\n\n   ```java\n   JobDetail jobDetail = JobBuilder.newJob(MyJob.class)\n                                   .withIdentity(\"job1\", \"group1\")\n                                   .usingJobData(\"key\", \"value\")\n                                   .build();\n   ```\n\n3. **Trigger**: Defines the schedule for when the job should be executed. Triggers can be simple (based on intervals) or cron-based (based on complex schedules).\n\n   ```java\n   Trigger trigger = TriggerBuilder.newTrigger()\n                                   .withIdentity(\"trigger1\", \"group1\")\n                                   .startNow()\n                                   .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n                                   .withIntervalInSeconds(10)\n                                   .repeatForever())\n                                   .build();\n   ```\n\n4. **Scheduler**: The main interface for interacting with the Quartz scheduling system. It allows you to schedule, unschedule, and manage jobs and triggers.\n\n   ```java\n   Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n   scheduler.start();\n   scheduler.scheduleJob(jobDetail, trigger);\n   ```\n\n### Basic Usage Example\n\nHere’s a simple example of scheduling a job using Quartz:\n\n```java\nimport org.quartz.*;\nimport org.quartz.impl.StdSchedulerFactory;\n\npublic class QuartzExample {\n    public static void main(String[] args) throws SchedulerException {\n        // Create a JobDetail object to specify the job to be executed\n        JobDetail jobDetail = JobBuilder.newJob(MyJob.class)\n                                        .withIdentity(\"job1\", \"group1\")\n                                        .build();\n        \n        // Create a Trigger object to specify when the job should be executed\n        Trigger trigger = TriggerBuilder.newTrigger()\n                                        .withIdentity(\"trigger1\", \"group1\")\n                                        .startNow()\n                                        .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n                                        .withIntervalInSeconds(10)\n                                        .repeatForever())\n                                        .build();\n        \n        // Obtain a Scheduler instance from the factory\n        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();\n        \n        // Start the scheduler\n        scheduler.start();\n        \n        // Schedule the job with the trigger\n        scheduler.scheduleJob(jobDetail, trigger);\n    }\n}\n```\n\n### Summary\n\nQuartz provides a comprehensive and flexible solution for job scheduling in Java applications, supporting a variety of scheduling needs, persistent storage, clustering, and more. Its rich feature set makes it a popular choice for handling background tasks and job scheduling in enterprise applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":10,"linkedQuestionsId":"5e06165f-ca68-47bf-9026-037dd4be8578","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.794Z"},"updatedDate":{"$date":"2024-08-27T05:02:21.855Z"},"uniqueId":"9d05044e-fffa-4396-8743-b1bf893c0267","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24ae1"},"name":"If your application has tasks that need to occur at given moments in time, or","heading":"If your application has tasks that need to occur at","smartContent":{"content":"<div><!--block-->If your application has tasks that need to occur at given moments in time, or if your system has recurring maintenance jobs then Quartz may be your ideal solution.<br><br></div><div><!--block-->Sample uses of job scheduling with Quartz:</div><ul><li><!--block-->Driving Process Workflow: As a new order is initially placed, schedule a Job to fire in exactly 2 hours, that will check the status of that order, and trigger a warning notification if an order confirmation message has not yet been received for the order, as well as changing the order’s status to ‘awaiting intervention’.</li><li><!--block-->System Maintenance: Schedule a job to dump the contents of a database into an XML file every business day (all weekdays except holidays) at 11:30 PM.</li><li><!--block-->Providing reminder services within an application.</li></ul><div><!--block-->Please refer to our listing of&nbsp;<a href=\"http://quartz-scheduler.org/overview/features\">features</a>&nbsp;for more information.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2025f102-8ca1-4165-b6da-58d533dcaacd","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.807Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.807Z"},"uniqueId":"a6971d3f-6f09-4bca-9047-3f067ae50a83","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24aec"},"name":"Runtime Environments Quartz can run embedded within another free standing application Quartz can be instantiated","heading":"Runtime Environments Quartz can run embedded within another free standing","smartContent":{"content":"<div><!--block--><strong><em>Runtime Environments</em></strong></div><ul><li><!--block-->Quartz can run embedded within another free standing application</li><li><!--block-->Quartz can be instantiated within an application server (or servlet container), and participate in XA transactions</li><li><!--block-->Quartz can run as a stand-alone program (within its own Java Virtual Machine), to be used via RMI</li><li><!--block-->Quartz can be instantiated as a cluster of stand-alone programs (with load-balance and fail-over capabilities) for the execution of jobs</li></ul><div><!--block--><strong><em>Job Scheduling</em></strong></div><div><!--block-->Jobs are scheduled to run when a given Trigger occurs. Triggers can be created with nearly any combination of the following directives:</div><ul><li><!--block-->at a certain time of day (to the millisecond)</li><li><!--block-->on certain days of the week</li><li><!--block-->on certain days of the month</li><li><!--block-->on certain days of the year</li><li><!--block-->not on certain days listed within a registered Calendar (such as business holidays)</li><li><!--block-->repeated a specific number of times</li><li><!--block-->repeated until a specific time/date</li><li><!--block-->repeated indefinitely</li><li><!--block-->repeated with a delay interval</li></ul><div><!--block-->Jobs are given names by their creator and can also be organized into named groups. Triggers may also be given names and placed into groups, in order to easily organize them within the scheduler. Jobs can be added to the scheduler once, but registered with multiple Triggers. Within an enterprise Java environment, Jobs can perform their work as part of a distributed (XA) transaction.<br><br></div><div><!--block--><strong><em>Job Execution</em></strong></div><ul><li><!--block-->Jobs can be any Java class that implements the simple Job interface, leaving infinite possibilities for the work your Jobs can perform.</li><li><!--block-->Job class instances can be instantiated by Quartz, or by your application’s framework.</li><li><!--block-->When a Trigger occurs, the scheduler notifies zero or more Java objects implementing the JobListener and TriggerListener interfaces (listeners can be simple Java objects, or EJBs, or JMS publishers, etc.). These listeners are also notified after the Job has executed.</li><li><!--block-->As Jobs are completed, they return a JobCompletionCode which informs the scheduler of success or failure. The JobCompletionCode can also instruct the scheduler of any actions it should take based on the success/fail code - such as immediate re-execution of the Job.</li></ul><div><!--block--><strong><em>Job Persistence</em></strong></div><ul><li><!--block-->The design of Quartz includes a JobStore interface that can be implemented to provide various mechanisms for the storage of jobs.</li><li><!--block-->With the use of the included JDBCJobStore, all Jobs and Triggers configured as “non-volatile” are stored in a relational database via JDBC.</li><li><!--block-->With the use of the included RAMJobStore, all Jobs and Triggers are stored in RAM and therefore do not persist between program executions - but this has the advantage of not requiring an external database.</li></ul><div><!--block--><strong><em>Transactions</em></strong></div><ul><li><!--block-->Quartz can participate in JTA transactions, via the use of JobStoreCMT (a subclass of JDBCJobStore).</li><li><!--block-->Quartz can manage JTA transactions (begin and commit them) around the execution of a Job, so that the work performed by the Job automatically happens within a JTA transaction.</li></ul><div><!--block--><strong><em>Clustering</em></strong></div><ul><li><!--block-->Fail-over.</li><li><!--block-->Load balancing.</li><li><!--block-->Quartz’s built-in clustering features rely upon database persistence via JDBCJobStore (described above).</li><li><!--block-->Terracotta extensions to Quartz provide clustering capabilities without the need for a backing database.</li></ul><div><!--block--><strong><em>Listeners &amp; Plug-Ins</em></strong></div><ul><li><!--block-->Applications can catch scheduling events to monitor or control job/trigger behavior by implementing one or more listener interfaces.</li><li><!--block-->The Plug-In mechanism can be used add functionality to Quartz, such keeping a history of job executions, or loading job and trigger definitions from a file.</li><li><!--block-->Quartz ships with a number of “factory built” plug-ins and listeners.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"73608a81-d9ea-40bb-b8ea-d99525338327","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.82Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.82Z"},"uniqueId":"bf8b497d-5b0c-40f0-9126-bcf3d7fa4e51","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24b3c"},"name":"- Lead Resolvejiffy and GainManager - Lead all java applications Collect all java and other","heading":"- Lead Resolvejiffy and GainManager - Lead all java applications","smartContent":{"content":"<div><!--block-->- Lead Resolvejiffy and GainManager<br>- Lead all java applications</div><ul><li><!--block-->Collect all java and other technolgies application details<ul><li><!--block-->Their names,&nbsp;</li><li><!--block-->Technology sets being used</li><li><!--block-->servers ip and credentials,</li><li><!--block-->application urls,&nbsp;</li><li><!--block-->database urls and credentials</li><li><!--block-->Major functionalities</li><li><!--block-->Common issues</li><li><!--block-->Spokes</li><li><!--block-->Other team members for application</li><li><!--block-->New upcoming enhancements&nbsp;</li></ul></li></ul><div><!--block-->- Team coordination</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0a77cf50-bd6d-4c2d-843d-ea1d0b5c8aa8","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.864Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.864Z"},"uniqueId":"02b0f948-0e0f-43cb-bb06-779f28560d51","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24b52"},"name":"HAProxy is a free, very fast and reliable solution offering high availability, load balancing, and","heading":"HAProxy is a free, very fast and reliable solution offering","smartContent":{"content":"<div><!--block-->HAProxy is a free,&nbsp;<strong><em>very</em></strong>&nbsp;fast and reliable solution offering&nbsp;<a href=\"http://en.wikipedia.org/wiki/High_availability\">high availability</a>,&nbsp;<a href=\"http://en.wikipedia.org/wiki/Load_balancer\">load balancing</a>, and proxying for TCP and HTTP-based applications. It is particularly suited for very high traffic web sites and powers quite a number of the world's most visited ones. Over the years it has become the de-facto standard opensource load balancer, is now shipped with most mainstream Linux distributions, and is often deployed by default in cloud platforms. Since it does not advertise itself, we only know it's used when the&nbsp;<a href=\"http://www.haproxy.org/they-use-it.html\">admins report it</a>&nbsp;:-)<br><br></div><div><!--block-->Its mode of operation makes its integration into existing architectures very easy and riskless, while still offering the possibility not to expose fragile web servers to the net, such as below :<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:290,&quot;url&quot;:&quot;http://www.haproxy.org/img/haproxy-pmode.png&quot;,&quot;width&quot;:363}\" data-trix-content-type=\"image\" data-trix-id=\"7659\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/haproxy-pmode.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/7659/7660/http://www.haproxy.org/img/haproxy-pmode.png\" width=\"363\" height=\"290\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></div><div><!--block-->We always support at least two active versions in parallel and an extra old one in critical fixes mode only. The currently supported versions are :<br><br></div><ul><li><!--block--><strong>version 1.7</strong>&nbsp;: added server hot reconfiguration, content processing agents, multi-type certs, ...</li><li><!--block--><strong>version 1.6</strong>&nbsp;: added DNS resolution support, HTTP connection multiplexing, full stick-table replication, stateless compression, ...</li><li><!--block--><strong>version 1.5</strong>&nbsp;: added SSL, IPv6, keep-alive, DDoS protection, ...</li><li><!--block--><strong>version 1.4</strong>&nbsp;: the most stable version for people who don't need SSL. Still provides client-side keep-alive</li><li><!--block--><strong>version 1.3</strong>&nbsp;: the old stable version for companies who cannot upgrade for internal policy reasons.</li></ul><div><!--block--><br><strong>Main features<br></strong>Each version brought its set of features on top of the previous one. Upwards compatibility is a very important aspect of HAProxy, and even version 1.5 is able to run with configurations made for version 1.0 13 years before. Version 1.6 dropped a few long-deprecated keywords and suggests alternatives. The most differenciating features of each version are listed below :<br><br></div><ul><li><!--block--><strong>version 1.5</strong>, released in 2014 This version further expands 1.4 with 4 years of hard work :&nbsp;<strong>native SSL</strong>&nbsp;support on both sides with SNI/NPN/ALPN and OCSP stapling,&nbsp;<strong>IPv6</strong>&nbsp;and UNIX sockets are supported everywhere,&nbsp;<strong>full HTTP keep-alive</strong>&nbsp;for better support of NTLM and improved efficiency in static farms,&nbsp;<strong>HTTP/1.1 compression</strong>&nbsp;(deflate, gzip) to save bandwidth,&nbsp;<strong>PROXY protocol</strong>versions 1 and 2 on both sides,&nbsp;<strong>data sampling</strong>&nbsp;on everything in request or response, including payload,&nbsp;<strong>ACLs</strong>&nbsp;can use any matching method with any input sample&nbsp;<strong>maps</strong>&nbsp;and dynamic ACLs&nbsp;<strong>updatable</strong>&nbsp;from the CLI&nbsp;<strong>stick-tables</strong>&nbsp;support counters to track activity on any input sample&nbsp;<strong>custom format</strong>&nbsp;for logs, unique-id, header rewriting, and redirects,&nbsp;<strong>improved health</strong>&nbsp;checks (SSL, scripted TCP, check agent, ...),&nbsp;<strong>much more scalable</strong>&nbsp;configuration supports hundreds of thousands of backends and certificates without sweating</li><li><!--block--><strong>version 1.4</strong>, released in 2010 This version has brought its share of new features over 1.3, most of which were long awaited :&nbsp;<strong>client-side keep-alive</strong>&nbsp;to reduce the time to load heavy pages for clients over the net,&nbsp;<strong>TCP speedups</strong>&nbsp;to help the TCP stack save a few packets per connection,&nbsp;<strong>response buffering</strong>&nbsp;for an even lower number of concurrent connections on the servers,&nbsp;<strong>RDP protocol</strong>&nbsp;support with server stickiness and user filtering,&nbsp;<strong>source-based stickiness</strong>&nbsp;to attach a source address to a server,&nbsp;<strong>a much better stats interface</strong>&nbsp;reporting tons of useful information,<strong>more verbose health checks</strong>&nbsp;reporting precise statuses and responses in stats and logs,&nbsp;<strong>traffic-based health</strong>&nbsp;to fast-fail a server above a certain error threshold,&nbsp;<strong>support for HTTP authentication</strong>&nbsp;for any request including stats, with support for password encryption,&nbsp;<strong>server management from the CLI</strong>&nbsp;to enable/disable and change a server's weight without restarting haproxy,<strong>ACL-based persistence</strong>&nbsp;to maintain or disable persistence based on ACLs, regardless of the server's state,&nbsp;<strong>log analyzer</strong>&nbsp;to generate fast reports from logs parsed at 1 Gbyte/s,</li><li><!--block--><strong>version 1.3</strong>, released in 2006 This version has brought a lot of new features and improvements over 1.2, among which&nbsp;<strong>content switching</strong>&nbsp;to select a server pool based on any request criteria,<strong>ACL</strong>&nbsp;to write content switching rules, wider choice of&nbsp;<strong>load-balancing algorithms</strong>&nbsp;for better integration,&nbsp;<strong>content inspection</strong>&nbsp;allowing to block unexpected protocols,&nbsp;<strong>transparent proxy</strong>&nbsp;under Linux, which allows to directly connect to the server using the client's IP address,&nbsp;<strong>kernel TCP splicing</strong>&nbsp;to forward data between the two sides without copy in order to reach multi-gigabit data rates,<strong>layered design</strong>&nbsp;separating sockets, TCP and HTTP processing for more robust and faster processing and easier evolutions,&nbsp;<strong>fast and fair scheduler</strong>&nbsp;allowing better QoS by assigning priorities to some tasks,&nbsp;<strong>session rate limiting</strong>&nbsp;for colocated environments, etc...</li></ul><div><!--block-->Version 1.2 has been in production use since 2006 and provided an improved performance level on top of 1.1. It is not maintained anymore, as most of its users have switched to 1.3 a long time ago. Version 1.1, which has been maintaining critical sites online since 2002, is not maintained anymore either. Users should upgrade to 1.4 or 1.5.<br><br><strong>Supported platforms<br></strong>HAProxy is known to reliably run on the following OS/Platforms :<br><br></div><div><!--block--><br></div><ul><li><!--block--><a href=\"http://www.kernel.org/\">Linux 2.4</a>&nbsp;on x86, x86_64, Alpha, Sparc, MIPS, PARISC</li><li><!--block--><a href=\"http://www.kernel.org/\">Linux 2.6 / 3.x</a>&nbsp;on x86, x86_64, ARM, Sparc, PPC64</li><li><!--block--><a href=\"http://www.sun.com/software/solaris/\">Solaris 8/9</a>&nbsp;on UltraSPARC 2 and 3</li><li><!--block--><a href=\"http://www.sun.com/software/solaris/\">Solaris 10</a>&nbsp;on Opteron and UltraSPARC</li><li><!--block--><a href=\"http://www.freebsd.org/\">FreeBSD 4.10 - 10</a>&nbsp;on x86</li><li><!--block--><a href=\"http://www.openbsd.org/\">OpenBSD 3.1 to -current</a>&nbsp;on i386, amd64, macppc, alpha, sparc64 and VAX (check the ports)</li><li><!--block--><a href=\"http://www-03.ibm.com/systems/power/software/aix/about.html\">AIX 5.1 - 5.3</a>&nbsp;on Power™ architecture</li></ul><div><!--block-->Highest performance is achieved with modern operating systems supporting scalable polling mechanisms such as&nbsp;<a href=\"http://www.xmailserver.org/linux-patches/nio-improve.html\">epoll</a>&nbsp;on Linux 2.6/3.x or&nbsp;<strong>kqueue</strong>&nbsp;on FreeBSD and OpenBSD. This requires haproxy version newer than 1.2.5. Fast data transfers are made possible on Linux 3.x using TCP splicing and haproxy 1.4 or 1.5. Forwarding rates of up to 40 Gbps have already been achieved on such platforms after a very careful tuning. While Solaris and AIX are supported, they should not be used if extreme performance is required.<br><br></div><div><!--block-->Current typical 1U servers equipped with a dual-core Opteron or Xeon generally achieve between 15000 and 40000 hits/s and have no trouble saturating 2 Gbps under Linux.<br><br><strong>Performance<br></strong>Well, since a user's testimony is better than a long demonstration, please take a look at&nbsp;<a href=\"http://www.ghostwheel.com/merlin/Personal/notes/2007/03/25/200-terabytes-served-in-81-days-247tb-per-day/\"><strong>Chris Knight's experience</strong></a>&nbsp;with&nbsp;<strong>haproxy saturating a gigabit fiber in 2007</strong>&nbsp;on a video download site. Since then, the performance has significantly increased and the hardware has become much more capable, as&nbsp;<a href=\"http://www.haproxy.org/10g.html\">my experiments</a>&nbsp;with&nbsp;<a href=\"http://myri.com/\">Myricom's 10-Gig NICs</a>&nbsp;have shown two years later. Now as of 2014, 10-Gig NICs are too limited and are hardly suited for 1U servers since they do rarely provide enough port density to reach speeds above 40-60 Gbps in a 1U server. 100-Gig NICs are coming and I expect to run new series of tests when they are available.<br><br></div><div><!--block-->HAProxy involves several techniques commonly found in Operating Systems architectures to achieve the absolute maximal performance :<br><br></div><ul><li><!--block-->a single-process,&nbsp;<a href=\"http://en.wikipedia.org/wiki/Event_driven\"><strong>event-driven</strong></a>&nbsp;model considerably reduces the cost of&nbsp;<a href=\"http://en.wikipedia.org/wiki/Context_switch\"><strong>context switch</strong></a>&nbsp;and the memory usage. Processing several hundreds of tasks in a millisecond is possible, and the memory usage is in the order of a few kilobytes per session while memory consumed in preforked or threaded servers is more in the order of megabytes per process.</li><li><!--block--><strong>O(1) event checker</strong>&nbsp;on systems that allow it (Linux and FreeBSD) allowing instantaneous detection of any event on any connection among tens of thousands.</li><li><!--block--><strong>Delayed updates</strong>&nbsp;to the event checker using a lazy event cache ensures that we never update an event unless absolutely required. This saves a lot of system calls.</li><li><!--block--><strong>Single-buffering</strong>&nbsp;without any data copy between reads and writes whenever possible. This saves a lot of CPU cycles and useful memory bandwidth. Often, the bottleneck will be the I/O busses between the CPU and the network interfaces. At 10-100 Gbps, the memory bandwidth can become a bottleneck too.</li><li><!--block--><strong>Zero-copy forwarding</strong>&nbsp;is possible using the splice() system call under Linux, and results in real zero-copy starting with Linux 3.5. This allows a small sub-3 Watt device such as a Seagate Dockstar to forward HTTP traffic at one gigabit/s.</li><li><!--block--><a href=\"http://en.wikipedia.org/wiki/Page_replacement_algorithms\">MRU</a>&nbsp;memory allocator using fixed size&nbsp;<strong>memory pools</strong>&nbsp;for immediate memory allocation favoring hot cache regions over cold cache ones. This dramatically reduces the time needed to create a new session.</li><li><!--block--><strong>Work factoring</strong>, such as multiple&nbsp;<strong>accept()</strong>&nbsp;at once, and the ability to limit the number of&nbsp;<strong>accept()</strong>&nbsp;per iteration when running in multi-process mode, so that the load is evenly distributed among processes.</li><li><!--block--><strong>CPU-affinity</strong>&nbsp;is supported when running in multi-process mode, or simply to adapt to the hardware and be the closest possible to the CPU core managing the NICs while not conflicting with it.</li><li><!--block--><strong>Tree-based storage</strong>, making heavy use of the&nbsp;<a href=\"http://1wt.eu/articles/ebtree/\">Elastic Binary tree</a>&nbsp;I have been developping for several years. This is used to keep timers ordered, to keep the runqueue ordered, to manage round-robin and least-conn queues, to look up ACLs or keys in tables, with only an O(log(N)) cost.</li><li><!--block--><strong>Optimized timer queue</strong>&nbsp;: timers are not moved in the tree if they are postponed, because the likeliness that they are met is close to zero since they're mostly used for timeout handling. This further optimizes the ebtree usage.</li><li><!--block-->optimized&nbsp;<strong>HTTP header analysis</strong>&nbsp;: headers are parsed an interpreted on the fly, and the parsing is optimized to avoid an re-reading of any previously read memory area. Checkpointing is used when an end of buffer is reached with an incomplete header, so that the parsing does not start again from the beginning when more data is read. Parsing an average HTTP request typically takes half a microsecond on a fast Xeon E5.</li><li><!--block-->careful reduction of the&nbsp;<strong>number of expensive system calls</strong>. Most of the work is done in user-space by default, such as time reading, buffer aggregation, file-descriptor enabling/disabling.</li><li><!--block-->Content analysis is optimized to carry only pointers to original data and never copy unless the data needs to be transformed. This ensures that very small structures are carried over and that contents are never replicated when not absolutely necessary.</li></ul><div><!--block-->All these micro-optimizations result in very low CPU usage even on moderate loads. And even at very high loads, when the CPU is saturated, it is quite common to note figures like&nbsp;<strong>5% user</strong>&nbsp;and&nbsp;<strong>95% system</strong>, which means that the HAProxy process consumes about 20 times less than its system counterpart. This explains&nbsp;<strong>why the tuning of the Operating System is very important</strong>. This is the reason why we ended up building&nbsp;<a href=\"https://www.haproxy.com/products/main-features-of-aloha-load-balancers/\">our own appliances</a>, in order to save that complex and critical task from the end-user.<br><br></div><div><!--block-->In production, HAProxy has been installed several times as an&nbsp;<strong>emergency solution</strong>&nbsp;when very expensive, high-end&nbsp;<strong>hardware load balancers suddenly failed</strong>&nbsp;on Layer 7 processing. Some hardware load balancers still do not use proxies and process requests at the&nbsp;<strong>packet level</strong>&nbsp;and have a great difficulty at supporting&nbsp;<strong>requests across multiple packets</strong>&nbsp;and&nbsp;<strong>high response times</strong>&nbsp;because they do&nbsp;<strong>no buffering at all</strong>. On the other side,&nbsp;<strong>software load balancers</strong>&nbsp;use&nbsp;<strong>TCP buffering</strong>&nbsp;and are insensible to long requests and high response times. A&nbsp;<strong>nice side effect</strong>&nbsp;of&nbsp;<strong>HTTP buffering</strong>&nbsp;is that it&nbsp;<strong>increases the server's connection acceptance</strong>&nbsp;by reducing the session duration, which&nbsp;<strong>leaves room for new requests</strong>.<br><br></div><div><!--block-->There are 3 important factors used to measure a load balancer's performance :<br><br></div><ul><li><!--block--><strong>The session rate</strong><br>This factor is very important, because it directly determines when the load balancer will not be able to distribute all the requests it receives. It is mostly dependant on the CPU. Sometimes, you will hear about requests/s or hits/s, and they are the same as sessions/s in&nbsp;<strong>HTTP/1.0</strong>&nbsp;or&nbsp;<strong>HTTP/1.1</strong>&nbsp;with&nbsp;<strong>keep-alive</strong>&nbsp;disabled. Requests/s with keep-alive enabled is generally much higher (since it significantly reduces system-side work) but is often meaningless for internet-facing deployments since clients often open a large amount of connections and do not send many requests per connection on avertage. This factor is measured with varying object sizes, the fastest results generally coming from empty objects (eg: HTTP 302, 304 or 404 response codes). Session rates around&nbsp;<strong>100,000 sessions/s</strong>&nbsp;can be achieved on Xeon E5 systems in 2014.</li><li><!--block--><strong>The session concurrency</strong><br>This factor is tied to the previous one. Generally, the session rate will drop when the number of concurrent sessions increases (except with the&nbsp;<strong>epoll</strong>&nbsp;or&nbsp;<strong>kqueue</strong>&nbsp;polling mechanisms). The slower the servers, the higher the number of concurrent sessions for a same session rate. If a load balancer receives 10000 sessions per second and the servers respond in 100 ms, then the load balancer will have 1000 concurrent sessions. This number is limited by the amount of memory and the amount of file-descriptors the system can handle. With 16 kB buffers, HAProxy will need about 34 kB per session, which results in around&nbsp;<strong>30000 sessions per GB</strong>&nbsp;of RAM. In practise, socket buffers in the system also need some memory and 20000 sessions per GB of RAM is more reasonable. Layer 4 load balancers generally announce&nbsp;<strong>millions of simultaneous sessions</strong>&nbsp;because they need to deal with the TIME_WAIT sockets that the system handles for free in a proxy. Also they don't process any data so they don't need any buffer. Moreover, they are sometimes designed to be used in&nbsp;<strong>Direct Server Return</strong>&nbsp;mode, in which the load balancer only sees forward traffic, and which forces it to keep the sessions for a long time after their end to avoid cutting sessions before they are closed.</li><li><!--block--><strong>The data forwarding rate</strong><br>This factor generally is at the opposite of the session rate. It is measured in Megabytes/s (MB/s), or sometimes in Gigabits/s (Gbps). Highest data rates are achieved with large objects to minimise the overhead caused by session setup and teardown. Large objects generally increase session concurrency, and high session concurrency with high data rate requires large amounts of memory to support large windows. High data rates burn a lot of CPU and bus cycles on software load balancers because the data has to be copied from the input interface to memory and then back to the output device. Hardware load balancers tend to directly switch packets from input port to output port for higher data rate, but cannot process them and sometimes fail to touch a header or a cookie. Haproxy on a typical Xeon E5 of 2014 can forward data up to about&nbsp;<strong>40 Gbps</strong>. A fanless 1.6 GHz Atom CPU is slightly above 1 Gbps.</li></ul><div><!--block-->A load balancer's&nbsp;<strong>performance</strong>&nbsp;related to these factors is generally announced&nbsp;<strong>for the best case</strong>&nbsp;(eg: empty objects for session rate, large objects for data rate). This is not because of lack of honnesty from the vendors, but because it is not possible to tell exactly how it will behave in every combination. So when those 3 limits are known, the customer should be aware that it will generally&nbsp;<strong>perform below all</strong>&nbsp;of them. A good rule of thumb on software load balancers is to consider an average practical performance of&nbsp;<strong>half of maximal</strong>&nbsp;session and data rates for average sized objects.<br><br></div><div><!--block-->You might be interested in checking the&nbsp;<a href=\"http://www.haproxy.org/10g.html\">10-Gigabit/s page</a>.<br><br></div><div><!--block--><strong>Reliability -&nbsp;</strong><strong><em>keeping high-traffic sites online since 2002<br></em></strong>Being obsessed with reliability, I tried to do my best to ensure a&nbsp;<strong>total continuity of service</strong>&nbsp;by design. It's more difficult to design something reliable from the ground up in the short term, but in the long term it reveals easier to maintain than broken code which tries to hide its own bugs behind respawning processes and tricks like this.<br><br></div><div><!--block-->In&nbsp;<strong>single-process</strong>&nbsp;programs, you have no right to fail : the smallest bug will either crash your program, make it spin like mad or freeze. There has not been any such bug found in stable versions for the&nbsp;<strong>last 13 years</strong>, though it happened a few times with development code running in production.<br><br></div><div><!--block-->HAProxy has been installed on Linux 2.4 systems&nbsp;<strong>serving millions of pages every day</strong>, and which have only known&nbsp;<strong>one reboot in 3 years</strong>&nbsp;for a complete OS upgrade. Obviously, they were not directly exposed to the Internet because they did not receive any patch at all. The kernel was a heavily patched 2.4 with Robert Love's jiffies64 patches to support time wrap-around at 497 days (which happened twice). On such systems, the software cannot fail without being immediately noticed !<br><br></div><div><!--block-->Right now, it's being used in many Fortune 500 companies around the world to reliably serve billions of pages per day or relay huge amounts of money. Some people even trust it so much that they use it as the default solution to solve simple problems (and I often tell them that they do it the dirty way). Such people sometimes still use versions 1.1 or 1.2 which sees very limited evolutions and which targets mission-critical usages. HAProxy is really suited for such environments because the indicators it returns provide a lot of valuable information about the application's health, behaviour and defects, which are used to make it even more reliable. Version 1.3 has now received far more testing than 1.1 and 1.2 combined, so users are strongly encouraged to migrate to a stable 1.3 or 1.4 for mission-critical usages.<br><br></div><div><!--block-->As previously explained, most of the work is executed by the Operating System. For this reason, a large part of the reliability involves the OS itself. Latest versions of Linux 2.4 have been known for offering the highest level of stability ever. However, it requires a bunch of patches to achieve a high level of performance, and this kernel is really outdated now so running it on recent hardware will often be difficult (though some people still do). Linux 2.6 and 3.x include the features needed to achieve this level of performance, but old LTS versions only should be considered for really stable operations without upgrading more than once a year. Some people prefer to run it on Solaris (or do not have the choice). Solaris 8 and 9 are known to be really stable right now, offering a level of performance comparable to legacy Linux 2.4 (without the epoll patch). Solaris 10 might show performances closer to early Linux 2.6. FreeBSD shows good performance but&nbsp;<strong>pf</strong>&nbsp;(the firewall) eats half of it and needs to be disabled to come close to Linux. OpenBSD sometimes shows socket allocation failures due to sockets staying in FIN_WAIT2 state when client suddenly disappears. Also, I've noticed that hot reconfiguration does not work under OpenBSD.<br><br></div><div><!--block-->The reliability can significantly decrease when the system is pushed to its limits. This is why finely tuning the sysctls is important. There is no general rule, every system and every application will be specific. However, it is important to ensure that the system will&nbsp;<strong>never run out of memory</strong>&nbsp;and that it will&nbsp;<strong>never swap</strong>. A correctly tuned system must be able to run for years at full load without slowing down nor crashing.<br><br></div><div><!--block--><strong>Security -&nbsp;</strong><strong><em>Not even one intrusion in 13 years<br></em></strong>Security is an important concern when deploying a software load balancer. It is possible to harden the OS, to limit the number of open ports and accessible services, but the load balancer itself stays exposed. For this reason, I have been very careful about programming style. Vulnerabilities are very rarely encountered on haproxy, and its architecture significantly limits their impact and often allows easy workarounds. Its remotely unpredictable even processing makes it very hard to reliably exploit any bug, and if the process ever crashes, the bug is discovered. All of them were discovered by reverse-analysis of an accidental crash BTW.<br><br></div><div><!--block-->Anyway, much care is taken when writing code to manipulate headers. Impossible state combinations are checked and returned, and errors are processed from the creation to the death of a session. A few people around the world have reviewed the code and suggested cleanups for better clarity to ease auditing. By the way, I'm used to refuse patches that introduce suspect processing or in which not enough care is taken for abnormal conditions.<br><br></div><div><!--block-->I generally suggest&nbsp;<strong>starting</strong>&nbsp;HAProxy as&nbsp;<strong>root</strong>&nbsp;because it can then jail itself in a&nbsp;<strong>chroot</strong>&nbsp;and&nbsp;<strong>drop all of its privileges</strong>&nbsp;before starting the instances. This is not possible if it is not started as root because only root can execute&nbsp;<strong>chroot()</strong>, contrary to what some admins believe.<br><br></div><div><!--block-->Logs provide a lot of information to help maintain a satisfying security level. They are commonly sent over UDP because once chrooted, the /dev/log UNIX socket is unreachable, and it must not be possible to write to a file. The following information are particularly useful :<br><br></div><ul><li><!--block--><strong>source IP and port</strong>&nbsp;of requestor make it possible to find their origin in firewall logs ;</li><li><!--block-->session&nbsp;<strong>set up</strong>&nbsp;date generally matches firewall logs, while&nbsp;<strong>tear down</strong>&nbsp;date often matches proxies dates ;</li><li><!--block-->proper&nbsp;<strong>request encoding</strong>&nbsp;ensures the requestor cannot hide non-printable characters, nor fool a terminal.</li><li><!--block-->arbitrary request and response&nbsp;<strong>header and cookie capture</strong>&nbsp;help to detect scan attacks, proxies and infected hosts.</li><li><!--block--><strong>timers</strong>&nbsp;help to differentiate hand-typed requests from browsers's.</li></ul><div><!--block-->HAProxy also provides&nbsp;<strong>regex-based header control</strong>. Parts of the request, as well as request and response headers can be&nbsp;<strong>denied</strong>,&nbsp;<strong>allowed</strong>,&nbsp;<strong>removed</strong>,&nbsp;<strong>rewritten</strong>, or&nbsp;<strong>added</strong>. This is commonly used to block dangerous requests or encodings (eg: the&nbsp;<a href=\"http://www.cert.org/advisories/CA-2002-17.html\">Apache Chunk exploit</a>), and to&nbsp;<strong>prevent accidental information leak</strong>&nbsp;from the server to the client. Other features such as&nbsp;<strong>Cache-control checking</strong>&nbsp;ensure that no sensible information gets accidentely cached by an upstream proxy consecutively to a bug in the application server for example.<br><br></div><div><!--block--><strong>Download<br></strong>The source code is covered by GPL v2. Source code and pre-compiled binaries for Linux/x86 and Solaris/Sparc can be downloaded right here for some old versions :<br><br></div><div><!--block--><br></div><ul><li><!--block--><strong>Development version (1.8)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.8\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.8/\">Browse directory</a>&nbsp;for docs, sources and binaries</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.8/src/snapshot/\">Daily snapshots</a>&nbsp;are built once a day when the GIT repository changes</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Latest version (1.7)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.7\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.7/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.7.9</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz\">haproxy-1.7.9.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.7/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Previous version (1.6)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.6\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.6/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.6.13</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.6/src/haproxy-1.6.13.tar.gz\">haproxy-1.6.13.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.6/src/haproxy-1.6.13.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.6/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Previous version (1.5)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.5\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.5/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.5.19</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.5/src/haproxy-1.5.19.tar.gz\">haproxy-1.5.19.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.5/src/haproxy-1.5.19.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.5/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Older version (1.4)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.4\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.4/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.4.27</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.4/src/haproxy-1.4.27.tar.gz\">haproxy-1.4.27.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.4/src/haproxy-1.4.27.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.4/bin/haproxy-1.4.26-pcre-40kses-linux-i586.stripped.gz\">haproxy-1.4.26-linux-i586.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.4/bin/haproxy-1.4.26-pcre-40kses-linux-i586.stripped.gz.md5\">MD5</a>) Linux/i586 executable linked with Glibc 2.2</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.4/bin/haproxy-1.4.26-pcre-solaris-sparc.notstripped.gz\">haproxy-1.4.26-pcre-solaris-sparc.notstripped.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.4/bin/haproxy-1.4.26-pcre-solaris-sparc.notstripped.gz.md5\">MD5</a>) Solaris8/Sparc executable</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.4/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Oldest version (1.3)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.3\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.3/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.3.28</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.3/src/haproxy-1.3.28.tar.gz\">haproxy-1.3.28.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.3/src/haproxy-1.3.28.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.3/bin/haproxy-1.3.27-pcre-40kses-splice-linux-i586.stripped.gz\">haproxy-1.3.27-linux-i586.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.3/bin/haproxy-1.3.27-pcre-40kses-splice-linux-i586.stripped.gz.md5\">MD5</a>) Linux/i586 executable linked with Glibc 2.2</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.3/bin/haproxy-1.3.27-pcre-solaris-sparc.notstripped.gz\">haproxy-1.3.27-pcre-solaris-sparc.notstripped.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.3/bin/haproxy-1.3.27-pcre-solaris-sparc.notstripped.gz.md5\">MD5</a>) Solaris8/Sparc executable</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.3/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Unmaintained branch (1.2)</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.org/#doc1.2\">Documentation</a></li><li><!--block--><a href=\"http://www.haproxy.org/download/1.2/src/CHANGELOG\">Release Notes</a>&nbsp;for version 1.2.18</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.2/src/haproxy-1.2.18.tar.gz\">haproxy-1.2.18.tar.gz</a>&nbsp;(<a href=\"http://www.haproxy.org/download/1.2/src/haproxy-1.2.18.tar.gz.md5\">MD5</a>) : Source code under GPL</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.2/bin/haproxy-1.2.18-linux-i586.gz\">haproxy-1.2.18-linux-i586.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.2/bin/haproxy-1.2.18-linux-i586.gz.md5\">MD5</a>) Linux/i586 executable linked with Glibc 2.2</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.2/bin/haproxy-1.2.18-sol8-ultrasparc-static-pcre.gz\">haproxy-1.2.18-sol8-ultrasparc-static-pcre.gz</a>&nbsp;: (<a href=\"http://www.haproxy.org/download/1.2/bin/haproxy-1.2.18-sol8-ultrasparc-static-pcre.gz.md5\">MD5</a>) Solaris8/Sparc executable</li><li><!--block--><a href=\"http://www.haproxy.org/download/1.2/\">Browse directory</a>&nbsp;for other files or versions</li></ul></li><li><!--block--><br><br></li><li><!--block--><strong>Various Patches</strong>&nbsp;:<ul><li><!--block--><a href=\"http://www.haproxy.com/download/free/patches/stunnel/\">Some patches for Stunnel</a>&nbsp;by HAProxy Technologies (formerly Exceliance), such X-Forwarded-For, send-proxy, unix-sockets, multi-process SSL session synchronization, transparent binding and performance improvements.</li><li><!--block--><a href=\"http://www.haproxy.com/download/free/patches/linux/epoll-2.4/\">http://www.haproxy.com/download/free/patches/linux/epoll-2.4/</a>&nbsp;: kernel patches to enable epoll on standard Linux 2.4 kernels and on Red Hat Enterprise Linux 3.</li><li><!--block--><a href=\"http://www.haproxy.com/download/free/\">HAProxy Technologies' public patch repository</a>&nbsp;for other patches (stud, stunnel, linux, keepalived, ...)</li><li><!--block--><a href=\"http://www.haproxy.org/download/patches/\">Browse directory</a>&nbsp;for other (outdated) patches.</li></ul></li><li><!--block--><br><br></li><li><!--block--><a href=\"http://www.haproxy.org/download/\">Browsable directory</a>&nbsp;for other files (not only patches)</li></ul><div><!--block--><br><strong>Documentation<br></strong>There are three types of documentation now : the&nbsp;<strong>Reference Manual</strong>&nbsp;which explains how to configure HAProxy but which is outdated, the&nbsp;<strong>Architecture Guide</strong>&nbsp;which will guide you through various typical setups, and the new&nbsp;<strong>Configuration Manual</strong>&nbsp;which replaces the Reference Manual with more a explicit configuration language explanation. The official documentation is the pure-text one provided with the sources. However, Cyril Bonté's automated conversion to HTML is much easier to use and constantly up to date, so it is the preferred one when available.<br><br></div><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.7</strong>&nbsp;(<em>devel</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14346\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14346/16171/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.7/intro.html\">Starter guide in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14374\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14374/16185/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.7/configuration.html\">Configuration Manual in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14402\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14402/16199/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.7/management.html\">Management Guide in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14430\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14430/16213/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.arpalert.org/src/haproxy-lua-api/1.7/index.html\">Lua reference manual in HTML</a>&nbsp;(up to date, maintained by Thierry Fournier)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14458\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14458/16227/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.arpalert.org/haproxy-lua.html\">Lua Architecture in HTML</a>&nbsp;(up to date, maintained by Thierry Fournier)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14486\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14486/16241/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.7/doc/intro.txt\">intro.txt</a>&nbsp;: Starter guide in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14514\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14514/16255/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.7/doc/management.txt\">management.txt</a>&nbsp;: Management guide in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14542\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14542/16269/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.7/doc/configuration.txt\">configuration.txt</a>&nbsp;: Configuration Manual in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14570\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14570/16283/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.7/doc/\">Browsable directory</a>&nbsp;:&nbsp;<em>Various other docs and diagrams</em></li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.6</strong>&nbsp;(<em>stable</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14642\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14642/16297/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.6/intro.html\">Starter guide in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14670\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14670/16311/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.6/configuration.html\">Configuration Manual in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14698\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14698/16325/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.6/management.html\">Management Guide in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14726\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14726/16339/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.arpalert.org/src/haproxy-lua-api/1.6/index.html\">Lua reference manual in HTML</a>&nbsp;(up to date, maintained by Thierry Fournier)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14754\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14754/16353/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.arpalert.org/haproxy-lua.html\">Lua Architecture in HTML</a>&nbsp;(up to date, maintained by Thierry Fournier)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14782\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14782/16367/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.6/doc/intro.txt\">intro.txt</a>&nbsp;: Starter guide in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14810\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14810/16381/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.6/doc/configuration.txt\">configuration.txt</a>&nbsp;: Configuration Manual in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14838\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14838/16395/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.6/doc/management.txt\">management.txt</a>&nbsp;: Management guide in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14866\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14866/16409/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.6/doc/\">Browsable directory</a>&nbsp;:&nbsp;<em>Various other docs and diagrams</em></li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.5</strong>&nbsp;(<em>stable</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14938\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14938/16423/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.5/configuration.html\">Configuration Manual in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14966\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14966/16437/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.5/doc/configuration.txt\">configuration.txt</a>&nbsp;: Configuration Manual in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"14994\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/14994/16451/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.5/doc/\">Browsable directory</a>&nbsp;:&nbsp;<em>Various other docs and diagrams</em></li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.4</strong>&nbsp;(<em>stable</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15066\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15066/16465/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://cbonte.github.io/haproxy-dconv/1.4/configuration.html\">Configuration Manual in HTML</a>&nbsp;(up to date, maintained by Cyril Bonté)</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15094\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15094/16479/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.4/doc/configuration.txt\">configuration.txt</a>&nbsp;: Configuration Manual in text format</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15122\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15122/16493/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.4/doc/\">Browsable directory</a>&nbsp;:&nbsp;<em>Various other docs and diagrams</em></li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.3</strong>&nbsp;(<em>stable</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15194\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15194/16507/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.3/doc/configuration.txt\">configuration.txt</a>&nbsp;: Configuration Manual</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15222\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15222/16521/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.3/doc/architecture.txt\">architecture.txt</a>&nbsp;: Architecture Guide</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15250\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15250/16535/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.3/doc/haproxy-en.txt\">haproxy-en.txt</a>&nbsp;:&nbsp;<em>old English version, outdated</em></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/fr-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15283\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/fr-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15283/16549/http://www.haproxy.org/img/fr-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.3/doc/haproxy-fr.txt\">haproxy-fr.txt</a>&nbsp;:&nbsp;<em>old French version, outdated</em></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15316\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15316/16563/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.3/doc/\">Browsable directory</a>&nbsp;:&nbsp;<em>Various other docs and diagrams</em></li></ul></li></ul><div><!--block--><br></div><ul><li><!--block-->Reference Manual for version&nbsp;<strong>1.2</strong>&nbsp;(<em>old stable</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15388\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15388/16577/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.2/doc/haproxy-en.txt\">haproxy-en.txt</a>&nbsp;:&nbsp;<em>English version</em></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/fr-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15421\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/fr-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15421/16591/http://www.haproxy.org/img/fr-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.2/doc/haproxy-fr.txt\">haproxy-fr.txt</a>&nbsp;:&nbsp;<em>French version</em></li></ul></li><li><!--block-->Reference Manual for version&nbsp;<strong>1.1</strong>&nbsp;(<em>unmaintained</em>) :<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15485\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15485/16605/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.1/doc/haproxy-en.txt\">haproxy-en.txt</a>&nbsp;:&nbsp;<em>English version</em></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/fr-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15518\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/fr-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15518/16619/http://www.haproxy.org/img/fr-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.1/doc/haproxy-fr.txt\">haproxy-fr.txt</a>&nbsp;:&nbsp;<em>French version</em></li></ul></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15551\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15551/16633/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://www.haproxy.org/download/1.2/doc/architecture.txt\">architecture.txt</a>&nbsp;: Architecture Guide</li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15579\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15579/16647/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://1wt.eu/articles/2006_lb/\">Article on Load Balancing</a>&nbsp;(<em>HTML version</em>) : worth reading for people who don't know what type of load balancer they need<ul><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/en-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15611\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/en-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15611/16661/http://www.haproxy.org/img/en-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://static.1wt.eu/img/articles/2006_lb/art-2006-wta-lb-en.pdf\">PDF version (English)</a></li><li><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:10,&quot;url&quot;:&quot;http://www.haproxy.org/img/fr-off.png&quot;,&quot;width&quot;:15}\" data-trix-content-type=\"image\" data-trix-id=\"15634\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/fr-off.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/15634/16675/http://www.haproxy.org/img/fr-off.png\" width=\"15\" height=\"10\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>&nbsp;<a href=\"http://static.1wt.eu/img/articles/2006_lb/art-2006-wta-lb-fr.pdf\">PDF version (French)</a></li></ul></li></ul><div><!--block-->In addition to Cyril's HTML converter above, an automated format converter is being developed by Pavel Lang. At the time of writing these lines, it is able to produce a PDF from the documentation, and some heavy work is ongoing to support other output formats. Please consult the&nbsp;<a href=\"https://github.com/langpavel/haproxy-doc\">project's page</a>&nbsp;for more information.&nbsp;<a href=\"https://github.com/langpavel/haproxy-doc/blob/master/version-1-5/tex/configuration.pdf?raw=true\">Here's an example</a>&nbsp;of what it is able to do on version 1.5 configuration manual.<br><br></div><div><!--block--><strong>Commercial Support and availability<br></strong>If you think you don't have the time and skills to setup and maintain a free load balancer, or if you're seeking for commercial support to satisfy your customers or your boss, you have the following options :<br><br></div><div><!--block--><br></div><ol><li><!--block-->contact&nbsp;<a href=\"https://www.haproxy.com/services/haproxy-professional-services/\">HAProxy Technologies</a>&nbsp;to hire some professional services or subscribe a support contract ;</li><li><!--block-->install&nbsp;<a href=\"https://www.haproxy.com/products/haproxy-enterprise-edition/\">HAProxy Enterprise Edition (HAPEE)</a>, which is a long-term maintained HAProxy package accompanied by a well-polished collection of software, scripts, configuration files and documentation which significantly simplifies the setup and maintenance of a completely operational solution ; it is particularly suited to&nbsp;<strong>Cloud environments</strong>&nbsp;where deployments must be fast.</li><li><!--block-->try an&nbsp;<a href=\"https://www.haproxy.com/products/main-features-of-aloha-load-balancers/\">ALOHA appliance</a>&nbsp;(hardware or virtual), which will even save you from having to worry about the system, hardware and from managing a Unix-like system.</li></ol><div><!--block-->I also find it important to credit&nbsp;<a href=\"http://www.loadbalancer.org/\"><strong>Loadbalancer.org</strong></a>. I am not affiliated with them at all but like us, they have contributed a fair amount of time and money to the project to add new features and they help users on the mailing list, so I have some respect for what they do. They're a UK-based company and their load balancer also employs HAProxy, though it is somewhat different from the ALOHA.</div><div><!--block--><br><br><strong>Add-on features and contributions<br></strong>Some happy users have contributed code which may or may not be included. Others spent a long time analysing the code, and there are some who maintain ports up to date. The most difficult internal changes have been contributed in the form of paid time by some big customers who can afford to pay a developer for several months working on an opensource project. Unfortunately some of them do not want to be listed, which is the case for the largest of them.<br><br></div><div><!--block-->Some contributions were developped and not merged, most often by lack of sign of interest from the users or simply because they overlap with some pending changes in a way that could make it harder to maintain future compatibility.<br><br></div><div><!--block--><strong>Geolocation support</strong>Quite some time ago now, Cyril Bonté contacted me about a very interesting feature he has developped, initially for 1.4, and which now supports both 1.4 and 1.5. This feature is Geolocation, which many users have been asking for for a long time, and this one does not require to split the IP files by country codes. In fact it's extremely easy and convenient to configure.The feature was not merged yet because it does for a specific purpose (GeoIP) what we wanted to have for a more general use (map converters, session variables, and use of variables in the redirect URLs), which will allow the same features to be implemented with more flexibility (eg: extract the IP from a header, or pass the country code and/or AS number to a backend server, etc...). Cyril was very receptive to these arguments and accepted to maintain his patchset out of tree waiting for the features to be implemented (<strong><em>Update:</em></strong><em>&nbsp;1.5-dev20 with maps now make this possible</em>). Cyril's code is well maintained and used in production so there is no risk in using it on 1.4, except the fact that the configuration statements will change a bit once you upgrade to 1.5.The code and documentation are available here :&nbsp;<a href=\"https://github.com/cbonte/haproxy-patches/wiki/Geolocation\">https://github.com/cbonte/haproxy-patches/wiki/Geolocation</a></div><ul><li><!--block--><strong>sFlow support</strong></li></ul><div><!--block-->Neil Mckee posted a patch to the list in early 2013, and unfortunately this patch did not receive any sign of interest nor feedback, which is sad considering the amount of work that was done. I personally am clueless about sFlow and expressed my skepticism to Neil about the benefits of sampling some HTTP traffic when you can get much more detailed informations for free with existing logs.<br><br></div><div><!--block-->Neil kindly responded with the following elements :<br><br></div><div><!--block--><em>I agree that the logging you already have in haproxy is more flexible and detailed, and I acknowledge that the benefit of exporting sFlow-HTTP records is not immediately obvious.The value that sFlow brings is that the measurements are standard, and are designed to integrate seamlessly with sFlow feeds from switches, routers, servers and applications to provide a comprehensive end to end picture of the performance of large scale multi-tier systems. So the purpose is not so much to troubleshoot haproxy in isolation, but to analyze the performance of the whole system that haproxy is part of.Perhaps the best illustration of this is the 1-in-N sampling feature. If you configure sampling.http to be, say, 1-in-400 then you might only see a handful of sFlow records per second from an haproxy instance, but that is enough to tell you a great deal about what is going on -- in real time. And the data will not bury you even if you have a bank of load-balancers, hundreds of web-servers, a huge memcache-cluster and a fast network interconnect all contributing their own sFlow feeds to the same analyzer.</em></div><div><!--block-->Even after that explanation, no discussion emerged on the subject on the list, so I guess there is little interest among users for now. I suspect that sFlow is probably more deployed among network equipments than application layer equipments, which could explain this situation. The code is large (not huge though) and I am not convinced about the benefits of merging it and maintaining it if nobody shows even a little bit of interest. Thus for now I prefer to leave it out of tree. Neil has posted it on GitHub here :&nbsp;<a href=\"https://github.com/sflow/haproxy\">https://github.com/sflow/haproxy</a>.<br><br></div><div><!--block-->Please, if you do use this patch, report your feedback to the mailing list, and invest some time helping with the code review and testing.<br><br></div><div><!--block--><br><br></div><div><!--block--><a href=\"http://www.haproxy.org/contrib.html\">This table</a>&nbsp;enumerates all known significant contributions that led to version 1.4, as well as proposed fundings and features yet to be developped but waiting for spare time. It is not more up to date though.<br><br></div><div><!--block-->Some older code contributions which possibly do not appear in the table above are still listed here.<br><br></div><ul><li><!--block--><strong>Application Cookies</strong>Aleksandar Lazic and Klaus Wagner implemented this feature which was merged in 1.2. It allows the proxy to learn cookies sent by the server to the client, and to find it back in the URL to direct the client to the right server. The learned cookies are automatically purged after some inactive time.</li><li><!--block--><strong>Least Connections load balancing algorithm</strong>This patch for haproxy-1.2.14 was submitted by Oleksandr Krailo. It implements a basic least connection algorithm. I've not merged this version into 1.3 because of scalability concerns, but I'm leaving it here for people who are tempted to include it into version 1.2, and the patch is really clean.<a href=\"http://www.haproxy.org/download/patches/haproxy-1.2.14-leastconn.diff\">haproxy-1.2.14-leastconn.diff</a></li><li><!--block--><strong>Soft Server-Stop</strong>Aleksandar Lazic sent me this patch against 1.1.28 which in fact does two things. The first interesting part allows one to write a file enumerating servers which will have to be stopped, and then sending a signal to the running proxy to tell it to re-read the file and stop using these servers. This will not be merged into mainline because it has indirect implications on security since the running process will have to access a file on the file-system, while current version can run in a chrooted, empty, read-only directory. What is really needed is a way to send commands to the running process. However, I understand that some people might need this feature, so it is provided here. The second part of the patch has been merged. It allowed both an active and a backup server to share a same cookie. This may sound obvious but it was not possible earlier.<a href=\"http://www.haproxy.org/download/patches/haproxy_comafile+multi-cookie.diff\">haproxy_comafile+multi-cookie.diff</a><strong>Usage:</strong>&nbsp;Aleks says that you just have to write the server names that you want to stop in the file, then kill -USR2 the running process. I have not tested it though.</li><li><!--block--><strong>Server Weight</strong>Sébastien Brize sent me this patch against 1.1.27 which adds the 'weight' option to a server to provide smoother balancing between fast and slow servers. It is available here because there may be other people looking for this feature in version 1.1.<br><br>I did not include this change because it has a side effect that with high or unequal weights, some servers might receive lots of consecutive requests. A different concept to provide a smooth and fair balancing has been implemented in 1.2.12, which also supports weighted hash load balancing.<a href=\"http://www.haproxy.org/download/patches/patch-haproxy-1.1.27-weight\">patch-haproxy-1.1.27-weight</a><strong>Usage:</strong>&nbsp;specify \"weight X\" on a server line.<br><strong>Note:</strong>&nbsp;configurations written with this patch applied will normally still work with future 1.2 versions.</li><li><!--block--><strong>IPv6 support for 1.1.27</strong>I implemented IPv6 support on client side for 1.1.27, and merged it into haproxy-1.2. Anyway, the patch is still provided here for people who want to experiment with IPv6 on HAProxy-1.1.<a href=\"http://www.haproxy.org/download/patches/haproxy-1.1.27-ipv6.diff\">haproxy-1.1.27-ipv6.diff</a></li><li><!--block--><strong>Other patches</strong>Please&nbsp;<a href=\"http://www.haproxy.org/download/patches/\">browse the directory</a>&nbsp;for other useful contributions.</li></ul><div><!--block--><strong><br>Other Solutions<br></strong>If you don't need all of HAProxy's features and are looking for a simpler solution, you may find what you need here :<br><br></div><div><!--block--><br></div><ul><li><!--block--><a href=\"http://www.linuxvirtualserver.org/\"><strong>Linux Virtual Servers (LVS)</strong></a><br>Very fast layer 3/4 load balancing merged in Linux 2.4 and 2.6 kernels. Should be coupled with&nbsp;<a href=\"http://www.keepalived.org/\">Keepalived</a>&nbsp;to monitor servers. This generally is the solution embedded by default in most IP-based load balancers.</li><li><!--block--><a href=\"http://nginx.org/\"><strong>Nginx (\"engine X\")</strong></a><br>Nginx is an excellent piece of software. Initially it's a very fast and reliable web server, but it has grown into a full-featured proxy which can also offer load-balancing capabilities. Nginx's load balancing features are less advanced than haproxy's but it can do extra things (eg: caching, running FCGI apps), which explains why they are very commonly found together. I strongly recommend it to whoever needs a fast, reliable and flexible web server !</li><li><!--block--><a href=\"http://www.apsis.ch/pound\"><strong>Pound</strong></a><br>Pound is very small and reasonably good. It aims at remaining small and auditable prior to being fast. It used to support SSL and keep-alive before HAProxy. Its configuration file is small and simple. It's thread-based, but can be a simpler alternative to HAProxy for a small site when the flexibility and performance of HAProxy are not required.</li><li><!--block--><a href=\"http://siag.nu/pen/\"><strong>Pen</strong></a><br>Pen is a very simple load balancer for TCP protocols. It supports source IP-based persistence for up to 2048 clients. Supports IP-based ACLs. Uses select() and supports higher loads than Pound but will not scale very well to thousands of simultaneous connections. It's more versatile however, and could be considered as the missing link between HAProxy and socat.</li></ul><div><!--block--><br><strong>Contacts<br></strong>Feel free to contact us for any questions or comments :<br><br></div><div><!--block--><br></div><ul><li><!--block-->mailing-list :&nbsp;<a href=\"mailto:haproxy@formilux.org\">haproxy@formilux.org</a>&nbsp;<br>Read the list&nbsp;<a href=\"https://www.mail-archive.com/haproxy@formilux.org/\">archives on mail-archive</a><br>Read the list&nbsp;<a href=\"http://marc.info/?l=haproxy\">archives on Marc.info</a><em>(temporarily broken)</em><br>Read the list&nbsp;<a href=\"http://news.gmane.org/gmane.comp.web.haproxy\">archives on gmane.org</a><em>(temporarily broken)</em><br><br>Subscribe to the list :&nbsp;<a href=\"mailto:haproxy+subscribe@formilux.org\">haproxy+subscribe@formilux.org</a>&nbsp;<br>Unsubscribe from the list :&nbsp;<a href=\"mailto:haproxy+unsubscribe@formilux.org\">haproxy+unsubscribe@formilux.org</a></li><li><!--block-->Willy' main site :&nbsp;<a href=\"http://1wt.eu/\">http://1wt.eu/</a>&nbsp;<a href=\"http://www.haproxy.org/\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:20,&quot;url&quot;:&quot;http://www.haproxy.org/img/pwby.gif&quot;,&quot;width&quot;:134}\" data-trix-content-type=\"image\" data-trix-id=\"19758\" contenteditable=\"false\"><img src=\"http://www.haproxy.org/img/pwby.gif\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/19758/20116/http://www.haproxy.org/img/pwby.gif\" width=\"134\" height=\"20\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span></a></li><li><!--block-->This site in IPv6 only :&nbsp;<a href=\"http://ipv6.haproxy.org/\">http://ipv6.haproxy.org/</a>&nbsp;(should be OK if you see a green square here ⇒&nbsp;<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:8,&quot;url&quot;:&quot;http://ipv6.haproxy.org/img/ipv6ready.png&quot;,&quot;width&quot;:8}\" data-trix-content-type=\"image\" data-trix-id=\"19796\" contenteditable=\"false\"><img src=\"http://ipv6.haproxy.org/img/ipv6ready.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/19796/19797/http://ipv6.haproxy.org/img/ipv6ready.png\" width=\"8\" height=\"8\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">﻿</span>)</li><li><!--block-->e-mail :&nbsp;<a href=\"mailto:w@1wt.eu\">w@1wt.eu</a></li></ul><div><!--block-->Some people regularly ask if it is possible to send donations, so I have set up a Paypal account for this.&nbsp;<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=willy%40nerim%2enet&amp;lc=FR&amp;item_name=Willy%20Tarreau&amp;currency_code=EUR&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\"><strong>Click here</strong></a>&nbsp;if you want to donate.<br><br></div><div><!--block-->An IRC channel for haproxy has been opened on FreeNode (but don't seek me there, I'm not) :<br><br></div><div><!--block--><a href=\"irc://irc.gnu.org/%23haproxy\">irc://irc.gnu.org/%23haproxy</a><br><br><strong>External links<br></strong>Here are some links to possibly useful external contents I gathered on the net. I have found most of them due to their link to haproxy's site ;-)<br><br></div><div><!--block--><br></div><ul><li><!--block--><a href=\"https://stripe.com/blog/service-discovery-at-stripe\">Service discovery at Stripe</a></li><li><!--block--><a href=\"https://www.peternijssen.nl/high-availability-with-haproxy-and-keepalived-in-aws\">High Availability with HAProxy and Keepalived in AWS</a></li><li><!--block--><a href=\"https://medium.freecodecamp.com/how-we-fine-tuned-haproxy-to-achieve-2-000-000-concurrent-ssl-connections-d017e61a4d27\">How we fine-tuned HAProxy to achieve 2,000,000 concurrent SSL connections</a></li><li><!--block--><a href=\"https://www.suse.com/communities/blog/speeding-ssl-need-know-haproxy/\">Speeding up SSL - All you need to know about haproxy</a></li><li><!--block--><a href=\"https://medium.com/vimeo-engineering-blog/improving-load-balancing-with-a-new-consistent-hashing-algorithm-9f1bd75709ed\">Improving load balancing with a new consistent-hashing algorithm</a></li><li><!--block--><a href=\"https://github.com/janeczku/haproxy-acme-validation-plugin\">ACME validation plugin for HAProxy / Let's Encrypt</a></li><li><!--block--><a href=\"https://www.linangran.com/?p=547\">Use HAProxy to load balance 300k concurrent tcp socket connections</a></li><li><!--block--><a href=\"https://software.intel.com/en-us/articles/accelerating-ssl-load-balancers-with-intel-xeon-v3-processors\">Accelerating SSL Load Balancers with Intel® Xeon® v3 Processors</a></li><li><!--block--><a href=\"https://www.privateinternetaccess.com/blog/2016/01/linux-networking-stack-from-the-ground-up-part-1/\">Linux networking stack from the ground up (parts 1-5)</a>&nbsp;(useful to whoever wants to know what happens below haproxy)</li><li><!--block--><a href=\"https://z0z0.me/create-your-own-cdn-with-haproxy-and-varnish/\">Loadbalance your website with haproxy and varnish</a></li><li><!--block--><a href=\"http://www.slideshare.net/NicolasBrousse/usenix-lisa15-how-tubemogul-handles-over-one-trillion-http-requests-a-month\">How TubeMogul Handles over One Trillon HTTP Requests a Month</a></li><li><!--block--><a href=\"http://47ron.in/blog/2015/10/23/haproxy-in-the-era-of-microservices.html\">HAProxy in the era of Microservices</a></li><li><!--block--><a href=\"https://www.percona.com/blog/2014/12/18/making-haproxy-1-5-replication-lag-aware-in-mysql/\">Making HAProxy 1.5 replication lag aware in MySQL</a></li><li><!--block--><a href=\"https://www.maxcdn.com/blog/haproxy-load-balancing/\">MaxCDN: How to Use HAProxy to Handle Traffic Spikes</a></li><li><!--block--><a href=\"https://www.varnish-cache.org/docs/trunk/phk/ssl_again.html\">Varnish, SSL and HAProxy</a></li><li><!--block--><a href=\"http://engineeringblog.yelp.com/2015/04/true-zero-downtime-haproxy-reloads.html\">True Zero Downtime HAProxy Reloads</a></li><li><!--block--><a href=\"http://thenewstack.io/haproxy-still-an-arrow-in-the-quiver-for-those-scaling-apps/\">HAProxy Is Still An Arrow in the Quiver for Those Scaling Apps</a></li><li><!--block--><a href=\"http://www.severalnines.com/blog/webinar-replay-slides-how-set-sql-load-balancing-haproxy\">How To Set Up SQL Load Balancing with HAProxy (Webinar)</a></li><li><!--block--><a href=\"http://www.youtube.com/watch?v=iFj--qiJRPo&amp;feature=youtu.be&amp;t=40m35s\">HAProxy running on Ubuntu Cloud on Power8, featured by Mark Shuttleworth at IBM Impact 2014 Keynote</a></li><li><!--block--><a href=\"http://jve.linuxwall.info/ressources/taf/haproxy-aws/\">Guidelines for HAProxy termination in AWS</a></li><li><!--block--><a href=\"http://www.youtube.com/watch?v=i5KhNJIQBO0\">Marcus Rueckert's talk at osc14</a></li><li><!--block--><a href=\"http://brokenhaze.com/blog/2014/03/25/how-stack-exchange-gets-the-most-out-of-haproxy/\">How Stack Exchange gets the most out of HAProxy</a></li><li><!--block--><a href=\"http://blog.loadbalancer.org/open-source-windows-service-for-reporting-server-load-back-to-haproxy-load-balancer-feedback-agent/\">Open Source Windows service for reporting server load back to HAProxy (load balancer feedback agent).</a></li><li><!--block--><a href=\"http://harish11g.blogspot.fr/2013/08/Load-balancing-Amazon-RDS-MySQL-read-replica-slaves-using-HAProxy.html\">Load Balancing Amazon RDS Read Replica's using HAProxy</a></li><li><!--block--><a href=\"http://www.dscentral.in/2012/11/04/installing-haproxy-on-pfsense/\">Installing HAProxy on pfSense</a></li><li><!--block--><a href=\"http://www.severalnines.com/resources/clustercontrol-mysql-haproxy-load-balancing-tutorial\">MySQL Load Balancing with HAProxy - Tutorial</a></li><li><!--block--><a href=\"https://github.com/eucalyptus/architecture/blob/master/features/elb/3.3/elb-benchmark.wiki\">HAProxy vs Nginx benchmark for the Eucalyptus Cloud computing Platform</a></li><li><!--block--><a href=\"http://www.exratione.com/2012/12/websockets-over-ssl-haproxy-nodejs-nginx/\">WebSocket Over SSL: HAProxy, Node.js, Nginx</a></li><li><!--block--><a href=\"http://harish11g.blogspot.fr/2012/11/amazon-elb-vs-haproxy-ec2-analysis.html\">Comparison Analysis:Amazon ELB vs HAProxy EC2</a></li><li><!--block--><a href=\"http://www.igvita.com/2012/10/31/simple-spdy-and-npn-negotiation-with-haproxy/\">Simple SPDY and NPN Negotiation with HAProxy</a></li><li><!--block--><a href=\"http://tech.shareaholic.com/2012/10/26/haproxy-a-substitute-for-amazon-elb\">Using HAProxy to Build a More Featureful Elastic Load Balancer</a></li><li><!--block--><a href=\"http://blog.silverbucket.net/post/31927044856/3-ways-to-configure-haproxy-for-websockets\">3 ways to configure haproxy for websockets</a></li><li><!--block--><a href=\"http://blog.bitbucket.org/2012/08/24/segregating-services/\">Segregating services at bitbucket</a></li><li><!--block--><a href=\"http://ben.timby.com/?page_id=210\">Load balancing FTP, by Ben Timby</a></li><li><!--block--><a href=\"http://robert.penz.name/386/howto-setup-a-haproxy-as-fault-tolerant-high-available-load-balancer-for-multiple-caching-web-proxies-on-rhelcentossl/comment-page-1/#comment-1064\">Howto setup a haproxy as fault tolerant / high available load balancer for multiple caching web proxies on RHEL/Centos/SL</a></li><li><!--block--><a href=\"http://www.slideshare.net/ricbartm/load-balancing-at-tuenti\">Load balancing @Tuenti, by Ricardo Bartolomé</a></li><li><!--block--><a href=\"http://blog.exceliance.fr/2011/09/16/benchmarking_ssl_performance/\">Benchmarking SSL performance</a></li><li><!--block--><a href=\"http://alohalb.wordpress.com/2011/06/17/smart_content_switching_for_news_website/\">Smart Content Switching for News Website</a></li><li><!--block--><a href=\"http://3-4-5-6.blogspot.com/2011/03/ha-proxy-for-exchange-2010-deployment.html\">HA Proxy for Exchange 2010 Deployment &amp; SMTP Restriction</a></li><li><!--block--><a href=\"http://flavio.tordini.org/a-more-stable-mysql-with-haproxy/comment-page-1\">A more stable MySQL with HAProxy</a></li><li><!--block--><a href=\"http://equima.pfpfree.net/2010/benchmarking-haproxy-ubuntu-vs-freebsd/\">Benchmarking HAProxy under VMware : Ubuntu vs FreeBSD</a></li><li><!--block--><a href=\"http://blog.serverfault.com/post/1016491873/\">Stack Overflow: Better rate limiting for all with HAProxy</a></li><li><!--block--><a href=\"http://blog.rightscale.com/2010/04/01/benchmarking-load-balancers-in-the-cloud/\">Benchmarking Load Balancers in the Cloud</a></li><li><!--block--><a href=\"http://www.alexwilliams.ca/blog/2009/08/10/using-haproxy-for-mysql-failover-and-redundancy/\">Using HAProxy for MySQL failover and redundancy</a></li><li><!--block--><a href=\"http://www.howtoforge.com/setting-up-a-high-availability-load-balancer-with-haproxy-keepalived-on-debian-lenny\">Setting up a high availability load blancer with haproxy and keepalived on debian lenny</a></li><li><!--block--><a href=\"http://blog.loadbalancer.org/configure-haproxy-with-tproxy-kernel-for-full-transparent-proxy/\">Configure HAProxy with TPROXY kernel for full transparent proxy</a></li><li><!--block--><a href=\"http://www.lastengine.com/99/installing-haproxy-load-balancing-for-http-and-https/\">Installing HAProxy load-balancing for HTTP and HTTPS</a></li><li><!--block--><a href=\"http://agiletesting.blogspot.com/2009/03/haproxy-x-forwarded-for-geoip-keepalive.html\">HAProxy, X-Forwarded-For, GeoIP, KeepAlive</a></li><li><!--block--><a href=\"http://agiletesting.blogspot.com/2009/02/load-balancing-in-amazon-ec2-with.html\">Load Balancing in Amazon EC2 with HAProxy</a></li><li><!--block--><a href=\"http://www.joeandmotorboat.com/2009/01/27/couchdb-load-balancing-and-replication-using-haproxy/\">CouchDB Load Balancing and Replication using HAProxy</a></li><li><!--block--><a href=\"http://www.igvita.com/2008/12/02/zero-downtime-restarts-with-haproxy/\">Zero-Downtime restarts with HAProxy</a></li><li><!--block--><a href=\"http://www.olivepeak.com/blog/posts/read/free-your-port-80-with-haproxy\">Free your port 80 with HAProxy</a></li><li><!--block--><a href=\"http://affectioncode.wordpress.com/2008/06/28/another-comparison-of-haproxy-and-nginx/\">Another comparison of HAProxy and Nginx</a></li><li><!--block--><a href=\"http://blog.webmynd.com/2008/06/23/scaling-on-ec2/\">Scaling on EC2</a></li><li><!--block--><a href=\"http://alword.wordpress.com/2008/06/14/haproxy-on-opensolaris-200805/\">HAProxy on Opensolaris 2008.05</a></li><li><!--block--><a href=\"http://www.igvita.com/2008/05/13/load-balancing-qos-with-haproxy/\">Load-Balancing and QoS with HAProxy</a></li><li><!--block--><a href=\"http://blog.hungrymachine.com/2008/03/27/analyzing-application-performance-with-haproxy-stats/\">Reviewing Application Health with HAProxy Stats</a></li><li><!--block--><a href=\"http://www.crium.univ-metz.fr/docs/system/drbd/haproxy.html\">Installation de HAProxy + Heartbeat sous Debian (FR)</a></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"f6ac2af4-5c27-4502-8086-b5703178e3b7","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.898Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.898Z"},"uniqueId":"4452c78b-4cc7-45b2-805f-234d28247383","__v":0}
{"_id":{"$oid":"668ef19a59d6bcc528b24b68"},"name":"- When it occurred? Who all users, locations , business processes affected due to this","heading":"- When it occurred? Who all users, locations , business","smartContent":{"content":"<div><!--block-->- When it occurred? Who all users, locations , business processes affected due to this issue?<br>- What is initial cause of the issue? When it is reported? What initial steps were taken ?<br>- Who all persons joined the bridge?<br>- Cause Analysis</div><ul><li><!--block-->- What is initial cause?</li><li><!--block-->- What all networks, servers, DB, applications affected?</li><li><!--block-->- To find the cause break questions into what, why, which, how, who and move ahead to find the cause</li></ul><div><!--block-->- Once investigating issue and identification of solution</div><ul><li><!--block-->- Do we need downtime?</li><li><!--block-->- What all changes to be made?</li><li><!--block-->- How soon we can do the changes?<ul><li><!--block-->Who will take the downtime approval?</li><li><!--block-->What activities to be done?</li><li><!--block-->Who, teams and persons, will do the activity?</li><li><!--block-->How much time it will needed for entire activity?</li><li><!--block-->Who will give confirmation from each team?</li><li><!--block-->Which teams activities are in?</li></ul></li><li><!--block-->Approvals<ul><li><!--block-->Agree from all teams about steps to perform</li><li><!--block-->Approval from business</li></ul></li><li><!--block-->Excuses<ul><li><!--block-->I will be joining in just 10 minutes</li><li><!--block-->Sir is busy in some other meeting , we are trying to patch him</li><li><!--block-->Sir is on sick leave</li></ul></li><li><!--block-->Eligibility to go in meeting<ul><li><!--block-->Be calm , polite</li><li><!--block-->Don't be in panic</li><li><!--block-->Defend self, then team<ul><li><!--block-->give resolution steps , but ask other to confirm, agree and rectify it.</li></ul></li><li><!--block-->Accept root cause, share resolution plan, but ask others to confirm, buy time, ask for time to implement</li></ul></li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3ed571c4-d35e-4087-bb16-f55db6e59821","order":0,"createdDate":{"$date":"2024-07-10T20:39:54.916Z"},"updatedDate":{"$date":"2024-07-10T20:39:54.916Z"},"uniqueId":"e4663abd-1c22-4142-83c3-0f46bc0ad58f","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c31"},"name":"Brief Tendencies - Duniya me 99.99% log apni galati hone par bhi usko accept nahi","heading":"Brief Tendencies - Duniya me 99.99% log apni galati hone","smartContent":{"content":"<div><!--block--><strong>Brief Tendencies<br>- Duniya me 99.99% log apni galati hone par bhi usko accept nahi karte. Agar koi aadmi koi galati karta hai aur koi usko tok deta hai to wo bhadak jata hai.<br><br>- Human procrastinate any issue, which they feel is not coming for any any topic or application which they are not hands on. Human want to let other go and solve that issue. They do not want to take other burden.<br><br>- Jab kisi aadmi ko milney ka mann nahi hota toh wah khud milne wale ke ghar nahi jata balki usko apney pass bulata hai.<br><br>- Jab koi aadmi se hum kaam karweni, tab ukra bhr pet khana khila dewe ke chahi, par ukar mazdoori me na kate ke chahi. Isse ukar kaam kare me mann lgal rahe la aur u bhi mann se thor jyada kaam kare la. (Management tactics learnt from Papa, while discussion why he gave all his labour-charge and did not bargained there.)<br><br>- Admi bura bolne se nahi bura karney se kharab samjha jata hai.<br><br>- Jab aadmi ko mere bare me kuch update(maine dobara join kiya/maine resign kar diya) milya hai toh wah dusro se reason jananey ke baad bhi apney kaano se reason ko sunna aur validate karna chahta hai.<br></strong><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f8b19a86-c0ed-455c-ab8b-8102e15d02ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.042Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.042Z"},"uniqueId":"9991a2f1-0ba7-4180-94a8-5984aa438933","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c33"},"name":"Fact :- Duniya me 99.99% log apni galati hone par bhi usko accept nahi karte.","heading":"Fact :- Duniya me 99.99% log apni galati hone par","smartContent":{"content":"<div><!--block-->Fact :-&nbsp;<strong>Duniya me 99.99% log apni galati hone par bhi usko accept nahi karte. Agar koi aadmi koi galati karta hai aur koi usko tok deta hai to wo bhadak jata hai.<br><br>Scenario :-</strong></div><ul><li><!--block-->Rajesh N. from DBA team did not accepted his mistake while missing of 151 quality review ids data after migration of DB from Infinity to Building 14.</li><li><!--block-->Papa did not accepted his mistake after his conversation with staff of Lawyer, where he mentioned facts which were not mentioned in my petition.</li></ul><div><!--block--><br><strong>Common practices to avoid collision and repetition</strong></div><ul><li><!--block-->Seek help from others to make him understand what he made wrong, what might be draw-back of this and approach to a common solution to refrain repetition.</li></ul><div><!--block--><br><strong>How you dealt</strong></div><ul><li><!--block-->In case of Rajesh mistake, I first made client to ok with data without review ids for current month. Then, I asked Rajesh to provide workaround.</li><li><!--block-->In case of Papa for exposing facts in front of Lawyer staff, I first discussed this with Papa. But as he exclaimed by saying \"mere se baat mat karo\", I explained same to Narendra and asked him to pursued Papa to refrain repetition.&nbsp;</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f8b19a86-c0ed-455c-ab8b-8102e15d02ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.047Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.047Z"},"uniqueId":"7465c606-b77d-4cd6-bcc9-6992073657df","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c35"},"name":"Fact :- Human procrastinate any issue, which they feel is not coming for any any","heading":"Fact :- Human procrastinate any issue, which they feel is","smartContent":{"content":"<div><!--block-->Fact :-&nbsp;<strong>Human procrastinate any issue, which they feel is not coming for any any topic or application which they are not hands on. Human want to let other go and solve that issue. They do not want to take other burden.<br><br>Scenario -&nbsp;</strong></div><ul><li><!--block-->Kirti,Fayaz,Anshul become alert and idle, when any issue comes. Kirti asks me that issue has been come in some QAA application , please check. That time, she was just listening one call. Most of the time, Fayaz and Kirti just go in meetings. Hopefully in this way they want to be highlighted/visible in team.</li><li><!--block-->I observed wrong here as Human do not want to be in tense situation. They know their limits, what they could do or what they dont. So they procrastinate any issue, which they feel is not coming for any any topic or application which they are not hands on.</li></ul><div><!--block--><strong><br>Common practices to avoid collision and repetition</strong></div><ul><li><!--block-->Redirect mail or issue to them and force them to solve the issue. If they are not willing to or not able to solve the issue then try to put own mind. I this way my leadership quality, knowledge will be highlighted.</li><li><!--block-->If I solved the issue by my own, then try to send the mail to Fayaz and Kirti so that they could do the analysis from next time.</li></ul><div><!--block--><br><strong>How you dealt</strong></div><ul><li><!--block-->I resolved the issue by my own.</li></ul><div><!--block--><br></div><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f8b19a86-c0ed-455c-ab8b-8102e15d02ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.053Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.053Z"},"uniqueId":"0e7b316e-bfa6-4422-8ebd-0741eb6fa981","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c37"},"name":"Jab kisi aadmi ko milney ka mann nahi hota toh wah khud milne wale ke","heading":"Jab kisi aadmi ko milney ka mann nahi hota toh","smartContent":{"content":"<div><!--block--><strong>Jab kisi aadmi ko milney ka mann nahi hota toh wah khud milne wale ke ghar nahi jata balki usko apney pass bulata hai.<br><br>Scenario :-</strong></div><ul><li><!--block-->09-Dec-2017 - Madan fufa came Delhi to attend one marriage ceremony. He called papa and said \"Kaha kauno kutumb tu utna door shaadi kare ke chaha ta. Tu log door chal gail bara.\" He asked papa to come to meet him. Papa had declined to go there. He said \"Unka mile ke mann naikhe isiliye u humra bulao taran.\"</li></ul><div><!--block--><br><strong>Common practices to avoid collision and repetition</strong></div><ul><li><!--block-->Politely say \"<strong>NO</strong>\" to such person.</li></ul><div><!--block--><br><strong>How you dealt</strong></div><ul><li><!--block-->Papa had declined to go there. He said \"Unka mile ke mann naikhe isiliye u humra bulao taran.\"</li></ul><div><!--block--><br><br><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f8b19a86-c0ed-455c-ab8b-8102e15d02ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.058Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.058Z"},"uniqueId":"38465de8-49e4-43dc-8108-fa869f08338b","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c45"},"name":"- Hum jaldi gussa ho jate hain jab Koi meri baat ka oppose kar deta","heading":"- Hum jaldi gussa ho jate hain jab Koi meri","smartContent":{"content":"<div><!--block-->- Hum jaldi gussa ho jate hain jab</div><ul><li><!--block-->Koi meri baat ka oppose kar deta hai.</li></ul><div><!--block-->-Hum Oppose bardasht nahi kar pate. Aur mere chehre ka expression change ho jata hai.<br><br>- Hum apney chehre ka expression control nahi kar pate.<br><br>- Jab mere ya mere kisi kaam me koi galati nikal jati hai toh, hum bahut jaldi tut jaate hain.<br><br>- Hum bahut jaldi pressure me aa jate hain aur priority decide nahi kar pate.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"86a2e18f-538b-400b-bd66-180174725347","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.074Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.074Z"},"uniqueId":"46b81bf9-1d75-49bf-b74f-0d335cd44f9d","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c53"},"name":"Target Listen well Say what you mean. Let your actions speak. Steps are below:- Be","heading":"Target Listen well Say what you mean. Let your actions","smartContent":{"content":"<div><!--block-->Target</div><ol><li><!--block-->Listen well</li><li><!--block-->Say what you mean.</li><li><!--block-->Let your actions speak.</li></ol><div><!--block--><br>Steps are below:-</div><ul><li><!--block-->Be the last to speak</li><li><!--block-->Laughing on yourself</li><li><!--block-->Let your actions speak louder than your words - Dont let your words guide you, let your actions guide you.</li><li><!--block-->Say what you mean</li><li><!--block-->See the good in everything and everyone.</li><li><!--block-->Give credits when it is to do</li><li><!--block-->Give respect to other people</li><li><!--block-->Always try to do better - you have to change for better version of yourself</li><li><!--block-->Help others when they needed, ask help when you need.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9aa85a61-bd16-4ba6-829a-8920fdee4e73","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.09Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.09Z"},"uniqueId":"9b53413a-7804-4300-b11a-961bbae3a4a1","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c65"},"name":"Emotion :- I can not control my emotions, fear , laugh, sorrow and let others","heading":"Emotion :- I can not control my emotions, fear ,","smartContent":{"content":"<div><!--block--><strong><em>Emotion :-</em></strong>&nbsp; I can not control my emotions, fear , laugh, sorrow and let others see them.&nbsp;<br><br><strong><em>Description :-</em></strong>&nbsp;Fortunately I have found mostly good people around me. That is why they have not used it for their own use. But in this way I become vulnerable and might be misused by evil-hearted persons. Also good-hearted person might feel embarrasement due to my quick uncontrolled reaction/exclamation.&nbsp;</div><ul><li><!--block-->Due to my this behavior my parents, my brother, sister and my teammates might feel uncomfortable to talk with me. I suddenly change my mind. That may develop feeling of unsafe, distrust among their mind for me.&nbsp;</li><li><!--block-->My mother do not want me let alone with papa, sister.</li></ul><div><!--block--><br><strong>Plan for resolution:-&nbsp;</strong>I should take care of myself to identify in which situation I do so. I should refrain to go into such situation.&nbsp;</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7a6b9187-af9c-4857-9286-59c626b91844","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.117Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.117Z"},"uniqueId":"22fa1bd2-4175-48e9-a445-95964b2c41c1","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c67"},"name":"Summary :- I can not control my emotions, fear , laugh, sorrow and let others","heading":"Summary :- I can not control my emotions, fear ,","smartContent":{"content":"<div><!--block-->Summary :-&nbsp;</div><ul><li><!--block-->I can not control my emotions, fear , laugh, sorrow and let others see them.&nbsp;</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7a6b9187-af9c-4857-9286-59c626b91844","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.123Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.123Z"},"uniqueId":"b371b8b2-7948-4313-ab8b-d29a1fb4f25b","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c7b"},"name":"Fine Yourself for Each Offense. Understand What Triggers Your Bad Habits. Go Slow and Make","heading":"Fine Yourself for Each Offense. Understand What Triggers Your Bad","smartContent":{"content":"<ol><li><!--block-->Fine Yourself for Each Offense.</li><li><!--block-->Understand What Triggers Your Bad Habits.</li><li><!--block-->Go Slow and Make Tiny Changes.</li><li><!--block-->Spend a Month Thinking About Your Habit Before Taking Action.</li><li><!--block-->Remind Your Future Self About Avoiding Bad Habits.</li><li><!--block-->Change Your Environment.</li><li><!--block-->Coach Yourself Out of Bad Habits.</li><li><!--block-->Do a Review When You Have a Bad Habit Relapse.</li></ol><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ad710e8f-8763-49b1-bbc9-620cac588dcb","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.145Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.145Z"},"uniqueId":"accb73f1-c0f2-4b00-8e5b-486e3de9eadf","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c96"},"name":"In Criminal court","heading":"In Criminal court","smartContent":{"content":"<div><!--block--><strong><em>In Criminal court</em></strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"46b1165b-24c4-4566-b2a4-346dd52bc1d6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.168Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.168Z"},"uniqueId":"0098fc3d-4ae6-4b67-8100-a887b57f073e","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24c98"},"name":"In Family court","heading":"In Family court","smartContent":{"content":"<div><!--block--><strong>In Family court</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"46b1165b-24c4-4566-b2a4-346dd52bc1d6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.173Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.173Z"},"uniqueId":"90f317e5-0d39-4285-985e-00752cd84e57","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cbc"},"name":"Ragini Kumari ka cruel nature ke bare me kya kahna hai? Shaadi ke pahle hi","heading":"Ragini Kumari ka cruel nature ke bare me kya kahna","smartContent":{"content":"<div><!--block--><strong>Ragini Kumari ka cruel nature ke bare me kya kahna hai?<br></strong><br></div><ul><li><!--block-->Shaadi ke pahle hi hafte se Ragini Kumari mere pariwar se dur rahti thi.</li><li><!--block-->Ghar ke kamo me Maa Sister ka hath nahi badhati thi. Baat baat par gussa hokar khud ko room me lock kar leti thi. Baat baat par hath ki nas apni chudi fod ke kaat leti hai. 16 February 2016 ko mere ghar koi nahi tha, sirf hum aur Ragini Kumari thi. Wo fasi laganaey ka prayas ki. Padosiyo ke help se darwaja ke kundi khole aur Ragini Kumari ko bahar nikale.<ul><li><!--block-->Iske maa ko inform kiye toh iski maa boli ki wqo aapko daraney ke liye aisa karti hai.</li><li><!--block-->Iske Maa-Baap-Bhai kabhi issue resolve karney ke liey mera sath nahi diye.</li><li><!--block-->Ragini Kumari ke pariwar wale hamesh mere par hi dawab banate they ki hum uske hisab se chale.</li><li><!--block-->Ragini Kumari ke pariwar wale hamesha kahte they ki \"Agar tum hamari baat nahi manoge toh ye aise hi atmhatya karegi.\"</li></ul></li><li><!--block-->Mere office janey ke baad Ragini Devi ka phone hamesha busy rahta tha. Phone me hamesha face lock laga ke rakhti thi. Puchney par ki kis se baat karti ho kuch nahi batati thi.<ul><li><!--block-->Ragini ke family walo se puchney par wo log kahte they ki Ragini Kumari unse baat nahi karti hai.</li><li><!--block-->Ek baar Ragini apney Sandeep jija se puchi thi \"Aapko 2 bacche kaise huye hain? Sandeep jija ne kaha ki wo din me 5 baar sote hain unki bahen ke sath.\" Mere mana karney par Ragini kumari ne kaha ki agar usko uske jija se baat nahi karney diya jayega toh wo mere pariwar me kisi se baat nahi karegi.</li></ul></li><li><!--block-->Ragini Kumari ke pariwar walo ki nazar hamesha mere salary par rahti thi. Wo bolte they ki apni puri salary Ragini Devi ke hath me do, nahi toh hum tumko police case me jail me dalwa denge.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"2ebb31bd-7096-4a5f-a559-1f028be022a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.195Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.195Z"},"uniqueId":"5b58d07f-c0cb-45f5-9119-46cb84fe72c0","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cbe"},"name":"Ragini Kumari ke life barbad ho jayega is case se?","heading":"Ragini Kumari ke life barbad ho jayega is case se?","smartContent":{"content":"<div><!--block-->Ragini Kumari ke life barbad ho jayega is case se?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ebb31bd-7096-4a5f-a559-1f028be022a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.2Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.2Z"},"uniqueId":"81f1fa45-8edc-4e47-8c81-4633b40416a0","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cc0"},"name":"Aap 6 mahiney Ragini devi ke sath rah lijiye?","heading":"Aap 6 mahiney Ragini devi ke sath rah lijiye?","smartContent":{"content":"<div><!--block-->Aap 6 mahiney Ragini devi ke sath rah lijiye?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ebb31bd-7096-4a5f-a559-1f028be022a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.205Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.205Z"},"uniqueId":"93b39066-716c-4753-9f56-364fe2cc3ac6","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cc2"},"name":"Ragini Devi ke pariwar wale kahte hain ki aapke pariwar wale usko pratarit karte they?","heading":"Ragini Devi ke pariwar wale kahte hain ki aapke pariwar","smartContent":{"content":"<div><!--block-->Ragini Devi ke pariwar wale kahte hain ki aapke pariwar wale usko pratarit karte they?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ebb31bd-7096-4a5f-a559-1f028be022a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.214Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.214Z"},"uniqueId":"70ec190b-119b-4af9-9336-b955ae596fc9","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cc4"},"name":"Ragini Kumari ka kahna hai ki aap Gutkha khate hain, daaru pite hain aur isko","heading":"Ragini Kumari ka kahna hai ki aap Gutkha khate hain,","smartContent":{"content":"<div><!--block-->Ragini Kumari ka kahna hai ki aap Gutkha khate hain, daaru pite hain aur isko bina baat ke marte hain?</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2ebb31bd-7096-4a5f-a559-1f028be022a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.219Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.219Z"},"uniqueId":"21f6e1ae-dc26-404d-ba3f-e7125112a589","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cd7"},"name":"subah shaam daaru piyenge, ciggereate piyenge aur office me bhi cig gutkha khayenge","heading":"subah shaam daaru piyenge, ciggereate piyenge aur office me bhi","smartContent":{"content":"<div><!--block-->subah shaam daaru piyenge, ciggereate piyenge aur office me bhi cig gutkha khayenge</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"777ca62e-e451-485b-84eb-e729e2b33058","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.231Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.231Z"},"uniqueId":"db980582-bc8c-47bd-a507-bbe907342780","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cd9"},"name":"subah shaam hanuman chalisha padhenge aur time par office jayenge aur aayenge","heading":"subah shaam hanuman chalisha padhenge aur time par office jayenge","smartContent":{"content":"<div><!--block-->subah shaam hanuman chalisha padhenge aur time par office jayenge aur aayenge</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"777ca62e-e451-485b-84eb-e729e2b33058","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.236Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.236Z"},"uniqueId":"84af5a00-99ce-4a33-8551-7e0b263320f9","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24cdb"},"name":"apna current routine follow karenge","heading":"apna current routine follow karenge","smartContent":{"content":"<div><!--block-->apna current routine follow karenge</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"777ca62e-e451-485b-84eb-e729e2b33058","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.242Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.242Z"},"uniqueId":"62d56c5d-db04-4ec1-8d17-ffb018702cb6","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d00"},"name":"Task History 12-Feb-2018 - Analysing code to do changes. 12-Feb-2018 - Opened request.","heading":"Task History 12-Feb-2018 - Analysing code to do changes. 12-Feb-2018","smartContent":{"content":"<div><!--block-->Task History</div><ul><li><!--block-->12-Feb-2018 - Analysing code to do changes.</li><li><!--block-->12-Feb-2018 - Opened request.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"354ca207-c424-469d-81b7-a222c460ffb0","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.298Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.299Z"},"uniqueId":"c821765c-562b-4c7b-898c-4b20ede7b517","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d10"},"name":"Memory Usage On linux, there are commands for almost everything, because the gui might not","heading":"Memory Usage On linux, there are commands for almost everything,","smartContent":{"content":"<div><!--block--><br><a href=\"https://www.binarytides.com/linux-command-check-memory-usage/\"><strong>Memory Usage</strong></a><br><br></div><div><!--block-->On linux, there are commands for almost everything, because the gui might not be always available. When working on servers only shell access is available and everything has to be done from these commands. So today we shall be checking the commands that can be used to check memory usage on a linux system. Memory include RAM and swap.<br><br></div><pre><!--block--><br></pre><div><!--block--><br><br></div><div><!--block-->It is often important to check memory usage and memory used per process on servers so that resources do not fall short and users are able to access the server. For example a website. If you are running a webserver, then the server must have enough memory to serve the visitors to the site. If not, the site would become very slow or even go down when there is a traffic spike, simply because memory would fall short. Its just like what happens on your desktop PC.<br><br></div><div><!--block--><br>1. free command<br><br></div><div><!--block-->The free command is the most simple and easy to use command to check memory usage on linux. Here is a quick example<br><br></div><pre><!--block-->$ free -m\n             total       used       free     shared    buffers     cached\nMem:          7976       6459       1517          0        865       2248\n-/+ buffers/cache:       3344       4631\nSwap:         1951          0       1951</pre><div><!--block-->The m option displays all data in MBs. The total os 7976 MB is the total amount of RAM installed on the system, that is 8GB. The used column shows the amount of RAM that has been used by linux, in this case around 6.4 GB. The output is pretty self explanatory. The catch over here is the cached and buffers column. The second line tells that 4.6 GB is free. This is the free memory in first line added with the buffers and cached amount of memory.<br><br></div><div><!--block-->Linux has the habit of caching lots of things for faster performance, so that memory can be freed and used if needed.<br>The last line is the swap memory, which in this case is lying entirely free.<br><br></div><div><!--block--><br>2. /proc/meminfo<br><br></div><div><!--block-->The next way to check memory usage is to read the /proc/meminfo file. Know that the /proc file system does not contain real files. They are rather virtual files that contain dynamic information about the kernel and the system.<br><br></div><pre><!--block-->$ cat /proc/meminfo\nMemTotal:        8167848 kB\nMemFree:         1409696 kB\nBuffers:          961452 kB\nCached:          2347236 kB\nSwapCached:            0 kB\nActive:          3124752 kB\nInactive:        2781308 kB\nActive(anon):    2603376 kB\nInactive(anon):   309056 kB\nActive(file):     521376 kB\nInactive(file):  2472252 kB\nUnevictable:        5864 kB\nMlocked:            5880 kB\nSwapTotal:       1998844 kB\nSwapFree:        1998844 kB\nDirty:              7180 kB\nWriteback:             0 kB\nAnonPages:       2603272 kB\nMapped:           788380 kB\nShmem:            311596 kB\nSlab:             200468 kB\nSReclaimable:     151760 kB\nSUnreclaim:        48708 kB\nKernelStack:        6488 kB\nPageTables:        78592 kB\nNFS_Unstable:          0 kB\nBounce:                0 kB\nWritebackTmp:          0 kB\nCommitLimit:     6082768 kB\nCommitted_AS:    9397536 kB\nVmallocTotal:   34359738367 kB\nVmallocUsed:      420204 kB\nVmallocChunk:   34359311104 kB\nHardwareCorrupted:     0 kB\nAnonHugePages:         0 kB                                                                                                                           \nHugePages_Total:       0\nHugePages_Free:        0\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\nDirectMap4k:       62464 kB\nDirectMap2M:     8316928 kB</pre><div><!--block--><br><br></div><div><!--block-->Check the values of MemTotal, MemFree, Buffers, Cached, SwapTotal, SwapFree.<br>They indicate same values of memory usage as the free command.<br><br></div><div><!--block--><br>3. vmstat<br><br></div><div><!--block-->The vmstat command with the s option, lays out the memory usage statistics much like the proc command. Here is an example<br><br></div><pre><!--block-->$ vmstat -s\n      8167848 K total memory\n      7449376 K used memory\n      3423872 K active memory\n      3140312 K inactive memory\n       718472 K free memory\n      1154464 K buffer memory\n      2422876 K swap cache\n      1998844 K total swap\n            0 K used swap\n      1998844 K free swap\n       392650 non-nice user cpu ticks\n         8073 nice user cpu ticks\n        83959 system cpu ticks\n     10448341 idle cpu ticks\n        91904 IO-wait cpu ticks\n            0 IRQ cpu ticks\n         2189 softirq cpu ticks\n            0 stolen cpu ticks\n      2042603 pages paged in\n      2614057 pages paged out\n            0 pages swapped in\n            0 pages swapped out\n     42301605 interrupts\n     94581566 CPU context switches\n   1382755972 boot time\n         8567 forks\n$</pre><div><!--block-->The top few lines indicate total memory, free memory etc and so on.<br><br></div><div><!--block--><br>4. top command<br><br></div><div><!--block-->The top command is generally used to check memory and cpu usage per process. However it also reports total memory usage and can be used to monitor the total RAM usage. The header on output has the required information. Here is a sample output<br><br></div><pre><!--block-->top - 15:20:30 up  6:57,  5 users,  load average: 0.64, 0.44, 0.33\nTasks: 265 total,   1 running, 263 sleeping,   0 stopped,   1 zombie\n%Cpu(s):  7.8 us,  2.4 sy,  0.0 ni, 88.9 id,  0.9 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:   8167848 total,  6642360 used,  1525488 free,  1026876 buffers\nKiB Swap:  1998844 total,        0 used,  1998844 free,  2138148 cached\n\n  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND                                                                                 \n 2986 enlighte  20   0  584m  42m  26m S  14.3  0.5   0:44.27 yakuake                                                                                 \n 1305 root      20   0  448m  68m  39m S   5.0  0.9   3:33.98 Xorg                                                                                    \n 7701 enlighte  20   0  424m  17m  10m S   4.0  0.2   0:00.12 kio_thumbnail</pre><div><!--block-->Check the KiB Mem and KiB Swap lines on the header. They indicate total, used and free amounts of the memory. The buffer and cache information is present here too, like the free command.<br><br></div><div><!--block--><br>5. htop<br><br></div><div><!--block-->Similar to the top command, the htop command also shows memory usage along with various other details.<br><br></div><div><!--block-->?<span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:1,&quot;url&quot;:&quot;https://www.binarytides.com/blog/wp-content/plugins/jquery-image-lazy-loading/images/grey.gif&quot;,&quot;width&quot;:1}\" data-trix-content-type=\"image\" data-trix-id=\"17339\" contenteditable=\"false\"><img src=\"https://www.binarytides.com/blog/wp-content/plugins/jquery-image-lazy-loading/images/grey.gif\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/17339/17525/https://www.binarytides.com/blog/wp-content/plugins/jquery-image-lazy-loading/images/grey.gif\" width=\"1\" height=\"1\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span>?<br><br></div><div><!--block-->The header on top shows cpu usage along with RAM and swap usage with the corresponding figures.<br><br></div><div><!--block--><br>RAM Information<br><br></div><div><!--block-->To find out hardware information about the installed RAM, use the demidecode command. It reports lots of information about the installed RAM memory.<br><br></div><pre><!--block-->$ sudo dmidecode -t 17\n# dmidecode 2.11\nSMBIOS 2.4 present.\n\nHandle 0x0015, DMI type 17, 27 bytes\nMemory Device\n        Array Handle: 0x0014\n        Error Information Handle: Not Provided\n        Total Width: 64 bits\n        Data Width: 64 bits\n        Size: 2048 MB\n        Form Factor: DIMM\n        Set: None\n        Locator: J1MY\n        Bank Locator: CHAN A DIMM 0\n        Type: DDR2\n        Type Detail: Synchronous\n        Speed: 667 MHz\n        Manufacturer: 0xFF00000000000000\n        Serial Number: 0xFFFFFFFF\n        Asset Tag: Unknown\n        Part Number: 0x524D32474235383443412D36344643FFFFFF</pre><div><!--block-->Provided information includes the size (2048MB), type (DDR2) , speed(667 Mhz) etc.<br><br></div><div><!--block--><br>Summary<br><br></div><div><!--block-->All the above mentioned commands work from the terminal and do not have a gui. When working on a desktop with a gui, it is much easier to use a GUI tool with graphical output. The most common tools are gnome-system-monitor on gnome and<br>ksysguard on KDE. Both provide resource usage information about cpu, ram, swap and network bandwidth in a graphical and easy to understand visual output.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":5,"linkedQuestionsId":"a907af6d-76fd-4780-afb0-0f72769994dd","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.331Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.331Z"},"uniqueId":"f54b1f2b-b13d-43a0-a106-340eeb6f46f8","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d23"},"name":"git checkout -b BRANCH_NAME creates a new branch and checks out the new branch while","heading":"git checkout -b BRANCH_NAME creates a new branch and checks","smartContent":{"content":"<pre><!--block-->git checkout -b BRANCH_NAME</pre><div><!--block-->&nbsp;creates a new branch and checks out the new branch while</div><pre><!--block--> git branch BRANCH_NAME</pre><div><!--block-->&nbsp;creates a new branch but leaves you on the same branch.<br><br></div><div><!--block-->In other words git checkout -b BRANCH_NAME does the following for you.<br><br></div><pre><!--block-->git branch BRANCH_NAME    # create a new branch\ngit checkout BRANCH_NAME  # then switch to the new branch</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":6,"linkedQuestionsId":"2f60619f-23c7-4e6e-bd56-4c4b30d14e7e","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.354Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.354Z"},"uniqueId":"bc860e86-2e27-4274-b6a0-7c797ca8ad78","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d25"},"name":"git branch: Shows all your branches git branch newbranch: Creates a new branch git checkout","heading":"git branch: Shows all your branches git branch newbranch: Creates","smartContent":{"content":"<ul><li><!--block--><strong>git branch:</strong>&nbsp;Shows all your branches</li><li><!--block--><strong>git branch newbranch:</strong>&nbsp;Creates a new branch</li><li><!--block--><strong>git checkout -b newbranch:</strong>&nbsp;Creates a new branch and switches to that branch immediately. This is the same as git branch newbranch followed by git checkout newbranch.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":3,"linkedQuestionsId":"2f60619f-23c7-4e6e-bd56-4c4b30d14e7e","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.359Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.359Z"},"uniqueId":"13169bbe-4d74-48c1-9b42-ed8d373dccfe","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d31"},"name":"From Git documentation: -m <msg> --message=<msg> Use the given <msg> as the commit message. If","heading":"From Git documentation: -m <msg> --message=<msg> Use the given <msg>","smartContent":{"content":"<div><!--block-->From&nbsp;<a href=\"https://git-scm.com/docs/git-commit\">Git documentation</a>:<br><br></div><blockquote><!--block-->-m &lt;msg&gt;<br>--message=&lt;msg&gt;<br>Use the given &lt;msg&gt; as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.</blockquote><div><!--block-->So, if you are looking for grouping multiple commit messages this should do the work:<br><br></div><pre><!--block-->git commit -m \"commit message1\" -m \"commit message2\"</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"93baa2ed-39f7-45ac-a801-589911bcc9a7","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.372Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.372Z"},"uniqueId":"59bab0ce-1b39-4e0a-8516-d12df6a0cd38","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d3d"},"name":"Initially we will check if any unstaged/newly added files to commit git status We can","heading":"Initially we will check if any unstaged/newly added files to","smartContent":{"content":"<div><!--block-->Initially we will check if any unstaged/newly added files to commit</div><pre><!--block--><strong>git status</strong></pre><div><!--block-->We can combine step to add files in staged mode and commit in local repository as follows</div><pre><!--block-->\r\n<strong>git commit -a -m \" commiting for change\" -m \"adding updated db files\" -m \"checking multi line  commit message\"</strong></pre><div><!--block--><br>Then we can commit the staged changes on remote repository as follows</div><pre><!--block-->\r\n<strong>git push</strong></pre><div><!--block--><br>To check commit message of last commit can be checked as follows</div><pre><!--block-->\r\n<strong>git log -1\r</strong></pre><div><!--block--><br><br><strong>Note :-&nbsp;</strong>Below command will be used to pull changes from remote repository ( by other committers/developers)</div><pre><!--block--><strong>git pull</strong></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a1707c3b-74fa-4416-8e65-7a5b34d6fc78","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.384Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.384Z"},"uniqueId":"18e31c20-696f-4bf4-8706-bedabb325f35","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d5b"},"name":"Man halkaaur refresh lagta hai. Gym se aane ke baad lagta hai ki aaj ek","heading":"Man halkaaur refresh lagta hai. Gym se aane ke baad","smartContent":{"content":"<ul><li><!--block-->Man halkaaur refresh lagta hai.</li><li><!--block-->Gym se aane ke baad lagta hai ki aaj ek accha kaam kiya. Man santusht lagta hai.&nbsp;</li><li><!--block-->Gym se aaney ke baad humko accha feel hota hai.</li><li><!--block-->Gym me gaana sunke man refreshed lagta hai.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":7,"linkedQuestionsId":"53816db4-9c79-4628-9dde-8c94625c8116","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.424Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.424Z"},"uniqueId":"200c889d-3ea6-4c3f-bd0b-6fe44b47c7d0","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d6a"},"name":"Datastructures are based on abstract data types (ADT), which Wikipedia defines as follows: [A] mathematical","heading":"Datastructures are based on abstract data types (ADT), which Wikipedia","smartContent":{"content":"<div><!--block-->Datastructures are based on abstract data types (ADT), which Wikipedia defines as follows:<br><br></div><blockquote><!--block-->[A] mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations.</blockquote><div><!--block--><br>An ADT doesn't care about the memory representation of its values or how its operations are implemented. It's like a Java interface, which is a data type that's disconnected from any implementation. In contrast, a&nbsp;<em>datastructure</em>&nbsp;is a concrete implementation of one or more ADTs, similar to how Java classes implement interfaces.<br><br>Examples of ADTs include Employee, Vehicle, Array, and List. Consider the List ADT (also known as the Sequence ADT), which describes an ordered collection of elements that share a common type. Each element in this collection has its own position and duplicate elements are allowed. Basic operations supported by the List ADT include:</div><ul><li><!--block-->Creating a new and empty list</li><li><!--block-->Appending a value to the end of the list</li><li><!--block-->Inserting a value within the list</li><li><!--block-->Deleting a value from the list</li><li><!--block-->Iterating over the list</li><li><!--block-->Destroying the list</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"595f7ea9-6fda-49a6-b41c-c93285fba570","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.448Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.448Z"},"uniqueId":"8767fab9-d82a-4dcd-8e35-97def6dbd8ea","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24d73"},"name":"There are many kinds of datastructures, ranging from single variables to arrays or linked lists","heading":"There are many kinds of datastructures, ranging from single variables","smartContent":{"content":"<div><!--block-->There are many kinds of datastructures, ranging from single variables to arrays or linked lists of objects containing multiple fields.&nbsp;<br>All datastructures can be classified as&nbsp;</div><ul><li><!--block-->primitives or&nbsp;</li><li><!--block-->aggregates,&nbsp;</li></ul><div><!--block-->and some are classified as containers.<br><br><br><strong>Primitives versus aggregates<br></strong>The simplest kind of datastructure stores single data items; for example, a variable that stores a Boolean value or a variable that stores an integer. I refer to such datastructures as&nbsp;<em>primitives</em>.<br><br></div><div><!--block-->Many datastructures are capable of storing multiple data items. For example, an array can store multiple data items in its various slots, and an object can store multiple data items via its fields. I refer to these datastructures as&nbsp;<em>aggregates</em>.<br><br></div><div><!--block-->All of the datastructures we'll look at in this series are aggregates.<br><br></div><div><!--block--><br><strong>Containers<br><br></strong>Anything in which data items are stored and retrieved could be considered a datastructure. Examples include the datastructures derived from the previously mentioned Employee, Vehicle, Array, and List ADTs.<br><br></div><div><!--block-->Many datastructures are designed to describe various entities. Instances of an Employee class are datastructures that exist to describe various employees, for instance. In contrast, some datastructures exist as generic storage vessels for other datastructures. For example, an array can store primitive values or object references. I refer to this latter category of datastructures as&nbsp;<em>containers</em>.<br><br></div><div><!--block-->As well as being aggregates, all of the datastructures we'll look at in this series are containers.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"abc27fdc-80c3-485c-ad84-c2845042367d","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.462Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.462Z"},"uniqueId":"0510d019-9291-4f9b-99ff-070af8c59345","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24db1"},"name":"Spring Boot is an extension of the Spring Framework designed to simplify the development of stand-alone, production-grade Spring-based applications.","heading":"Spring Boot is an extension of the Spring Framework designed to simplify the development of stand-alone, production-grade Spring-based applications.","smartContent":{"content":"Spring Boot is an extension of the Spring Framework designed to simplify the development of stand-alone, production-grade Spring-based applications. It provides a range of features to streamline and enhance the development process. Key features of Spring Boot include:\n\n1. **Auto-Configuration**: \n   - Automatically configures Spring and third-party libraries based on the project's dependencies. This reduces the need for manual configuration and setup.\n\n2. **Standalone Applications**:\n   - Spring Boot applications are self-contained and can run independently without requiring an external web server. It includes an embedded server (e.g., Tomcat, Jetty, or Undertow).\n\n3. **Production-Ready Features**:\n   - Provides features for monitoring and managing applications in production, such as health checks, metrics, and application insights via the Actuator module.\n\n4. **Spring Boot Starters**:\n   - Predefined sets of dependencies (starters) that simplify the inclusion of common libraries and configurations. For example, `spring-boot-starter-web` includes libraries and configurations for building web applications.\n\n5. **Spring Boot Initializr**:\n   - A web-based tool to quickly generate a Spring Boot project with the desired dependencies and configuration. It provides a starting point for new applications.\n\n6. **Convention over Configuration**:\n   - Follows sensible defaults for configurations and file locations, reducing the need for boilerplate code and configuration.\n\n7. **Externalized Configuration**:\n   - Supports external configuration via properties or YAML files, environment variables, and command-line arguments, allowing for easy configuration changes without modifying the code.\n\n8. **Microservice Support**:\n   - Facilitates the development of microservices architectures with support for building modular, loosely coupled services.\n\n9. **Spring Boot CLI**:\n   - A command-line interface that allows you to run and test Spring Boot applications from the command line.\n\n10. **Minimal Spring Configuration**:\n    - Reduces the need for extensive XML or Java-based configuration by using sensible defaults and auto-configuration.\n\nOverall, Spring Boot aims to simplify the development process, enhance productivity, and promote best practices by providing a set of tools and conventions that streamline the setup and configuration of Spring applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"28bb8990-7526-48d8-86dc-0a370b2440d6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.502Z"},"updatedDate":{"$date":"2024-08-28T18:14:31.669Z"},"uniqueId":"9e829063-945d-4559-8310-15645e536f7a","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24dd4"},"name":"Create stand-alone Spring applications that can be started using java -jar. Embed Tomcat, Jetty or","heading":"Create stand-alone Spring applications that can be started using java","smartContent":{"content":"<ul><li><!--block-->Create stand-alone Spring applications that can be started using java -jar.</li><li><!--block-->Embed Tomcat, Jetty or Undertow directly. You don't need to deploy WAR files.</li><li><!--block-->It provides opinionated 'starter' POMs to simplify your Maven configuration.</li><li><!--block-->It automatically configure Spring whenever possible.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"27e98caf-9f59-44cd-8bad-dc0707df5cb6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.516Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.516Z"},"uniqueId":"36df6d41-0734-4aaf-9746-010d41661d23","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24df7"},"name":"Spring Boot Framework has the following components: Spring Boot Starter Spring Boot AutoConfigurator Spring Boot","heading":"Spring Boot Framework has the following components: Spring Boot Starter","smartContent":{"content":"<div><!--block-->Spring Boot Framework has the following components:</div><ol><li><!--block-->Spring Boot Starter</li><li><!--block-->Spring Boot AutoConfigurator</li><li><!--block-->Spring Boot Actuator</li><li><!--block-->Spring Boot CLI</li><li><!--block-->Spring Boot Initilizr</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dd88b75b-632f-49d6-9b8b-698cab8be2ac","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.531Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.531Z"},"uniqueId":"27323ce8-bd7b-4ab2-99a1-d25ba1c26f17","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24e1a"},"name":"Spring Boot Starters are just JAR Files. They are used by Spring Boot Framework to","heading":"Spring Boot Starters are just JAR Files. They are used","smartContent":{"content":"<div><!--block-->Spring Boot Starters are just JAR Files. They are used by Spring Boot Framework to provide “Auto-Dependency Resolution”.<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:180,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-starter.png&quot;,&quot;width&quot;:1044}\" data-trix-content-type=\"image\" data-trix-id=\"4183\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-starter.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/4183/4184/https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-starter.png\" width=\"1044\" height=\"180\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"109a870a-05e6-479c-b424-7ce867eaa3f7","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.545Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.545Z"},"uniqueId":"d6cf31b1-5218-49ce-a6c1-ef07bb941e0c","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24e3d"},"name":"Spring Boot AutoConfigurator is used by Spring Boot Framework to provide “Auto-Configuration”. ? ?","heading":"Spring Boot AutoConfigurator is used by Spring Boot Framework to","smartContent":{"content":"<div><!--block-->Spring Boot AutoConfigurator is used by Spring Boot Framework to provide “Auto-Configuration”.<br><br></div><div><!--block--><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:186,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-configurator.png&quot;,&quot;width&quot;:1047}\" data-trix-content-type=\"image\" data-trix-id=\"4981\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-configurator.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/4981/4982/https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-configurator.png\" width=\"1047\" height=\"186\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2331e266-ba5b-467c-ac8b-596d58281509","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.559Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.559Z"},"uniqueId":"326e8334-d4df-48fd-9bec-9c04837fed50","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24e60"},"name":"Spring Boot Actuator is used by Spring Boot Framework to provide “Management EndPoints” to see","heading":"Spring Boot Actuator is used by Spring Boot Framework to","smartContent":{"content":"Spring Boot Actuator is a sub-project of Spring Boot that provides a set of built-in tools and endpoints for managing and monitoring your Spring Boot application. It simplifies the process of managing and monitoring applications by exposing various metrics and management endpoints, which are useful for production environments.\n\n### Key Features:\n\n1. **Health Checks:**\n   - Provides endpoints to check the health of your application (e.g., `/actuator/health`).\n\n2. **Metrics:**\n   - Exposes endpoints to retrieve application metrics (e.g., `/actuator/metrics`), which can include data like memory usage, active threads, and HTTP request counts.\n\n3. **Application Info:**\n   - Displays application-specific information, such as build version and description (e.g., `/actuator/info`).\n\n4. **Environment Properties:**\n   - Allows you to access and inspect environment properties (e.g., `/actuator/env`).\n\n5. **Configuration Properties:**\n   - Provides endpoints to view the configuration properties of your application (e.g., `/actuator/configprops`).\n\n6. **Auditing:**\n   - Integrates with Spring Security to provide auditing capabilities.\n\n7. **Logging:**\n   - Allows dynamic configuration and retrieval of logging levels (e.g., `/actuator/loggers`).\n\n8. **Custom Endpoints:**\n   - You can create your own custom management and monitoring endpoints.\n\n### Usage:\n\nTo use Spring Boot Actuator, you need to include the `spring-boot-starter-actuator` dependency in your `pom.xml` or `build.gradle` file:\n\n**Maven:**\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n**Gradle:**\n```groovy\nimplementation 'org.springframework.boot:spring-boot-starter-actuator'\n```\n\n### Configuration:\n\nYou can customize Actuator endpoints in your `application.properties` or `application.yml` file:\n\n**application.properties:**\n```properties\nmanagement.endpoints.web.exposure.include=health,info,metrics\nmanagement.endpoint.health.show-details=always\n```\n\n**application.yml:**\n```yaml\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,info,metrics\n  endpoint:\n    health:\n      show-details: always\n```\n\n### Example Endpoints:\n\n- **Health:** `/actuator/health`\n- **Metrics:** `/actuator/metrics`\n- **Info:** `/actuator/info`\n- **Environment:** `/actuator/env`\n- **Loggers:** `/actuator/loggers`\n\nSpring Boot Actuator provides essential tools for monitoring and managing applications, especially in production environments, making it easier to ensure the health and performance of your application.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"7da1720f-abf4-40cb-95a9-678f10e0fd67","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.575Z"},"updatedDate":{"$date":"2024-08-28T17:36:59.507Z"},"uniqueId":"82bc5c08-d73c-4ea3-b26b-61ee9b3144c9","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24e83"},"name":"In simple words, Spring Boot CLI is Auto Dependency Resolution, Auto-Configuration, Management EndPoints, Embedded HTTP","heading":"In simple words, Spring Boot CLI is Auto Dependency Resolution,","smartContent":{"content":"<div><!--block-->In simple words, Spring Boot CLI is Auto Dependency Resolution, Auto-Configuration, Management EndPoints, Embedded HTTP Servers(Jetty,Tomcat etc.) and (Groovy,Auto-Imports)<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:273,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli.png&quot;,&quot;width&quot;:2311}\" data-trix-content-type=\"image\" data-trix-id=\"6591\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/6591/6592/https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli.png\" width=\"2311\" height=\"273\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></div><div><!--block-->In other words, Spring Boot CLI is Spring Boot Starter, Spring Boot Auto-Configurator, Spring Boot Actuator, Embedded HTTP Servers and Groovy.<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:273,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli2.png&quot;,&quot;width&quot;:2311}\" data-trix-content-type=\"image\" data-trix-id=\"6625\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli2.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/6625/6626/https://cdn.journaldev.com/wp-content/uploads/2015/07/what-is-springboot-cli2.png\" width=\"2311\" height=\"273\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></div><div><!--block-->With Spring Boot CLI:<br><br></div><ul><li><!--block-->No Semicolons</li><li><!--block-->No Public and private access modifiers</li><li><!--block-->No Imports(Most)</li><li><!--block-->No “return” statement</li><li><!--block-->No setters and getters</li><li><!--block-->No Application class with main() method(It takes care by SpringApplication class).</li><li><!--block-->No Gradle/Maven builds.</li><li><!--block-->No separate HTTP Servers.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7943d104-ed6e-4152-94d6-c2b5d0f8f2ef","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.591Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.591Z"},"uniqueId":"93dd4cd7-f2de-48b8-912e-5494d76772d1","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24ea6"},"name":"Spring Boot Initilizr is a Spring Boot tool to bootstrap Spring Boot or Spring Applications","heading":"Spring Boot Initilizr is a Spring Boot tool to bootstrap","smartContent":{"content":"<div><!--block-->Spring Boot Initilizr is a Spring Boot tool to bootstrap Spring Boot or Spring Applications very easily.</div><div><!--block-->Spring Boot Initilizr comes in the following forms:</div><ol><li><!--block-->Spring Boot Initilizr With Web Interface</li><li><!--block-->Spring Boot Initilizr With IDEs/IDE Plugins</li><li><!--block--><a href=\"https://www.journaldev.com/8609/spring-boot-initilizr-with-spring-boot-cli\">Spring Boot Initilizr With Spring Boot CLI</a></li><li><!--block--><a href=\"https://www.journaldev.com/8650/spring-boot-initilizr-with-thirdparty-tools\">Spring Boot Initilizr With ThirdParty Tools</a></li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"707caa4f-e1f4-4b93-9ae7-0cfa82cd099a","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.606Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.606Z"},"uniqueId":"eaca3efd-336a-456a-8937-176e24d1e980","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24ea8"},"name":"Spring Boot Initilizr is a Spring Boot tool to bootstrap Spring Boot or Spring Applications","heading":"Spring Boot Initilizr is a Spring Boot tool to bootstrap","smartContent":{"content":"<div><!--block-->Spring Boot Initilizr is a Spring Boot tool to bootstrap Spring Boot or Spring Applications very easily.<br><br></div><div><!--block-->Spring Boot Initilizr comes in the following forms:</div><ol><li><!--block-->Spring Boot Initilizr With Web Interface</li><li><!--block-->Spring Boot Initilizr With IDEs/IDE Plugins</li><li><!--block--><a href=\"https://www.journaldev.com/8609/spring-boot-initilizr-with-spring-boot-cli\">Spring Boot Initilizr With Spring Boot CLI</a></li><li><!--block--><a href=\"https://www.journaldev.com/8650/spring-boot-initilizr-with-thirdparty-tools\">Spring Boot Initilizr With ThirdParty Tools</a></li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"707caa4f-e1f4-4b93-9ae7-0cfa82cd099a","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.611Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.611Z"},"uniqueId":"0bf36a68-e0d0-4633-a667-79ff8d732e0d","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24ecb"},"name":"Spring Boot Initilizr simplifies Spring Applications Development by providing initial project structure and build scripts.","heading":"Spring Boot Initilizr simplifies Spring Applications Development by providing initial","smartContent":{"content":"<div><!--block-->Spring Boot Initilizr simplifies Spring Applications Development by providing initial project structure and build scripts.</div><ul><li><!--block-->It reduces Development time</li><li><!--block-->It increases Productivity</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"328e59d1-e23f-4972-85ea-cd2885672331","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.625Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.625Z"},"uniqueId":"98cadb5d-3dae-4510-b3d4-c42ee5cf0622","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24eee"},"name":"Spring Boot Framework uses one of the greatest features of Maven/Gradle build tools: “Transitively Dependency","heading":"Spring Boot Framework uses one of the greatest features of","smartContent":{"content":"<div><!--block-->Spring Boot Framework uses one of the greatest features of Maven/Gradle build tools:&nbsp;<strong>“Transitively Dependency Resolution Management”</strong>.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1cab67e3-271a-40ca-ac29-0938e05b109c","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.639Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.639Z"},"uniqueId":"7a873f4b-4887-4d24-b58f-58953aade027","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24f11"},"name":"“Transitively Dependency Resolution Management” means: If we define a “A” dependency in build scripts, “A”","heading":"“Transitively Dependency Resolution Management” means: If we define a “A”","smartContent":{"content":"<div><!--block-->“<strong>Transitively Dependency Resolution Management</strong>” means: If we define a “A” dependency in build scripts, “A” is dependent on “B” and “B” is dependent on “C”, That means “A” is also dependent on “C”.<br>Then Build Tools will download and add all Three Jar files “A”, “B” and “C” to our application classpath.<br><br></div><div><!--block--><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:388,&quot;url&quot;:&quot;https://cdn.journaldev.com/wp-content/uploads/2015/07/trasitive-dependency.png&quot;,&quot;width&quot;:984}\" data-trix-content-type=\"image\" data-trix-id=\"62595\" contenteditable=\"false\"><img src=\"https://cdn.journaldev.com/wp-content/uploads/2015/07/trasitive-dependency.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/62595/62596/https://cdn.journaldev.com/wp-content/uploads/2015/07/trasitive-dependency.png\" width=\"984\" height=\"388\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7a83720b-8565-450a-8c30-1db04e8d581e","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.653Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.653Z"},"uniqueId":"06dd31a2-2c90-439a-8ca2-170643e3109c","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24f34"},"name":"Web Development SpringApplication Application events and listeners Admin features","heading":"Web Development SpringApplication Application events and listeners Admin features","smartContent":{"content":"<ul><li><!--block-->Web Development</li><li><!--block-->SpringApplication</li><li><!--block-->Application events and listeners</li><li><!--block-->Admin features</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"511c27fe-a638-4fca-a6dd-d3f1347ff892","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.666Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.666Z"},"uniqueId":"5ac60bcc-1f82-442d-b2ef-b4a291f9472e","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24f57"},"name":"There are multiple approaches to create Spring Boot project. We can use any of the","heading":"There are multiple approaches to create Spring Boot project. We","smartContent":{"content":"<div><!--block-->There are multiple approaches to create Spring Boot project. We can use any of the following approach to create application.</div><ul><li><!--block-->Spring Maven Project</li><li><!--block-->Spring Starter Project Wizard</li><li><!--block-->Spring Initializr</li><li><!--block-->Spring Boot CLI</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"9bdf21aa-0b14-4c14-be99-8e972871bd8f","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.68Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.68Z"},"uniqueId":"30ca5204-7af4-4986-a94a-dca774ac98fd","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24f7a"},"name":"Create stand-alone Spring applications that can be started using java -jar. Embed Tomcat, Jetty or","heading":"Create stand-alone Spring applications that can be started using java","smartContent":{"content":"<ul><li><!--block-->Create stand-alone Spring applications that can be started using java -jar.</li><li><!--block-->Embed Tomcat, Jetty or Undertow directly. You don't need to deploy WAR files.</li><li><!--block-->It provides opinionated 'starter' POMs to simplify your Maven configuration.</li><li><!--block-->It automatically configure Spring whenever possible.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2a7fa63c-b71b-4f57-8324-b4d6c9df7fba","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.694Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.694Z"},"uniqueId":"3a380a80-f8ac-450d-9d39-8e109c967540","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b24f7c"},"name":"Create stand-alone Spring applications that can be started using java -jar. Embed Tomcat, Jetty or","heading":"Create stand-alone Spring applications that can be started using java","smartContent":{"content":"<ul><li><!--block-->Create stand-alone Spring applications that can be started using java -jar.</li><li><!--block-->Embed Tomcat, Jetty or Undertow directly. You don't need to deploy WAR files.</li><li><!--block-->It provides opinionated 'starter' POMs to simplify your Maven configuration.</li><li><!--block-->It automatically configure Spring whenever possible.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2a7fa63c-b71b-4f57-8324-b4d6c9df7fba","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.698Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.698Z"},"uniqueId":"4760d9db-b014-4e39-b679-b3aeb131090a","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b2501b"},"name":"Artificial Intelligence is an area of computer science that emphasizes the creation of intelligent machine","heading":"Artificial Intelligence is an area of computer science that emphasizes","smartContent":{"content":"Studying artificial intelligence (AI) is beneficial for several reasons:\n\n1. **Industry Demand**: AI skills are highly sought after in many industries, including tech, finance, healthcare, and more.\n2. **Innovation**: AI drives innovation in technology, enabling advancements in automation, data analysis, and more.\n3. **Competitive Edge**: Knowledge of AI can differentiate you in the job market and open up new career opportunities.\n4. **Problem Solving**: AI techniques can solve complex problems, improve decision-making, and enhance user experiences.\n5. **Future Trends**: AI is shaping the future of technology and business, making it crucial to understand its impact and applications.\n6. **Automation**: AI can automate repetitive tasks, increasing efficiency and allowing you to focus on more strategic work.\n7. **Data Insights**: AI can analyze large volumes of data to extract valuable insights and predictions.\n\nOverall, AI is becoming integral to various fields, making it a valuable area of study for staying relevant and advancing professionally.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"cdd2cda4-15d6-4f8e-b853-1b647711a899","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.728Z"},"updatedDate":{"$date":"2024-08-27T06:02:32.212Z"},"uniqueId":"ae4c4f49-f729-4199-982f-fe822423bccf","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25084"},"name":"Artificial intelligence Neural Networks can model mathematically the way biological brain works, allowing the machine","heading":"Artificial intelligence Neural Networks can model mathematically the way biological","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Artificial intelligence Neural Networks can model mathematically the way biological brain works, allowing the machine to think and learn the same way the humans do- making them capable of recognizing things like speech, objects and animals like we do.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b5f7bb67-a1f2-4b05-96e9-1861333c07b2","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.745Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.745Z"},"uniqueId":"701d0252-8651-4b3e-b6c4-ea08d6bfda3d","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b250ed"},"name":"Artificial Intelligence can be used in many areas like Computing, Speech recognition, Bio-informatics, Humanoid robot,","heading":"Artificial Intelligence can be used in many areas like Computing,","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Artificial Intelligence can be used in many areas like Computing, Speech recognition, Bio-informatics, Humanoid robot, Computer software, Space and Aeronautics’s etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8a713670-03c1-4105-a2d9-ebe0aab5ddcd","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.76Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.76Z"},"uniqueId":"10c14572-ecc7-4898-8c86-81cc82fc7b77","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25156"},"name":"Perl language is not commonly used programming language for AI","heading":"Perl language is not commonly used programming language for AI","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Perl language is not commonly used programming language for AI</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"46e96f25-bd72-4ea1-87cc-9956a9914756","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.777Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.777Z"},"uniqueId":"697a25ec-0c1c-461b-a649-b568f10ca3fd","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b251bf"},"name":"In AI, Prolog is a programming language based on logic.","heading":"In AI, Prolog is a programming language based on logic.","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In AI, Prolog is a programming language based on logic.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8184cb9b-b968-46d9-8e2c-2c48f2049b22","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.792Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.792Z"},"uniqueId":"d06e8be2-15fc-4c21-903e-103d7724869a","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25228"},"name":"Strong AI makes strong claims that computers can be made to think on a level","heading":"Strong AI makes strong claims that computers can be made","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Strong AI makes strong claims that computers can be made to think on a level equal to humans while weak AI simply predicts that some features that are resembling to human intelligence can be incorporated to computer to make it more useful tools.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"23058885-837f-4c65-9963-a41cde84eb28","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.808Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.808Z"},"uniqueId":"326e16a4-cc25-47a3-9b72-c632241f7f62","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25291"},"name":"Statistical AI is more concerned with “inductive” thought like given a set of pattern, induce","heading":"Statistical AI is more concerned with “inductive” thought like given","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Statistical AI is more concerned with “inductive” thought like given a set of pattern, induce the trend etc.&nbsp; While, classical AI, on the other hand, is more concerned with “ deductive” thought given as a set of constraints, deduce a conclusion etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b77744ee-9681-4227-8d79-a8c44fced844","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.824Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.824Z"},"uniqueId":"5cbf10c0-14f3-479c-877a-6bc67a70a342","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b252fa"},"name":"Alternate Key: Excluding primary keys all candidate keys are known as Alternate Keys. Artificial Key:","heading":"Alternate Key: Excluding primary keys all candidate keys are known","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br><strong>Alternate Key:</strong>&nbsp; Excluding primary keys all candidate keys are known as Alternate Keys.<br><br></div><div><!--block--><br><strong>Artificial Key:</strong>&nbsp;If no obvious key either stands alone or compound is available, then the last resort is to, simply create a key, by assigning a number to each record or occurrence.&nbsp; This is known as artificial key.<br><br></div><div><!--block--><br><strong>Compound Key:</strong>&nbsp; When there is no single data element that uniquely defines the occurrence within a construct, then integrating multiple elements to create a unique identifier for the construct is known as Compound Key.<br><br></div><div><!--block--><br><strong>Natural Key:</strong>&nbsp; Natural key is one of the data element that is stored within a construct, and which is utilized as the primary key.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0fb30078-dd07-40a0-8513-34f3c4ff0c67","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.84Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.84Z"},"uniqueId":"6dd71b05-4ad6-4739-be68-ef05e90a0b0d","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25363"},"name":"The production rule comprises of a set of rule and a sequence of steps.","heading":"The production rule comprises of a set of rule and","smartContent":{"content":"<div><!--block--><strong><br><br></strong>The production rule comprises of a set of rule and a sequence of steps.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e5a3924f-906e-4e8f-9477-e86e2240ab7b","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.855Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.855Z"},"uniqueId":"a83a0495-bdde-4321-a9ff-e6733b3573c8","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b253cc"},"name":"The “depth first search” method takes less memory.","heading":"The “depth first search” method takes less memory.","smartContent":{"content":"<div><!--block-->The “depth first search” method takes less memory.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":10,"linkedQuestionsId":"fee2b76c-50fd-40c2-8372-58689d5c5f82","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.87Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.87Z"},"uniqueId":"0f9d98b3-1335-4963-acc5-348bd020744e","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25435"},"name":"Heuristic approach is the best way to go for game playing problem, as it will","heading":"Heuristic approach is the best way to go for game","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Heuristic approach is the best way to go for game playing problem, as it will use the technique based on intelligent guesswork. For example, Chess between humans and computers as it will use brute force computation, looking at hundreds of thousands of positions.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2f8837a8-7258-4b35-8306-b1832f413b15","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.884Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.884Z"},"uniqueId":"22ef0b5a-2bf2-4ded-91b5-a3e7c615b43d","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b2549e"},"name":"A* algorithm is based on best first search method, as it gives an idea of","heading":"A* algorithm is based on best first search method, as","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A* algorithm is based on best first search method, as it gives an idea of optimization and quick choose of path, and all characteristics lie in A* algorithm.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ec3723d7-1dda-4e5b-944b-68c5a84c32bb","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.899Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.899Z"},"uniqueId":"5a2d24d4-cd46-47c3-b647-8792c1305900","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25507"},"name":"A hybrid Bayesian network contains both a discrete and continuous variables.","heading":"A hybrid Bayesian network contains both a discrete and continuous","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A hybrid Bayesian network contains both a discrete and continuous variables.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a43fb308-6dc6-4b2f-b62c-30480734b540","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.914Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.914Z"},"uniqueId":"d5a70fb0-e37e-4c2e-b6d7-f225849be393","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25570"},"name":"Anything perceives its environment by sensors and acts upon an environment by effectors are known","heading":"Anything perceives its environment by sensors and acts upon an","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Anything perceives its environment by sensors and acts upon an environment by effectors are known as Agent. Agent includes Robots, Programs, and Humans etc.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8a3ae546-1855-4322-8219-1e5bf5581ba8","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.93Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.93Z"},"uniqueId":"2cc01551-5b05-45e8-bffe-b6652288ccca","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b255d9"},"name":"In partial order planning , rather than searching over possible situation it involves searching over","heading":"In partial order planning , rather than searching over possible","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In partial order planning , rather than searching over possible situation it involves searching over the space of possible plans.&nbsp; The idea is to construct a plan piece by piece.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e1b56707-0db1-4a6b-82c1-d925f3459ef6","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.944Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.944Z"},"uniqueId":"22c132ef-9b86-4e16-92f3-44190d05ddc0","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25642"},"name":"a) Add an operator (action) b) Add an ordering constraint between operators","heading":"a) Add an operator (action) b) Add an ordering constraint","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>a)&nbsp; &nbsp; &nbsp; Add an operator (action)<br><br></div><div><!--block--><br>b)&nbsp; &nbsp; &nbsp; Add an ordering constraint between operators</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9a5bd62c-54df-49d2-92b3-9103caed74d8","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.959Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.959Z"},"uniqueId":"68904ad6-0b4f-427c-9138-3751837c78f9","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b256ab"},"name":"“Attachment” is considered as not a desirable property of a logical rule based system.","heading":"“Attachment” is considered as not a desirable property of a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>“Attachment” is considered as not a desirable property of a logical rule based system.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9d80b229-838f-4381-9462-f6c34742db72","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.974Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.974Z"},"uniqueId":"4088e589-ccd6-466c-be13-1060c70d04b5","__v":0}
{"_id":{"$oid":"668ef19b59d6bcc528b25714"},"name":"In artificial intelligence, neural network is an emulation of a biological neural system, which receives","heading":"In artificial intelligence, neural network is an emulation of a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In artificial intelligence, neural network is an emulation of a biological neural system, which receives the data, process the data and gives the output based on the algorithm and empirical data.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1e6365b1-e21b-4a6b-beff-23d7107ac3be","order":0,"createdDate":{"$date":"2024-07-10T20:39:55.991Z"},"updatedDate":{"$date":"2024-07-10T20:39:55.991Z"},"uniqueId":"5c059fac-ad66-4761-9ca7-c2e3335fd3cc","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2577d"},"name":"An algorithm is said completed when it terminates with a solution when one exists.","heading":"An algorithm is said completed when it terminates with a","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>An algorithm is said completed when it terminates with a solution when one exists.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1e3bd22e-59ab-47b6-823d-d15cb6bbe106","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.008Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.008Z"},"uniqueId":"dbf8b451-f4d7-41ad-a247-bfc612e49ad5","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b257e6"},"name":"A heuristic function ranks alternatives, in search algorithms, at each branching step based on the","heading":"A heuristic function ranks alternatives, in search algorithms, at each","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A heuristic function ranks alternatives, in search algorithms, at each branching step based on the available information to decide which branch to follow.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f9867ace-f753-4310-9396-f05f73f989c8","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.028Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.028Z"},"uniqueId":"00f84922-a74f-42ef-b54d-f0fba54eaec0","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2584f"},"name":"In a planning system, the function of the third component is to detect when a","heading":"In a planning system, the function of the third component","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In a planning system, the function of the third component is to detect when a solution to problem has been found.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"145211e6-b9ee-44f8-bc2d-948776d2efe0","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.044Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.044Z"},"uniqueId":"1e54aae6-e519-4aa8-831b-25a453d27882","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b258b8"},"name":"Generality is the measure of ease with which the method can be adapted to different","heading":"Generality is the measure of ease with which the method","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Generality is the measure of ease with which the method can be adapted to different domains of application.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"33276e61-a00b-4bd8-a996-99baae52f429","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.061Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.061Z"},"uniqueId":"ae903109-5562-449f-a1c4-72e9dac492a3","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25921"},"name":"A top-down parser begins by hypothesizing a sentence and successively predicting lower level constituents until","heading":"A top-down parser begins by hypothesizing a sentence and successively","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>A top-down parser begins by hypothesizing a sentence and successively predicting lower level constituents until individual pre-terminal symbols are written.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fb5c4a42-6c81-40c7-bd09-7f9fd0e1c0df","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.077Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.077Z"},"uniqueId":"2ccdca62-dbc9-49ce-a670-53de75d55ea0","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2598a"},"name":"These are the two strategies which are quite similar. In best first search, we expand","heading":"These are the two strategies which are quite similar. In","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>These are the two strategies which are quite similar. In best first search, we expand the nodes in accordance with the evaluation function. While, in breadth first search a node is expanded in accordance to the cost function of the parent node.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a0647456-942f-4fbc-b233-95780f360495","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.093Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.093Z"},"uniqueId":"b98f4856-c256-4fd0-8770-350bd6b62669","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b259f3"},"name":"Frames are a variant of semantic networks which is one of the popular ways of","heading":"Frames are a variant of semantic networks which is one","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Frames are a variant of semantic networks which is one of the popular ways of presenting non-procedural knowledge in an expert system. A frame which is an artificial data structure is used to divide knowledge into substructure by representing “stereotyped situations’. Scripts are similar to frames, except the values that fill the slots must be ordered.&nbsp; Scripts are used in natural language understanding systems to organize a knowledge base in terms of the situation that the system should understand.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fd6a707b-0157-4802-8808-02fc6f6dff73","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.109Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.109Z"},"uniqueId":"9fbc23a8-24cc-470e-b219-bca1c1313148","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25a5c"},"name":"FOPL stands for First Order Predicate Logic, Predicate Logic provides a) A language to express","heading":"FOPL stands for First Order Predicate Logic, Predicate Logic provides","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>FOPL stands for First Order Predicate Logic, Predicate Logic provides<br><br></div><div><!--block--><br>a)&nbsp; &nbsp; &nbsp; A language to express assertions about certain “World”<br><br></div><div><!--block--><br>b)&nbsp; &nbsp; &nbsp; An inference system to deductive apparatus whereby we may draw conclusions from such assertion<br><br></div><div><!--block--><br>c)&nbsp; &nbsp; &nbsp; &nbsp;A semantic based on set theory<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f9819f2a-4542-4223-ad99-99e3de664ed4","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.125Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.125Z"},"uniqueId":"c51769a0-4aa0-4401-90f9-031f42bc3041","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25ac5"},"name":"a) A set of constant symbols b) A set of variables c) A set of","heading":"a) A set of constant symbols b) A set of","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>a)&nbsp; &nbsp; &nbsp; A set of constant symbols<br><br></div><div><!--block--><br>b)&nbsp; &nbsp; &nbsp; A set of variables<br><br></div><div><!--block--><br>c)&nbsp; &nbsp; &nbsp; &nbsp;A set of predicate symbols<br><br></div><div><!--block--><br>d)&nbsp; &nbsp; &nbsp; A set of function symbols<br><br></div><div><!--block--><br>e)&nbsp; &nbsp; &nbsp; The logical connective<br><br></div><div><!--block--><br>f)&nbsp; &nbsp; &nbsp; &nbsp;The Universal Quantifier and Existential Qualifier<br><br></div><div><!--block--><br>g)&nbsp; &nbsp; &nbsp; A special binary relation of equality</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"05600bcd-2c46-4554-a993-d5719b9625d5","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.14Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.14Z"},"uniqueId":"08619380-12eb-466f-98f5-f95e4d9523de","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25b2e"},"name":"In online search, it will first take action and then observes the environment.","heading":"In online search, it will first take action and then","smartContent":{"content":"<div><!--block-->In online search, it will first take action and then observes the environment.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7405b277-234c-4183-ad01-bc5042b424df","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.155Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.155Z"},"uniqueId":"3d3fd4bb-2bd9-4731-a46e-d9ec921f5564","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25b97"},"name":"RBFE and SMA* will solve any kind of problem that A* can’t by using a","heading":"RBFE and SMA* will solve any kind of problem that","smartContent":{"content":"<div><!--block-->RBFE and SMA* will solve any kind of problem that A* can’t by using a limited amount of memory.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ca06888a-c048-4347-a638-5251604ce3f6","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.17Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.17Z"},"uniqueId":"8b2c14d5-5158-410e-bc3e-d3ba5fd7ca7f","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25c00"},"name":"In Artificial Intelligence to answer the probabilistic queries conditioned on one piece of evidence, Bayes","heading":"In Artificial Intelligence to answer the probabilistic queries conditioned on","smartContent":{"content":"<div><!--block-->In Artificial Intelligence to answer the probabilistic queries conditioned on one piece of evidence, Bayes rule can be used.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c45d8ebf-70dc-4561-8e49-e9142bc3dcc4","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.186Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.186Z"},"uniqueId":"057fd088-4f5c-4013-8578-1190babc5a85","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25c69"},"name":"For building a Bayes model in AI, three terms are required; they are one conditional","heading":"For building a Bayes model in AI, three terms are","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>For building a Bayes model in AI, three terms are required; they are one conditional probability and two unconditional probability.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f18d65fd-8189-4d57-b3b7-626b243c545a","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.201Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.201Z"},"uniqueId":"7a98560d-e764-4f82-8c43-3347fe3ef4e8","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25cd2"},"name":"While creating Bayesian Network, the consequence between a node and its predecessors is that a","heading":"While creating Bayesian Network, the consequence between a node and","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>While creating Bayesian Network, the consequence between a node and its predecessors is that a node can be conditionally independent of its predecessors.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bfa4d07c-7e0c-4974-a6f5-ebfae38ca1ce","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.215Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.215Z"},"uniqueId":"78b33ccf-1b37-46e9-93a7-76a446faa415","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25d3b"},"name":"If a Bayesian Network is a representative of the joint distribution, then by summing all","heading":"If a Bayesian Network is a representative of the joint","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>If a Bayesian Network is a representative of the joint distribution, then by summing all the relevant joint entries, it can solve any query.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"13af6a02-fc55-4e3f-9cdc-3fae50856f97","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.229Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.229Z"},"uniqueId":"64c816aa-00b7-42d5-8d3e-2ca70ee85ac7","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25da4"},"name":"Inductive logic programming combines inductive methods with the power of first order representations.","heading":"Inductive logic programming combines inductive methods with the power of","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>Inductive logic programming combines inductive methods with the power of first order representations.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1bf181d0-843e-4738-ba7f-60a831143d0e","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.244Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.244Z"},"uniqueId":"544f0625-2541-427b-a9c4-0e49f2f07e47","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25e0d"},"name":"The objective of an Inductive Logic Programming is to come up with a set of","heading":"The objective of an Inductive Logic Programming is to come","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>The objective of an Inductive Logic Programming is to come up with a set of sentences for the hypothesis such that the entailment constraint is satisfied.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"45e80a10-da37-4955-8503-426dc4530fb6","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.258Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.258Z"},"uniqueId":"7c3bef1f-4c42-41f4-90a3-3371e32faf66","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25e76"},"name":"There are three literals available in top-down inductive learning methods they are a) Predicates b)","heading":"There are three literals available in top-down inductive learning methods","smartContent":{"content":"<div><!--block-->There are three literals available in top-down inductive learning methods they are<br>a)&nbsp; &nbsp; &nbsp; Predicates<br>b)&nbsp; &nbsp; &nbsp; Equality and Inequality<br>c)&nbsp; &nbsp; &nbsp; &nbsp;Arithmetic Literals</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"defbd9e8-5540-4adf-9fcb-d75766822dc2","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.273Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.273Z"},"uniqueId":"efcb8cee-4ae6-4c3e-aaf5-63968ad8c934","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25edf"},"name":"Inverse Resolution’ inverts a complete resolution, as it is a complete algorithm for learning first","heading":"Inverse Resolution’ inverts a complete resolution, as it is a","smartContent":{"content":"<div><!--block-->Inverse Resolution’ inverts a complete resolution, as it is a complete algorithm for learning first order theories.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b99a13ca-e6cc-48b2-a2b9-447fdc0308a8","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.287Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.287Z"},"uniqueId":"a376b943-97a9-4d03-8c86-25368ab8e6b9","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25f48"},"name":"In speech recognition, Acoustic signal is used to identify a sequence of words.","heading":"In speech recognition, Acoustic signal is used to identify a","smartContent":{"content":"<div><!--block-->In speech recognition, Acoustic signal is used to identify a sequence of words.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"cbfdfb22-14ba-44f8-9348-21aec336683e","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.302Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.302Z"},"uniqueId":"e211bf68-50fe-4f64-96b4-e505af0e3959","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b25fb1"},"name":"Biagram model gives the probability of each word following each other word in speech recognition.","heading":"Biagram model gives the probability of each word following each","smartContent":{"content":"<div><!--block-->Biagram model gives the probability of each word following each other word in speech recognition.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"318611b7-1df3-4724-857c-64e092eb1ebf","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.318Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.318Z"},"uniqueId":"1e7283b3-48be-468c-8aa4-c53aa2c84af0","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2601a"},"name":"To solve temporal probabilistic reasoning, HMM (Hidden Markov Model) is used, independent of transition and","heading":"To solve temporal probabilistic reasoning, HMM (Hidden Markov Model) is","smartContent":{"content":"<div><!--block-->To solve temporal probabilistic reasoning, HMM (Hidden Markov Model) is used, independent of transition and sensor model.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bc9fcb73-d406-412f-aebd-eff740509d98","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.333Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.333Z"},"uniqueId":"477d2343-f806-4660-8a30-d9df621f2010","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26083"},"name":"Hidden Markov Models are a ubiquitous tool for modelling time series data or to model","heading":"Hidden Markov Models are a ubiquitous tool for modelling time","smartContent":{"content":"<div><!--block-->Hidden Markov Models are a ubiquitous tool for modelling time series data or to model sequence behaviour.&nbsp; They are used in almost all current speech recognition systems.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3439c55f-f685-4a2e-902e-bf2e21c756ae","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.348Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.348Z"},"uniqueId":"f6730c70-15b7-48d2-88b1-7dad70558fe6","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b260ec"},"name":"The state of the process in HMM’s model is described by a ‘Single Discrete Random","heading":"The state of the process in HMM’s model is described","smartContent":{"content":"<div><!--block-->The state of the process in HMM’s model is described by a ‘Single Discrete Random Variable’.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3d04e6a7-7fb4-41e0-9d5f-d3c82885574d","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.364Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.364Z"},"uniqueId":"2527820d-be78-4841-999e-71077098b0d4","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26155"},"name":"Possible States of the World’ is the possible values of the variable in HMM’s.","heading":"Possible States of the World’ is the possible values of","smartContent":{"content":"<div><!--block-->Possible States of the World’ is the possible values of the variable in HMM’s.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"df9bd72e-be38-4a02-ab82-9f2c6bd37efa","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.38Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.38Z"},"uniqueId":"19339ec4-3ab0-45ce-8b42-5c4a2846c512","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b261be"},"name":"While staying within the HMM network, the additional state variables can be added to a","heading":"While staying within the HMM network, the additional state variables","smartContent":{"content":"<div><!--block-->While staying within the HMM network, the additional state variables can be added to a temporal model.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"53e2e01a-a24a-43e9-aac3-f0dd59b686eb","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.395Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.395Z"},"uniqueId":"140fe3d9-36a7-4f3d-96b7-b93b782dc953","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26227"},"name":"In Artificial Intelligence, to extract the meaning from the group of sentences semantic analysis is","heading":"In Artificial Intelligence, to extract the meaning from the group","smartContent":{"content":"<div><!--block-->In Artificial Intelligence, to extract the meaning from the group of sentences semantic analysis is used.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"04065c5a-1710-4047-8f7c-3556b218c9c6","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.41Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.41Z"},"uniqueId":"58923fec-cd70-4fcb-895c-4d9de35d376a","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26290"},"name":"The process of determining the meaning of P*Q from P,Q and* is known as Compositional","heading":"The process of determining the meaning of P*Q from P,Q","smartContent":{"content":"<div><!--block-->The process of determining the meaning of P*Q from P,Q and* is known as Compositional Semantics.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4efaf7c2-f1a8-4106-9868-b9166f4af4ba","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.425Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.425Z"},"uniqueId":"da4df61b-16ba-4831-9a28-d5ff4b296fac","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b262f9"},"name":"In Propositional Logic, Logical Inference algorithm can be solved by using a) Logical Equivalence b)","heading":"In Propositional Logic, Logical Inference algorithm can be solved by","smartContent":{"content":"<div><!--block-->In Propositional Logic, Logical Inference algorithm can be solved by using<br>a)&nbsp; &nbsp; &nbsp; Logical Equivalence<br>b)&nbsp; &nbsp; &nbsp; Validity<br>c)&nbsp; &nbsp; &nbsp; &nbsp;Satisfying ability</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fd8f0755-1950-4981-9194-597b63d6f033","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.442Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.442Z"},"uniqueId":"eaec4f28-8c68-47b8-8ff7-def5a929f534","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26362"},"name":"‘Unification’ process makes different logical expressions identical. Lifted inferences require finding substitute which can make","heading":"‘Unification’ process makes different logical expressions identical. Lifted inferences require","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>‘Unification’ process makes different logical expressions identical.&nbsp; Lifted inferences require finding substitute which can make a different expression looks identical.&nbsp; This process is called unification.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bad98894-86fb-44b1-a562-6e319a47e339","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.458Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.458Z"},"uniqueId":"3fe09976-6576-4106-960d-3c6eb67d1065","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b263cb"},"name":"In ‘Unification and Lifting’ the algorithm that takes two sentences and returns a unifier is","heading":"In ‘Unification and Lifting’ the algorithm that takes two sentences","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>In ‘Unification and Lifting’ the algorithm that takes two sentences and returns a unifier is ‘Unify’ algorithm.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1b707d68-643e-439d-bec4-d973d949f52c","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.474Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.474Z"},"uniqueId":"0b480334-1c13-4a05-95bc-88ff37254b38","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26434"},"name":"State space search is the most straight forward approach for planning algorithm because it takes","heading":"State space search is the most straight forward approach for","smartContent":{"content":"<div><!--block--><strong><br></strong><br></div><div><!--block--><br>State space search is the most straight forward approach for planning algorithm because it takes account of everything for finding a solution.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74a1f244-b7cd-4a7f-a5d9-62c28f4f0d03","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.49Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.49Z"},"uniqueId":"a11f734a-1142-4534-a060-9d3fb4615a11","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b264fa"},"name":"Weak AI | Strong AI Narrow application, scope is very limited | Widely applied, scope","heading":"Weak AI | Strong AI Narrow application, scope is very","smartContent":{"content":"<div><!--block-->Weak AI |&nbsp;<strong>Strong AI</strong><br>Narrow application, scope is very limited |&nbsp;<strong>Widely applied, scope is vast</strong><br>Good at specific tasks |&nbsp;<strong>Incredible human- level intelligence</strong><br>Uses supervised and unsupervised learning |&nbsp;<strong>Uses clustering and association to process data.</strong><br>Eg. Siri, Alexa |&nbsp;<strong>Ex. Advanced Robotics</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74d2b43b-50a7-4837-882a-370d0838cc6f","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.519Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.519Z"},"uniqueId":"cae6cca3-dae3-4a53-bcc8-4f115c51bcba","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2657d"},"name":"AI is a field of computer science wherein the cognitive functions of human brain is","heading":"AI is a field of computer science wherein the cognitive","smartContent":{"content":"<div><!--block-->AI is a field of computer science wherein the cognitive functions of human brain is studied and tried to be replicated on a machine/system. Artificial Intelligence is today widely used for various applications like computer vision, speech recognition, decision-making, perception, reasoning, cognitive capabilities and so on.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"84e661e7-31eb-4211-b04e-58c7c2974165","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.535Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.535Z"},"uniqueId":"60cf8c2a-7d0d-4512-8519-e022b00f0dcc","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26600"},"name":"Natural language processing Chat bots Sentiment analysis Sales Prediction Self-driving cars Facial expression recognition Image","heading":"Natural language processing Chat bots Sentiment analysis Sales Prediction Self-driving","smartContent":{"content":"<ul><li><!--block-->Natural language processing</li><li><!--block-->Chat bots</li><li><!--block-->Sentiment analysis</li><li><!--block-->Sales Prediction</li><li><!--block-->Self-driving cars</li><li><!--block-->Facial expression recognition</li><li><!--block-->Image tagging</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7f47d3fc-6f13-4a9b-90ad-c3ccfdf3e2e1","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.551Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.551Z"},"uniqueId":"5b57f2b2-5c5e-4816-be29-9f4246a61b40","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26683"},"name":"Python R Lisp Prolog Java","heading":"Python R Lisp Prolog Java","smartContent":{"content":"<ul><li><!--block-->Python</li><li><!--block-->R</li><li><!--block-->Lisp</li><li><!--block-->Prolog</li><li><!--block-->Java</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"deb94d24-13ca-4f45-8fd3-440af79f77f2","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.567Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.567Z"},"uniqueId":"5f6c3e2a-f624-4cfa-b6ac-74db20933c6c","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26706"},"name":"Tower of Hanoi is a mathematical puzzle which shows how recursion might be utilized as","heading":"Tower of Hanoi is a mathematical puzzle which shows how","smartContent":{"content":"<div><!--block-->Tower of Hanoi is a mathematical puzzle which shows how recursion might be utilized as a device in building up an algorithm to take care of a specific problem. Using decision tree and Breath first search algorithm(BFS) we can solve Tower of Hanoi using AI.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ffdcb6e0-ae0c-4cf4-9ba9-19e01fad7dce","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.584Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.584Z"},"uniqueId":"8de4b7e7-2202-420a-96d0-155b130dffe8","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26789"},"name":"The Turing test is a method to test the machine’s ability to match the human","heading":"The Turing test is a method to test the machine’s","smartContent":{"content":"<div><!--block-->The Turing test is a method to test the machine’s ability to match the human level intelligence. A machine is used to challenge the human intelligence that when it passes the test, it is considered as intelligent. Yet a machine could be viewed as intelligent without sufficiently knowing about people to mimic a human.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c6d8fff3-59d3-4db5-a1e8-74aed19d5a4a","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.602Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.602Z"},"uniqueId":"7e290344-9cf0-403a-a266-81b51e086508","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2680c"},"name":"An artificial intelligence program that has expert-level knowledge about a specific area and knows how","heading":"An artificial intelligence program that has expert-level knowledge about a","smartContent":{"content":"<div><!--block-->An artificial intelligence program that has expert-level knowledge about a specific area and knows how to utilize its information to react appropriately. These systems have expertise to substitute a human expert. Their characteristics include –</div><ul><li><!--block-->High performance</li><li><!--block-->Adequate response time</li><li><!--block-->Reliability</li><li><!--block-->Understandable</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"665d23af-cc44-4905-87a4-ecbd8dac3eb9","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.618Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.618Z"},"uniqueId":"9d427b77-6e48-4915-922e-ad89c98ea767","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2688f"},"name":"Consistency Memory Diligence Logic Multiple expertise Ability to reason Fast response Unbiased in nature","heading":"Consistency Memory Diligence Logic Multiple expertise Ability to reason Fast","smartContent":{"content":"<ul><li><!--block-->Consistency</li><li><!--block-->Memory</li><li><!--block-->Diligence</li><li><!--block-->Logic</li><li><!--block-->Multiple expertise</li><li><!--block-->Ability to reason</li><li><!--block-->Fast response</li><li><!--block-->Unbiased in nature</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"855d8ae6-edb5-4904-8657-e1e65ab9a015","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.635Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.635Z"},"uniqueId":"59b5fad7-2fd3-41e5-bee7-1a2186d90535","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26912"},"name":"A* is a computer algorithm that is extensively used for the purpose of finding the","heading":"A* is a computer algorithm that is extensively used for","smartContent":{"content":"<div><!--block-->A* is a computer algorithm that is extensively used for the purpose of finding the path or traversing a graph in order to find the most optimal route between the various points called as the nodes.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5d1eebda-a6b3-4c0c-a56f-3d6b157c96a4","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.652Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.652Z"},"uniqueId":"7b5f5510-701d-45b9-8bf2-79c409ead21c","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26995"},"name":"Start with the root node, then proceed through neighboring nodes. Further, moves towards next level","heading":"Start with the root node, then proceed through neighboring nodes.","smartContent":{"content":"<div><!--block-->Start with the root node, then proceed through neighboring nodes. Further, moves towards next level of nodes. Till the arrangement is found, produces one tree at any given moment. As this pursuit can be executed utilizing FIFO(First in First Out) data structure. This strategy gives the shortest path to the solution.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e2281d94-136c-4266-8733-710487ec3f98","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.668Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.668Z"},"uniqueId":"968f4b40-2d80-4f0a-87b2-a761e28b69af","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26a18"},"name":"Depth first search is based on LIFO (Last In First Out). A recursion is implemented","heading":"Depth first search is based on LIFO (Last In First","smartContent":{"content":"<div><!--block-->Depth first search is based on LIFO (Last In First Out). A recursion is implemented with LIFO stack data structure. Thus, the nodes were different order than in BFS. The path is stored in each iteration from root to leaf node in linear with space requirement.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c85e8aff-b912-46fa-bafa-94ce98777c30","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.686Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.686Z"},"uniqueId":"ae9c6b5a-145f-47b2-9210-ec3fa8c7c8b4","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26a9b"},"name":"The search begins forward from the beginning state and in reverse from objective state. The","heading":"The search begins forward from the beginning state and in","smartContent":{"content":"<div><!--block-->The search begins forward from the beginning state and in reverse from objective state. The search meets to identify a common state. The initial state way is linked with the objective state in reverse way. Each search is done just up to half of the aggregate way.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bea3925d-6de8-450e-9288-d0b3255adb1b","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.708Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.708Z"},"uniqueId":"86384c4c-b671-40d0-82f6-483b5f41df32","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26b1e"},"name":"The repetitive search process of level 1, level 2 happens in this search. The search","heading":"The repetitive search process of level 1, level 2 happens","smartContent":{"content":"<div><!--block-->The repetitive search process of level 1, level 2 happens in this search. The search process continues till the solution is found. Nodes are generated till a single node is created. Stack of nodes are saved. The search ends once the solution is found.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"49d2fc05-cf35-4b97-acfd-8f79c97686d7","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.724Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.724Z"},"uniqueId":"0f7dfde1-45ec-4e7b-bbf7-b2cd870885e0","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26ba1"},"name":"The uniform cost search performs sorting in increasing cost of the path to a node.","heading":"The uniform cost search performs sorting in increasing cost of","smartContent":{"content":"<div><!--block-->The uniform cost search performs sorting in increasing cost of the path to a node. It expands the least cost node. It is identical to BFS if each iteration has same cost. It investigates ways in the expanding order of cost.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"13d82ad0-d6c6-41e0-9ae6-27fd8bb9e165","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.741Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.741Z"},"uniqueId":"6fd2cca3-cc53-4407-9cdd-cfb5cfa6ec32","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26c24"},"name":"AI system uses game theory for enhancement, it requires more than one participant which narrows","heading":"AI system uses game theory for enhancement, it requires more","smartContent":{"content":"<div><!--block-->AI system uses game theory for enhancement, it requires more than one participant which narrows the field quite a bit. The two fundamental roles:</div><ul><li><!--block--><strong>?Participant Design:</strong>&nbsp;Game theory is used to enhance the decision of a participant to get maximum utility.</li><li><!--block--><strong>?Mechanism Design:</strong>&nbsp;Inverse game theory, designs a game for a group of intelligent participants. Ex. Auctions.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d4b8de36-bc92-4b46-b885-b1497ee2588f","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.758Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.758Z"},"uniqueId":"e46dc92b-0c7b-4c7c-9fa5-e7fd30dfd109","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26ca7"},"name":"A search algorithm that tries to reduce the number of nodes that are searched by","heading":"A search algorithm that tries to reduce the number of","smartContent":{"content":"<div><!--block-->A search algorithm that tries to reduce the number of nodes that are searched by the minimax algorithm in the search tree. It can be applied to ‘n’ depth, prunes entire subtrees and leaves.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d0632dab-9ccf-4bd9-813f-35907cf0719a","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.774Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.774Z"},"uniqueId":"f8cac083-60b2-4d4b-9c8c-bcb29a124a26","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26d2a"},"name":"Fuzzy logic is the subset of AI, it is a way of encoding human learning","heading":"Fuzzy logic is the subset of AI, it is a","smartContent":{"content":"<div><!--block-->Fuzzy logic is the subset of AI, it is a way of encoding human learning for artificial processing. It is a form of many-valued logic. It is represented as IF-THEN rules.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"04b963c0-d90a-43a1-a1b1-ca8165a131b3","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.792Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.792Z"},"uniqueId":"19e6087f-f268-4ffb-b6e5-648cf3fa746a","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26dad"},"name":"Facial pattern recognition Air conditioners, washing machines, vacuum cleaners Antiskid braking systems, transmission systems Control","heading":"Facial pattern recognition Air conditioners, washing machines, vacuum cleaners Antiskid","smartContent":{"content":"<ul><li><!--block-->Facial pattern recognition</li><li><!--block-->Air conditioners, washing machines, vacuum cleaners</li><li><!--block-->Antiskid braking systems, transmission systems</li><li><!--block-->Control of subway systems and unmanned helicopters</li><li><!--block-->Weather forecasting systems</li><li><!--block-->Project risk assessment</li><li><!--block-->Medical diagnosis and treatment plans</li><li><!--block-->Stock trading</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"32f1ca8b-8433-417f-b4f9-874989292e3e","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.806Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.806Z"},"uniqueId":"5ccfe450-1dab-44cc-904b-0e88fd99096e","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26e30"},"name":"A problem has to be solved in a sequential approach to attain some goal, the","heading":"A problem has to be solved in a sequential approach","smartContent":{"content":"<div><!--block-->A problem has to be solved in a sequential approach to attain some goal, the partial-order plan specifies all actions that need to be taken, but specifies an ordering of the actions only when required.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ecb90e63-1ad4-4e99-acb3-0d8bebdc3d56","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.821Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.821Z"},"uniqueId":"de0e87eb-7d55-46ae-9634-099138c5e99c","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26eb3"},"name":"First-order Predicate logic is collection of formal systems, where each statement is divided into a","heading":"First-order Predicate logic is collection of formal systems, where each","smartContent":{"content":"<div><!--block-->First-order Predicate logic is collection of formal systems, where each statement is divided into a subject and a predicate. The predicate refers to only one subject and it can either modify or define the properties of the subject.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bec718d9-3c40-4d68-986e-42f76ef0e951","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.838Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.838Z"},"uniqueId":"3b480d13-e72a-4c10-b72c-c48b4958e78b","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26f36"},"name":"Inductive machine learning | Deductive machine learning | Abductive machine learning Learns from the set","heading":"Inductive machine learning | Deductive machine learning | Abductive machine","smartContent":{"content":"<div><!--block-->Inductive machine learning |&nbsp;<strong>Deductive machine learning</strong>&nbsp;| Abductive machine learning<br><br>Learns from the set of instances to draw conclusion |&nbsp;<strong>Derives conclusion and then improves conclusion based on previous decision</strong>&nbsp;| It is a deep learning technique where conclusions are derived based on various instances.<br><br>Statistical machine learning such as KNN (K-nearest neighbor) or SVM (Support Vector Machine) |&nbsp;<strong>Machine learning algorithm to deductive reasoning using a decision tree.</strong>&nbsp;| Deep neural network is used in abductive learning.<br><br>A ? B ? A ? B (Induction) |&nbsp;<strong>A ? (A ? B) ? B (Deduction)</strong>&nbsp;| B ? (A ? B) ? A (Abduction)</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0dd4fae3-6043-4c06-a8a6-b9222dcc9159","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.856Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.856Z"},"uniqueId":"694ff301-0653-423a-a0f9-e6a7d6465d96","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b26fb9"},"name":"Supervised Learning Unsupervised Learning Semi-supervised Learning Reinforcement Learning Transduction Learning to Learn","heading":"Supervised Learning Unsupervised Learning Semi-supervised Learning Reinforcement Learning Transduction Learning","smartContent":{"content":"<ul><li><!--block-->Supervised Learning</li><li><!--block-->Unsupervised Learning</li><li><!--block-->Semi-supervised Learning</li><li><!--block-->Reinforcement Learning</li><li><!--block-->Transduction</li><li><!--block-->Learning to Learn</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"030df9ea-61d2-4ec4-b88b-10100ead569c","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.872Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.872Z"},"uniqueId":"89c44cbe-2fa5-4ff4-890e-6e05788cf1cb","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2703c"},"name":"It is a subset of machine learning which is used to create an artificial multi-layer","heading":"It is a subset of machine learning which is used","smartContent":{"content":"<div><!--block-->It is a subset of machine learning which is used to create an artificial multi-layer neural network. They have self-learning capability based on previous instances and provides high accuracy.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"926cb066-1e7c-4af5-aa5e-4dd9e41df05d","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.889Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.889Z"},"uniqueId":"7383f9e1-4a9a-4d14-b941-59eeed7babe1","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b270bf"},"name":"| Supervised learning | Unsupervised learning | Reinforcement learning Definition | Training set has both","heading":"| Supervised learning | Unsupervised learning | Reinforcement learning Definition","smartContent":{"content":"<div><!--block--><br><br><br></div><div><!--block-->&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |&nbsp;<strong>Supervised learning</strong>&nbsp;| Unsupervised learning |&nbsp;<strong>Reinforcement learning</strong><br>Definition |&nbsp;<strong>Training set has both predictors and predictions.</strong>&nbsp;| Training set has only predictors in the data set. |&nbsp;<strong>They can establish state-of-art results on any task.<br></strong><br>Algorithm |&nbsp;<strong>Linear and logistic regression, Support vector machine, Naive Bayes</strong>&nbsp;| K-Means, Clustering algorithm, Dimensionality reduction algorithms |&nbsp;<strong>Q-Learning, State-Action-Reward-State-Action (SARSA), Deep Q Network (DQN)<br></strong><br>Uses |&nbsp;<strong>Image recognition, speech recognition, forecasting</strong>&nbsp;| Pre-process the data, pre-train supervised learning algorithms. |&nbsp;<strong>Warehouses, Inventory management, delivery management, Power system, Financial systems.</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b4f1f0d5-cd39-4718-8fe4-ce352ef44668","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.905Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.905Z"},"uniqueId":"65cf5be1-9203-474c-b3cb-3788c337aea4","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b27142"},"name":"| Parametric model | Non-parametric model Definition | Finite number of parameters to predict new","heading":"| Parametric model | Non-parametric model Definition | Finite number","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | Parametric model | Non-parametric model<br><em>Definition&nbsp;</em>|&nbsp;<strong>Finite number of parameters to predict new data</strong>&nbsp;| Unbounded number of parameters<br><br><em>Algorithm&nbsp;</em>|&nbsp;<strong>Logistic Regression, Linear Discriminant Analysis, Perceptron, Naive Bayes</strong>&nbsp;| k-Nearest Neighbors, Decision Trees like CART and C4.5, Support Vector Machines<br><br><em>Benefits&nbsp;</em>|&nbsp;<strong>Simple, Fast, Less data.</strong>&nbsp;| Flexibility, Power, Performance<br><br>Limitations |&nbsp;<strong>Constrained, Limited complexity, Poor fit&nbsp;</strong>| More data, slower, over fitting</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"51449f9e-10c7-47c9-a686-39a617eb1229","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.921Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.921Z"},"uniqueId":"0e84e1ec-7021-4d4e-855a-e03945a156c1","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b271c5"},"name":"Logistic regression Linear regression Decision Trees Support vector machines Naive Bayes etc.","heading":"Logistic regression Linear regression Decision Trees Support vector machines Naive","smartContent":{"content":"<ul><li><!--block-->Logistic regression</li><li><!--block-->Linear regression</li><li><!--block-->Decision Trees</li><li><!--block-->Support vector machines</li><li><!--block-->Naive Bayes etc.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"033f03e8-cbf2-46ff-8937-81272035ca97","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.937Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.937Z"},"uniqueId":"d2a21f3a-c563-438b-99f6-f832e640f094","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b27248"},"name":"Naive Bayes machine learning algorithm is a powerful algorithm for predictive modeling. It is a","heading":"Naive Bayes machine learning algorithm is a powerful algorithm for","smartContent":{"content":"<div><!--block-->Naive Bayes machine learning algorithm is a powerful algorithm for predictive modeling. It is a set of algorithms with common principle based on Bayes Theorem. The fundamental Naive Bayes assumption is that each feature makes independent and equal contribution to the outcome</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"18ec7362-f6d6-4f40-9357-f64ec9ed9be3","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.952Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.952Z"},"uniqueId":"af8445b1-7f8c-43e1-9f65-6d5301681ffc","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b272cb"},"name":"Perceptron is an algorithm which is able to simulate the ability of the brain to","heading":"Perceptron is an algorithm which is able to simulate the","smartContent":{"content":"<div><!--block-->Perceptron is an algorithm which is able to simulate the ability of the brain to understand and discard, it is for supervised classification of the input into one of several possible non-binary outputs.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f4d13013-3439-4c63-93f9-a6dd0afbcd30","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.969Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.969Z"},"uniqueId":"d8a5859b-4333-4f2e-932b-05343b3ff48a","__v":0}
{"_id":{"$oid":"668ef19c59d6bcc528b2734e"},"name":"Independent Component Analysis Principal Component Analysis Kernel Based Principal Component Analysis","heading":"Independent Component Analysis Principal Component Analysis Kernel Based Principal Component","smartContent":{"content":"<ul><li><!--block-->Independent Component Analysis</li><li><!--block-->Principal Component Analysis</li><li><!--block-->Kernel Based Principal Component Analysis</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5772f6fe-be66-49aa-9d45-d294dff7a095","order":0,"createdDate":{"$date":"2024-07-10T20:39:56.985Z"},"updatedDate":{"$date":"2024-07-10T20:39:56.985Z"},"uniqueId":"424dba93-dded-4894-a5f2-c9323a83b562","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b273d1"},"name":"kNN | kmeans Supervised | Unsupervised Classification algorithms | Clustering algorithms Minimal training model |","heading":"kNN | kmeans Supervised | Unsupervised Classification algorithms | Clustering","smartContent":{"content":"<div><!--block-->kNN |&nbsp;<strong>kmeans</strong><br>Supervised |&nbsp;<strong>Unsupervised<br></strong><br>Classification algorithms |&nbsp;<strong>Clustering algorithms<br></strong><br>Minimal training model |&nbsp;<strong>Exhaustive training model<br></strong><br>Used in classification and regression of known data |&nbsp;<strong>Used in Population demographics, Market segmentation, Social media trends, Anomaly detection.</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"44685c3a-2f10-4246-b671-557f6d495d2c","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.001Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.001Z"},"uniqueId":"d5d36259-8b4c-4adf-8dd5-1f801036a730","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27454"},"name":"Ensemble learning is a computational technique in which classifiers or experts are strategically formed and","heading":"Ensemble learning is a computational technique in which classifiers or","smartContent":{"content":"<div><!--block-->Ensemble learning is a computational technique in which classifiers or experts are strategically formed and combined. It is used to improve the classification, prediction, function approximation etc of a model.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"99d9f42e-a327-4bf3-8303-6044096539cb","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.018Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.018Z"},"uniqueId":"5fecfd85-2aa5-4801-a284-0dfcc93aa107","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b274d7"},"name":"Data collection Data preparation Choosing an appropriate model Training the data set Evaluation Parameter tuning","heading":"Data collection Data preparation Choosing an appropriate model Training the","smartContent":{"content":"<ul><li><!--block-->Data collection</li><li><!--block-->Data preparation</li><li><!--block-->Choosing an appropriate model</li><li><!--block-->Training the data set</li><li><!--block-->Evaluation</li><li><!--block-->Parameter tuning</li><li><!--block-->Predictions</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"0022b15b-225d-4f0a-88d0-6a3474e8e84b","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.034Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.034Z"},"uniqueId":"b0475df3-5a1f-4fac-b731-b5e9011d0ba5","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2755a"},"name":"A hash table is a data structure that is used to produce an associative array","heading":"A hash table is a data structure that is used","smartContent":{"content":"<div><!--block-->A hash table is a data structure that is used to produce an associative array which are mostly used for database indexing.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"cb549840-193e-48c1-aeaa-4c0ff28952ae","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.048Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.048Z"},"uniqueId":"4c378bb6-7f50-4997-b58a-ee1e35d9bc5a","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b275dd"},"name":"Regularization comes to picture when the model is either overfit or underfit. It is basically","heading":"Regularization comes to picture when the model is either overfit","smartContent":{"content":"<div><!--block-->Regularization comes to picture when the model is either overfit or underfit. It is basically used to minimize the error in the dataset. A new piece of information is fit in the data set to avoid fitting issues.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"22dc3200-a2ca-42d4-b9e2-761fa534aa8f","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.063Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.063Z"},"uniqueId":"33198cc8-c4be-4218-b20e-bfc2c8a083dc","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27660"},"name":"Data Acquisition Ground Truth Acquisition Cross Validation Technique Query Type Scoring Metric Significance Test","heading":"Data Acquisition Ground Truth Acquisition Cross Validation Technique Query Type","smartContent":{"content":"<ul><li><!--block-->Data Acquisition</li><li><!--block-->Ground Truth Acquisition</li><li><!--block-->Cross Validation Technique</li><li><!--block-->Query Type</li><li><!--block-->Scoring Metric</li><li><!--block-->Significance Test</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3b0cf031-91bc-42ff-bf9d-e9918e540bc0","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.078Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.078Z"},"uniqueId":"b92404be-0fde-43ae-83fa-3432ddc0ba75","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b276e3"},"name":"Model accuracy is just a subset of model performance. Model accuracy is based on model","heading":"Model accuracy is just a subset of model performance. Model","smartContent":{"content":"<div><!--block-->Model accuracy is just a subset of model performance. Model accuracy is based on model performance of algorithm,&nbsp;<br><br>model performance is based on the datasets we feed as input to the algorithm.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5ddb8d10-3676-4707-b594-e32eae686555","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.093Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.093Z"},"uniqueId":"40a47605-7118-49e6-8ab6-f627425be89f","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27766"},"name":"It is the weighted average of precision and recall. It considers both false positive and","heading":"It is the weighted average of precision and recall. It","smartContent":{"content":"<div><!--block-->It is the weighted average of precision and recall. It considers both false positive and false negative into account. It is used to measure the model’s performance.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7438f86c-7b21-4caa-af3c-47f1a280728b","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.107Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.107Z"},"uniqueId":"b2948c64-f2b3-4aad-ab97-7b0c61813f4d","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b277e9"},"name":"Image, speech, face detection Bioinformatics Market segmentation Manufacturing and Inventory management Fraud detection etc.","heading":"Image, speech, face detection Bioinformatics Market segmentation Manufacturing and Inventory","smartContent":{"content":"<ul><li><!--block-->Image, speech, face detection</li><li><!--block-->Bioinformatics</li><li><!--block-->Market segmentation</li><li><!--block-->Manufacturing and Inventory management</li><li><!--block-->Fraud detection etc.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3643ffd7-77cf-48db-ae01-9ed6daeccfab","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.124Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.124Z"},"uniqueId":"f1f3f956-e79b-45af-a146-bc048384d217","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2786c"},"name":"Lasso Regression method. Random Forest, plot variable importance chart. Linear regression.","heading":"Lasso Regression method. Random Forest, plot variable importance chart. Linear","smartContent":{"content":"<ol><li><!--block-->Lasso Regression method.</li><li><!--block-->Random Forest, plot variable importance chart.</li><li><!--block-->Linear regression.</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c42f9df7-9754-41e9-b5cc-22e3ffff5638","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.138Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.138Z"},"uniqueId":"040e95c9-ac1a-4493-a5a8-62cfdef72864","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b278ef"},"name":"A recognition system is an information filtering system that is used to predict user preference","heading":"A recognition system is an information filtering system that is","smartContent":{"content":"<div><!--block-->A recognition system is an information filtering system that is used to predict user preference based on choice patterns followed by the user while browsing/using the system.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bd0c74ea-93f1-421a-aaad-ee11c4e23487","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.154Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.154Z"},"uniqueId":"c2e13514-b693-4b51-a99a-41d3a66acad4","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27972"},"name":"Dimensionality reduction is the process of reducing the number of random variables. You can reduce","heading":"Dimensionality reduction is the process of reducing the number of","smartContent":{"content":"<div><!--block-->Dimensionality reduction is the process of reducing the number of random variables. You can reduce dimensionality by missing values ratio, low variance filter, high correlation filter, random forest, PCA etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"da74cf33-f56c-4d26-9ddd-b18bf898b3ee","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.171Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.171Z"},"uniqueId":"b24bd357-84d5-404d-95b5-27dc82df21e7","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b279f5"},"name":"Sliding-window methods Recurrent sliding windows, Hidden Markov models Maximum entropy Markov models Conditional random fields","heading":"Sliding-window methods Recurrent sliding windows, Hidden Markov models Maximum entropy","smartContent":{"content":"<ul><li><!--block-->Sliding-window methods</li><li><!--block-->Recurrent sliding windows,</li><li><!--block-->Hidden Markov models</li><li><!--block-->Maximum entropy Markov models</li><li><!--block-->Conditional random fields</li><li><!--block-->Graph transformer networks</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e810045b-bd8b-4afa-b985-36c4bcdc53f0","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.188Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.188Z"},"uniqueId":"30ad8538-588c-4981-88c6-c6f38aa11b90","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27a78"},"name":"Requires less formal statistical training Ability to detect nonlinear relationship between variables Detects all possible","heading":"Requires less formal statistical training Ability to detect nonlinear relationship","smartContent":{"content":"<ul><li><!--block-->Requires less formal statistical training</li><li><!--block-->Ability to detect nonlinear relationship between variables</li><li><!--block-->Detects all possible interaction between predictor variables.</li><li><!--block-->Availability of multiple training algorithm</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ed0275f1-0bee-4657-bcb5-aa4e5554e5c4","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.203Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.203Z"},"uniqueId":"98b1b246-a586-4b92-b24c-6880c234c19b","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27afb"},"name":"Bias error is used to measure how much on an average the predicted values vary","heading":"Bias error is used to measure how much on an","smartContent":{"content":"<div><!--block-->Bias error is used to measure how much on an average the predicted values vary from the actual value. In case a high bias error occurs, we have an under-performing model.<br><br></div><div><!--block--><br>Variance is used to measure how are the prediction made on same observation different from each other. A high variance model will over-fit the dataset and perform badly on any observation.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9f38de48-c537-4312-8056-c26cdc08bbb6","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.218Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.218Z"},"uniqueId":"9b8e15dd-438d-44df-a5b9-52cef4c593e1","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27b7e"},"name":"TensorFlow is an open source machine learning library. It is fast, flexible and a low-level","heading":"TensorFlow is an open source machine learning library. It is","smartContent":{"content":"<div><!--block-->TensorFlow is an open source machine learning library. It is fast, flexible and a low-level toolkit for doing complex algorithm and offers the users customizability to build experimental learning architectures and to work on them to produce desired outputs.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e3ec2db1-6d1b-4c3c-97ac-af7b6b784543","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.234Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.234Z"},"uniqueId":"f0fc491a-bd96-4e34-a681-8d08341293da","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27c01"},"name":"Tensorflow : installation Guide CPU : pip install tensorflow-cpu GPU : pip install tensorflow-gpu","heading":"Tensorflow : installation Guide CPU : pip install tensorflow-cpu GPU","smartContent":{"content":"<div><!--block--><strong>Tensorflow : installation Guide</strong></div><div><!--block--><br>CPU :&nbsp;</div><pre><!--block-->pip install tensorflow-cpu</pre><div><!--block--><br></div><div><!--block--><br>GPU :&nbsp;</div><pre><!--block-->pip install tensorflow-gpu</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7775e7a5-b99e-48c8-a579-84457a8ce7bf","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.249Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.249Z"},"uniqueId":"3a7005c1-b878-4f79-bd8a-05fb45a19846","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27c84"},"name":"Constants Variables Placeholder Graph Session","heading":"Constants Variables Placeholder Graph Session","smartContent":{"content":"<ol><li><!--block-->Constants</li><li><!--block-->Variables</li><li><!--block-->Placeholder</li><li><!--block-->Graph</li><li><!--block-->Session</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ce799b2a-bdaf-4928-9978-d8a1688bb1ab","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.264Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.264Z"},"uniqueId":"17c16ba6-5c1e-4776-b91e-bbf41e744c8e","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27d07"},"name":"Cost function is a scalar functions which Quantifies the error factor of the Neural Network.","heading":"Cost function is a scalar functions which Quantifies the error","smartContent":{"content":"<div><!--block-->Cost function is a scalar functions which Quantifies the error factor of the Neural Network. Lower the cost function better the Neural network. Eg: MNIST Data set to classify the image, input image is digit 2 and the Neural network wrongly predicts it to be 3</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fbe9cfd5-c173-4edd-8064-9aa39d7b3049","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.279Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.279Z"},"uniqueId":"634eb587-1a43-4060-9cab-b82f05c1d2b3","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27d8a"},"name":"Linear Neuron Binary Threshold Neuron Stochastic Binary Neuron Sigmoid Neuron Tanh function Rectified Linear Unit","heading":"Linear Neuron Binary Threshold Neuron Stochastic Binary Neuron Sigmoid Neuron","smartContent":{"content":"<ol><li><!--block-->Linear Neuron</li><li><!--block-->Binary Threshold Neuron</li><li><!--block-->Stochastic Binary Neuron</li><li><!--block-->Sigmoid Neuron</li><li><!--block-->Tanh function</li><li><!--block-->Rectified Linear Unit (ReLU)</li></ol><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"660b5cb1-af90-4b98-8daa-102a070a1240","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.293Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.293Z"},"uniqueId":"5dd224bf-1728-4e5b-b7af-87ceeca0b9e7","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27e0d"},"name":"Learning Rate : Learning rate is how fast the network learns new beliefs. Momentum :","heading":"Learning Rate : Learning rate is how fast the network","smartContent":{"content":"<ul><li><!--block--><strong>Learning Rate :</strong>&nbsp;Learning rate is how fast the network learns new beliefs.</li><li><!--block--><strong>Momentum :</strong>&nbsp;Parameter which helps to come out of local minima and smoothen the jumps while gradient decent.</li><li><!--block--><strong>Epoch :</strong>&nbsp;Epoch is the complete once forward and backward propagation to correct its weights. As epoch increases loss or error decreases as it learns better and better.</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"b4efb7d9-a07c-40de-8a02-27286f2a975d","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.308Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.308Z"},"uniqueId":"2e747802-b4ac-4290-905b-30e0c452ce93","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27e90"},"name":"As we add more and more hidden layers, back propagation becomes less and less useful","heading":"As we add more and more hidden layers, back propagation","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->As we add more and more hidden layers, back propagation becomes less and less useful in passing information to the lower layers. In effect, as information is passed back, the gradients begin to vanish and become small relative to the weights of the networks.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9bae601d-0b20-4a05-8604-948e0e1fac74","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.324Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.324Z"},"uniqueId":"b70bca19-5bad-4978-9a32-a29c820a939f","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27f13"},"name":"Dropout is a simple way to prevent a Neural network from overfitting. Dropping out some","heading":"Dropout is a simple way to prevent a Neural network","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Dropout is a simple way to prevent a Neural network from overfitting. Dropping out some of the units in neural network. In Reproduction nature produces offspring’s by combining distinct genes rather than strengthening co-adapting them.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e58744f9-a5ea-4b56-85f7-1829556b5543","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.339Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.339Z"},"uniqueId":"5d238f79-06a9-43d7-8540-b1a7a0a768b9","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b27f96"},"name":"Long Short Term Memory – are explicitly designed to address the long term dependency problem,","heading":"Long Short Term Memory – are explicitly designed to address","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Long Short Term Memory – are explicitly designed to address the long term dependency problem, by maintaining a state what to remember and what to forget.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"adba3cbf-19ca-4155-894b-13c9221ce732","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.354Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.354Z"},"uniqueId":"67d95270-c63e-4bae-b883-009386a3e548","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28019"},"name":"Gates (forget, Memory, update & Read) tanh(x) (values between -1 to 1) Sigmoid(x) (values between","heading":"Gates (forget, Memory, update & Read) tanh(x) (values between -1","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Gates (forget, Memory, update &amp; Read)<br><br></div><div><!--block--><br>tanh(x) (values between -1 to 1)<br><br></div><div><!--block--><br>Sigmoid(x) (values between 0 to 1)</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"dd07ecee-57e3-45b5-b16e-a06f8919ace0","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.37Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.37Z"},"uniqueId":"4b16a509-a47e-4bc5-b18b-497f07c0f921","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2809c"},"name":"LSTM: Long Short Term Memory GRU: Gated Recurrent Unit End to End Network Memory Network","heading":"LSTM: Long Short Term Memory GRU: Gated Recurrent Unit End","smartContent":{"content":"<div><!--block--><br><br></div><ul><li><!--block-->LSTM: Long Short Term Memory</li><li><!--block-->GRU: Gated Recurrent Unit</li><li><!--block-->End to End Network</li><li><!--block-->Memory Network</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5a8a1522-a9cb-4460-a201-97a2ce40f3d7","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.386Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.386Z"},"uniqueId":"4dd5c19f-d9c7-46c2-b128-15a74bf0bf57","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2811f"},"name":"Auto encoder is basically used to learn a compressed form of given data. Few applications","heading":"Auto encoder is basically used to learn a compressed form","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Auto encoder is basically used to learn a compressed form of given data. Few applications include-<br><br></div><ol><li><!--block-->Data denoising</li><li><!--block-->Dimensionality reduction</li><li><!--block-->Image reconstruction</li><li><!--block-->Image colorization</li></ol>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"77247885-a67f-4d1c-bec9-d2a5bf314157","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.402Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.402Z"},"uniqueId":"2450d53a-4ec9-4296-add9-52833e393d89","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b281a2"},"name":"Components of GAN – Generator Discriminator Deployment steps – Train the model Validate & Finalize","heading":"Components of GAN – Generator Discriminator Deployment steps – Train","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Components of GAN –<br><br></div><ul><li><!--block-->Generator</li><li><!--block-->Discriminator</li></ul><div><!--block--><br>Deployment steps –<br><br></div><ul><li><!--block-->Train the model</li><li><!--block-->Validate &amp; Finalize the model</li><li><!--block-->Save the model</li><li><!--block-->Load the saved model for next prediction.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ecac55d4-e01d-413f-b9e1-8117510ff5a8","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.417Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.417Z"},"uniqueId":"78d4eaac-3349-40f3-adb4-c0c4de555b13","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28225"},"name":"Gradient descent is an optimization algorithm that is used to find the coefficients of parameters","heading":"Gradient descent is an optimization algorithm that is used to","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->Gradient descent is an optimization algorithm that is used to find the coefficients of parameters that is used to reduce the cost function to minimum.<br><strong>Step 1 :</strong>&nbsp;Allocate the weights(x,y) with random values and calculate Error (SSE)</div><div><!--block--><br><strong>Step 2 :</strong>&nbsp;Calculate the gradient i.e. variation in SSE when the weights (x,y) are changed by a very small value. This helps us move the values of x &amp; y in the direction in which SSE is minimized.</div><div><!--block--><br><strong>Step 3 :</strong>&nbsp;Adjust the weights with the gradients to move towards the optimal values where SSE is minimized</div><div><!--block--><br><strong>Step 4:</strong>&nbsp;Use the new weights for prediction and to calculate the new SSE</div><div><!--block--><br><strong>Step 5 :</strong>&nbsp;Repeat steps 2 and 3 till further adjustments to weights doesn’t significantly reduce the Error</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"49f60246-bd84-4da5-91b5-10fbf7d78015","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.431Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.431Z"},"uniqueId":"bb2de349-40cc-41b3-a017-b16a84a849e3","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b282a8"},"name":"Syntax – Class Session It is a class for running TensorFlow operations. The environment is","heading":"Syntax – Class Session It is a class for running","smartContent":{"content":"<div><!--block--><br><br><br></div><div><!--block--><strong>Syntax – Class Session<br></strong><br>It is a class for running TensorFlow operations. The environment is encapsulated in the session object wherein the operation objects are executed and Tensor objects are evaluated.<br><br></div><pre><!--block--># Build a graph.\n\nx = tf.constant(2.0)\n\ny = tf.constant(5.0)\n\nz = x * y\n\n# Launch the graph in a session.\n\nsess = tf.Session()\n\n# Evaluate the tensor `z`.\n\nprint(sess.run(z))</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8cc8d237-28a5-4d24-b70f-2e360b1eed30","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.45Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.45Z"},"uniqueId":"4bf91bca-f09d-43b6-8cea-b8707e01c5cf","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2832b"},"name":"TensorFlow “cluster” is a set of “tasks” that participate in the distributed execution of a","heading":"TensorFlow “cluster” is a set of “tasks” that participate in","smartContent":{"content":"<div><!--block-->TensorFlow “cluster” is a set of “tasks” that participate in the distributed execution of a TensorFlow graph. Each task is associated with a TensorFlow “server”, which contains a “master” that can be used to create sessions, and a “worker” that executes operations in the graph. A cluster can also be divided into one or more “jobs”, where each job contains one or more tasks.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a6fb45cc-85a0-40ab-adc9-901cc10e736f","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.466Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.466Z"},"uniqueId":"38f06ee9-1d97-445e-8db9-0c5be4095bf5","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b283ae"},"name":"To use HDFS with TensorFlow, we need to change the file paths to read and","heading":"To use HDFS with TensorFlow, we need to change the","smartContent":{"content":"<div><!--block-->To use HDFS with TensorFlow, we need to change the file paths to read and write data to an HDFS path. For example:<br><br></div><pre><!--block-->filename_queue = tf.train.string_input_producer([\n\n“hdfs://namenode:8020/path/to/file1.csv”,\n\n“hdfs://namenode:8020/path/to/file2.csv”,\n\n])</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e391c6a2-8684-4574-8beb-c99ddd3113b3","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.484Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.484Z"},"uniqueId":"614acdcc-190f-4bbb-9d38-5803feb8bab5","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28431"},"name":"The intermediate tensors that are created as part of a call to Session.run() will be","heading":"The intermediate tensors that are created as part of a","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->The intermediate tensors that are created as part of a call to Session.run() will be freed at or before the end of the call. Sessions can own resources, few classes like tf.Variable, tf.QueueBase, and tf.ReaderBase and they use a significant amount of memory. These resources (and the associated memory) are released when the session is closed, by calling tf.Session.close.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"fe3d182c-5cb3-4113-a025-f3d313e67a7c","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.501Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.501Z"},"uniqueId":"16754901-c299-491f-938f-57488a97c5f9","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b284b4"},"name":"When you first run the tf.Variable.initializer operation for that variable in a session it is","heading":"When you first run the tf.Variable.initializer operation for that variable","smartContent":{"content":"<div><!--block--><br><br></div><div><!--block-->When you first run the tf.Variable.initializer operation for that variable in a session it is started. It is destroyed when that tf.Session.close.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"65d2521d-0566-41c7-a182-9d38bd5cde1c","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.518Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.518Z"},"uniqueId":"d3c40184-02c7-4d9d-bfdd-5a53342ed28d","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28517"},"name":"Advantages | Disadvantages It can be used to foil security attacks | It creates massive","heading":"Advantages | Disadvantages It can be used to foil security","smartContent":{"content":"<div><!--block-->Advantages |&nbsp;<strong>Disadvantages<br></strong><br>It can be used to foil security attacks |&nbsp;<strong>It creates massive security issues<br></strong><br>To plug the bugs and loopholes |&nbsp;<strong>Get unauthorized system access<br></strong><br>It helps to prevent data theft |&nbsp;<strong>Stealing private information<br></strong><br>Hacking prevents malicious attacks |&nbsp;<strong>Violating privacy regulations</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"bbb2a78d-496a-4b6b-95e4-c7050d4a2cde","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.545Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.545Z"},"uniqueId":"bc7102d3-71de-4e08-88e6-57488bfd682b","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28558"},"name":"Asymmetric encryption | Symmetric encryption Asymmetric encryption uses different keys for encryption and decryption. |","heading":"Asymmetric encryption | Symmetric encryption Asymmetric encryption uses different keys","smartContent":{"content":"<div><!--block-->Asymmetric encryption |&nbsp;<strong>Symmetric encryption</strong><br><br>Asymmetric encryption uses different keys for encryption and decryption. |&nbsp;<strong>Symmetric encryption uses the same key for both encryption and decryption.</strong><br><br>Asymmetric on the other hand is more secure but slow. Hence, a hybrid approach should be preferred. |&nbsp;<strong>Symmetric is usually much faster but the key needs to be transferred over an unencrypted channel.</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5964d73f-3282-4c20-94e4-1df46d2c4d42","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.559Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.559Z"},"uniqueId":"f1763045-d61b-488a-aa1f-c306136d64ae","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28599"},"name":"ARP poisoning is a type of network attack that can be resolved through these techniques:","heading":"ARP poisoning is a type of network attack that can","smartContent":{"content":"<div><!--block-->ARP poisoning is a type of network attack that can be resolved through these techniques:<br><br></div><div><!--block--><br>Using Packet filtering: Packet filters can filter out &amp; block packets with clashing source address data.<br><br></div><div><!--block--><br>Keeping away from trust relationship: Organizations ought to develop a protocol that depends on trust relationship as little as they can.<br><br></div><div><!--block--><br>Utilize ARP spoofing software: Some programs assess and certify information before it is transmitted and blocks any information that is spoofed.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7b9f2519-e030-4f20-928f-0a9d88bd1935","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.574Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.574Z"},"uniqueId":"da805f37-4f2d-4879-ad09-900bb00f9fdb","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b285da"},"name":"Footprinting is nothing but accumulating and revealing as much as data about the target network","heading":"Footprinting is nothing but accumulating and revealing as much as","smartContent":{"content":"<div><!--block-->Footprinting is nothing but accumulating and revealing as much as data about the target network before gaining access into any network.<br><br><strong>Open Source Footprinting :&nbsp;</strong>It will search for the contact data of administrators that will be utilized for guessing password in Social Engineering</div><div><!--block--><br><strong>Network Enumeration :</strong>&nbsp;The hacker attempts to distinguish the domain names and the network blocks of the target network</div><div><!--block--><br><strong>Scanning :</strong>&nbsp;After the network is known, the second step is to spy the active IP addresses on the network. For distinguishing active IP addresses (ICMP) Internet Control Message Protocol is a functioning IP addresses</div><div><!--block--><br><strong>Stack Fingerprinting :</strong>&nbsp;the final stage of foot printing step can be performed, once the hosts and port have been mapped by examining the network, this is called Stack fingerprinting.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"87865397-783e-4a35-8a63-76e588c77899","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.589Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.589Z"},"uniqueId":"341c5e05-fde4-4c95-8baa-7af8507112d1","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2861b"},"name":"Denial of Service, is a malicious attack on network that is executed by flooding the","heading":"Denial of Service, is a malicious attack on network that","smartContent":{"content":"<div><!--block-->Denial of Service, is a malicious attack on network that is executed by flooding the system with useless traffic. Despite the fact that DOS does not cause any data breach or security breach, it can cost the site proprietor a lot of cash and time.</div><ul><li><!--block-->Buffer Overflow Attacks</li><li><!--block-->SYN Attack</li><li><!--block-->Teardrop Attack</li><li><!--block-->Smurf Attack</li><li><!--block-->Viruses</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"07c27bef-79f6-4e9b-92ad-22df71c68cca","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.604Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.604Z"},"uniqueId":"d2a57c68-e2e7-4cda-a5c8-80254db52eae","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2865c"},"name":"Pharming : In this strategy the attacker compromises the DNS (Domain Name System) servers or","heading":"Pharming : In this strategy the attacker compromises the DNS","smartContent":{"content":"<div><!--block-->Pharming : In this strategy the attacker compromises the DNS (Domain Name System) servers or on the user PC with the goal that traffic is directed towards malicious site<br><br></div><div><!--block--><br>Defacement : In this strategy the attacker replaces the firm’s site with an alternate page. It contains the hacker’s name, images and may even incorporate messages and background music.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d71ebfd3-64d1-45af-8f50-9cf9ad086731","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.619Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.619Z"},"uniqueId":"5f224d88-7ec9-40ff-8bbc-1c5d3bc978c1","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2869d"},"name":"Cowpattyis implemented on an offline dictionary attack against WPA/WPA2 networks utilizing PSK-based verification (e.g. WPA-Personal).","heading":"Cowpattyis implemented on an offline dictionary attack against WPA/WPA2 networks","smartContent":{"content":"<div><!--block-->Cowpattyis implemented on an offline dictionary attack against WPA/WPA2 networks utilizing PSK-based verification (e.g. WPA-Personal). Cowpatty can execute an enhanced attack if a recomputed PMK document is accessible for the SSID that is being assessed.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"01be7bfa-99b1-46b1-bb0b-bccbbe1735c5","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.633Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.633Z"},"uniqueId":"b90a4a31-b991-4427-b219-27c5d7556be7","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b286de"},"name":"Network Enumeration is the revelation of hosts/gadgets on a network, they tend to utilize obvious","heading":"Network Enumeration is the revelation of hosts/gadgets on a network,","smartContent":{"content":"<div><!--block-->Network Enumeration is the revelation of hosts/gadgets on a network, they tend to utilize obvious disclosure protocols, for example, ICMP and SNMP to gather data, they may likewise check different ports on remote hosts for looking for surely known services trying to further recognize the function of a remote host.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4fe1efeb-79c0-4f94-9937-6d47d4a2c31e","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.648Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.648Z"},"uniqueId":"a00de964-da5f-43bd-976d-6fa83ccd33ed","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b2871f"},"name":"Phishing and spoofing are totally different beneath the surface. One downloads malware to your PC","heading":"Phishing and spoofing are totally different beneath the surface. One","smartContent":{"content":"<div><!--block-->Phishing and spoofing are totally different beneath the surface. One downloads malware to your PC or network, and the other part tricks you into surrendering sensitive monetary data to a cyber-crook. Phishing is a technique for recovery, while spoofing is a method for delivery.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"17c37de3-fa45-4643-8ab1-16d177790fcd","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.662Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.662Z"},"uniqueId":"7e8d040d-509a-40b8-bd8b-e28a456c2eae","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28760"},"name":"Most broadly utilized scripting language for Hackers is Python. Python has some very critical highlights","heading":"Most broadly utilized scripting language for Hackers is Python. Python","smartContent":{"content":"<div><!--block-->Most broadly utilized scripting language for Hackers is Python. Python has some very critical highlights that make it especially valuable for hacking, most importantly, it has some pre-assembled libraries that give some intense functionality.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2df7375a-16de-44ce-849c-fa726e12b920","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.678Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.678Z"},"uniqueId":"c3feb9f2-6180-4b88-bc72-9a188d03645f","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b287a1"},"name":"An ethical hacker is a computer system and networking master who systematically endeavours to infiltrate","heading":"An ethical hacker is a computer system and networking master","smartContent":{"content":"<div><!--block-->An ethical hacker is a computer system and networking master who systematically endeavours to infiltrate a PC framework or network for the benefit of its owners to find security vulnerabilities that a malicious hacker could potentially exploit.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"76c7e734-d332-4d1f-a760-350e61ff9728","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.693Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.693Z"},"uniqueId":"a21b7e97-a2ad-4144-886f-74fb073f3ea3","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b287e2"},"name":"System sniffing includes utilizing sniffer tools that empower real- time monitoring and analysis of data","heading":"System sniffing includes utilizing sniffer tools that empower real- time","smartContent":{"content":"<div><!--block-->System sniffing includes utilizing sniffer tools that empower real- time monitoring and analysis of data streaming over PC systems. Sniffers can be utilized for various purposes, regardless of whether it’s to steal data or manage systems.<br><br>Network sniffing is utilized for ethical and unethical purposes. System administrators utilize these as system monitoring and analysis tool to analyse and avoid network related issues, for example, traffic bottlenecks. Cyber criminals utilize these devices for untrustworthy purposes, for example, character usurpation, email, delicate information hijacking etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c2f8b19d-5eab-42ee-80e6-f37b12118d85","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.706Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.706Z"},"uniqueId":"f8ec2e55-8eb6-4230-a79f-d258b27de640","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28823"},"name":"Encryption | Hashing Encryption is reversible | Hashing is irreversible Encryption ensures confidentiality | Hashing","heading":"Encryption | Hashing Encryption is reversible | Hashing is irreversible","smartContent":{"content":"<div><!--block-->Encryption |&nbsp;<strong>Hashing</strong><br>Encryption is reversible |&nbsp;<strong>Hashing is irreversible</strong><br>Encryption ensures confidentiality |&nbsp;<strong>Hashing ensures Integrity</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"443e7c27-5a89-450c-aab9-c7b21ef90f77","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.718Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.718Z"},"uniqueId":"1365398c-b0f9-430b-8739-27de0b99c716","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28864"},"name":"Confidentiality : Keeping the information secret. Integrity : Keeping the information unaltered. Availability : Information","heading":"Confidentiality : Keeping the information secret. Integrity : Keeping the","smartContent":{"content":"<ul><li><!--block--><strong>Confidentiality :&nbsp;</strong>Keeping the information secret.</li><li><!--block--><strong>Integrity :&nbsp;</strong>Keeping the information unaltered.</li><li><!--block--><strong>Availability :&nbsp;</strong>Information is available to the authorised parties at all times.</li></ul><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"770464f9-f2ee-4435-a96d-a0da89db9ad3","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.734Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.734Z"},"uniqueId":"e92d59f1-2b27-4482-8eef-b12773e16a34","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b288a5"},"name":"1. Vulnerability Assessment | Penetration testing 2. Vulnerability Assessment is an approach used to find","heading":"1. Vulnerability Assessment | Penetration testing 2. Vulnerability Assessment is","smartContent":{"content":"<div><!--block-->1. Vulnerability Assessment |&nbsp;<strong>Penetration testing</strong><br>2. Vulnerability Assessment is an approach used to find flaws in an application/network |&nbsp;<strong>It is the practice of finding exploitable vulnerabilities like a real attacker will do</strong><br>3. It is like travelling on the surface |&nbsp;<strong>It is digging for gold.</strong></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ed03e9d7-c367-492a-bba4-9455877003c4","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.749Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.749Z"},"uniqueId":"26656c0c-be22-4cdb-bc83-dae658950741","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b288e6"},"name":"A firewall could be a device that allows/blocks traffic as per outlined set of rules.","heading":"A firewall could be a device that allows/blocks traffic as","smartContent":{"content":"<div><!--block-->A firewall could be a device that allows/blocks traffic as per outlined set of rules. These are placed on the boundary of trusted and untrusted networks.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"4e81a3ea-507a-4d0c-a00f-aa2f5d1c3990","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.763Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.763Z"},"uniqueId":"4a92686e-ef79-4894-be5a-ec5367a6e949","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28927"},"name":"Data leak is nothing but data knowledge getting out of the organization in an unauthorized","heading":"Data leak is nothing but data knowledge getting out of","smartContent":{"content":"<div><!--block-->Data leak is nothing but data knowledge getting out of the organization in an unauthorized manner. Data will get leaked through numerous ways in which – emails, prints, laptops obtaining lost, unauthorized transfer of data to public portals, removable drives, pictures etc. There are varied controls which may be placed to make sure that the info doesn’t get leaked, many controls will be limiting upload on web websites, following an internal encryption answer, limiting the emails to the interior network, restriction on printing confidential data etc.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d53a5246-52ee-442c-bc89-9d7b96bc1eff","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.776Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.776Z"},"uniqueId":"9a6a4473-3524-4be1-bb85-35ef2c8aea72","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28968"},"name":"Hacking, or targeting on a machine, should have the following 5 phases : Surveillance :","heading":"Hacking, or targeting on a machine, should have the following","smartContent":{"content":"<div><!--block-->Hacking, or targeting on a machine, should have the following 5 phases :</div><div><!--block--><br><strong>Surveillance :&nbsp;</strong>This is the principal stage where the hacker endeavours to gather as much data as possible about the target<br><br><strong>Scanning :&nbsp;</strong>This stage includes exploiting the data accumulated amid Surveillance stage and utilizing it to inspect the casualty. The hacker can utilize computerized devices amid the scanning stage which can incorporate port scanners, mappers and vulnerability scanners.<br><br><strong>Getting access :&nbsp;</strong>This is where the real hacking happens. The hacker attempts to exploit data found amid the surveillance and Scanning stage to get access.<br><br><strong>Access Maintenance :&nbsp;</strong>Once access is gained, hackers need to keep that access for future exploitation and assaults by securing their exclusive access with backdoors, rootkits and Trojans.<br><br><strong>Covering tracks :&nbsp;</strong>Once hackers have possessed the capacity to pick up and maintain access, they cover their tracks and to keep away from getting detected. This likewise enables them to proceed with the utilization of the hacked framework and keep themselves away from legitimate activities.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"e4f8004f-0c70-4311-b46e-cdc54e820b24","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.792Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.792Z"},"uniqueId":"0c3fa249-00f7-4969-892c-31ba410b6b42","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b289a9"},"name":"There are several moral hacking tools out there within the marketing for different purposes, they","heading":"There are several moral hacking tools out there within the","smartContent":{"content":"<div><!--block-->There are several moral hacking tools out there within the marketing for different purposes, they are:<br><br></div><ul><li><!--block--><strong>NMAP –&nbsp;</strong>NMAP stands for Network plotter. It’s associate degree open source tool that’s used wide for network discovery and security auditing.</li><li><!--block--><strong>Metasploit –&nbsp;</strong>Metasploit is one amongst the most powerful exploit tool to conduct basic penetration tests.</li><li><!--block--><strong>Burp Suit –&nbsp;</strong>Burp Suite could be a widespread platform that’s widely used for playing security testing of internet applications.</li><li><!--block--><strong>Angry IP Scanner –&nbsp;</strong>Angry information processing scanner could be a light-weight, cross-platform information processing address and port scanner.</li><li><!--block--><strong>Cain &amp; Abel –&nbsp;</strong>Cain &amp; Abel is a password recovery tool for Microsoft operational Systems.</li><li><!--block--><strong>Ettercap –&nbsp;</strong>Ettercap stands for local area network Capture. It is used for Man-in-the-Middle attack using a network security tool.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"481fc5f7-7b8a-4e94-89ea-6399e4d4d835","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.807Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.807Z"},"uniqueId":"6740dfc6-fa05-4f95-91ca-1af8e91a1de0","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b289ea"},"name":"MAC Flooding is a kind of a technique wherever the protection of given network switch","heading":"MAC Flooding is a kind of a technique wherever the","smartContent":{"content":"<div><!--block-->MAC Flooding is a kind of a technique wherever the protection of given network switch is compromised. In MAC flooding the hacker floods the switch with sizable amounts of frames, than what a switch can handle. This makes switch behaving as a hub and transmits all packetsto all the ports existing. Taking the advantage of this the attacker can attempt to send his packet within the network to steal the sensitive information.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8d3d3fb7-c978-4ef6-b433-5c956c52d33f","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.821Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.821Z"},"uniqueId":"3d1ede32-9bb8-479c-a95a-1b2637cf02bf","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28a2b"},"name":"By adapting following methodology you’ll be able to stop your web site from obtaining hacked","heading":"By adapting following methodology you’ll be able to stop your","smartContent":{"content":"<div><!--block-->By adapting following methodology you’ll be able to stop your web site from obtaining hacked</div><ul><li><!--block-->Using Firewall : Firewall may be accustomed drop traffic from suspicious information processing address if attack may be an easy DOS</li><li><!--block-->Encrypting the Cookies : Cookie or Session poisoning may be prevented by encrypting the content of the cookies, associating cookies with the consumer information processing address and temporal arrangement out the cookies once it slow</li><li><!--block-->Validating and confirmative user input : This approach is prepared to stop the type tempering by confirmative and verifying the user input before processing it</li><li><!--block-->Header Sanitizing and validation : This technique is beneficial against cross website scripting or XSS, this method includes verifying and sanitizing headers, parameters passed via the address, type parameters and hidden values to cut back XSS attacks.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"19dbb3ec-ddfc-4ff0-af79-6e29d5f47914","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.835Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.835Z"},"uniqueId":"1f00ad3c-fbdc-4e61-80fe-48f0a086e5cb","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28a6c"},"name":"Burp Suite is an integrated platform used for attacking net applications. It contains all the","heading":"Burp Suite is an integrated platform used for attacking net","smartContent":{"content":"<div><!--block-->Burp Suite is an integrated platform used for attacking net applications. It contains all the tools a hacker would need for attacking any application. a number of these functionalities are</div><ul><li><!--block-->Proxy</li><li><!--block-->Spider</li><li><!--block-->Scanner</li><li><!--block-->Intruder</li><li><!--block-->Repeater</li><li><!--block-->Decoder</li><li><!--block-->Comparer</li><li><!--block-->Sequencer</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"76e99ba2-801d-4dbc-a245-c905718b2248","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.847Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.847Z"},"uniqueId":"42322687-b9d3-443e-ab6f-b66236dc86c8","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28aad"},"name":"If the application doesn’t sanitize the user input then the SQL injection happens. Thus a","heading":"If the application doesn’t sanitize the user input then the","smartContent":{"content":"<div><!--block-->If the application doesn’t sanitize the user input then the SQL injection happens. Thus a malicious hacker would inject SQL question to gain unauthorized access and execute administration operations on the database. SQL injections may be classified as follows:</div><ul><li><!--block-->Error-based SQL injection</li><li><!--block-->Blind SQL injection</li><li><!--block-->Time-based SQL injection</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f8d9f5ab-fd01-43da-8996-da376fdd9d06","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.862Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.862Z"},"uniqueId":"0f4fd898-60fa-4471-956d-3da33757321c","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28aee"},"name":"DOS attacks involve flooding servers, systems or networks with traffic to cause over-consumption of victim","heading":"DOS attacks involve flooding servers, systems or networks with traffic","smartContent":{"content":"<div><!--block-->DOS attacks involve flooding servers, systems or networks with traffic to cause over-consumption of victim resources. This makes it troublesome or not possible for legitimate users to access or use targeted sites.<br><br>Common DOS attacks include:</div><ul><li><!--block-->Buffer overflow attacks</li><li><!--block-->ICMP flood</li><li><!--block-->SYN flood</li><li><!--block-->Teardrop attack</li><li><!--block-->Smurf attack</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"3b8b9b88-6420-4c8b-a5c5-326cf18c69de","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.877Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.877Z"},"uniqueId":"6e8cb910-b1e5-4b9d-a7c2-980366a6432d","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28b2f"},"name":"It’s best, actually, to master all 5 of Python, C/C++, Java, Perl, and LISP. Besides","heading":"It’s best, actually, to master all 5 of Python, C/C++,","smartContent":{"content":"<div><!--block-->It’s best, actually, to master all 5 of Python, C/C++, Java, Perl, and LISP. Besides being the foremost vital hacking languages, they represent&nbsp; totally different approaches to programming, and each of it can educate you in valuable ways.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"5230ce8d-604a-4d0a-8f96-7461d1709061","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.891Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.891Z"},"uniqueId":"22da93fc-0df9-4d58-8d38-0f0efdd175ba","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28b70"},"name":"A spoofing attack is when a malicious party impersonates another device or user on a","heading":"A spoofing attack is when a malicious party impersonates another","smartContent":{"content":"<div><!--block-->A spoofing attack is when a malicious party impersonates another device or user on a network so as to launch attacks against network hosts, steal data, unfold malware or bypass access controls. Different Spoofing attacks are deployed by malicious parties to achieve this.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"9fd397e9-4ede-4cb3-9a90-bebee7ad81f4","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.906Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.906Z"},"uniqueId":"fb55ed42-650d-489e-8bfe-462ddeb09c23","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28bb1"},"name":"ARP Spoofing Attack. DNS Spoofing Attack. IP Spoofing Attack.","heading":"ARP Spoofing Attack. DNS Spoofing Attack. IP Spoofing Attack.","smartContent":{"content":"<ul><li><!--block-->ARP Spoofing Attack.</li><li><!--block-->DNS Spoofing Attack.</li><li><!--block-->IP Spoofing Attack.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"88705dfb-df2a-466a-8121-56665db613d4","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.92Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.92Z"},"uniqueId":"75acc124-9d0a-45b5-a264-f5f8b5bf96f3","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28bf2"},"name":"Passive reconnaissance is nothing but to gain info regarding targeted computers and networks while not","heading":"Passive reconnaissance is nothing but to gain info regarding targeted","smartContent":{"content":"<div><!--block-->Passive reconnaissance is nothing but to gain info regarding targeted computers and networks while not actively participating with the systems. In active reconnaissance, in distinction, the attacker engages with the target system, usually conducting a port scan to find any open ports.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"76c65029-0f5b-4330-a583-167df46839ce","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.934Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.934Z"},"uniqueId":"7259c1b5-e32c-495a-bdbf-5c911099ad33","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28c33"},"name":"All networks across devices are assigned a number which is unique, which is termed as","heading":"All networks across devices are assigned a number which is","smartContent":{"content":"<div><!--block-->All networks across devices are assigned a number which is unique, which is termed as MAC or Machine Access Control address. This address may be a personal mail box on the net. The network router identifies it. the amount may be modified anytime.All devices get their distinctive information processing address so they can be located easily&nbsp; on a given laptop and network. Whoever is aware of your distinctive information processing address will contact you through it.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f77ebd07-4069-450c-bf6b-4dd2c7ece60d","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.948Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.948Z"},"uniqueId":"280601f6-e1d1-49a2-88f2-3d59cd612334","__v":0}
{"_id":{"$oid":"668ef19d59d6bcc528b28c74"},"name":"SSL is identity verification, not hard encryption. it’s designed to be able to prove that","heading":"SSL is identity verification, not hard encryption. it’s designed to","smartContent":{"content":"<div><!--block-->SSL is identity verification, not hard encryption. it’s designed to be able to prove that the person you’re engaging on the other side is who they say they are. SSL and TLS are each used by almost everyone&nbsp; online, however because of this it is a huge target and is mainly attacked through its implementation (The Heartbleed bug for example) and its far-famed methodology.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"2c91e2d2-d4a5-47ca-80ec-3c79f42a71b9","order":0,"createdDate":{"$date":"2024-07-10T20:39:57.963Z"},"updatedDate":{"$date":"2024-07-10T20:39:57.963Z"},"uniqueId":"fbff47b5-b84e-4d66-afdf-6a5a2272cf29","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28c92"},"name":"dir /b > print.txt The command above prints only the names of files to the","heading":"dir /b > print.txt The command above prints only the","smartContent":{"content":"<pre><!--block-->dir /b &gt; print.txt</pre><div><!--block--><br>The command above prints only the names of files to the&nbsp;<strong>print.txt</strong>&nbsp;file and not the information of the files in the current directory.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"1caa13f9-fbaa-4c45-a35e-41955828e61d","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.01Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.01Z"},"uniqueId":"27a71c05-e6e9-4c7c-9ed4-ac848543e378","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28c9d"},"name":"dir /s /b > print.txt The command above prints only the name of all files","heading":"dir /s /b > print.txt The command above prints only","smartContent":{"content":"<pre><!--block-->dir /s /b &gt; print.txt</pre><div><!--block--><br>The command above prints only the name of all files in the current directory and any subdirectories to the&nbsp;<strong>print.txt</strong>&nbsp;file.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"8a959648-35fc-4cff-aa3e-79b7c63e1fd6","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.022Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.022Z"},"uniqueId":"2eedae25-4157-4e18-bf26-b567d20b6da4","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28ca8"},"name":"I was wondering how you change the title of the Command Prompt window. A little","heading":"I was wondering how you change the title of the","smartContent":{"content":"<div><!--block-->I was wondering how you change the title of the Command Prompt window.&nbsp; A little searching found that Scott Hanselman had answered this question&nbsp;<a href=\"http://www.hanselman.com/blog/SettingTheTitleOfTheDOSCommandPromptFromABatchFile.aspx\">here</a>.&nbsp; All you have to do is type \"title &lt;your text&gt;\" and press Enter to change the title of your Command Prompt window.&nbsp; It should look like the following:<br><br></div><div><!--block--><a href=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/8322.command_prompt_title.png\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:343,&quot;url&quot;:&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/8322.command_prompt_title.png&quot;,&quot;width&quot;:677}\" data-trix-content-type=\"image\" data-trix-id=\"1949\" contenteditable=\"false\"><img src=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/8322.command_prompt_title.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/1949/2267/https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/8322.command_prompt_title.png\" width=\"677\" height=\"343\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></a><br><br></div><div><!--block-->Note that if you are running&nbsp;<a href=\"http://sourceforge.net/projects/console/\">Console2</a>&nbsp;to host your command prompt window, it works just fine.<br><br></div><div><!--block--><a href=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5432.console2_prompt_title.png\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:356,&quot;url&quot;:&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5432.console2_prompt_title.png&quot;,&quot;width&quot;:629}\" data-trix-content-type=\"image\" data-trix-id=\"1995\" contenteditable=\"false\"><img src=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5432.console2_prompt_title.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/1995/2322/https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5432.console2_prompt_title.png\" width=\"629\" height=\"356\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></a><br><br></div><div><!--block-->Finally, if you want to do the same thing in PowerShell, just execute the following command:<br><br></div><div><!--block-->[System.Console]::Title = \"Running as User12345\"<br><br></div><div><!--block-->Note that you have to have the quotes around the text to which the title should be set; they may be single or double quotes.<br><br></div><div><!--block--><a href=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5807.powershell_prompt_title.png\"><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:360,&quot;url&quot;:&quot;https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5807.powershell_prompt_title.png&quot;,&quot;width&quot;:569}\" data-trix-content-type=\"image\" data-trix-id=\"2065\" contenteditable=\"false\"><img src=\"https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5807.powershell_prompt_title.png\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/2065/2377/https://msdnshared.blob.core.windows.net/media/MSDNBlogsFS/prod.evol.blogs.msdn.com/CommunityServer.Blogs.Components.WeblogFiles/00/00/01/53/45/5807.powershell_prompt_title.png\" width=\"569\" height=\"360\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></a><br><br></div><div><!--block--><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"175aa08f-ae1d-427d-b1df-dfd2ae94fd3f","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.034Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.034Z"},"uniqueId":"68b3f3e1-02c7-41c4-8be3-c7b5d2e7fa19","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28cb5"},"name":"Suppose below is our JSON Array :- [ { \"firstName\" : \"abc\", \"lastName\" : \"xyz\"","heading":"Suppose below is our JSON Array :- [ { \"firstName\"","smartContent":{"content":"<div><!--block-->Suppose below is our JSON Array :-<br><br></div><pre><!--block-->[ \n    {\n        \"firstName\" : \"abc\",\n        \"lastName\" : \"xyz\"\n    }, \n    {\n        \"firstName\" : \"pqr\",\n        \"lastName\" : \"str\"\n    } \n]</pre><div><!--block-->We have stored this in one String object. Now we want to convert it into Java object and store it in List of java object. e.g. In Student object.<br><br><strong>If we are asking Jackson to parse a StudentList</strong>. we will tell it to parse a List (of students) instead. Since List is generic you will typically use a&nbsp;<a href=\"https://fasterxml.github.io/jackson-core/javadoc/2.9/com/fasterxml/jackson/core/type/TypeReference.html\">TypeReference</a><br><br><br></div><pre><!--block-->List&lt;Student&gt; participantJsonList \n= mapper.readValue(jsonString, new TypeReference&lt;List&lt;Student&gt;&gt;(){});</pre><div><!--block--><br></div><div><!--block--><br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ea0560d8-11be-43a0-97a5-3e91e7d3384d","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.056Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.056Z"},"uniqueId":"7dabf752-dca9-47ed-931b-78370295c6ca","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28cb7"},"name":"Problem statement :- ----------------------- Suppose My java servlet returns a json string in this way:","heading":"Problem statement :- ----------------------- Suppose My java servlet returns a","smartContent":{"content":"<div><!--block--><strong>Problem statement :-&nbsp;<br>-----------------------</strong><br>Suppose My java servlet returns a json string in this way:<br><br></div><pre><!--block-->Gson gson = new Gson();     \nString lista = gson.toJson(utenti);System.out.println(lista);\nrequest.setAttribute(\"lista\", lista);\nrequest.getRequestDispatcher(\"GestioneUtenti.jsp\").forward(request, response);</pre><div><!--block-->now, in the jsp page I want to have my arrayList again. I try to do this:<br><br></div><pre><!--block-->&lt;%\r\nString lista = (String)request.getAttribute(\"lista\");\r\nGson gson = new Gson();\r\nArrayList&lt;Utente&gt; users = gson.fromJson(lista, TypeToken.get(new ArrayList&lt;Utente&gt;().getClass()).getType());        \r\nout.println(users.get(0).getUsername());\r\n%&gt;</pre><div><!--block--><br><strong>Solution:-<br>--------------------</strong><br><strong>If we are using google Gson API,<br></strong><br></div><pre><!--block-->String lista = (String)request.getAttribute(\"lista\");\r\nGson gson = new Gson();                         \r\nType listType = new TypeToken&lt;ArrayList&lt;Utente&gt;&gt;() {}.getType();\r\nArrayList&lt;Utente&gt; users = new Gson().fromJson(lista, listType);</pre><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ea0560d8-11be-43a0-97a5-3e91e7d3384d","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.061Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.061Z"},"uniqueId":"8954efce-4e59-4fa3-96c4-8b241fc01d08","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28cc7"},"name":"Cascading Style Sheets (CSS) is a style sheet language. It is used for describing the","heading":"Cascading Style Sheets (CSS) is a style sheet language. It","smartContent":{"content":"Cascading Style Sheets (CSS) is a style sheet language. It is used for describing the presentation of a document written in a markup language like HTML.\n\nCSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.\n\nIn addition to HTML, other markup languages support the use of CSS including XHTML, plain XML, SVG, and XUL.\n\nCSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation and formatting of documents written in HTML or XML. It controls the layout, colors, fonts, and overall visual appearance of web pages. CSS allows you to separate the content of your web pages (HTML) from the visual design, making it easier to maintain and update the look of a website. \n\nKey features include:\n\n- **Selectors**: Targets HTML elements to apply styles.\n- **Properties and Values**: Defines specific styles like color, font-size, margin, padding, etc.\n- **Responsive Design**: Allows the design to adapt to different screen sizes and devices using media queries.\n- **Flexbox and Grid Layout**: Powerful layout modules for creating complex designs.\n\nExample:\n```css\nbody {\n  background-color: #f0f0f0;\n  font-family: Arial, sans-serif;\n}\n\nh1 {\n  color: #333;\n  text-align: center;\n}\n\np {\n  font-size: 16px;\n  line-height: 1.5;\n}\n```\nIn this example:\n- `body` selector applies a background color and font to the entire page.\n- `h1` selector styles all `h1` elements with a specific color and text alignment.\n- `p` selector styles paragraph text with a specific font size and line spacing.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"067e13e4-effa-44b9-9d8c-2eab9da11578","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.089Z"},"updatedDate":{"$date":"2024-08-27T17:53:25.896Z"},"uniqueId":"ca4b5f6a-2f42-44d5-ad7c-e5b09950a246","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28d2a"},"name":"There are lots of new features which were added in Java 8. Here is the","heading":"There are lots of new features which were added in","smartContent":{"content":"Here is a list of major features introduced in Java 8:\n\n1. **Lambda Expressions**\n2. **Functional Interfaces**\n3. **Streams API**\n5. **Optional Class**\n4. **Default Methods**\n6. **Method References**\n14. **Collectors in Streams API**\n15. **ForEach Method in Iterable Interface**\n16. **Improvements to Concurrency API (e.g., `CompletableFuture`)**\n11. **Parallel Array Sorting**\n17. **Removal of Permanent Generation (PermGen) in JVM**\n19. **Metaspace (replacement for PermGen)**\n7. **Date and Time API (java.time package)**\n8. **Nashorn JavaScript Engine**\n9. **Type Annotations**\n10. **Repeating Annotations**\n12. **Statically Linked Method Handles**\n13. **Base64 Encoding and Decoding**\n18. **JDBC 4.2**\n20. **Unsigned Integer Arithmetic**\n\nThese features brought functional programming paradigms to Java, enhanced the language's capabilities, and improved the standard library significantly.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"031c26d7-7bfe-4fe7-94ca-f1de701b3d29","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.115Z"},"updatedDate":{"$date":"2024-08-31T06:33:39.793Z"},"uniqueId":"969f0e89-26ab-4092-a9af-1e080dabc4e3","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28d6b"},"name":"More compact code Less boiler plate code More readable and reusable code More testable code","heading":"More compact code Less boiler plate code More readable and","smartContent":{"content":"<ul><li><!--block-->More compact code</li><li><!--block-->Less boiler plate code</li><li><!--block-->More readable and reusable code</li><li><!--block-->More testable code</li><li><!--block-->Parallel operations</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c7c163cf-4b8d-467f-9c67-924efbde35a6","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.129Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.129Z"},"uniqueId":"72956f4e-6e2e-44ea-8872-e1104aaadc05","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28dac"},"name":"Lambda expression is anonymous function which have set of parameters and a lambda (->) and","heading":"Lambda expression is anonymous function which have set of parameters","smartContent":{"content":"A **lambda expression** in Java 8 is a concise way to represent an anonymous function (a function without a name) that can be passed around as an object. Lambda expressions allow you to write functional-style code that is both compact and expressive, especially when working with collections or other APIs that involve operations like filtering, mapping, and reducing.\n\n### Basic Syntax of a Lambda Expression\nThe basic syntax of a lambda expression is as follows:\n\n```java\n(parameters) -> expression\n```\n\nOr, if the lambda body contains more than one statement:\n\n```java\n(parameters) -> { \n    // body \n}\n```\n\n### Key Components of Lambda Expressions:\n- **Parameters**: The input parameters for the lambda, similar to method parameters.\n- **Arrow (`->`)**: Separates the parameters from the body of the lambda.\n- **Body**: The code to be executed, which can be a single expression or a block of statements.\n\n### Examples\n\n1. **Lambda Expression with a Single Parameter**:\n\n```java\nList<String> names = Arrays.asList(\"John\", \"Jane\", \"Jack\", \"Jill\");\n\nnames.forEach(name -> System.out.println(name));\n```\n\nIn this example, `name -> System.out.println(name)` is a lambda expression that takes a single parameter `name` and prints it.\n\n2. **Lambda Expression with Multiple Parameters**:\n\n```java\nBinaryOperator<Integer> add = (a, b) -> a + b;\nint sum = add.apply(10, 20);\nSystem.out.println(sum); // Outputs: 30\n```\n\nHere, `(a, b) -> a + b` is a lambda expression that takes two parameters `a` and `b` and returns their sum.\n\n3. **Lambda Expression with No Parameters**:\n\n```java\nRunnable r = () -> System.out.println(\"Hello, World!\");\nnew Thread(r).start();\n```\n\nIn this example, `() -> System.out.println(\"Hello, World!\")` is a lambda expression with no parameters.\n\n### Use Cases of Lambda Expressions\n\n1. **Functional Interfaces**:\n   - Lambda expressions are primarily used to implement functional interfaces, which are interfaces with a single abstract method (SAM).\n   - Example of a functional interface: `Runnable`, `Callable`, `Comparator`, `Function`, `Predicate`, etc.\n\n2. **Collections API**:\n   - Lambdas are often used with the Collections API to perform operations like sorting, filtering, or mapping.\n   - Example:\n   ```java\n   List<String> names = Arrays.asList(\"John\", \"Jane\", \"Jack\", \"Jill\");\n   List<String> filteredNames = names.stream()\n                                     .filter(name -> name.startsWith(\"J\"))\n                                     .collect(Collectors.toList());\n   ```\n\n3. **Event Handling**:\n   - Lambdas simplify event handling code in GUI applications.\n   - Example:\n   ```java\n   button.setOnAction(e -> System.out.println(\"Button clicked!\"));\n   ```\n\n### Advantages of Lambda Expressions:\n- **Conciseness**: They reduce the verbosity of anonymous classes and boilerplate code.\n- **Readability**: They make code more readable, especially when performing operations on collections or passing behaviors.\n- **Efficiency**: The use of lambda expressions can lead to better optimization by the compiler and runtime.\n\nIn summary, lambda expressions in Java 8 provide a way to treat functionality as a method argument or to create small, concise anonymous methods, making Java code more expressive and functional-style.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"366be6de-8569-47e0-a261-b2c6349731c8","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.144Z"},"updatedDate":{"$date":"2024-08-26T05:03:22.358Z"},"uniqueId":"656778d9-3482-4fb1-88f3-2a623c927af7","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28ded"},"name":"So we can divide structure of Lambda expression to three parts: ? ? 1. Argument","heading":"So we can divide structure of Lambda expression to three","smartContent":{"content":"<div><!--block-->So we can divide structure of Lambda expression to three parts:</div><div><!--block--><a href=\"https://www.java2blog.com/wp-content/uploads/2017/09/lambdaExpressionExample-4.jpg\"><strong><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span><figure class=\"attachment attachment-preview\" data-trix-attachment=\"{&quot;contentType&quot;:&quot;image&quot;,&quot;height&quot;:166,&quot;url&quot;:&quot;https://1.bp.blogspot.com/-J2_b1ChO_rA/U6XhoM86irI/AAAAAAAADFw/BjxLjcZGo4o/s1600/lambdaExpressionExample.jpg&quot;,&quot;width&quot;:412}\" data-trix-content-type=\"image\" data-trix-id=\"11135\" contenteditable=\"false\"><img src=\"https://1.bp.blogspot.com/-J2_b1ChO_rA/U6XhoM86irI/AAAAAAAADFw/BjxLjcZGo4o/s1600/lambdaExpressionExample.jpg\" data-trix-mutable=\"true\" data-trix-store-key=\"imageElement/11135/11136/https://1.bp.blogspot.com/-J2_b1ChO_rA/U6XhoM86irI/AAAAAAAADFw/BjxLjcZGo4o/s1600/lambdaExpressionExample.jpg\" width=\"412\" height=\"166\"><figcaption class=\"caption\"></figcaption></figure><span data-trix-cursor-target=\"true\" data-trix-serialize=\"false\">?</span></strong></a></div><div><!--block--><strong>1. Argument list or parameters</strong></div><div><!--block-->Lambda expression can have zero or more arguments.</div><pre><!--block-->()-&gt;{System.out.println(\"Hello\")}; <em>//Without argument, will print hello </em>\n(<strong>int</strong> a)-&gt;{System.out.println(a)} <em>//; One argument, will print value of a</em>\n(<strong>int</strong> a,<strong>int</strong> b)-&gt; {a+b};<em>//two argument, will return sum of these two integers</em>\n </pre><div><!--block--><br>You can choose to not declare type of arguments as it can be inferred from context.</div><pre><!--block-->(a,b)-&gt;{a+b};<em>//two argument, will return sum of these two numbers</em></pre><div><!--block--><br>you can not declare one argument’s type and do not declare type for other argument.</div><pre><!--block-->(int a,b)-&gt;{a+b};//Compilation error</pre><div><!--block--><br>When there is a single parameter, if its type is inferred, it is not mandatory to use parentheses</div><pre><!--block-->a-&gt;{System.out.println(a)}; <em>// Will print value of number a</em></pre><div><!--block--><br><strong>2. Array token (-&gt;)</strong></div><div><!--block--><br><br></div><div><!--block--><strong>3. Body</strong></div><ul><li><!--block-->Body can have expression or statements.</li><li><!--block-->If there is only one statement in body,curly brace is not needed and return type of the anonymous function is same as of&nbsp; body expression</li><li><!--block-->If there are more than one statements, then it should be in curly braces and return type of anonymous function is same as value return from code block, void if nothing is returned.</li></ul>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"ad7676a5-93b1-4fa6-9540-112a2932904e","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.159Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.159Z"},"uniqueId":"d751658f-5558-47cb-9691-dd33a2991f6f","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28e2e"},"name":"Functional interfaces are those interfaces which can have only one abstract method.It can have static","heading":"Functional interfaces are those interfaces which can have only one","smartContent":{"content":"A **functional interface** in Java is an interface that has exactly one abstract method. These interfaces can contain multiple default or static methods, but they must have only one abstract method. Functional interfaces are the foundation of functional programming in Java, particularly with lambda expressions and method references.\n\n### Characteristics of Functional Interfaces:\n- **Single Abstract Method (SAM)**: The defining characteristic of a functional interface is that it has one and only one abstract method. This is often referred to as a SAM (Single Abstract Method) interface.\n- **Default and Static Methods**: A functional interface can have any number of default or static methods, but only one abstract method.\n- **`@FunctionalInterface` Annotation**: Java provides the `@FunctionalInterface` annotation, which is optional but highly recommended. This annotation is used to mark an interface as functional, and the compiler will enforce that the interface has only one abstract method. If you accidentally add another abstract method, the compiler will produce an error.\n\n### Example of a Functional Interface:\n\n```java\n@FunctionalInterface\ninterface MyFunctionalInterface {\n    void execute();\n\n    // Default method\n    default void defaultMethod() {\n        System.out.println(\"This is a default method.\");\n    }\n\n    // Static method\n    static void staticMethod() {\n        System.out.println(\"This is a static method.\");\n    }\n}\n```\n\n### Common Functional Interfaces in Java 8:\n\nJava 8 introduced several built-in functional interfaces in the `java.util.function` package:\n\n1. **`Function<T, R>`**:\n   - Represents a function that takes one argument of type `T` and returns a result of type `R`.\n   - Abstract method: `R apply(T t);`\n   - Example:\n     ```java\n     Function<Integer, String> intToString = num -> \"Number: \" + num;\n     ```\n\n2. **`Predicate<T>`**:\n   - Represents a predicate (boolean-valued function) that takes one argument of type `T`.\n   - Abstract method: `boolean test(T t);`\n   - Example:\n     ```java\n     Predicate<String> isEmpty = str -> str.isEmpty();\n     ```\n\n3. **`Consumer<T>`**:\n   - Represents an operation that takes an argument of type `T` and returns no result (void).\n   - Abstract method: `void accept(T t);`\n   - Example:\n     ```java\n     Consumer<String> print = s -> System.out.println(s);\n     ```\n\n4. **`Supplier<T>`**:\n   - Represents a supplier of results, providing a result of type `T` without taking any arguments.\n   - Abstract method: `T get();`\n   - Example:\n     ```java\n     Supplier<Double> randomValue = () -> Math.random();\n     ```\n\n5. **`BinaryOperator<T>`**:\n   - Represents an operation upon two operands of the same type, producing a result of the same type.\n   - Abstract method: `T apply(T t1, T t2);`\n   - Example:\n     ```java\n     BinaryOperator<Integer> sum = (a, b) -> a + b;\n     ```\n\n6. **`BiFunction<T, U, R>`**:\n   - Represents a function that takes two arguments of types `T` and `U`, and returns a result of type `R`.\n   - Abstract method: `R apply(T t, U u);`\n   - Example:\n     ```java\n     BiFunction<Integer, Integer, String> addAndConvert = (a, b) -> \"Sum: \" + (a + b);\n     ```\n\n### Usage with Lambda Expressions:\nFunctional interfaces are most commonly used with lambda expressions. A lambda expression provides the implementation of the single abstract method of a functional interface.\n\nExample:\n\n```java\n// Using a lambda expression to implement the Runnable interface\nRunnable task = () -> System.out.println(\"Task is running\");\nnew Thread(task).start();\n```\n\n### Custom Functional Interface Example:\n\n```java\n@FunctionalInterface\ninterface Calculator {\n    int calculate(int a, int b);\n}\n\n// Using the Calculator interface with a lambda expression\npublic class Main {\n    public static void main(String[] args) {\n        Calculator addition = (a, b) -> a + b;\n        int result = addition.calculate(5, 3);\n        System.out.println(\"Result: \" + result); // Outputs: Result: 8\n    }\n}\n```\n\n### Summary:\nFunctional interfaces in Java are crucial for enabling functional programming patterns, allowing you to pass behavior as arguments, use lambda expressions, and create more expressive and compact code. The `@FunctionalInterface` annotation ensures that your interface remains functional, contributing to cleaner and more maintainable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"301b7633-2eab-43c9-a7cf-bc8ca011c6cc","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.173Z"},"updatedDate":{"$date":"2024-08-26T05:20:51.446Z"},"uniqueId":"a68d5670-9f7c-4b26-b0d2-b04233cd4ec5","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28e6f"},"name":"Lambda expressions can only be applied to abstract method of functional interface. For example Runnable","heading":"Lambda expressions can only be applied to abstract method of","smartContent":{"content":"<div><!--block-->Lambda expressions can only be applied to abstract method of functional interface.<br><strong>For example<br></strong><br></div><div><!--block-->Runnable has only one abstract method called run, so it can be used as below:<br><br></div><pre><!--block-->// Using lambda expression\r\nThread t1=new Thread(\r\n()-&gt;System.out.println(\"In Run method\")\r\n);\r\n </pre><div><!--block--><br>Here we are using Thread constructor which takes Runnable as parameter. As you can see we did not specify any function name here, as Runnable has only one abstract method, java will implicitly create anonymous Runnable and execute run method.<br>It will be as good as below code.<br><br></div><pre><!--block-->Thread t1=new Thread(new Runnable() { \r\n   @Override\r\n   public void run() {\r\n    System.out.println(\"In Run method\");\r\n   }\r\n  });</pre><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"ec6f2a22-7c22-4062-ae5f-a8145655eb35","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.188Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.188Z"},"uniqueId":"e32d2479-cdc8-4a2f-84d5-6ab02b04edca","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28eb0"},"name":"Yes, you can create your own functional interface. Java can implicitly identify functional interface but","heading":"Yes, you can create your own functional interface. Java can","smartContent":{"content":"<div><!--block-->Yes, you can create your own functional interface. Java can implicitly identify functional interface but you can also annotate it with @FunctionalInterface.<br>Example:<br>Create interface named \"Printable\" as below</div><pre><!--block--><strong>package</strong> org.arpit.java2blog;\n \npublic <strong>interface</strong> Printable {\n \n    <strong>void</strong> print();\n    <strong>default</strong> <strong>void</strong> printColor()\n    {\n        System.out.println(\"Printing Color copy\");\n    }\n}</pre><div><!--block--><br>Create main class named \"FunctionalIntefaceMain\"<br><br></div><pre><!--block--><strong>package</strong> org.arpit.java2blog.constructor;\n \npublic <strong>class</strong> FunctionalIntefaceMain {\n \n    public static <strong>void</strong> main(<strong>String</strong>[] args)\n    {\n        FunctionalIntefaceMain pMain=<strong>new</strong> FunctionalIntefaceMain();\n        pMain.printForm(() -&gt; System.out.println(\"Printing form\"));\n    }\n \n    public <strong>void</strong> printForm(Printable p)\n    {\n        p.print();\n    }\n}</pre><div><!--block-->When you run above program, you will get below output:<br><br></div><pre><!--block-->Printing form</pre><div><!--block-->As you can see, since Printable has only one abstract method called print(), we were able to call it using lambda expression.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c4900bc1-963b-41f9-9740-b2b7775fbbe2","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.202Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.202Z"},"uniqueId":"c8993aee-84dc-4a82-8b9a-346b5c3e983e","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28ef1"},"name":"Method reference is used refer method of functional interface. It is nothing but compact way","heading":"Method reference is used refer method of functional interface. It","smartContent":{"content":"<div><!--block-->Method reference is used refer method of functional interface. It is nothing but compact way of lambda expression.You can simply replace lambda expression with method reference.<br><strong>Syntax:</strong><br>class::methodname</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"a99a3969-2135-4294-aa20-bfff834650f6","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.216Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.216Z"},"uniqueId":"46276074-0a6e-49d8-a1aa-53740ad8622f","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28f32"},"name":"Java 8 has introduced new class Called Optional. This class is basically introduced to avoid","heading":"Java 8 has introduced new class Called Optional. This class","smartContent":{"content":"\nJava 8 introduced a new class called `Optional`. This class was introduced to avoid `NullPointerException` in Java.  \n`Optional` encapsulates an optional value which is either present or not. It is a wrapper around an object and can be used to avoid `NullPointerExceptions`.\n\nHowever, `Optional` in Java is not only used for checking null values. While one of its primary purposes is to avoid `NullPointerException` by handling nulls gracefully, it has several other uses and benefits:\n\n### Key Uses of `Optional`:\n1. **Encapsulating values**: It represents a container that may or may not contain a non-null value, thus allowing you to express that a variable could be empty or absent.\n   \n2. **Avoiding null checks**: Instead of traditional null checks, you can use methods like `isPresent()`, `ifPresent()`, `orElse()`, `orElseGet()`, etc., to handle both present and absent values more elegantly.\n\n3. **Method chaining and functional operations**: With `Optional`, you can chain method calls using `map()`, `filter()`, `flatMap()`, etc., making the code more declarative and concise.\n\n4. **Handling default values**: `Optional` helps provide default values with methods like `orElse()` and `orElseGet()`.\n\n5. **Throwing exceptions on absent values**: It also supports throwing exceptions when a value is absent using `orElseThrow()`.\n\n### Example\nYou have written the following function to get the first non-repeated character in a `String`:\n\n```java\npublic static Character getNonRepeatedCharacter(String str) {\n    Map<Character, Integer> countCharacters = new LinkedHashMap<>();\n    for (int i = 0; i < str.length() - 1; i++) {\n        Character c = str.charAt(i);\n        if (!countCharacters.containsKey(c)) {\n            countCharacters.put(c, 1);\n        } else {\n            countCharacters.put(c, countCharacters.get(c) + 1);\n        }\n    }\n    // As LinkedHashMap maintains insertion order, first character with\n    // count 1 should return first non-repeated character\n    for (Entry<Character, Integer> e : countCharacters.entrySet()) {\n        if (e.getValue() == 1)\n            return e.getKey();\n    }\n    return null;\n}\n```\n\nYou call the above method as follows:\n\n```java\nCharacter c = getNonRepeatedCharacter(\"SASAS\");\nSystem.out.println(\"Non-repeated character is: \" + c.toString());\n```\n\n### Problem:\nIf there is no non-repeating character in `\"SASAS\"`, the method will return `null`, and calling `c.toString()` will throw a `NullPointerException`.\n\nYou can use `Optional` to avoid this `NullPointerException`. Let's modify the method to return an `Optional` object instead of `Character`.\n\n### Updated Method with Optional:\n\n```java\npublic static Optional<Character> getNonRepeatedCharacterOpt(String str) {\n    Map<Character, Integer> countCharacters = new LinkedHashMap<>();\n    for (int i = 0; i < str.length() - 1; i++) {\n        Character c = str.charAt(i);\n        if (!countCharacters.containsKey(c)) {\n            countCharacters.put(c, 1);\n        } else {\n            countCharacters.put(c, countCharacters.get(c) + 1);\n        }\n    }\n    // First character with count 1 should return as the first non-repeated character\n    for (Entry<Character, Integer> e : countCharacters.entrySet()) {\n        if (e.getValue() == 1)\n            return Optional.of(e.getKey());\n    }\n    return Optional.ofNullable(null);\n}\n```\n\n### Handling the Optional:\nWhen the method returns `Optional`, you are aware it can return `null` as well. You can call `Optional`'s `isPresent` method to check if there is a value wrapped in the `Optional`.\n\n```java\nOptional<Character> opCh = getNonRepeatedCharacterOpt(\"SASAS\");\nif (opCh.isPresent())\n    System.out.println(\"Non-repeated character is: \" + opCh.get());\nelse\n    System.out.println(\"No non-repeated character found in the String\");\n```\n\nIf there is no value present in `Optional`, it will simply print `\"No non-repeated character found in String\"`.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"7e0b5e31-0024-4049-8048-b3842d008e54","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.232Z"},"updatedDate":{"$date":"2024-09-06T15:39:47.637Z"},"uniqueId":"bcc25d5a-fc52-4aa1-b404-c05ab4b43743","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28f73"},"name":"Default method are those methods in interface which have body and use default keywords.Default method","heading":"Default method are those methods in interface which have body","smartContent":{"content":"<div><!--block-->Default method are those methods in interface which have body and use default keywords.Default method are introduced in Java 8 mainly because of backward compatibility.<br>You can refer to&nbsp;<a href=\"https://www.java2blog.com/interface-default-methods-in-java-8/\"><strong>default method</strong></a>&nbsp;in java for more details.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74b85c8d-a5ce-441c-8d4e-16a525ad2453","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.248Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.248Z"},"uniqueId":"a25cd742-d8fe-4824-99a5-fd6d1e933c07","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28fb4"},"name":"Both are functional interfaces. Predicate<T> is single argument function and either it returns true or","heading":"Both are functional interfaces. Predicate<T> is single argument function and","smartContent":{"content":"<div><!--block-->Both are functional interfaces.<br><a href=\"https://www.java2blog.com/java-8-predicate-examples/\"><strong>Predicate</strong></a>&lt;T&gt; is single argument function and either it returns true or false.This can be used as the assignment target for a lambda expression or method reference.<br><br></div><div><!--block-->Function&lt;T,R&gt; is also single argument function but it returns an Object.Here T denotes type of input to the function and R denotes type of Result.<br><br></div><div><!--block-->This can also be used as the assignment target for a lambda expression or method reference.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"82a764ce-bde4-46cc-af53-793f462a3c58","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.262Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.262Z"},"uniqueId":"c21ea8ba-639a-4408-8f24-77026c23812f","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b28ff5"},"name":"Issues with old Date and TIme API: Thread Safety: You might be already aware that","heading":"Issues with old Date and TIme API: Thread Safety: You","smartContent":{"content":"<div><!--block-->Issues with old Date and TIme API:<br><br></div><div><!--block--><strong>Thread Safety:</strong>&nbsp;You might be already aware that java.util.Date is mutable and not thread safe. Even java.text.SimpleDateFormat is also not Thread-Safe. New Java 8 date and time APIs are thread safe.<br><br></div><div><!--block--><strong>Performance:</strong>&nbsp;Java 8 ‘s new APIs are better in performance than old Java APIs.<br><br></div><div><!--block--><strong>More Readable:</strong>&nbsp;Old APIs such Calendar and Date are poorly designed and hard to understand. Java 8 Date and Time APIs are easy to understand and comply with ISO standards.<br><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"77ec08c2-9089-4116-8567-a16b1177df1d","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.277Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.277Z"},"uniqueId":"61e0bf3d-8f50-4a3b-b949-a08616468e37","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29036"},"name":"LocalDate, LocalTime, and LocalDateTime are the Core API classes for Java 8. As the name","heading":"LocalDate, LocalTime, and LocalDateTime are the Core API classes for","smartContent":{"content":"<div><!--block--><strong>LocalDate</strong>,&nbsp;<strong>LocalTime</strong>, and&nbsp;<strong>LocalDateTime</strong>&nbsp;are the Core API classes for Java 8. As the name suggests, these classes are local to context of observer. It denotes current date and time in context of Observer.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"c61da4f0-1f3c-4c93-955d-54a140488a77","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.291Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.291Z"},"uniqueId":"c9f4151c-015d-48bd-9ab3-cb1995c6c5d1","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29077"},"name":"You can simply use now method of LocalDate to get today’s date. LocalDate currentDate =","heading":"You can simply use now method of LocalDate to get","smartContent":{"content":"<div><!--block-->You can simply use&nbsp;<strong>now</strong>&nbsp;method of LocalDate to get today’s date.<br><br></div><pre><!--block-->LocalDate currentDate = LocalDate.now();\nSystem.out.println(currentDate);</pre><div><!--block-->It will give you output in below format:</div><pre><!--block-->2017-09-09</pre><div><!--block-->You can use&nbsp;<strong>now</strong>&nbsp;method of LocalTime to get current time.</div><pre><!--block-->LocalTime currentTime = LocalTime.now();\r\nSystem.out.println(currentTime);</pre><div><!--block-->It will give you output in below format:</div><pre><!--block-->23:17:51.817</pre><div><!--block--><br></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"7de92464-83f9-4729-b598-3f4163bc1f9f","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.304Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.304Z"},"uniqueId":"74736967-c692-4327-b916-e48e5cefb81a","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b290b8"},"name":"Until Java 7, JVM used an area called PermGen to store classes. It got removed","heading":"Until Java 7, JVM used an area called PermGen to","smartContent":{"content":"<div><!--block-->Until Java 7, JVM used an area called PermGen to store classes. It got removed in Java 8 and replaced by MetaSpace.<br>Major advantage of MetaSpace over permgen:<br>PermGen was fixed in term of mazimum size and can not grow dynamically but Metaspace can grow dynamically and do not have any size constraint.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"d779fa0a-fd03-4791-800a-994613b92586","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.319Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.319Z"},"uniqueId":"d85bf3df-74c9-4897-bfcd-a178f9c68f74","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b290f9"},"name":"You can simply do it using below statement. List<String> employeeFilteredList = employeeList.stream() .filter(e->e.getAge()>20) .map(Employee::getName) .collect(Collectors.toList());","heading":"You can simply do it using below statement. List<String> employeeFilteredList","smartContent":{"content":"<div><!--block-->You can simply do it using below statement.<br><br></div><pre><!--block-->List&lt;<strong>String</strong>&gt; employeeFilteredList = employeeList.stream()\n                  .filter(e-&gt;e.getAge()&gt;20)\n                  .map(Employee::getName)\n                  .collect(Collectors.toList());</pre><div><!--block--><br>Complete main program for above logic.</div><pre><!--block-->package com.p.java8ex;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class Ex1 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tList&lt;Employee&gt; employeeList = createEmployeeList();\r\n\t\tList&lt;String&gt; employeeFilteredList = employeeList.stream().filter(e -&gt; e.getAge() &gt; 20).map(Employee::getName)\r\n\t\t\t\t.collect(Collectors.toList());\r\n\r\n\t\temployeeFilteredList.forEach((name) -&gt; System.out.println(name));\r\n\r\n\t}\r\n\r\n\tpublic static List&lt;Employee&gt; createEmployeeList() {\r\n\t\tList&lt;Employee&gt; employeeList = new ArrayList&lt;&gt;();\r\n\r\n\t\tEmployee e1 = new Employee(\"John\", 21);\r\n\t\tEmployee e2 = new Employee(\"Martin\", 19);\r\n\t\tEmployee e3 = new Employee(\"Mary\", 31);\r\n\t\tEmployee e4 = new Employee(\"Stephan\", 18);\r\n\t\tEmployee e5 = new Employee(\"Gary\", 26);\r\n\r\n\t\temployeeList.add(e1);\r\n\t\temployeeList.add(e2);\r\n\t\temployeeList.add(e3);\r\n\t\temployeeList.add(e4);\r\n\t\temployeeList.add(e5);\r\n\r\n\t\treturn employeeList;\r\n\t}\r\n\r\n}\r\n<br></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"72089bcf-014a-4e0e-aa70-cd869a9412ec","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.332Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.332Z"},"uniqueId":"00a19155-531e-452b-bad4-5293413090d3","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b2913a"},"name":"You can use combination of filter and count to find this. List<Employee> employeeList = createEmployeeList();","heading":"You can use combination of filter and count to find","smartContent":{"content":"<div><!--block-->You can use combination of filter and count to find this.</div><pre><!--block-->List&lt;Employee&gt; employeeList = createEmployeeList();\r\nlong count = employeeList.stream()\r\n.filter(e-&gt;e.getAge()&gt;25)\r\n.count();\r\nSystem.out.println(\"Number of employees with age 25 are : \"+count);</pre><div><!--block-->complete code as below</div><pre><!--block-->package com.p.java8ex;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Ex2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tList&lt;Employee&gt; employeeList = createEmployeeList();\r\n\t\tlong count = employeeList.stream().filter(e -&gt; e.getAge() &gt; 25).count();\r\n\t\tSystem.out.println(\"Number of employees with age 25 are : \" + count);\r\n\t}\r\n\r\n\tpublic static List&lt;Employee&gt; createEmployeeList() {\r\n\t\tList&lt;Employee&gt; employeeList = new ArrayList&lt;&gt;();\r\n\r\n\t\tEmployee e1 = new Employee(\"John\", 21);\r\n\t\tEmployee e2 = new Employee(\"Martin\", 19);\r\n\t\tEmployee e3 = new Employee(\"Mary\", 31);\r\n\t\tEmployee e4 = new Employee(\"Stephan\", 18);\r\n\t\tEmployee e5 = new Employee(\"Gary\", 26);\r\n\r\n\t\temployeeList.add(e1);\r\n\t\temployeeList.add(e2);\r\n\t\temployeeList.add(e3);\r\n\t\temployeeList.add(e4);\r\n\t\temployeeList.add(e5);\r\n\r\n\t\treturn employeeList;\r\n\t}\r\n\r\n}\r\n<br></pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"be9ab2a0-27a1-42b0-b5c6-b0815d24f513","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.347Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.347Z"},"uniqueId":"5c135f6d-5c3b-4476-ad49-875077f15875","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b2917b"},"name":"It is again very simple logic, change the main function in above class as following.","heading":"It is again very simple logic, change the main function","smartContent":{"content":"<div><!--block-->It is again very simple logic, change the main function in above class as following.</div><pre><!--block-->List&lt;Employee&gt; employeeList = createEmployeeList();\n        Optional&lt;Employee&gt; e1 = employeeList.stream()\n                  .filter(e-&gt;e.getName().equalsIgnoreCase(\"Mary\")).findAny();\n \n        <strong>if</strong>(e1.isPresent())\n            System.out.println(e1.get());</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"19867ba8-a907-4ad2-8d87-57967b5dbad0","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.36Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.36Z"},"uniqueId":"088cac73-31f3-4b93-9f43-c5c8709f3888","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b291bc"},"name":"It is again very simple logic, change the main function in above class as following.","heading":"It is again very simple logic, change the main function","smartContent":{"content":"<div><!--block-->It is again very simple logic, change the main function in above class as following.</div><pre><!--block-->List&lt;Employee&gt; employeeList = createEmployeeList();\n        OptionalInt max = employeeList.stream().\n                          mapToInt(Employee::getAge).max();\n \n        <strong>if</strong>(max.isPresent())\n            System.out.println(\"Maximum age of Employee: \"+max.getAsInt());</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"43a0d397-8fc2-4204-bbee-36009d208feb","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.374Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.374Z"},"uniqueId":"92d1b69b-4b29-4600-86ce-36e4f8bfbc5f","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b291fd"},"name":"You can simply use sort method of list to sort the list of employees. List<Employee>","heading":"You can simply use sort method of list to sort","smartContent":{"content":"<div><!--block-->You can simply use sort method of list to sort the list of employees.</div><pre><!--block-->List&lt;Employee&gt; employeeList = createEmployeeList();\n        employeeList.sort((e1,e2)-&gt;e1.getAge()-e2.getAge());\n        employeeList.<strong>forEach</strong>(System.out::println);</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"34147a6c-883e-4837-87cf-4b8def18db11","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.389Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.389Z"},"uniqueId":"ac0b8441-a601-4ec2-ad00-3d8b993fd286","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b2923e"},"name":"List<Employee> employeeList = createEmployeeList(); List<String> employeeNames = employeeList .stream() .map(Employee::getName) .collect(Collectors.toList()); String employeeNamesStr = String.join(\",\",","heading":"List<Employee> employeeList = createEmployeeList(); List<String> employeeNames = employeeList .stream() .map(Employee::getName)","smartContent":{"content":"<pre><!--block-->List&lt;Employee&gt; employeeList = createEmployeeList();\n        List&lt;<strong>String</strong>&gt; employeeNames = employeeList\n                                     .stream()\n                                     .map(Employee::getName)\n                                     .collect(Collectors.toList());\n        <strong>String</strong> employeeNamesStr = <strong>String</strong>.join(\",\", employeeNames);\n        System.out.println(\"Employees are: \"+employeeNamesStr);</pre><div><!--block-->Output:</div><pre><!--block-->Employees are: John,Martin,Mary,Stephan,Gary</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"83868dda-d4e8-42d4-b430-51e6f6642677","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.404Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.404Z"},"uniqueId":"905154cd-3fd1-4f62-a127-89d06790d6b0","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b2927f"},"name":"You can use Collections.groupBy() to group list of employees by employee name. package org.arpit.java2blog; import","heading":"You can use Collections.groupBy() to group list of employees by","smartContent":{"content":"<div><!--block-->You can use&nbsp;<a href=\"https://java2blog.com/how-to-do-groupby-in-java/\"><strong>Collections.groupBy()</strong></a>&nbsp;to group list of employees by employee name.</div><pre><!--block--><strong>package</strong> org.arpit.java2blog;\n \nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n \npublic <strong>class</strong> MaximumUsingStreamMain {\n    public static <strong>void</strong> main(<strong>String</strong> args[])\n    {\n        List&lt;Employee&gt; employeeList = createEmployeeList();\n        Map&lt;<strong>String</strong>, List&lt;Employee&gt;&gt; map = employeeList.stream()\n                                              .collect(Collectors.groupingBy(Employee::getName));\n        map.<strong>forEach</strong>((name,employeeListTemp)-&gt;System.out.println(\"Name: \"+name+\" ==&gt;\"+employeeListTemp));\n    }\n \n    public static List&lt;Employee&gt; createEmployeeList()\n    {\n        List&lt;Employee&gt; employeeList=<strong>new</strong> ArrayList&lt;&gt;();\n \n        Employee e1=<strong>new</strong> Employee(\"John\",21);\n        Employee e2=<strong>new</strong> Employee(\"Martin\",19);\n        Employee e3=<strong>new</strong> Employee(\"Mary\",31);\n        Employee e4=<strong>new</strong> Employee(\"Mary\",18);\n        Employee e5=<strong>new</strong> Employee(\"John\",26);\n \n        employeeList.add(e1);\n        employeeList.add(e2);\n        employeeList.add(e3);\n        employeeList.add(e4);\n        employeeList.add(e5);\n \n        <strong>return</strong> employeeList;\n    }\n}</pre><div><!--block-->Output:</div><pre><!--block-->Name: John ==&gt;[Employee Name: John age: 21, Employee Name: John age: 26]\r\nName: Martin ==&gt;[Employee Name: Martin age: 19]\r\nName: Mary ==&gt;[Employee Name: Mary age: 31, Employee Name: Mary age: 18]</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"f0c1931c-7a7d-4cc5-979b-4e91c8c2b91f","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.418Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.418Z"},"uniqueId":"ba4a39f5-e5fe-42c7-919b-07e3c0712307","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b292c0"},"name":"Java 8 Stream supports both intermediate and terminal operation. Intermediate operations are lazy in nature","heading":"Java 8 Stream supports both intermediate and terminal operation. Intermediate","smartContent":{"content":"Java 8 Stream supports both intermediate and terminal operation.\n\nIntermediate operations are lazy in nature and do not get executed immediately. Terminal operations are not lazy, they are executed as soon as encountered. Intermediate operation is memorized and is called when terminal operation is called.\n\nAll Intermediate operations return stream as it just transforms stream into another and terminal operation don’t.\n\n# List of common intermediate operations available in Java 8 Streams:\n\n1. **`filter(Predicate<? super T> predicate)`**\n   - Filters elements based on a predicate.\n\n2. **`map(Function<? super T, ? extends R> mapper)`**\n   - Transforms elements into another type.\n\n3. **`flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)`**\n   - Flattens a stream of streams into a single stream.\n\n4. **`distinct()`**\n   - Removes duplicate elements.\n\n5. **`sorted()`**\n   - Sorts elements in natural order.\n\n6. **`sorted(Comparator<? super T> comparator)`**\n   - Sorts elements using a comparator.\n\n7. **`peek(Consumer<? super T> action)`**\n   - Performs an action on each element without modifying the stream.\n\n8. **`limit(long maxSize)`**\n   - Truncates the stream to contain no more than the given number of elements.\n\n9. **`skip(long n)`**\n   - Skips the first `n` elements and returns the remaining elements.\n\n10. **`mapToInt(ToIntFunction<? super T> mapper)`**\n    - Transforms elements into `int` type stream.\n\n11. **`mapToLong(ToLongFunction<? super T> mapper)`**\n    - Transforms elements into `long` type stream.\n\n12. **`mapToDouble(ToDoubleFunction<? super T> mapper)`**\n    - Transforms elements into `double` type stream.\n\n13. **`flatMapToInt(Function<? super T, ? extends IntStream> mapper)`**\n    - Flattens a stream of streams into a single `IntStream`.\n\n14. **`flatMapToLong(Function<? super T, ? extends LongStream> mapper)`**\n    - Flattens a stream of streams into a single `LongStream`.\n\n15. **`flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper)`**\n    - Flattens a stream of streams into a single `DoubleStream`.\n\n16. **`boxed()`**\n    - Converts primitive streams (`IntStream`, `LongStream`, `DoubleStream`) to a stream of their corresponding wrapper objects (`Stream<Integer>`, `Stream<Long>`, `Stream<Double>`).\n\nThese operations return a new stream that can be further processed with other intermediate operations or a terminal operation.\n\n\n# List of common terminal operations available in Java 8 Streams:\n\n1. **`forEach(Consumer<? super T> action)`**\n   - Performs an action for each element in the stream.\n\n2. **`forEachOrdered(Consumer<? super T> action)`**\n   - Performs an action for each element in the encounter order of the stream.\n\n3. **`toArray()`**\n   - Returns an array containing the elements of the stream.\n\n4. **`toArray(IntFunction<A[]> generator)`**\n   - Returns an array containing the elements of the stream using the provided generator function.\n\n5. **`reduce(T identity, BinaryOperator<T> accumulator)`**\n   - Performs a reduction on the elements of the stream using the provided identity value and an associative accumulation function.\n\n6. **`reduce(BinaryOperator<T> accumulator)`**\n   - Performs a reduction on the elements of the stream using an associative accumulation function.\n\n7. **`reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner)`**\n   - Performs a reduction on the elements of the stream, using an initial identity value, an accumulator, and a combiner.\n\n8. **`collect(Collector<? super T, A, R> collector)`**\n   - Performs a mutable reduction operation on the elements of the stream using a `Collector`.\n\n9. **`collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner)`**\n   - Performs a mutable reduction operation on the elements of the stream using a custom supplier, accumulator, and combiner.\n\n10. **`min(Comparator<? super T> comparator)`**\n    - Returns the minimum element of the stream according to the provided comparator.\n\n11. **`max(Comparator<? super T> comparator)`**\n    - Returns the maximum element of the stream according to the provided comparator.\n\n12. **`count()`**\n    - Returns the count of elements in the stream.\n\n13. **`anyMatch(Predicate<? super T> predicate)`**\n    - Returns `true` if any elements match the provided predicate.\n\n14. **`allMatch(Predicate<? super T> predicate)`**\n    - Returns `true` if all elements match the provided predicate.\n\n15. **`noneMatch(Predicate<? super T> predicate)`**\n    - Returns `true` if no elements match the provided predicate.\n\n16. **`findFirst()`**\n    - Returns an `Optional` describing the first element of the stream, or an empty `Optional` if the stream is empty.\n\n17. **`findAny()`**\n    - Returns an `Optional` describing some element of the stream, or an empty `Optional` if the stream is empty.\n\nTerminal operations consume the stream and produce a result or a side effect. After a terminal operation is performed, the stream is considered consumed and cannot be reused.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"a758cc31-c66b-4804-8fe1-b576d11db401","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.432Z"},"updatedDate":{"$date":"2024-09-06T12:45:49.796Z"},"uniqueId":"5b3f02b3-6c86-42b7-a10b-47a4f5efb613","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29301"},"name":"You can simply use stream and then collect it to set using Collections.toSet() method. package","heading":"You can simply use stream and then collect it to","smartContent":{"content":"<div><!--block-->You can simply use stream and then collect it to set using Collections.toSet() method.</div><pre><!--block-->package org.arpit.java2blog;\r\n \r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n \r\npublic class RemoveDuplicatesFromListMain {\r\n    public static void main(String[] args)\r\n    {\r\n        Integer[] arr=new Integer[]{1,2,3,4,3,2,4,2};\r\n        List&lt;Integer&gt; listWithDuplicates = Arrays.asList(arr);\r\n \r\n        Set&lt;Integer&gt; setWithoutDups = listWithDuplicates.stream().collect(Collectors.toSet());\r\n        setWithoutDups.forEach((i)-&gt;System.out.print(\" \"+i));\r\n    }\r\n}</pre><div><!--block-->You can use distinct as well to avoid duplicates as following.<br>change main method of above program as below.</div><pre><!--block-->Integer[] arr=new Integer[]{1,2,3,4,3,2,4,2};\r\n        List&lt;Integer&gt; listWithDuplicates = Arrays.asList(arr);\r\nList&lt;Integer&gt; listWithoutDups = listWithDuplicates.stream().distinct().collect(Collectors.toList());\r\n        listWithoutDups.forEach((i)-&gt;System.out.print(\" \"+i));</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"eed46d2d-145d-414a-9c2e-8ef74c65bd94","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.447Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.447Z"},"uniqueId":"25d1dc53-5a34-4716-a1c5-48f4d1761229","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29342"},"name":"findFirst will always return the first element from the stream whereas findAny is allowed to","heading":"findFirst will always return the first element from the stream","smartContent":{"content":"<div><!--block-->findFirst will always return the first element from the stream whereas findAny is allowed to choose any element from the stream.<br>findFirst has deterministic behavior whereas findAny is nondeterministic behavior.</div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"66c133e4-3494-4a13-a654-71d5df801179","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.462Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.462Z"},"uniqueId":"a3201e73-6403-4ff1-8977-0fc297ba14c5","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29383"},"name":"You can use the map function to square the number and then filter to avoid","heading":"You can use the map function to square the number","smartContent":{"content":"<div><!--block-->You can use the&nbsp;<a href=\"https://java2blog.com/java-8-stream-map/\"><strong>map function</strong></a>&nbsp;to square the number and then filter to avoid numbers which are less than 10000.We will use average as terminating function in this case.<br><br></div><pre><!--block-->package org.arpit.java2blog;\r\n \r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.OptionalDouble;\r\n \r\npublic class RemoveDuplicatesFromListMain {\r\n    public static void main(String[] args)\r\n    {\r\n        Integer[] arr=new Integer[]{100,24,13,44,114,200,40,112};\r\n        List&lt;Integer&gt; list = Arrays.asList(arr);\r\n        OptionalDouble average = list.stream()\r\n                                 .mapToInt(n-&gt;n*n)\r\n                                 .filter(n-&gt;n&gt;10000)\r\n                                 .average();\r\n \r\n        if(average.isPresent())\r\n            System.out.println(average.getAsDouble());\r\n \r\n    }\r\n}</pre><div><!--block--><br>output:</div><pre><!--block-->21846.666666666668</pre>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"652ca30e-ce4f-40bc-9314-bf0b6f00be11","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.477Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.477Z"},"uniqueId":"36f85229-230e-4da5-8ed1-ab127987d3de","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b293c4"},"name":"Java 8 optional can be used to avoid NullPointerException.You can read about the detailed tutorial.","heading":"Java 8 optional can be used to avoid NullPointerException.You can","smartContent":{"content":"<div><!--block-->Java 8 optional can be used to avoid NullPointerException.You can read about the detailed tutorial.<br><br></div><div><!--block-->Read&nbsp;<a href=\"https://java2blog.com/java-8-optional/\"><strong>Java 8 optional</strong></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"360875d2-97c1-444c-9d14-53087751564f","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.491Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.491Z"},"uniqueId":"743e16e2-0442-4eef-b85b-36a6b2bff296","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29405"},"name":"Predicate is single argument function which returns true or false. It has test method which","heading":"Predicate is single argument function which returns true or false.","smartContent":{"content":"<div><!--block-->Predicate is single argument function which returns true or false. It has test method which returns boolean.<br>When we are using filter in above example, we are actually passing Predicate functional interface to it.<br><br></div><div><!--block-->Read&nbsp;<a href=\"https://java2blog.com/java-8-predicate-examples/\"><strong>Java 8 predicate</strong></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"74cdfc4c-3798-4eec-847b-7b08124d4f0e","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.506Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.506Z"},"uniqueId":"66529123-79ad-4f59-a842-3a27f0eee6cb","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29446"},"name":"Consumer is single argument functional interface which does not return any value. When we are","heading":"Consumer is single argument functional interface which does not return","smartContent":{"content":"<div><!--block-->Consumer is single argument functional interface which does not return any value.<br>When we are using foreach in above example, we are actually passing Consumer functional interface to it.<br><br></div><div><!--block-->Read&nbsp;<a href=\"https://java2blog.com/java-8-consumer-example/\"><strong>Java 8 consumer</strong></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"00640fd4-3036-416e-af3e-ade0f26389be","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.521Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.521Z"},"uniqueId":"12149352-fa98-46f8-9f65-42676da23739","__v":0}
{"_id":{"$oid":"668ef19e59d6bcc528b29487"},"name":"Supplier is function interface which does not take any parameter but returns the value using","heading":"Supplier is function interface which does not take any parameter","smartContent":{"content":"<div><!--block-->Supplier is function interface which does not take any parameter but returns the value using get method.<br><br></div><div><!--block-->Read&nbsp;<a href=\"https://java2blog.com/java-8-supplier-example/\"><strong>Java 8 supplier</strong></a></div>","textOutputType":"html","textInputType":"CKEditor"},"rating":1,"linkedQuestionsId":"27a4d3f5-ef5e-46b6-a33f-005e6154f5f8","order":0,"createdDate":{"$date":"2024-07-10T20:39:58.536Z"},"updatedDate":{"$date":"2024-07-10T20:39:58.536Z"},"uniqueId":"b20fdf36-2cb4-4b39-833e-abc872553058","__v":0}
{"_id":{"$oid":"66ca2bc9f0ab971a489d6d0c"},"name":"Answer for promise: Nothing to update","heading":"Answer for promise: Nothing to update","smartContent":{"content":"A `Promise` in JavaScript is an object representing the eventual completion (or failure) of an asynchronous operation and its resulting value. It allows you to write asynchronous code in a more synchronous fashion, avoiding callback hell.\n\n### Basic Usage\n\n```javascript\n// Creating a Promise\nlet myPromise = new Promise(function(resolve, reject) {\n    // Perform some async operation, then...\n    \n    let success = true; // or false depending on the operation outcome\n    \n    if (success) {\n        resolve(\"Operation succeeded!\");\n    } else {\n        reject(\"Operation failed!\");\n    }\n});\n\n// Consuming the Promise\nmyPromise.then(function(value) {\n    console.log(value);  // \"Operation succeeded!\"\n}).catch(function(error) {\n    console.error(error); // \"Operation failed!\"\n});\n```\n\n### Important Points\n- `resolve` is called when the async operation completes successfully.\n- `reject` is called when the async operation fails.\n- The `then()` method is used to handle the resolved value.\n- The `catch()` method is used to handle errors or rejected promises.\n\n### Example with Async Function\n\n```javascript\nfunction asyncOperation() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(\"Done!\");\n        }, 1000);\n    });\n}\n\nasyncOperation().then(result => {\n    console.log(result);  // \"Done!\" after 1 second\n}).catch(error => {\n    console.error(error);\n});\n```\n\nThis allows handling of asynchronous operations like network requests, file reading, etc., in a cleaner and more manageable way.","textOutputType":"markdown","textInputType":"TextArea"},"linkedQuestionsId":"351cf2d6-7335-4ea8-9cfd-a31358839b25","order":0,"createdDate":{"$date":"2024-08-24T18:51:53.05Z"},"updatedDate":{"$date":"2024-08-24T19:12:27.119Z"},"uniqueId":"a4dfa176-858d-42e3-95cb-12eeb124917a","__v":0}
{"_id":{"$oid":"66cc0a180047792a373590cf"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java 8 introduced several key features and improvements that brought significant advantages to the language and its ecosystem. Here are the main advantages of using Java 8:\n\n### 1. **Functional Programming Support**\n   - **Lambda Expressions**: Simplifies the implementation of interfaces with a single abstract method (functional interfaces) by allowing you to write concise, expressive code.\n   - **Functional Interfaces**: Java 8 introduced several functional interfaces (`Function`, `Predicate`, `Consumer`, etc.), which facilitate functional-style programming.\n\n### 2. **Streams API**\n   - **Declarative Data Processing**: Streams API allows for processing collections of data in a declarative manner, making the code more readable and maintainable.\n   - **Parallel Processing**: Streams can be processed in parallel with minimal effort, leveraging multi-core processors to improve performance.\n   - **Lazy Evaluation**: Streams are lazily evaluated, meaning computations are performed only when needed, optimizing performance.\n\n### 3. **Default and Static Methods in Interfaces**\n   - **Backward Compatibility**: Interfaces can now have default and static methods, allowing developers to add new functionality to interfaces without breaking existing implementations.\n   - **Multiple Inheritance of Behavior**: Enables a form of multiple inheritance by allowing a class to inherit behavior from multiple interfaces.\n\n### 4. **New Date and Time API (java.time)**\n   - **Immutability and Thread-Safety**: The new `java.time` package provides immutable and thread-safe classes for handling dates and times.\n   - **Improved Usability**: The API is more intuitive and easier to work with compared to the old `java.util.Date` and `java.util.Calendar` classes, reducing the likelihood of bugs.\n\n### 5. **Optional Class**\n   - **Avoid NullPointerExceptions**: `Optional` is a container that can hold a value or be empty, encouraging developers to write safer code by explicitly handling cases where a value might be null.\n\n### 6. **Nashorn JavaScript Engine**\n   - **JavaScript Integration**: Nashorn allows for executing JavaScript code from within Java applications, enabling seamless integration with JavaScript and enhancing the capability to create hybrid applications.\n\n### 7. **Improved Concurrency API**\n   - **CompletableFuture**: Enhances the asynchronous programming model by providing a powerful mechanism to build complex asynchronous pipelines.\n   - **Parallel Arrays**: Enhanced support for parallel operations on arrays, improving performance in data processing tasks.\n\n### 8. **Enhanced Collection APIs**\n   - **New Methods in Collections**: Java 8 introduced new methods like `forEach`, `removeIf`, `replaceAll`, and `computeIfAbsent` that simplify common operations on collections.\n\n### 9. **Method References**\n   - **Cleaner and More Readable Code**: Method references allow for more concise and readable code by referencing methods directly, avoiding unnecessary boilerplate.\n\n### 10. **Base64 Encoding and Decoding**\n   - **Built-In Base64 Support**: Java 8 added utilities for encoding and decoding Base64, eliminating the need for third-party libraries for this common task.\n\n### 11. **Type Annotations**\n   - **Improved Type Checking**: Java 8 allows annotations to be applied to types, providing more granular control over type checking and enabling advanced validation frameworks.\n\n### 12. **Improved Performance and Memory Management**\n   - **Metaspace**: Java 8 replaced the Permanent Generation (PermGen) with Metaspace, improving memory management and reducing issues related to class metadata storage.\n\nThese advantages make Java 8 a powerful, more expressive, and efficient language, significantly improving the developer experience and application performance.","textOutputType":"markdown","textInputType":"TextArea"},"rating":7,"linkedQuestionsId":"c7c163cf-4b8d-467f-9c67-924efbde35a6","order":0,"createdDate":{"$date":"2024-08-26T04:52:40.458Z"},"updatedDate":{"$date":"2024-08-26T04:52:40.458Z"},"uniqueId":"8c9032f8-5290-459c-8134-1297c78b80a8","__v":0}
{"_id":{"$oid":"66ccd70ff95693ba41fc2edf"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The **Java Collections Framework (JCF)** is a unified architecture for representing and manipulating collections in Java. A collection is an object that represents a group of objects (like lists, sets, maps, etc.). The Java Collections Framework provides a set of interfaces and classes that allow developers to work with groups of objects in a consistent and efficient manner.\n\n### Key Components of Java Collections Framework:\n1. **Interfaces**: These define the abstract data types that represent collections, such as `List`, `Set`, `Queue`, and `Map`.\n2. **Implementations**: Concrete classes that implement the collection interfaces. For example, `ArrayList`, `HashSet`, `LinkedList`, `HashMap`, etc.\n3. **Algorithms**: Methods that perform useful computations, like sorting and searching, on objects that implement collection interfaces. These algorithms are typically implemented as static methods in utility classes like `Collections`.\n\n### Major Interfaces:\n- **`Collection<E>`**: The root interface of the collection hierarchy.\n  - **`List<E>`**: An ordered collection (sequence) that can contain duplicate elements.\n    - Implementations: `ArrayList`, `LinkedList`, `Vector`, etc.\n  - **`Set<E>`**: A collection that cannot contain duplicate elements.\n    - Implementations: `HashSet`, `LinkedHashSet`, `TreeSet`, etc.\n  - **`Queue<E>`**: A collection used to hold multiple elements prior to processing, typically following a FIFO (First-In-First-Out) order.\n    - Implementations: `LinkedList`, `PriorityQueue`, `ArrayDeque`, etc.\n  - **`Deque<E>`**: A double-ended queue that allows elements to be added or removed from both ends.\n    - Implementations: `LinkedList`, `ArrayDeque`, etc.\n\n- **`Map<K, V>`**: An object that maps keys to values, with no duplicate keys allowed.\n  - Implementations: `HashMap`, `TreeMap`, `LinkedHashMap`, `Hashtable`, etc.\n\n### Benefits of the Java Collections Framework:\n\n1. **Unified Architecture**:\n   - The framework provides a standard way to work with collections, so you don’t need to learn different APIs for different data structures.\n\n2. **Reusability**:\n   - The interfaces and classes provided in the framework can be reused across different programs, promoting code reuse and reducing redundancy.\n\n3. **Flexibility**:\n   - The framework supports various types of collections such as lists, sets, and maps, allowing developers to choose the most appropriate data structure for their specific needs.\n\n4. **Performance**:\n   - The framework includes highly efficient implementations of data structures and algorithms, which are optimized for performance.\n\n5. **Ease of Use**:\n   - The framework provides easy-to-use methods for performing common operations such as sorting, searching, and manipulating collections.\n\n6. **Type Safety with Generics**:\n   - The use of generics allows collections to be type-safe, reducing the risk of `ClassCastException` at runtime and eliminating the need for explicit casting.\n\n7. **Interoperability**:\n   - Different implementations of collection interfaces are interchangeable, allowing you to switch from one implementation to another (e.g., from `ArrayList` to `LinkedList`) with minimal code changes.\n\n8. **Thread Safety**:\n   - The framework provides thread-safe collection classes (like `Vector`, `Hashtable`, `ConcurrentHashMap`, etc.) that can be safely used in multi-threaded environments.\n\n9. **Utility Methods**:\n   - The `Collections` and `Arrays` classes provide static methods to perform common operations like sorting, shuffling, reversing, finding max/min, and more, simplifying many complex tasks.\n\n10. **Reduced Effort**:\n    - Using the pre-built data structures and algorithms in the framework significantly reduces the effort and time required to write custom implementations from scratch.\n\n### Example Usage:\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CollectionsExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(5);\n        numbers.add(1);\n        numbers.add(3);\n        numbers.add(2);\n        numbers.add(4);\n\n        // Sort the list\n        Collections.sort(numbers);\n\n        // Print sorted list\n        System.out.println(\"Sorted List: \" + numbers);\n\n        // Find the maximum value\n        int max = Collections.max(numbers);\n        System.out.println(\"Max Value: \" + max);\n    }\n}\n```\n\n### Summary:\nThe Java Collections Framework provides a powerful, flexible, and efficient way to work with groups of objects. By offering a wide range of data structures, algorithms, and utility methods, the framework simplifies the development process, improves code quality, and enhances application performance.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"5b19307d-8e4f-428d-b17f-185411d2d5b7","order":0,"createdDate":{"$date":"2024-08-26T19:27:11.795Z"},"updatedDate":{"$date":"2024-08-26T19:27:11.795Z"},"uniqueId":"0532c760-62af-4df0-a326-26e83bb5734e","__v":0}
{"_id":{"$oid":"66ccda14f95693ba41fca9c1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The difference in how `HashMap` and `Hashtable` handle `null` keys and values primarily stems from the design choices and historical context in which these classes were developed.\n\n### **HashMap**:\n- **Allows `null` keys and values**:\n  - **Design Choice**: `HashMap` is part of the Java Collections Framework introduced in Java 1.2. It was designed to be more flexible and modern compared to `Hashtable`.\n  - **Implementation**:\n    - For the **key**, `HashMap` uses a special case for handling `null` keys. When a `null` key is inserted, it is always stored in the first bucket (index 0). The `null` key is not hashed but directly placed in this fixed location, allowing the retrieval of the `null` key to be fast and efficient.\n    - For the **values**, `HashMap` allows `null` values to be associated with any key, including `null` keys. This allows the map to represent the absence of a value explicitly by using `null`.\n\n### **Hashtable**:\n- **Does not allow `null` keys and values**:\n  - **Historical Context**: `Hashtable` is an older class that was part of the original Java 1.0. At that time, there was a design decision to avoid handling `null` because:\n    - **Error Prevention**: Allowing `null` keys or values in a `Hashtable` could lead to ambiguous situations or errors. For instance, calling `get(null)` could return `null` either because the key wasn’t found, or because the key was `null`. This ambiguity was avoided by simply disallowing `null` keys and values.\n    - **Thread Safety**: `Hashtable` is synchronized, and handling `null` values in a concurrent environment might have introduced additional complexity or bugs. By not allowing `null`, the design could simplify synchronization logic and error handling.\n  \n  - **Implementation**: The `Hashtable` class does not have special handling for `null` keys or values, and trying to insert a `null` key or value will throw a `NullPointerException`.\n\n### Summary:\n- **Flexibility vs. Legacy**: `HashMap` was designed with flexibility and modern use cases in mind, allowing `null` to be used where it makes sense. On the other hand, `Hashtable` was designed with stricter rules to avoid potential errors and ambiguities, which was particularly important in the earlier days of Java.\n\n- **Practical Use**: Today, `HashMap` is preferred over `Hashtable` in most situations due to its flexibility, non-synchronized nature (allowing better performance in single-threaded scenarios), and alignment with modern Java practices. If synchronization is needed, `ConcurrentHashMap` is generally recommended as it offers better concurrency support compared to `Hashtable`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"721d383e-1de6-4a72-9c5d-bbf782dd659c","order":0,"createdDate":{"$date":"2024-08-26T19:40:04.37Z"},"updatedDate":{"$date":"2024-08-26T19:40:04.37Z"},"uniqueId":"2b5d35a6-b00b-453c-a0f2-de49de45e50e","__v":0}
{"_id":{"$oid":"66cce068f95693ba41fd354d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**DevOps** is a set of practices, tools, and cultural philosophies that aim to integrate and automate the processes between software development (Dev) and IT operations (Ops) teams, so they can build, test, and release software faster and more reliably. The primary goal of DevOps is to shorten the software development lifecycle and provide continuous delivery with high software quality.\n\n### Key Concepts of DevOps:\n\n1. **Collaboration**:\n   - DevOps emphasizes close collaboration between development, operations, and other IT teams, breaking down the traditional silos that exist between them. This collaboration helps ensure that everyone involved in delivering a product shares the same goals and works together to achieve them.\n\n2. **Automation**:\n   - DevOps relies heavily on automation to speed up the processes of software development, testing, deployment, and monitoring. Automation reduces human error, increases efficiency, and allows for rapid feedback loops.\n\n3. **Continuous Integration (CI)**:\n   - CI is the practice of regularly merging all developers' working copies to a shared mainline (often multiple times a day). Automated tests are run as part of this process to detect and fix errors early, improving software quality.\n\n4. **Continuous Delivery (CD)**:\n   - CD extends CI by automatically deploying code changes to a staging or production environment after they pass automated tests. The goal is to make releases frequent, predictable, and low-risk.\n\n5. **Infrastructure as Code (IaC)**:\n   - IaC is the practice of managing and provisioning computing infrastructure through machine-readable configuration files, rather than through physical hardware configuration or interactive configuration tools. Tools like Terraform, Ansible, and AWS CloudFormation are often used for this purpose.\n\n6. **Monitoring and Logging**:\n   - Continuous monitoring and logging are essential for maintaining application performance and availability. These practices help in detecting issues, understanding user behavior, and improving future releases.\n\n7. **Microservices**:\n   - DevOps often involves the use of microservices architecture, where a large application is broken down into smaller, independent services that can be developed, deployed, and scaled independently.\n\n8. **Version Control**:\n   - DevOps practices heavily rely on version control systems (like Git) to manage changes to source code over time, enabling collaboration, tracking changes, and rolling back to previous versions if needed.\n\n9. **Agility and Iteration**:\n   - DevOps encourages iterative development and deployment processes, allowing teams to adapt to changes quickly, release new features faster, and respond to customer feedback more effectively.\n\n### Benefits of DevOps:\n\n1. **Faster Time to Market**:\n   - With automated processes and continuous delivery, software can be developed, tested, and released more quickly, reducing the time it takes to get new features and updates to users.\n\n2. **Improved Collaboration and Communication**:\n   - By fostering a culture of shared responsibility, DevOps improves communication between development and operations teams, leading to better decision-making and problem-solving.\n\n3. **Increased Efficiency and Productivity**:\n   - Automation of repetitive tasks frees up developers and operations staff to focus on more strategic work, improving overall efficiency.\n\n4. **Higher Quality and Reliability**:\n   - Continuous testing, monitoring, and feedback loops help in catching issues early and ensuring that software is stable and reliable.\n\n5. **Scalability and Flexibility**:\n   - DevOps practices, especially when combined with cloud computing and microservices, make it easier to scale applications and infrastructure in response to changing demands.\n\n6. **Reduced Costs**:\n   - By automating processes and improving efficiency, DevOps can lead to significant cost savings in the development and deployment of software.\n\n### Common Tools Used in DevOps:\n\n- **CI/CD Tools**: Jenkins, GitLab CI, CircleCI, Travis CI.\n- **Version Control**: Git, GitHub, Bitbucket, GitLab.\n- **Configuration Management**: Ansible, Chef, Puppet.\n- **Containerization**: Docker, Kubernetes.\n- **Infrastructure as Code**: Terraform, AWS CloudFormation.\n- **Monitoring**: Prometheus, Grafana, Nagios, Splunk.\n- **Collaboration**: Slack, Jira, Confluence.\n\n### Summary:\nDevOps is a holistic approach that brings together development and operations to improve collaboration, automate processes, and deliver high-quality software rapidly and reliably. It transforms the traditional software development and delivery process, making it more efficient, scalable, and responsive to change.","textOutputType":"markdown","textInputType":"TextArea"},"rating":6,"linkedQuestionsId":"6642a928-c9d9-42c8-a0e1-29b9b6f4850a","order":0,"createdDate":{"$date":"2024-08-26T20:07:04.744Z"},"updatedDate":{"$date":"2024-08-26T20:07:04.744Z"},"uniqueId":"8dff9bea-4bb3-4d66-b513-f96638601aa0","__v":0}
{"_id":{"$oid":"66cce48cf95693ba41fd68c5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### What are Design Patterns?\n\nDesign patterns are established solutions to common software design challenges, particularly in object-oriented programming (OOP). These patterns capture best practices and provide a shared language for developers to discuss and implement solutions that are both efficient and effective. By abstracting common challenges, design patterns help avoid reinventing the wheel, making it easier to tackle complex software development tasks.\n\n#### **Types of Design Patterns**\n\nDesign patterns are broadly categorized into three types:\n\n1. **Creational Patterns**:\n   - **Focus**: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.\n   - **Examples**:\n     - **Singleton**: Ensures that a class has only one instance and provides a global point of access to that instance.\n     - **Factory Method**: Defines an interface for creating an object, but lets subclasses alter the type of objects that will be created.\n     - **Builder**: Constructs complex objects step by step, allowing for greater control over the construction process.\n     - **Prototype**: Creates new objects by copying an existing object, known as the prototype.\n\n2. **Structural Patterns**:\n   - **Focus**: Concerned with object composition or the way objects are structured and related to each other.\n   - **Examples**:\n     - **Adapter**: Allows incompatible interfaces to work together by acting as a bridge between them.\n     - **Decorator**: Adds behavior to an object dynamically without affecting the behavior of other objects from the same class.\n     - **Facade**: Provides a simplified interface to a complex subsystem, making it easier to use.\n     - **Composite**: Composes objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions of objects uniformly.\n\n3. **Behavioral Patterns**:\n   - **Focus**: Deal with algorithms and the assignment of responsibilities between objects. They help in defining how objects interact and communicate.\n   - **Examples**:\n     - **Observer**: Defines a dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n     - **Strategy**: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.\n     - **Command**: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n     - **Iterator**: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\n\n#### **Benefits of Design Patterns**\n\n- **Reusability**:\n  - Design patterns promote code reuse by providing proven, battle-tested solutions to common problems. This leads to more robust and maintainable code.\n\n- **Improved Communication**:\n  - They provide a common language among developers, making it easier to communicate ideas and collaborate on solutions.\n\n- **Efficiency**:\n  - By using design patterns, developers can solve problems more quickly, avoiding the pitfalls of ad-hoc solutions.\n\n- **Flexibility**:\n  - Design patterns often provide solutions that are more adaptable to change, making the codebase easier to modify and extend over time.\n\n- **Best Practices**:\n  - They encapsulate best practices in software design, helping developers to follow principles such as DRY (Don't Repeat Yourself) and SOLID principles.\n\n#### **Common Misconceptions and Pitfalls**\n\n- **Overuse**:\n  - While design patterns are powerful tools, they should not be overused. Applying a pattern where it is not needed can overcomplicate a solution, making the code harder to understand and maintain.\n\n- **Rigid Application**:\n  - Design patterns should be seen as guidelines rather than strict rules. Developers should adapt patterns to fit the specific needs of the problem they are solving.\n\n- **Premature Optimization**:\n  - Introducing a design pattern too early, before the problem it solves actually arises, can lead to unnecessary complexity. It’s important to assess the problem thoroughly before deciding on the appropriate pattern.\n\n- **Learning Curve**:\n  - Understanding design patterns requires a good grasp of object-oriented principles and experience with complex software systems. While the benefits are significant, there can be a steep learning curve for newcomers.\n\n#### **Conclusion**\n\nDesign patterns are a critical aspect of modern software development. They encapsulate years of experience and best practices into reusable templates that can solve common design problems. However, the true value of design patterns lies in understanding the principles behind them, allowing developers to apply them judiciously to build scalable, maintainable, and flexible software systems. By balancing the use of design patterns with simplicity and clarity, developers can create solutions that are both elegant and effective.","textOutputType":"markdown","textInputType":"TextArea"},"rating":10,"linkedQuestionsId":"a0fb1344-6e3c-4c70-bff6-afc904403515","order":0,"createdDate":{"$date":"2024-08-26T20:24:44.542Z"},"updatedDate":{"$date":"2024-08-26T20:24:44.542Z"},"uniqueId":"14bbc389-72e5-4848-be79-32a78aa1140e","__v":0}
{"_id":{"$oid":"66ccf072a0a1571395acb550"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some core Spring Framework questions that are commonly asked in interviews or when discussing the Spring Framework:\n\n### **General Spring Framework Questions**\n1. **What is the Spring Framework?**\n2. **What are the main features of the Spring Framework?**\n3. **Explain the concept of Dependency Injection (DI) in Spring.**\n4. **What is Inversion of Control (IoC)? How is it related to Dependency Injection?**\n5. **What are the different types of Dependency Injection in Spring?**\n6. **What is the Spring IoC container?**\n7. **How does Spring IoC container manage beans?**\n8. **What are Spring beans?**\n9. **How do you define a bean in Spring?**\n10. **What are the different scopes of Spring beans?**\n11. **Explain the difference between `singleton` and `prototype` bean scopes.**\n12. **What is a Spring configuration file?**\n13. **What is Spring Boot? How does it relate to the Spring Framework?**\n14. **Explain the concept of aspect-oriented programming (AOP) in Spring.**\n15. **What are the different types of AOP advice in Spring?**\n16. **How is AOP implemented in Spring?**\n17. **What is Spring's `@Autowired` annotation? How does it work?**\n18. **What are the different ways to inject dependencies in Spring?**\n19. **What is the purpose of the `@Qualifier` annotation in Spring?**\n20. **What is Spring's `@Primary` annotation? How does it work?**\n21. **What are Spring profiles? How do you use them?**\n22. **What is the `ApplicationContext` in Spring? How is it different from `BeanFactory`?**\n23. **What are the different types of `ApplicationContext` in Spring?**\n24. **How do you handle transactions in Spring?**\n25. **What is the role of `@Transactional` in Spring?**\n26. **Explain the concept of Spring Data. How does it simplify data access?**\n27. **What is Spring Security? How does it integrate with Spring applications?**\n28. **What is Spring MVC? How does it work?**\n29. **How do you configure a Spring MVC application?**\n30. **What is a DispatcherServlet in Spring MVC?**\n31. **Explain the concept of REST in the context of Spring.**\n32. **How do you create a RESTful web service using Spring?**\n33. **What is Spring's `@RestController` annotation? How does it differ from `@Controller`?**\n34. **What is the difference between `@RequestMapping` and `@GetMapping`/`@PostMapping`?**\n35. **What are Spring's `@PathVariable` and `@RequestParam` annotations?**\n36. **How do you handle exceptions in Spring MVC?**\n37. **What is Spring's `@ExceptionHandler` annotation?**\n38. **How does Spring manage database connections?**\n39. **What is Spring's `JdbcTemplate`?**\n40. **How do you manage transactions in Spring using `@Transactional`?**\n\n### **Advanced Spring Framework Questions**\n1. **Explain the Spring Bean Lifecycle.**\n2. **What are the different ways to configure Spring beans? (XML, Java Configuration, Annotations)**\n3. **What is Spring Boot Auto-Configuration? How does it work?**\n4. **How does Spring Boot differ from the traditional Spring Framework?**\n5. **What is the purpose of `@Configuration` and `@Bean` in Spring?**\n6. **What is the `@ComponentScan` annotation in Spring? How does it work?**\n7. **How do you configure property files in Spring Boot?**\n8. **Explain the difference between `@Component`, `@Service`, `@Repository`, and `@Controller`.**\n9. **What is the difference between Spring's `@RestController` and `@Controller`?**\n10. **What is the role of `@RequestBody` and `@ResponseBody` in Spring?**\n11. **How do you implement security in a Spring application?**\n12. **What are Spring Boot Starters?**\n13. **What is Spring Boot Actuator?**\n14. **How do you monitor a Spring Boot application?**\n15. **What is Spring Cloud? How does it relate to microservices architecture?**\n16. **What is Spring's `@Async` annotation? How does it work?**\n17. **How do you manage asynchronous processing in Spring?**\n18. **Explain the role of `@Scheduled` annotation in Spring.**\n19. **What is Spring's `@Cacheable` annotation? How does caching work in Spring?**\n20. **How do you secure a REST API in Spring?**\n\n### **Spring Data and Persistence**\n1. **What is Spring Data JPA?**\n2. **How do you configure JPA in a Spring application?**\n3. **What is the role of `EntityManager` in Spring?**\n4. **What are Spring Repositories? How do they simplify data access?**\n5. **Explain the difference between `CrudRepository`, `JpaRepository`, and `PagingAndSortingRepository`.**\n6. **How do you use query methods in Spring Data JPA?**\n7. **What is the purpose of `@Query` annotation in Spring Data JPA?**\n8. **How does Spring handle transactions with JPA?**\n9. **What is the role of `@Entity`, `@Table`, and `@Id` annotations in JPA?**\n10. **Explain the difference between lazy and eager fetching in JPA.**\n\nThese questions cover a wide range of topics within the Spring Framework and can serve as a good starting point for understanding its core concepts, features, and best practices.","textOutputType":"markdown","textInputType":"TextArea"},"rating":10,"linkedQuestionsId":"6b0113b7-61fd-4b20-82cf-712b0f4eaaa1","order":0,"createdDate":{"$date":"2024-08-26T21:15:30.475Z"},"updatedDate":{"$date":"2024-08-26T21:15:30.475Z"},"uniqueId":"35c8d2ae-2a3a-4349-bf01-07ac8360db97","__v":0}
{"_id":{"$oid":"66cd40721b8f0414e8ce6ce8"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### What is Apache Ivy?\n\nApache Ivy is a dependency management tool integrated with Apache Ant, designed to handle the retrieval, configuration, and management of project dependencies. It provides a flexible and robust way to manage libraries and resources that a project depends on, simplifying the build process by automating the resolution of dependencies from various repositories.\n\n### Key Features of Apache Ivy:\n\n- **Dependency Resolution**: Ivy automatically resolves and downloads dependencies from various repositories, ensuring that all necessary libraries are available for your project.\n- **Integration with Ant**: Ivy seamlessly integrates with Apache Ant, extending its capabilities to manage dependencies without requiring significant changes to the existing build scripts.\n- **Custom Repositories**: Ivy allows developers to define custom repositories for retrieving dependencies, whether they are hosted locally, on a company server, or in public repositories like Maven Central.\n- **Transitive Dependencies**: Ivy manages transitive dependencies (dependencies of dependencies) automatically, ensuring that all required libraries are included in the build process.\n- **Conflict Management**: Ivy can handle version conflicts by applying strategies like \"latest version\" or \"fixed version,\" allowing you to manage multiple versions of the same dependency.\n- **Flexible Configuration**: Ivy supports various configurations for dependencies, enabling different sets of dependencies for different build environments (e.g., development, testing, production).\n\n### How Ivy Works with Ant:\n\n1. **Define Dependencies**: In your project, you specify dependencies using an `ivy.xml` file. This file lists all the libraries and their versions that your project needs.\n   \n2. **Ivy Task in Ant**: Ivy provides a set of Ant tasks to resolve and retrieve these dependencies. You can include Ivy tasks in your Ant build script (`build.xml`), where Ivy will download the necessary libraries before the build process begins.\n\n3. **Automatic Download**: When you run the Ant build script, Ivy automatically checks for the dependencies in the specified repositories, downloads them if they are missing, and places them in the appropriate directories.\n\n4. **Build Process**: Once all dependencies are resolved and downloaded, the Ant build process proceeds as usual, using the libraries and resources managed by Ivy.\n\n### Benefits of Using Ivy with Ant:\n\n- **Simplifies Dependency Management**: By automating the process of retrieving and managing dependencies, Ivy reduces the manual effort required to ensure that all necessary libraries are included in your project.\n- **Consistency Across Environments**: Ivy ensures that all developers and build environments use the same versions of dependencies, reducing issues related to \"it works on my machine.\"\n- **Modularity**: Ivy's use of `ivy.xml` files allows for a modular approach to dependency management, where different modules of a project can specify their own dependencies.\n- **Flexibility**: With Ivy, you can easily switch between different versions of a dependency or add new repositories without making significant changes to the build process.\n\n### Conclusion:\n\nApache Ivy is a powerful tool that complements Apache Ant by adding robust dependency management capabilities. It simplifies the build process, ensures consistency across environments, and reduces the complexity of managing project dependencies, making it an invaluable addition to any Ant-based build system.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"872e9fd3-8812-486c-bcdd-ab93dc8aa8b6","order":0,"createdDate":{"$date":"2024-08-27T02:56:50.312Z"},"updatedDate":{"$date":"2024-08-27T02:56:50.312Z"},"uniqueId":"fcfccf2e-5eb8-4d00-9723-0e718dc7e117","__v":0}
{"_id":{"$oid":"66cd416f1b8f0414e8ce8475"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Brief Version History of Apache Ant\n\n- **Ant 1.1 (July 2000)**:\n  - The first official release of Apache Ant after its initial development as part of the Apache Tomcat project.\n  - Established the core concepts of Ant, such as tasks, targets, and properties.\n\n- **Ant 1.2 (October 2000)**:\n  - Added new tasks and improved the handling of properties and build files.\n  - Introduced support for the XML build file format, which became a standard.\n\n- **Ant 1.3 (March 2001)**:\n  - Significant performance improvements.\n  - Introduction of new core tasks and improved documentation.\n\n- **Ant 1.4 (August 2001)**:\n  - Enhanced support for conditional compilation and file handling.\n  - New features like patternsets and token filters were introduced.\n\n- **Ant 1.5 (July 2002)**:\n  - Introduced the concept of nested elements within tasks for more flexible configurations.\n  - Enhanced internationalization support and introduced new core tasks.\n\n- **Ant 1.6 (December 2003)**:\n  - Added support for macrodef and scriptdef tasks, which allow users to define custom tasks.\n  - Improved handling of classpaths and introduced the `antlib` concept for organizing tasks.\n\n- **Ant 1.7 (January 2007)**:\n  - Introduced resource collections for better file handling and resource management.\n  - Added support for new file and directory-based operations.\n\n- **Ant 1.8 (April 2010)**:\n  - Enhanced support for scripting with additional scripting languages.\n  - Improved task documentation and introduced new tasks like `parallel` and `async`.\n\n- **Ant 1.9 (April 2013)**:\n  - Focused on performance improvements and bug fixes.\n  - Added new tasks for working with archives and network resources.\n\n- **Ant 1.10 (January 2017)**:\n  - Enhanced support for Java 8 and beyond, reflecting the evolution of the Java ecosystem.\n  - Improved handling of complex build processes and introduced new tasks for modern development needs.\n\n- **Ant 1.10.x (Ongoing Updates)**:\n  - Continuous improvements, including bug fixes, new features, and support for newer Java versions.\n  - Focus on maintaining compatibility with modern development practices and environments.\n\n### Conclusion\n\nApache Ant has evolved significantly since its inception, expanding its feature set and improving its performance to meet the changing needs of developers. Over the years, it has remained a reliable tool for automating build processes in Java projects, with ongoing updates to keep it relevant in the modern development landscape.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"4952d926-8ebd-4de4-bf70-5541e7edb876","order":0,"createdDate":{"$date":"2024-08-27T03:01:03.368Z"},"updatedDate":{"$date":"2024-08-27T03:01:03.368Z"},"uniqueId":"92d6be78-0d6c-4bf9-832f-aa867be1d54c","__v":0}
{"_id":{"$oid":"66cd43c11b8f0414e8ced474"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Comparison: Ant vs. Maven vs. Make\n\n#### 1. **Overview**\n- **Apache Ant**:\n  - **Language**: Java\n  - **Purpose**: Ant is a flexible build tool primarily used in Java projects, providing a task-based approach to automate the build process. It uses XML to define build processes and tasks.\n  \n- **Apache Maven**:\n  - **Language**: Java\n  - **Purpose**: Maven is a build automation tool that manages a project's build, reporting, and documentation from a central Project Object Model (POM). It emphasizes convention over configuration, automating many of the repetitive aspects of building Java projects.\n\n- **Make**:\n  - **Language**: C/C++\n  - **Purpose**: Make is one of the oldest and most widely used build tools, particularly for compiling C and C++ projects. It uses `Makefiles` to define how to derive the target program from its source files.\n\n#### 2. **Build Configuration**\n- **Ant**:\n  - **Configuration**: Uses XML-based build files (`build.xml`) where developers define tasks and their dependencies.\n  - **Flexibility**: Highly flexible; can be used to build a wide range of applications. However, this flexibility can lead to complex and hard-to-maintain build scripts.\n  \n- **Maven**:\n  - **Configuration**: Uses an XML-based POM file (`pom.xml`) where the project structure, dependencies, plugins, and build lifecycle are defined.\n  - **Convention over Configuration**: Maven uses conventions to reduce the need for extensive configuration, leading to simpler and more standardized project setups.\n  \n- **Make**:\n  - **Configuration**: Uses a `Makefile` where developers define rules for how to build the target executable from source files. It is based on the dependency graph and timestamps.\n  - **Flexibility**: Provides a rule-based approach, allowing developers to define custom build commands. It is highly suited for compiling and linking C/C++ programs but can be used for other tasks as well.\n\n#### 3. **Dependency Management**\n- **Ant**:\n  - **Dependency Management**: Ant doesn’t have built-in dependency management. However, Ant can integrate with Apache Ivy for dependency management, allowing it to resolve dependencies from repositories.\n\n- **Maven**:\n  - **Dependency Management**: Maven has powerful built-in dependency management. Dependencies are automatically downloaded from central repositories, and Maven handles transitive dependencies, making it easier to manage complex projects.\n\n- **Make**:\n  - **Dependency Management**: Make does not have built-in dependency management. Dependencies must be manually specified in the `Makefile`, and external tools or custom scripts are often used to handle library dependencies.\n\n#### 4. **Project Lifecycle Management**\n- **Ant**:\n  - **Lifecycle Management**: Ant doesn’t have a formal lifecycle. The developer manually defines the sequence of tasks that need to be executed. This provides flexibility but requires more effort to set up complex builds.\n\n- **Maven**:\n  - **Lifecycle Management**: Maven has a predefined lifecycle with standard phases like `validate`, `compile`, `test`, `package`, `verify`, `install`, and `deploy`. This structure provides a consistent way to build and manage projects across different environments.\n\n- **Make**:\n  - **Lifecycle Management**: Make doesn’t have a built-in concept of a lifecycle. The `Makefile` defines the steps, and the order in which targets are built is determined by the dependencies specified.\n\n#### 5. **Ease of Use**\n- **Ant**:\n  - **Ease of Use**: Ant is more flexible but requires more setup. It can be easy to start with, but large projects can lead to complicated build scripts due to the lack of a standard structure.\n  \n- **Maven**:\n  - **Ease of Use**: Maven’s convention over configuration approach simplifies the initial setup, and its standardized project structure makes it easier to work with. However, customizing Maven can sometimes be more difficult due to its strict conventions.\n\n- **Make**:\n  - **Ease of Use**: Make is straightforward for small C/C++ projects but can become complex as the project grows, especially if it involves multiple modules or complex dependency trees.\n\n#### 6. **Ecosystem and Integration**\n- **Ant**:\n  - **Ecosystem**: Ant is widely supported and integrates well with various tools in the Java ecosystem. It can be extended with custom tasks and integrates with CI tools like Jenkins.\n\n- **Maven**:\n  - **Ecosystem**: Maven has a robust ecosystem with a large number of plugins available for different tasks. It integrates seamlessly with CI/CD tools, repositories like Nexus or Artifactory, and IDEs like IntelliJ IDEA and Eclipse.\n\n- **Make**:\n  - **Ecosystem**: Make is a standard tool in the C/C++ ecosystem and is widely supported on UNIX-like systems. It integrates well with traditional C/C++ compilers and linkers, and can be used in conjunction with other tools like CMake for larger projects.\n\n#### 7. **Popularity and Use Cases**\n- **Ant**:\n  - **Popularity**: Popular in the early 2000s, Ant is still used in legacy systems and projects requiring fine-grained control over the build process.\n  - **Use Cases**: Suitable for projects that need custom build logic, and where developers prefer or need to define the build process manually.\n\n- **Maven**:\n  - **Popularity**: Maven is the de facto standard for Java projects, especially in enterprise environments. It is widely used for both small and large projects.\n  - **Use Cases**: Best suited for standardized Java projects where dependency management and a consistent build lifecycle are priorities.\n\n- **Make**:\n  - **Popularity**: Make remains the standard build tool for C/C++ projects, particularly in UNIX/Linux environments.\n  - **Use Cases**: Ideal for C/C++ projects, especially those that need to be built across different platforms or require custom build rules.\n\n### Conclusion\n\n- **Ant** provides flexibility but requires more manual configuration.\n- **Maven** offers a more standardized approach with strong dependency management, suitable for most Java projects.\n- **Make** is ideal for C/C++ projects, providing powerful control over the build process but requiring more manual management of dependencies.","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"fe639081-a5b2-408b-bc36-ab96ccf807ab","order":0,"createdDate":{"$date":"2024-08-27T03:10:57.539Z"},"updatedDate":{"$date":"2024-08-27T03:10:57.539Z"},"uniqueId":"c87615fb-d747-4686-a320-dc54fb8781f5","__v":0}
{"_id":{"$oid":"66cd44b51b8f0414e8cf0ace"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"<p>### Sample Java \"Hello World\" Program</p><p>```java<br>package com.example.helloworld;</p><p>public class HelloWorld {<br>&nbsp; &nbsp;public static void main(String[] args) {<br>&nbsp; &nbsp; &nbsp; &nbsp;System.out.println(\"Hello, World!\");<br>&nbsp; &nbsp;}<br>}<br>```</p><p>### Ant Build File (`build.xml`)</p><p>```xml<br>&lt;project name=\"HelloWorld\" default=\"compile\" basedir=\".\"&gt;<br>&nbsp; &nbsp;<br>&nbsp; &nbsp;&lt;!-- Define directories --&gt;<br>&nbsp; &nbsp;&lt;property name=\"src.dir\" value=\"src\"/&gt;<br>&nbsp; &nbsp;&lt;property name=\"build.dir\" value=\"build\"/&gt;<br>&nbsp; &nbsp;&lt;property name=\"classes.dir\" value=\"${build.dir}/classes\"/&gt;<br>&nbsp; &nbsp;&lt;property name=\"jar.dir\" value=\"${build.dir}/jar\"/&gt;<br>&nbsp; &nbsp;&lt;property name=\"javadoc.dir\" value=\"${build.dir}/javadoc\"/&gt;</p><p>&nbsp; &nbsp;&lt;!-- Clean the build directory --&gt;<br>&nbsp; &nbsp;&lt;target name=\"clean\"&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;delete dir=\"${build.dir}\"/&gt;<br>&nbsp; &nbsp;&lt;/target&gt;</p><p>&nbsp; &nbsp;&lt;!-- Compile the Java files --&gt;<br>&nbsp; &nbsp;&lt;target name=\"compile\" depends=\"clean\"&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;mkdir dir=\"${classes.dir}\"/&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;javac srcdir=\"${src.dir}\" destdir=\"${classes.dir}\"/&gt;<br>&nbsp; &nbsp;&lt;/target&gt;</p><p>&nbsp; &nbsp;&lt;!-- Create the JAR file --&gt;<br>&nbsp; &nbsp;&lt;target name=\"jar\" depends=\"compile\"&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;mkdir dir=\"${jar.dir}\"/&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;jar destfile=\"${jar.dir}/helloworld.jar\" basedir=\"${classes.dir}\"/&gt;<br>&nbsp; &nbsp;&lt;/target&gt;</p><p>&nbsp; &nbsp;&lt;!-- Generate Javadoc --&gt;<br>&nbsp; &nbsp;&lt;target name=\"javadoc\" depends=\"compile\"&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;mkdir dir=\"${javadoc.dir}\"/&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp;&lt;javadoc sourcepath=\"${src.dir}\" destdir=\"${javadoc.dir}\"/&gt;<br>&nbsp; &nbsp;&lt;/target&gt;</p><p>&nbsp; &nbsp;&lt;!-- Default target --&gt;<br>&nbsp; &nbsp;&lt;target name=\"all\" depends=\"jar, javadoc\"/&gt;<br>&nbsp; &nbsp;<br>&lt;/project&gt;<br>```</p><p>### Explanation<br>- **clean**: Deletes the build directory to ensure a fresh start.<br>- **compile**: Compiles the Java source files from the `src` directory into the `classes` directory.<br>- **jar**: Packages the compiled classes into a JAR file located in the `jar` directory.<br>- **javadoc**: Generates Javadoc documentation for the source code.<br>- **all**: Combines the `jar` and `javadoc` targets to build the project and generate documentation in one go.</p>","textOutputType":"html","textInputType":"CKEditor"},"rating":9,"linkedQuestionsId":"deb43fbb-b216-4522-86d1-b2fb2f845a93","order":0,"createdDate":{"$date":"2024-08-27T03:15:01.762Z"},"updatedDate":{"$date":"2024-08-27T03:15:01.762Z"},"uniqueId":"cc6847e4-00cf-4c63-b9f0-b6903fdf97ff","__v":0}
{"_id":{"$oid":"66cd4a571b8f0414e8d073c6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some popular Java ORM frameworks:\n\n### 1. **Hibernate**\n- **Overview**: One of the most widely used ORM frameworks in the Java ecosystem.\n- **Features**: Provides a comprehensive set of features for object-relational mapping, including support for various database systems, caching, and lazy loading.\n- **Website**: [Hibernate](https://hibernate.org/)\n\n### 2. **Java Persistence API (JPA)**\n- **Overview**: A specification for ORM in Java, not a framework itself. It provides a set of annotations and interfaces for ORM. Hibernate is an implementation of JPA.\n- **Features**: Standardized API for ORM, works with various JPA implementations.\n- **Website**: [JPA Documentation](https://jakarta.ee/specifications/persistence/)\n\n### 3. **EclipseLink**\n- **Overview**: The reference implementation of JPA and an ORM framework.\n- **Features**: Supports a variety of data access technologies, including JPA, JAXB, and more.\n- **Website**: [EclipseLink](https://www.eclipse.org/eclipselink/)\n\n### 4. **OpenJPA**\n- **Overview**: An Apache project that provides an implementation of JPA.\n- **Features**: Offers extensive JPA support and integrates well with other Apache projects.\n- **Website**: [OpenJPA](https://openjpa.apache.org/)\n\n### 5. **MyBatis**\n- **Overview**: A persistence framework that simplifies database interactions using SQL.\n- **Features**: Provides mapping of SQL queries to objects, allowing for more control over SQL execution compared to traditional ORM frameworks.\n- **Website**: [MyBatis](https://mybatis.org/mybatis-3/)\n\n### 6. **Spring Data JPA**\n- **Overview**: Part of the Spring Data project, it simplifies the use of JPA in Spring applications.\n- **Features**: Provides repository abstraction, query derivation from method names, and more.\n- **Website**: [Spring Data JPA](https://spring.io/projects/spring-data-jpa)\n\n### 7. **JOOQ (Java Object Oriented Querying)**\n- **Overview**: A library for building type-safe SQL queries in Java.\n- **Features**: Offers a fluent API for constructing SQL queries and executing them, focusing on SQL rather than pure object-relational mapping.\n- **Website**: [JOOQ](https://www.jooq.org/)\n\n### 8. **Datanucleus**\n- **Overview**: A JDO (Java Data Objects) and JPA implementation.\n- **Features**: Supports a wide range of data stores including relational databases, NoSQL databases, and more.\n- **Website**: [DataNucleus](https://www.datanucleus.org/)\n\n### 9. **Couchbase Java SDK**\n- **Overview**: While not a traditional ORM, it provides SDK support for interacting with Couchbase, a NoSQL database.\n- **Features**: Integrates with Couchbase’s capabilities and provides mapping capabilities similar to ORM.\n- **Website**: [Couchbase Java SDK](https://docs.couchbase.com/java-sdk/current/hello-world.html)\n\nEach of these frameworks has its strengths and use cases, and the choice of framework depends on the specific requirements of your project and your familiarity with the tools.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"5633ebd0-a319-4d95-99a6-5fc42ddd5cca","order":0,"createdDate":{"$date":"2024-08-27T03:39:03.866Z"},"updatedDate":{"$date":"2024-08-27T03:39:03.866Z"},"uniqueId":"849aaad3-48dd-4bfd-892c-dd68d4d63165","__v":0}
{"_id":{"$oid":"66cd5d601b8f0414e8d30187"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Organizing life can be approached in several ways, depending on what areas you want to focus on. Here’s a general framework you might find helpful:\n\n### 1. **Set Clear Goals**\n   - **Personal Goals**: Health, hobbies, relationships\n   - **Professional Goals**: Career development, skills acquisition\n   - **Financial Goals**: Budgeting, saving, investing\n\n### 2. **Create a Routine**\n   - **Daily Routine**: Morning habits, work schedule, evening wind-down\n   - **Weekly Routine**: Planning sessions, chores, social activities\n   - **Monthly/Yearly Routine**: Long-term projects, goal reviews\n\n### 3. **Prioritize Tasks**\n   - **Use a Task Manager**: Apps like Todoist, Trello, or a simple to-do list\n   - **Eisenhower Matrix**: Urgent vs. Important\n\n### 4. **Declutter**\n   - **Physical Space**: Regularly clean and organize your environment\n   - **Digital Space**: Organize files, unsubscribe from unnecessary emails\n\n### 5. **Track Progress**\n   - **Journals/Notebooks**: Track achievements, reflect on setbacks\n   - **Apps**: Habit trackers, goal-setting apps\n\n### 6. **Maintain Balance**\n   - **Work-Life Balance**: Allocate time for work and personal life\n   - **Health**: Regular exercise, balanced diet, adequate sleep\n\n### 7. **Review and Adjust**\n   - **Regular Check-ins**: Monthly or quarterly reviews of goals and routines\n   - **Flexibility**: Be ready to adjust plans as life changes\n\nImplementing these steps can help bring structure and clarity to your life.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"0e8c41d2-03a3-426a-ba93-382e0654dc09","order":0,"createdDate":{"$date":"2024-08-27T05:00:16.733Z"},"updatedDate":{"$date":"2024-08-27T05:00:16.733Z"},"uniqueId":"829fdf97-97e8-4230-a69d-75ca3cc27ccf","__v":0}
{"_id":{"$oid":"66cd5e8f1b8f0414e8d3380c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"HAProxy (High Availability Proxy) is a popular open-source software solution that provides high availability, load balancing, and proxying for TCP and HTTP-based applications. It is widely used to improve the scalability and reliability of applications by distributing incoming traffic across multiple backend servers.\n\n### Key Features of HAProxy\n\n1. **Load Balancing**: HAProxy distributes incoming requests across multiple servers to balance the load and ensure that no single server becomes a bottleneck. It supports various load-balancing algorithms, such as round-robin, least connections, and IP hash.\n\n2. **High Availability**: It helps achieve high availability by ensuring that if one backend server fails, the traffic is automatically redirected to other healthy servers. HAProxy can also work with other tools for failover and redundancy.\n\n3. **Proxying**: HAProxy can act as a reverse proxy, forwarding client requests to backend servers and returning the responses to clients. This can help in hiding the backend server details from the clients and consolidating traffic.\n\n4. **SSL Termination**: It can handle SSL/TLS encryption, offloading the SSL processing from backend servers. This improves performance and simplifies certificate management.\n\n5. **Health Checks**: HAProxy performs regular health checks on backend servers to ensure they are operational. If a server fails a health check, it is automatically removed from the load-balancing pool until it recovers.\n\n6. **Session Persistence**: It supports session persistence (stickiness), ensuring that a client’s requests are always routed to the same backend server during a session, which is useful for applications that require session-specific data.\n\n7. **Caching**: HAProxy can cache responses to reduce the load on backend servers and improve response times for frequently requested content.\n\n8. **Logging and Monitoring**: It provides detailed logging and monitoring capabilities, allowing administrators to track performance metrics, detect issues, and analyze traffic patterns.\n\n9. **Traffic Management**: HAProxy supports advanced traffic management features, including request and response rewriting, URL routing, and traffic shaping.\n\n10. **Configuration Flexibility**: It offers a highly flexible configuration language that allows fine-tuning of load-balancing and proxying behavior.\n\n### Basic Configuration Example\n\nHere is a basic example of an HAProxy configuration file (`haproxy.cfg`) for load balancing HTTP traffic:\n\n```plaintext\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n    chroot /var/lib/haproxy\n    stats socket /var/lib/haproxy/stats\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log     global\n    option  httplog\n    option  dontlognull\n    timeout connect 5000ms\n    timeout client  50000ms\n    timeout server  50000ms\n\nfrontend http_front\n    bind *:80\n    default_backend http_back\n\nbackend http_back\n    balance roundrobin\n    server web1 192.168.1.1:80 check\n    server web2 192.168.1.2:80 check\n```\n\n### Summary\n\nHAProxy is a powerful tool for managing and optimizing network traffic through load balancing and proxying. It helps improve the performance, reliability, and scalability of applications by distributing traffic efficiently, handling failures gracefully, and providing advanced features for managing network traffic. Its flexibility and performance make it a popular choice for high-traffic environments and enterprise applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"f6ac2af4-5c27-4502-8086-b5703178e3b7","order":0,"createdDate":{"$date":"2024-08-27T05:05:19.107Z"},"updatedDate":{"$date":"2024-08-27T05:05:19.107Z"},"uniqueId":"c8eedef6-dccb-4a24-8dc9-e6a8835a2e9d","__v":0}
{"_id":{"$oid":"66cd5f261b8f0414e8d3532a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Version control is a system that manages changes to source code or other collections of files over time. It allows multiple people to collaborate on the same project, keeps track of changes, and enables the recovery of previous versions of files. Version control is essential for managing the complexity of software development, ensuring consistency, and facilitating collaboration.\n\n### Key Benefits of Version Control\n\n1. **Track Changes**: Version control systems (VCS) track every change made to files, including who made the change, when it was made, and what was changed.\n2. **Collaboration**: Multiple people can work on the same project simultaneously without overwriting each other’s work.\n3. **Backup and Recovery**: It allows for easy recovery of previous versions of files, which helps in undoing mistakes and recovering from data loss.\n4. **Branching and Merging**: Developers can create branches to work on new features or fixes separately from the main codebase, and then merge these changes back into the main branch.\n5. **Audit Trail**: Provides a history of changes, which helps in understanding the evolution of the project and auditing changes for compliance.\n\n### Types of Version Control Systems\n\n1. **Local Version Control Systems**\n\n   - **Definition**: These systems keep track of changes in a single local repository on a user's machine.\n   - **Example**: RCS (Revision Control System).\n   - **Characteristics**: Basic functionality for tracking changes locally, but lacks collaborative features and centralized management.\n\n2. **Centralized Version Control Systems (CVCS)**\n\n   - **Definition**: These systems use a central server to store all versions of the files, and users check out and commit changes to this central repository.\n   - **Examples**: \n     - **Subversion (SVN)**: Allows users to work with a central repository and provides features like branching and merging.\n     - **CVS (Concurrent Versions System)**: An older system that provides version control features similar to SVN.\n   - **Characteristics**: Centralized storage makes collaboration and version tracking easier, but can be a single point of failure and lacks offline capabilities.\n\n3. **Distributed Version Control Systems (DVCS)**\n\n   - **Definition**: These systems allow each user to have a complete copy of the repository, including its history, on their local machine. Changes are committed locally and then synchronized with a central server or shared repository.\n   - **Examples**: \n     - **Git**: Highly popular and widely used for source code management, offering features like branching, merging, and collaborative workflows.\n     - **Mercurial**: Similar to Git but with a different design and command structure.\n     - **Bazaar**: Another distributed system with support for both centralized and decentralized workflows.\n   - **Characteristics**: Provides robust support for branching, merging, and offline work, with each user maintaining their own full repository.\n\n### Summary\n\nVersion control is a crucial aspect of modern software development and other fields that involve managing changes to files over time. By using version control systems, teams can collaborate more effectively, track changes, and maintain a history of their work. Different types of version control systems offer varying levels of functionality, from basic local tracking to advanced distributed collaboration. The choice of system depends on the specific needs of the project and team.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"de7952f0-c3f2-4f7f-8579-af7ac5db4378","order":0,"createdDate":{"$date":"2024-08-27T05:07:50.457Z"},"updatedDate":{"$date":"2024-08-27T05:07:50.457Z"},"uniqueId":"2f3cae77-f15d-4bd5-a9e0-8224432d3522","__v":0}
{"_id":{"$oid":"66cd60001b8f0414e8d36e85"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Git is a distributed version control system (DVCS) designed to handle everything from small to very large projects with speed and efficiency. Created by Linus Torvalds in 2005, Git has become one of the most widely used version control systems for source code management.\n\n### Key Features of Git\n\n1. **Distributed Architecture**: Each user has a complete copy of the repository, including its entire history. This means that work can be done offline and changes can be committed locally before being synchronized with others.\n\n2. **Branching and Merging**: Git makes it easy to create and manage branches, allowing users to work on features, fixes, or experiments in isolation from the main codebase. Branches can be merged back into the main branch (usually `main` or `master`) when changes are ready.\n\n3. **Speed**: Git is designed to be fast. Operations like committing changes, branching, and merging are optimized to be quick and efficient.\n\n4. **Data Integrity**: Git uses SHA-1 hashing to ensure the integrity of the data. Every file and commit is checksummed, and this checksum is used to detect corruption or unauthorized changes.\n\n5. **Staging Area**: Git includes a staging area (or index) where changes can be reviewed before being committed. This allows users to group related changes together in a single commit.\n\n6. **Commit History**: Git keeps a detailed history of all changes made to a repository. This history is a directed acyclic graph (DAG) of commits, which allows users to navigate and review the history of changes.\n\n7. **Collaboration**: Git supports collaborative workflows where multiple people can work on the same project simultaneously. It includes mechanisms for merging changes and resolving conflicts when multiple people have edited the same files.\n\n8. **Tagging**: Git allows users to tag specific points in history, often used to mark release versions or significant changes.\n\n9. **Support for Remote Repositories**: Git can synchronize with remote repositories hosted on platforms like GitHub, GitLab, and Bitbucket. This facilitates collaboration and sharing of code.\n\n### Basic Git Commands\n\n- **`git init`**: Initializes a new Git repository.\n- **`git clone <repository>`**: Clones an existing repository from a remote location.\n- **`git add <file>`**: Stages changes to be committed.\n- **`git commit -m \"message\"`**: Commits staged changes with a message.\n- **`git status`**: Shows the status of the working directory and staging area.\n- **`git pull`**: Fetches and merges changes from a remote repository.\n- **`git push`**: Pushes local changes to a remote repository.\n- **`git branch`**: Lists, creates, or deletes branches.\n- **`git merge <branch>`**: Merges changes from one branch into another.\n- **`git log`**: Shows the commit history.\n\n### Summary\n\nGit is a powerful and flexible version control system used by individuals and teams around the world to manage source code. Its distributed nature, efficiency, and rich feature set make it a popular choice for modern software development.","textOutputType":"markdown","textInputType":"TextArea"},"rating":10,"linkedQuestionsId":"f0fcc8e5-3c17-4690-8670-6139c7ba550c","order":0,"createdDate":{"$date":"2024-08-27T05:11:28.78Z"},"updatedDate":{"$date":"2024-08-27T05:11:28.78Z"},"uniqueId":"67f83085-3ffb-40e2-8d4d-718c12745c33","__v":0}
{"_id":{"$oid":"66cd6b4e1b8f0414e8d470bd"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Given my experience as a Java and ReactJS developer, I might consider studying the following topics to further your career:\n\n1. **Microservices Architecture**: Learn about designing and implementing microservices for scalable and maintainable applications.\n2. **Cloud Computing**: Explore AWS, Azure, or Google Cloud to understand cloud services, deployment, and management.\n3. **DevOps Practices**: Study CI/CD pipelines, Docker, Kubernetes, and automation tools to improve development workflows.\n4. **Data Science and Machine Learning**: Dive into data analysis, machine learning algorithms, and frameworks like TensorFlow or PyTorch.\n5. **Advanced Java and React**: Explore the latest features, libraries, and best practices in Java and ReactJS.\n6. **Security**: Learn about application security, ethical hacking, and best practices for securing applications.\n7. **Blockchain Technology**: Understand the fundamentals of blockchain, smart contracts, and decentralized applications.\n8. **Performance Optimization**: Study techniques for optimizing application performance, including profiling and scaling.\n9. **Software Architecture and Design Patterns**: Deepen your knowledge of software design principles and patterns.\n10. **Leadership and Management**: Consider topics related to project management, team leadership, and agile methodologies.\n\nThese topics can help you stay current and advance in your career.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"29a09a46-c308-48e7-8a96-4539926de7d8","order":0,"createdDate":{"$date":"2024-08-27T05:59:42.869Z"},"updatedDate":{"$date":"2024-08-27T05:59:42.869Z"},"uniqueId":"9a644a8c-e170-4188-9c92-ac8650f97cea","__v":0}
{"_id":{"$oid":"66cd77271b8f0414e8d94e0d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Ethical hacking involves testing computer systems, networks, or applications to identify and fix security vulnerabilities before malicious hackers can exploit them. Ethical hackers, also known as penetration testers or white-hat hackers, use the same techniques as malicious hackers but with permission from the system owner to improve security.","textOutputType":"markdown","textInputType":"TextArea"},"rating":9,"linkedQuestionsId":"f369d516-0a2c-4aa6-b87b-0d80b9a58e72","order":0,"createdDate":{"$date":"2024-08-27T06:50:15.33Z"},"updatedDate":{"$date":"2024-08-27T06:50:15.33Z"},"uniqueId":"4b84f486-6060-4878-aead-547e081b9f1c","__v":0}
{"_id":{"$oid":"66cd94351b8f0414e8daf431"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"An **Operating System (OS)** is software that manages hardware resources and provides services for computer programs. It acts as an intermediary between users and the computer hardware. Common examples include Windows, macOS, Linux, and Android.\n\n### Common Things a Developer Should Be Aware of Related to an OS:\n\n1. **Process Management:**\n   - **Processes and Threads**: Understanding how the OS manages processes and threads, including creation, scheduling, and termination.\n   - **Concurrency**: Handling multi-threading and synchronization issues.\n\n2. **Memory Management:**\n   - **Virtual Memory**: How the OS handles memory allocation, including paging and swapping.\n   - **Heap vs. Stack**: Understanding memory allocation in the stack and heap.\n\n3. **File Systems:**\n   - **File Operations**: Reading, writing, and manipulating files.\n   - **Permissions**: File and directory permissions and how to manage them.\n\n4. **Networking:**\n   - **Sockets**: Understanding how to use network sockets for communication.\n   - **Protocols**: Basic knowledge of TCP/IP, HTTP, and other networking protocols.\n\n5. **Security:**\n   - **User Authentication**: How the OS handles user permissions and authentication.\n   - **Security Policies**: Awareness of OS-level security features, such as firewalls and SELinux.\n\n6. **I/O Management:**\n   - **Device Drivers**: Understanding how the OS interfaces with hardware devices.\n   - **I/O Scheduling**: How the OS manages input and output operations.\n\n7. **Shell and Command Line:**\n   - **Command Line Tools**: Proficiency in using shell commands and scripting (e.g., Bash, PowerShell).\n   - **Automation**: Automating tasks using shell scripts.\n\n8. **Development Tools:**\n   - **Compilers and Interpreters**: Understanding how the OS manages these tools.\n   - **Environment Configuration**: Setting up and managing development environments.\n\n9. **Inter-Process Communication (IPC):**\n   - **Pipes, Message Queues, Shared Memory**: Techniques for communication between processes.\n\n10. **System Calls:**\n    - **Interaction with OS**: How to use system calls for performing operations like file handling, process control, and networking.\n\n11. **Resource Management:**\n    - **CPU, Memory, Disk Usage**: Monitoring and optimizing resource usage.\n\n12. **Virtualization and Containers:**\n    - **Virtual Machines (VMs)**: Basics of running and managing VMs.\n    - **Containers**: Understanding containerization tools like Docker.\n\n### Importance:\nKnowing these aspects of an OS helps developers write efficient, secure, and optimized code that interacts well with the underlying system.","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"ca5a0c06-574e-47e1-83d3-de4eaeb17463","order":0,"createdDate":{"$date":"2024-08-27T08:54:13.959Z"},"updatedDate":{"$date":"2024-08-27T08:54:13.959Z"},"uniqueId":"2f5ecfbe-0a25-448d-90f0-e33bf73dbafd","__v":0}
{"_id":{"$oid":"66cd98411b8f0414e8db8d43"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Serialization in Java is the process of converting an object's state into a byte stream, so that the byte stream can be reverted back into a copy of the object. This is particularly useful for persisting objects to a file, transmitting objects over a network, or caching them in memory for later retrieval.\n\n### Key Concepts in Serialization\n\n1. **Serializable Interface**:\n   - To make an object serializable, the class must implement the `java.io.Serializable` interface. This is a marker interface, meaning it doesn't contain any methods; its presence tells the Java Virtual Machine (JVM) that objects of this class can be serialized.\n\n2. **ObjectOutputStream and ObjectInputStream**:\n   - `ObjectOutputStream` is used to serialize an object to a byte stream.\n   - `ObjectInputStream` is used to deserialize a byte stream back into an object.\n\n3. **Transient Keyword**:\n   - The `transient` keyword in Java is used to mark fields that should not be serialized. When an object is serialized, transient fields are ignored and not included in the byte stream.\n\n4. **SerialVersionUID**:\n   - The `serialVersionUID` is a unique identifier for each class, used during deserialization to verify that the sender and receiver of a serialized object maintain serialization compatibility with respect to the class definition. If the `serialVersionUID` of the loaded class does not match the `serialVersionUID` of the serialized object, a `InvalidClassException` is thrown.\n\n### Example of Serialization\n\n```java\nimport java.io.Serializable;\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\n\nclass Employee implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n    private String name;\n    private int age;\n    private transient String password; // This field will not be serialized\n\n    public Employee(String name, int age, String password) {\n        this.name = name;\n        this.age = age;\n        this.password = password;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{name='\" + name + \"', age=\" + age + \", password='\" + password + \"'}\";\n    }\n}\n\npublic class SerializationExample {\n    public static void main(String[] args) {\n        Employee employee = new Employee(\"John Doe\", 30, \"password123\");\n\n        // Serialize the object\n        try (FileOutputStream fileOut = new FileOutputStream(\"employee.ser\");\n             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {\n            out.writeObject(employee);\n            System.out.println(\"Serialized data is saved in employee.ser\");\n        } catch (IOException i) {\n            i.printStackTrace();\n        }\n\n        // Deserialize the object\n        Employee deserializedEmployee = null;\n        try (FileInputStream fileIn = new FileInputStream(\"employee.ser\");\n             ObjectInputStream in = new ObjectInputStream(fileIn)) {\n            deserializedEmployee = (Employee) in.readObject();\n            System.out.println(\"Deserialized Employee: \" + deserializedEmployee);\n        } catch (IOException | ClassNotFoundException i) {\n            i.printStackTrace();\n        }\n    }\n}\n```\n\n### Output\n```\nSerialized data is saved in employee.ser\nDeserialized Employee: Employee{name='John Doe', age=30, password='null'}\n```\n\n### Key Points:\n- In this example, the `Employee` class implements `Serializable`, allowing its objects to be serialized and deserialized.\n- The `password` field is marked as `transient`, so its value is not saved during serialization. As a result, when the object is deserialized, the `password` field is `null`.\n- The `serialVersionUID` ensures version compatibility during the serialization and deserialization process.\n\nSerialization is a powerful feature in Java that allows objects to be easily saved and restored, but it must be used with care, especially when dealing with sensitive data, as serialization can potentially expose the internal state of objects.","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"8579abd9-df78-4e2b-aa29-6da4e41f4e11","order":0,"createdDate":{"$date":"2024-08-27T09:11:29.226Z"},"updatedDate":{"$date":"2024-08-27T09:11:29.226Z"},"uniqueId":"75f72b38-f4fa-496d-93a5-606c87bb4612","__v":0}
{"_id":{"$oid":"66cdc0b41b8f0414e8de81ab"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, there are a few third-party libraries that can help convert SQL statements into equivalent JavaScript functions or objects. Here are a couple of them:\n\n### 1. **`sql-to-js`**\n   - This library can parse SQL statements and generate equivalent JavaScript code.\n   - It supports basic SQL operations and can be extended for more complex queries.\n\n   **Example Usage:**\n   ```javascript\n   const sqlToJs = require('sql-to-js');\n\n   const sql = 'SELECT * FROM users WHERE age > 30';\n   const jsCode = sqlToJs(sql);\n\n   console.log(jsCode);\n   ```\n\n### 2. **`alasql`**\n   - AlaSQL is a JavaScript SQL database library that allows you to run SQL queries directly in your JavaScript code.\n   - It can interpret SQL statements and execute them in-memory using JavaScript objects or arrays.\n\n   **Example Usage:**\n   ```javascript\n   const alasql = require('alasql');\n\n   const data = [{id: 1, name: 'John', age: 35}, {id: 2, name: 'Jane', age: 28}];\n   const result = alasql('SELECT * FROM ? WHERE age > 30', [data]);\n\n   console.log(result);\n   ```\n\n### 3. **`sql-parser`**\n   - `sql-parser` is a simple SQL parser that can be used to parse SQL statements into an Abstract Syntax Tree (AST), which you can then convert into JavaScript.\n\n   **Example Usage:**\n   ```javascript\n   const parser = require('sql-parser');\n\n   const sql = 'SELECT * FROM users WHERE age > 30';\n   const ast = parser.parse(sql);\n\n   console.log(JSON.stringify(ast, null, 2));\n   ```\n\nThese libraries can help in parsing and interpreting SQL statements within JavaScript, allowing you to work with SQL-like queries in a more JavaScript-friendly way.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"4fa8d778-b1f7-47c2-91c0-9c7217f4438f","order":0,"createdDate":{"$date":"2024-08-27T12:04:04.392Z"},"updatedDate":{"$date":"2024-08-27T12:04:04.392Z"},"uniqueId":"0740a0f5-35ec-4881-b48e-0e4b9578a57c","__v":0}
{"_id":{"$oid":"66ce13561b8f0414e8e08739"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Flexbox, or the Flexible Box Layout, is a CSS layout module designed to help you create flexible and responsive layouts easily. It allows you to distribute space along a container's main and cross axes and align items within a container in a way that is dynamic and adaptable to various screen sizes.\n\n### Key Concepts\n\n1. **Flex Container**: The parent element with `display: flex;` applied. This element becomes the flex container, and its direct children become flex items.\n\n2. **Flex Items**: The children of a flex container. These items are laid out according to the flexbox model.\n\n3. **Main Axis and Cross Axis**:\n   - **Main Axis**: The primary axis along which flex items are laid out (can be horizontal or vertical, depending on the `flex-direction`).\n   - **Cross Axis**: The axis perpendicular to the main axis.\n\n### Common Flexbox Properties\n\n- **For the Flex Container**:\n  - `display: flex;`: Defines the container as a flex container.\n  - `flex-direction`: Defines the direction of the main axis (row, column, row-reverse, column-reverse).\n  - `justify-content`: Aligns flex items along the main axis (start, center, space-between, space-around).\n  - `align-items`: Aligns flex items along the cross axis (stretch, center, flex-start, flex-end).\n  - `flex-wrap`: Specifies whether flex items should wrap onto multiple lines.\n\n- **For Flex Items**:\n  - `flex-grow`: Specifies how much a flex item should grow relative to the rest of the flex items.\n  - `flex-shrink`: Specifies how much a flex item should shrink relative to the rest of the flex items.\n  - `flex-basis`: Defines the initial size of a flex item before space distribution.\n  - `align-self`: Allows individual flex items to be aligned differently than the rest of the items on the cross axis.\n\n### Example\n\n```css\n.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  height: 100vh;\n}\n\n.item {\n  flex: 1;\n  margin: 10px;\n  background-color: lightcoral;\n  text-align: center;\n  padding: 20px;\n}\n```\n\n```html\n<div class=\"container\">\n  <div class=\"item\">Item 1</div>\n  <div class=\"item\">Item 2</div>\n  <div class=\"item\">Item 3</div>\n</div>\n```\n\n### Explanation\n\n- **`.container`**: The flex container with flexbox applied. It arranges its children (`.item`) in a row, distributes them evenly (`justify-content: space-between`), and centers them along the cross-axis (`align-items: center`).\n- **`.item`**: The flex items that are equally spaced and grow to fill the available space (`flex: 1`).\n\nFlexbox simplifies the process of creating complex layouts, especially for aligning elements, distributing space, and creating responsive designs without relying on float or positioning hacks.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"c4ef2572-9628-4c57-922d-4c3b045ee6ae","order":0,"createdDate":{"$date":"2024-08-27T17:56:38.902Z"},"updatedDate":{"$date":"2024-08-27T17:56:38.902Z"},"uniqueId":"0df5d4c2-d911-45ea-a263-b3fc77654355","__v":0}
{"_id":{"$oid":"66ce14061b8f0414e8e09d80"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The CSS Grid Layout, commonly referred to as \"Grid,\" is a powerful 2-dimensional layout system that allows you to create complex web layouts with rows and columns. Unlike Flexbox, which is a one-dimensional layout system (either rows or columns), Grid enables you to control both horizontal and vertical layout dimensions simultaneously.\n\n### Key Concepts\n\n1. **Grid Container**: The parent element with `display: grid;` applied. This container holds the grid items and defines the grid structure (rows, columns, gaps).\n\n2. **Grid Items**: The children of a grid container. These items are placed into the defined grid structure.\n\n3. **Grid Lines**: The dividing lines that separate rows and columns. They are used for positioning grid items.\n\n4. **Grid Tracks**: The space between two adjacent grid lines, essentially the rows and columns.\n\n5. **Grid Cell**: The space between four grid lines, the smallest unit in the grid.\n\n6. **Grid Area**: A rectangular space that a grid item can occupy, spanning one or more cells.\n\n### Common Grid Properties\n\n- **For the Grid Container**:\n  - `display: grid;`: Defines the container as a grid.\n  - `grid-template-columns`: Defines the number and size of columns.\n  - `grid-template-rows`: Defines the number and size of rows.\n  - `gap` or `grid-gap`: Sets the spacing between grid items (both rows and columns).\n  - `grid-template-areas`: Allows you to define named grid areas.\n\n- **For Grid Items**:\n  - `grid-column-start`, `grid-column-end`: Specifies the grid item's position and how many columns it spans.\n  - `grid-row-start`, `grid-row-end`: Specifies the grid item's position and how many rows it spans.\n  - `grid-area`: Can be used to position items within the grid by referring to named areas or defining start/end positions.\n\n### Example\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: 100px 200px;\n  gap: 10px;\n}\n\n.item1 {\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n  background-color: lightblue;\n}\n\n.item2 {\n  grid-column: 2 / 4;\n  grid-row: 2 / 3;\n  background-color: lightgreen;\n}\n```\n\n```html\n<div class=\"container\">\n  <div class=\"item1\">Item 1</div>\n  <div class=\"item2\">Item 2</div>\n  <div class=\"item3\">Item 3</div>\n</div>\n```\n\n### Explanation\n\n- **`.container`**: The grid container with a 3-column layout (`grid-template-columns: 1fr 2fr 1fr`) and 2 rows (`grid-template-rows: 100px 200px`). The `fr` unit is a fraction of the available space, so here, the middle column takes twice as much space as the others.\n- **`.item1`**: The first grid item spans the first two columns and the first row.\n- **`.item2`**: The second grid item spans the last two columns and the second row.\n- **`.item3`**: Automatically placed in the remaining grid space.\n\n### Named Grid Areas Example\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  grid-template-areas:\n    \"header header header\"\n    \"sidebar content content\";\n  gap: 10px;\n}\n\n.header {\n  grid-area: header;\n  background-color: lightcoral;\n}\n\n.sidebar {\n  grid-area: sidebar;\n  background-color: lightblue;\n}\n\n.content {\n  grid-area: content;\n  background-color: lightgreen;\n}\n```\n\n```html\n<div class=\"container\">\n  <div class=\"header\">Header</div>\n  <div class=\"sidebar\">Sidebar</div>\n  <div class=\"content\">Content</div>\n</div>\n```\n\n### Explanation\n\n- **Grid Areas**: The grid is divided into named areas: `header`, `sidebar`, and `content`.\n- **Item Placement**: The grid items are placed according to the grid area names defined in `grid-template-areas`.\n\n### Use Cases\n- **Creating Complex Layouts**: Use Grid to create layouts with multiple rows and columns, like dashboards, galleries, or complete page structures.\n- **Responsive Design**: Grid works well with media queries, allowing you to create responsive layouts that adapt to different screen sizes.\n\nGrid Layout is versatile and can handle almost any complex layout, making it a powerful tool for modern web design.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"08ea5b28-3915-427f-8541-63f335e7fb01","order":0,"createdDate":{"$date":"2024-08-27T17:59:34.57Z"},"updatedDate":{"$date":"2024-08-27T17:59:34.57Z"},"uniqueId":"6f135e40-71ee-42e9-b6cc-8f1794c82e94","__v":0}
{"_id":{"$oid":"66ce14d61b8f0414e8e0b3d5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Flexbox and Grid Layout are both powerful tools in CSS for creating responsive and complex layouts. The choice between them depends on the specific requirements of your design. Here’s a guide to help you decide when to use Flexbox or Grid Layout:\n\n### When to Use Flexbox\n\n**1. One-Dimensional Layouts:**\n   - **Flexbox** is ideal for layouts that require alignment and distribution of items in a single direction (either row or column).\n   - **Examples**: Navigation bars, horizontal or vertical lists, aligning buttons, simple component layouts.\n\n**2. Content that Needs to Distribute Space Along One Axis:**\n   - If you need to evenly distribute space between items or align items in a flexible way along a single axis (main or cross axis).\n   - **Examples**: Centering a group of buttons, spacing elements within a header or footer.\n\n**3. Smaller Components or Simple Layouts:**\n   - Flexbox is great for smaller UI components or simple layouts where the relationship between items is straightforward.\n   - **Examples**: Card components, form controls, image galleries with equal-width images.\n\n**4. Dynamic Content with Unknown Size:**\n   - If you have content whose size might change (e.g., dynamic text), Flexbox can handle it more gracefully.\n   - **Examples**: Flexible buttons or containers that need to adapt to varying amounts of content.\n\n### When to Use Grid Layout\n\n**1. Two-Dimensional Layouts:**\n   - **Grid** is perfect for layouts that require both rows and columns, allowing you to control the layout in both dimensions simultaneously.\n   - **Examples**: Entire page layouts, dashboards, complex forms, image galleries with fixed row and column arrangements.\n\n**2. Complex Layouts with Precise Control:**\n   - When you need precise control over the positioning and sizing of items within a grid, such as defining areas and spanning elements across multiple rows or columns.\n   - **Examples**: Magazine-style layouts, landing pages with different sections, product listing grids.\n\n**3. Overlapping Items:**\n   - Grid allows items to overlap, making it possible to create layered designs.\n   - **Examples**: Design-heavy layouts where elements might need to be placed on top of each other.\n\n**4. Aligning Items on Both Axes:**\n   - If you need to align items along both the horizontal and vertical axes, Grid provides more robust tools for this.\n   - **Examples**: Creating evenly spaced rows and columns that align both horizontally and vertically.\n\n### Combined Use of Flexbox and Grid\n\nIn many cases, you might find that a combination of both Flexbox and Grid Layout is the best approach:\n\n- **Grid** for the overall page structure (e.g., defining the main sections of a webpage).\n- **Flexbox** within individual components (e.g., aligning items within a card or navigation menu).\n\n### Summary\n\n- **Use Flexbox** for simpler, one-dimensional layouts where you need flexibility along a single axis.\n- **Use Grid Layout** for more complex, two-dimensional layouts where you need to define both rows and columns.\n- **Combine Flexbox and Grid** when a layout requires both approaches to manage different parts of a webpage or UI component.","textOutputType":"markdown","textInputType":"TextArea"},"rating":5,"linkedQuestionsId":"8c1728c9-c742-4985-a457-406335f18c08","order":0,"createdDate":{"$date":"2024-08-27T18:03:02.813Z"},"updatedDate":{"$date":"2024-08-27T18:03:02.813Z"},"uniqueId":"ddc29c5e-4e3c-40d8-89a8-e669c9b3c6aa","__v":0}
{"_id":{"$oid":"66ce15cd1b8f0414e8e0d540"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"SCSS (Sassy CSS) is a syntax of Sass (Syntactically Awesome Style Sheets), which is a CSS preprocessor. SCSS extends CSS with additional features, making it more powerful and easier to write and maintain complex stylesheets.\n\n### Key Features of SCSS\n\n1. **Variables**:\n   - Store reusable values such as colors, fonts, or sizes.\n   - **Example**:\n     ```scss\n     $primary-color: #333;\n     $font-stack: Arial, sans-serif;\n\n     body {\n       color: $primary-color;\n       font-family: $font-stack;\n     }\n     ```\n\n2. **Nesting**:\n   - Allows nesting of CSS selectors, reflecting the HTML structure.\n   - **Example**:\n     ```scss\n     .container {\n       .header {\n         background-color: #f8f9fa;\n       }\n       .content {\n         padding: 20px;\n         .item {\n           margin: 10px 0;\n         }\n       }\n     }\n     ```\n\n3. **Partials and Imports**:\n   - Split CSS into smaller, reusable files (partials) and import them into main stylesheets.\n   - **Example**:\n     ```scss\n     // _variables.scss\n     $primary-color: #333;\n\n     // _buttons.scss\n     .btn {\n       background-color: $primary-color;\n     }\n\n     // main.scss\n     @import 'variables';\n     @import 'buttons';\n     ```\n\n4. **Mixins**:\n   - Define reusable chunks of CSS code that can be included in multiple places.\n   - **Example**:\n     ```scss\n     @mixin border-radius($radius) {\n       border-radius: $radius;\n       -webkit-border-radius: $radius;\n       -moz-border-radius: $radius;\n     }\n\n     .box {\n       @include border-radius(10px);\n     }\n     ```\n\n5. **Inheritance**:\n   - Use `@extend` to inherit styles from one selector to another.\n   - **Example**:\n     ```scss\n     .base-button {\n       padding: 10px;\n       border: 1px solid #ccc;\n     }\n\n     .primary-button {\n       @extend .base-button;\n       background-color: #007bff;\n       color: white;\n     }\n     ```\n\n6. **Functions**:\n   - Define custom functions to perform calculations or operations.\n   - **Example**:\n     ```scss\n     @function calculate-rem($px) {\n       @return $px / 16px * 1rem;\n     }\n\n     body {\n       font-size: calculate-rem(16px);\n     }\n     ```\n\n### How to Use SCSS\n\n1. **Installation**:\n   - Install Sass (which includes SCSS) via npm or another package manager.\n     ```bash\n     npm install -g sass\n     ```\n\n2. **Compiling SCSS to CSS**:\n   - Use the Sass command-line tool or build tools to compile SCSS files into regular CSS files.\n     ```bash\n     sass input.scss output.css\n     ```\n\n3. **Integration**:\n   - Many build tools and frameworks support SCSS out of the box, allowing integration into your development workflow.\n\nSCSS enhances the capabilities of CSS, allowing for more maintainable and modular stylesheets. By using variables, nesting, mixins, and other features, you can write cleaner and more efficient CSS.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"a153722c-e089-44dd-92fe-7a2756c0a8b7","order":0,"createdDate":{"$date":"2024-08-27T18:07:09.254Z"},"updatedDate":{"$date":"2024-08-27T18:07:09.254Z"},"uniqueId":"747e9d23-bede-4dfa-a2fa-279cbaead484","__v":0}
{"_id":{"$oid":"66cede4c5a9d3155d967661f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"All coding question sequence\n- Write a Java method to convert given string array to stream\n- Write a Java method to convert list of strings to an array\n- Write a java program to create list of strings, from given string containing comma separated values\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":5,"linkedQuestionsId":"edeb6697-ff73-43f6-b5ad-9bf5a4c6196c","order":0,"createdDate":{"$date":"2024-08-28T08:22:36.214Z"},"updatedDate":{"$date":"2024-08-28T08:47:24.827Z"},"uniqueId":"ed5270d1-9c47-44d5-8ed3-ec1ec713fe7f","__v":0}
{"_id":{"$oid":"66cee11a5a9d3155d9677c6d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a Java method to convert a given `String` array to a `Stream`:\n\n```java\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\npublic class ArrayToStream {\n    public static Stream<String> convertArrayToStream(String[] array) {\n        return Arrays.stream(array);\n    }\n\n    public static void main(String[] args) {\n        String[] exampleArray = {\"apple\", \"banana\", \"cherry\"};\n        Stream<String> stream = convertArrayToStream(exampleArray);\n        \n        // Example usage\n        stream.forEach(System.out::println);\n    }\n}\n```\n\nIn this example, `Arrays.stream(array)` converts the `String` array into a `Stream<String>`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":6,"linkedQuestionsId":"d7db302b-0b9d-4bbf-84a4-9331819d37e4","order":0,"createdDate":{"$date":"2024-08-28T08:34:34.613Z"},"updatedDate":{"$date":"2024-08-28T08:34:34.613Z"},"uniqueId":"c0fd22bc-799a-4df2-bc3d-aa3ecb88990a","__v":0}
{"_id":{"$oid":"66cee26e5a9d3155d96792c6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a Java method to convert a `List<String>` to a `String[]` array:\n\n```java\nimport java.util.List;\n\npublic class ListToArray {\n    public static String[] convertListToArray(List<String> list) {\n        return list.toArray(new String[0]);\n    }\n\n    public static void main(String[] args) {\n        List<String> exampleList = List.of(\"apple\", \"banana\", \"cherry\");\n        String[] array = convertListToArray(exampleList);\n        \n        // Example usage\n        for (String item : array) {\n            System.out.println(item);\n        }\n    }\n}\n```\n\nIn this example, `list.toArray(new String[0])` converts the `List<String>` to a `String[]` array.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"e3748d84-35ab-434b-a6bf-f50ba8450922","order":0,"createdDate":{"$date":"2024-08-28T08:40:14.052Z"},"updatedDate":{"$date":"2024-08-28T08:40:14.052Z"},"uniqueId":"6c2bc2d3-1d6d-4662-8316-07323422bb28","__v":0}
{"_id":{"$oid":"66cee4a85a9d3155d967b45c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a Java program that creates a `List<String>` from a given `String` containing comma-separated values:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class CommaSeparatedToList {\n    public static List<String> createListFromCSV(String csv) {\n        return Arrays.asList(csv.split(\",\"));\n    }\n\n    public static void main(String[] args) {\n        String csv = \"apple,banana,cherry,orange\";\n        List<String> list = createListFromCSV(csv);\n        \n        // Example usage\n        list.forEach(System.out::println);\n    }\n}\n```\n\nIn this program:\n- The `split(\",\")` method splits the input string based on commas.\n- `Arrays.asList()` converts the resulting array into a `List<String>`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"1b77e134-55e4-491b-9d74-293f96dca906","order":0,"createdDate":{"$date":"2024-08-28T08:49:44.726Z"},"updatedDate":{"$date":"2024-08-28T08:49:44.726Z"},"uniqueId":"2589af53-533e-4b18-85e6-6bab0ef52cf6","__v":0}
{"_id":{"$oid":"66cee6cd5a9d3155d967f0cb"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `String` class in Java is immutable for several key reasons:\n\n1. **Security**: Strings are widely used for storing sensitive data such as usernames, passwords, and URLs. By making the `String` class immutable, Java ensures that once a `String` object is created, it cannot be altered, thus preventing malicious code from modifying these values.\n\n2. **Caching and Performance**: Since `String` objects are immutable, they can be safely shared across multiple threads without synchronization. Java implements a string pool, where identical strings are stored only once. When you create a new `String` with the same value as an existing one, Java reuses the existing object rather than creating a new one, which saves memory and improves performance.\n\n3. **Thread Safety**: Immutability inherently makes the `String` class thread-safe, as concurrent threads cannot modify its state. This eliminates the need for external synchronization when using strings in multi-threaded applications.\n\n4. **Class Loading and Security**: Strings are used as parameters in many Java class loaders. If `String` were mutable, an attacker could potentially modify the class name between the time it's passed to the class loader and when it’s actually loaded, leading to security risks.\n\n5. **Consistency in Hashing**: The immutability of strings ensures that the hash code of a `String` object is constant once it’s created. This is crucial for using strings as keys in hash-based collections like `HashMap` and `HashSet`, where a change in the hash code would break the collection's contract and lead to unpredictable behavior.\n\n6. **Ease of Use**: Immutability simplifies programming by eliminating concerns about the state changes of string objects, making it easier to reason about code that uses strings.\n\nThese reasons collectively make the `String` class in Java immutable, ensuring security, efficiency, and consistency across applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":8,"linkedQuestionsId":"c225a22a-5dab-4db0-bc14-160b41e5fd76","order":0,"createdDate":{"$date":"2024-08-28T08:58:53.987Z"},"updatedDate":{"$date":"2024-08-28T08:58:53.987Z"},"uniqueId":"f0504db5-099a-450e-bbaf-6b369f3aa24e","__v":0}
{"_id":{"$oid":"66cef3bf5a9d3155d96858ae"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The difference between JDK, JRE, and JVM lies in their roles in the Java programming environment:\n\n### 1. **JVM (Java Virtual Machine):**\n   - **Definition**: The JVM is an abstract computing machine that enables your computer to run Java programs. It interprets compiled Java bytecode and executes it on your machine.\n   - **Role**: It provides a runtime environment in which Java bytecode can be executed, ensuring Java’s platform independence by abstracting the underlying hardware and operating system.\n   - **Components**: Includes a class loader, memory area, execution engine, and garbage collector.\n   - **Note**: JVM is platform-dependent, meaning there’s a specific JVM implementation for each operating system.\n\n### 2. **JRE (Java Runtime Environment):**\n   - **Definition**: The JRE is a software package that provides the necessary environment to run Java applications. It includes the JVM along with libraries and other components needed to execute Java programs.\n   - **Role**: It is used to run already compiled Java programs. If you only want to run Java programs (not develop them), the JRE is sufficient.\n   - **Components**: Contains the JVM, core libraries, and other runtime components like Java class libraries.\n   - The JRE (Java Runtime Environment) is not platform-independent. The JRE itself is platform-dependent because it includes a platform-specific implementation of the Java Virtual Machine (JVM) and other native libraries that are specific to the operating system.\n      - However, the **Java programs** that run on the JRE are platform-independent because they are compiled into platform-independent bytecode. This bytecode can be executed on any system that has a compatible JRE installed, regardless of the underlying operating system. \n      - In summary:\n        - **JRE**: Platform-dependent (specific to the operating system).\n        - **Java Programs**: Platform-independent (due to the platform-independent bytecode).\n\n### 3. **JDK (Java Development Kit):**\n   - **Definition**: The JDK is a full-featured software development kit required to develop Java applications. It includes the JRE, along with development tools such as compilers (`javac`), debuggers, and other utilities.\n   - **Role**: It is used by developers to write, compile, and debug Java applications. The JDK is necessary if you want to develop Java applications.\n   - **Components**: Includes the JRE, development tools (compiler, debugger, etc.), and additional libraries needed for development.\n\n### **Summary:**\n- **JVM**: Executes Java bytecode and provides a runtime environment.\n- **JRE**: Includes the JVM and necessary libraries to run Java applications.\n- **JDK**: Includes the JRE and tools required for Java development.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"b572ddba-dcba-4a63-8cfa-0d7cfe2313a4","order":0,"createdDate":{"$date":"2024-08-28T09:54:07.167Z"},"updatedDate":{"$date":"2024-08-28T13:15:12.364Z"},"uniqueId":"6bf57a50-8570-4196-9aad-ec260fd40005","__v":0}
{"_id":{"$oid":"66cf250c5a9d3155d96b0c86"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `String` class in Java provides a wide range of methods for manipulating and working with strings. Some commonly used methods include:\n\n1. **`length()`**\n   - Returns the length of the string.\n   - Example: `int len = str.length();`\n\n2. **`charAt(int index)`**\n   - Returns the character at the specified index.\n   - Example: `char ch = str.charAt(0);`\n\n3. **`substring(int beginIndex)`**\n   - Returns a new string that is a substring of the original string, starting from the specified index.\n   - Example: `String sub = str.substring(2);`\n\n4. **`substring(int beginIndex, int endIndex)`**\n   - Returns a new string that is a substring of the original string, starting from `beginIndex` and ending at `endIndex - 1`.\n   - Example: `String sub = str.substring(2, 5);`\n\n5. **`toLowerCase()`**\n   - Converts all characters in the string to lowercase.\n   - Example: `String lower = str.toLowerCase();`\n\n6. **`toUpperCase()`**\n   - Converts all characters in the string to uppercase.\n   - Example: `String upper = str.toUpperCase();`\n\n7. **`trim()`**\n   - Removes leading and trailing whitespace from the string.\n   - Example: `String trimmed = str.trim();`\n\n8. **`replace(char oldChar, char newChar)`**\n   - Replaces all occurrences of a specified character with a new character.\n   - Example: `String replaced = str.replace('a', 'b');`\n\n9. **`replace(CharSequence target, CharSequence replacement)`**\n   - Replaces all occurrences of a specified sequence of characters with a new sequence.\n   - Example: `String replaced = str.replace(\"abc\", \"xyz\");`\n\n10. **`contains(CharSequence s)`**\n    - Checks if the string contains the specified sequence of characters.\n    - Example: `boolean result = str.contains(\"test\");`\n\n11. **`equals(Object obj)`**\n    - Compares the string to the specified object. Returns `true` if they are equal.\n    - Example: `boolean isEqual = str.equals(\"Hello\");`\n\n12. **`equalsIgnoreCase(String anotherString)`**\n    - Compares the string to another string, ignoring case considerations.\n    - Example: `boolean isEqual = str.equalsIgnoreCase(\"hello\");`\n\n13. **`startsWith(String prefix)`**\n    - Checks if the string starts with the specified prefix.\n    - Example: `boolean result = str.startsWith(\"He\");`\n\n14. **`endsWith(String suffix)`**\n    - Checks if the string ends with the specified suffix.\n    - Example: `boolean result = str.endsWith(\"ld\");`\n\n15. **`indexOf(int ch)`**\n    - Returns the index of the first occurrence of the specified character.\n    - Example: `int index = str.indexOf('a');`\n\n16. **`indexOf(String str)`**\n    - Returns the index of the first occurrence of the specified substring.\n    - Example: `int index = str.indexOf(\"Hello\");`\n\n17. **`lastIndexOf(int ch)`**\n    - Returns the index of the last occurrence of the specified character.\n    - Example: `int index = str.lastIndexOf('a');`\n\n18. **`lastIndexOf(String str)`**\n    - Returns the index of the last occurrence of the specified substring.\n    - Example: `int index = str.lastIndexOf(\"Hello\");`\n\n19. **`split(String regex)`**\n    - Splits the string into an array of substrings based on the specified regular expression.\n    - Example: `String[] parts = str.split(\",\");`\n\n20. **`concat(String str)`**\n    - Concatenates the specified string to the end of the current string.\n    - Example: `String result = str.concat(\" World\");`\n\nThese methods provide powerful tools for manipulating and interacting with strings in Java.","textOutputType":"markdown","textInputType":"TextArea"},"rating":5,"linkedQuestionsId":"eb9e42ac-29af-4cf2-81ac-0e765d5af8d9","order":0,"createdDate":{"$date":"2024-08-28T13:24:28.029Z"},"updatedDate":{"$date":"2024-08-28T13:24:28.029Z"},"uniqueId":"f4180591-35be-43b1-b0e5-ccf9311db490","__v":0}
{"_id":{"$oid":"66cf26095a9d3155d96b231e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java SE 8, several new methods were introduced to the `String` class to enhance functionality, particularly for working with streams and joining strings. Here are the commonly used methods introduced in Java SE 8:\n\n1. **`String.join(CharSequence delimiter, CharSequence... elements)`**\n   - Joins multiple strings with a specified delimiter.\n   ```java\n   String result = String.join(\", \", \"apple\", \"banana\", \"cherry\");\n   // result: \"apple, banana, cherry\"\n   ```\n\n2. **`String.join(CharSequence delimiter, Iterable<? extends CharSequence> elements)`**\n   - Joins strings from an iterable with a specified delimiter.\n   ```java\n   List<String> items = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n   String result = String.join(\", \", items);\n   // result: \"apple, banana, cherry\"\n   ```\n\n3. **`String.chars()`**\n   - Returns an `IntStream` of the characters in the string, which can be used for various stream operations.\n   ```java\n   \"hello\".chars().forEach(ch -> System.out.println((char) ch));\n   ```\n\n4. **`String.codePoints()`**\n   - Returns an `IntStream` of Unicode code points in the string, useful for handling characters outside the Basic Multilingual Plane.\n   ```java\n   \"hello\".codePoints().forEach(cp -> System.out.println(cp));\n   ```\n\nThese methods provided more functional programming capabilities and improved string handling, particularly in conjunction with Java 8's stream API.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"1a6e3773-a3f2-444a-9637-0cdc74ebf27b","order":0,"createdDate":{"$date":"2024-08-28T13:28:41.836Z"},"updatedDate":{"$date":"2024-08-28T13:28:41.836Z"},"uniqueId":"b21ab486-acbc-4314-b1bc-824d67e1cac7","__v":0}
{"_id":{"$oid":"66cf320c5a9d3155d96b5211"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Possible questions for string","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"a5bf85ad-af30-44bf-a5b9-029e14c6a451","order":0,"createdDate":{"$date":"2024-08-28T14:19:56.687Z"},"updatedDate":{"$date":"2024-08-28T14:20:44.372Z"},"uniqueId":"d7d84f98-f59f-4d09-b780-cb26b5a2d26d","__v":0}
{"_id":{"$oid":"66cf325e5a9d3155d96b68e0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### String vs StringBuffer vs StringBuilder\n\n**String** is immutable, making it easy to share across threads and functions. It uses a JVM string pool to optimize memory by reusing instances. String concatenation uses the `+` operator, which internally relies on StringBuffer.\n\n**StringBuffer** is mutable and thread-safe, making it suitable for string manipulation in a multi-threaded environment. However, its synchronization comes with a performance cost.\n\n**StringBuilder** is also mutable but not thread-safe, making it faster than StringBuffer for string manipulations in single-threaded environments.\n\n**Key Differences:**\n\n- **Immutability:** String is immutable, while StringBuffer and StringBuilder are mutable.\n- **Thread Safety:** StringBuffer is thread-safe; StringBuilder is not.\n- **Performance:** StringBuilder is generally faster than StringBuffer due to the lack of synchronization.\n\nFor most non-multi-threaded scenarios, **StringBuilder** is recommended for better performance.\n\n**References:**\n- Java API documentation for String, StringBuffer, and StringBuilder.\n- Performance comparison between StringBuffer and StringBuilder.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"e2daf008-5ecc-4a12-bb36-6dd23e2e22db","order":0,"createdDate":{"$date":"2024-08-28T14:21:18.868Z"},"updatedDate":{"$date":"2024-08-28T14:21:18.868Z"},"uniqueId":"adbcb55f-4aa9-4fbe-ba05-7989433cd44b","__v":0}
{"_id":{"$oid":"66cf340f5a9d3155d96b9a53"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To create a custom immutable class in Java, follow these guidelines:\n\n### 1. **Make the Class `final`:**\n   - This prevents other classes from extending it.\n\n### 2. **Make All Fields `private` and `final`:**\n   - Fields should be `private` so they can't be accessed directly and `final` to ensure they are assigned only once.\n\n### 3. **Initialize All Fields in the Constructor:**\n   - Set the values of all fields in the constructor. Do not provide setters or any method that can modify the state of the object.\n\n### 4. **Avoid Methods that Modify the State:**\n   - Ensure that no method modifies the state of the object after it is created. All methods should only return values based on the current state.\n\n### 5. **If Fields are Mutable Objects, Return Copies:**\n   - If the class has fields that are mutable objects (e.g., arrays, lists), return a copy of these objects in getter methods to prevent the original objects from being modified.\n\n### Example:\n\n```java\npublic final class ImmutablePerson {\n    private final String name;\n    private final int age;\n    private final List<String> addresses;\n\n    public ImmutablePerson(String name, int age, List<String> addresses) {\n        this.name = name;\n        this.age = age;\n        // Create a defensive copy of the mutable list\n        this.addresses = new ArrayList<>(addresses);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    // Return a copy of the list to preserve immutability\n    public List<String> getAddresses() {\n        return new ArrayList<>(addresses);\n    }\n\n    // No setters to modify the fields\n}\n```\n\n### Key Points:\n- **Final Class:** The class is marked as `final` to prevent inheritance.\n- **Private, Final Fields:** All fields are private and final, ensuring that their values cannot change once assigned.\n- **Immutable Fields:** If the fields are mutable (like a list), defensive copies are made in both the constructor and the getter to prevent external modification.\n\nThis way, the `ImmutablePerson` class is truly immutable. Once an instance of this class is created, its state cannot be altered.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"05580a17-92a7-4a8e-8802-21148f7587f6","order":0,"createdDate":{"$date":"2024-08-28T14:28:31.702Z"},"updatedDate":{"$date":"2024-08-28T14:28:31.702Z"},"uniqueId":"93fd5ee8-5ff3-4187-8456-aaa4b9df9813","__v":0}
{"_id":{"$oid":"66cf72495a9d3155d9726cba"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To set up automatic dark mode in a React component based on the user's system preferences, you can use the `prefers-color-scheme` CSS media feature. This allows you to detect whether the user has set their system to dark mode or light mode and apply the corresponding styles.\n\nHere’s a step-by-step guide:\n\n### 1. Use CSS for Dark Mode\nFirst, define your light and dark mode styles using CSS.\n\n```css\n/* Global styles */\nbody {\n  background-color: white;\n  color: black;\n}\n\n/* Dark mode styles */\n@media (prefers-color-scheme: dark) {\n  body {\n    background-color: black;\n    color: white;\n  }\n}\n```\n\n### 2. Use JavaScript to Apply Dark Mode\nIf you want more control and dynamic switching in a React component, you can use JavaScript to apply the theme based on the `prefers-color-scheme` media query.\n\n```jsx\nimport React, { useEffect, useState } from 'react';\n\nconst DarkModeComponent = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setIsDarkMode(mediaQuery.matches);\n\n    const handleChange = (e) => {\n      setIsDarkMode(e.matches);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  const styles = {\n    container: {\n      backgroundColor: isDarkMode ? 'black' : 'white',\n      color: isDarkMode ? 'white' : 'black',\n      padding: '20px',\n      textAlign: 'center',\n    },\n  };\n\n  return (\n    <div style={styles.container}>\n      <h1>{isDarkMode ? 'Dark Mode' : 'Light Mode'}</h1>\n      <p>This is an example of automatic dark mode detection in React.</p>\n    </div>\n  );\n};\n\nexport default DarkModeComponent;\n```\n\n### 3. Dynamic CSS Classes (Optional)\nAlternatively, you can toggle CSS classes based on the dark mode preference:\n\n```jsx\nimport React, { useEffect, useState } from 'react';\nimport './DarkModeComponent.css'; // Import your CSS file\n\nconst DarkModeComponent = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setIsDarkMode(mediaQuery.matches);\n\n    const handleChange = (e) => {\n      setIsDarkMode(e.matches);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  return (\n    <div className={isDarkMode ? 'dark-mode' : 'light-mode'}>\n      <h1>{isDarkMode ? 'Dark Mode' : 'Light Mode'}</h1>\n      <p>This is an example of automatic dark mode detection in React.</p>\n    </div>\n  );\n};\n\nexport default DarkModeComponent;\n```\n\n**CSS (DarkModeComponent.css):**\n\n```css\n.light-mode {\n  background-color: white;\n  color: black;\n}\n\n.dark-mode {\n  background-color: black;\n  color: white;\n}\n```\n\n### Explanation:\n- **`window.matchMedia('(prefers-color-scheme: dark')`**: This checks the user's system preferences for dark mode.\n- **`mediaQuery.matches`**: Returns `true` if dark mode is enabled.\n- **`useEffect`**: Attaches a listener to detect changes in the color scheme preference.\n\nThis approach ensures your React component can automatically adapt to the user's system theme and switch between dark and light modes accordingly.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"3f40b9ff-8674-4dc3-9505-67b9a188e100","order":0,"createdDate":{"$date":"2024-08-28T18:54:01.72Z"},"updatedDate":{"$date":"2024-08-28T18:54:01.72Z"},"uniqueId":"0e2cc7dd-db7a-4a5a-9f5a-4459c460285c","__v":0}
{"_id":{"$oid":"66cf76515a9d3155d972b4e7"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java achieves platform independence primarily through the use of the Java Virtual Machine (JVM). Here's how it works:\n\n### 1. **Java Compilation Process:**\n   - **Source Code (.java):** Java code is written in `.java` files.\n   - **Compilation:** The Java compiler (`javac`) compiles the source code into an intermediate form called **bytecode**, which is stored in `.class` files.\n   - **Bytecode:** Bytecode is a set of instructions that is platform-independent and can be executed on any machine that has a JVM. Unlike machine code, bytecode is not tied to any specific hardware architecture.\n\n### 2. **Java Virtual Machine (JVM):**\n   - **Platform-Specific JVM:** Every platform (Windows, Linux, macOS, etc.) has its own implementation of the JVM, which is tailored to the underlying operating system and hardware.\n   - **Bytecode Execution:** The JVM reads the bytecode and translates it into machine code that can be executed by the platform's processor. This translation is done at runtime, allowing the same Java bytecode to run on any platform that has a compatible JVM.\n\n### 3. **Write Once, Run Anywhere (WORA):**\n   - Because Java programs are compiled into bytecode that can be executed by any JVM, developers can write their code once and run it on any platform without modification. This is the essence of Java's platform independence, often summarized by the phrase \"Write Once, Run Anywhere\" (WORA).\n\n### 4. **Standard Libraries:**\n   - Java provides a rich set of standard libraries that abstract away many platform-specific details. These libraries ensure that Java applications can perform tasks like file I/O, networking, and GUI development in a platform-independent manner.\n\n### Summary:\n\n- **Compilation to Bytecode:** Java code is compiled into platform-independent bytecode.\n- **JVM Execution:** The JVM on each platform translates bytecode into machine code specific to the platform.\n- **WORA:** Java applications can run on any device with a JVM, making them platform-independent.\n\nThis design allows Java applications to run on a wide range of devices and operating systems without needing to be recompiled or modified for each one.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"8f91aee2-af40-4b71-95b3-1b4869c524e2","order":0,"createdDate":{"$date":"2024-08-28T19:11:13.412Z"},"updatedDate":{"$date":"2024-08-28T19:11:13.412Z"},"uniqueId":"7e56aceb-19d5-4a38-9a69-e8cb0dc9dc3d","__v":0}
{"_id":{"$oid":"66cf77175a9d3155d972e6a5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, `==` and `equals()` are used to compare objects, but they serve different purposes and have distinct behaviors:\n\n### 1. `==` Operator\n- **Reference Comparison**: The `==` operator compares the references (memory addresses) of two objects to determine if they point to the same memory location.\n- **Primitive Types**: When used with primitive types (e.g., `int`, `char`), `==` compares the actual values.\n- **Object References**: When used with objects, `==` checks if both references point to the exact same object in memory.\n\n### Example:\n```java\nString str1 = new String(\"hello\");\nString str2 = new String(\"hello\");\n\nSystem.out.println(str1 == str2); // false (different memory locations)\n```\n\n### 2. `equals()` Method\n- **Content Comparison**: The `equals()` method is used to compare the content or state of two objects, i.e., whether the values within the objects are the same.\n- **Default Implementation**: The default implementation of `equals()` in the `Object` class compares references (similar to `==`). However, many classes (like `String`, `Integer`, etc.) override `equals()` to perform content comparison.\n- **Custom Implementation**: You can override `equals()` in your custom classes to define what it means for two objects to be \"equal\" based on their internal state.\n\n### Example:\n```java\nString str1 = new String(\"hello\");\nString str2 = new String(\"hello\");\n\nSystem.out.println(str1.equals(str2)); // true (same content)\n```\n\n### Key Differences:\n- **`==`**: Compares references (or memory addresses) for object types; compares values for primitive types.\n- **`equals()`**: Compares the actual content or state of two objects, as defined by the method's implementation.\n\n### Summary:\n- Use `==` when you want to check if two references point to the same object.\n- Use `equals()` when you want to check if two objects are logically equivalent (i.e., their contents are the same).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"17efaf53-e971-47a3-b163-8122c6669a39","order":0,"createdDate":{"$date":"2024-08-28T19:14:31.462Z"},"updatedDate":{"$date":"2024-08-28T19:14:31.462Z"},"uniqueId":"c5a56026-df52-4fc2-a826-89d34e2271ca","__v":0}
{"_id":{"$oid":"66cf79765a9d3155d973188b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, both abstract classes and interfaces are used to achieve abstraction and define methods that must be implemented by derived classes, but they have distinct characteristics and use cases. Here are the key differences:\n\n### 1. **Purpose and Design**\n   - **Abstract Class**: \n     - Used to represent a common base class for a group of related classes.\n     - It can contain both abstract methods (methods without implementation) and concrete methods (methods with implementation).\n     - It is best suited when classes share a common state or behavior.\n   \n   - **Interface**: \n     - Used to define a contract or a set of methods that implementing classes must provide.\n     - It can only contain abstract methods (Java 7 and earlier). Starting from Java 8, it can also include default methods (methods with implementation) and static methods.\n     - It is best suited for defining capabilities or behaviors that can be shared across different classes, even if they are unrelated in the class hierarchy.\n\n### 2. **Inheritance**\n   - **Abstract Class**:\n     - A class can inherit from only one abstract class because Java does not support multiple inheritance.\n     - Abstract classes can implement interfaces and inherit from other classes.\n   \n   - **Interface**:\n     - A class can implement multiple interfaces, which allows for multiple inheritance of behavior.\n     - Interfaces cannot inherit from classes, but they can extend multiple other interfaces.\n\n### 3. **Members**\n   - **Abstract Class**:\n     - Can have fields (instance variables), constructors, and method implementations.\n     - Can contain access modifiers (like `private`, `protected`, `public`) for methods and fields.\n   \n   - **Interface**:\n     - Cannot have instance variables (fields) but can have constants (fields that are `public`, `static`, and `final` by default).\n     - Methods are implicitly `public` and cannot have other access modifiers (until Java 9, when private methods were introduced in interfaces).\n     - Methods in interfaces are abstract by default (until Java 8, when default and static methods were introduced).\n\n### 4. **Instantiation**\n   - **Abstract Class**:\n     - Cannot be instantiated directly; it requires a subclass that provides implementations for abstract methods.\n   \n   - **Interface**:\n     - Cannot be instantiated directly; it requires a class that implements the interface and provides implementations for all its methods.\n\n### 5. **Constructor**\n   - **Abstract Class**:\n     - Can have constructors, which can be called when a concrete subclass is instantiated.\n   \n   - **Interface**:\n     - Cannot have constructors because interfaces cannot be instantiated directly.\n\n### 6. **Use Cases**\n   - **Abstract Class**:\n     - Use abstract classes when you want to provide a common base class that contains shared code among subclasses.\n     - Use it when you have classes that are conceptually related or share common behavior.\n   \n   - **Interface**:\n     - Use interfaces when you want to define a contract that multiple classes can implement, regardless of where they sit in the class hierarchy.\n     - Use it for defining capabilities (like `Comparable`, `Runnable`, `Serializable`) that can be applied to a wide range of classes.\n\n### Example:\n\n**Abstract Class:**\n```java\nabstract class Animal {\n    String name;\n\n    Animal(String name) {\n        this.name = name;\n    }\n\n    abstract void sound();\n\n    void eat() {\n        System.out.println(name + \" is eating.\");\n    }\n}\n\nclass Dog extends Animal {\n    Dog(String name) {\n        super(name);\n    }\n\n    void sound() {\n        System.out.println(\"Bark\");\n    }\n}\n```\n\n**Interface:**\n```java\ninterface Flyable {\n    void fly();\n}\n\ninterface Swimmable {\n    void swim();\n}\n\nclass Duck implements Flyable, Swimmable {\n    public void fly() {\n        System.out.println(\"Duck is flying.\");\n    }\n\n    public void swim() {\n        System.out.println(\"Duck is swimming.\");\n    }\n}\n```\n\n### Summary:\n- **Abstract Classes** are for sharing common code and structure among related classes.\n- **Interfaces** are for defining contracts or capabilities that can be implemented by any class, regardless of its position in the class hierarchy.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"5b6949d4-5689-4b04-83aa-769921ef264c","order":0,"createdDate":{"$date":"2024-08-28T19:24:38.711Z"},"updatedDate":{"$date":"2024-08-28T19:24:38.711Z"},"uniqueId":"aefa423e-efba-4378-8f2d-43b47f041c70","__v":0}
{"_id":{"$oid":"66cf7a845a9d3155d9734a65"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java Memory Management refers to the process of allocating, managing, and reclaiming memory in the Java Virtual Machine (JVM) to ensure efficient execution of Java programs. It involves managing two main types of memory: **Heap** and **Stack**. The key aspects of Java Memory Management include memory allocation, garbage collection, and the organization of memory into various regions.\n\n### Key Concepts of Java Memory Management:\n\n#### 1. **Memory Areas in JVM:**\n   - **Heap Memory:**\n     - Used for dynamic memory allocation.\n     - All objects and their associated data are stored in the heap.\n     - Divided into several generations (Young Generation, Old Generation) to optimize garbage collection.\n  \n   - **Stack Memory:**\n     - Stores method calls, local variables, and references to objects in the heap.\n     - Each thread in a Java program has its own stack.\n     - Stack memory is limited and operates in a Last-In-First-Out (LIFO) manner.\n\n   - **Method Area:**\n     - Stores class-level data like class definitions, constants, static variables, and method bytecode.\n     - Shared among all threads.\n  \n   - **Program Counter (PC) Register:**\n     - Holds the address of the currently executing JVM instruction.\n     - Each thread has its own PC register.\n\n   - **Native Method Stack:**\n     - Stores data related to native methods (methods written in languages other than Java, like C/C++) used by the JVM.\n\n#### 2. **Garbage Collection:**\n   - The process of automatically identifying and reclaiming memory that is no longer in use (i.e., memory occupied by objects that are no longer referenced).\n   - The JVM periodically runs the garbage collector to free up heap memory.\n   - **Generational Garbage Collection:**\n     - The heap is divided into generations: **Young Generation**, **Old Generation**, and **Permanent Generation** (or **Metaspace** in newer JVMs).\n     - **Young Generation**: Newly created objects are allocated here. When it fills up, a minor garbage collection occurs, moving surviving objects to the Old Generation.\n     - **Old Generation**: Contains long-lived objects that have survived multiple garbage collections.\n     - **Permanent Generation (PermGen)**: Stores metadata required by the JVM to describe the classes and methods used in the application. Replaced by **Metaspace** in Java 8 and later.\n\n   - **Types of Garbage Collectors:**\n     - **Serial GC:** A simple garbage collector using a single thread for both minor and major collections.\n     - **Parallel GC:** Uses multiple threads for garbage collection, aiming to improve throughput.\n     - **CMS (Concurrent Mark-Sweep) GC:** Minimizes pause times by performing garbage collection concurrently with the application’s execution.\n     - **G1 (Garbage First) GC:** Aims to provide high performance with low pause times, particularly in large heaps.\n\n#### 3. **Memory Leaks and OutOfMemoryError:**\n   - **Memory Leak:** Occurs when objects are no longer needed but still referenced, preventing the garbage collector from reclaiming their memory.\n   - **OutOfMemoryError:** Thrown when the JVM cannot allocate memory for an object because the heap is full and garbage collection cannot free up space.\n\n#### 4. **Memory Optimization Techniques:**\n   - **Use of Local Variables:** Reduces heap memory usage by storing data in the stack when possible.\n   - **Avoiding Unnecessary Object Creation:** Reuse objects to minimize the frequency of garbage collection.\n   - **Proper Exception Handling:** Avoids creating unnecessary stack traces that consume memory.\n   - **Use of Soft/Weak References:** Allows more flexible memory management by the garbage collector.\n\n### Summary:\nJava Memory Management is a crucial aspect of JVM performance, involving efficient allocation and deallocation of memory through garbage collection. By understanding and optimizing how memory is used and managed, developers can write more efficient and reliable Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"8efaf58d-b5fb-45a6-b131-71d6ddfa28bd","order":0,"createdDate":{"$date":"2024-08-28T19:29:08.965Z"},"updatedDate":{"$date":"2024-08-28T19:29:08.965Z"},"uniqueId":"a6d82843-c43c-41fd-aab2-1fca7582b7e5","__v":0}
{"_id":{"$oid":"66cf7c3f5a9d3155d973610b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, references to objects are categorized into four types: strong, weak, soft, and phantom references. These reference types allow different levels of interaction between the garbage collector and the objects they refer to, enabling developers to manage memory more effectively. Here’s a breakdown of each type:\n\n### 1. **Strong References:**\n   - **Definition:** The default type of reference in Java. An object that is reachable via a strong reference is considered \"alive\" and is not eligible for garbage collection.\n   - **Example:** \n     ```java\n     Object obj = new Object(); // 'obj' is a strong reference to the Object\n     ```\n   - **Behavior:** As long as a strong reference exists to an object, the garbage collector will not collect that object.\n\n### 2. **Weak References:**\n   - **Definition:** A weak reference does not prevent its referent (the object it references) from being collected by the garbage collector.\n   - **Use Case:** Often used in caches or mappings where you want the entries to be garbage collected when they are no longer in use elsewhere.\n   - **Example:**\n     ```java\n     WeakReference<Object> weakRef = new WeakReference<>(new Object());\n     ```\n   - **Behavior:** When the garbage collector detects that an object is only weakly reachable (i.e., there are no strong or soft references), it reclaims the memory of the weakly referenced object. After garbage collection, the weak reference will return `null`.\n\n### 3. **Soft References:**\n   - **Definition:** Soft references are similar to weak references but have a stronger relationship with the garbage collector. The garbage collector will only reclaim soft-referenced objects when it is low on memory.\n   - **Use Case:** Useful for implementing memory-sensitive caches where objects can be discarded when memory is needed but kept otherwise.\n   - **Example:**\n     ```java\n     SoftReference<Object> softRef = new SoftReference<>(new Object());\n     ```\n   - **Behavior:** Soft-referenced objects are cleared by the garbage collector only when memory is running low. This makes them ideal for cache implementations.\n\n### 4. **Phantom References:**\n   - **Definition:** Phantom references are the weakest type of reference. They are used to track when an object has been finalized and is ready for garbage collection.\n   - **Use Case:** Used in scenarios where you need to perform some cleanup action after the object is no longer reachable, but before its memory is reclaimed.\n   - **Example:**\n     ```java\n     PhantomReference<Object> phantomRef = new PhantomReference<>(new Object(), new ReferenceQueue<>());\n     ```\n   - **Behavior:** Phantom references are not directly accessible; they are only enqueued in a `ReferenceQueue` after the object is finalized. Attempting to get the referent of a phantom reference will always return `null`.\n\n### Summary:\n- **Strong References:** Prevents garbage collection as long as the reference exists.\n- **Weak References:** Eligible for garbage collection when the object is weakly reachable.\n- **Soft References:** Eligible for garbage collection only when memory is low.\n- **Phantom References:** Used for cleanup operations; the object is already marked for garbage collection.\n\nEach reference type serves different purposes, providing developers with tools to manage memory usage more effectively in Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"1be9a702-4a39-4914-b270-4fb92e82ccb0","order":0,"createdDate":{"$date":"2024-08-28T19:36:31.464Z"},"updatedDate":{"$date":"2024-08-28T19:36:31.464Z"},"uniqueId":"6ac824c3-46c1-4823-8e0c-57cb4dda18ab","__v":0}
{"_id":{"$oid":"66cf7cda5a9d3155d97377c5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"`PhantomReference`, `SoftReference`, and `WeakReference` belong to the `java.lang.ref` package in Java.\n\n- **`PhantomReference`**: `java.lang.ref.PhantomReference`\n- **`SoftReference`**: `java.lang.ref.SoftReference`\n- **`WeakReference`**: `java.lang.ref.WeakReference`\n\nThese classes are part of the `java.lang.ref` package, which provides the reference types that are used for fine-grained control over garbage collection behavior.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"f915e741-e3f4-4da4-ba96-515cd2b4ece6","order":0,"createdDate":{"$date":"2024-08-28T19:39:06.507Z"},"updatedDate":{"$date":"2024-08-28T19:39:06.507Z"},"uniqueId":"53ba69c0-7b0b-413c-9993-5ea020d448d6","__v":0}
{"_id":{"$oid":"66cf7d4e5a9d3155d9738ea8"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java handles memory management through a combination of automatic garbage collection, the use of different memory areas in the Java Virtual Machine (JVM), and the management of object references. Here's an overview of how memory management works in Java:\n\n### 1. **Memory Areas in the JVM**\n   - **Heap**: \n     - The heap is where all class instances and arrays are allocated.\n     - Divided into:\n       - **Young Generation**: Where new objects are created. It consists of Eden Space, and two Survivor Spaces.\n       - **Old Generation**: Where long-lived objects are stored after surviving multiple garbage collection cycles.\n       - **Permanent Generation (PermGen)/Metaspace**: Holds metadata, such as class definitions. Since Java 8, PermGen has been replaced by Metaspace.\n\n   - **Stack**: \n     - Each thread in Java has its own stack, which stores local variables, method call frames, and references to objects in the heap.\n     - The stack operates in a Last-In-First-Out (LIFO) manner.\n\n   - **Method Area**: \n     - A part of the heap that stores class structures like runtime constant pool, field and method data, and code for methods.\n\n   - **Program Counter (PC) Register**: \n     - Each thread has its own PC register, which points to the current instruction being executed.\n\n   - **Native Method Stack**: \n     - Contains all the native methods used in the application.\n\n### 2. **Garbage Collection (GC)**\n   - **Automatic Memory Management**:\n     - Java uses garbage collection to automatically manage memory by reclaiming memory used by objects that are no longer reachable (i.e., no active reference to the object).\n   \n   - **GC Algorithms**:\n     - Different algorithms are used for garbage collection:\n       - **Mark-and-Sweep**: Marks live objects and sweeps away dead ones.\n       - **Generational GC**: Objects are grouped by age, and young objects are collected more frequently.\n       - **Concurrent Mark-Sweep (CMS)**: Minimizes pauses by concurrently collecting garbage alongside application execution.\n       - **G1 Garbage Collector**: Aims to provide high throughput with predictable pauses.\n\n### 3. **Reference Types**\n   - **Strong References**: The default type of reference in Java. Objects with strong references are not eligible for GC.\n   \n   - **Soft References**: Useful for implementing memory-sensitive caches. Objects are cleared only when the JVM absolutely needs memory.\n   \n   - **Weak References**: Objects referenced only by weak references are eligible for GC more aggressively.\n   \n   - **Phantom References**: Used to track when an object has been finalized and is ready to be collected, without being resurrected.\n\n### 4. **Memory Leaks and Management**\n   - While Java’s garbage collection helps in memory management, poorly written code can still lead to memory leaks, where objects that are no longer needed are unintentionally referenced, preventing their collection.\n\n### 5. **Tuning Memory Management**\n   - Developers can tune memory management via JVM options, such as setting the initial and maximum heap size, controlling the behavior of garbage collectors, and specifying memory pools.\n\nBy using these features and tools effectively, Java ensures that memory is managed efficiently, providing automatic cleanup of unused objects while allowing developers to optimize performance through careful tuning.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"23004cf1-8042-4428-9ea6-f83e91427745","order":0,"createdDate":{"$date":"2024-08-28T19:41:02.994Z"},"updatedDate":{"$date":"2024-08-28T19:41:02.994Z"},"uniqueId":"efe8a0ed-f65a-42fd-85f1-0176b54a50cc","__v":0}
{"_id":{"$oid":"66cf7dd05a9d3155d973a59c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The purpose of the garbage collector in Java is to automatically manage memory by identifying and reclaiming memory that is no longer in use, i.e., memory occupied by objects that are no longer reachable or referenced by any part of the program. This process helps in preventing memory leaks, optimizing the use of available memory, and ensuring that the application runs efficiently without manual memory management by the developer.\n\n### Key Functions of the Garbage Collector:\n1. **Automatic Memory Reclamation**: The garbage collector automatically reclaims memory that is no longer needed, freeing developers from the responsibility of manually deallocating memory, as is required in languages like C or C++.\n\n2. **Preventing Memory Leaks**: By ensuring that objects no longer in use are properly cleaned up, the garbage collector helps in preventing memory leaks, where unused objects consume memory indefinitely.\n\n3. **Improving Application Performance**: By reclaiming memory, the garbage collector ensures that sufficient memory is available for new objects, reducing the chances of running out of memory (OutOfMemoryError) and improving the overall performance of the application.\n\n4. **Simplifying Development**: The garbage collector simplifies development by abstracting away the complexity of memory management, allowing developers to focus on application logic rather than memory allocation and deallocation.\n\nIn summary, the garbage collector is a crucial component of Java's memory management system, enabling efficient use of memory and reducing the risk of errors related to manual memory management.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"556f0376-056d-4b43-a4b0-4d3dfec5e415","order":0,"createdDate":{"$date":"2024-08-28T19:43:12.513Z"},"updatedDate":{"$date":"2024-08-28T19:43:12.513Z"},"uniqueId":"f95e05be-e935-4d27-b932-6d389d7a6103","__v":0}
{"_id":{"$oid":"66cf7e835a9d3155d973bca5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, memory management is divided into two main areas: **stack memory** and **heap memory**. Both serve different purposes and have distinct characteristics.\n\n### Stack Memory:\n1. **Purpose**: \n   - Stack memory is used to store local variables and function call information. It contains method-specific information such as primitive variables, references to objects in the heap, and method call frames.\n\n2. **Memory Allocation and Management**:\n   - Memory in the stack is allocated and deallocated in a Last-In-First-Out (LIFO) order. When a method is called, a new block (stack frame) is created in the stack memory to hold local variables and references. When the method execution is completed, the stack frame is automatically popped off the stack.\n\n3. **Size**:\n   - Stack memory is usually smaller in size compared to heap memory. It is limited and depends on the thread size.\n\n4. **Speed**:\n   - Stack memory is faster to allocate and access because it follows the LIFO order, which is straightforward to manage.\n\n5. **Lifespan**:\n   - Variables stored in the stack memory only exist during the execution of the method that created them. Once the method completes, the variables are no longer accessible, and the memory is freed.\n\n6. **Thread-Specific**:\n   - Stack memory is thread-specific; each thread in a Java application has its own stack memory.\n\n### Heap Memory:\n1. **Purpose**: \n   - Heap memory is used to store all objects and class instances. It is the runtime data area from which memory for all class instances and arrays is allocated.\n\n2. **Memory Allocation and Management**:\n   - Memory in the heap is allocated and managed dynamically. Objects created using `new` keyword are stored in the heap. Unlike stack memory, heap memory is not automatically freed when a method exits; it relies on the garbage collector to reclaim memory occupied by objects that are no longer referenced.\n\n3. **Size**:\n   - Heap memory is generally larger than stack memory and can be adjusted through JVM settings. It is shared among all threads in the application.\n\n4. **Speed**:\n   - Heap memory is slower to access compared to stack memory because of its dynamic nature and the need for garbage collection.\n\n5. **Lifespan**:\n   - Objects in heap memory have a global scope and remain in memory as long as they are referenced. The lifespan of heap objects can be longer than the execution of a single method.\n\n6. **Shared Among Threads**:\n   - Heap memory is shared among all threads in the application, unlike stack memory which is thread-specific.\n\n### Summary:\n- **Stack Memory** is used for static memory allocation (local variables, method calls), is faster, has a smaller size, and is thread-specific.\n- **Heap Memory** is used for dynamic memory allocation (objects, class instances), is slower, has a larger size, and is shared among threads.\n\nUnderstanding the distinction between stack and heap memory is crucial for optimizing memory management and performance in Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"0e25e7a2-6b61-45a4-8567-e595bdd25ebd","order":0,"createdDate":{"$date":"2024-08-28T19:46:11.355Z"},"updatedDate":{"$date":"2024-08-28T19:46:11.355Z"},"uniqueId":"4231292a-b680-4e2a-9353-8111e419e5db","__v":0}
{"_id":{"$oid":"66cf7f575a9d3155d973d379"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, you can adjust the heap memory size of the Java Virtual Machine (JVM) using several command-line options. These settings help you control the initial, minimum, and maximum heap memory that the JVM will use. Here are the key JVM options for adjusting heap memory:\n\n### 1. **-Xms**: Initial Heap Size\n- **Syntax**: `-Xms<size>`\n- **Description**: Sets the initial heap size for the JVM. This is the amount of memory the JVM will allocate when it starts. \n- **Example**: `-Xms512m` (sets the initial heap size to 512 MB)\n\n### 2. **-Xmx**: Maximum Heap Size\n- **Syntax**: `-Xmx<size>`\n- **Description**: Sets the maximum heap size for the JVM. This is the upper limit of memory that the JVM can allocate to the heap. \n- **Example**: `-Xmx2g` (sets the maximum heap size to 2 GB)\n\n### 3. **-Xmn**: Size of the Young Generation\n- **Syntax**: `-Xmn<size>`\n- **Description**: Specifies the size of the Young Generation in the heap. The Young Generation is where new objects are allocated. If this space is filled, a minor garbage collection is triggered.\n- **Example**: `-Xmn256m` (sets the young generation size to 256 MB)\n\n### 4. **-XX:NewRatio**: Ratio of Old to Young Generation\n- **Syntax**: `-XX:NewRatio=<ratio>`\n- **Description**: Sets the ratio between the young and old generation sizes. For example, if set to 2, the old generation will be twice as large as the young generation.\n- **Example**: `-XX:NewRatio=2` (sets the old generation to be twice the size of the young generation)\n\n### 5. **-XX:SurvivorRatio**: Ratio of Eden/Survivor Space\n- **Syntax**: `-XX:SurvivorRatio=<ratio>`\n- **Description**: Sets the ratio of the Eden space (where most objects are created) to the Survivor spaces in the young generation. A value of 8 means Eden will be 8 times as large as one of the Survivor spaces.\n- **Example**: `-XX:SurvivorRatio=8`\n\n### 6. **-XX:MaxPermSize**: Maximum Permanent Generation Size (Java 7 and earlier)\n- **Syntax**: `-XX:MaxPermSize=<size>`\n- **Description**: Specifies the maximum size of the Permanent Generation, which stores class definitions and metadata. This option is only relevant for Java 7 and earlier.\n- **Example**: `-XX:MaxPermSize=256m` (sets the maximum size of the Permanent Generation to 256 MB)\n\n### 7. **-XX:MetaspaceSize**: Metaspace Size (Java 8 and later)\n- **Syntax**: `-XX:MetaspaceSize=<size>`\n- **Description**: In Java 8 and later, the Permanent Generation was replaced with Metaspace. This option sets the initial size of the Metaspace, which dynamically expands by default.\n- **Example**: `-XX:MetaspaceSize=128m` (sets the initial Metaspace size to 128 MB)\n\n### 8. **-XX:MaxMetaspaceSize**: Maximum Metaspace Size (Java 8 and later)\n- **Syntax**: `-XX:MaxMetaspaceSize=<size>`\n- **Description**: Sets the maximum size of the Metaspace. If this limit is reached, a full garbage collection will be triggered.\n- **Example**: `-XX:MaxMetaspaceSize=512m` (sets the maximum Metaspace size to 512 MB)\n\n### Example Command\nIf you want to start a Java application with a minimum heap size of 512 MB, a maximum heap size of 2 GB, and an initial Metaspace size of 128 MB, you would start your JVM like this:\n\n```bash\njava -Xms512m -Xmx2g -XX:MetaspaceSize=128m -jar YourApp.jar\n```\n\nThese settings allow you to fine-tune how your Java application uses memory, which can be crucial for performance, especially in large-scale applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"35f0a98a-de23-4d3d-8845-abdc9b94fbea","order":0,"createdDate":{"$date":"2024-08-28T19:49:43.843Z"},"updatedDate":{"$date":"2024-08-28T19:49:43.843Z"},"uniqueId":"e1cac9d0-5b74-4480-8565-1d95dc8befc7","__v":0}
{"_id":{"$oid":"66cf7fb75a9d3155d973eab7"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Memory Leaks in Java\n\n**Memory leaks in Java** occur when an application unintentionally retains references to objects that are no longer needed, preventing the garbage collector from reclaiming that memory. Over time, this can lead to increased memory consumption, eventually exhausting the heap and causing the application to slow down or crash due to `OutOfMemoryError`.\n\n### Common Causes of Memory Leaks\n\n1. **Static References**:\n   - Objects held by static fields remain in memory for the entire lifecycle of the application.\n   - Example: A static `List` that accumulates data over time without clearing out old entries.\n\n2. **Unclosed Resources**:\n   - Failing to close resources like file handles, database connections, or streams can lead to memory leaks.\n   - Example: Not closing a `ResultSet` or `InputStream` after use.\n\n3. **Listeners and Callbacks**:\n   - Registering a listener or callback without properly deregistering it can prevent objects from being garbage collected.\n   - Example: An event listener that is not removed when an object is no longer needed.\n\n4. **Inner Classes**:\n   - Non-static inner classes hold an implicit reference to their outer class. If the inner class instance is long-lived, it may inadvertently keep the outer class alive.\n   - Example: A background thread implemented as an inner class that outlives the enclosing class.\n\n5. **Caches**:\n   - Poorly implemented caches that grow indefinitely can hold onto references to objects no longer in use.\n   - Example: Using a `HashMap` as a cache without limiting its size or clearing old entries.\n\n6. **Custom Data Structures**:\n   - Custom data structures that are not properly cleaned up can retain references to objects that are no longer needed.\n   - Example: A circular data structure where objects reference each other and are not properly dereferenced.\n\n### How to Avoid Memory Leaks\n\n1. **Use Weak References**:\n   - Use `WeakReference`, `SoftReference`, or `PhantomReference` to hold references to objects that can be garbage collected when memory is tight.\n   - Example: Use `WeakHashMap` for caches where you don't want the cache to prevent objects from being collected.\n\n2. **Close Resources**:\n   - Always close resources like streams, connections, and files in a `finally` block or use try-with-resources to ensure they are closed automatically.\n   - Example:\n     ```java\n     try (BufferedReader reader = new BufferedReader(new FileReader(\"file.txt\"))) {\n         // Read file\n     } // Automatically closes the reader\n     ```\n\n3. **Remove Listeners**:\n   - Deregister listeners and callbacks when they are no longer needed.\n   - Example:\n     ```java\n     button.removeActionListener(myListener);\n     ```\n\n4. **Avoid Long-Lived Collections**:\n   - Use bounded collections or explicitly clear collections when they are no longer needed.\n   - Example:\n     ```java\n     myList.clear();\n     ```\n\n5. **Static References**:\n   - Be cautious with static fields; clear them when they are no longer needed, or use weak references if appropriate.\n   - Example:\n     ```java\n     myStaticList = null;\n     ```\n\n6. **Properly Design Inner Classes**:\n   - Use static inner classes or avoid long-lived inner classes that hold references to outer class instances.\n   - Example:\n     ```java\n     static class MyTask implements Runnable {\n         // No reference to outer class\n     }\n     ```\n\n7. **Profiling and Analysis**:\n   - Use memory profiling tools like VisualVM, YourKit, or Eclipse MAT to monitor memory usage and identify leaks.\n   - Example: Analyze heap dumps to find objects that are taking up memory but should have been garbage collected.\n\nBy following these practices, you can significantly reduce the chances of memory leaks in your Java applications, ensuring better performance and stability.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"c568f06c-4a82-4f70-a017-aa9cd2569127","order":0,"createdDate":{"$date":"2024-08-28T19:51:19.776Z"},"updatedDate":{"$date":"2024-08-28T19:51:19.776Z"},"uniqueId":"83b562ec-b6ca-4702-bc69-b791c085580f","__v":0}
{"_id":{"$oid":"66cf7ffe5a9d3155d9740206"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Significance of the `finalize()` Method\n\nThe `finalize()` method in Java was historically intended to allow an object to perform cleanup operations before it is garbage collected. It is defined in the `Object` class, and it can be overridden by a subclass to release resources such as file handles, network connections, or memory allocated outside of the Java heap.\n\n#### Key Points about `finalize()`:\n\n1. **Resource Cleanup**:\n   - The primary purpose of `finalize()` was to provide a mechanism for an object to release resources before it is destroyed.\n   - Example: Closing a file or releasing a database connection.\n\n2. **Called by the Garbage Collector**:\n   - The `finalize()` method is called by the garbage collector on an object when it determines that there are no more references to the object.\n   - However, there's no guarantee when or even if `finalize()` will be called because garbage collection timing is unpredictable.\n\n3. **Unreliable**:\n   - `finalize()` has several drawbacks, making it unreliable:\n     - **Unpredictable Timing**: The garbage collector may not run immediately when an object becomes unreachable, leading to delays in resource cleanup.\n     - **Performance Overhead**: Overuse of `finalize()` can slow down garbage collection as objects with a `finalize()` method are treated differently by the garbage collector.\n     - **Resurrection Issue**: An object can be resurrected during finalization if it assigns `this` to a static field, which can lead to unexpected behavior.\n\n4. **Deprecated in Java 9**:\n   - Due to its unreliability and performance issues, the `finalize()` method has been deprecated since Java 9.\n   - The Java community and Oracle recommend using alternatives like `try-with-resources` or explicit resource management (e.g., `close()` methods) to handle resource cleanup.\n\n5. **Alternatives**:\n   - **Try-with-Resources**: A more reliable and modern way to handle resource management introduced in Java 7.\n     ```java\n     try (BufferedReader br = new BufferedReader(new FileReader(\"file.txt\"))) {\n         // Use the resource\n     } // The resource is automatically closed here\n     ```\n   - **Reference Objects**: Using classes like `PhantomReference` for advanced resource management that requires interaction with the garbage collector.\n\n### Conclusion\n\nThe `finalize()` method was originally designed for cleanup before garbage collection but is now considered obsolete and unreliable. It has been deprecated in favor of better alternatives like `try-with-resources` and explicit resource management techniques. Developers are strongly encouraged to avoid using `finalize()` and instead rely on these more predictable and efficient methods for resource cleanup.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"81f9c6a0-792d-48f7-97e9-1ef6d4222253","order":0,"createdDate":{"$date":"2024-08-28T19:52:30.415Z"},"updatedDate":{"$date":"2024-08-28T19:52:30.415Z"},"uniqueId":"29178e56-1dbd-4c03-a9cb-684171853e4c","__v":0}
{"_id":{"$oid":"66cffd55a272225ce4841711"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"interview preparation sequence\n    Step 1\n        Core Java\n        Java 8\n        Spring Framework\n        Spring Boot\n    Step 1.1\n        Design Patterns\n        SOLID Principles\n        Object-Oriented Programming (OOP)\n    Step 1.2\n        Multithreading and Concurrency\n        Java Memory Management\n        JVM Internals\n    Step 2\n        Microservices\n        Docker\n        Kubernetes\n        CI/CD Pipelines\n        API Gateway and Service Mesh\n    Step 3\n        REST\n        GraphQL\n        WebSocket\n        gRPC\n    Step 4\n        MySQL\n        MongoDB\n        Redis\n        Database Design and Optimization\n    Step 5\n        React JS\n        Servlet/JSP\n        Angular or Vue.js (optional)\n        Thymeleaf (optional)\n    Step 6\n        Testing\n            Unit Testing (JUnit, Mockito)\n            Integration Testing\n            Test-Driven Development (TDD)\n        Security\n            Spring Security\n            OAuth2/JWT\n        Logging and Monitoring\n            ELK Stack (Elasticsearch, Logstash, Kibana)\n            Prometheus & Grafana\n    Step 7\n        Cloud\n            AWS\n            Azure (optional)\n            Google Cloud Platform (GCP) (optional)\n        DevOps Practices\n            Infrastructure as Code (Terraform, Ansible)\n            Version Control (Git)\n            Container Orchestration (Kubernetes)\n    Step 8\n        System Design\n        Scalability\n        Load Balancing\n        Caching Strategies\n    Step 9\n        Behavioral Interview Preparation\n            Problem-Solving Skills\n            Communication Skills\n            Leadership and Team Collaboration","textOutputType":"skeleton","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"c55b723a-b00a-44bf-b8ec-49e17b763d15","order":0,"createdDate":{"$date":"2024-08-29T04:47:17.559Z"},"updatedDate":{"$date":"2024-09-04T10:43:15.792Z"},"uniqueId":"9dd044b3-c500-4e55-a3ad-4c23cea7286d","__v":0}
{"_id":{"$oid":"66d05b46a272225ce484628d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The **Service Locator** is a design pattern used in software development to provide a centralized registry that clients can use to find and retrieve services (or components) they depend on. It abstracts the process of obtaining services, allowing clients to obtain a service without knowing the exact class or implementation.\n\n### Key Concepts of the Service Locator Pattern\n\n1. **Service Interface**: Defines the contract for the service. Clients interact with this interface rather than with the concrete implementations.\n\n2. **Service Implementation**: The concrete class that implements the service interface. This is what actually provides the service's functionality.\n\n3. **Service Locator**: The central registry that holds references to all the services. Clients request services from the Service Locator, which returns the appropriate service instance.\n\n4. **Client**: The object that uses the services. It asks the Service Locator for the service it needs, usually by specifying the service's interface or identifier.\n\n### How It Works\n\n- The **Service Locator** maintains a registry of service implementations, typically as a map or dictionary where the keys are service names or types, and the values are the service instances.\n- When a client needs a service, it asks the Service Locator for the service instance by passing the service's interface or identifier.\n- The Service Locator returns the requested service instance to the client.\n- The client can then use the service without needing to know the specific implementation details.\n\n### Example\n\nSuppose you have a logging service in a Java application:\n\n```java\n// Service Interface\npublic interface LoggerService {\n    void log(String message);\n}\n\n// Concrete Service Implementation\npublic class ConsoleLoggerService implements LoggerService {\n    public void log(String message) {\n        System.out.println(\"ConsoleLogger: \" + message);\n    }\n}\n\n// Service Locator\npublic class ServiceLocator {\n    private static Map<String, LoggerService> services = new HashMap<>();\n\n    public static LoggerService getService(String serviceName) {\n        return services.get(serviceName);\n    }\n\n    public static void registerService(String serviceName, LoggerService service) {\n        services.put(serviceName, service);\n    }\n}\n\n// Client\npublic class Application {\n    public static void main(String[] args) {\n        // Register the service\n        ServiceLocator.registerService(\"consoleLogger\", new ConsoleLoggerService());\n\n        // Retrieve the service\n        LoggerService logger = ServiceLocator.getService(\"consoleLogger\");\n\n        // Use the service\n        logger.log(\"This is a log message.\");\n    }\n}\n```\n\n### Pros of the Service Locator Pattern\n\n- **Centralized Management**: Provides a single point for managing service dependencies.\n- **Decoupling**: Clients are decoupled from concrete service implementations. They interact with services via interfaces.\n- **Flexibility**: Easy to change or extend the services provided by updating the Service Locator without affecting the clients.\n\n### Cons of the Service Locator Pattern\n\n- **Hidden Dependencies**: Dependencies are not explicit in the client class, making the code harder to understand and maintain.\n- **Global State**: The Service Locator often acts as a global singleton, which can lead to issues like global state management and difficulties in unit testing.\n- **Overhead**: Introduces additional complexity and can make the system more difficult to refactor.\n\n### Comparison with Dependency Injection\n\n- **Service Locator** vs. **Dependency Injection (DI)**:\n  - In **Service Locator**, the client actively requests the service from a centralized registry.\n  - In **Dependency Injection**, the service is injected into the client, typically by a framework, without the client having to know where the service comes from.\n\nMany modern frameworks (like Spring) favor Dependency Injection over Service Locator because DI makes dependencies explicit and supports better testing practices.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"aab81ac3-eeff-48de-b066-56286f343d13","order":0,"createdDate":{"$date":"2024-08-29T11:28:06.717Z"},"updatedDate":{"$date":"2024-08-29T11:28:06.717Z"},"uniqueId":"63f7312e-61d9-4df9-9945-d69f761a14bf","__v":0}
{"_id":{"$oid":"66d05bc7a272225ce48479d1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The **Service Locator** design pattern falls under the category of **Dependency Injection (DI)** and **Dependency Management** patterns. More specifically, it is often classified as a **Creational Pattern** within the broader scope of design patterns, as it deals with the creation and management of dependencies.\n\n### Design Pattern Categories\n\n1. **Creational Patterns**:\n   - Concerned with the way objects are created.\n   - Examples: Factory Method, Singleton, Builder, Prototype, Abstract Factory, Service Locator.\n\n2. **Structural Patterns**:\n   - Concerned with object composition and relationships between entities.\n   - Examples: Adapter, Composite, Proxy, Flyweight, Facade, Bridge, Decorator.\n\n3. **Behavioral Patterns**:\n   - Concerned with communication and responsibility among objects.\n   - Examples: Strategy, Observer, Command, Iterator, Mediator, Chain of Responsibility, State, Visitor, Template Method.\n\n### Service Locator as a Creational Pattern\n\n- **Service Locator** is classified as a **Creational Pattern** because it provides a way to obtain service instances (objects) at runtime, thereby managing the creation and lifecycle of dependencies in a centralized manner.\n  \n- Unlike the traditional DI approach, where dependencies are provided to an object via constructor or setter injection, the Service Locator pattern allows an object to retrieve its dependencies from a centralized registry or locator, thereby \"creating\" or \"obtaining\" the necessary objects when needed. This aspect aligns with the intent of Creational Patterns, which focus on the best ways to instantiate objects.\n\n### Comparison with Dependency Injection\n\n- Both Service Locator and Dependency Injection are aimed at reducing the dependency of objects on concrete implementations, thereby promoting loose coupling and better code manageability.\n  \n- However, while Dependency Injection typically makes dependencies explicit (through constructor or method injection), Service Locator can sometimes obscure them by hiding the dependency retrieval inside the object.\n\nThus, while the Service Locator is a form of dependency management like DI, it’s more closely aligned with the **Creational Patterns** category because of its focus on how services (dependencies) are retrieved and managed during the application's lifecycle.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1ee679f2-a191-48da-9c0a-5057ded93f65","order":0,"createdDate":{"$date":"2024-08-29T11:30:15.553Z"},"updatedDate":{"$date":"2024-08-29T11:30:15.553Z"},"uniqueId":"cb888aeb-63d6-441c-9262-ac28640db4c6","__v":0}
{"_id":{"$oid":"66d05ccba272225ce484910f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### Load Balancer\n\nA **Load Balancer** is a system that distributes incoming network traffic across multiple servers. This ensures no single server bears too much load, improving application reliability and scalability. Load balancers can operate at different layers of the OSI model, including:\n\n1. **Layer 4 (Transport Layer)**:\n   - Distributes traffic based on IP address and TCP/UDP ports.\n   - Examples: TCP Load Balancing, Network Load Balancer (AWS).\n\n2. **Layer 7 (Application Layer)**:\n   - Distributes traffic based on application-level data like HTTP headers, URLs, or content.\n   - Examples: HTTP/HTTPS Load Balancing, Application Load Balancer (AWS).\n\n**Key Features**:\n- **Scalability**: Automatically routes traffic to available servers to handle growing demand.\n- **Fault Tolerance**: Detects server failures and reroutes traffic to healthy servers.\n- **Security**: Can enforce SSL termination and protect against certain types of cyberattacks.\n- **Session Persistence**: Ensures that a user session is always routed to the same server.\n\n### API Gateway\n\nAn **API Gateway** is a server that acts as an entry point for all client requests to backend services in a microservices architecture. It handles various functions such as request routing, composition, protocol translation, and more. It serves as a single point of contact for managing APIs.\n\n**Key Functions**:\n- **Request Routing**: Routes client requests to the appropriate backend service.\n- **Rate Limiting**: Limits the number of requests a client can make to protect backend services from being overwhelmed.\n- **Authentication and Authorization**: Verifies the identity of the client and ensures they have permission to access specific services.\n- **Logging and Monitoring**: Tracks requests and responses for auditing and performance monitoring.\n- **Load Balancing**: Some API gateways include built-in load balancing to distribute requests across multiple instances of backend services.\n- **Caching**: Stores frequently accessed data to reduce the load on backend services and improve response times.\n- **API Composition**: Combines data from multiple microservices into a single response to fulfill client requests.\n\n**Popular API Gateway Solutions**:\n- **NGINX**: Often used as a reverse proxy and API gateway.\n- **AWS API Gateway**: Managed service provided by AWS.\n- **Kong**: Open-source API gateway and microservice management layer.\n- **Zuul**: Open-source API gateway from Netflix.\n\n### Comparison\n\n- **Load Balancer**: Primarily focuses on distributing traffic across multiple servers to ensure availability and reliability. It's more about managing the infrastructure and ensuring even distribution of workloads.\n  \n- **API Gateway**: Focuses on managing and securing API requests. It handles API-specific tasks like request routing, authentication, and composition, making it more suited for microservices architectures.\n\nIn summary, a load balancer distributes traffic to ensure high availability and performance, while an API gateway manages, routes, and secures API requests in a microservices environment.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"eaac3822-5185-41c4-bf7d-06370e6fbede","order":0,"createdDate":{"$date":"2024-08-29T11:34:35.116Z"},"updatedDate":{"$date":"2024-08-29T11:34:35.116Z"},"uniqueId":"12ecdda4-0591-4e25-99c4-96228a015abe","__v":0}
{"_id":{"$oid":"66d068d0a272225ce485328b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Sharding** is a database architecture technique used to distribute data across multiple servers, or \"shards,\" to improve performance, scalability, and availability. Each shard holds a portion of the total dataset, and together, all the shards make up the complete database. This technique is commonly used in large-scale applications to handle high volumes of data and traffic.\n\n### Key Concepts of Sharding\n\n- **Horizontal Partitioning**: Sharding is a form of horizontal partitioning, where each shard contains a subset of rows from a table. For example, if a table has 1 million rows, sharding might divide it into 10 shards, each containing 100,000 rows.\n\n- **Shard Key**: The shard key is a specific field or set of fields in the database that determines which shard a particular piece of data will reside in. Choosing an appropriate shard key is crucial for distributing data evenly and minimizing query latency.\n\n- **Independent Shards**: Each shard operates independently of the others. They can be located on different servers, databases, or even in different geographic locations.\n\n- **Scalability**: By distributing the load across multiple shards, the system can handle more read and write operations simultaneously, which increases the overall scalability of the application.\n\n- **Fault Isolation**: If one shard goes down, only the data on that shard is affected, while the other shards continue to function, improving the overall system availability.\n\n### Example of Sharding\n\nConsider an e-commerce application with a large user base. Instead of storing all user data in a single database, the data might be sharded based on the user's geographic location:\n\n- **Shard 1**: Stores data for users in North America.\n- **Shard 2**: Stores data for users in Europe.\n- **Shard 3**: Stores data for users in Asia.\n\nWhen a user from Europe accesses their data, the system automatically routes their request to **Shard 2**.\n\n### Advantages of Sharding\n\n- **Improved Performance**: Queries and transactions can be processed faster because the data is distributed, reducing the load on any single server.\n- **Enhanced Scalability**: Easily add more shards to handle increased data volumes and traffic as the application grows.\n- **Fault Tolerance**: The failure of one shard does not affect the availability of others, making the system more resilient.\n\n### Disadvantages of Sharding\n\n- **Complexity**: Implementing and maintaining a sharded architecture can be complex, requiring careful design and management.\n- **Data Distribution Challenges**: Uneven data distribution across shards can lead to hotspots, where some shards are overloaded while others are underutilized.\n- **Cross-Shard Queries**: Queries that need to access data from multiple shards can be slower and more complicated to execute.\n\n### Use Cases for Sharding\n\n- **Large-scale Applications**: Applications with massive amounts of data, such as social media platforms, e-commerce sites, or financial systems, where a single database server cannot handle the load.\n- **Geographically Distributed Data**: Systems that need to store data close to the users' locations for faster access and compliance with data residency regulations.\n\nSharding is a powerful tool for managing large datasets and ensuring that applications can scale effectively, but it requires careful planning and execution to be successful.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"a722458b-99a9-444a-af4c-e08cd6e0a289","order":0,"createdDate":{"$date":"2024-08-29T12:25:52.344Z"},"updatedDate":{"$date":"2024-08-29T12:25:52.344Z"},"uniqueId":"aa35a6fc-5a89-4297-9de0-3d96fe2e585e","__v":0}
{"_id":{"$oid":"66d07677a272225ce4856296"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Database Architecture & Scaling Techniques** refer to the design and methodologies used to structure databases and optimize their performance, reliability, and scalability as data and user demands grow. This includes the organization of database components, strategies for managing large volumes of data, and methods to ensure that the database can efficiently handle increased loads.\n\n### Key Components\n\n1. **Database Architecture**:\n   - **Data Models**: Defines how data is structured, stored, and retrieved, including relational, NoSQL, and hierarchical models.\n   - **Schema Design**: The blueprint of the database, detailing the organization of tables, fields, relationships, indexes, and constraints.\n   - **Database Engine**: The core software component that handles data storage, retrieval, and query processing.\n\n2. **Scaling Techniques**:\n   - **Vertical Scaling (Scaling Up)**: Increasing the capacity of a single server by adding more resources (CPU, memory, storage). This approach is limited by the physical capacity of a single machine.\n   - **Horizontal Scaling (Scaling Out)**: Adding more servers or nodes to distribute the load. This is more complex but allows for nearly unlimited scaling.\n   - **Sharding**: A form of horizontal scaling where the database is partitioned into smaller, independent pieces called shards, each residing on a different server.\n   - **Replication**: Creating copies of the database on multiple servers to enhance redundancy, load balancing, and fault tolerance.\n   - **Load Balancing**: Distributing incoming queries across multiple servers to prevent any single server from being overwhelmed.\n\n### Why It Matters\n\n- **Performance**: Proper database architecture and scaling techniques ensure that the database performs efficiently even as data grows.\n- **Reliability**: Techniques like replication and sharding help maintain availability and consistency of data, even during failures.\n- **Scalability**: As user demand and data volume increase, scaling techniques allow the database to grow without significant performance degradation.\n- **Cost Efficiency**: Efficient architecture and scaling reduce the need for expensive hardware and optimize resource usage.\n\nThese principles are crucial for building robust, high-performance systems that can handle the complexities of modern applications, from small web apps to large-scale enterprise systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b729368a-5ff1-4632-a2bf-cb11befc3b1b","order":0,"createdDate":{"$date":"2024-08-29T13:24:07.216Z"},"updatedDate":{"$date":"2024-08-29T13:24:07.216Z"},"uniqueId":"85a5cb84-6775-44c8-b0bd-e677f6a6826b","__v":0}
{"_id":{"$oid":"66d07957a272225ce485a247"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Network Traffic Management & API Integration** refers to the strategies, tools, and practices used to efficiently manage the flow of data across a network and integrate various Application Programming Interfaces (APIs) within an application's architecture. This involves optimizing the distribution of incoming requests, ensuring seamless communication between different services, and enhancing the overall performance, security, and scalability of the system.\n\n### Key Concepts\n\n1. **Network Traffic Management**:\n   - **Load Balancer**: A device or software that distributes incoming network traffic across multiple servers to ensure no single server becomes overwhelmed. This improves performance, reliability, and availability of applications.\n     - **Types of Load Balancing**: \n       - **Round Robin**: Distributes requests sequentially across servers.\n       - **Least Connections**: Directs traffic to the server with the fewest active connections.\n       - **IP Hash**: Routes requests based on the client’s IP address.\n   - **Traffic Routing**: Directing network traffic to the appropriate services or servers based on predefined rules, such as URL paths, headers, or content type.\n   - **Rate Limiting**: Controlling the number of requests a user can make to a server within a certain time period to prevent overloading and abuse.\n\n2. **API Integration**:\n   - **API Gateway**: A server that acts as an entry point for all client requests, handling tasks like routing, rate limiting, authentication, and monitoring. It simplifies the communication between clients and microservices, abstracts the internal architecture, and often combines multiple API calls into a single request.\n   - **Service Discovery**: Enables dynamic routing by automatically locating and connecting to the right services based on availability and health status.\n   - **Authentication & Authorization**: Ensuring secure access to APIs by verifying user credentials and permissions, often handled by the API gateway.\n\n### Importance\n\n- **Scalability**: Load balancers enable systems to handle increased demand by efficiently distributing traffic, while API gateways manage API calls, reducing bottlenecks.\n- **Reliability**: By distributing traffic and ensuring that requests are handled by healthy servers, these techniques enhance system availability and fault tolerance.\n- **Security**: API gateways enforce security policies, such as rate limiting, authentication, and data validation, reducing the risk of attacks.\n- **Performance Optimization**: Traffic management and API integration practices help optimize the performance of applications by ensuring that requests are processed by the most appropriate resources.\n\n### Use Cases\n\n- **Microservices Architecture**: In a microservices-based application, API gateways manage communication between services and external clients, while load balancers ensure that no single service is overloaded.\n- **Cloud-Based Applications**: For applications hosted in the cloud, load balancers and API gateways are critical for managing traffic efficiently and securely across distributed environments.\n- **Enterprise Systems**: Large-scale enterprise applications rely on these techniques to maintain high availability, performance, and security in complex and high-traffic environments.\n\n**Network Traffic Management & API Integration** are essential components of modern application architecture, ensuring that systems are scalable, secure, and capable of handling a large volume of requests efficiently.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"a2ad4adb-a391-40b5-bfe1-2165aa028090","order":0,"createdDate":{"$date":"2024-08-29T13:36:23.407Z"},"updatedDate":{"$date":"2024-08-29T13:36:23.407Z"},"uniqueId":"c1d59e77-bfb3-4cc5-b8ca-35af60c18cb5","__v":0}
{"_id":{"$oid":"66d07a7ea272225ce485c640"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Spring Boot, a framework for building microservices and RESTful APIs in Java, provides several features and integrations that help with **Network Traffic Management & API Integration**. Here’s how Spring Boot can assist in these areas:\n\n### 1. **Building API Gateways**\n   - **Spring Cloud Gateway**: Spring Boot integrates with Spring Cloud Gateway, a powerful API gateway that provides routing, monitoring, security, and resilience. It acts as a single entry point for all client requests, directing them to the appropriate microservices.\n     - **Features**:\n       - **Routing**: Routes requests based on URL, headers, query parameters, and more.\n       - **Filters**: Applies filters for logging, authentication, rate limiting, and transformation of requests and responses.\n       - **Load Balancing**: Distributes requests to various services based on pre-configured algorithms, ensuring balanced traffic.\n       - **Security**: Supports OAuth2, JWT, and other authentication mechanisms, enabling secure access to microservices.\n\n### 2. **Load Balancing**\n   - **Spring Cloud LoadBalancer**: Spring Boot works with Spring Cloud LoadBalancer to distribute client requests across multiple service instances, ensuring that no single instance is overloaded.\n     - **Client-Side Load Balancing**: Instead of relying solely on external load balancers, Spring Cloud LoadBalancer allows the application to distribute traffic across service instances based on criteria like least connections or round-robin.\n     - **Integration with Service Discovery**: Works with service discovery tools like Eureka or Consul to dynamically discover and load-balance requests among available instances.\n\n### 3. **Service Discovery**\n   - **Spring Cloud Netflix Eureka**: Spring Boot integrates with Eureka for service registration and discovery, enabling dynamic routing and load balancing based on the availability of services.\n     - **Automatic Registration**: Microservices automatically register with Eureka upon startup.\n     - **Dynamic Discovery**: Services can dynamically discover and communicate with other services without needing hardcoded URLs.\n\n### 4. **Resilience and Fault Tolerance**\n   - **Spring Cloud Circuit Breaker**: Spring Boot integrates with circuit breaker libraries like Resilience4j, Hystrix (deprecated), or Spring Cloud Circuit Breaker, which helps manage service failures gracefully.\n     - **Circuit Breaker**: Prevents system overload by stopping calls to failing services and providing fallback mechanisms.\n     - **Rate Limiting**: Spring Boot applications can implement rate limiting to control the number of requests that can be processed in a given timeframe, protecting services from being overwhelmed.\n\n### 5. **Monitoring and Observability**\n   - **Spring Boot Actuator**: Provides built-in endpoints for monitoring the health, metrics, and status of applications, which is crucial for traffic management and API integration.\n     - **Health Checks**: Automatically exposes health checks for load balancers to determine if an instance is healthy.\n     - **Metrics**: Collects and exposes metrics such as request counts, response times, and error rates, helping to monitor and optimize API performance.\n\n### 6. **Security**\n   - **Spring Security**: Integrates seamlessly with Spring Boot to provide authentication and authorization for APIs.\n     - **OAuth2 and JWT**: Spring Boot supports OAuth2 and JWT, allowing the API gateway to securely manage user authentication and authorization across microservices.\n     - **Rate Limiting**: Implements security mechanisms to protect APIs from abuse, such as by limiting the rate of requests from individual clients.\n\n### 7. **Microservices Communication**\n   - **Spring Cloud OpenFeign**: Enables declarative REST client functionality, simplifying the process of making API calls between microservices.\n     - **Load Balancing**: Integrates with load balancers to ensure that requests to other microservices are evenly distributed.\n\n### Summary\nSpring Boot, when combined with the Spring Cloud ecosystem, provides a comprehensive solution for **Network Traffic Management & API Integration**. By leveraging tools like Spring Cloud Gateway, Spring Cloud LoadBalancer, and Spring Security, Spring Boot applications can efficiently manage traffic, secure APIs, and ensure that microservices communicate seamlessly and reliably.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e8a5b303-3f33-487d-9069-e0070082990d","order":0,"createdDate":{"$date":"2024-08-29T13:41:18.66Z"},"updatedDate":{"$date":"2024-08-29T13:41:18.66Z"},"uniqueId":"633b0c89-19a1-4159-817e-ca6d07f8b8dd","__v":0}
{"_id":{"$oid":"66d089f1a272225ce485ffc6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### SOLID Principles in Object-Oriented Design\n\n- **Overview**\n  - The SOLID principles are fundamental guidelines for object-oriented design.\n  - Applying these principles can lead to more maintainable, extensible, and robust software.\n\n- **1. Single Responsibility Principle (SRP)**\n  - A class should have only one reason to change, meaning it should have a single job or responsibility.\n  - **Example**: Instead of having a single class that handles both user data storage and user data validation, separate these concerns into distinct classes.\n\n- **2. Open-Closed Principle (OCP)**\n  - Software entities (classes, modules, functions) should be open for extension but closed for modification.\n  - **Example**: Use abstract classes or interfaces to allow for new functionality to be added via derived classes or implementations without altering existing code.\n\n- **3. Liskov Substitution Principle (LSP)**\n  - Subtypes (derived classes) must be substitutable for their base types (parent classes) without affecting the correctness of the program.\n  - **Example**: If a class `Bird` has a method `fly()`, a derived class `Penguin` should not override `fly()` in a way that breaks the expected behavior for `Bird`.\n\n- **4. Interface Segregation Principle (ISP)**\n  - Clients should not be forced to depend on interfaces they do not use.\n  - **Example**: Instead of a single large interface `IMachine` with methods `print()`, `scan()`, and `fax()`, create smaller, more specific interfaces like `IPrinter`, `IScanner`, and `IFax` to avoid forcing clients to implement unused methods.\n\n- **5. Dependency Inversion Principle (DIP)**\n  - High-level modules should not depend on low-level modules; both should depend on abstractions.\n  - **Example**: Instead of a high-level module directly using a low-level module, introduce an interface (abstraction) that both modules depend on. This way, changes in low-level modules do not affect high-level modules, and vice versa.\n\n### Additional Insights\n\n- **Principle Application**\n  - **Maintainability**: Following SOLID principles helps in creating code that is easier to maintain and extend over time.\n  - **Testability**: Adhering to these principles often leads to code that is easier to test due to better separation of concerns and reduced coupling.\n  - **Flexibility**: SOLID principles promote flexible design, allowing for easier updates and changes to the system as requirements evolve.\n\n- **Best Practices**\n  - **Refactoring**: Regularly refactor code to adhere to SOLID principles, especially when adding new features or making changes.\n  - **Design Patterns**: Utilize design patterns (e.g., Factory, Strategy, Observer) that align with SOLID principles to solve common design problems effectively.\n\nBy incorporating these principles into your design practices, you can achieve a more organized, adaptable, and high-quality software system.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"18abd8a6-bc28-44a4-a6cb-12663929cbb4","order":0,"createdDate":{"$date":"2024-08-29T14:47:13.094Z"},"updatedDate":{"$date":"2024-08-29T14:47:13.094Z"},"uniqueId":"3525ae63-e2a1-4286-afb2-93ef7a595f8a","__v":0}
{"_id":{"$oid":"66d0a9a8a272225ce4867700"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### What is Object-Oriented Design?\n\nObject-Oriented Design (OOD) is a programming approach centered around the concept of \"objects.\" In OOD, software is structured as a collection of objects that interact with one another to accomplish specific tasks. Each object represents a real-world entity or concept and encapsulates both data (attributes) and behavior (methods).\n\n#### **Key Concepts of Object-Oriented Design:**\n\n1. **Classes and Objects**\n   - **Class**: A blueprint for creating objects, defining a set of attributes and methods that the objects created from the class will have.\n   - **Object**: An instance of a class, representing a specific entity in the system.\n\n2. **Encapsulation**\n   - Encapsulation is the practice of bundling the data (attributes) and the methods that operate on that data into a single unit or class. This concept also restricts direct access to some of the object's components, promoting data hiding and reducing complexity.\n\n3. **Inheritance**\n   - Inheritance allows a new class (subclass) to inherit attributes and methods from an existing class (superclass). This promotes code reuse and helps create a hierarchical relationship between classes.\n\n4. **Polymorphism**\n   - Polymorphism enables objects to be treated as instances of their parent class, allowing for the use of a single interface to represent different underlying forms (data types). This concept supports flexibility and the ability to extend functionality.\n\n5. **Abstraction**\n   - Abstraction involves highlighting the essential features of an object while hiding the complex implementation details. It allows developers to focus on interacting with objects at a higher level, making the design simpler and more intuitive.\n\n#### **Benefits of Object-Oriented Design:**\n\n- **Modularity**: Code is organized into classes, which makes it easier to manage, maintain, and test.\n- **Reusability**: Inheritance and polymorphism promote the reuse of existing code, reducing redundancy.\n- **Scalability**: OOD provides a clear structure for extending software, making it easier to scale and adapt to new requirements.\n- **Maintainability**: Encapsulation and abstraction make the codebase easier to understand, modify, and maintain over time.\n\nOverall, Object-Oriented Design is a powerful approach to software development that emphasizes structure, clarity, and the modeling of real-world entities, leading to more robust and scalable software systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"282658c4-0db4-400f-8474-2758145fdc6e","order":0,"createdDate":{"$date":"2024-08-29T17:02:32.46Z"},"updatedDate":{"$date":"2024-08-29T17:02:32.46Z"},"uniqueId":"b5baa222-5d91-49ff-8ba0-d86bdab9dc81","__v":0}
{"_id":{"$oid":"66d0acb5a272225ce486a705"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, in addition to the SOLID principles, there are several other important principles in software design and architecture that help create maintainable, scalable, and robust software systems. Here are some of them:\n\n### 1. **DRY (Don't Repeat Yourself)**\n   - **Description**: This principle emphasizes the reduction of code duplication. The idea is to have a single, unambiguous source of truth within a system.\n   - **Benefit**: Reduces redundancy, making the code easier to maintain and less prone to errors.\n\n### 2. **KISS (Keep It Simple, Stupid)**\n   - **Description**: This principle advocates for simplicity in design. The goal is to avoid unnecessary complexity and to design systems that are straightforward and easy to understand.\n   - **Benefit**: Leads to more maintainable and less error-prone code.\n\n### 3. **YAGNI (You Ain't Gonna Need It)**\n   - **Description**: This principle advises against adding functionality until it is necessary. It discourages speculative features that may never be used.\n   - **Benefit**: Helps keep the codebase clean and focused on current requirements, reducing the risk of overengineering.\n\n### 4. **Separation of Concerns**\n   - **Description**: This principle dictates that a software system should be divided into distinct sections, each handling a specific responsibility or concern.\n   - **Benefit**: Improves modularity, making the system easier to understand, develop, and maintain.\n\n### 5. **Law of Demeter (LoD)**\n   - **Description**: Also known as the \"principle of least knowledge,\" it states that a module should not know the inner details of the objects it interacts with. Essentially, it promotes loose coupling between components.\n   - **Benefit**: Leads to more modular and flexible code, reducing dependencies.\n\n### 6. **Composition Over Inheritance**\n   - **Description**: This principle advocates for using composition (objects containing other objects) rather than inheritance to achieve code reuse.\n   - **Benefit**: Enhances flexibility and reduces the complexity associated with deep inheritance hierarchies.\n\n### 7. **Interface Segregation Principle (ISP)**\n   - **Description**: Clients should not be forced to depend on interfaces they do not use. It encourages designing small, specific interfaces rather than a large, general-purpose interface.\n   - **Benefit**: Reduces the impact of changes in the codebase and promotes better organization.\n\n### 8. **Liskov Substitution Principle (LSP)**\n   - **Description**: Subtypes should be substitutable for their base types without altering the correctness of the program.\n   - **Benefit**: Ensures that derived classes enhance functionality without altering existing behavior.\n\n### 9. **Dependency Injection**\n   - **Description**: A technique where an object receives its dependencies from an external source rather than creating them itself. It’s a part of the broader Dependency Inversion Principle.\n   - **Benefit**: Increases modularity, testability, and flexibility of the code.\n\n### 10. **Twelve-Factor App**\n   - **Description**: A methodology for building software-as-a-service applications that promote best practices for web applications, focusing on portability and resilience.\n   - **Benefit**: Enhances the scalability, maintainability, and deployment of web applications.\n\n### 11. **Convention Over Configuration**\n   - **Description**: This principle suggests that developers should follow established conventions, so the framework does most of the work, minimizing the need for explicit configuration.\n   - **Benefit**: Simplifies development and reduces the number of decisions developers need to make.\n\n### 12. **Favor Composition Over Inheritance**\n   - **Description**: Prefer using composition to combine behaviors into objects rather than relying on inheritance hierarchies.\n   - **Benefit**: Promotes flexibility and reduces the tight coupling inherent in inheritance.\n\n### 13. **Fail-Fast**\n   - **Description**: The idea that a system should immediately report any condition that is likely to indicate a failure. This allows the problem to be detected and addressed quickly.\n   - **Benefit**: Improves system reliability by ensuring that problems are caught early in the development cycle.\n\n### 14. **Single Level of Abstraction Principle (SLAP)**\n   - **Description**: This principle states that functions or methods should operate at a single level of abstraction, making them easier to understand and maintain.\n   - **Benefit**: Improves code readability and maintainability by keeping functions focused.\n\n### 15. **Principle of Least Astonishment**\n   - **Description**: This principle states that software should behave in a way that least surprises the user. When the behavior of a system surprises a user, it’s often a sign of poor design.\n   - **Benefit**: Enhances user experience and reduces confusion, leading to more intuitive software.\n\nThese principles, along with SOLID, form a comprehensive toolkit for designing well-structured, maintainable, and scalable software systems. By understanding and applying these principles, developers can create software that is easier to manage, extend, and adapt over time.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f140ce95-6013-4044-87bd-d656c2b8bedc","order":0,"createdDate":{"$date":"2024-08-29T17:15:33.742Z"},"updatedDate":{"$date":"2024-08-29T17:15:33.742Z"},"uniqueId":"4348f1cf-2d7f-4a99-9786-d1efd5ba9408","__v":0}
{"_id":{"$oid":"66d0ae04a272225ce486cb62"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Object-oriented design (OOD) falls under the broader category of **software design** and **software engineering**. More specifically, it is a methodology within the realm of **object-oriented programming (OOP)**. Here are a few categories where OOD can be placed:\n\n1. **Software Design**: OOD is a crucial aspect of designing software systems, focusing on creating software architecture and components using objects.\n\n2. **Software Engineering**: It is a part of the software development process, involving principles and practices to ensure the software is robust, maintainable, and scalable.\n\n3. **Programming Paradigms**: OOD is a key component of the object-oriented programming paradigm, which emphasizes the use of objects and classes.\n\n4. **Design Patterns**: OOD often involves the use of design patterns, which are reusable solutions to common problems in software design.\n\n5. **System Architecture**: It plays a role in defining the structure and behavior of software systems, ensuring that different components interact seamlessly.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"3e40f299-dae3-4846-9f09-50bb5de16d9e","order":0,"createdDate":{"$date":"2024-08-29T17:21:08.648Z"},"updatedDate":{"$date":"2024-08-29T17:21:25.561Z"},"uniqueId":"edc1a256-dfd9-46f9-bc3c-07e3be63fd37","__v":0}
{"_id":{"$oid":"66d0ae85a272225ce486ef87"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Fundamentals of Object-Oriented Programming (OOP)**\n\nObject-Oriented Programming (OOP) is a programming paradigm centered around the concept of \"objects,\" which can contain both data (attributes) and methods (functions). OOP is designed to provide a clear modular structure for programs, making it easier to manage complexity, reuse code, and model real-world entities.\n\n### Key Concepts of OOP:\n\n1. **Classes and Objects:**\n   - **Class:** A blueprint for creating objects. It defines a set of attributes and methods that the created objects (instances) will have.\n   - **Object:** An instance of a class. Objects represent real-world entities and can interact with each other through methods.\n\n2. **Encapsulation:**\n   - The practice of bundling data (attributes) and methods that operate on the data into a single unit, typically a class. Encapsulation helps in hiding the internal state of an object from the outside world and only exposing necessary functionality.\n\n3. **Inheritance:**\n   - A mechanism that allows one class (subclass or derived class) to inherit attributes and methods from another class (superclass or base class). Inheritance promotes code reuse and establishes a relationship between classes.\n\n4. **Polymorphism:**\n   - The ability of different objects to respond to the same method in different ways. Polymorphism allows methods to be used interchangeably, making code more flexible and reusable. It can be achieved through method overloading (compile-time polymorphism) and method overriding (runtime polymorphism).\n\n5. **Abstraction:**\n   - The concept of hiding the complex implementation details of a system and exposing only the essential features. Abstraction simplifies interaction with objects by focusing on what they do rather than how they do it.\n\n### Benefits of OOP:\n\n- **Modularity:** Code is organized into classes and objects, making it easier to manage, understand, and maintain.\n- **Reusability:** Classes and objects can be reused across different programs or within the same program, reducing redundancy.\n- **Scalability:** OOP allows for scalable system design by enabling easy addition of new features or modifications to existing features without affecting other parts of the system.\n- **Maintainability:** The modular structure of OOP makes it easier to update and maintain code over time.\n\nOOP is widely used in many programming languages, including Java, C++, Python, and Ruby, and serves as the foundation for building complex software systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"20017a25-6a6b-40e4-9a3c-7e5ede7fa7fc","order":0,"createdDate":{"$date":"2024-08-29T17:23:17.031Z"},"updatedDate":{"$date":"2024-08-29T17:23:17.031Z"},"uniqueId":"dfe8fe37-07af-457e-bf01-2823f8c9a97c","__v":0}
{"_id":{"$oid":"66d0af5ea272225ce4871411"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Object-oriented design (OOD) and object-oriented programming (OOP) are closely related but distinct concepts:\n\n1. **Object-Oriented Design (OOD)**:\n   - **Focus**: OOD is about planning and designing the structure of a software system using objects and classes. It involves defining the system architecture, identifying the objects, their relationships, and interactions.\n   - **Activities**: Includes creating class diagrams, defining interfaces, and applying design principles and patterns to ensure a robust and maintainable design.\n   - **Goal**: To create a blueprint for the system that can be implemented using OOP.\n\n2. **Object-Oriented Programming (OOP)**:\n   - **Focus**: OOP is about implementing the design using a programming language that supports object-oriented concepts like classes, objects, inheritance, polymorphism, and encapsulation.\n   - **Activities**: Writing code, defining classes and objects, and implementing methods and properties as per the design.\n   - **Goal**: To build the actual software system based on the design created during the OOD phase.\n\nIn summary, OOD is the planning and design phase, while OOP is the implementation phase. Both are essential parts of the object-oriented approach to software development. ","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4a3bbac6-1c68-49a4-8493-818f6ed51e61","order":0,"createdDate":{"$date":"2024-08-29T17:26:54.427Z"},"updatedDate":{"$date":"2024-08-29T17:26:54.427Z"},"uniqueId":"ec7bea9e-fb72-4414-9708-d817c3f43aa7","__v":0}
{"_id":{"$oid":"66d0bf96a272225ce487b3bd"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Sure! Here's a basic example of how to set up Spring Security in a Maven-based Java web application:\n\n### 1. Add Dependencies to `pom.xml`\n\nFirst, include the necessary Spring Security dependencies in your `pom.xml` file:\n\n```xml\n<dependencies>\n    <!-- Spring Security -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n    <!-- Spring Web -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <!-- Thymeleaf for views -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n</dependencies>\n```\n\n### 2. Create a Security Configuration Class\n\nNext, create a configuration class to set up Spring Security:\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .antMatchers(\"/\", \"/home\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin()\n                .loginPage(\"/login\")\n                .permitAll()\n                .and()\n            .logout()\n                .permitAll();\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n            .inMemoryAuthentication()\n                .withUser(\"user\").password(\"{noop}password\").roles(\"USER\");\n    }\n}\n```\n\n### 3. Create Controller and Views\n\nCreate a simple controller to handle requests:\n\n```java\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n\n    @GetMapping(\"/\")\n    public String home() {\n        return \"home\";\n    }\n\n    @GetMapping(\"/login\")\n    public String login() {\n        return \"login\";\n    }\n}\n```\n\nCreate `home.html` and `login.html` in `src/main/resources/templates`:\n\n**home.html**:\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <p>Click <a th:href=\"@{/logout}\">here</a> to logout.</p>\n</body>\n</html>\n```\n\n**login.html**:\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    <form th:action=\"@{/login}\" method=\"post\">\n        <div>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\"/>\n        </div>\n        <div>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\"/>\n        </div>\n        <div>\n            <button type=\"submit\">Login</button>\n        </div>\n    </form>\n</body>\n</html>\n```\n\n### 4. Run the Application\n\nRun your Spring Boot application, and you should be able to access the home page and login page.\n\nThis setup provides a basic configuration for Spring Security with in-memory authentication. You can further customize it to suit your needs, such as integrating with a database for user authentication.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"e47a999a-adb1-4eda-809a-01221ec35b66","order":0,"createdDate":{"$date":"2024-08-29T18:36:06.051Z"},"updatedDate":{"$date":"2024-08-29T18:36:06.051Z"},"uniqueId":"9f3f63b2-1414-43a7-a8d3-29db7d4863ad","__v":0}
{"_id":{"$oid":"66d0c737a272225ce487d8bd"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Apache Kafka** is an open-source distributed event streaming platform designed to handle real-time data feeds. It was originally developed by LinkedIn and later open-sourced under the Apache Software Foundation. Kafka is widely used for building real-time data pipelines and streaming applications, providing a unified, high-throughput, low-latency platform for handling real-time data.\n\n### Key Concepts:\n\n1. **Topics:**\n   - Kafka organizes events (or messages) into categories called topics. Producers send messages to topics, and consumers read messages from them.\n\n2. **Producers:**\n   - Producers are applications that publish (write) messages to Kafka topics.\n\n3. **Consumers:**\n   - Consumers are applications that subscribe to (read) messages from Kafka topics.\n\n4. **Brokers:**\n   - Kafka runs in a distributed cluster of servers known as brokers. Each broker is responsible for receiving, storing, and serving messages to consumers. Kafka can scale horizontally by adding more brokers to the cluster.\n\n5. **Partitions:**\n   - Each topic is divided into partitions, which are the basic unit of scalability in Kafka. Messages within a partition are ordered, and each message has a unique offset. Partitions allow Kafka to distribute data across multiple brokers, enabling parallel processing.\n\n6. **Replication:**\n   - Kafka provides fault tolerance through replication. Each partition has one or more replicas that are distributed across different brokers, ensuring data availability even if some brokers fail.\n\n7. **Zookeeper:**\n   - Apache Kafka uses Zookeeper (although plans to phase it out are underway) to manage and coordinate the Kafka brokers. Zookeeper helps in leader election for partitions and keeps track of metadata.\n\n8. **Streams API:**\n   - Kafka Streams is a powerful library for building real-time applications that process data in Kafka. It allows developers to transform, aggregate, and analyze data stored in Kafka topics.\n\n9. **Connect API:**\n   - Kafka Connect is a tool for connecting Kafka with external systems, such as databases, key-value stores, search indexes, and file systems. It provides a plug-in mechanism to import and export data between Kafka and other systems.\n\n### Use Cases:\n\n- **Real-Time Analytics:** Process and analyze data in real-time, such as monitoring user activity on a website or analyzing sensor data.\n- **Data Integration:** Kafka can be used to collect and aggregate data from different sources and deliver it to various destinations, making it a popular choice for building data pipelines.\n- **Event Sourcing:** Kafka is often used to implement event sourcing patterns, where changes in the state of an application are logged as events.\n- **Log Aggregation:** Kafka can be used to aggregate and distribute logs from multiple sources, allowing centralized log management and monitoring.\n\n### Advantages:\n\n- **Scalability:** Kafka can scale horizontally by adding more brokers to the cluster, and it can handle large volumes of data with high throughput.\n- **Fault Tolerance:** Data replication across multiple brokers ensures data availability even in case of failures.\n- **Durability:** Messages in Kafka are stored on disk and can be retained for a configurable period, ensuring that they are not lost.\n\n### Summary:\n\nApache Kafka is a highly scalable, fault-tolerant, and durable platform for real-time data streaming. It is widely used in modern data architectures for building event-driven systems, real-time analytics, and large-scale data integration pipelines. Kafka's ability to handle high throughput with low latency makes it a powerful tool for organizations looking to process and analyze data in real-time.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"a539c112-ffbe-4476-8f52-7ed7ca9e75f2","order":0,"createdDate":{"$date":"2024-08-29T19:08:39.136Z"},"updatedDate":{"$date":"2024-08-29T19:08:39.136Z"},"uniqueId":"e6325f9d-4645-4d53-a1d0-b8b5f8fd5da3","__v":0}
{"_id":{"$oid":"66d0c7e0a272225ce487f10f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Apache Kafka solves several key challenges in distributed systems, particularly around data integration, real-time processing, scalability, and fault tolerance. Here’s how Kafka addresses these problems:\n\n### 1. **High Throughput Data Ingestion:**\n   - **Problem:** In distributed systems, collecting and ingesting data from multiple sources (e.g., microservices, databases, logs, IoT devices) can be challenging, especially when the data volume is high.\n   - **Solution with Kafka:** Kafka provides a robust, scalable, and fault-tolerant platform for ingesting large volumes of data at high throughput. It can efficiently handle millions of messages per second, ensuring that data is reliably collected and made available for further processing.\n\n### 2. **Data Integration and Pipeline:**\n   - **Problem:** Integrating data from diverse sources and delivering it to various downstream systems (like databases, analytics platforms, and real-time applications) is complex in a distributed architecture.\n   - **Solution with Kafka:** Kafka acts as a central data hub that allows data from different producers to be ingested, stored, and then consumed by various applications and services. Kafka Connect simplifies integrating with external systems, enabling seamless data flow across the organization.\n\n### 3. **Real-Time Data Processing:**\n   - **Problem:** Processing and reacting to data in real-time (e.g., monitoring, analytics, event-driven applications) is essential but difficult to implement effectively in distributed systems.\n   - **Solution with Kafka:** Kafka Streams and other stream processing frameworks (like Apache Flink) built on top of Kafka enable real-time data processing. Kafka’s low-latency message delivery ensures that data can be processed almost instantly as it is produced.\n\n### 4. **Scalability and Partitioning:**\n   - **Problem:** Distributed systems need to handle growing amounts of data and traffic, requiring horizontal scalability.\n   - **Solution with Kafka:** Kafka’s partitioning mechanism allows it to scale horizontally. Data within a topic is divided into partitions, which can be distributed across multiple brokers in a Kafka cluster. This allows Kafka to handle increased loads by simply adding more brokers.\n\n### 5. **Fault Tolerance and Data Durability:**\n   - **Problem:** Ensuring data availability and durability in the face of system failures (e.g., server crashes, network partitions) is crucial for distributed systems.\n   - **Solution with Kafka:** Kafka ensures fault tolerance through data replication. Each partition can have multiple replicas across different brokers. If a broker fails, another replica can take over, ensuring that data is not lost and the system continues to function.\n\n### 6. **Decoupling of Services:**\n   - **Problem:** In tightly coupled systems, changes in one service can impact others, making the system brittle and hard to maintain.\n   - **Solution with Kafka:** Kafka allows for the decoupling of producers and consumers. Producers simply write data to Kafka, and consumers can process the data at their own pace. This decoupling leads to a more modular, flexible, and maintainable system architecture.\n\n### 7. **Reliable Messaging:**\n   - **Problem:** Distributed systems often require reliable message delivery, where messages are not lost and are delivered in the correct order.\n   - **Solution with Kafka:** Kafka provides strong delivery guarantees, including at-least-once, at-most-once, and exactly-once semantics. Kafka’s log-based storage ensures that messages are retained for a configurable period, allowing consumers to replay messages if needed.\n\n### 8. **Handling Data Reprocessing and Replay:**\n   - **Problem:** In distributed systems, there might be a need to reprocess historical data or replay events (e.g., for debugging, recovering from failures, or feeding data into new systems).\n   - **Solution with Kafka:** Kafka stores data in a log format, allowing consumers to reprocess or replay events by simply resetting the consumer’s offset to an earlier point in the log.\n\n### Summary:\nKafka solves critical problems in distributed systems by providing a reliable, scalable, and fault-tolerant platform for real-time data streaming, integration, and processing. It addresses the challenges of high-throughput data ingestion, data pipeline management, service decoupling, and ensures data durability and fault tolerance, making it an essential component in modern distributed architectures.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"82e495c3-e275-411a-86c9-9f656d633ad4","order":0,"createdDate":{"$date":"2024-08-29T19:11:28.863Z"},"updatedDate":{"$date":"2024-08-29T19:11:28.863Z"},"uniqueId":"1f4b8911-0a28-4373-aa20-4306950581ee","__v":0}
{"_id":{"$oid":"66d0c868a272225ce48815ae"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The key components of Apache Kafka's architecture are designed to ensure high-throughput, fault-tolerant, and scalable data streaming. Here’s a detailed explanation of each component:\n\n### 1. **Producer**\n- **Role:** Producers are responsible for publishing messages (records) to Kafka topics.\n- **Functionality:** Producers send records to specified topics and can control aspects like partitioning and message serialization.\n- **Partitioning:** Producers can choose the partition within a topic to which a record is sent, which allows for parallel processing and load balancing.\n\n### 2. **Consumer**\n- **Role:** Consumers read messages from Kafka topics.\n- **Functionality:** Consumers subscribe to one or more topics and process the records. Each consumer maintains its own offset (position) in the topic.\n- **Consumer Groups:** Consumers can be organized into consumer groups to allow load balancing and parallel processing. Each message is processed by only one consumer in a group.\n\n### 3. **Topic**\n- **Role:** A topic is a logical channel to which messages are published and from which messages are consumed.\n- **Functionality:** Topics help organize data streams and act as categories for storing and retrieving messages. Each topic is split into one or more partitions to allow scalability and parallelism.\n\n### 4. **Partition**\n- **Role:** Partitions are the basic unit of parallelism in Kafka.\n- **Functionality:** A topic is divided into partitions, each of which is an ordered, immutable sequence of records. Partitions allow Kafka to distribute data across multiple brokers, enabling horizontal scalability and high throughput.\n- **Offsets:** Each record in a partition has a unique offset, which is an incremental number that identifies the position of the record in the partition.\n\n### 5. **Broker**\n- **Role:** A broker is a Kafka server that stores data and serves clients (producers and consumers).\n- **Functionality:** Brokers receive records from producers, store them on disk, and serve them to consumers. A Kafka cluster is made up of multiple brokers, which work together to provide fault tolerance and scalability.\n\n### 6. **Cluster**\n- **Role:** A Kafka cluster is a group of Kafka brokers that work together.\n- **Functionality:** The cluster manages and distributes topics and partitions across brokers. It ensures data replication and fault tolerance by replicating partitions across multiple brokers.\n\n### 7. **Zookeeper**\n- **Role:** Zookeeper is used for managing and coordinating Kafka brokers.\n- **Functionality:** It handles tasks such as leader election for partitions, maintaining metadata about topics and partitions, and tracking broker status. Zookeeper helps in maintaining the overall health and coordination of the Kafka cluster.\n\n### 8. **Replication**\n- **Role:** Replication ensures data durability and fault tolerance.\n- **Functionality:** Each partition in Kafka is replicated across multiple brokers. One broker acts as the leader for each partition, while others act as followers. The leader handles all reads and writes, while followers replicate the data. This replication mechanism allows Kafka to recover from broker failures and ensures that data is not lost.\n\n### 9. **Log**\n- **Role:** Logs are used to store messages in Kafka.\n- **Functionality:** Each partition is essentially a log that maintains an ordered sequence of records. Logs are append-only and stored on disk, which ensures data durability and allows for efficient message retrieval.\n\n### 10. **Kafka Connect**\n- **Role:** Kafka Connect is a framework for integrating Kafka with external systems.\n- **Functionality:** It provides connectors to import data from external sources (like databases) into Kafka and export data from Kafka to external systems. It simplifies the process of data integration and streamlines data pipelines.\n\n### 11. **Kafka Streams**\n- **Role:** Kafka Streams is a client library for building stream processing applications.\n- **Functionality:** It allows developers to process and analyze data stored in Kafka topics in real-time. Kafka Streams provides APIs for stream processing, including filtering, aggregating, and transforming data.\n\n### Summary:\nKafka’s architecture is composed of producers, consumers, topics, partitions, brokers, clusters, Zookeeper, replication, logs, Kafka Connect, and Kafka Streams. These components work together to provide a scalable, fault-tolerant, and high-throughput event streaming platform, capable of handling real-time data processing and integration across distributed systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9d468249-a59b-4df5-bec0-7a06b29ebb00","order":0,"createdDate":{"$date":"2024-08-29T19:13:44.453Z"},"updatedDate":{"$date":"2024-08-29T19:13:44.453Z"},"uniqueId":"f6a32bae-b7b7-4bf0-a9f9-9703538b96ac","__v":0}
{"_id":{"$oid":"66d0c8d5a272225ce4882e23"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Apache Kafka, topics, partitions, and offsets are fundamental concepts that work together to manage and organize the flow of data within the Kafka ecosystem. Here’s a detailed explanation of each and how they are related:\n\n### 1. **Kafka Topic**\n- **Definition:** A topic in Kafka is a logical channel or category to which records (messages) are published. It acts as a stream of records of a specific type.\n- **Functionality:** Topics help organize data within Kafka, allowing producers to write records to specific topics and consumers to read records from them. Topics serve as a way to logically separate different streams of data.\n- **Characteristics:** Topics can have multiple partitions, which allows Kafka to distribute the data and manage it more efficiently.\n\n### 2. **Kafka Partition**\n- **Definition:** A partition is a physical subdivision of a topic. Each topic is divided into one or more partitions.\n- **Functionality:** Partitions allow Kafka to scale horizontally by distributing data across multiple brokers. They enable parallel processing by allowing multiple consumers to read different partitions simultaneously.\n- **Characteristics:** Each partition is an ordered, immutable sequence of records that is continuously appended to. Partitions help in achieving high throughput and balancing the load across brokers.\n\n### 3. **Kafka Offset**\n- **Definition:** An offset is a unique, sequential number assigned to each record within a partition. It denotes the position of the record in the partition.\n- **Functionality:** Offsets help consumers track their position in a partition, allowing them to read records in the correct order and resume reading from the last committed offset if needed. They provide a way to manage record retrieval and ensure that records are processed exactly once or reprocessed if necessary.\n- **Characteristics:** Offsets are managed by Kafka and are stored along with the records. Consumers use offsets to keep track of which records have been consumed.\n\n### How They Are Related:\n\n1. **Topic to Partition:**\n   - A topic is divided into multiple partitions. This division allows Kafka to handle large volumes of data by distributing it across multiple brokers and enabling parallel processing. Each topic can have a configurable number of partitions, which can be adjusted based on the expected load and scalability requirements.\n\n2. **Partition to Offset:**\n   - Within each partition, records are ordered and assigned sequential offsets. The offset is a way to uniquely identify each record in the partition. Consumers use these offsets to keep track of their progress when reading records. Each partition’s offset is independent of other partitions, so offsets are only meaningful within the context of a specific partition.\n\n3. **Topic, Partition, and Offset:**\n   - Together, these concepts provide a structured way to manage and access data in Kafka. A topic organizes data into logical categories, partitions distribute the data within those topics across brokers, and offsets keep track of the position of each record within a partition. This organization allows Kafka to handle high-throughput data streaming efficiently, ensuring reliable and scalable data processing.\n\n### Summary:\n\n- **Kafka Topic:** A logical category or stream of records.\n- **Kafka Partition:** A physical division of a topic that allows for parallel processing and distribution of data.\n- **Kafka Offset:** A unique identifier for each record within a partition, used by consumers to track their progress.\n\nBy using topics, partitions, and offsets, Kafka provides a scalable and efficient mechanism for handling and processing large volumes of real-time data.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1a9a8e99-c99c-43c2-9639-614aa4732b28","order":0,"createdDate":{"$date":"2024-08-29T19:15:33.423Z"},"updatedDate":{"$date":"2024-08-29T19:15:33.423Z"},"uniqueId":"9f43ff69-3d2f-4ba5-b533-2604b17184af","__v":0}
{"_id":{"$oid":"66d0c93ba272225ce48846ee"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Apache Kafka, producers and consumers are the core components responsible for sending and receiving messages (records) within the Kafka ecosystem. Each plays a distinct role in the data pipeline, contributing to Kafka’s ability to handle real-time data streaming efficiently. Here’s a detailed description of their roles:\n\n### **Producers**\n\n#### **Role:**\nProducers are responsible for publishing records (messages) to Kafka topics. They act as the source of data in the Kafka ecosystem, sending information that will be processed or consumed by other components or services.\n\n#### **Functionality:**\n\n1. **Sending Records:**\n   - Producers send records to one or more Kafka topics. Each record typically consists of a key, value, and optional metadata. The key and value can be any data type (e.g., strings, JSON, binary).\n\n2. **Partitioning:**\n   - Producers determine which partition within a topic to send a record to. This can be done in several ways:\n     - **Round-robin:** Distributes records evenly across partitions.\n     - **Key-based:** Uses the record’s key to determine the partition using a hashing function, ensuring records with the same key go to the same partition.\n     - **Custom:** Producers can implement custom partitioning logic based on application requirements.\n\n3. **Serialization:**\n   - Producers serialize records before sending them to Kafka. Serialization converts records into a byte format that Kafka can store and transport.\n\n4. **Asynchronous and Synchronous Send:**\n   - Producers can send records either asynchronously (non-blocking) or synchronously (blocking), depending on the configuration and requirements for delivery guarantees.\n\n5. **Error Handling:**\n   - Producers handle errors such as network issues or broker unavailability by retrying to send records or by reporting failures based on the configuration settings.\n\n6. **Configuration:**\n   - Producers can be configured with various properties, such as the Kafka broker address, serializer classes, batch size, and acknowledgment settings, to optimize performance and reliability.\n\n### **Consumers**\n\n#### **Role:**\nConsumers are responsible for reading and processing records from Kafka topics. They act as the destination for data in the Kafka ecosystem, consuming and utilizing the information sent by producers.\n\n#### **Functionality:**\n\n1. **Subscribing to Topics:**\n   - Consumers subscribe to one or more Kafka topics. They can receive records from all partitions within those topics, depending on their subscription.\n\n2. **Reading Records:**\n   - Consumers read records from Kafka partitions in the order they were produced. Each record in a partition is identified by its offset, which is used to track the consumer's position.\n\n3. **Managing Offsets:**\n   - Consumers maintain their own offsets, which denote their position in the partition. They can commit offsets to Kafka (or an external store) to keep track of which records have been processed. This allows for fault tolerance and recovery in case of failures.\n\n4. **Consumer Groups:**\n   - Consumers can be organized into consumer groups. Each consumer in a group reads records from different partitions within a topic, allowing for parallel processing and load balancing. Each partition is read by only one consumer in the group at a time, ensuring that each record is processed once.\n\n5. **Processing Records:**\n   - Consumers process records according to their application logic. This might involve transforming data, updating databases, or triggering events based on the records.\n\n6. **Error Handling:**\n   - Consumers handle errors by retrying processing, logging issues, or moving records to a dead-letter queue (DLQ) for further inspection, based on the error handling strategy.\n\n7. **Configuration:**\n   - Consumers can be configured with properties such as the Kafka broker address, deserializer classes, group ID, auto-offset reset policy, and commit interval to control their behavior and performance.\n\n### **Summary:**\n\n- **Producers:**\n  - Publish records to Kafka topics.\n  - Handle record serialization and partitioning.\n  - Manage sending records either asynchronously or synchronously.\n  - Configurable for performance and reliability.\n\n- **Consumers:**\n  - Subscribe to and read records from Kafka topics.\n  - Track and manage offsets to ensure accurate record processing.\n  - Operate within consumer groups for load balancing and parallel processing.\n  - Configurable for processing logic and fault tolerance.\n\nTogether, producers and consumers facilitate the flow of data through Kafka, enabling real-time data streaming, processing, and integration across distributed systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"84b0f8a8-a499-42d0-86eb-d0be383ed96c","order":0,"createdDate":{"$date":"2024-08-29T19:17:15.081Z"},"updatedDate":{"$date":"2024-08-29T19:17:15.081Z"},"uniqueId":"b39111a2-f443-4a0e-bbef-c24343d7627b","__v":0}
{"_id":{"$oid":"66d0c9d5a272225ce4885f7f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Apache ZooKeeper plays a crucial role in the Apache Kafka ecosystem by providing coordination and management services that are essential for the operation of a Kafka cluster. Here’s an explanation of ZooKeeper's role in Kafka and why it is used:\n\n### **Role of ZooKeeper in Kafka**\n\n1. **Cluster Metadata Management:**\n   - ZooKeeper maintains the metadata about the Kafka cluster, including information about topics, partitions, brokers, and their configurations. This helps Kafka brokers to be aware of the cluster's structure and state.\n\n2. **Leader Election:**\n   - ZooKeeper is responsible for managing leader election for partitions within Kafka. Each partition has a leader broker that handles all reads and writes for that partition, while other brokers act as followers. ZooKeeper ensures that only one broker is elected as the leader for each partition at any given time, which is crucial for maintaining consistency and availability.\n\n3. **Broker Coordination:**\n   - ZooKeeper helps in coordinating between Kafka brokers. It tracks the status of brokers, such as whether they are alive or dead, and ensures that the Kafka cluster can adapt to changes, such as broker failures or new broker additions.\n\n4. **Configuration Management:**\n   - ZooKeeper stores and manages configuration information for the Kafka brokers. This includes settings related to topics, partitions, replication, and other configuration parameters.\n\n5. **Offset Management:**\n   - For older versions of Kafka (prior to 0.9), ZooKeeper was used to manage consumer offsets. This allowed Kafka to keep track of which records consumers had processed. However, from Kafka 0.9 onwards, Kafka uses its own internal topic to manage offsets, though ZooKeeper is still used for other coordination tasks.\n\n6. **Synchronization and Coordination:**\n   - ZooKeeper provides distributed synchronization and coordination services that help Kafka brokers to work together seamlessly. It ensures that distributed tasks, such as partition reassignment and configuration updates, are executed consistently across the cluster.\n\n### **Why ZooKeeper is Used**\n\n1. **Distributed Coordination:**\n   - ZooKeeper is designed for distributed coordination, making it well-suited for managing the state and synchronization needs of a distributed Kafka cluster. It provides a centralized service for managing and coordinating distributed processes.\n\n2. **Fault Tolerance:**\n   - By using ZooKeeper, Kafka can achieve fault tolerance and high availability. ZooKeeper's leader election and cluster coordination features ensure that Kafka can recover from broker failures and maintain service continuity.\n\n3. **Scalability:**\n   - ZooKeeper’s ability to manage and coordinate large numbers of brokers and topics allows Kafka to scale efficiently. It helps Kafka handle large-scale data streaming operations by providing robust coordination mechanisms.\n\n4. **Consistency:**\n   - ZooKeeper ensures that all Kafka brokers have a consistent view of the cluster state and configuration. This consistency is crucial for the correct operation of distributed systems and for maintaining data integrity.\n\n5. **Simplified Cluster Management:**\n   - ZooKeeper simplifies cluster management tasks such as broker registration, leader election, and topic management. It abstracts the complexity of these tasks and provides a reliable and consistent mechanism for managing Kafka’s distributed components.\n\n### **Summary**\n\n- **ZooKeeper’s Role in Kafka:**\n  - Manages cluster metadata, leader election, broker coordination, and configuration management.\n  - Provides distributed synchronization and coordination services.\n\n- **Why ZooKeeper is Used:**\n  - To achieve distributed coordination and synchronization.\n  - To ensure fault tolerance, scalability, and consistency.\n  - To simplify cluster management and maintain a consistent view of the Kafka cluster.\n\nZooKeeper is integral to Kafka’s architecture, enabling it to operate efficiently as a distributed data streaming platform.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9ef0e20a-381a-4230-8948-d4b94dae9988","order":0,"createdDate":{"$date":"2024-08-29T19:19:49.047Z"},"updatedDate":{"$date":"2024-08-29T19:19:49.047Z"},"uniqueId":"1c57d5f2-b7a7-4c3b-ac0a-85cc98879d0d","__v":0}
{"_id":{"$oid":"66d0d024a272225ce489031b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Apache Kafka ensures fault tolerance and data durability through several key mechanisms and design principles. Here’s how Kafka achieves these goals:\n\n### **1. Data Replication**\n\n- **Replication Factor:**\n  - Kafka provides data replication by maintaining multiple copies of each partition across different brokers in the cluster. This is defined by the replication factor for a topic, which specifies how many copies of the data should be maintained.\n  \n- **Leader and Followers:**\n  - Each partition has one leader broker and multiple follower brokers. The leader handles all read and write operations for the partition, while followers replicate the data from the leader. This setup ensures that if the leader fails, one of the followers can be promoted to leader, allowing continued operation.\n\n### **2. Acknowledgment Mechanisms**\n\n- **Producer Acknowledgments:**\n  - Kafka producers can configure the level of acknowledgment required from brokers:\n    - `acks=0`: The producer does not wait for any acknowledgment from the broker.\n    - `acks=1`: The producer waits for acknowledgment from the leader broker only.\n    - `acks=all` (or `acks=-1`): The producer waits for acknowledgment from all in-sync replicas (ISRs). This setting provides the highest level of durability, ensuring that data is replicated to all brokers.\n\n### **3. In-Sync Replicas (ISR)**\n\n- **In-Sync Replicas:**\n  - Kafka maintains a list of in-sync replicas for each partition, which are the replicas that are fully caught up with the leader. A message is considered committed and durable only when it is written to all in-sync replicas. If a broker fails, only the replicas in the ISR are considered for leader election.\n\n### **4. Log Segments and Offset Management**\n\n- **Log Segments:**\n  - Kafka stores data in a distributed log file format, with each partition being divided into segments. These segments are stored on disk, which helps ensure data persistence even in the event of broker failures.\n\n- **Offset Management:**\n  - Kafka uses offsets to track the position of records within partitions. Offsets are stored in a manner that ensures they are durable and recoverable, even in case of broker failures.\n\n### **5. Fault Tolerance in Consumer Groups**\n\n- **Consumer Offsets:**\n  - Kafka allows consumer groups to commit their offsets to Kafka itself or an external store. This means that if a consumer fails, it can resume processing from the last committed offset, ensuring no data loss and maintaining continuity in data consumption.\n\n### **6. Broker Failures and Recovery**\n\n- **Automatic Failover:**\n  - In case of broker failures, Kafka automatically promotes one of the in-sync replicas to be the new leader for the affected partitions. This process helps maintain data availability and ensures continued operation even when some brokers are down.\n\n- **Rebalancing and Reassignment:**\n  - Kafka provides tools and processes for rebalancing and reassignment of partitions, allowing administrators to manage the distribution of data across brokers and respond to broker failures or additions.\n\n### **7. Data Integrity and Checksums**\n\n- **Checksums:**\n  - Kafka uses checksums to verify the integrity of data as it is written and read. This helps ensure that data corruption is detected and addressed.\n\n### **Summary**\n\n- **Data Replication:**\n  - Data is replicated across multiple brokers with a configurable replication factor, using leader and follower brokers to ensure availability and durability.\n\n- **Acknowledgment Mechanisms:**\n  - Producers can configure acknowledgment settings to balance durability and performance, with `acks=all` providing the highest level of durability.\n\n- **In-Sync Replicas (ISR):**\n  - Only replicas that are fully synchronized with the leader are considered in-sync, ensuring data is committed only when it is replicated to all in-sync replicas.\n\n- **Log Segments and Offset Management:**\n  - Data is stored in log segments on disk, and offsets are managed to ensure durability and recovery.\n\n- **Fault Tolerance in Consumer Groups:**\n  - Consumer offsets are committed to ensure continuity in case of consumer failures.\n\n- **Broker Failures and Recovery:**\n  - Automatic failover and partition reassignment handle broker failures and maintain data availability.\n\n- **Data Integrity and Checksums:**\n  - Checksums verify data integrity and detect corruption.\n\nThrough these mechanisms, Kafka achieves high levels of fault tolerance and data durability, making it a reliable platform for real-time data streaming and processing.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"75aded85-ce8a-4638-8b20-d679c6c275df","order":0,"createdDate":{"$date":"2024-08-29T19:46:44.169Z"},"updatedDate":{"$date":"2024-08-29T19:46:44.169Z"},"uniqueId":"b51bf797-0089-4f1c-b75c-cac3ab043eae","__v":0}
{"_id":{"$oid":"66d0d067a272225ce4890f79"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Apache Kafka, replication is a crucial mechanism that ensures fault tolerance and data durability. Here’s an in-depth look at the role of replication and how it works:\n\n### **Role of Replication in Kafka**\n\n1. **Fault Tolerance:**\n   - Replication allows Kafka to tolerate broker failures without data loss. By maintaining multiple copies of data across different brokers, Kafka ensures that if one broker fails, the data remains accessible from other brokers.\n\n2. **Data Durability:**\n   - Replication ensures that data is not lost even in the event of hardware failures or crashes. Multiple copies of the data mean that the system can recover and continue to function with minimal data loss.\n\n3. **High Availability:**\n   - By replicating data across multiple brokers, Kafka provides high availability for data. If a broker that holds the leader for a partition fails, one of the in-sync replicas (followers) can be promoted to be the new leader, maintaining data accessibility.\n\n### **How Replication Works in Kafka**\n\n1. **Replication Factor:**\n   - Each Kafka topic has a replication factor, which specifies the number of copies of data (or replicas) that should be maintained. For example, a replication factor of 3 means that each partition will have 3 copies.\n\n2. **Leader and Followers:**\n   - **Leader:** Each partition has one leader broker that handles all read and write operations for that partition. The leader is responsible for managing the data and ensuring it is replicated to the followers.\n   - **Followers:** The remaining brokers that replicate data from the leader are known as followers. Followers receive data from the leader and maintain an identical copy of the partition data.\n\n3. **In-Sync Replicas (ISR):**\n   - The ISR is a list of replicas that are fully synchronized with the leader. Only the replicas in this list are considered for leader election. A message is considered committed and durable only when it is replicated to all in-sync replicas.\n\n4. **Data Write Process:**\n   - When a producer sends data to Kafka, the data is written to the leader broker of the relevant partition.\n   - The leader then replicates the data to the follower brokers. The followers replicate the data by pulling it from the leader at regular intervals.\n\n5. **Acknowledgment Mechanisms:**\n   - **Producer Acknowledgments:** Producers can configure the acknowledgment level (`acks` parameter) to determine how many replicas need to acknowledge a write before the producer considers the write successful:\n     - `acks=0`: No acknowledgment.\n     - `acks=1`: Only the leader's acknowledgment is required.\n     - `acks=all` (or `acks=-1`): Acknowledgment from all in-sync replicas is required for durability.\n\n6. **Leader Failover:**\n   - If the leader broker fails, Kafka selects a new leader from the in-sync replicas. The new leader takes over handling all read and write requests for the partition. This failover process is managed by ZooKeeper, which tracks the state of brokers and partitions.\n\n7. **Rebalancing and Reassignment:**\n   - Kafka provides tools for rebalancing and reassignment of partitions. If a broker is added or removed, Kafka can reassign partitions and adjust replication to maintain the desired replication factor.\n\n8. **Consistency Guarantees:**\n   - Kafka ensures consistency through replication by making sure that data written to the leader is eventually replicated to all followers. This consistency is crucial for maintaining data integrity and reliability.\n\n### **Summary**\n\n- **Role of Replication:**\n  - **Fault Tolerance:** Ensures data availability even in the event of broker failures.\n  - **Data Durability:** Protects against data loss by maintaining multiple copies.\n  - **High Availability:** Provides uninterrupted data access through replicated copies.\n\n- **How Replication Works:**\n  - **Replication Factor:** Defines the number of copies of data.\n  - **Leader and Followers:** Leader handles data operations, followers replicate data.\n  - **In-Sync Replicas (ISR):** List of replicas fully synchronized with the leader.\n  - **Data Write Process:** Data is written to the leader and replicated to followers.\n  - **Acknowledgment Mechanisms:** Producers configure acknowledgment levels for durability.\n  - **Leader Failover:** New leader is elected from in-sync replicas if the leader fails.\n  - **Rebalancing and Reassignment:** Tools for partition management and replication adjustment.\n  - **Consistency Guarantees:** Ensures data consistency across replicas.\n\nThrough these mechanisms, Kafka provides robust data replication capabilities that support its goals of fault tolerance, data durability, and high availability.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b77f976a-7329-4167-8546-68f4b65c8a67","order":0,"createdDate":{"$date":"2024-08-29T19:47:51.69Z"},"updatedDate":{"$date":"2024-08-29T19:47:51.69Z"},"uniqueId":"c5ca7483-d0eb-4b58-876e-7eeef6741b19","__v":0}
{"_id":{"$oid":"66d0d0c9a272225ce4891bd7"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kafka’s message retention policies are crucial for managing how long messages are kept and how they are deleted. These policies help control the storage usage and ensure that old or unnecessary data is cleaned up efficiently. Here’s an explanation of Kafka’s message retention policies, including log retention and segment deletion:\n\n### **1. Log Retention**\n\n**Log Retention** in Kafka determines how long messages are kept in a topic before they are eligible for deletion. Kafka offers flexible retention policies based on time, size, or a combination of both.\n\n- **Time-Based Retention:**\n  - Messages are retained based on a configured time period. For example, you might configure a topic to retain messages for 7 days. After this period, older messages are eligible for deletion.\n  - Configurable with the `retention.ms` setting. For example, `retention.ms=604800000` (7 days in milliseconds).\n\n- **Size-Based Retention:**\n  - Messages are retained based on the total size of the log files. When the total size of the log files exceeds the configured size limit, older logs are deleted.\n  - Configurable with the `retention.bytes` setting. For example, `retention.bytes=1073741824` (1 GB).\n\n- **Combination of Time and Size:**\n  - Kafka can use both time-based and size-based retention policies. Messages are eligible for deletion either when the time limit is reached or when the size limit is exceeded, whichever condition is met first.\n\n### **2. Segment Deletion**\n\n**Segment Deletion** refers to the process of deleting log segments that are no longer needed based on the retention policies.\n\n- **Log Segments:**\n  - Kafka stores data in log segments within each partition. Each segment is a file on disk that contains a range of messages.\n  - Segments are created based on size (e.g., 1 GB) or time intervals (e.g., daily). When a segment reaches the configured size or time limit, a new segment is created.\n\n- **Deletion Process:**\n  - When the retention policy dictates that certain messages should be deleted, Kafka identifies the segments that contain these messages.\n  - If a segment falls entirely within the retention window (i.e., all messages in the segment are older than the retention policy allows), the entire segment is eligible for deletion.\n  - Segments that partially fall within the retention window are not immediately deleted. Kafka may retain parts of a segment if it contains messages within the retention period.\n\n- **Segment Cleanup:**\n  - Kafka performs segment cleanup in the background. The cleanup process is managed by the log cleaner, which periodically checks for segments that can be deleted or truncated based on the retention policy.\n  - Configurable with the `cleanup.policy` setting:\n    - `cleanup.policy=delete`: Old log segments are deleted.\n    - `cleanup.policy=compact`: Logs are compacted to keep the latest message for each key, removing older duplicates.\n    - Both policies can be combined (`cleanup.policy=delete,compact`).\n\n### **3. Compaction (Optional)**\n\n**Log Compaction** is an optional retention policy that retains only the latest message for each key, useful for scenarios where retaining the most recent state is more important than retaining all historical messages.\n\n- **Compaction Process:**\n  - Messages with the same key are compacted to retain only the latest message for each key.\n  - Messages with null values can be used to delete records with a specific key.\n  - Configurable with the `cleanup.policy=compact` setting.\n\n### **Summary**\n\n- **Log Retention:**\n  - **Time-Based Retention:** Retain messages for a configured time period (e.g., 7 days).\n  - **Size-Based Retention:** Retain messages until the log size exceeds a configured limit (e.g., 1 GB).\n  - **Combination:** Use both time and size-based policies for retention.\n\n- **Segment Deletion:**\n  - **Log Segments:** Data is stored in log segments that are created based on size or time intervals.\n  - **Deletion Process:** Segments are deleted if they fall entirely within the retention period.\n  - **Segment Cleanup:** Managed by the log cleaner, which deletes or truncates segments as needed.\n\n- **Compaction (Optional):**\n  - **Log Compaction:** Retains only the latest message for each key, useful for stateful applications.\n\nKafka’s retention policies provide flexible and efficient mechanisms to manage message storage, ensuring that the system remains scalable and manageable while retaining the necessary data.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2c8b9139-f8a0-4aed-b520-e4cc514761f9","order":0,"createdDate":{"$date":"2024-08-29T19:49:29.787Z"},"updatedDate":{"$date":"2024-08-29T19:49:29.787Z"},"uniqueId":"6dff9dc0-05bb-47e6-895d-db8bc38918ce","__v":0}
{"_id":{"$oid":"66d0d10da272225ce4892835"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kafka consumer groups are a fundamental concept in Kafka that enable parallel consumption of messages. Here’s an overview of what consumer groups are and how they facilitate parallel processing:\n\n### **Kafka Consumer Groups**\n\n#### **Definition**\n\n- **Consumer Group:**\n  - A consumer group is a group of consumers that work together to process messages from one or more Kafka topics. Each consumer in the group reads messages from different partitions of the topic(s), allowing for parallel processing of messages.\n\n#### **How Consumer Groups Work**\n\n1. **Partition Assignment:**\n   - Kafka topics are divided into partitions, which are the basic units of parallelism in Kafka. Each partition can be consumed by only one consumer within a consumer group at a time.\n   - When a consumer group is created, Kafka assigns each partition of the topic to a single consumer in the group. This assignment ensures that each partition is read by only one consumer, avoiding duplication within the group.\n\n2. **Load Balancing:**\n   - **Parallel Processing:** Multiple consumers within a group can process different partitions simultaneously. This allows for parallel processing of messages, improving throughput and reducing the time it takes to process the entire topic.\n   - **Rebalancing:** When a new consumer joins the group or an existing consumer leaves, Kafka reassigns partitions among the available consumers. This process is known as rebalancing and helps distribute the load evenly.\n\n3. **Offset Management:**\n   - Kafka keeps track of the offset (position) of messages consumed by each consumer group. This ensures that each consumer group processes messages in the correct order and can resume processing from the last committed offset in case of failures or restarts.\n   - Offsets are stored in Kafka itself, in a special internal topic named `__consumer_offsets`, or can be managed externally depending on the configuration.\n\n4. **Message Distribution:**\n   - **Message Distribution Across Partitions:** Each message within a partition is consumed by a single consumer in the group. Messages are distributed across partitions based on the topic's partitioning strategy.\n   - **Consumer Group Coordination:** Kafka uses a coordinator (typically a broker) to manage consumer group membership, partition assignments, and rebalancing. The coordinator ensures that each partition is consumed by exactly one consumer within the group.\n\n5. **Scaling:**\n   - **Horizontal Scaling:** To scale the processing capacity, additional consumers can be added to the group. Kafka will rebalance the partition assignments, spreading the workload across the new consumers.\n   - **Throughput and Parallelism:** Adding more consumers increases parallelism and throughput, as more partitions can be processed simultaneously.\n\n#### **Example Scenario**\n\n- **Topic with 6 Partitions:**\n  - A Kafka topic with 6 partitions can be consumed by a consumer group with up to 6 consumers. Each consumer will be assigned to a different partition, processing messages in parallel.\n\n- **Consumer Group with 3 Consumers:**\n  - If there are 3 consumers in the group, Kafka will assign each consumer to 2 partitions. The consumers will then process messages from their assigned partitions concurrently.\n\n- **Rebalancing Example:**\n  - If a new consumer joins the group, Kafka will rebalance the partitions. Each consumer may get assigned to different partitions, ensuring that the workload is distributed as evenly as possible.\n\n### **Summary**\n\n- **Consumer Groups:**\n  - **Definition:** A group of consumers working together to process messages from Kafka topics.\n  - **Partition Assignment:** Each partition is assigned to one consumer within the group.\n  - **Load Balancing:** Multiple consumers process different partitions in parallel, enhancing throughput.\n  - **Offset Management:** Keeps track of message positions for reliable processing.\n  - **Message Distribution:** Ensures each partition's messages are consumed by one consumer.\n  - **Scaling:** Additional consumers increase parallelism and processing capacity.\n\nKafka consumer groups are essential for enabling efficient, scalable, and fault-tolerant message processing in distributed systems. They allow multiple consumers to work together, handling large volumes of data with high throughput and resilience.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"85148d2e-fd52-4653-b3f3-d762c9bdea0c","order":0,"createdDate":{"$date":"2024-08-29T19:50:37.558Z"},"updatedDate":{"$date":"2024-08-29T19:50:37.558Z"},"uniqueId":"e8b0881e-8be5-4263-908f-729a5ca18bb6","__v":0}
{"_id":{"$oid":"66d0d170a272225ce4893493"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kafka’s message delivery semantics define how messages are delivered to consumers in terms of reliability and duplication. These semantics determine the behavior of message consumption and handling, ensuring that messages are processed according to the desired level of guarantee. Here’s a detailed description of Kafka’s message delivery semantics:\n\n### **1. At-Most-Once Delivery**\n\n**At-Most-Once** delivery guarantees that each message will be delivered to a consumer **no more than once**. This means that messages may be lost but will not be duplicated. \n\n- **Characteristics:**\n  - **Message Loss:** Some messages may be lost in transit, especially if a producer fails or if there is a network issue.\n  - **No Duplicates:** Messages are not reprocessed; once a message is acknowledged as sent, it is not retried if an error occurs.\n  \n- **How It Works:**\n  - **Producer:** The producer does not wait for an acknowledgment from Kafka before sending the next message. This can lead to message loss if there is a failure.\n  - **Consumer:** Consumers may not be able to detect and handle message loss because the system does not guarantee that messages are delivered.\n  \n- **Use Case:**\n  - Suitable for scenarios where message loss is acceptable and duplicate messages are not a concern.\n\n### **2. At-Least-Once Delivery**\n\n**At-Least-Once** delivery guarantees that each message will be delivered to a consumer **at least once**. This means that every message will be processed, but there is a risk of processing the same message more than once.\n\n- **Characteristics:**\n  - **No Message Loss:** All messages are guaranteed to be delivered, but some messages might be delivered multiple times.\n  - **Possible Duplicates:** Consumers may process the same message more than once due to retries or failures.\n\n- **How It Works:**\n  - **Producer:** The producer waits for acknowledgments from Kafka brokers before sending the next message. This ensures that messages are committed to Kafka but can still lead to duplicates if retries are performed.\n  - **Consumer:** Consumers can handle duplicates in their processing logic to ensure idempotency (processing a message more than once does not change the result).\n\n- **Use Case:**\n  - Suitable for scenarios where message loss cannot be tolerated, and the application can handle duplicate messages.\n\n### **3. Exactly-Once Delivery**\n\n**Exactly-Once** delivery guarantees that each message is delivered and processed **exactly once**. This is the strongest level of guarantee, ensuring that messages are neither lost nor duplicated.\n\n- **Characteristics:**\n  - **No Message Loss:** All messages are delivered, and no messages are lost.\n  - **No Duplicates:** Messages are processed exactly once, with no duplication.\n\n- **How It Works:**\n  - **Producer:** Kafka supports exactly-once semantics by using idempotent producers. The producer assigns a unique ID to each message and ensures that messages with the same ID are not sent more than once.\n  - **Consumer:** Kafka maintains offsets and ensures that messages are processed exactly once by using transactional semantics. Consumers commit offsets only after processing messages, ensuring that each message is processed only once.\n\n- **Use Case:**\n  - Suitable for scenarios where both message loss and duplication are unacceptable, such as financial transactions or critical data processing.\n\n### **Summary**\n\n- **At-Most-Once Delivery:**\n  - **Guarantee:** Messages may be lost but not duplicated.\n  - **Pros:** Lower latency and simpler processing.\n  - **Cons:** Risk of message loss; not suitable for critical data.\n\n- **At-Least-Once Delivery:**\n  - **Guarantee:** Messages are delivered at least once but may be duplicated.\n  - **Pros:** No message loss; reliable delivery.\n  - **Cons:** Potential duplicates; requires handling of idempotency.\n\n- **Exactly-Once Delivery:**\n  - **Guarantee:** Messages are delivered and processed exactly once.\n  - **Pros:** Highest level of guarantee; no message loss or duplication.\n  - **Cons:** Increased complexity and overhead; may require additional configuration and processing logic.\n\nKafka’s message delivery semantics provide flexibility to choose the appropriate level of reliability based on the requirements of the application and the acceptable trade-offs between message loss, duplication, and processing complexity.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5bdb1f90-b7a1-4503-9291-e93564c036d5","order":0,"createdDate":{"$date":"2024-08-29T19:52:16.178Z"},"updatedDate":{"$date":"2024-08-29T19:52:16.178Z"},"uniqueId":"305ba1e4-1feb-471b-ad83-70dac271ca0a","__v":0}
{"_id":{"$oid":"66d0d1b5a272225ce48940f1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Kafka Connect** is a tool within Apache Kafka designed to simplify the integration of Kafka with external systems such as databases, data warehouses, and other data sources or sinks. It provides a standardized way to move data into and out of Kafka topics, streamlining the process of connecting Kafka with various data sources and destinations. Here’s an overview of Kafka Connect and how it simplifies integration with external systems:\n\n### **What is Kafka Connect?**\n\n**Kafka Connect** is a framework for building and running scalable, fault-tolerant data pipelines that move data between Kafka and other systems. It is a part of the Kafka ecosystem and provides a set of tools and APIs for integrating Kafka with external systems.\n\n### **Key Features of Kafka Connect**\n\n1. **Standardized Integration:**\n   - **Connectors:** Kafka Connect uses pre-built connectors or allows custom connectors to simplify the integration process. Connectors are plugins that handle the specifics of connecting Kafka to external systems (e.g., databases, files, message queues).\n   - **Source Connectors:** These pull data from external systems (e.g., databases, files) and push it into Kafka topics.\n   - **Sink Connectors:** These pull data from Kafka topics and push it to external systems (e.g., databases, data warehouses).\n\n2. **Configuration and Deployment:**\n   - **Declarative Configuration:** Connectors are configured using simple JSON configuration files. This allows for easy setup and modification of connectors without changing code.\n   - **Distributed and Standalone Modes:** Kafka Connect can run in a standalone mode for simple setups or in a distributed mode for larger, fault-tolerant deployments.\n\n3. **Fault Tolerance and Scalability:**\n   - **Distributed Mode:** In distributed mode, Kafka Connect provides fault tolerance and horizontal scaling. Multiple worker nodes can run in a distributed cluster, sharing the load and providing redundancy.\n   - **Automatic Recovery:** The framework handles failures gracefully, ensuring data is not lost and connectors are automatically restarted if needed.\n\n4. **Data Transformation:**\n   - **Single Message Transforms (SMTs):** Kafka Connect supports message transformations to modify or enrich data as it flows through connectors. SMTs can be used to transform data format, enrich data, or filter messages.\n\n5. **Monitoring and Management:**\n   - **Metrics and Monitoring:** Kafka Connect provides metrics and monitoring capabilities to track the performance and health of connectors. This helps in managing and troubleshooting data pipelines.\n   - **REST API:** A REST API is provided for managing and configuring connectors, making it easier to integrate Kafka Connect with external monitoring and management tools.\n\n### **How Kafka Connect Simplifies Integration**\n\n1. **Pre-Built Connectors:**\n   - Kafka Connect comes with a library of pre-built connectors for various systems, reducing the need for custom integration code. Examples include connectors for databases (e.g., JDBC), file systems (e.g., HDFS), and cloud services (e.g., AWS S3).\n\n2. **Ease of Configuration:**\n   - **Declarative Setup:** Configuration is done through JSON files or REST APIs, allowing for a simple and standardized setup. This eliminates the need for custom code for data ingestion and export.\n\n3. **Scalability and Fault Tolerance:**\n   - **Distributed Architecture:** Kafka Connect’s distributed mode ensures scalability and fault tolerance, handling large volumes of data and providing high availability.\n\n4. **Data Transformation:**\n   - **Built-In Transformations:** Transformations can be applied to data as it flows through the connectors, allowing for real-time data enrichment or modification without separate processing steps.\n\n5. **Unified Data Pipeline:**\n   - **Centralized Management:** Kafka Connect enables the creation of a unified data pipeline, integrating multiple data sources and destinations through a single Kafka infrastructure. This simplifies data movement and integration across diverse systems.\n\n### **Example Use Cases**\n\n1. **Database Integration:**\n   - Using a JDBC source connector to stream changes from a relational database into Kafka topics and a JDBC sink connector to write Kafka data into another database.\n\n2. **File System Integration:**\n   - Using a file source connector to ingest data from files in a file system into Kafka and a file sink connector to write Kafka data to files.\n\n3. **Cloud Integration:**\n   - Using connectors to integrate with cloud services such as AWS S3, Google Cloud Storage, or Azure Blob Storage for data storage and retrieval.\n\n### **Summary**\n\n- **Kafka Connect** is a framework for integrating Kafka with external systems, simplifying the process of moving data between Kafka and various data sources or sinks.\n- **Pre-Built Connectors:** Simplify integration with external systems.\n- **Declarative Configuration:** Makes setup and modification easy.\n- **Distributed Mode:** Provides scalability and fault tolerance.\n- **Data Transformation:** Allows real-time modification of data.\n- **Unified Pipeline:** Centralizes data movement and integration.\n\nKafka Connect streamlines the integration process, providing a robust and scalable solution for connecting Kafka with a wide range of external systems and facilitating efficient data movement and processing.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b7e8e068-934b-447f-aeb0-a826fbbfba2a","order":0,"createdDate":{"$date":"2024-08-29T19:53:25.983Z"},"updatedDate":{"$date":"2024-08-29T19:53:25.983Z"},"uniqueId":"24cd1da8-8bee-4ff4-bf8a-37823a2bf9c7","__v":0}
{"_id":{"$oid":"66d0d1ffa272225ce4894d4f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Kafka Streams** is a client library for building real-time stream processing applications and microservices on top of Apache Kafka. It allows developers to process and analyze data stored in Kafka topics in a fault-tolerant and scalable manner. Kafka Streams is part of the Kafka ecosystem and provides a powerful, easy-to-use API for building applications that require real-time data processing.\n\n### **Key Features of Kafka Streams**\n\n1. **Stream Processing API:**\n   - Provides a high-level API for building stream processing applications. It includes operations for transforming, aggregating, and joining streams of data.\n\n2. **Stateful Processing:**\n   - Supports stateful operations, such as aggregations and joins, using local state stores. This enables applications to keep track of stateful information across multiple records.\n\n3. **Fault Tolerance:**\n   - Ensures fault tolerance through the use of Kafka’s built-in replication mechanisms. State is backed up to Kafka topics, allowing recovery in case of failures.\n\n4. **Scalability:**\n   - Scales horizontally by distributing processing across multiple instances. Kafka Streams applications can be scaled by simply adding more instances.\n\n5. **Integration with Kafka:**\n   - Directly integrates with Kafka for both input and output, making it easy to build applications that consume and produce Kafka messages.\n\n6. **Exactly-Once Semantics:**\n   - Supports exactly-once processing semantics, ensuring that each record is processed exactly once even in the presence of failures.\n\n7. **Stateless and Stateful Processing:**\n   - Supports both stateless operations (e.g., filtering, mapping) and stateful operations (e.g., aggregations, joins).\n\n### **Use Cases in Real-Time Stream Processing**\n\n1. **Real-Time Analytics:**\n   - **Example:** Analyzing and aggregating data from IoT sensors in real-time to generate insights and metrics. For instance, processing temperature data from multiple sensors to monitor and alert on abnormal conditions.\n\n2. **Fraud Detection:**\n   - **Example:** Detecting fraudulent activities in financial transactions by processing and analyzing transaction streams in real-time. Kafka Streams can aggregate and analyze transaction patterns to identify suspicious behavior.\n\n3. **Data Enrichment:**\n   - **Example:** Enriching streaming data with additional information. For instance, joining customer data with transaction data to create enriched views for real-time personalization or recommendations.\n\n4. **Real-Time Monitoring and Alerts:**\n   - **Example:** Monitoring system logs and metrics to detect anomalies or failures. Kafka Streams can process log data in real-time to trigger alerts or automate responses to issues.\n\n5. **Event-Driven Microservices:**\n   - **Example:** Building event-driven architectures where microservices communicate through Kafka topics. Kafka Streams can process and react to events, updating databases or triggering downstream actions based on the event stream.\n\n6. **Log Aggregation:**\n   - **Example:** Aggregating logs from various sources and analyzing them in real-time. Kafka Streams can process log data to generate metrics, visualize trends, or detect patterns.\n\n7. **ETL (Extract, Transform, Load):**\n   - **Example:** Performing ETL operations in real-time to transform and load data into data warehouses or databases. Kafka Streams can filter, transform, and aggregate data before loading it into a target system.\n\n### **How Kafka Streams Works**\n\n1. **Stream Processing:**\n   - Kafka Streams processes data in a continuous stream, applying operations such as filtering, mapping, and reducing. These operations are defined using a declarative API.\n\n2. **Stateful Operations:**\n   - For stateful operations, Kafka Streams uses local state stores backed by Kafka topics. State is automatically replicated and backed up to ensure fault tolerance.\n\n3. **Topology:**\n   - Applications are defined using a processing topology, which represents the flow of data through different processing steps. The topology is built using Kafka Streams’ API and deployed as a Kafka Streams application.\n\n4. **Scaling:**\n   - Kafka Streams applications can be scaled horizontally by running multiple instances. Kafka Streams handles load balancing and distribution of processing tasks across instances.\n\n5. **Exactly-Once Processing:**\n   - Kafka Streams ensures exactly-once processing semantics by leveraging Kafka’s transactional capabilities. This prevents duplicate processing and ensures data consistency.\n\n### **Summary**\n\n- **Kafka Streams** is a client library for building real-time stream processing applications using Kafka.\n- **High-Level API:** Provides operations for transforming, aggregating, and joining streams.\n- **Stateful and Stateless Processing:** Supports both types of operations with local state stores.\n- **Fault Tolerance and Scalability:** Ensures fault tolerance and can be scaled horizontally.\n- **Integration with Kafka:** Directly integrates with Kafka for seamless data processing.\n- **Use Cases:** Includes real-time analytics, fraud detection, data enrichment, monitoring, event-driven microservices, log aggregation, and ETL.\n\nKafka Streams enables developers to build powerful real-time data processing applications with ease, leveraging Kafka’s distributed architecture and fault tolerance.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4f2f4972-ed5e-4a19-a51a-61577a88484d","order":0,"createdDate":{"$date":"2024-08-29T19:54:39.526Z"},"updatedDate":{"$date":"2024-08-29T19:54:39.526Z"},"uniqueId":"60c40ab5-1854-4444-b41a-ce1b2540e051","__v":0}
{"_id":{"$oid":"66d0d251a272225ce48959ad"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Apache Kafka handles data serialization and deserialization through the use of serializers and deserializers. These components are crucial for converting data into a format suitable for transmission over Kafka and then converting it back to its original format when consumed. Here’s a detailed explanation of how Kafka handles these processes:\n\n### **Serialization and Deserialization in Kafka**\n\n#### **1. Serialization**\n\n**Serialization** is the process of converting an object or data structure into a format that can be easily transmitted or stored. In Kafka, this typically means converting data into a byte array that can be sent to Kafka topics.\n\n- **Producer Side:**\n  - **Serializer Interface:** Kafka producers use serializers to convert Java objects into byte arrays before sending them to Kafka topics. The `org.apache.kafka.common.serialization.Serializer` interface is implemented by serializers.\n  - **Default Serializers:** Kafka provides default serializers for common data types, such as `StringSerializer`, `IntegerSerializer`, `LongSerializer`, and `ByteArraySerializer`.\n  - **Custom Serializers:** Developers can create custom serializers by implementing the `Serializer` interface. This is useful for serializing complex objects or custom data formats.\n  - **Configuration:** Producers specify the serializer class in the `producer.properties` configuration file using properties like `key.serializer` and `value.serializer`.\n\n**Example:**\n```java\nProperties props = new Properties();\nprops.put(\"bootstrap.servers\", \"localhost:9092\");\nprops.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\nprops.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\nKafkaProducer<String, String> producer = new KafkaProducer<>(props);\nproducer.send(new ProducerRecord<>(\"topic\", \"key\", \"value\"));\n```\n\n#### **2. Deserialization**\n\n**Deserialization** is the process of converting byte arrays back into objects or data structures. On the consumer side, this involves reading data from Kafka topics and converting it into a usable format.\n\n- **Consumer Side:**\n  - **Deserializer Interface:** Kafka consumers use deserializers to convert byte arrays received from Kafka topics back into Java objects. The `org.apache.kafka.common.serialization.Deserializer` interface is implemented by deserializers.\n  - **Default Deserializers:** Kafka provides default deserializers for common data types, such as `StringDeserializer`, `IntegerDeserializer`, `LongDeserializer`, and `ByteArrayDeserializer`.\n  - **Custom Deserializers:** Developers can create custom deserializers by implementing the `Deserializer` interface. This is useful for deserializing complex objects or custom data formats.\n  - **Configuration:** Consumers specify the deserializer class in the `consumer.properties` configuration file using properties like `key.deserializer` and `value.deserializer`.\n\n**Example:**\n```java\nProperties props = new Properties();\nprops.put(\"bootstrap.servers\", \"localhost:9092\");\nprops.put(\"group.id\", \"group-id\");\nprops.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\nprops.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\nKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\nconsumer.subscribe(Collections.singletonList(\"topic\"));\n\nwhile (true) {\n    ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n    for (ConsumerRecord<String, String> record : records) {\n        System.out.printf(\"key = %s, value = %s%n\", record.key(), record.value());\n    }\n}\n```\n\n### **Custom Serialization and Deserialization**\n\nFor custom data formats or complex objects, you may need to implement your own serializers and deserializers:\n\n- **Custom Serializer Example:**\n```java\npublic class CustomObjectSerializer implements Serializer<CustomObject> {\n    @Override\n    public byte[] serialize(String topic, CustomObject data) {\n        // Convert CustomObject to byte array\n        // Example: Serialization logic here\n    }\n    \n    @Override\n    public void close() {\n        // Clean up resources if needed\n    }\n}\n```\n\n- **Custom Deserializer Example:**\n```java\npublic class CustomObjectDeserializer implements Deserializer<CustomObject> {\n    @Override\n    public CustomObject deserialize(String topic, byte[] data) {\n        // Convert byte array to CustomObject\n        // Example: Deserialization logic here\n    }\n    \n    @Override\n    public void close() {\n        // Clean up resources if needed\n    }\n}\n```\n\n### **Integration with Schema Registry**\n\nFor complex data formats like Avro or Protobuf, Kafka integrates with Schema Registry:\n\n- **Schema Registry:** Provides a way to manage and enforce schemas for Kafka messages. It ensures data compatibility and allows for evolution of schemas over time.\n- **Confluent Schema Registry:** A popular implementation for managing Avro schemas with Kafka. It works with Kafka serializers and deserializers to handle Avro data.\n\n**Example using Avro with Schema Registry:**\n```java\n// Producer configuration\nprops.put(\"value.serializer\", \"io.confluent.kafka.serializers.KafkaAvroSerializer\");\nprops.put(\"schema.registry.url\", \"http://localhost:8081\");\n\n// Consumer configuration\nprops.put(\"value.deserializer\", \"io.confluent.kafka.serializers.KafkaAvroDeserializer\");\nprops.put(\"schema.registry.url\", \"http://localhost:8081\");\nprops.put(\"specific.avro.reader\", \"true\");\n```\n\n### **Summary**\n\n- **Serialization:** Converts data into byte arrays for transmission. Uses serializers on the producer side.\n- **Deserialization:** Converts byte arrays back into objects. Uses deserializers on the consumer side.\n- **Custom Serializers/Deserializers:** Implemented for custom data formats or complex objects.\n- **Schema Registry Integration:** Used for managing and enforcing schemas, particularly with Avro or Protobuf data formats.\n\nKafka’s approach to serialization and deserialization ensures that data can be efficiently transmitted and accurately reconstructed, providing flexibility and robustness in data processing pipelines.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"a2cfa758-5707-44d2-83ee-83dbe32d3606","order":0,"createdDate":{"$date":"2024-08-29T19:56:01.254Z"},"updatedDate":{"$date":"2024-08-29T19:56:01.254Z"},"uniqueId":"c1bdc972-80c6-451c-8cde-2e713733cb62","__v":0}
{"_id":{"$oid":"66d0d36ca272225ce4897fcd"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Apache Kafka is widely used in modern distributed systems due to its high-throughput, low-latency, and fault-tolerant capabilities. Here are some common use cases:\n\n### **1. Real-Time Data Streaming**\n\n- **Event Sourcing:**\n  - **Use Case:** Capturing changes in data as a sequence of events.\n  - **Example:** Storing all user actions in a financial trading application to replay events for auditing or debugging.\n\n- **Real-Time Analytics:**\n  - **Use Case:** Analyzing and processing data streams in real-time to gain insights.\n  - **Example:** Processing sensor data from IoT devices to monitor and analyze operational metrics instantly.\n\n### **2. Log Aggregation**\n\n- **Centralized Logging:**\n  - **Use Case:** Aggregating logs from multiple sources into a single system for easier management and analysis.\n  - **Example:** Collecting logs from different microservices and applications into a centralized log management system like Elasticsearch.\n\n### **3. Data Integration**\n\n- **ETL (Extract, Transform, Load):**\n  - **Use Case:** Performing real-time ETL operations to move data between systems and transform it as needed.\n  - **Example:** Streaming data from a database to a data warehouse for real-time reporting and analytics.\n\n- **Data Synchronization:**\n  - **Use Case:** Synchronizing data across multiple systems or databases.\n  - **Example:** Keeping a user profile database synchronized with an external identity management system.\n\n### **4. Messaging System**\n\n- **Asynchronous Communication:**\n  - **Use Case:** Decoupling services and allowing them to communicate asynchronously.\n  - **Example:** Using Kafka to facilitate communication between microservices in a decoupled architecture.\n\n- **Request-Reply Pattern:**\n  - **Use Case:** Implementing request-reply messaging patterns with durable storage.\n  - **Example:** A service sending a request to another service and waiting for a response via Kafka topics.\n\n### **5. Stream Processing**\n\n- **Real-Time Stream Processing:**\n  - **Use Case:** Processing and analyzing data streams in real-time.\n  - **Example:** Using Kafka Streams to perform real-time aggregations, joins, and windowed computations on data streams.\n\n- **Complex Event Processing (CEP):**\n  - **Use Case:** Detecting complex patterns and events from data streams.\n  - **Example:** Detecting fraud patterns in financial transactions by analyzing transaction streams.\n\n### **6. Event-Driven Architectures**\n\n- **Event-Driven Microservices:**\n  - **Use Case:** Building systems where microservices communicate through events.\n  - **Example:** Updating inventory in an e-commerce system by sending events when orders are placed or shipments are received.\n\n- **Decoupled Systems:**\n  - **Use Case:** Decoupling producers and consumers to enhance system flexibility and scalability.\n  - **Example:** An order service producing events that are consumed by inventory, shipping, and notification services.\n\n### **7. Data Pipeline**\n\n- **Data Ingestion:**\n  - **Use Case:** Ingesting data from various sources into a central data system.\n  - **Example:** Collecting and streaming logs, metrics, and event data from different sources into a data lake.\n\n- **Data Replay:**\n  - **Use Case:** Replaying historical data for reprocessing or testing.\n  - **Example:** Replaying historical user activity data for testing new analytics algorithms.\n\n### **8. Distributed Systems Coordination**\n\n- **Distributed Commit Logs:**\n  - **Use Case:** Implementing distributed commit logs for consistency across distributed systems.\n  - **Example:** Coordinating distributed transactions or updates in a distributed database system.\n\n### **9. Metrics and Monitoring**\n\n- **Metrics Collection:**\n  - **Use Case:** Collecting and aggregating metrics from various sources.\n  - **Example:** Streaming application performance metrics and system health indicators to monitoring dashboards.\n\n- **Alerting:**\n  - **Use Case:** Generating alerts based on specific conditions or thresholds in the data.\n  - **Example:** Sending alerts for unusual spikes in error rates or latency in a service.\n\n### **Summary**\n\n- **Real-Time Data Streaming:** Event sourcing, real-time analytics.\n- **Log Aggregation:** Centralized logging.\n- **Data Integration:** ETL, data synchronization.\n- **Messaging System:** Asynchronous communication, request-reply pattern.\n- **Stream Processing:** Real-time processing, complex event processing.\n- **Event-Driven Architectures:** Microservices communication, decoupled systems.\n- **Data Pipeline:** Data ingestion, replay.\n- **Distributed Systems Coordination:** Commit logs.\n- **Metrics and Monitoring:** Metrics collection, alerting.\n\nKafka’s ability to handle high-throughput data streams and its durability make it a versatile tool for a wide range of use cases in modern distributed systems.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"15a598bf-3440-46e7-8273-ab4682dbdbe4","order":0,"createdDate":{"$date":"2024-08-29T20:00:44.626Z"},"updatedDate":{"$date":"2024-08-29T20:00:44.626Z"},"uniqueId":"c62691c8-7b3d-47b5-9a4a-eeb0b1c4a33d","__v":0}
{"_id":{"$oid":"66d0d3bea272225ce4898c30"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Setting up a Kafka cluster and configuring topics, producers, and consumers involves several steps. Here's a comprehensive guide on how to do it:\n\n### **1. Setting Up a Kafka Cluster**\n\n#### **Prerequisites:**\n- **Java:** Kafka requires Java 8 or later. Ensure Java is installed on all machines in the cluster.\n- **Zookeeper:** Kafka uses Zookeeper for cluster management. Ensure Zookeeper is set up and running.\n\n#### **Steps:**\n\n1. **Download and Install Kafka:**\n   - Download Kafka from the [Apache Kafka website](https://kafka.apache.org/downloads).\n   - Extract the downloaded tar or zip file.\n\n   ```sh\n   tar -xzf kafka_2.13-3.2.0.tgz\n   cd kafka_2.13-3.2.0\n   ```\n\n2. **Configure Zookeeper:**\n   - Kafka relies on Zookeeper for managing distributed brokers. Kafka includes a built-in Zookeeper server for development purposes.\n   - Configuration file: `config/zookeeper.properties`.\n\n   ```properties\n   # Sample Zookeeper configuration\n   dataDir=/tmp/zookeeper\n   clientPort=2181\n   ```\n\n   - Start Zookeeper:\n\n   ```sh\n   bin/zookeeper-server-start.sh config/zookeeper.properties\n   ```\n\n3. **Configure Kafka Brokers:**\n   - Kafka brokers are the servers that store and manage Kafka topics.\n   - Configuration file: `config/server.properties`.\n\n   ```properties\n   # Sample Kafka broker configuration\n   broker.id=0\n   log.dirs=/tmp/kafka-logs\n   zookeeper.connect=localhost:2181\n   listeners=PLAINTEXT://localhost:9092\n   ```\n\n   - Start Kafka brokers:\n\n   ```sh\n   bin/kafka-server-start.sh config/server.properties\n   ```\n\n4. **Verify Kafka Cluster:**\n   - Use the Kafka CLI tools to ensure the cluster is up and running.\n   - List topics:\n\n   ```sh\n   bin/kafka-topics.sh --list --zookeeper localhost:2181\n   ```\n\n### **2. Configuring Topics**\n\n1. **Create a Topic:**\n   - Define topics in Kafka where messages are published and consumed.\n   - Create a topic using Kafka CLI:\n\n   ```sh\n   bin/kafka-topics.sh --create --topic my-topic --partitions 3 --replication-factor 1 --zookeeper localhost:2181\n   ```\n\n   - **Parameters:**\n     - `--topic`: Name of the topic.\n     - `--partitions`: Number of partitions for the topic.\n     - `--replication-factor`: Number of replicas for each partition.\n\n2. **Describe a Topic:**\n   - Get details about a topic's configuration:\n\n   ```sh\n   bin/kafka-topics.sh --describe --topic my-topic --zookeeper localhost:2181\n   ```\n\n3. **Delete a Topic:**\n   - Remove a topic if needed:\n\n   ```sh\n   bin/kafka-topics.sh --delete --topic my-topic --zookeeper localhost:2181\n   ```\n\n### **3. Configuring Producers**\n\n1. **Producer Configuration:**\n   - Producers send records to Kafka topics. Configure the producer with necessary properties.\n   - Example configuration:\n\n   ```properties\n   # Producer configuration\n   bootstrap.servers=localhost:9092\n   key.serializer=org.apache.kafka.common.serialization.StringSerializer\n   value.serializer=org.apache.kafka.common.serialization.StringSerializer\n   ```\n\n2. **Create a Producer Application:**\n   - Java example:\n\n   ```java\n   import org.apache.kafka.clients.producer.KafkaProducer;\n   import org.apache.kafka.clients.producer.ProducerConfig;\n   import org.apache.kafka.clients.producer.ProducerRecord;\n   import org.apache.kafka.common.serialization.StringSerializer;\n\n   import java.util.Properties;\n\n   public class ProducerExample {\n       public static void main(String[] args) {\n           Properties props = new Properties();\n           props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n           props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n           props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n           KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n           producer.send(new ProducerRecord<>(\"my-topic\", \"key\", \"value\"));\n           producer.close();\n       }\n   }\n   ```\n\n### **4. Configuring Consumers**\n\n1. **Consumer Configuration:**\n   - Consumers read records from Kafka topics. Configure the consumer with necessary properties.\n   - Example configuration:\n\n   ```properties\n   # Consumer configuration\n   bootstrap.servers=localhost:9092\n   group.id=my-group\n   key.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n   value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n   ```\n\n2. **Create a Consumer Application:**\n   - Java example:\n\n   ```java\n   import org.apache.kafka.clients.consumer.ConsumerConfig;\n   import org.apache.kafka.clients.consumer.ConsumerRecord;\n   import org.apache.kafka.clients.consumer.KafkaConsumer;\n   import org.apache.kafka.common.serialization.StringDeserializer;\n\n   import java.time.Duration;\n   import java.util.Collections;\n   import java.util.Properties;\n\n   public class ConsumerExample {\n       public static void main(String[] args) {\n           Properties props = new Properties();\n           props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n           props.put(ConsumerConfig.GROUP_ID_CONFIG, \"my-group\");\n           props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n           props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n           KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n           consumer.subscribe(Collections.singletonList(\"my-topic\"));\n\n           while (true) {\n               consumer.poll(Duration.ofMillis(100)).forEach(record -> {\n                   System.out.printf(\"key = %s, value = %s%n\", record.key(), record.value());\n               });\n           }\n       }\n   }\n   ```\n\n### **Summary**\n\n- **Kafka Cluster Setup:**\n  - Download and install Kafka.\n  - Configure and start Zookeeper.\n  - Configure and start Kafka brokers.\n\n- **Topic Configuration:**\n  - Create, describe, and delete topics.\n\n- **Producer Configuration:**\n  - Set up producer properties.\n  - Implement a producer application to send records to Kafka topics.\n\n- **Consumer Configuration:**\n  - Set up consumer properties.\n  - Implement a consumer application to read records from Kafka topics.\n\nBy following these steps, you can effectively set up a Kafka cluster and configure topics, producers, and consumers to handle real-time data processing and messaging needs.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"04fb2ec2-6ded-469c-a65f-e9205aca711b","order":0,"createdDate":{"$date":"2024-08-29T20:02:06.206Z"},"updatedDate":{"$date":"2024-08-29T20:02:06.206Z"},"uniqueId":"f3515bfc-e3f1-4b1d-ab11-b2521c19a273","__v":0}
{"_id":{"$oid":"66d0d419a272225ce4899893"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To use Kafka in a Java application, you'll need to include the Kafka client library in your project and then set up Kafka producers and consumers to interact with Kafka topics. Here's a step-by-step guide:\n\n### **1. Set Up Your Java Project**\n\n#### **Using Maven:**\n\nAdd Kafka dependencies to your `pom.xml`:\n\n```xml\n<dependencies>\n    <!-- Kafka Clients -->\n    <dependency>\n        <groupId>org.apache.kafka</groupId>\n        <artifactId>kafka-clients</artifactId>\n        <version>3.2.0</version>\n    </dependency>\n</dependencies>\n```\n\n#### **Using Gradle:**\n\nAdd Kafka dependencies to your `build.gradle`:\n\n```groovy\ndependencies {\n    // Kafka Clients\n    implementation 'org.apache.kafka:kafka-clients:3.2.0'\n}\n```\n\n### **2. Configure Kafka Properties**\n\nCreate a properties file or configure properties in your Java code. This includes settings for both producers and consumers.\n\n#### **Producer Configuration:**\n\n```properties\nbootstrap.servers=localhost:9092\nkey.serializer=org.apache.kafka.common.serialization.StringSerializer\nvalue.serializer=org.apache.kafka.common.serialization.StringSerializer\n```\n\n#### **Consumer Configuration:**\n\n```properties\nbootstrap.servers=localhost:9092\ngroup.id=my-group\nkey.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nvalue.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n```\n\n### **3. Implement a Kafka Producer**\n\nKafka producers send messages to Kafka topics. Here's an example of a basic Kafka producer in Java:\n\n```java\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.util.Properties;\n\npublic class KafkaProducerExample {\n    public static void main(String[] args) {\n        // Set up producer properties\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n        // Create Kafka producer\n        KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n        // Create a producer record\n        ProducerRecord<String, String> record = new ProducerRecord<>(\"my-topic\", \"key\", \"value\");\n\n        // Send data asynchronously\n        producer.send(record, (metadata, exception) -> {\n            if (exception != null) {\n                exception.printStackTrace();\n            } else {\n                System.out.println(\"Sent record with key \" + record.key() + \" to partition \" + metadata.partition() + \" with offset \" + metadata.offset());\n            }\n        });\n\n        // Close the producer\n        producer.close();\n    }\n}\n```\n\n### **4. Implement a Kafka Consumer**\n\nKafka consumers read messages from Kafka topics. Here's an example of a basic Kafka consumer in Java:\n\n```java\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class KafkaConsumerExample {\n    public static void main(String[] args) {\n        // Set up consumer properties\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, \"my-group\");\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n        // Create Kafka consumer\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\n        // Subscribe to a topic\n        consumer.subscribe(Collections.singletonList(\"my-topic\"));\n\n        // Poll for new records\n        while (true) {\n            consumer.poll(Duration.ofMillis(100)).forEach(record -> {\n                System.out.printf(\"Received record with key %s and value %s from partition %d with offset %d%n\",\n                        record.key(), record.value(), record.partition(), record.offset());\n            });\n        }\n    }\n}\n```\n\n### **5. Run and Test**\n\n- **Start Kafka and Zookeeper:** Ensure Kafka and Zookeeper are running on your local machine or remote server.\n- **Create a Topic:** Use Kafka CLI tools to create the topic you are using in your producer and consumer.\n- **Run the Producer:** Execute the Kafka producer application to send messages to Kafka.\n- **Run the Consumer:** Execute the Kafka consumer application to receive and process messages from Kafka.\n\n### **6. Advanced Configurations**\n\n- **Error Handling:** Implement error handling and retries in your producer and consumer applications to handle potential issues.\n- **Serialization Formats:** Explore other serialization formats (e.g., Avro, JSON) if needed for your use case.\n- **Performance Tuning:** Adjust configurations such as batch size, linger time, and acknowledgments to optimize performance.\n\nBy following these steps, you'll be able to integrate Kafka into your Java application and utilize its powerful messaging and streaming capabilities.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ae241c7d-87bf-4afa-8f7d-c889a9a5e89d","order":0,"createdDate":{"$date":"2024-08-29T20:03:37.649Z"},"updatedDate":{"$date":"2024-08-29T20:03:37.649Z"},"uniqueId":"0e835614-cfaf-4243-9ddf-51299b231dc6","__v":0}
{"_id":{"$oid":"66d0d683a272225ce489b172"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kafka can be installed using various methods depending on your environment and requirements. Here are some common ways to install Kafka:\n\n### **1. Manual Installation**\n\n#### **Download and Extract Kafka:**\n1. **Download Kafka:**\n   Visit the [Apache Kafka downloads page](https://kafka.apache.org/downloads) and download the latest release.\n\n2. **Extract the Archive:**\n   ```bash\n   tar -xzf kafka_2.13-3.2.0.tgz\n   ```\n\n3. **Navigate to Kafka Directory:**\n   ```bash\n   cd kafka_2.13-3.2.0\n   ```\n\n4. **Start Zookeeper and Kafka:**\n   - **Start Zookeeper:**\n     ```bash\n     bin/zookeeper-server-start.sh config/zookeeper.properties\n     ```\n   - **Start Kafka Broker:**\n     ```bash\n     bin/kafka-server-start.sh config/server.properties\n     ```\n\n### **2. Using Docker**\n\n#### **Run Kafka in Docker:**\n1. **Create a Docker Network:**\n   ```bash\n   docker network create kafka-network\n   ```\n\n2. **Run Zookeeper:**\n   ```bash\n   docker run -d --name zookeeper --network kafka-network -e ZOOKEEPER_CLIENT_PORT=2181 wurstmeister/zookeeper:3.7\n   ```\n\n3. **Run Kafka Broker:**\n   ```bash\n   docker run -d --name kafka --network kafka-network -e KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092 -e KAFKA_LISTENER_NAME_INNER=INSIDE -e KAFKA_LISTENER_NAME_OUTER=OUTSIDE -e KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092 -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 wurstmeister/kafka:latest\n   ```\n\n### **3. Using Package Managers**\n\n#### **For Debian/Ubuntu:**\n1. **Add the Confluent Repository:**\n   ```bash\n   sudo apt-get install wget\n   wget -qO - https://packages.confluent.io/deb/5.5/archive.key | sudo apt-key add -\n   echo \"deb [arch=amd64] https://packages.confluent.io/deb/5.5 stable main\" | sudo tee /etc/apt/sources.list.d/confluent.list\n   ```\n\n2. **Install Kafka:**\n   ```bash\n   sudo apt-get update\n   sudo apt-get install confluent-platform\n   ```\n\n#### **For RedHat/CentOS:**\n1. **Add the Confluent Repository:**\n   ```bash\n   sudo rpm --import https://packages.confluent.io/rpm/5.5/archive.key\n   sudo tee /etc/yum.repos.d/confluent.repo <<EOF\n   [confluent]\n   name=Confluent repository\n   baseurl=https://packages.confluent.io/rpm/5.5\n   gpgcheck=1\n   gpgkey=https://packages.confluent.io/rpm/5.5/archive.key\n   enabled=1\n   EOF\n   ```\n\n2. **Install Kafka:**\n   ```bash\n   sudo yum install confluent-platform\n   ```\n\n### **4. Using Cloud Providers**\n\n#### **Managed Kafka Services:**\n1. **Amazon MSK (Managed Streaming for Apache Kafka):**\n   - Use the AWS Management Console or AWS CLI to create and manage Kafka clusters.\n\n2. **Confluent Cloud:**\n   - Sign up on the [Confluent Cloud](https://www.confluent.io/confluent-cloud/) platform for a fully managed Kafka service.\n\n3. **Azure Event Hubs for Kafka:**\n   - Use Azure Portal or Azure CLI to set up Kafka-compatible messaging on Azure Event Hubs.\n\n### **5. Using Apache Ambari**\n\n1. **Install Ambari:**\n   - Follow the [Ambari installation guide](https://docs.hortonworks.com/HDPDocuments/Ambari-2.7.5.0/bk_ambari-installation/content/ambari_installation.html).\n\n2. **Install Kafka via Ambari:**\n   - Use Ambari's web interface to add Kafka as a service to your Hadoop cluster.\n\n### **6. Using Helm Charts (for Kubernetes)**\n\n1. **Add the Bitnami Helm Repository:**\n   ```bash\n   helm repo add bitnami https://charts.bitnami.com/bitnami\n   ```\n\n2. **Install Kafka:**\n   ```bash\n   helm install my-kafka bitnami/kafka\n   ```\n\nEach method has its own advantages and is suited for different environments, whether you're developing locally, deploying on-premises, or using cloud services.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"87ff0c97-9fe8-48c5-87bf-ec326c0d08b3","order":0,"createdDate":{"$date":"2024-08-29T20:13:55.831Z"},"updatedDate":{"$date":"2024-08-29T20:13:55.831Z"},"uniqueId":"7da1574f-f4ea-447f-b9b3-42e0880a71f5","__v":0}
{"_id":{"$oid":"66d0d9a9a272225ce489f498"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Implementing security in a Spring Boot application can be achieved through various approaches depending on the requirements. Here are different ways to implement Spring Boot security:\n\n### **1. Basic Authentication**\n\n#### **Configuration:**\n- Use Spring Security’s basic authentication to secure endpoints.\n- Configure in `application.properties` or `application.yml`.\n\n#### **Example:**\n\n**Java Configuration:**\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"{noop}password\").roles(\"USER\");\n    }\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .httpBasic();\n    }\n}\n```\n\n### **2. Form-Based Authentication**\n\n#### **Configuration:**\n- Use custom login pages and form-based authentication.\n\n#### **Example:**\n\n**Java Configuration:**\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"{noop}password\").roles(\"USER\");\n    }\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin()\n                .loginPage(\"/login\")\n                .permitAll();\n    }\n}\n```\n\n**Controller for Login Page:**\n```java\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class LoginController {\n    \n    @GetMapping(\"/login\")\n    public String login() {\n        return \"login\"; // Thymeleaf or JSP view name\n    }\n}\n```\n\n### **3. JWT (JSON Web Token) Authentication**\n\n#### **Configuration:**\n- Use JWTs to authenticate and authorize users.\n\n#### **Example:**\n\n**Dependencies:**\nAdd dependencies for JWT in `pom.xml` or `build.gradle`.\n\n**Java Configuration:**\n- Implement JWT filter and authentication.\n\n```java\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\npublic class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter {\n    // Implement JWT token parsing and validation\n}\n```\n\n**Security Config:**\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .addFilter(new JwtAuthenticationFilter(authenticationManager()));\n    }\n}\n```\n\n### **4. OAuth2 and OpenID Connect**\n\n#### **Configuration:**\n- Use Spring Security's support for OAuth2 and OpenID Connect for single sign-on (SSO).\n\n#### **Example:**\n\n**Dependencies:**\nAdd OAuth2 dependencies to your project.\n\n**Java Configuration:**\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .oauth2Login();\n    }\n}\n```\n\n### **5. LDAP Authentication**\n\n#### **Configuration:**\n- Integrate with an LDAP server for authentication.\n\n#### **Example:**\n\n**Java Configuration:**\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n            .ldapAuthentication()\n                .contextSource()\n                    .url(\"ldap://localhost:8389/dc=springframework,dc=org\")\n                    .managerDn(\"cn=admin,dc=springframework,dc=org\")\n                    .managerPassword(\"password\")\n                .passwordCompare()\n                    .passwordEncoder(new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder())\n                    .passwordAttribute(\"userPassword\");\n    }\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin();\n    }\n}\n```\n\n### **6. Method-Level Security**\n\n#### **Configuration:**\n- Use annotations like `@Secured` or `@PreAuthorize` for method-level security.\n\n#### **Example:**\n\n**Java Configuration:**\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .formLogin();\n    }\n}\n```\n\n**Method-Level Annotation:**\n```java\nimport org.springframework.security.access.prepost.PreAuthorize;\n\npublic class MyService {\n    \n    @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n    public void adminOnlyMethod() {\n        // Only accessible by users with ADMIN role\n    }\n}\n```\n\n### **7. Spring Security Custom Filters**\n\n#### **Configuration:**\n- Add custom security filters to handle specific security requirements.\n\n#### **Example:**\n\n**Custom Filter:**\n```java\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport java.io.IOException;\n\nimport org.springframework.web.filter.GenericFilterBean;\n\npublic class CustomSecurityFilter extends GenericFilterBean {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        // Custom security logic here\n        chain.doFilter(request, response);\n    }\n}\n```\n\n**Security Config:**\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    \n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .anyRequest().authenticated()\n                .and()\n            .addFilterBefore(new CustomSecurityFilter(), UsernamePasswordAuthenticationFilter.class);\n    }\n}\n```\n\nThese methods can be combined or adjusted based on your application's specific security needs.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"648ae3e9-fe79-4d93-9494-1830840c1988","order":0,"createdDate":{"$date":"2024-08-29T20:27:21.354Z"},"updatedDate":{"$date":"2024-08-29T20:27:21.354Z"},"uniqueId":"6125278e-6c44-40fe-966f-be8b78cc3f88","__v":0}
{"_id":{"$oid":"66d0da31a272225ce48a1a57"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Spring Boot Security, various annotations are used to configure and enforce security at different levels. Here are some commonly used annotations:\n\n### **1. `@EnableWebSecurity`**\n\n- **Purpose:** Enables Spring Security’s web security support and provides the Spring MVC integration.\n- **Usage:** Applied to a configuration class to activate Spring Security’s web security features.\n  \n  ```java\n  @Configuration\n  @EnableWebSecurity\n  public class SecurityConfig extends WebSecurityConfigurerAdapter {\n      // Configuration methods\n  }\n  ```\n\n### **2. `@Secured`**\n\n- **Purpose:** Specifies the roles or authorities required to access a particular method.\n- **Usage:** Applied at the method level to restrict access based on roles.\n\n  ```java\n  @Service\n  public class MyService {\n\n      @Secured(\"ROLE_ADMIN\")\n      public void adminOnlyMethod() {\n          // Method implementation\n      }\n  }\n  ```\n\n### **3. `@PreAuthorize`**\n\n- **Purpose:** Provides more flexible access control by allowing SpEL (Spring Expression Language) expressions to be used to specify access restrictions.\n- **Usage:** Applied at the method level to conditionally allow access based on roles or other conditions.\n\n  ```java\n  @Service\n  public class MyService {\n\n      @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n      public void userOrAdminMethod() {\n          // Method implementation\n      }\n  }\n  ```\n\n### **4. `@PostAuthorize`**\n\n- **Purpose:** Similar to `@PreAuthorize`, but evaluates the access control rules after the method execution.\n- **Usage:** Applied at the method level for post-invocation security checks.\n\n  ```java\n  @Service\n  public class MyService {\n\n      @PostAuthorize(\"returnObject.username == principal.username\")\n      public User getUserById(Long id) {\n          // Method implementation\n          return user;\n      }\n  }\n  ```\n\n### **5. `@RolesAllowed`**\n\n- **Purpose:** Specifies the roles that are allowed to access a method, similar to `@Secured`, but part of JSR-250.\n- **Usage:** Applied at the method level to restrict access based on roles.\n\n  ```java\n  @Service\n  public class MyService {\n\n      @RolesAllowed(\"ROLE_MANAGER\")\n      public void managerOnlyMethod() {\n          // Method implementation\n      }\n  }\n  ```\n\n### **6. `@EnableGlobalMethodSecurity`**\n\n- **Purpose:** Enables method-level security annotations such as `@Secured`, `@PreAuthorize`, and `@PostAuthorize`.\n- **Usage:** Applied to a configuration class to enable method-level security.\n\n  ```java\n  @Configuration\n  @EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\n  public class SecurityConfig extends WebSecurityConfigurerAdapter {\n      // Configuration methods\n  }\n  ```\n\n### **7. `@AuthenticationPrincipal`**\n\n- **Purpose:** Used to access the current authenticated user's details in a controller method.\n- **Usage:** Applied to a method parameter to inject the current user's principal.\n\n  ```java\n  @RestController\n  public class UserController {\n\n      @GetMapping(\"/user\")\n      public ResponseEntity<User> getUser(@AuthenticationPrincipal UserDetails userDetails) {\n          // Use userDetails\n          return ResponseEntity.ok(userDetails);\n      }\n  }\n  ```\n\n### **8. `@RequestMapping` with Security**\n\n- **Purpose:** While not specific to security, it’s often used in conjunction with security annotations to define access control at the endpoint level.\n- **Usage:** Applied to controller methods to map HTTP requests.\n\n  ```java\n  @RestController\n  public class MyController {\n\n      @RequestMapping(\"/admin\")\n      @Secured(\"ROLE_ADMIN\")\n      public String adminEndpoint() {\n          return \"Admin access\";\n      }\n  }\n  ```\n\n### **9. `@Configuration`**\n\n- **Purpose:** While not a security-specific annotation, it is used to define a configuration class that may include security settings.\n- **Usage:** Applied to a class to indicate it contains bean definitions and configuration.\n\n  ```java\n  @Configuration\n  @EnableWebSecurity\n  public class SecurityConfig extends WebSecurityConfigurerAdapter {\n      // Security configuration\n  }\n  ```\n\nThese annotations help you manage security configurations in Spring Boot applications, making it easier to enforce access control and secure methods and endpoints.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"865d25f7-5e7a-4670-bf92-71f84e7cf716","order":0,"createdDate":{"$date":"2024-08-29T20:29:37.106Z"},"updatedDate":{"$date":"2024-08-29T20:29:37.106Z"},"uniqueId":"a1894294-9807-4802-b76a-f26e81a2733f","__v":0}
{"_id":{"$oid":"66d1464e3bdfbcf4f68b1ad0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an overview of the different versions of JDBC along with their major features:\n\n### **JDBC Versions and Major Features**\n\n1. **JDBC 1.0 (Java 1.1)**\n   - **Introduction:** The first version of JDBC, introduced in JDK 1.1.\n   - **Core Features:** Basic API for database connectivity, executing SQL queries, and processing results using `Statement` and `ResultSet`.\n\n2. **JDBC 2.0 (Java 1.2, 1.3)**\n   - **Scrollable ResultSet:** Introduced support for `ScrollableResultSet`, allowing navigation through the result set in both forward and backward directions.\n   - **Batch Updates:** Added the ability to execute batch updates, improving performance when executing multiple SQL statements.\n   - **DataSource:** Introduced the `DataSource` interface for more flexible and efficient database connections.\n   - **Connection Pooling:** Support for connection pooling through `DataSource` implementations.\n\n3. **JDBC 3.0 (Java 1.4)**\n   - **Savepoints:** Introduced savepoints in transactions, allowing partial rollbacks.\n   - **Connection Pooling Enhancements:** Enhanced connection pooling features for better performance and resource management.\n   - **ResultSet Holdability:** Allowed a `ResultSet` to be held open across multiple transactions.\n\n4. **JDBC 4.0 (Java 6)**\n   - **Auto-loading of JDBC Driver:** Simplified driver loading with the automatic discovery of JDBC drivers.\n   - **SQL Exception Handling Enhancements:** Introduced chained exceptions and improved diagnostics.\n   - **Annotation-Based SQL Queries:** Support for `@Sql` annotation in Enterprise Java Beans (EJBs).\n\n5. **JDBC 4.1 (Java 7)**\n   - **Try-with-Resources:** Improved resource management with the try-with-resources statement, automatically closing `Connection`, `Statement`, and `ResultSet`.\n   - **Enhanced CallableStatement:** Support for using `getObject` with custom mapping of SQL types to Java objects.\n\n6. **JDBC 4.2 (Java 8)**\n   - **Support for Java 8 Types:** Added support for `LocalDate`, `LocalTime`, and `LocalDateTime` in `ResultSet` and `PreparedStatement`.\n   - **Updated SQL Types:** Support for the new SQL types such as `REF_CURSOR`.\n\n7. **JDBC 4.3 (Java 9, 10, 11)**\n   - **Improved Integration with Java 9 Modules:** Enhanced integration with Java Platform Module System (JPMS).\n   - **Multi-Release JARs:** Support for multi-release JAR files to take advantage of Java 9 features.\n\n8. **JDBC 4.4 (Java 12, 13, 14)**\n   - **Minor Updates:** Minor enhancements and updates for compatibility with newer versions of Java.\n\n9. **JDBC 4.5+ (Java 15+)**\n   - **Compatibility Updates:** Ongoing updates to maintain compatibility with the latest Java features and improvements.\n\nThese versions reflect the evolution of JDBC in enhancing database connectivity, performance, and integration with the Java platform.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4f12d84b-b37c-4936-87c3-52414ce9a753","order":0,"createdDate":{"$date":"2024-08-30T04:10:54.003Z"},"updatedDate":{"$date":"2024-08-30T04:10:54.003Z"},"uniqueId":"95815cf5-15c3-4798-9270-fb4c11358f5a","__v":0}
{"_id":{"$oid":"66d155303bdfbcf4f68b3464"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple Java program to perform CRUD operations on user data in a MySQL database. This example uses JDBC for database interactions.\n\n### 1. **Database Setup:**\n\nFirst, create the `user` table in MySQL:\n\n```sql\nCREATE TABLE user (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    uniqueId VARCHAR(255) NOT NULL,\n    name VARCHAR(255) NOT NULL,\n    address VARCHAR(255),\n    isActive BOOLEAN NOT NULL DEFAULT TRUE\n);\n```\n\n### 2. **Java Program:**\n\n```java\nimport java.sql.*;\n\npublic class UserCRUD {\n    \n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/your_database\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"password\";\n\n    public static void main(String[] args) {\n        try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD)) {\n            // Create a new user\n            int userId = createUser(connection, \"UUID-1234\", \"John Doe\", \"123 Elm Street\", true);\n            System.out.println(\"User created with ID: \" + userId);\n\n            // Read the user data\n            readUser(connection, userId);\n\n            // Update the user's address\n            updateUser(connection, userId, \"456 Oak Street\");\n\n            // Delete the user\n            deleteUser(connection, userId);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static int createUser(Connection connection, String uniqueId, String name, String address, boolean isActive) throws SQLException {\n        String sql = \"INSERT INTO user (uniqueId, name, address, isActive) VALUES (?, ?, ?, ?)\";\n        try (PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\n            pstmt.setString(1, uniqueId);\n            pstmt.setString(2, name);\n            pstmt.setString(3, address);\n            pstmt.setBoolean(4, isActive);\n            pstmt.executeUpdate();\n\n            try (ResultSet rs = pstmt.getGeneratedKeys()) {\n                if (rs.next()) {\n                    return rs.getInt(1); // return generated id\n                }\n            }\n        }\n        return -1;\n    }\n\n    private static void readUser(Connection connection, int id) throws SQLException {\n        String sql = \"SELECT * FROM user WHERE id = ?\";\n        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n            pstmt.setInt(1, id);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                if (rs.next()) {\n                    System.out.println(\"ID: \" + rs.getInt(\"id\"));\n                    System.out.println(\"Unique ID: \" + rs.getString(\"uniqueId\"));\n                    System.out.println(\"Name: \" + rs.getString(\"name\"));\n                    System.out.println(\"Address: \" + rs.getString(\"address\"));\n                    System.out.println(\"Is Active: \" + rs.getBoolean(\"isActive\"));\n                }\n            }\n        }\n    }\n\n    private static void updateUser(Connection connection, int id, String newAddress) throws SQLException {\n        String sql = \"UPDATE user SET address = ? WHERE id = ?\";\n        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n            pstmt.setString(1, newAddress);\n            pstmt.setInt(2, id);\n            int affectedRows = pstmt.executeUpdate();\n            System.out.println(\"Updated rows: \" + affectedRows);\n        }\n    }\n\n    private static void deleteUser(Connection connection, int id) throws SQLException {\n        String sql = \"DELETE FROM user WHERE id = ?\";\n        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n            pstmt.setInt(1, id);\n            int affectedRows = pstmt.executeUpdate();\n            System.out.println(\"Deleted rows: \" + affectedRows);\n        }\n    }\n}\n```\n\n### 3. **Program Explanation:**\n\n- **Create User:** Inserts a new user into the `user` table. The `uniqueId`, `name`, `address`, and `isActive` fields are provided, while `id` is auto-incremented by MySQL.\n- **Read User:** Retrieves and prints the user's details based on the provided `id`.\n- **Update User:** Updates the user's address based on the provided `id`.\n- **Delete User:** Deletes the user from the database based on the provided `id`.\n\n### 4. **Dependencies:**\n\nMake sure to include the MySQL JDBC driver in your project's dependencies.\n\nIf you're using Maven:\n\n```xml\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.33</version>\n</dependency>\n```\n\nReplace the `JDBC_URL`, `JDBC_USER`, and `JDBC_PASSWORD` with your database credentials and connection details.\n\nThis program provides a basic template to perform CRUD operations in Java using JDBC with a MySQL database.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c910cf15-8b25-40e5-9ac5-f104612398a8","order":0,"createdDate":{"$date":"2024-08-30T05:14:24.111Z"},"updatedDate":{"$date":"2024-08-30T05:14:24.111Z"},"uniqueId":"9284b114-65e0-4bb9-bd64-8ab18fa15fe0","__v":0}
{"_id":{"$oid":"66d155c53bdfbcf4f68b4d48"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"GraphQL is a query language for APIs, and a runtime for executing those queries by your existing data. It allows clients to request exactly the data they need, making it more efficient than traditional REST APIs where fixed data structures are often returned. With GraphQL, you define a schema that describes the types of data and relationships within your API, and clients can specify queries to fetch, mutate, or subscribe to this data in a flexible way.\n\nKey features of GraphQL:\n- **Declarative Data Fetching**: Clients specify exactly what data they need in a single query.\n- **Single Endpoint**: All requests are sent to a single endpoint, simplifying API management.\n- **Strongly Typed Schema**: The schema defines the capabilities of the API and enables validation.\n- **Real-time Data**: Subscriptions in GraphQL enable real-time updates by pushing data to clients when changes occur.\n\nExample of a simple GraphQL query:\n\n```graphql\nquery {\n  user(id: \"1\") {\n    id\n    name\n    email\n  }\n}\n```\n\nThis query fetches the `id`, `name`, and `email` fields for a user with the ID of 1.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"116da2be-812a-4d09-89f2-8cf9bba01588","order":0,"createdDate":{"$date":"2024-08-30T05:16:53.07Z"},"updatedDate":{"$date":"2024-08-30T05:16:53.07Z"},"uniqueId":"bdfb8b70-a545-4914-8bde-c5d44a1e6a86","__v":0}
{"_id":{"$oid":"66d1564c3bdfbcf4f68b6630"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"GraphQL offers several advantages over REST APIs:\n\n1. **Efficient Data Fetching**:\n   - **Overfetching/Underfetching**: In REST, you often get too much or too little data, requiring multiple requests to different endpoints. With GraphQL, clients request exactly the data they need, minimizing unnecessary data transfer.\n   - **Single Request**: GraphQL allows fetching related data in a single request. In REST, multiple requests might be needed to gather data from various endpoints.\n\n2. **Flexible Querying**:\n   - **Customizable Responses**: Clients can specify exactly what fields they want in the response, reducing the payload size.\n   - **Dynamic Queries**: Clients can query data dynamically without needing new endpoints, making the API more flexible and adaptable to changes.\n\n3. **Strongly Typed Schema**:\n   - **Introspection**: GraphQL has a type system that allows clients to introspect the API, understanding available data types and fields, which makes API exploration and tooling easier.\n   - **Validation**: The schema enforces data validation at the query level, catching errors before executing the query.\n\n4. **Versioning**:\n   - **No Need for Versioning**: Unlike REST, where new versions of endpoints may be required as the API evolves, GraphQL's flexible query structure often eliminates the need for versioning. Changes are managed by deprecating fields or introducing new ones within the same schema.\n\n5. **Real-time Data with Subscriptions**:\n   - **Real-time Updates**: GraphQL supports subscriptions, allowing clients to receive real-time updates when data changes. REST requires separate mechanisms like WebSockets for this purpose.\n\n6. **Single Endpoint**:\n   - **Simplified API Management**: All GraphQL operations (queries, mutations, subscriptions) are handled through a single endpoint, simplifying API management and routing.\n\n7. **Tooling and Ecosystem**:\n   - **Rich Tooling**: GraphQL has a robust ecosystem of tools, including GraphiQL (an in-browser IDE for exploring GraphQL), Apollo Client, and Relay, which streamline development and debugging.\n\nThese advantages make GraphQL particularly well-suited for complex applications with dynamic data needs, where flexibility, efficiency, and real-time capabilities are essential.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"03a88a51-065e-465c-a0fc-7fa77b53b769","order":0,"createdDate":{"$date":"2024-08-30T05:19:08.488Z"},"updatedDate":{"$date":"2024-08-30T05:19:08.488Z"},"uniqueId":"bf5dd2c3-7e49-4b71-afa0-50f37b10f182","__v":0}
{"_id":{"$oid":"66d157183bdfbcf4f68b7f2d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"<p>Adding GraphQL to a Maven-based Java project can be done using various approaches. Here are some of the common ways:</p><p>### 1. **Using Spring Boot with `graphql-java`**<br>&nbsp; - **Dependencies**: Use the `graphql-spring-boot-starter` and `graphql-java-tools` to integrate GraphQL into a Spring Boot application.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;com.graphql-java-kickstart&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;graphql-spring-boot-starter&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;12.0.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;com.graphql-java-kickstart&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;graphiql-spring-boot-starter&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;12.0.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;scope&gt;runtime&lt;/scope&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;com.graphql-java-kickstart&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;graphql-java-tools&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;12.0.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: Define your GraphQL schema (`.graphqls` files) and resolvers. Spring Boot automatically configures GraphQL endpoints based on your schema and resolvers.</p><p>### 2. **Using `graphql-java` (Core Library)**<br>&nbsp; - **Dependencies**: Add the `graphql-java` core library to your project. This is more manual but gives you full control over how GraphQL is integrated.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;com.graphql-java&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;graphql-java&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;19.2&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: You’ll need to manually set up the GraphQL schema, create `DataFetchers` for your queries and mutations, and configure the GraphQL execution logic.</p><p>### 3. **Using `Spring GraphQL` (Official Spring Integration)**<br>&nbsp; - **Dependencies**: Spring GraphQL provides a simpler integration, leveraging Spring Boot features and the core `graphql-java` library.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;spring-boot-starter-graphql&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;2.7.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: This approach integrates seamlessly with Spring Boot, using annotations like `@SchemaMapping` and `@QueryMapping` to define GraphQL endpoints.</p><p>### 4. **Using `DGS Framework` by Netflix**<br>&nbsp; - **Dependencies**: The DGS framework by Netflix simplifies the GraphQL setup in Spring Boot applications.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;com.netflix.graphql.dgs&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;graphql-dgs-spring-boot-starter&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;4.9.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: Define your schema and data fetchers using the DGS framework. The framework provides tools for creating GraphQL APIs, including data fetchers, query resolvers, and more.</p><p>### 5. **Using `SPQR` (Simple to Configure GraphQL in Java)**<br>&nbsp; - **Dependencies**: SPQR is a lightweight GraphQL library that can be integrated with Spring or used standalone.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;io.leangen.graphql&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;spqr&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;0.9.9&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: SPQR generates GraphQL schemas directly from your Java classes and methods, allowing you to annotate your code with `@GraphQLQuery` and `@GraphQLMutation` to define your API.</p><p>### 6. **Using `Micronaut GraphQL`**<br>&nbsp; - **Dependencies**: If you are using Micronaut, you can integrate GraphQL with the `micronaut-graphql` dependency.</p><p>&nbsp; ```xml<br>&nbsp; &lt;dependencies&gt;<br>&nbsp; &nbsp; &nbsp; &lt;dependency&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;groupId&gt;io.micronaut.graphql&lt;/groupId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;artifactId&gt;micronaut-graphql&lt;/artifactId&gt;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;version&gt;4.0.0&lt;/version&gt;<br>&nbsp; &nbsp; &nbsp; &lt;/dependency&gt;<br>&nbsp; &lt;/dependencies&gt;<br>&nbsp; ```</p><p>&nbsp; - **Setup**: Micronaut provides easy integration with GraphQL, allowing you to define resolvers and schema using standard Micronaut annotations.</p><p>### General Setup Steps<br>- **Define the Schema**: Usually done in `.graphqls` files, where you define types, queries, mutations, and subscriptions.<br>- **Create Resolvers**: Implement resolvers to handle the queries and mutations defined in your schema.<br>- **Configure GraphQL Endpoint**: Depending on the library, this might be auto-configured, or you may need to set it up manually.<br>- **Test**: Use tools like GraphiQL or Postman to test your GraphQL endpoints.</p><p>Each approach has its strengths, and your choice depends on the specific needs and existing setup of your project.</p>","textOutputType":"html","textInputType":"CKEditor"},"rating":2,"linkedQuestionsId":"29e5bd62-e89b-49f4-97a3-214a7001087d","order":0,"createdDate":{"$date":"2024-08-30T05:22:32.331Z"},"updatedDate":{"$date":"2024-08-30T05:22:32.331Z"},"uniqueId":"8822ba81-f5e8-4154-be75-4843dd14abfc","__v":0}
{"_id":{"$oid":"66d15dda3bdfbcf4f68b9eb1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"When integrating GraphQL with a Spring Boot JPA project, solving over-fetching and under-fetching at the controller level is important, but it's equally crucial to optimize the service and repository layers to ensure efficiency and maintainability. Here are some best practices to follow:\n\n### 1. **Optimize Data Fetching with `@EntityGraph` and `@Fetch`**\n   - **Use `@EntityGraph`**: To avoid the N+1 query problem, leverage JPA’s `@EntityGraph` to define which related entities should be fetched eagerly. This helps in fetching required associations in a single query.\n   - **Use `@Fetch(FetchMode.JOIN)`**: Apply `@Fetch` with `FetchMode.JOIN` in Hibernate to ensure that related entities are joined in a single query instead of lazy loading them later.\n\n   ```java\n   @EntityGraph(attributePaths = {\"relatedEntity\"})\n   List<ParentEntity> findAllWithRelatedEntity();\n   ```\n\n### 2. **Batch Loading**\n   - **DataLoader Pattern**: Use a DataLoader to batch and cache database queries, especially useful when dealing with nested GraphQL queries. This helps in reducing the number of database queries by batching and avoiding redundant calls.\n\n   ```java\n   DataLoader<String, User> userLoader = DataLoader.newMappedDataLoader(keys -> {\n       return CompletableFuture.supplyAsync(() -> userRepository.findAllByIds(keys));\n   });\n   ```\n\n### 3. **Custom Queries with `@Query`**\n   - **Leverage JPQL/Native Queries**: For complex queries or cases where fetching multiple related entities is required, use JPQL or native SQL queries with `@Query`. This can help in fine-tuning the data retrieval process.\n\n   ```java\n   @Query(\"SELECT u FROM User u JOIN FETCH u.roles WHERE u.id = :id\")\n   Optional<User> findUserWithRoles(@Param(\"id\") Long id);\n   ```\n\n### 4. **Projection and DTOs**\n   - **Use Projections**: Instead of fetching entire entities, use JPA projections or DTOs (Data Transfer Objects) to retrieve only the necessary data from the database, reducing the amount of data loaded into memory.\n\n   ```java\n   public interface UserProjection {\n       String getUsername();\n       String getEmail();\n   }\n\n   List<UserProjection> findAllUsers();\n   ```\n\n   - **Custom DTOs**: Create custom DTOs in your repository or service layer to return only the required fields to the GraphQL layer, avoiding the overhead of fetching and returning entire entities.\n\n### 5. **Lazy Loading and Fetch Strategies**\n   - **Choose Fetch Type Wisely**: For most associations, use `LAZY` loading to prevent unnecessary data loading. For fields that are always required, consider `EAGER` loading but use it cautiously.\n   - **Control Fetching in GraphQL Resolvers**: Explicitly load only the needed data in your GraphQL resolvers, and avoid initializing unnecessary relationships in JPA entities.\n\n### 6. **Transaction Management**\n   - **Service Layer Transactions**: Use `@Transactional` at the service layer to manage transactions effectively, ensuring that all database operations related to a single GraphQL request are handled within a single transaction.\n\n   ```java\n   @Transactional\n   public UserDto createUser(CreateUserInput input) {\n       // Business logic for creating user\n   }\n   ```\n\n### 7. **Pagination and Filtering**\n   - **Implement Pagination**: Use pagination mechanisms such as `Pageable` or `Slice` in your repository methods to efficiently fetch large datasets.\n\n   ```java\n   Page<User> findAll(Pageable pageable);\n   ```\n\n   - **GraphQL Arguments**: Map GraphQL arguments like `first`, `last`, `skip`, and `filter` directly to repository queries to limit data retrieval and optimize performance.\n\n### 8. **Caching Strategies**\n   - **Second-Level Cache**: Leverage Hibernate’s second-level cache for frequently accessed entities to reduce database load.\n   - **Method-Level Caching**: Use Spring’s `@Cacheable` annotation at the service layer to cache the results of frequently executed queries.\n\n   ```java\n   @Cacheable(\"users\")\n   public User getUserById(Long id) {\n       return userRepository.findById(id).orElse(null);\n   }\n   ```\n\n### 9. **Avoid Direct Entity Exposure**\n   - **Decouple Service Layer**: Avoid returning JPA entities directly from the service layer to GraphQL. Use DTOs or GraphQL-specific models to prevent lazy loading issues and better control the data flow.\n\n### 10. **Error Handling**\n   - **Consistent Error Responses**: Implement consistent error handling at the service and repository layers. Convert exceptions to GraphQL-friendly error messages and use custom exception handling strategies to ensure that errors are meaningful to the client.\n\n   ```java\n   @Service\n   public class UserService {\n\n       public UserDto getUser(Long id) {\n           return userRepository.findById(id)\n               .map(user -> mapToDto(user))\n               .orElseThrow(() -> new UserNotFoundException(\"User not found\"));\n       }\n   }\n   ```\n\n### 11. **Security**\n   - **Method-Level Security**: Secure your service layer methods using annotations like `@PreAuthorize` or `@Secured` to ensure that only authorized users can access specific data.\n\n   ```java\n   @PreAuthorize(\"hasRole('ADMIN')\")\n   public void deleteUser(Long id) {\n       userRepository.deleteById(id);\n   }\n   ```\n\nBy following these best practices, you can ensure that your service and repository layers are optimized, maintainable, and capable of efficiently supporting the GraphQL API. This leads to better performance, scalability, and a more robust application overall.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"241b5483-0300-498b-8bcd-0a6b1e37a65c","order":0,"createdDate":{"$date":"2024-08-30T05:51:22.511Z"},"updatedDate":{"$date":"2024-08-30T05:51:22.511Z"},"uniqueId":"ac27e02c-b647-4667-b6ea-10212781bc31","__v":0}
{"_id":{"$oid":"66d176f93bdfbcf4f68bfed6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Some of the built-in immutable objects in Java include:\n\n1. **String**\n   - The `String` class in Java is immutable, meaning once a `String` object is created, its value cannot be changed.\n\n2. **Wrapper Classes**\n   - The wrapper classes for primitive types are immutable:\n     - `Integer`\n     - `Long`\n     - `Float`\n     - `Double`\n     - `Byte`\n     - `Short`\n     - `Character`\n     - `Boolean`\n\n3. **BigDecimal**\n   - `BigDecimal` is an immutable class used for high-precision arithmetic operations.\n\n4. **BigInteger**\n   - `BigInteger` is another immutable class used for operations on large integers.\n\n5. **LocalDate, LocalTime, LocalDateTime, ZonedDateTime**\n   - These classes in the `java.time` package are immutable and represent date and time in Java.\n\n6. **UUID**\n   - The `UUID` class is immutable and represents universally unique identifiers.\n\nThese immutable objects are commonly used in Java for various operations where immutability provides safety, predictability, and simplicity.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"bcfc5774-2769-41a2-bd8a-5d4cc7efa080","order":0,"createdDate":{"$date":"2024-08-30T07:38:33.013Z"},"updatedDate":{"$date":"2024-08-30T07:38:33.013Z"},"uniqueId":"87718fef-1041-4ca3-a60a-3f49b15020af","__v":0}
{"_id":{"$oid":"66d179463bdfbcf4f68c180c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The difference between an immutable object and a `final` object in Java lies in their definitions and behaviors:\n\n### Immutable Object:\n- **Definition**: An immutable object is an object whose state cannot be changed after it is created. Once all of its fields are set during the object's construction, they cannot be modified.\n- **Behavior**: Immutable objects are inherently thread-safe because their state cannot be altered, preventing issues like race conditions.\n- **Example**: `String`, `Integer`, `LocalDate`, and `BigDecimal` are examples of immutable classes in Java.\n\n### Final Object:\n- **Definition**: A `final` object refers to an object reference that cannot be changed to point to a different object after it has been initialized. The `final` keyword ensures that the reference variable cannot be reassigned.\n- **Behavior**: While the reference is final and cannot be changed to another object, the state of the object it points to can still be modified if the object itself is mutable.\n- **Example**: \n  ```java\n  final List<String> list = new ArrayList<>();\n  list.add(\"Hello\"); // Modifying the object is allowed.\n  list = new ArrayList<>(); // This will cause a compile-time error.\n  ```\n\n### Key Differences:\n- **State Mutability**: Immutable objects cannot have their state changed after creation, while `final` objects can have their internal state changed if they are mutable, but the reference itself cannot be reassigned.\n- **Thread Safety**: Immutable objects are naturally thread-safe, while `final` objects are not inherently thread-safe, as their internal state can still be modified by multiple threads.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"31b86052-288b-496a-acd1-cd3041e82542","order":0,"createdDate":{"$date":"2024-08-30T07:48:22.08Z"},"updatedDate":{"$date":"2024-08-30T07:48:22.08Z"},"uniqueId":"176ecd66-9338-40b1-ad22-13927139c64b","__v":0}
{"_id":{"$oid":"66d179953bdfbcf4f68c2a96"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Immutability** refers to the concept where an object's state cannot be modified after it has been created. In other words, once an object is instantiated with a certain set of values, those values cannot be changed. Any operation that would alter the state of the object instead returns a new object with the modified state, leaving the original object unchanged.\n\n### Key Points:\n- **Immutable Objects**: These are objects whose fields or properties cannot be changed after creation. For example, strings in Java are immutable. Any operation that changes a string will result in a new string being created.\n- **Advantages**: \n  - **Thread Safety**: Immutable objects are inherently thread-safe since their state cannot be changed. Multiple threads can safely share and access them without synchronization.\n  - **Predictability**: Since their state can't change, immutable objects offer a more predictable behavior, making it easier to understand and reason about code.\n  - **Caching**: Because their state doesn't change, immutable objects can be safely cached and reused, reducing the need for frequent object creation.\n- **Creating Immutable Objects**: In languages like Java, to create an immutable object, you generally:\n  - Declare all fields as `private` and `final`.\n  - Do not provide \"setter\" methods that modify fields.\n  - Ensure that mutable objects referenced by the immutable object are not exposed or modified.\n\n### Example in Java:\n\n```java\npublic final class ImmutablePerson {\n    private final String name;\n    private final int age;\n\n    public ImmutablePerson(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n}\n```\n\nIn the above example, the `ImmutablePerson` class is immutable because:\n- The class is declared as `final`, so it cannot be subclassed.\n- The fields `name` and `age` are `private` and `final`, meaning they can only be set once.\n- There are no setter methods, so once an `ImmutablePerson` object is created, its state cannot be changed.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"0a4b0626-2c61-4594-bb3a-45cca1fe2df9","order":0,"createdDate":{"$date":"2024-08-30T07:49:41.301Z"},"updatedDate":{"$date":"2024-08-30T07:49:41.301Z"},"uniqueId":"460150de-c38d-4f32-bdf3-b416fd11b630","__v":0}
{"_id":{"$oid":"66d1acc53bdfbcf4f68dda9e"},"name":"Using Java 8 syntax","heading":"Using Java 8 syntax","smartContent":{"content":"\n```\npackage com.coding.practice.codes.stringOperations;\n\nimport com.coding.practice.codes.common.InvalidInputException;\n\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\npublic class StringOperationsV8 {\n\n    // Supplier to create InvalidInputException with a consistent message\n    private static final Supplier<InvalidInputException> invalidInputExceptionSupplier =\n            () -> new InvalidInputException(\"Input string is null or empty\");\n\n    // Define StringOperations as functional interfaces for various string manipulations\n    private static final StringOperation toUpperCase = input ->\n            input.map(String::toUpperCase)\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation toLowerCase = input ->\n            input.map(String::toLowerCase)\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation noOfCharacter = input ->\n            input.map(s -> String.valueOf(s.length()))\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation reverseString = input ->\n            input.map(s -> s.chars()\n                            .mapToObj(c -> String.valueOf((char) c))\n                            .reduce(\"\", (acc, c) -> c + acc))\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation replaceAWithZ = input ->\n            input.map(s -> s.replace(\"a\", \"z\"))\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation extractIndex1To3 = input ->\n            input.map(s -> s.length() >= 3 ? s.substring(1, 3) : s)\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation appendString = input ->\n            input.map(s -> s + \"ef\")\n                    .map(s -> \"'\" + s + \"'\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation getFrequency = input -> input.map(s -> {\n                // Create a frequency map using Collectors\n                Map<Character, Long> frequencyMap = s.trim().chars()\n                        .filter(c -> !Character.isWhitespace(c))\n                        .mapToObj(c -> (char) c)\n                        .collect(Collectors.groupingBy(c -> c, Collectors.counting()));\n\n                // Format the frequency map as a string\n                String result = frequencyMap.entrySet().stream()\n                        .map(entry -> \"'\" + entry.getKey() + \"' : '\" + entry.getValue() + \"'\")\n                        .collect(Collectors.joining(\", \", \"{\", \"}\"));\n\n                return \"'\" + result + \"'\";\n            })\n            .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation palindromeResult = input ->\n            input.map(s -> {\n                        char[] characters = s.toCharArray();\n                        int length = characters.length;\n                        for (int i = 0; i < length / 2; i++) {\n                            if (characters[i] != characters[length - 1 - i]) {\n                                return \"no\";\n                            }\n                        }\n                        return \"yes\";\n                    })\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation getTotalLineNumbers = input ->\n            input.map(s -> s.split(\"\\\\n\").length + \"\")\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static final StringOperation normalizeString= input ->\n            input.map(s -> s.replaceAll(\"[\\\\W_]\", \"\").toLowerCase())\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    private static void executeTest(String str) throws InvalidInputException {\n        Optional<String> sampleString = Optional.ofNullable(str);\n\n        System.out.println(toUpperCase.performWithTitle(\"Post Capitalization: \", str));\n        System.out.println(toLowerCase.performWithTitle(\"Change to lowercase: \", str));\n        System.out.println(noOfCharacter.performWithTitle(\"Number of characters: \", str));\n        System.out.println(reverseString.performWithTitle(\"Reversed string: \", str));\n        System.out.println(\"Is palindrome: \" + palindromeResult.perform(Optional.ofNullable(str)));\n        System.out.println(\"Replace 'a' with 'z': \" + replaceAWithZ.perform(Optional.ofNullable(str)));\n        System.out.println(\"Extract substring 1-3: \" + extractIndex1To3.perform(Optional.ofNullable(str)));\n        System.out.println(\"Append string: \" + appendString.perform(Optional.ofNullable(str)));\n        System.out.println(\"Character frequency: \" + getFrequency.perform(Optional.ofNullable(str)));\n        System.out.println(getTotalLineNumbers.performWithTitle(\n                \"Split lines by new-line character and return total no of lines: \", str));\n        System.out.println(normalizeString.performWithTitle(\n                \"method that removes spaces, punctuation, and capitalization from a string: \",str));\n    }\n\n    public static void main(String[] args) {\n        String[] inputs = {\"Premendra Kumar\", \"abba\",\"Hello world\\nThis is a sample text\\nJava 8 is powerful\", null, \"\",\n                \"A man, a plan, a canal, Panama\", \"Able was I ere I saw Elba\"};\n        for (String input : inputs) {\n            try {\n                System.out.println(\"=====================\\nStarting test: '\" + input + \"'\");\n                executeTest(input);\n                System.out.println(\"\\nEnding test: '\" + input + \"' \\n=====================\");\n            } catch (InvalidInputException ex) {\n                System.out.println(\"\\nEnding test for Input: '\" + input + \"', with Error: \" + ex.getMessage());\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    @FunctionalInterface\n    private interface StringOperation {\n        String perform(Optional<String> input) throws InvalidInputException;\n\n        default String performWithTitle(String title, String input) throws InvalidInputException {\n            if (title != null) {\n                System.out.print(title + \"\\t\\t\");\n            }\n            if (input == null || input.isEmpty()) {\n                throw new InvalidInputException(\"Input is missing or empty\");\n            }\n            return perform(Optional.of(input));\n        }\n    }\n}\n\n\n```\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"be18ce26-6ab4-4256-9faa-6a750d7d3b1f","order":0,"createdDate":{"$date":"2024-08-30T11:28:05.514Z"},"updatedDate":{"$date":"2024-09-06T14:03:40.499Z"},"uniqueId":"85b58364-6bd3-4a83-80b4-1d5b4d6bda24","__v":0}
{"_id":{"$oid":"66d1b4a23bdfbcf4f68e49a2"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, it is technically possible to put a service class and its test class in the same Java file, although it is not a common practice.\n\n### How It Works:\n- **Inner Class**: You can define the test class as a static inner class within the same file as the service class.\n  \n  ```java\n  public class MyService {\n      public String greet(String name) {\n          return \"Hello, \" + name;\n      }\n\n      // Test class as an inner class\n      public static class MyServiceTest {\n          public static void main(String[] args) {\n              MyService service = new MyService();\n              System.out.println(service.greet(\"World\")); // Expected: \"Hello, World\"\n          }\n      }\n  }\n  ```\n\n### Considerations:\n- **Code Organization**: This approach can clutter the service class file, making it harder to maintain.\n- **Separation of Concerns**: Typically, test classes are kept in a separate directory (e.g., `src/test/java`) to ensure a clear separation of production code and test code.\n- **Tooling and Frameworks**: Testing frameworks like JUnit and build tools like Maven/Gradle expect test classes to be in separate files and directories, so this setup may complicate integration with standard tools.\n\n### Conclusion:\nWhile technically possible, it's generally better to keep the service class and its test class in separate files to maintain clean, organized, and maintainable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"656e4bf0-54f6-459a-a576-06acadaef7d7","order":0,"createdDate":{"$date":"2024-08-30T12:01:38.104Z"},"updatedDate":{"$date":"2024-08-30T12:01:38.104Z"},"uniqueId":"9a13109b-6940-4f0c-baeb-30c37df4c2ed","__v":0}
{"_id":{"$oid":"66d1bb0e3bdfbcf4f68e7f52"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, **inner interfaces** within a class are implicitly `static`. This means that they are not tied to an instance of the enclosing class and can be accessed directly using the class name.\n\n### Key Points:\n- **Implicitly Static**: All interfaces defined inside a class are implicitly `static`. You don’t need to explicitly mark them as `static`.\n- **Access**: You can access these inner interfaces using the class name, without needing an instance of the enclosing class.\n\n### Example:\n```java\nclass OuterClass {\n    interface InnerInterface {\n        void performAction();\n    }\n}\n\n// Accessing the inner interface\nOuterClass.InnerInterface instance = new OuterClass.InnerInterface() {\n    @Override\n    public void performAction() {\n        System.out.println(\"Action performed\");\n    }\n};\n```\n\nIn the example above, the `InnerInterface` inside `OuterClass` is implicitly `static`, so you can access it using `OuterClass.InnerInterface` without needing an instance of `OuterClass`.\n\n### Summary:\n- **Yes**, all inner interfaces of a class are implicitly `static`, even if you don't explicitly declare them as such. This allows them to be accessed directly through the outer class without requiring an instance of the outer class.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"23227613-0631-470f-b077-86c572a3544c","order":0,"createdDate":{"$date":"2024-08-30T12:29:02.626Z"},"updatedDate":{"$date":"2024-08-30T12:29:02.626Z"},"uniqueId":"f375b174-6765-4ef6-b377-ce12b2c277b4","__v":0}
{"_id":{"$oid":"66d1bb883bdfbcf4f68e9876"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, inner interfaces are implicitly `static` to make them more flexible and easier to use. Here’s why:\n\n### 1. **Interfaces Are Typically Independent of Instances**:\n   - Interfaces define a contract (methods that must be implemented) and don’t rely on the state of any particular instance of the enclosing class. Therefore, it makes sense to allow them to be accessed independently of an instance of the outer class.\n\n### 2. **Avoiding the Need for an Outer Class Instance**:\n   - If inner interfaces were not implicitly `static`, you would need to instantiate the outer class before accessing the interface, which would be cumbersome and unnecessary in most cases.\n   - For example, without the `static` behavior, you’d have to do something like:\n     ```java\n     OuterClass outer = new OuterClass();\n     OuterClass.InnerInterface instance = outer.new InnerInterfaceImplementation();\n     ```\n   - With `static` behavior, you can directly access the interface via the outer class, which simplifies usage:\n     ```java\n     OuterClass.InnerInterface instance = new InnerInterfaceImplementation();\n     ```\n\n### 3. **Encapsulation and Organization**:\n   - By allowing interfaces to be declared inside a class, Java lets you organize related interfaces and classes together, improving code readability and maintainability. \n   - Since these interfaces don't need access to the outer class's instance variables or methods, making them implicitly `static` helps keep the design clean and intuitive.\n\n### 4. **Logical Grouping**:\n   - Declaring interfaces inside a class allows you to logically group related interfaces with the class they are associated with, but without forcing the implementation to be tied to an instance of that class.\n\n### Summary:\nMaking inner interfaces implicitly `static` is a design decision in Java that promotes flexibility, reduces unnecessary complexity, and aligns with the typical use case of interfaces as independent contracts not tied to a particular instance of a class.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1c6d5b96-12f0-478e-90ae-52a4e56bde28","order":0,"createdDate":{"$date":"2024-08-30T12:31:04.865Z"},"updatedDate":{"$date":"2024-08-30T12:31:04.865Z"},"uniqueId":"6caedcdd-9990-47ec-9591-6ef6a7ece4a9","__v":0}
{"_id":{"$oid":"66d1bc833bdfbcf4f68ef467"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, a nested class is a class defined within another class. Nested classes are categorized into two main types: **static** and **non-static**. They help in logically grouping classes that are only used in one place, increasing encapsulation and making the code more readable and maintainable.\n\n### Types of Nested Classes\n\n1. **Static Nested Class**:\n   - **Definition**: A static nested class is a static member of the outer class. It can be accessed without an instance of the outer class.\n   - **Usage**: It is often used when the nested class doesn't need to access instance variables or methods of the outer class.\n   - **Example**:\n     ```java\n     class OuterClass {\n         static class StaticNestedClass {\n             void display() {\n                 System.out.println(\"Inside static nested class\");\n             }\n         }\n     }\n\n     public class Main {\n         public static void main(String[] args) {\n             OuterClass.StaticNestedClass nested = new OuterClass.StaticNestedClass();\n             nested.display();\n         }\n     }\n     ```\n\n2. **Non-Static Nested Classes (Inner Classes)**:\n   - **Inner Class**:\n     - **Definition**: An inner class is associated with an instance of the outer class and can access its instance members, including private ones.\n     - **Usage**: Useful when the inner class needs to access the outer class's members.\n     - **Example**:\n       ```java\n       class OuterClass {\n           class InnerClass {\n               void display() {\n                   System.out.println(\"Inside inner class\");\n               }\n           }\n       }\n\n       public class Main {\n           public static void main(String[] args) {\n               OuterClass outer = new OuterClass();\n               OuterClass.InnerClass inner = outer.new InnerClass();\n               inner.display();\n           }\n       }\n       ```\n\n   - **Method-Local Inner Class**:\n     - **Definition**: A class defined within a method of the outer class. It can only be accessed within the method where it is defined.\n     - **Usage**: Useful for one-time use classes within a method.\n     - **Example**:\n       ```java\n       class OuterClass {\n           void outerMethod() {\n               class MethodLocalInnerClass {\n                   void display() {\n                       System.out.println(\"Inside method-local inner class\");\n                   }\n               }\n               MethodLocalInnerClass inner = new MethodLocalInnerClass();\n               inner.display();\n           }\n       }\n       ```\n\n   - **Anonymous Inner Class**:\n     - **Definition**: A class without a name defined within a method or as a parameter. It is used to instantiate objects with certain modifications without having to create a separate named class.\n     - **Usage**: Commonly used when a class needs to be extended or an interface implemented only once.\n     - **Example**:\n       ```java\n       class OuterClass {\n           void display() {\n               Runnable r = new Runnable() {\n                   @Override\n                   public void run() {\n                       System.out.println(\"Inside anonymous inner class\");\n                   }\n               };\n               r.run();\n           }\n       }\n       ```\n\n### Benefits of Nested Classes\n\n- **Encapsulation**: Nested classes can access the private members of their outer class, providing a tighter coupling and encapsulation.\n- **Code Organization**: Grouping related classes together in one place enhances code readability and maintainability.\n- **Logical Grouping**: If a class is useful only to another class, it is logical to keep it nested within that class.\n- **Improved Code Readability**: Nested classes can make the code more readable by logically grouping classes that are only used together.\n\nNested classes offer a way to logically structure your code and can help encapsulate behavior in a more organized manner.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"fbe2969a-d24e-4459-8369-b0874e9e27d7","order":0,"createdDate":{"$date":"2024-08-30T12:35:15.782Z"},"updatedDate":{"$date":"2024-08-30T12:35:15.782Z"},"uniqueId":"9489793a-f678-4228-bb6a-69b9e5cf436d","__v":0}
{"_id":{"$oid":"66d1f8cd3bdfbcf4f68f0db9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a summary of the different `Optional` methods you've encountered:\n\n1. **`Optional.ofNullable(T value)`**:\n   - Creates an `Optional` instance that contains the provided value if it's non-null. Otherwise, it returns an empty `Optional`.\n\n   ```java\n   Optional<String> optional = Optional.ofNullable(str);\n   ```\n\n2. **`Optional.map(Function<? super T, ? extends U> mapper)`**:\n   - If a value is present, applies the provided mapping function to it and returns an `Optional` of the result. If the original `Optional` is empty, it returns an empty `Optional`.\n\n   ```java\n   Optional<String> upperCase = optional.map(String::toUpperCase);\n   ```\n\n3. **`Optional.orElseThrow(Supplier<? extends X> exceptionSupplier)`**:\n   - If a value is present, returns it. Otherwise, throws an exception created by the provided supplier.\n\n   ```java\n   String value = optional.orElseThrow(() -> new InvalidInputException(\"Input string is null or empty\"));\n   ```\n\n4. **`Optional.isPresent()`**:\n   - Returns `true` if the `Optional` contains a non-null value, and `false` if it is empty.\n\n   ```java\n   if (optional.isPresent()) {\n       // Do something with the value\n   }\n   ```\n\n5. **`Optional.ifPresent(Consumer<? super T> action)`**:\n   - If a value is present, performs the given action with the value. Otherwise, does nothing.\n\n   ```java\n   optional.ifPresent(value -> System.out.println(\"Value: \" + value));\n   ```\n\n6. **`Optional.orElse(T other)`**:\n   - Returns the contained value if present; otherwise, returns the provided default value.\n\n   ```java\n   String value = optional.orElse(\"Default Value\");\n   ```\n\n7. **`Optional.filter(Predicate<? super T> predicate)`**:\n   - If a value is present, and it matches the given predicate, returns the `Optional` containing the value. Otherwise, returns an empty `Optional`.\n\n   ```java\n   Optional<String> filtered = optional.filter(str -> str.length() > 5);\n   ```\n\n### Summary\n\n- **Creation**: Use `Optional.ofNullable()` to safely wrap a value that might be `null`.\n- **Transformation**: Use `map()` to apply a function to the contained value.\n- **Handling Absence**: Use `orElseThrow()` to throw an exception if the value is not present, or `orElse()` to provide a default value.\n- **Conditional Operations**: Use `isPresent()`, `ifPresent()`, and `filter()` to perform actions based on the presence or properties of the value.\n\nThese methods help avoid `null` checks and provide a fluent, functional-style approach to handling potentially absent values.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"242eb0c4-2050-485b-bf6c-f64b33c7932b","order":0,"createdDate":{"$date":"2024-08-30T16:52:29.883Z"},"updatedDate":{"$date":"2024-08-30T16:52:29.883Z"},"uniqueId":"4f78ecfb-11ed-4947-a029-4092052c6deb","__v":0}
{"_id":{"$oid":"66d2220e3bdfbcf4f68f26f4"},"name":"Using Pre-Java 8 syntax","heading":"Using Pre-Java 8 syntax","smartContent":{"content":"\n```\npackage com.coding.practice.codes.stringOperations;\n\nimport com.coding.practice.codes.common.InvalidInputException;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StringOperationsTraditionalApproach {\n\n    public static void main(String[] args) {\n        String[] inputs = {\"Premendra Kumar\", \"abcd\", \"abba\", \"abc\", null, \"\", \"        \",\n                \"Hello world\\nThis is a sample text\\nJava 8 is powerful\",\n                \"A man, a plan, a canal, Panama\", \"Able was I ere I saw Elba\"};\n        for (String input : inputs) {\n            try {\n                System.out.println(\"=====================\\nStarting test: '\" + input + \"'\");\n                executeTest(input);\n                System.out.println(\"\\nEnding test: '\" + input + \"' \\n=====================\");\n            } catch (InvalidInputException e) {\n                System.out.println(\"Ending test for Input: '\" + input + \"', with Error: \" + e.getMessage());\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private static void executeTest(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n\n        String transformedOutput = input.trim().toUpperCase();\n        System.out.println(\"Post capitaliation: \" + transformedOutput);\n\n        transformedOutput = transformedOutput.toLowerCase();\n        System.out.println(\"Change the entire string to lowercase after capitalization: \" + transformedOutput);\n\n//        transformedOutput= transformedOutput\n        System.out.println(\"Calculate the number of characters present in the string: \" + transformedOutput.length());\n\n        String reverse = reverse(transformedOutput);\n        System.out.println(\"Reverse the order of characters in the string: \" + reverse);\n\n        System.out.println(input.trim() + \" is \" + (transformedOutput.equals(reverse) ? \"\" : \"not\") + \" a palindrome\");\n\n        System.out.println(\"Replace `'a'` with `'z'` in `\\\"abcd\\\"` → `\\\"zbcd\\\"` : \" + transformedOutput.replace(\"a\", \"z\"));\n\n        System.out.println(\"Extract from index 1 to 3 in `\\\"abcd\\\"` → `\\\"bc\\\"` : \" + transformedOutput.substring(1, 3));\n\n        System.out.println(\"Append another string to the original string.\\n\" +\n                \" - Example: `\\\"abcd\\\"` + `\\\"ef\\\"` → `\\\"abcdef\\\"` : \" + (transformedOutput + \"ef\"));\n\n        System.out.println(\"Determine the frequency of each character in the string. : \" + getFrequency(transformedOutput));\n\n        System.out.println(\"Split lines by new-line character and return total no of lines: \" + getTotalNoOfLines(input));\n\n        System.out.println(\"method that removes spaces, punctuation, and capitalization from a string: \" + normalizeString(input));\n    }\n\n    private static String normalizeString(String input) {\n        // Remove spaces, punctuation, and make it lowercase\n        return input.replaceAll(\"[\\\\W_]\", \"\").toLowerCase();\n    }\n\n    private static int getTotalNoOfLines(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n\n        String[] lines = input.split(\"\\\\n\");\n        if (lines != null && lines.length > 0) {\n            return lines.length;\n        } else {\n            return 0;\n        }\n    }\n\n    private static String getFrequency(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n        StringBuffer res = new StringBuffer();\n        char[] chArr = input.trim().toCharArray();\n        Map<Character, Integer> characterIntegerMap = new HashMap<>();\n\n        for (int i = 0; i <= chArr.length - 1; i++) {\n            if (chArr[i] == ' ') continue;\n            if (characterIntegerMap.containsKey(chArr[i])) {\n                characterIntegerMap.put(chArr[i], characterIntegerMap.get(chArr[i]) + 1);\n            } else {\n                characterIntegerMap.put(chArr[i], 1);\n            }\n        }\n\n        System.out.println(characterIntegerMap);\n\n        res.append(\"{\");\n        for (Character c : characterIntegerMap.keySet()) {\n            res.append(\"'\").append(c).append(\"' : '\").append(characterIntegerMap.get(c)).append(\"',\");\n        }\n        res.append(\"}\");\n\n        return res.toString();\n    }\n\n    private static String getFrequencyFuture(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n\n        StringBuilder res = new StringBuilder();\n        char[] chArr = input.trim().toCharArray();\n        Map<Character, Integer> characterIntegerMap = new HashMap<>();\n\n        for (char c : chArr) {\n            if (Character.isWhitespace(c)) continue;\n            characterIntegerMap.merge(c, 1, Integer::sum);\n        }\n\n        System.out.println(characterIntegerMap);\n\n        res.append(\"{\");\n        characterIntegerMap.forEach((c, count) -> res.append(\"'\").append(c).append(\"' : '\").append(count).append(\"', \"));\n        if (res.length() > 1) res.setLength(res.length() - 2); // Remove the trailing comma and space\n        res.append(\"}\");\n\n        return res.toString();\n    }\n\n    private static String reverse(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n\n        char[] chArr = input.trim().toCharArray();\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i = chArr.length - 1; i >= 0; i--) {\n            stringBuffer.append(chArr[i]);\n        }\n\n        return stringBuffer.toString();\n\n    }\n}\n\n\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"be18ce26-6ab4-4256-9faa-6a750d7d3b1f","order":0,"createdDate":{"$date":"2024-08-30T19:48:30.488Z"},"updatedDate":{"$date":"2024-09-06T14:04:52.497Z"},"uniqueId":"a93cd7a6-12fb-497b-81b7-6cdbe5643f2e","__v":0}
{"_id":{"$oid":"66d22ca23bdfbcf4f68fa978"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java 8, you can use the `Function` interface and the `andThen` method to create a pipeline of operations, where the output of one step is passed as the input to the next. Here's a general approach:\n\n### Example\n\nSuppose you have four steps, each represented by a `Function`:\n\n```java\nimport java.util.function.Function;\n\npublic class PipelineExample {\n    public static void main(String[] args) {\n        // Step 1: Convert to uppercase\n        Function<String, String> step1 = String::toUpperCase;\n\n        // Step 2: Replace spaces with hyphens\n        Function<String, String> step2 = s -> s.replace(\" \", \"-\");\n\n        // Step 3: Remove vowels\n        Function<String, String> step3 = s -> s.replaceAll(\"[AEIOUaeiou]\", \"\");\n\n        // Step 4: Reverse the string\n        Function<String, String> step4 = s -> new StringBuilder(s).reverse().toString();\n\n        // Combine the steps using andThen\n        Function<String, String> pipeline = step1\n                .andThen(step2)\n                .andThen(step3)\n                .andThen(step4);\n\n        // Apply the pipeline\n        String input = \"Java 8 functional programming\";\n        String result = pipeline.apply(input);\n\n        System.out.println(result);  // Output: GN-MMRG-LNCTNLRP-L-8-VJ\n    }\n}\n```\n\n### Explanation\n\n- **Step 1 (`step1`)**: Converts the input string to uppercase.\n- **Step 2 (`step2`)**: Replaces all spaces in the string with hyphens.\n- **Step 3 (`step3`)**: Removes all vowels from the string.\n- **Step 4 (`step4`)**: Reverses the string.\n\n- **Pipeline (`pipeline`)**: The steps are chained together using the `andThen` method of the `Function` interface. This creates a pipeline where the output of one function is the input to the next.\n\n- **Result**: The input string \"Java 8 functional programming\" passes through the pipeline, resulting in \"GN-MMRG-LNCTNLRP-L-8-VJ\".\n\n### Benefits of This Approach\n- **Immutability**: Each step does not modify the input; instead, it produces a new output.\n- **Readability**: The pipeline approach is clear and easy to follow, showing how data flows from one step to the next.\n- **Reusability**: Each step can be reused or tested independently.\n\nThis approach leverages Java 8's functional programming features to create a clean, maintainable, and composable way of chaining operations.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"26720b08-5bb0-4290-8474-63df60ead585","order":0,"createdDate":{"$date":"2024-08-30T20:33:38.958Z"},"updatedDate":{"$date":"2024-08-30T20:33:38.958Z"},"uniqueId":"792e0b14-4961-4ed7-9703-f2f1b2ac3f10","__v":0}
{"_id":{"$oid":"66d2a4fd8bda9ecbbe9a9c91"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some popular third-party libraries for Java collections:\n\n1. **Google Guava**:\n   - **Features**: Guava provides a rich set of collection types, such as `Multimap`, `BiMap`, `ImmutableList`, `ImmutableSet`, and `ImmutableMap`. It also includes utilities for working with collections, such as filtering, transforming, and ordering.\n   - **Link**: [Google Guava](https://github.com/google/guava)\n\n2. **Apache Commons Collections**:\n   - **Features**: This library extends or augments the Java Collections Framework by providing additional collection types (e.g., `Bag`, `MultiMap`, `BidiMap`, `Trie`) and utilities for working with collections.\n   - **Link**: [Apache Commons Collections](https://commons.apache.org/proper/commons-collections/)\n\n3. **Eclipse Collections**:\n   - **Features**: Formerly known as GS Collections, Eclipse Collections provides a comprehensive set of collection types and utility methods, including `MutableList`, `ImmutableList`, `Bag`, `SetMultimap`, `BiMap`, and more. It also offers additional functionality for working with primitive collections, lazy collections, and parallel iteration.\n   - **Link**: [Eclipse Collections](https://www.eclipse.org/collections/)\n\nThese libraries offer advanced and specialized collection types that go beyond what the standard Java Collections Framework provides, making them valuable tools for developers working with complex data structures and algorithms.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ec770396-5754-4a25-a529-6c04d5f8653f","order":0,"createdDate":{"$date":"2024-08-31T05:07:09.595Z"},"updatedDate":{"$date":"2024-08-31T05:07:09.595Z"},"uniqueId":"5092d21e-10a2-481f-bd07-3f65c000156f","__v":0}
{"_id":{"$oid":"66d2a5f58bda9ecbbe9ab5eb"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"You can design this pipeline by using `Function` and `Stream` operations. The first step would convert the raw string into a list of lines, and the final step would calculate the word count from the processed lines.\n\n### Example\n\n```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class PipelineExample {\n    public static void main(String[] args) {\n        // Step 1: Split raw string into a list of strings (lines)\n        Function<String, List<String>> step1 = raw -> Arrays.asList(raw.split(\"\\n\"));\n\n        // Step 2: Convert each line to lowercase and trim spaces\n        Function<List<String>, List<String>> step2 = lines ->\n                lines.stream()\n                     .map(String::toLowerCase)\n                     .map(String::trim)\n                     .collect(Collectors.toList());\n\n        // Step 3: Calculate the word count from the processed lines\n        Function<List<String>, Long> step3 = lines ->\n                lines.stream()\n                     .flatMap(line -> Stream.of(line.split(\"\\\\s+\")))\n                     .count();\n\n        // Combine the steps using andThen\n        Function<String, Long> pipeline = step1\n                .andThen(step2)\n                .andThen(step3);\n\n        // Example input\n        String rawInput = \"Java 8 is great\\nStream API is powerful\\nFunctional Programming is fun\";\n\n        // Apply the pipeline\n        Long wordCount = pipeline.apply(rawInput);\n\n        System.out.println(\"Total Word Count: \" + wordCount); // Output: Total Word Count: 10\n    }\n}\n```\n\n### Explanation\n\n1. **Step 1 (`step1`)**: Converts the raw input string into a `List<String>` where each string represents a line. This is done using `split(\"\\n\")`.\n\n2. **Step 2 (`step2`)**: Processes each line by converting it to lowercase and trimming any leading or trailing spaces. This is achieved using `Stream.map()` and `Collectors.toList()`.\n\n3. **Step 3 (`step3`)**: Counts the number of words in the processed lines. The lines are split into words using `split(\"\\\\s+\")`, and the word count is obtained using `Stream.flatMap()` and `Stream.count()`.\n\n4. **Pipeline (`pipeline`)**: The steps are combined using `andThen`, forming a pipeline that processes the input string and produces the word count.\n\n5. **Result**: The input string \"Java 8 is great\\nStream API is powerful\\nFunctional Programming is fun\" is processed, and the word count is calculated as `10`.\n\n### Benefits\n\n- **Modular Design**: Each step of the pipeline is encapsulated in a `Function`, making the pipeline flexible and easy to modify.\n- **Functional Programming**: The use of `Stream` operations promotes functional programming principles, such as immutability and higher-order functions.\n- **Composability**: The pipeline is composed of individual steps, allowing you to add or remove steps as needed.\n\nThis design allows you to build a complex processing pipeline using simple, composable functions.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"356ead25-a79b-4930-86de-833b864ff544","order":0,"createdDate":{"$date":"2024-08-31T05:11:17.791Z"},"updatedDate":{"$date":"2024-08-31T05:11:17.791Z"},"uniqueId":"086df647-6b6c-4348-ac01-5453305fa33e","__v":0}
{"_id":{"$oid":"66d2bac092dd453bb81aa75e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"You can integrate validation and exception handling into each step of your pipeline using `Function` in Java 8. You can create a custom `Function` that includes validation and exception handling logic before applying the core transformation logic.\n\nHere’s an approach to achieve this:\n\n1. **Create a Custom Function**: Create a custom `Function` that performs validation, exception handling, and then the intended operation.\n\n2. **Pipeline Construction**: Chain these custom `Function` objects to build your pipeline.\n\n### Example: String Processing Pipeline with Validation and Exception Handling\n\nSuppose you have three steps:\n1. Convert raw string to a list of lines.\n2. Convert each line to a list of words.\n3. Count the words.\n\nHere's how you can design the pipeline with validation and exception handling:\n\n```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class PipelineExample {\n\n    public static void main(String[] args) {\n        String rawInput = \"Hello world\\nThis is a sample text\\nJava 8 is powerful\";\n\n        // Step 1: Convert raw string to a list of lines\n        Function<String, List<String>> step1 = createFunction(\n                input -> input != null && !input.trim().isEmpty(),\n                input -> Arrays.asList(input.split(\"\\\\n\")),\n                \"Input string is null or empty\"\n        );\n\n        // Step 2: Convert each line to a list of words\n        Function<List<String>, List<String>> step2 = createFunction(\n                lines -> lines != null && !lines.isEmpty(),\n                lines -> lines.stream()\n                              .flatMap(line -> Arrays.stream(line.split(\"\\\\s+\")))\n                              .collect(Collectors.toList()),\n                \"Lines list is null or empty\"\n        );\n\n        // Step 3: Count the words\n        Function<List<String>, Integer> step3 = createFunction(\n                words -> words != null && !words.isEmpty(),\n                words -> words.size(),\n                \"Words list is null or empty\"\n        );\n\n        // Build the pipeline\n        Function<String, Integer> pipeline = step1\n                                              .andThen(step2)\n                                              .andThen(step3);\n\n        try {\n            int wordCount = pipeline.apply(rawInput);\n            System.out.println(\"Word Count: \" + wordCount);\n        } catch (RuntimeException e) {\n            System.err.println(\"Pipeline error: \" + e.getMessage());\n        }\n    }\n\n    // Utility to create custom Function with validation and exception handling\n    private static <T, R> Function<T, R> createFunction(\n            Function<T, Boolean> validator,\n            Function<T, R> processor,\n            String errorMessage) {\n\n        return input -> {\n            if (validator.apply(input)) {\n                try {\n                    return processor.apply(input);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Processing error: \" + e.getMessage(), e);\n                }\n            } else {\n                throw new RuntimeException(errorMessage);\n            }\n        };\n    }\n}\n```\n\n### How It Works:\n- **Validation**: Each step checks if the input is valid (e.g., non-null, non-empty). If validation fails, a `RuntimeException` is thrown with an appropriate message.\n- **Exception Handling**: If any processing step throws an exception, it's caught and wrapped in a `RuntimeException` with a message.\n- **Pipeline Construction**: The `andThen` method is used to chain the custom `Function` instances, creating a sequential pipeline of operations.\n\nThis structure provides a flexible way to include validation and exception handling at each step of your processing pipeline.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4b59e0e1-b452-40fd-acb3-812b136c97ed","order":0,"createdDate":{"$date":"2024-08-31T06:40:00.362Z"},"updatedDate":{"$date":"2024-08-31T06:40:00.362Z"},"uniqueId":"cac083ec-ddfe-49ef-af7c-14e09cfab633","__v":0}
{"_id":{"$oid":"66d2c03692dd453bb81ac0d6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Certainly! Enhancing your pipeline to include detailed information about which step an exception occurred in is a great way to improve debugging and maintainability. You can achieve this by:\n\n1. **Creating a Custom Exception**: Define a custom exception that includes the step name.\n2. **Enhancing the `createFunction` Utility**: Modify the utility to accept a step name and use it when throwing exceptions.\n3. **Using Descriptive Step Names**: Assign meaningful names to each step to make the error messages clear.\n\n### Step-by-Step Implementation\n\n#### 1. **Define a Custom Exception**\n\nFirst, create a custom exception class that includes the step name where the error occurred.\n\n```java\n// StepException.java\npublic class StepException extends RuntimeException {\n    private String stepName;\n\n    public StepException(String stepName, String message) {\n        super(message);\n        this.stepName = stepName;\n    }\n\n    public StepException(String stepName, String message, Throwable cause) {\n        super(message, cause);\n        this.stepName = stepName;\n    }\n\n    public String getStepName() {\n        return stepName;\n    }\n\n    @Override\n    public String toString() {\n        return \"StepException in '\" + stepName + \"': \" + getMessage();\n    }\n}\n```\n\n#### 2. **Enhance the `createFunction` Utility**\n\nModify the `createFunction` method to accept a `stepName` parameter and use it when throwing `StepException`.\n\n```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class PipelineExample {\n\n    public static void main(String[] args) {\n        String rawInput = \"Hello world\\nThis is a sample text\\nJava 8 is powerful\";\n\n        // Step 1: Convert raw string to a list of lines\n        Function<String, List<String>> step1 = createFunction(\n                \"Split into Lines\",\n                input -> input != null && !input.trim().isEmpty(),\n                input -> Arrays.asList(input.split(\"\\\\n\")),\n                \"Input string is null or empty\"\n        );\n\n        // Step 2: Convert each line to a list of words\n        Function<List<String>, List<String>> step2 = createFunction(\n                \"Process Lines\",\n                lines -> lines != null && !lines.isEmpty(),\n                lines -> lines.stream()\n                              .flatMap(line -> Arrays.stream(line.split(\"\\\\s+\")))\n                              .collect(Collectors.toList()),\n                \"Lines list is null or empty\"\n        );\n\n        // Step 3: Count the words\n        Function<List<String>, Integer> step3 = createFunction(\n                \"Count Words\",\n                words -> words != null && !words.isEmpty(),\n                words -> words.size(),\n                \"Words list is null or empty\"\n        );\n\n        // Build the pipeline\n        Function<String, Integer> pipeline = step1\n                                              .andThen(step2)\n                                              .andThen(step3);\n\n        try {\n            int wordCount = pipeline.apply(rawInput);\n            System.out.println(\"Word Count: \" + wordCount);\n        } catch (StepException e) {\n            System.err.println(\"Pipeline error: \" + e);\n            // Optionally, handle specific steps differently\n            // e.g., if (e.getStepName().equals(\"Process Lines\")) { ... }\n        }\n    }\n\n    // Utility to create custom Function with validation and exception handling\n    private static <T, R> Function<T, R> createFunction(\n            String stepName,\n            Function<T, Boolean> validator,\n            Function<T, R> processor,\n            String errorMessage) {\n\n        return input -> {\n            if (validator.apply(input)) {\n                try {\n                    return processor.apply(input);\n                } catch (Exception e) {\n                    throw new StepException(stepName, \"Processing error: \" + e.getMessage(), e);\n                }\n            } else {\n                throw new StepException(stepName, errorMessage);\n            }\n        };\n    }\n}\n```\n\n#### 3. **Explanation of the Enhanced Pipeline**\n\n1. **Custom Exception (`StepException`)**:\n    - **Fields**: `stepName` to identify which step failed.\n    - **Constructors**: Allow setting the step name, message, and cause.\n    - **toString()**: Provides a clear message indicating the step where the exception occurred.\n\n2. **`createFunction` Utility**:\n    - **Parameters**:\n        - `stepName`: A descriptive name for the step.\n        - `validator`: A `Function` to validate the input.\n        - `processor`: The core processing `Function`.\n        - `errorMessage`: The message to display if validation fails.\n    - **Function Logic**:\n        - **Validation**: Checks if the input meets the criteria.\n        - **Processing**: Applies the processing function if validation passes.\n        - **Exception Handling**: Throws a `StepException` with the step name if validation fails or if processing throws an exception.\n\n3. **Pipeline Construction**:\n    - Each step is created with a unique `stepName`.\n    - The pipeline chains these steps using `andThen`.\n    - When an exception occurs, the `StepException` provides information about which step failed.\n\n4. **Handling Exceptions**:\n    - In the `main` method, catch `StepException` to handle errors gracefully.\n    - The error message includes the step name and the specific issue, aiding in debugging.\n\n#### 4. **Sample Output**\n\nLet's consider two scenarios:\n\n##### **a. Successful Execution**\n\n**Input**:\n```java\nString rawInput = \"Hello world\\nThis is a sample text\\nJava 8 is powerful\";\n```\n\n**Output**:\n```\nWord Count: 10\n```\n\n##### **b. Failure in Step 2 (e.g., Empty Lines List)**\n\n**Modified Input**:\n```java\nString rawInput = \"\";\n```\n\n**Output**:\n```\nPipeline error: StepException in 'Split into Lines': Input string is null or empty\n```\n\n##### **c. Failure in Step 3 (e.g., Empty Words List)**\n\n**Modified Step 2 to Produce Empty List**:\nSuppose step 2 processes lines but results in an empty words list.\n\n```java\nFunction<List<String>, List<String>> step2 = createFunction(\n        \"Process Lines\",\n        lines -> lines != null && !lines.isEmpty(),\n        lines -> Collections.emptyList(), // Force empty list\n        \"Lines list is null or empty\"\n);\n```\n\n**Output**:\n```\nPipeline error: StepException in 'Count Words': Words list is null or empty\n```\n\n#### 5. **Benefits of This Approach**\n\n- **Clarity**: Exceptions clearly indicate which step failed, making debugging easier.\n- **Maintainability**: Adding new steps with validation and exception handling is straightforward.\n- **Reusability**: The `createFunction` utility can be reused for any number of steps, promoting DRY (Don't Repeat Yourself) principles.\n- **Enhanced Debugging**: Detailed error messages provide immediate insight into where and why failures occur.\n\n#### 6. **Extending the Pipeline with More Steps**\n\nYou can easily extend this pipeline by adding more steps with their own validation and exception handling. For example:\n\n```java\n// Step 4: Filter out short words\nFunction<Integer, Integer> step4 = createFunction(\n        \"Filter Short Words\",\n        count -> count > 0,\n        count -> count, // Placeholder for actual processing\n        \"Word count is invalid\"\n);\n\n// Update the pipeline\nFunction<String, Integer> extendedPipeline = step1\n                                           .andThen(step2)\n                                           .andThen(step3)\n                                           .andThen(step4);\n```\n\nEnsure that each new step is appropriately validated and handled within the pipeline.\n\n### 7. **Alternative Approach: Using Wrapper Classes or Builders**\n\nFor more complex pipelines or additional features (like logging), you might consider using builder patterns or wrapper classes to manage the steps and their metadata. However, the above approach using `Function` and a custom exception is simple, effective, and leverages Java 8's functional programming capabilities.\n\n### 8. **Complete Enhanced Example**\n\nHere’s the complete enhanced example incorporating all the elements discussed:\n\n```java\n// StepException.java\npublic class StepException extends RuntimeException {\n    private String stepName;\n\n    public StepException(String stepName, String message) {\n        super(message);\n        this.stepName = stepName;\n    }\n\n    public StepException(String stepName, String message, Throwable cause) {\n        super(message, cause);\n        this.stepName = stepName;\n    }\n\n    public String getStepName() {\n        return stepName;\n    }\n\n    @Override\n    public String toString() {\n        return \"StepException in '\" + stepName + \"': \" + getMessage();\n    }\n}\n```\n\n```java\n// PipelineExample.java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class PipelineExample {\n\n    public static void main(String[] args) {\n        String rawInput = \"Hello world\\nThis is a sample text\\nJava 8 is powerful\";\n\n        // Step 1: Convert raw string to a list of lines\n        Function<String, List<String>> step1 = createFunction(\n                \"Split into Lines\",\n                input -> input != null && !input.trim().isEmpty(),\n                input -> Arrays.asList(input.split(\"\\\\n\")),\n                \"Input string is null or empty\"\n        );\n\n        // Step 2: Convert each line to a list of words\n        Function<List<String>, List<String>> step2 = createFunction(\n                \"Process Lines\",\n                lines -> lines != null && !lines.isEmpty(),\n                lines -> lines.stream()\n                              .flatMap(line -> Arrays.stream(line.split(\"\\\\s+\")))\n                              .collect(Collectors.toList()),\n                \"Lines list is null or empty\"\n        );\n\n        // Step 3: Count the words\n        Function<List<String>, Integer> step3 = createFunction(\n                \"Count Words\",\n                words -> words != null && !words.isEmpty(),\n                words -> words.size(),\n                \"Words list is null or empty\"\n        );\n\n        // Build the pipeline\n        Function<String, Integer> pipeline = step1\n                                              .andThen(step2)\n                                              .andThen(step3);\n\n        try {\n            int wordCount = pipeline.apply(rawInput);\n            System.out.println(\"Word Count: \" + wordCount);\n        } catch (StepException e) {\n            System.err.println(\"Pipeline error: \" + e);\n            // Additional error handling can be done here\n        }\n    }\n\n    // Utility to create custom Function with validation and exception handling\n    private static <T, R> Function<T, R> createFunction(\n            String stepName,\n            Function<T, Boolean> validator,\n            Function<T, R> processor,\n            String errorMessage) {\n\n        return input -> {\n            if (validator.apply(input)) {\n                try {\n                    return processor.apply(input);\n                } catch (Exception e) {\n                    throw new StepException(stepName, \"Processing error: \" + e.getMessage(), e);\n                }\n            } else {\n                throw new StepException(stepName, errorMessage);\n            }\n        };\n    }\n}\n```\n\n### 9. **Additional Enhancements**\n\nDepending on your requirements, you might consider the following enhancements:\n\n- **Logging**: Integrate logging within each step to record the progress and any issues.\n  \n  ```java\n  import java.util.logging.Logger;\n\n  private static <T, R> Function<T, R> createFunction(\n          String stepName,\n          Function<T, Boolean> validator,\n          Function<T, R> processor,\n          String errorMessage) {\n\n      Logger logger = Logger.getLogger(PipelineExample.class.getName());\n\n      return input -> {\n          logger.info(\"Starting step: \" + stepName);\n          if (validator.apply(input)) {\n              try {\n                  R result = processor.apply(input);\n                  logger.info(\"Completed step: \" + stepName);\n                  return result;\n              } catch (Exception e) {\n                  logger.severe(\"Error in step '\" + stepName + \"': \" + e.getMessage());\n                  throw new StepException(stepName, \"Processing error: \" + e.getMessage(), e);\n              }\n          } else {\n              logger.warning(\"Validation failed in step '\" + stepName + \"': \" + errorMessage);\n              throw new StepException(stepName, errorMessage);\n          }\n      };\n  }\n  ```\n\n- **Step Ordering and Dependencies**: Use more advanced techniques or frameworks if steps have complex dependencies or need conditional execution.\n\n- **Parallel Processing**: For independent steps, consider parallel processing using `CompletableFuture` or parallel streams, though this adds complexity.\n\n- **Reusable Step Definitions**: If multiple pipelines share similar steps, consider defining step templates or reusable components.\n\n### 10. **Conclusion**\n\nBy incorporating a custom exception and enhancing your `createFunction` utility, you can effectively track and report errors specific to each step in your Java 8 pipeline. This approach not only makes debugging easier but also ensures that your pipeline is robust and maintainable.\n\nFeel free to further customize the pipeline based on your specific needs, such as adding logging, metrics, or more sophisticated error handling mechanisms.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"7c6dcd09-7dfa-4dab-b10b-e1b539c01a86","order":0,"createdDate":{"$date":"2024-08-31T07:03:18.873Z"},"updatedDate":{"$date":"2024-08-31T07:03:18.873Z"},"uniqueId":"b7dee6da-8c1b-4240-b5d2-692380381ab8","__v":0}
{"_id":{"$oid":"66d48bd437a8a555874ca454"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s a comprehensive list of the main `Collectors` methods in Java, along with a brief summary of each:\n\n### 1. **`Collectors.toList()`**\n   - **Summary**: Collects elements of a stream into a `List`.\n   - **Usage**: \n     ```java\n     List<String> list = stream.collect(Collectors.toList());\n     ```\n\n### 2. **`Collectors.toSet()`**\n   - **Summary**: Collects elements of a stream into a `Set`, eliminating duplicates.\n   - **Usage**:\n     ```java\n     Set<String> set = stream.collect(Collectors.toSet());\n     ```\n\n### 3. **`Collectors.toMap(Function keyMapper, Function valueMapper)`**\n   - **Summary**: Collects elements of a stream into a `Map` using a key and value mapping function.\n   - **Usage**:\n     ```java\n     Map<Integer, String> map = stream.collect(Collectors.toMap(String::length, Function.identity()));\n     ```\n\n### 4. **`Collectors.toCollection(Supplier collectionFactory)`**\n   - **Summary**: Collects elements of a stream into a specific collection (e.g., `ArrayList`, `LinkedList`).\n   - **Usage**:\n     ```java\n     LinkedList<String> list = stream.collect(Collectors.toCollection(LinkedList::new));\n     ```\n\n### 5. **`Collectors.joining()`**\n   - **Summary**: Concatenates the elements of a stream into a single `String`.\n   - **Usage**:\n     ```java\n     String result = stream.collect(Collectors.joining());\n     ```\n\n### 6. **`Collectors.joining(CharSequence delimiter)`**\n   - **Summary**: Concatenates the elements of a stream into a single `String` with a delimiter.\n   - **Usage**:\n     ```java\n     String result = stream.collect(Collectors.joining(\", \"));\n     ```\n\n### 7. **`Collectors.joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)`**\n   - **Summary**: Concatenates the elements of a stream into a single `String` with a delimiter, prefix, and suffix.\n   - **Usage**:\n     ```java\n     String result = stream.collect(Collectors.joining(\", \", \"[\", \"]\"));\n     ```\n\n### 8. **`Collectors.summingInt(ToIntFunction mapper)`**\n   - **Summary**: Computes the sum of the elements in a stream by applying a mapping function.\n   - **Usage**:\n     ```java\n     int sum = stream.collect(Collectors.summingInt(String::length));\n     ```\n\n### 9. **`Collectors.averagingInt(ToIntFunction mapper)`**\n   - **Summary**: Computes the average of the elements in a stream by applying a mapping function.\n   - **Usage**:\n     ```java\n     double average = stream.collect(Collectors.averagingInt(String::length));\n     ```\n\n### 10. **`Collectors.counting()`**\n   - **Summary**: Counts the number of elements in a stream.\n   - **Usage**:\n     ```java\n     long count = stream.collect(Collectors.counting());\n     ```\n\n### 11. **`Collectors.groupingBy(Function classifier)`**\n   - **Summary**: Groups the elements of a stream by a classifier function and returns a `Map` where keys are the result of applying the classifier and values are `Lists` of items.\n   - **Usage**:\n     ```java\n     Map<Integer, List<String>> groupedByLength = stream.collect(Collectors.groupingBy(String::length));\n     ```\n\n### 12. **`Collectors.partitioningBy(Predicate predicate)`**\n   - **Summary**: Partitions the elements of a stream into two groups based on a predicate and returns a `Map<Boolean, List<T>>`.\n   - **Usage**:\n     ```java\n     Map<Boolean, List<String>> partitioned = stream.collect(Collectors.partitioningBy(s -> s.length() > 3));\n     ```\n\n### 13. **`Collectors.reducing(BinaryOperator accumulator)`**\n   - **Summary**: Performs a reduction on the elements of the stream, using an associative accumulation function, and returns an `Optional`.\n   - **Usage**:\n     ```java\n     Optional<String> concatenated = stream.collect(Collectors.reducing((s1, s2) -> s1 + s2));\n     ```\n\n### 14. **`Collectors.reducing(T identity, BinaryOperator accumulator)`**\n   - **Summary**: Performs a reduction on the elements of the stream, starting with an initial value (identity) and using an associative accumulation function.\n   - **Usage**:\n     ```java\n     String concatenated = stream.collect(Collectors.reducing(\"\", (s1, s2) -> s1 + s2));\n     ```\n\n### 15. **`Collectors.reducing(T identity, Function mapper, BinaryOperator accumulator)`**\n   - **Summary**: Performs a reduction on the elements of the stream using a mapping function to map the elements to a new type, then reduces them using an associative accumulation function.\n   - **Usage**:\n     ```java\n     int sumOfLengths = stream.collect(Collectors.reducing(0, String::length, Integer::sum));\n     ```\n\n### 16. **`Collectors.maxBy(Comparator comparator)`**\n   - **Summary**: Returns the maximum element of the stream according to a comparator, wrapped in an `Optional`.\n   - **Usage**:\n     ```java\n     Optional<String> max = stream.collect(Collectors.maxBy(Comparator.naturalOrder()));\n     ```\n\n### 17. **`Collectors.minBy(Comparator comparator)`**\n   - **Summary**: Returns the minimum element of the stream according to a comparator, wrapped in an `Optional`.\n   - **Usage**:\n     ```java\n     Optional<String> min = stream.collect(Collectors.minBy(Comparator.naturalOrder()));\n     ```\n\n### 18. **`Collectors.mapping(Function mapper, Collector downstream)`**\n   - **Summary**: Adapts a collector to perform an additional mapping step.\n   - **Usage**:\n     ```java\n     List<Integer> lengths = stream.collect(Collectors.mapping(String::length, Collectors.toList()));\n     ```\n\n### 19. **`Collectors.collectingAndThen(Collector downstream, Function finisher)`**\n   - **Summary**: Adapts a collector to perform an additional finishing transformation.\n   - **Usage**:\n     ```java\n     List<String> unmodifiableList = stream.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n     ```\n\n### 20. **`Collectors.flatMapping(Function mapper, Collector downstream)`** (Java 9+)\n   - **Summary**: Similar to `mapping`, but the mapping function produces a stream of values, which are flattened before being collected.\n   - **Usage**:\n     ```java\n     List<String> flatMapped = stream.collect(Collectors.flatMapping(s -> Arrays.stream(s.split(\" \")), Collectors.toList()));\n     ```\n\nThese `Collectors` methods are part of the Java Stream API and provide powerful ways to manipulate and aggregate data in a functional style.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"09c76dbd-2b03-4236-9d28-3fb62504d676","order":0,"createdDate":{"$date":"2024-09-01T15:44:20.136Z"},"updatedDate":{"$date":"2024-09-01T15:44:20.136Z"},"uniqueId":"f2f7ab7f-8cd4-4793-bfa7-a536e2eb6a1a","__v":0}
{"_id":{"$oid":"66d48d4037a8a555874cbdbe"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an example of how to use `Collectors.toList()` in Java:\n\n### Example 1: Collecting a Stream of Strings into a List\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToListExample {\n    public static void main(String[] args) {\n        // Create a Stream of Strings\n        List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\n\n        // Use Collectors.toList() to collect the Stream into a List\n        List<String> collectedNames = names.stream()\n                                           .filter(name -> name.length() > 3)  // Filter names with length > 3\n                                           .collect(Collectors.toList());      // Collect into a List\n\n        // Print the collected list\n        System.out.println(collectedNames);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We start with a list of names (`Alice`, `Bob`, `Charlie`, `David`).\n- **Step 2**: We convert this list to a stream using `stream()`.\n- **Step 3**: We filter the stream to include only names longer than 3 characters using `filter()`.\n- **Step 4**: We collect the resulting stream back into a list using `collect(Collectors.toList())`.\n- **Step 5**: The final list is printed, which in this case will output `[\"Alice\", \"Charlie\", \"David\"]`.\n\n### Example 2: Collecting a Stream of Integers into a List\n\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class CollectorsToListExample {\n    public static void main(String[] args) {\n        // Create a Stream of Integers\n        List<Integer> numbers = IntStream.range(1, 10)   // Generates a stream of numbers from 1 to 9\n                                         .boxed()        // Box int to Integer\n                                         .collect(Collectors.toList()); // Collect into a List\n\n        // Print the collected list\n        System.out.println(numbers);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We create a stream of integers from 1 to 9 using `IntStream.range(1, 10)`.\n- **Step 2**: The `boxed()` method is used to convert the primitive `int` stream into a stream of `Integer` objects.\n- **Step 3**: We collect the stream into a list using `collect(Collectors.toList())`.\n- **Step 4**: The final list is printed, which in this case will output `[1, 2, 3, 4, 5, 6, 7, 8, 9]`.\n\nThese examples demonstrate how to use `Collectors.toList()` to convert a stream into a `List`, which is one of the most common operations when working with streams in Java.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d63c08ce-0144-46a1-a160-fb26bd1f1c35","order":0,"createdDate":{"$date":"2024-09-01T15:50:24.647Z"},"updatedDate":{"$date":"2024-09-01T15:50:24.647Z"},"uniqueId":"d5d31a07-065a-43f6-a7aa-3687becc46b5","__v":0}
{"_id":{"$oid":"66d48deb37a8a555874cd745"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an example of how to use `Collectors.toSet()` in Java:\n\n### Example 1: Collecting a Stream of Strings into a Set\n\n```java\nimport java.util.Arrays;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToSetExample {\n    public static void main(String[] args) {\n        // Create a Stream of Strings\n        Set<String> namesSet = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Alice\")\n                                     .stream()\n                                     .filter(name -> name.length() > 3)  // Filter names with length > 3\n                                     .collect(Collectors.toSet());      // Collect into a Set\n\n        // Print the collected set\n        System.out.println(namesSet);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We start with a list of names (`\"Alice\"`, `\"Bob\"`, `\"Charlie\"`, `\"David\"`, `\"Alice\"`).\n- **Step 2**: We convert this list to a stream using `stream()`.\n- **Step 3**: We filter the stream to include only names longer than 3 characters using `filter()`.\n- **Step 4**: We collect the resulting stream into a `Set` using `collect(Collectors.toSet())`.\n- **Step 5**: The final set is printed. Since sets do not allow duplicates, the output will be `[\"Alice\", \"Charlie\", \"David\"]`.\n\n### Example 2: Collecting a Stream of Integers into a Set\n\n```java\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class CollectorsToSetExample {\n    public static void main(String[] args) {\n        // Create a Stream of Integers\n        Set<Integer> numbersSet = IntStream.of(1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9)\n                                           .boxed()        // Box int to Integer\n                                           .collect(Collectors.toSet()); // Collect into a Set\n\n        // Print the collected set\n        System.out.println(numbersSet);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We create a stream of integers (`1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9`) using `IntStream.of(...)`.\n- **Step 2**: The `boxed()` method is used to convert the primitive `int` stream into a stream of `Integer` objects.\n- **Step 3**: We collect the stream into a `Set` using `collect(Collectors.toSet())`.\n- **Step 4**: The final set is printed. Since sets do not allow duplicates, the output will be `[1, 2, 3, 4, 5, 6, 7, 8, 9]`.\n\n### Summary:\n`Collectors.toSet()` is useful when you want to collect elements from a stream into a `Set`, which automatically removes any duplicate elements and is not guaranteed to maintain insertion order.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"3e2f83ee-01dc-42f9-929f-7e082a3309be","order":0,"createdDate":{"$date":"2024-09-01T15:53:15.069Z"},"updatedDate":{"$date":"2024-09-01T15:53:15.069Z"},"uniqueId":"f9b847d4-ec5b-445c-99e4-ab1618348ab2","__v":0}
{"_id":{"$oid":"66d48eaa37a8a555874cf0e1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an example of how to use `Collectors.toMap(Function keyMapper, Function valueMapper)` in Java:\n\n### Example 1: Collecting a List of Strings into a Map with String Length as Key\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToMapExample {\n    public static void main(String[] args) {\n        // List of Strings\n        List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\n\n        // Collecting into a Map with the length of the name as the key and the name itself as the value\n        Map<Integer, String> namesMap = names.stream()\n                                             .collect(Collectors.toMap(\n                                                     String::length, // keyMapper: length of the name\n                                                     name -> name    // valueMapper: the name itself\n                                             ));\n\n        // Print the resulting Map\n        System.out.println(namesMap);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We have a list of names (`\"Alice\"`, `\"Bob\"`, `\"Charlie\"`, `\"David\"`).\n- **Step 2**: We convert this list to a stream using `stream()`.\n- **Step 3**: We use `Collectors.toMap()` to collect the stream into a `Map` where:\n  - The **key** is the length of each name (`String::length`).\n  - The **value** is the name itself (`name -> name`).\n- **Step 4**: The final map is printed. The output will be `{3=Bob, 5=Alice, 6=David, 7=Charlie}`.\n\n### Note:\nIn this example, the keys (name lengths) are unique. If two names had the same length, a `java.lang.IllegalStateException` would be thrown due to duplicate keys.\n\n### Example 2: Handling Duplicate Keys with a Merging Function\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToMapExample {\n    public static void main(String[] args) {\n        // List of Strings with duplicate key scenarios\n        List<String> names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\");\n\n        // Collecting into a Map with the length of the name as the key and concatenating names with the same length\n        Map<Integer, String> namesMap = names.stream()\n                                             .collect(Collectors.toMap(\n                                                     String::length,    // keyMapper: length of the name\n                                                     name -> name,      // valueMapper: the name itself\n                                                     (existing, replacement) -> existing + \", \" + replacement // merge function\n                                             ));\n\n        // Print the resulting Map\n        System.out.println(namesMap);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: The list now includes `\"Eve\"`, which has the same length as `\"Bob\"`.\n- **Step 2**: We use the `Collectors.toMap()` method again, but this time, we provide a third argument: a merge function (`(existing, replacement) -> existing + \", \" + replacement`).\n- **Step 3**: The merge function concatenates the names that have the same length.\n- **Step 4**: The final map is printed. The output will be `{3=Bob, Eve, 5=Alice, 6=David, 7=Charlie}`.\n\n### Summary:\n- **`Collectors.toMap(Function keyMapper, Function valueMapper)`**: Used to collect a stream into a `Map` where you define how to derive the keys and values.\n- **Merge Function**: Useful for handling cases where duplicate keys might arise.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2fa7a520-3bea-4021-a894-b6a335097097","order":0,"createdDate":{"$date":"2024-09-01T15:56:26.551Z"},"updatedDate":{"$date":"2024-09-01T15:56:26.551Z"},"uniqueId":"e63cc52a-a07a-45c1-b722-52a5c5fb2c17","__v":0}
{"_id":{"$oid":"66d48fbd37a8a555874d0a92"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an example of how to use `Collectors.toCollection(Supplier collectionFactory)` in Java:\n\n### Example 1: Collecting Stream Elements into a Custom Collection (e.g., LinkedList)\n\n```java\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToCollectionExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n        // Collecting into a LinkedList using toCollection\n        LinkedList<Integer> linkedList = numbers.stream()\n                                                .filter(n -> n % 2 == 0) // Filter even numbers\n                                                .collect(Collectors.toCollection(LinkedList::new));\n\n        // Print the resulting LinkedList\n        System.out.println(linkedList);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: We start with a list of integers (`1, 2, 3, 4, 5`).\n- **Step 2**: We convert this list to a stream using `stream()`.\n- **Step 3**: We filter the stream to include only even numbers.\n- **Step 4**: We use `Collectors.toCollection()` with `LinkedList::new` as the `Supplier` to collect the stream elements into a `LinkedList`.\n- **Step 5**: The final `LinkedList` is printed, containing only the even numbers. The output will be `[2, 4]`.\n\n### Example 2: Collecting Stream Elements into a TreeSet (Sorted Set)\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.TreeSet;\nimport java.util.stream.Collectors;\n\npublic class CollectorsToCollectionExample {\n    public static void main(String[] args) {\n        // List of integers with duplicates\n        List<Integer> numbers = Arrays.asList(5, 3, 1, 2, 4, 2, 3, 5);\n\n        // Collecting into a TreeSet using toCollection (TreeSet sorts the elements)\n        TreeSet<Integer> treeSet = numbers.stream()\n                                          .collect(Collectors.toCollection(TreeSet::new));\n\n        // Print the resulting TreeSet\n        System.out.println(treeSet);\n    }\n}\n```\n\n### Explanation:\n- **Step 1**: The list of integers contains duplicates (`5, 3, 1, 2, 4, 2, 3, 5`).\n- **Step 2**: We convert this list to a stream using `stream()`.\n- **Step 3**: We use `Collectors.toCollection()` with `TreeSet::new` as the `Supplier` to collect the stream elements into a `TreeSet`.\n- **Step 4**: The final `TreeSet` is printed, which automatically sorts and removes duplicates. The output will be `[1, 2, 3, 4, 5]`.\n\n### Summary:\n- **`Collectors.toCollection(Supplier collectionFactory)`**: This method allows you to collect the elements of a stream into a custom collection (e.g., `LinkedList`, `TreeSet`, `ArrayList`).\n- **`Supplier collectionFactory`**: The factory that provides the collection into which the elements should be collected. It allows flexibility in choosing the specific type of collection.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"61aad7a7-4fec-4862-887d-a605d2925c33","order":0,"createdDate":{"$date":"2024-09-01T16:01:01.41Z"},"updatedDate":{"$date":"2024-09-01T16:01:01.41Z"},"uniqueId":"aa0816b2-8c87-4f20-8ff0-e4ff074a50a0","__v":0}
{"_id":{"$oid":"66d4902237a8a555874d2458"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.joining()` method in Java is used to concatenate the elements of a stream into a single `String`. You can specify a delimiter, a prefix, and a suffix to format the resulting string.\n\n### Example Code for Using `Collectors.joining()`\n\n#### Example 1: Joining Strings with a Delimiter\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsJoiningExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n\n        // Joining with a comma delimiter\n        String result = words.stream()\n                             .collect(Collectors.joining(\", \"));\n\n        // Print the resulting string\n        System.out.println(result);\n    }\n}\n```\n\n#### Output:\n```\napple, banana, cherry\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of words.\n- **`Collectors.joining(\", \")`**: Concatenates the elements with a comma and a space as the delimiter.\n- **`result`**: The resulting string is `\"apple, banana, cherry\"`.\n\n#### Example 2: Joining Strings with Prefix and Suffix\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsJoiningExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n\n        // Joining with a delimiter, prefix, and suffix\n        String result = words.stream()\n                             .collect(Collectors.joining(\", \", \"[\", \"]\"));\n\n        // Print the resulting string\n        System.out.println(result);\n    }\n}\n```\n\n#### Output:\n```\n[apple, banana, cherry]\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of words.\n- **`Collectors.joining(\", \", \"[\", \"]\")`**: Concatenates the elements with a comma and a space as the delimiter, and surrounds the result with square brackets.\n- **`result`**: The resulting string is `\"[apple, banana, cherry]\"`.\n\n### Summary:\n- **`Collectors.joining()`**: Joins the elements of a stream into a single `String`.\n- **Delimiter**: A `String` that separates the elements in the result.\n- **Prefix** (Optional): A `String` to be added at the start of the result.\n- **Suffix** (Optional): A `String` to be added at the end of the result.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"89d389ca-cde4-4e39-82a2-3909acd1e365","order":0,"createdDate":{"$date":"2024-09-01T16:02:42.202Z"},"updatedDate":{"$date":"2024-09-01T16:02:42.202Z"},"uniqueId":"3ba0b83b-a0ec-4139-ab8c-19a3e023bc21","__v":0}
{"_id":{"$oid":"66d4910537a8a555874d3e7f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.groupingBy()` method in Java is used to group the elements of a stream by a classifier function. It returns a `Map` where the keys are the result of applying the classifier function, and the values are lists of items for each key.\n\n### Example Code for Using `Collectors.groupingBy(Function classifier)`\n\n#### Example 1: Grouping Strings by Length\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CollectorsGroupingByExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\");\n\n        // Grouping by the length of the strings\n        Map<Integer, List<String>> groupedByLength = words.stream()\n                .collect(Collectors.groupingBy(String::length));\n\n        // Print the resulting map\n        groupedByLength.forEach((length, list) -> \n            System.out.println(\"Length \" + length + \": \" + list)\n        );\n    }\n}\n```\n\n#### Output:\n```\nLength 5: [apple, grape]\nLength 6: [banana, cherry]\nLength 4: [date]\nLength 3: [fig]\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of words.\n- **`Collectors.groupingBy(String::length)`**: Groups the words by their length. The classifier function `String::length` returns the length of each string.\n- **`groupedByLength`**: The resulting map where keys are lengths of strings and values are lists of strings of that length.\n\n#### Example 2: Grouping Objects by a Property\n\nAssume you have a `Person` class with a `getAge()` method.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nclass Person {\n    private String name;\n    private int age;\n\n    // Constructor\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Getters\n    public String getName() { return name; }\n    public int getAge() { return age; }\n\n    @Override\n    public String toString() {\n        return name + \" (\" + age + \")\";\n    }\n}\n\npublic class CollectorsGroupingByExample {\n    public static void main(String[] args) {\n        // List of people\n        List<Person> people = Arrays.asList(\n                new Person(\"Alice\", 30),\n                new Person(\"Bob\", 25),\n                new Person(\"Charlie\", 30),\n                new Person(\"David\", 25),\n                new Person(\"Eve\", 35)\n        );\n\n        // Grouping by age\n        Map<Integer, List<Person>> groupedByAge = people.stream()\n                .collect(Collectors.groupingBy(Person::getAge));\n\n        // Print the resulting map\n        groupedByAge.forEach((age, list) -> \n            System.out.println(\"Age \" + age + \": \" + list)\n        );\n    }\n}\n```\n\n#### Output:\n```\nAge 30: [Alice (30), Charlie (30)]\nAge 25: [Bob (25), David (25)]\nAge 35: [Eve (35)]\n```\n\n#### Explanation:\n- **`people.stream()`**: Creates a stream from the list of `Person` objects.\n- **`Collectors.groupingBy(Person::getAge)`**: Groups the people by their age. The classifier function `Person::getAge` returns the age of each person.\n- **`groupedByAge`**: The resulting map where keys are ages and values are lists of people with that age.\n\n### Summary:\n- **`Collectors.groupingBy(Function classifier)`**: Groups the elements of a stream by the classifier function.\n- **Result**: Returns a `Map` where keys are the results of the classifier function, and values are lists of items corresponding to each key.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"66706fa8-066c-45dc-9211-01b708cc4548","order":0,"createdDate":{"$date":"2024-09-01T16:06:29.173Z"},"updatedDate":{"$date":"2024-09-01T16:06:29.173Z"},"uniqueId":"ddfb57f8-38cf-4d26-ae7c-7ac92085a276","__v":0}
{"_id":{"$oid":"66d491c737a8a555874d887b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.partitioningBy()` method is used to partition a stream into two groups based on a predicate. It returns a `Map<Boolean, List<T>>`, where the key is `true` or `false` based on whether the element matches the predicate, and the value is a list of items for that key.\n\n### Example Code for Using `Collectors.partitioningBy(Predicate predicate)`\n\n#### Example 1: Partitioning Integers into Even and Odd\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CollectorsPartitioningByExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n\n        // Partitioning by even and odd numbers\n        Map<Boolean, List<Integer>> partitioned = numbers.stream()\n                .collect(Collectors.partitioningBy(n -> n % 2 == 0));\n\n        // Print the resulting map\n        partitioned.forEach((isEven, list) -> \n            System.out.println((isEven ? \"Even: \" : \"Odd: \") + list)\n        );\n    }\n}\n```\n\n#### Output:\n```\nEven: [2, 4, 6, 8, 10]\nOdd: [1, 3, 5, 7, 9]\n```\n\n#### Explanation:\n- **`numbers.stream()`**: Creates a stream from the list of integers.\n- **`Collectors.partitioningBy(n -> n % 2 == 0)`**: Partitions the integers into even and odd based on the predicate `n % 2 == 0`.\n- **`partitioned`**: The resulting map where the key is `true` for even numbers and `false` for odd numbers, and values are lists of integers corresponding to each key.\n\n#### Example 2: Partitioning Strings by Length\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class CollectorsPartitioningByExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\");\n\n        // Partitioning by string length > 5\n        Map<Boolean, List<String>> partitioned = words.stream()\n                .collect(Collectors.partitioningBy(word -> word.length() > 5));\n\n        // Print the resulting map\n        partitioned.forEach((isLong, list) -> \n            System.out.println((isLong ? \"Long words: \" : \"Short words: \") + list)\n        );\n    }\n}\n```\n\n#### Output:\n```\nLong words: [banana, cherry, grape]\nShort words: [apple, date, fig]\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of strings.\n- **`Collectors.partitioningBy(word -> word.length() > 5)`**: Partitions the strings into those with length greater than 5 and those with length 5 or less based on the predicate `word.length() > 5`.\n- **`partitioned`**: The resulting map where the key is `true` for strings longer than 5 characters and `false` for strings 5 characters or shorter, and values are lists of strings corresponding to each key.\n\n### Summary:\n- **`Collectors.partitioningBy(Predicate predicate)`**: Partitions the elements of a stream into two groups based on the predicate.\n- **Result**: Returns a `Map<Boolean, List<T>>` where the key is `true` or `false` based on whether the element matches the predicate, and the value is a list of items corresponding to each key.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"29f1170c-702e-40f3-abc7-0fc35c452171","order":0,"createdDate":{"$date":"2024-09-01T16:09:43.705Z"},"updatedDate":{"$date":"2024-09-01T16:09:43.705Z"},"uniqueId":"cf91a323-a33a-4f23-9094-8158a390cd31","__v":0}
{"_id":{"$oid":"66d4927437a8a555874da280"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.reducing()` method is used to perform a reduction on the elements of a stream using an associative accumulation function and return an `Optional` that contains the result. It is a terminal operation that combines the elements of the stream into a single result.\n\n### Example Code for Using `Collectors.reducing(BinaryOperator accumulator)`\n\n#### Example 1: Sum of Integers\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n        // Reduce to sum all integers\n        Optional<Integer> sum = numbers.stream()\n                .collect(Collectors.reducing((a, b) -> a + b));\n\n        // Print the result\n        System.out.println(\"Sum: \" + sum.orElse(0));\n    }\n}\n```\n\n#### Output:\n```\nSum: 15\n```\n\n#### Explanation:\n- **`numbers.stream()`**: Creates a stream from the list of integers.\n- **`Collectors.reducing((a, b) -> a + b)`**: Uses a binary operator `(a, b) -> a + b` to accumulate the sum of all integers in the stream.\n- **`Optional<Integer>`**: Since the reduction may result in an empty stream, it returns an `Optional` which contains the sum or is empty if the stream was empty.\n- **`sum.orElse(0)`**: Provides a default value of `0` if the `Optional` is empty.\n\n#### Example 2: Concatenate Strings\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"Hello\", \"world\", \"from\", \"Java\");\n\n        // Reduce to concatenate all strings with a space separator\n        Optional<String> concatenated = words.stream()\n                .collect(Collectors.reducing((a, b) -> a + \" \" + b));\n\n        // Print the result\n        System.out.println(\"Concatenated String: \" + concatenated.orElse(\"\"));\n    }\n}\n```\n\n#### Output:\n```\nConcatenated String: Hello world from Java\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of strings.\n- **`Collectors.reducing((a, b) -> a + \" \" + b)`**: Uses a binary operator `(a, b) -> a + \" \" + b` to concatenate all strings in the stream with a space separator.\n- **`Optional<String>`**: Contains the concatenated result or is empty if the stream was empty.\n- **`concatenated.orElse(\"\")`**: Provides a default value of an empty string if the `Optional` is empty.\n\n#### Example 3: Finding the Maximum Value\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 4, 2, 8, 5);\n\n        // Reduce to find the maximum value\n        Optional<Integer> max = numbers.stream()\n                .collect(Collectors.reducing((a, b) -> a > b ? a : b));\n\n        // Print the result\n        System.out.println(\"Max Value: \" + max.orElse(Integer.MIN_VALUE));\n    }\n}\n```\n\n#### Output:\n```\nMax Value: 8\n```\n\n#### Explanation:\n- **`numbers.stream()`**: Creates a stream from the list of integers.\n- **`Collectors.reducing((a, b) -> a > b ? a : b)`**: Uses a binary operator `(a, b) -> a > b ? a : b` to find the maximum value in the stream.\n- **`Optional<Integer>`**: Contains the maximum value or is empty if the stream was empty.\n- **`max.orElse(Integer.MIN_VALUE)`**: Provides a default value of `Integer.MIN_VALUE` if the `Optional` is empty.\n\n### Summary:\n- **`Collectors.reducing(BinaryOperator accumulator)`**: Performs a reduction on the elements of a stream using an associative accumulation function and returns an `Optional` containing the result.\n- **Result**: An `Optional` that contains the reduced result, or is empty if the stream was empty.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"0f5c1d15-678b-4044-ba63-eeee32403242","order":0,"createdDate":{"$date":"2024-09-01T16:12:36.209Z"},"updatedDate":{"$date":"2024-09-01T16:12:36.209Z"},"uniqueId":"bfddc958-95a4-4f1a-840f-c700e848f241","__v":0}
{"_id":{"$oid":"66d492e137a8a555874dbd0a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.reducing(T identity, BinaryOperator accumulator)` method is an extension of the `reducing` collector that allows you to specify an identity value. The identity value serves as the starting point for the reduction and is returned if the stream is empty. This version of `reducing` is useful when you need a default value to be present even if the stream has no elements.\n\n### Example Code for Using `Collectors.reducing(T identity, BinaryOperator accumulator)`\n\n#### Example 1: Sum of Integers with Default Value\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n        // Reduce to sum all integers with identity value 0\n        int sum = numbers.stream()\n                .collect(Collectors.reducing(0, (a, b) -> a + b));\n\n        // Print the result\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n```\n\n#### Output:\n```\nSum: 15\n```\n\n#### Explanation:\n- **`numbers.stream()`**: Creates a stream from the list of integers.\n- **`Collectors.reducing(0, (a, b) -> a + b)`**: Uses `0` as the identity value and `(a, b) -> a + b` as the binary operator to accumulate the sum of all integers.\n- **`int sum`**: Since the stream is not empty, `sum` will be `15`.\n\n#### Example 2: Concatenate Strings with Default Value\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"Hello\", \"world\", \"from\", \"Java\");\n\n        // Reduce to concatenate all strings with a space separator, starting with an empty string\n        String concatenated = words.stream()\n                .collect(Collectors.reducing(\"\", (a, b) -> a + \" \" + b));\n\n        // Print the result\n        System.out.println(\"Concatenated String: \" + concatenated);\n    }\n}\n```\n\n#### Output:\n```\nConcatenated String: Hello world from Java\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of strings.\n- **`Collectors.reducing(\"\", (a, b) -> a + \" \" + b)`**: Uses an empty string `\"\"` as the identity value and `(a, b) -> a + \" \" + b` as the binary operator to concatenate all strings with a space separator.\n- **`String concatenated`**: Contains the concatenated result.\n\n#### Example 3: Finding Maximum Value with Default Value\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of integers\n        List<Integer> numbers = Arrays.asList(1, 4, 2, 8, 5);\n\n        // Reduce to find the maximum value with identity value Integer.MIN_VALUE\n        int max = numbers.stream()\n                .collect(Collectors.reducing(Integer.MIN_VALUE, (a, b) -> a > b ? a : b));\n\n        // Print the result\n        System.out.println(\"Max Value: \" + max);\n    }\n}\n```\n\n#### Output:\n```\nMax Value: 8\n```\n\n#### Explanation:\n- **`numbers.stream()`**: Creates a stream from the list of integers.\n- **`Collectors.reducing(Integer.MIN_VALUE, (a, b) -> a > b ? a : b)`**: Uses `Integer.MIN_VALUE` as the identity value and `(a, b) -> a > b ? a : b` as the binary operator to find the maximum value in the stream.\n- **`int max`**: Contains the maximum value, which is `8`.\n\n### Summary:\n- **`Collectors.reducing(T identity, BinaryOperator accumulator)`**: Performs a reduction on the elements of a stream using an associative accumulation function and returns the result. The identity value serves as the initial value for the reduction and is returned if the stream is empty.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"3e90124b-e2c7-4e80-bb65-0f5778c44f26","order":0,"createdDate":{"$date":"2024-09-01T16:14:25.309Z"},"updatedDate":{"$date":"2024-09-01T16:14:25.309Z"},"uniqueId":"8845022d-a89b-4b56-abaa-b6858bb27a60","__v":0}
{"_id":{"$oid":"66d4935b37a8a555874dd739"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `Collectors.reducing(T identity, Function mapper, BinaryOperator accumulator)` method is a more advanced form of reduction in Java streams. It first applies a `Function` to each element of the stream, and then uses a `BinaryOperator` to combine the results, starting with the provided identity value.\n\nHere's a breakdown of the parameters:\n- **`T identity`**: The identity value for the reduction operation.\n- **`Function mapper`**: A function that transforms each element of the stream before applying the reduction.\n- **`BinaryOperator accumulator`**: An accumulation function that combines the results.\n\n### Example Code for Using `Collectors.reducing(T identity, Function mapper, BinaryOperator accumulator)`\n\n#### Example 1: Sum of Lengths of Strings\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"Hello\", \"world\", \"from\", \"Java\");\n\n        // Reduce to sum the lengths of all strings, with an initial value of 0\n        int totalLength = words.stream()\n                .collect(Collectors.reducing(\n                        0,                                  // Initial value\n                        String::length,                     // Function to map each element to its length\n                        Integer::sum                        // Accumulator to sum up the lengths\n                ));\n\n        // Print the result\n        System.out.println(\"Total Length: \" + totalLength);\n    }\n}\n```\n\n#### Output:\n```\nTotal Length: 17\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of strings.\n- **`Collectors.reducing(0, String::length, Integer::sum)`**:\n  - **`0`**: Identity value (initial sum of lengths).\n  - **`String::length`**: Maps each string to its length.\n  - **`Integer::sum`**: Sums up all the lengths.\n- **`int totalLength`**: Contains the total length of all strings.\n\n#### Example 2: Concatenate All Strings with Prefix and Suffix\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CollectorsReducingExample {\n    public static void main(String[] args) {\n        // List of strings\n        List<String> words = Arrays.asList(\"Hello\", \"world\", \"from\", \"Java\");\n\n        // Reduce to concatenate all strings with a prefix \"Start: \" and suffix \" :End\", with an initial empty string\n        String concatenated = words.stream()\n                .collect(Collectors.reducing(\n                        \"\",                              // Initial value (empty string)\n                        word -> \"Start: \" + word + \" :End\", // Function to map each element to a formatted string\n                        (a, b) -> a + \" \" + b            // Accumulator to concatenate all strings\n                ));\n\n        // Print the result\n        System.out.println(\"Concatenated String: \" + concatenated);\n    }\n}\n```\n\n#### Output:\n```\nConcatenated String: Start: Hello :End Start: world :End Start: from :End Start: Java :End\n```\n\n#### Explanation:\n- **`words.stream()`**: Creates a stream from the list of strings.\n- **`Collectors.reducing(\"\", word -> \"Start: \" + word + \" :End\", (a, b) -> a + \" \" + b)`**:\n  - **`\"\"`**: Identity value (initial empty string).\n  - **`word -> \"Start: \" + word + \" :End\"`**: Maps each string to a formatted version with a prefix and suffix.\n  - **`(a, b) -> a + \" \" + b`**: Concatenates all the formatted strings.\n- **`String concatenated`**: Contains the concatenated result.\n\n### Summary:\n- **`Collectors.reducing(T identity, Function mapper, BinaryOperator accumulator)`**: Performs a reduction on the elements of a stream by first mapping each element to a new form using the `Function`, and then combining those forms using the `BinaryOperator`, starting with the provided identity value.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b2cfd8bf-39f1-42a6-b498-f12f89b6a8d5","order":0,"createdDate":{"$date":"2024-09-01T16:16:27.556Z"},"updatedDate":{"$date":"2024-09-01T16:16:27.556Z"},"uniqueId":"7ef4ab79-59d5-4f5b-a76a-ca390eed05ca","__v":0}
{"_id":{"$oid":"66d550d96b270af49c197755"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java is a high-level, object-oriented programming language and computing platform first released by Sun Microsystems in 1995. It is widely used for building enterprise-scale applications, mobile applications (particularly Android apps), web applications, and more. Here are some key aspects of Java:\n\n### Key Features of Java\n1. **Platform Independence**: \n   - Java is designed to be platform-independent at both the source and binary levels. This means that Java programs can be written once and run anywhere (`Write Once, Run Anywhere` - WORA). The Java Virtual Machine (JVM) abstracts the underlying hardware, making Java programs portable across different operating systems.\n\n2. **Object-Oriented**: \n   - Java is inherently object-oriented, which means it emphasizes the use of objects and classes. Concepts like inheritance, encapsulation, polymorphism, and abstraction are fundamental to Java programming.\n\n3. **Simple and Familiar**:\n   - Java's syntax is designed to be easy to understand and use, particularly for those familiar with C or C++. It eliminates many of the complex and error-prone features of C++, such as pointers and multiple inheritance.\n\n4. **Robust and Secure**:\n   - Java emphasizes early error checking and runtime checking, making programs more robust and less prone to crashes. It also has built-in security features that help protect against malicious code.\n\n5. **Multithreading**:\n   - Java has built-in support for multithreading, which allows multiple threads to run concurrently within a program, making it easier to build responsive and high-performance applications.\n\n6. **Automatic Memory Management**:\n   - Java provides automatic memory management through garbage collection, which helps manage the allocation and deallocation of memory, reducing the chances of memory leaks and other related issues.\n\n7. **Rich Standard Library**:\n   - Java comes with a comprehensive standard library (Java Standard Edition - Java SE) that provides a wide range of classes and methods for tasks like data structures, networking, I/O operations, and more.\n\n8. **Community and Ecosystem**:\n   - Java has a large and active developer community, which has led to the creation of a vast ecosystem of tools, libraries, frameworks, and applications.\n\n### Java Editions\nJava is available in several editions, each designed to cater to different types of development needs:\n- **Java Standard Edition (Java SE)**: The core Java platform for general-purpose development.\n- **Java Enterprise Edition (Java EE)**: Designed for large-scale, distributed enterprise applications.\n- **Java Micro Edition (Java ME)**: Used for developing applications for mobile devices and embedded systems.\n\n### Use Cases\nJava is used in a wide variety of domains, including:\n- **Web Development**: Server-side applications using frameworks like Spring and Hibernate.\n- **Mobile Development**: Android applications.\n- **Enterprise Applications**: Large-scale systems for businesses.\n- **Scientific Applications**: Applications requiring high performance and reliability.\n- **Big Data Technologies**: Java is used in big data frameworks like Hadoop.\n\n### Example Code\nHere’s a simple example of a \"Hello, World!\" program in Java:\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nThis program defines a class called `HelloWorld` with a `main` method, which is the entry point of any Java application. The `System.out.println` statement prints \"Hello, World!\" to the console.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"840ca679-5fd7-4dac-a2ae-4c5b8bda7d4d","order":0,"createdDate":{"$date":"2024-09-02T05:44:57.487Z"},"updatedDate":{"$date":"2024-09-02T05:44:57.487Z"},"uniqueId":"b9694e0c-2110-407e-809b-b235c2267689","__v":0}
{"_id":{"$oid":"66d6e62b3438724d059d3d6e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kubernetes\n    Core Concepts\n        Pod\tThe smallest and simplest Kubernetes object that represents a single instance of a running process in a cluster, usually containing one or more containers.\n        Namespace\tA virtual cluster within a Kubernetes cluster that provides a mechanism to divide cluster resources between users.\n        Node\tA worker machine in Kubernetes that runs containerized applications, managed by the control plane.\n        Cluster\tA set of nodes that run containerized applications managed by Kubernetes.\n        \n    Workloads\n        Deployment\tA controller in Kubernetes that manages the lifecycle of Pods, ensuring the desired number of replicas are running.\n        StatefulSet\tA controller that manages stateful applications by ensuring each Pod has a persistent identity and storage.\n        DaemonSet\tA controller that ensures a copy of a Pod runs on all or some nodes in the cluster.\n        Job\tA controller that creates one or more Pods to carry out a task and then stops them once the task is complete.\n        CronJob\tA scheduled Job that runs at specified intervals, similar to cron in Unix/Linux systems.\n\n    Services and Networking\n        Service\tAn abstraction that defines a logical set of Pods and a policy by which to access them, often via a cluster-internal IP.\n        Ingress\tAn API object that manages external access to services in a cluster, typically HTTP/HTTPS, with load balancing, SSL termination, and name-based virtual hosting.\n        Network Policy\tA specification of how groups of Pods are allowed to communicate with each other and other network endpoints.\n        Endpoint\tA network endpoint that is associated with a Service, usually pointing to one or more Pods.\n\n    Configuration and Secrets\n        ConfigMap\tA key-value store used to store configuration data in Kubernetes that can be consumed by Pods.\n        Secret\tA way to store and manage sensitive information like passwords, OAuth tokens, and SSH keys in Kubernetes.\n        Volume\tA directory accessible to containers in a Pod that is used to store data persistently or share data between containers.\n        Persistent Volume (PV)\tA storage resource in Kubernetes that represents a piece of storage in the cluster, provisioned by an administrator or dynamically through storage classes.\n\n    Scheduling\n        Scheduler\tThe Kubernetes component responsible for assigning Pods to Nodes based on resource requirements, constraints, and availability.\n        Affinity and Anti-Affinity\tRules that influence pod placement based on attributes like node labels or other pod locations.\n        Taints and Tolerations\tMechanisms used to control how Pods are scheduled onto Nodes by allowing or denying Pods based on Node conditions.\n        Horizontal Pod Autoscaler\tA controller that automatically adjusts the number of Pods in a deployment or replica set based on observed CPU/memory usage or custom metrics.\n\n    Security\n        Role-Based Access Control (RBAC)\tA method for regulating access to resources in Kubernetes based on the roles of individual users or service accounts.\n        Service Account\tAn account used to provide an identity for Pods running in a Kubernetes cluster, enabling them to authenticate to the API server.\n        Pod Security Policy (PSP)\tDefines a set of conditions that a Pod must meet in order to be accepted into the system, used to enforce security standards.\n        Network Policy\tA set of rules that define how groups of Pods are allowed to communicate with each other and other network endpoints.\n\n    Monitoring and Logging\n        Prometheus\tA popular open-source monitoring and alerting toolkit, commonly used in Kubernetes clusters for metrics collection and alerting.\n        Fluentd\tA log aggregator that collects, parses, and stores log data, often used in Kubernetes environments to manage log data from Pods.\n        Kubernetes Dashboard\tA web-based user interface for monitoring and managing Kubernetes clusters.\n        Metrics Server\tA cluster-wide aggregator of resource usage data, commonly used by Kubernetes components like the Horizontal Pod Autoscaler.\n\n    Advanced Topics\n        Custom Resource Definition (CRD)\tAllows users to create their own resources (custom objects) in Kubernetes, extending the Kubernetes API.\n        Operator\tA method of packaging, deploying, and managing a Kubernetes application, extending the Kubernetes API with custom controllers for managing complex applications.\n        Helm\tA package manager for Kubernetes that helps in defining, installing, and managing Kubernetes applications through Helm charts.\n        Persistent Volume Claim (PVC)\tA request for storage by a user, which binds to a Persistent Volume (PV) to provide storage to a Pod.\n        Etcd\tA distributed key-value store used as Kubernetes' backing store for all cluster data.\n        Service Mesh\tA dedicated infrastructure layer for handling service-to-service communication within a Kubernetes cluster, providing features like load balancing, service discovery, and observability.\n        Istio\tA popular service mesh for Kubernetes that provides advanced routing, traffic management, and observability for microservices.\n        Kubelet\tA Kubernetes agent that runs on each node, ensuring containers are running in a Pod.\n\n","textOutputType":"skeleton","textInputType":"TextArea"},"rating":2,"linkedQuestionsId":"cbabf956-5f86-4220-9415-70c7653645f5","order":0,"createdDate":{"$date":"2024-09-03T10:34:19.458Z"},"updatedDate":{"$date":"2024-09-03T10:35:36.984Z"},"uniqueId":"3c5cc7be-5a51-440d-acd8-084273840dda","__v":0}
{"_id":{"$oid":"66d6e6fb3438724d059d73a4"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Kubernetes is an open-source platform designed to automate the deployment, scaling, and management of containerized applications. It was originally developed by Google and is now maintained by the Cloud Native Computing Foundation (CNCF).\n\n### Key Concepts of Kubernetes:\n\n1. **Containers**: Kubernetes orchestrates containers, which are lightweight, portable, and consistent environments for applications.\n\n2. **Pods**: The smallest deployable unit in Kubernetes, a Pod, can contain one or more containers that share the same network namespace and storage.\n\n3. **Nodes**: A Node is a machine, either physical or virtual, that runs Pods. A Kubernetes cluster typically has multiple nodes.\n\n4. **Clusters**: A Kubernetes cluster is a set of nodes that are managed by Kubernetes. The cluster's state is maintained by a control plane.\n\n5. **Services**: A Service in Kubernetes is an abstraction that defines a logical set of Pods and a policy by which to access them. Services are used to expose an application running on a set of Pods.\n\n6. **Deployments**: Deployments describe the desired state of the application, such as which images to use for the containers, the number of replicas, and update strategies. Kubernetes automatically manages the necessary changes to reach the desired state.\n\n7. **Namespaces**: Namespaces are used to divide cluster resources between multiple users or teams.\n\n8. **Ingress**: Ingress manages external access to the services in a cluster, typically HTTP.\n\n9. **ConfigMaps and Secrets**: ConfigMaps and Secrets are used to decouple configuration artifacts from container images to keep the images portable.\n\n### Benefits of Kubernetes:\n\n- **Scalability**: Automatically scale your applications up or down based on demand.\n- **Self-Healing**: Automatically restarts failed containers, replaces and reschedules containers when nodes die, and kills containers that don’t respond to your user-defined health checks.\n- **Load Balancing**: Distributes network traffic so that the application is highly available.\n- **Automated Rollouts and Rollbacks**: Kubernetes allows you to describe the desired state of your applications and it will change the actual state to the desired state at a controlled rate.\n- **Environment Consistency**: Kubernetes provides a consistent environment for development, testing, and production.\n\nKubernetes has become the de facto standard for container orchestration, providing a powerful platform to manage microservices-based applications in a production environment.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b4992cd3-eb6f-4861-bab2-8f52e58bfc85","order":0,"createdDate":{"$date":"2024-09-03T10:37:47.296Z"},"updatedDate":{"$date":"2024-09-03T10:37:47.296Z"},"uniqueId":"d91728cd-6ecb-477d-924c-8f64011495a0","__v":0}
{"_id":{"$oid":"66d7051d3438724d059ec684"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"A **database** is an organized collection of data that is stored and accessed electronically. Databases are designed to efficiently store, manage, and retrieve large amounts of information, enabling users to quickly find and manipulate data. They are used in a wide range of applications, from simple systems like contact lists on a phone to complex systems like banking systems, social media platforms, and enterprise resource planning (ERP) systems.\n\n### Key Components of a Database:\n- **Data**: The actual information stored, which could be anything from numbers, text, and dates to complex structures like images or documents.\n- **Database Management System (DBMS)**: Software that interacts with the database, allowing users to create, read, update, and delete data. Examples include MySQL, PostgreSQL, Oracle, and Microsoft SQL Server.\n- **Schema**: The structure of the database, defining how data is organized and how relationships between data are handled. It includes definitions of tables, fields, and data types.\n- **Tables**: In relational databases, data is organized into tables, which are made up of rows (records) and columns (fields).\n- **Queries**: Commands or instructions used to retrieve or manipulate data within the database, often written in SQL (Structured Query Language).\n\n### Types of Databases:\n- **Relational Databases**: Data is organized into tables with predefined relationships. Examples: MySQL, PostgreSQL, Oracle.\n- **NoSQL Databases**: Designed to handle unstructured data, often in a more flexible, scalable manner. Examples: MongoDB, Cassandra, Redis.\n- **In-Memory Databases**: Stores data in memory to enable fast access and processing. Examples: Redis, Memcached.\n- **Graph Databases**: Designed to store data in a graph structure, with nodes, edges, and properties. Examples: Neo4j, Amazon Neptune.\n\n### Common Uses:\n- **Business Applications**: Customer relationship management (CRM), inventory management, and enterprise resource planning (ERP) systems.\n- **Web Applications**: Storing user data, content, and transaction information for websites and mobile apps.\n- **Analytics**: Storing and analyzing large datasets to extract business insights.\n- **Cloud Storage**: Databases hosted on cloud platforms for scalability and availability. Examples: Amazon RDS, Google Cloud Spanner.\n\nIn essence, a database is a critical component of modern software applications, enabling the efficient storage, retrieval, and management of data.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"7f26755e-e70f-4d95-ae07-72ac0e26661a","order":0,"createdDate":{"$date":"2024-09-03T12:46:21.437Z"},"updatedDate":{"$date":"2024-09-03T12:47:19.005Z"},"uniqueId":"7bd1db98-ac66-4eac-b0b3-0fa81e4f30c3","__v":0}
{"_id":{"$oid":"66d706553438724d059efcaa"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**Relational databases** are a type of database that organizes data into tables, which are structured as rows and columns. Each table, also known as a relation, represents a collection of related data, with each row in the table representing a single record and each column representing a data field or attribute.\n\n### Key Characteristics of Relational Databases:\n1. **Tables**:\n   - Data is stored in tables, where each table is made up of rows (records) and columns (fields).\n   - Each table has a unique name and represents an entity, such as \"Customers,\" \"Orders,\" or \"Products.\"\n\n2. **Schema**:\n   - The structure of the database, including the tables, columns, and relationships between tables, is defined by a schema.\n   - The schema enforces data integrity and defines how data is organized and related.\n\n3. **Primary Keys**:\n   - Each table typically has a primary key, a unique identifier for each row in the table. This ensures that each record can be uniquely identified.\n   - Example: In a \"Customers\" table, the \"CustomerID\" column might serve as the primary key.\n\n4. **Foreign Keys**:\n   - A foreign key is a column (or a set of columns) that creates a link between two tables.\n   - It refers to the primary key of another table, establishing a relationship between the tables.\n   - Example: An \"Orders\" table might have a \"CustomerID\" column that is a foreign key linking to the \"CustomerID\" in the \"Customers\" table.\n\n5. **Relationships**:\n   - **One-to-One**: A row in Table A is linked to one and only one row in Table B.\n   - **One-to-Many**: A row in Table A is linked to multiple rows in Table B.\n   - **Many-to-Many**: Rows in Table A are linked to multiple rows in Table B, often managed through a junction table.\n\n6. **Normalization**:\n   - The process of organizing the data in a database to reduce redundancy and improve data integrity.\n   - Involves dividing large tables into smaller, related tables and defining relationships between them.\n\n7. **SQL (Structured Query Language)**:\n   - The standard language used to interact with relational databases.\n   - SQL is used to perform operations like creating tables, inserting data, querying data, updating records, and deleting data.\n\n### Common Relational Database Management Systems (RDBMS):\n- **MySQL**: Open-source RDBMS commonly used in web applications.\n- **PostgreSQL**: Advanced open-source RDBMS known for its extensibility and standards compliance.\n- **Oracle Database**: Commercial RDBMS widely used in enterprise applications.\n- **Microsoft SQL Server**: RDBMS developed by Microsoft, often used in corporate environments.\n- **SQLite**: Lightweight, file-based RDBMS often used in mobile applications.\n\n### Advantages of Relational Databases:\n- **Data Integrity**: Relational databases enforce data integrity through constraints, such as primary keys and foreign keys.\n- **Flexibility**: Complex queries and transactions can be performed using SQL.\n- **Consistency**: ACID (Atomicity, Consistency, Isolation, Durability) properties ensure reliable transactions.\n- **Scalability**: Relational databases can handle large amounts of data and complex relationships.\n\n### Common Use Cases:\n- **Enterprise Systems**: Managing data for businesses, such as customer information, sales data, and inventory.\n- **Financial Systems**: Tracking transactions, accounts, and customer data.\n- **Web Applications**: Storing user data, content, and transaction information for dynamic websites and applications.\n- **Data Warehousing**: Aggregating and analyzing large amounts of structured data.\n\nRelational databases are the backbone of many applications, providing a reliable, structured way to store, retrieve, and manage data.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e1820e23-92fe-4b24-86e7-82f059a395e8","order":0,"createdDate":{"$date":"2024-09-03T12:51:33.412Z"},"updatedDate":{"$date":"2024-09-03T12:51:33.412Z"},"uniqueId":"a795f2f9-2622-462d-8d59-bb60ca16def4","__v":0}
{"_id":{"$oid":"66d706953438724d059f0a37"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"**NoSQL databases** are a category of database management systems that provide a flexible approach to data storage, unlike traditional relational databases (SQL databases) that use structured tables and predefined schemas. NoSQL stands for \"Not Only SQL\" and is designed to handle unstructured, semi-structured, or structured data with greater flexibility, scalability, and performance.\n\n### Key Characteristics of NoSQL Databases:\n\n1. **Schema Flexibility**:\n   - NoSQL databases do not require a fixed schema, allowing the structure of data to evolve over time without needing to define or alter a schema beforehand.\n   - This is particularly useful for handling diverse data types and rapidly changing data requirements.\n\n2. **Horizontal Scalability**:\n   - NoSQL databases are designed to scale out horizontally by distributing data across multiple servers or nodes, which enhances performance and enables them to handle large amounts of data and high traffic.\n   - This contrasts with traditional relational databases, which typically scale vertically by adding more resources to a single server.\n\n3. **Variety of Data Models**:\n   - NoSQL databases support various data models, each suited to different types of applications:\n     - **Document Stores**: Store data as documents, typically in JSON, BSON, or XML format. Examples: MongoDB, CouchDB.\n     - **Key-Value Stores**: Data is stored as key-value pairs, where a unique key is associated with a value. Examples: Redis, DynamoDB.\n     - **Column-Family Stores**: Data is stored in columns rather than rows, allowing for efficient read and write operations for specific columns. Examples: Apache Cassandra, HBase.\n     - **Graph Databases**: Store data in graph structures with nodes, edges, and properties, enabling complex relationships between data points. Examples: Neo4j, Amazon Neptune.\n\n4. **Eventual Consistency**:\n   - Many NoSQL databases operate on the principle of eventual consistency, meaning that data updates will propagate through the system over time, and eventually, all nodes will reflect the update.\n   - This approach prioritizes availability and partition tolerance (CAP theorem) over immediate consistency.\n\n5. **High Performance**:\n   - NoSQL databases are optimized for high performance, especially for read-heavy or write-heavy workloads, making them suitable for applications with large volumes of data and high throughput requirements.\n\n6. **Distributed Architecture**:\n   - NoSQL databases are typically designed with a distributed architecture, meaning data is spread across multiple nodes or servers. This enhances fault tolerance and ensures high availability.\n\n### Types of NoSQL Databases:\n\n1. **Document Stores**:\n   - Store data in document formats like JSON or BSON.\n   - Ideal for content management systems, catalogs, and applications that require flexible data models.\n   - Examples: MongoDB, CouchDB.\n\n2. **Key-Value Stores**:\n   - Store data as simple key-value pairs, where the key is a unique identifier and the value is the associated data.\n   - Suitable for caching, session management, and real-time data processing.\n   - Examples: Redis, DynamoDB, Riak.\n\n3. **Column-Family Stores**:\n   - Store data in columns rather than rows, allowing for efficient queries on specific columns.\n   - Used in applications that require high write and read performance, such as analytics platforms.\n   - Examples: Apache Cassandra, HBase.\n\n4. **Graph Databases**:\n   - Store data in graph structures with nodes (entities) and edges (relationships).\n   - Ideal for social networks, recommendation engines, and applications that require complex relationship management.\n   - Examples: Neo4j, Amazon Neptune.\n\n### Advantages of NoSQL Databases:\n\n- **Flexibility**: Can handle unstructured and semi-structured data without a predefined schema.\n- **Scalability**: Easily scales horizontally to handle large amounts of data and high traffic.\n- **Performance**: Optimized for high-speed read and write operations, making them suitable for real-time applications.\n- **Handling Big Data**: Capable of managing large datasets that are often beyond the capabilities of traditional relational databases.\n- **Simplified Data Models**: Different NoSQL databases offer data models tailored to specific use cases, reducing complexity.\n\n### Common Use Cases:\n\n- **Big Data Applications**: Handling massive volumes of data in real-time, such as in IoT, social media, and analytics platforms.\n- **Content Management Systems**: Storing and retrieving documents, images, and other unstructured data.\n- **E-commerce**: Managing product catalogs, user sessions, and shopping carts with high flexibility and performance.\n- **Social Networks**: Managing complex relationships between users and content, such as in recommendation engines or social graphs.\n- **Real-Time Analytics**: Processing and analyzing data in real-time, such as in financial trading platforms or monitoring systems.\n\nNoSQL databases are increasingly popular for modern applications that require scalability, flexibility, and high performance. They are well-suited for use cases where traditional relational databases may struggle to meet the demands of dynamic data and high throughput.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"34a5a971-82d8-49f4-9693-89eaa85b72a1","order":0,"createdDate":{"$date":"2024-09-03T12:52:37.428Z"},"updatedDate":{"$date":"2024-09-03T12:52:37.428Z"},"uniqueId":"da91b7e2-fa6e-4d64-905d-c052ccba5fb5","__v":0}
{"_id":{"$oid":"66d719c9560fba0d1f1c08ab"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Choosing between a **Relational Database Management System (RDBMS)** and a **NoSQL database** like MongoDB depends on several factors related to the specific needs of your application. Below is a guide to help determine when to use an RDBMS and when to use a NoSQL database like MongoDB.\n\n### When to Use an RDBMS:\n\n1. **Structured Data with a Fixed Schema**:\n   - If your data is highly structured and you have well-defined relationships between entities, an RDBMS is a good choice. Relational databases enforce a schema, which ensures data integrity and consistency.\n   - Example: Banking systems where transactions, accounts, and customers are tightly interrelated.\n\n2. **Complex Queries and Transactions**:\n   - RDBMSs are optimized for complex queries involving joins, aggregations, and other SQL operations. They also support ACID (Atomicity, Consistency, Isolation, Durability) transactions, making them ideal for applications that require high levels of consistency and data integrity.\n   - Example: Financial applications that require precise handling of transactions.\n\n3. **Data Integrity and Consistency**:\n   - If your application demands strict data integrity and consistency, RDBMSs provide robust mechanisms to ensure that data is accurate and consistent at all times.\n   - Example: Inventory management systems where the accuracy of stock levels is critical.\n\n4. **Mature Tools and Support**:\n   - RDBMSs have been around for decades and have a wide range of mature tools, support, and community knowledge available. If your team is more familiar with SQL and relational databases, this might be a better option.\n   - Example: Enterprise systems with established workflows around traditional database tools.\n\n5. **Low Data Volume**:\n   - If your application handles a relatively small volume of data that fits well into tables with clear relationships, an RDBMS is often sufficient.\n   - Example: Small to medium-sized applications with manageable data sets.\n\n### When to Use a NoSQL Database like MongoDB:\n\n1. **Unstructured or Semi-Structured Data**:\n   - MongoDB is well-suited for applications that deal with unstructured, semi-structured, or rapidly changing data. It does not require a fixed schema, allowing for more flexible data modeling.\n   - Example: Content management systems where documents, images, and other forms of media are stored with varying attributes.\n\n2. **Horizontal Scalability and Big Data**:\n   - If your application requires scaling across many servers to handle large volumes of data and high throughput, MongoDB’s horizontal scaling capabilities make it a good choice.\n   - Example: Big data applications, such as real-time analytics or IoT data storage.\n\n3. **High-Performance, Low-Latency Applications**:\n   - MongoDB is optimized for high-speed read and write operations, making it suitable for applications that need to handle a large number of transactions with low latency.\n   - Example: Real-time analytics platforms, recommendation engines, or social media feeds.\n\n4. **Flexible Schema Requirements**:\n   - If your application’s data model is expected to evolve over time, MongoDB allows you to add or remove fields without having to redesign your schema.\n   - Example: Startups or rapidly changing applications where the data model is not fully defined from the outset.\n\n5. **Geographically Distributed Data**:\n   - MongoDB’s distributed architecture supports data replication across multiple regions, making it suitable for applications that require data availability across geographically distributed locations.\n   - Example: Global applications that need to serve content with low latency across different regions.\n\n6. **Document-Based Data Storage**:\n   - MongoDB stores data in flexible, JSON-like documents, making it ideal for applications where the data structure aligns well with documents (e.g., nested data, arrays).\n   - Example: E-commerce catalogs where products may have varying attributes and nested data like reviews or ratings.\n\n### Summary:\n\n- **Use an RDBMS** when your application needs:\n  - Structured data with clear relationships.\n  - Complex transactions and queries.\n  - Strong data consistency and integrity.\n  - A well-established ecosystem with mature tools and support.\n  \n- **Use MongoDB (or another NoSQL database)** when your application requires:\n  - Flexibility in data modeling and schema evolution.\n  - High scalability and performance across distributed systems.\n  - Handling of unstructured or semi-structured data.\n  - Support for document-based storage or geographically distributed data.\n\nThe choice between RDBMS and NoSQL depends on your application's specific needs, data structure, scalability requirements, and the expertise of your development team.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e1b51bd5-02b9-47e9-9050-7747e2671a82","order":0,"createdDate":{"$date":"2024-09-03T14:14:33.132Z"},"updatedDate":{"$date":"2024-09-03T14:14:33.132Z"},"uniqueId":"01a33ea8-86fe-48f6-8d13-2cbb060fecb1","__v":0}
{"_id":{"$oid":"66d71ddfb3215eff782ce13b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some common MongoDB queries related to operations on a `questions` collection. These operations include counting, filtering, updating, deleting, and aggregating data.\n\n### 1. **Count Total Number of Questions**\n```javascript\ndb.questions.countDocuments({})\n```\n\n### 2. **Find All Questions**\n```javascript\ndb.questions.find({})\n```\n\n### 3. **Find Questions by a Specific Field (e.g., by `author`)**\n```javascript\ndb.questions.find({ author: \"John Doe\" })\n```\n\n### 4. **Find Questions with a Specific Keyword in the Title**\n```javascript\ndb.questions.find({ title: /keyword/i })\n```\n\n### 5. **Get the First 5 Questions (Pagination)**\n```javascript\ndb.questions.find({}).limit(5)\n```\n\n### 6. **Get the Next 5 Questions (Skip and Limit)**\n```javascript\ndb.questions.find({}).skip(5).limit(5)\n```\n\n### 7. **Count Questions by a Specific Author**\n```javascript\ndb.questions.countDocuments({ author: \"John Doe\" })\n```\n\n### 8. **Find a Question by ID**\n```javascript\ndb.questions.findOne({ _id: ObjectId(\"your_object_id_here\") })\n```\n\n### 9. **Update a Question’s Title by ID**\n```javascript\ndb.questions.updateOne(\n  { _id: ObjectId(\"your_object_id_here\") },\n  { $set: { title: \"Updated Title\" } }\n)\n```\n\n### 10. **Delete a Question by ID**\n```javascript\ndb.questions.deleteOne({ _id: ObjectId(\"your_object_id_here\") })\n```\n\n### 11. **Delete All Questions by a Specific Author**\n```javascript\ndb.questions.deleteMany({ author: \"John Doe\" })\n```\n\n### 12. **Get the Number of Questions Grouped by Author**\n```javascript\ndb.questions.aggregate([\n  { $group: { _id: \"$author\", count: { $sum: 1 } } }\n])\n```\n\n### 13. **Find Questions Created in the Last 7 Days**\n```javascript\ndb.questions.find({\n  createdAt: { $gte: new Date(Date.now() - 7*24*60*60*1000) }\n})\n```\n\n### 14. **Add a New Question**\n```javascript\ndb.questions.insertOne({\n  title: \"How to use MongoDB?\",\n  body: \"Detailed question body...\",\n  author: \"John Doe\",\n  createdAt: new Date()\n})\n```\n\n### 15. **Find Questions with More Than 10 Upvotes**\n```javascript\ndb.questions.find({ upvotes: { $gt: 10 } })\n```\n\n### 16. **Add an Upvote to a Question**\n```javascript\ndb.questions.updateOne(\n  { _id: ObjectId(\"your_object_id_here\") },\n  { $inc: { upvotes: 1 } }\n)\n```\n\n### 17. **Find Questions Containing a Specific Tag**\n```javascript\ndb.questions.find({ tags: \"mongodb\" })\n```\n\n### 18. **Add a Tag to a Question**\n```javascript\ndb.questions.updateOne(\n  { _id: ObjectId(\"your_object_id_here\") },\n  { $addToSet: { tags: \"newtag\" } }\n)\n```\n\n### 19. **Find All Distinct Tags Used in Questions**\n```javascript\ndb.questions.distinct(\"tags\")\n```\n\n### 20. **Get the Most Recent Question**\n```javascript\ndb.questions.find({}).sort({ createdAt: -1 }).limit(1)\n```\n\nThese queries cover a wide range of operations you might perform on a `questions` collection in MongoDB. You can adapt them according to your specific use case.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1e3ae77f-e76b-41be-97a1-78974ddbf5de","order":0,"createdDate":{"$date":"2024-09-03T14:31:59.458Z"},"updatedDate":{"$date":"2024-09-03T14:31:59.458Z"},"uniqueId":"90cbdb60-ac3d-4164-86be-c55470836492","__v":0}
{"_id":{"$oid":"66d74ab6b3215eff782d861a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s a simple JavaScript function to filter a list of names based on a given substring:\n\n```javascript\nfunction filterNamesBySubstring(names, substring) {\n    return names.filter(name => name.toLowerCase().includes(substring.toLowerCase()));\n}\n\n// Example usage:\nconst names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"];\nconst substring = \"al\";\nconst filteredNames = filterNamesBySubstring(names, substring);\n\nconsole.log(filteredNames); // Output: [\"Alice\"]\n```\n\n### Explanation:\n- **`names.filter(...)`:** Filters the array of names based on the condition provided in the function.\n- **`name.toLowerCase().includes(substring.toLowerCase())`:** Converts both the name and the substring to lowercase to make the search case-insensitive, then checks if the `name` includes the `substring`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ffbb4ed8-7a86-4f60-85ab-4b83cb0a0581","order":0,"createdDate":{"$date":"2024-09-03T17:43:18.011Z"},"updatedDate":{"$date":"2024-09-03T17:43:18.011Z"},"uniqueId":"3b55b4cf-aaca-4424-8b46-1c9e02317d69","__v":0}
{"_id":{"$oid":"66d74ec2b3215eff782dc999"},"name":"Memory Map","heading":"Memory Map","smartContent":{"content":"ReactJS Terminologies:\n    Components:\n        A reusable piece of UI, typically a function or class, that renders some output.\n    JSX:\n        A syntax extension that looks similar to XML, used to describe UI elements in React.\n    Props:\n        Short for properties, these are read-only inputs passed to components to control their behavior.\n    State:\n        An object that holds dynamic data specific to a component and can change over time.\n    Lifecycle Methods:\n        Special methods in class components that allow you to hook into different phases of a component's lifecycle.\n    Hooks:\n        Functions that let you use state and other React features in functional components.\n    Virtual DOM:\n        A lightweight in-memory representation of the real DOM that React uses to efficiently update the UI.\n    Context API:\n        A way to pass data through the component tree without manually passing props down at every level.\n    Redux:\n        A state management library commonly used with React to manage and centralize application state.\n    Refs:\n        A way to access and interact with DOM elements or React elements directly in a component.\n    Keys:\n        Unique identifiers used to help React identify which items have changed, are added, or removed in lists.\n    React Router:\n        A library for handling routing in React applications, allowing for navigation between different components/views.\n    Higher-Order Components (HOC):\n        A function that takes a component and returns a new component, typically used for reusing component logic.\n    PureComponent:\n        A React component that implements `shouldComponentUpdate` with a shallow prop and state comparison.\n    Concurrent Mode:\n        An experimental feature that helps React apps stay responsive and gracefully adjust to the user’s device capabilities and network speed.\n    Portals:\n        A method of rendering children into a DOM node outside the parent component’s DOM hierarchy.\n    Error Boundaries:\n        Components that catch JavaScript errors anywhere in their child component tree and display a fallback UI instead of crashing.\n    Fragments:\n        A way to group multiple elements without adding extra nodes to the DOM.\n    Memoization:\n        A technique to optimize performance by caching the output of a function based on its inputs.\n    React.lazy:\n        A function that lets you render a dynamic import as a regular component, enabling code splitting.\n    Suspense:\n        A component that allows you to display a fallback while waiting for a component to load, often used with `React.lazy`.\n    PropTypes:\n        A type-checking library for ensuring that components receive the correct props.\n    Render Props:\n        A pattern where a component uses a function prop to control what to render, enabling code reuse.\n    useEffect:\n        A hook that lets you perform side effects in function components, replacing lifecycle methods in class components.\n    useContext:\n        A hook that lets you subscribe to React context without needing to wrap components in a consumer.\n    useReducer:\n        A hook similar to `useState` but more suited for managing complex state logic, especially when it involves multiple sub-values.\n    useMemo:\n        A hook that memoizes the result of a computation to optimize performance by avoiding unnecessary recalculations.\n    useRef:\n        A hook that returns a mutable ref object whose `.current` property can hold a DOM element or any other value.\n    useCallback:\n        A hook that returns a memoized callback function, useful for passing stable functions as props.\n    StrictMode:\n        A tool for highlighting potential problems in an application, such as deprecated APIs or side effects outside `useEffect`.\n    Hydration:\n        The process of attaching React's event listeners to existing HTML from a server-rendered page.\n    ReactDOM:\n        The library responsible for rendering React components into the DOM.\n    Prop Drilling:\n        The process of passing props down multiple layers of components, often seen as a code smell when overused.\n    Code Splitting:\n        The practice of breaking down your application into smaller bundles, which can be loaded on demand to improve performance.\n\nReactJS Terminologies:\n    Core Concepts:\n        React: Library for building user interfaces.\n        JSX: Syntax extension for JavaScript, used with React.\n        Components: Reusable UI elements in React.\n        Props: Data passed to components.\n        State: Local data storage for components.\n        Virtual DOM: Lightweight in-memory representation of the real DOM.\n\n    Component Types:\n        Functional Components: Stateless components as functions.\n        Class Components: Stateful components using ES6 classes.\n        Higher-Order Components: Components that return other components.\n        Pure Components: Components optimized for performance by shallow comparison.\n\n    Hooks:\n        useState: Hook for adding state to functional components.\n        useEffect: Hook for side effects in functional components.\n        useContext: Hook for accessing context in components.\n        useReducer: Hook for complex state management.\n        useMemo: Hook for memoizing expensive calculations.\n\n    Routing:\n        React Router: Library for routing in React applications.\n        Route: Component for defining individual routes.\n        Link: Component for navigation between routes.\n        useParams: Hook for accessing route parameters.\n\n    State Management:\n        Redux: State management library for React.\n        Reducers: Functions for handling state transitions in Redux.\n        Actions: Payloads of information sent to the store.\n        Store: Centralized state container in Redux.\n        Context API: React's built-in way for passing state globally.\n\n    Performance Optimization:\n        React.memo: Higher-order component for memoizing functional components.\n        useCallback: Hook for memoizing callback functions.\n        Lazy Loading: Loading components only when needed.\n        React Suspense: Component for handling lazy loading and waiting states.\n\n    Testing:\n        Jest: JavaScript testing framework for React.\n        Enzyme: Testing utility for React components.\n        React Testing Library: Lightweight library for testing React components.\n\n    Build Tools:\n        Create React App: Tool for bootstrapping React applications.\n        Webpack: Module bundler for React applications.\n        Babel: JavaScript compiler for transforming modern JS code.\n\n    Styling:\n        CSS Modules: Locally scoped CSS for React components.\n        Styled Components: Library for styling React components using tagged template literals.\n        Emotion: Library for writing CSS styles with JavaScript.\n\nReactJS\n    Component\tA reusable piece of UI that can be a class or functional component.\n    JSX\tJavaScript XML, a syntax extension that allows writing HTML-like code within JavaScript.\n    Props\tShort for properties, these are inputs passed to components to configure their behavior or render dynamic data.\n    State\tA mechanism to store and manage dynamic data within a component, causing re-renders when updated.\n    Lifecycle Methods\tMethods that allow you to hook into different stages of a component's lifecycle (e.g., `componentDidMount`).\n    Functional Component\tA component defined as a JavaScript function that takes props as an argument and returns JSX.\n    Class Component\tA component defined as a class that extends `React.Component` and has lifecycle methods.\n    Hooks\tFunctions that let you use state and other React features in functional components (e.g., `useState`, `useEffect`).\n    useState\tHook for managing state in functional components.\n    useEffect\tHook for performing side effects in functional components, such as fetching data or subscribing to events.\n    Context API\tA way to pass data through the component tree without having to pass props down manually at every level.\n    Redux\tA state management library often used with React to manage application state in a predictable way.\n    React Router\tA library for handling routing and navigation within a React application.\n    Virtual DOM\tA lightweight in-memory representation of the real DOM used by React to optimize updates and rendering.\n    Reconciliation\tThe process by which React updates the DOM to match the latest virtual DOM.\n    Key\tA special attribute used to uniquely identify elements in a list, helping React optimize rendering.\n    Error Boundaries\tComponents that catch JavaScript errors in their child component tree and display a fallback UI.\n    Suspense\tA feature for handling asynchronous operations and code splitting, allowing components to wait for data before rendering.\n    Fragments\tA component that allows grouping of multiple elements without adding extra nodes to the DOM.\n    Higher-Order Component\tA function that takes a component and returns a new component with additional props or functionality.\n    Render Props\tA technique for sharing code between components using a function as a prop that returns a React element.\n    Portals\tA way to render children into a DOM node that exists outside the parent component's hierarchy.\n    React Fiber\tA complete rewrite of React's reconciliation algorithm to improve performance and enable new features.\n    Concurrent Mode\tA set of new features that help React apps stay responsive and gracefully adjust to the user’s device capabilities.\n    Server-Side Rendering (SSR)\tRendering React components on the server to generate HTML content before sending it to the client.\n    Static Site Generation (SSG)\tGenerating static HTML pages at build time rather than on each request, improving performance and SEO.\n    ComponentDidCatch\tMethod used to catch JavaScript errors anywhere in the component tree and log them.","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"67dc09bf-9a54-4cd1-8f63-2535753c375f","order":0,"createdDate":{"$date":"2024-09-03T18:00:34.344Z"},"updatedDate":{"$date":"2024-09-20T19:22:09.332Z"},"uniqueId":"bab91925-2588-4aed-84dd-e794b75e1c29","__v":0}
{"_id":{"$oid":"66d7ee0326f385e1f947413c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Docker\t\n    Core Concepts\t\n        Docker\tA platform that enables the creation, deployment, and management of lightweight, portable containers for applications.\n        Container\tA lightweight, standalone, and executable package that includes everything needed to run a piece of software, including code, runtime, libraries, and system tools.\n        Image\tA lightweight, immutable snapshot of a container that includes the application and its dependencies. Images are used to create containers.\n        Dockerfile\tA text file with instructions to build a Docker image. It contains commands to assemble an image layer by layer.\n        Docker Daemon\t(AKA `dockerd`) The background service running on the host that manages Docker images, containers, networks, and storage volumes.\n        Docker Client\t(AKA `docker`) The command-line interface (CLI) tool used to interact with the Docker Daemon.\n        Docker Hub\tA cloud-based repository where Docker images are stored, shared, and distributed.\n        \n    Networking\t\n        Docker Network\tA virtual network that allows containers to communicate with each other and external systems. It isolates containers from the host and each other.\n        Bridge Network\tThe default network type in Docker, allowing containers on the same host to communicate with each other.\n        Host Network\tA network mode where the container shares the host machine's network stack, giving it direct access to the host’s network interfaces.\n        Overlay Network\tA network type that enables Docker containers running on different Docker hosts to communicate securely using a virtual network.\n        Network Namespace\tA feature that isolates the network interfaces and routing tables of a container from other containers and the host.\n        Port Mapping\tA technique that maps a port on the Docker host to a port inside the container, enabling external access to containerized services.\n\n    Storage and Volumes\t\n        Docker Volume\tA persistent storage mechanism that allows data to be stored outside of the container's filesystem. Volumes are often used to share data between containers.\n        Bind Mount\tA type of volume where a directory on the host machine is mounted into a container. This allows the container to access and modify files on the host.\n        Named Volume\tA Docker-managed volume that is stored outside the container's filesystem, often used for data persistence between container restarts.\n        Union File System\tA filesystem that allows multiple layers to be mounted as a single, unified filesystem. It underpins Docker’s image layering feature.\n        \n    Orchestration\t\n        Docker Compose\tA tool that allows you to define and manage multi-container Docker applications using a YAML file (`docker-compose.yml`).\n        Docker Swarm\tA native clustering and orchestration tool for Docker that enables the deployment and management of multiple Docker nodes.\n        Kubernetes\tAn open-source orchestration platform that automates the deployment, scaling, and management of containerized applications across clusters of hosts.\n        Service\tIn Docker Swarm, a service is a definition of tasks that specify the containers to run, and the network and storage resources to use.\n        Task\tA unit of work in Docker Swarm, representing a container running a part of a service.\n        \n    Security\t\n        Docker Security\tA set of practices and tools to ensure that Docker containers and images are secure, including isolation, image scanning, and role-based access control.\n        Namespace\tA Linux feature used by Docker to provide isolation between containers by segregating kernel resources such as process IDs, network interfaces, and file systems.\n        Cgroups\t(Control Groups) A Linux kernel feature used by Docker to limit, prioritize, and isolate resource usage (CPU, memory, disk I/O) among containers.\n        Docker Content Trust\tA security feature that uses digital signatures to verify the integrity and authenticity of Docker images before they are pulled or deployed.\n        \n    Image Management\t\n        Docker Build\tThe process of creating a Docker image from a Dockerfile, which involves executing the instructions in the Dockerfile.\n        Docker Tag\tA label applied to a Docker image that allows it to be uniquely identified. Typically, tags represent different versions of the image.\n        Docker Pull\tA command used to download a Docker image from a registry (e.g., Docker Hub) to the local machine.\n        Docker Push\tA command used to upload a Docker image from the local machine to a registry.\n        Multi-Stage Build\tA feature in Docker that allows multiple stages in a Dockerfile, enabling the creation of smaller, more efficient images.\n        \n    Monitoring and Logging\t\n        Docker Logs\tA command used to fetch the logs of a running container, useful for debugging and monitoring container activity.\n        Docker Stats\tA command used to display real-time metrics of container resource usage, such as CPU, memory, and network I/O.\n        Docker Health Check\tA mechanism that periodically checks the health of a container to determine if it is running correctly.\n        \n    Advanced Topics\t\n        Docker Registry\tA server-side application that stores and distributes Docker images. Docker Hub is an example of a public registry.\n        Private Registry\tA self-hosted Docker registry that provides a secure location to store and distribute Docker images within an organization.\n        Docker Layer\tA mechanism that allows Docker images to be built in layers, enabling the reuse of layers across different images, improving build efficiency.\n        Docker Context\tA feature that allows switching between multiple Docker hosts or environments with different configurations.\n        Docker Secrets\tA secure way to manage sensitive data such as passwords, API keys, and certificates in Docker Swarm or Kubernetes.\n\n\nDocker\n    Core Concepts\n        Container Orchestration\tThe automated management, deployment, scaling, and networking of containers, typically in a clustered environment.\n        Immutable Infrastructure\tA model where infrastructure components (like Docker containers) are never modified after deployment. Instead, new instances replace them when updates are needed.\n        \n    Networking\n        MACVLAN\tA Docker network driver that allows containers to have their own MAC address, making them appear as physical devices on the network.\n        DNS Round Robin\tA technique used in Docker Swarm where DNS resolves a service name to multiple IP addresses, distributing requests among service replicas.\n        IPAM (IP Address Management)\tA component in Docker that handles the allocation and management of IP addresses in container networks.\n        \n    Storage and Volumes\n        Storage Driver\tThe backend component in Docker responsible for managing the container’s file system, such as overlay2, aufs, or devicemapper.\n        Volume Driver\tA plugin mechanism in Docker that allows third-party storage solutions to manage Docker volumes.\n        Tmpfs Mount\tA type of volume that stores data in memory instead of on disk, providing a temporary, fast storage solution within a container.\n        \n    Orchestration\n        Stack\tIn Docker Swarm and Compose, a stack is a collection of related services that are deployed together, typically defined in a `docker-stack.yml` file.\n        Node\tA physical or virtual machine that runs Docker and participates in a Swarm cluster.\n        Replica\tA duplicate instance of a Docker service that ensures high availability and load balancing within a Docker Swarm.\n        \n    Security\n        Docker Bench for Security\tA script provided by Docker that checks for common best practices around deploying Docker containers in production.\n        User Namespace Remapping\tA security feature that maps a container’s root user to a non-root user on the Docker host, enhancing container security.\n        Seccomp (Secure Computing Mode)\tA Linux kernel feature used by Docker to restrict the system calls that containers can make, reducing their attack surface.\n        \n    Image Management\n        Docker Manifest\tA list of images for various platforms, providing a single name to refer to them. Manifests are used in multi-architecture builds.\n        Image Layer Caching\tA feature where Docker caches the results of previous image build steps, speeding up subsequent builds that reuse unchanged layers.\n        Docker Squash\tA process that combines multiple image layers into a single layer, reducing the size and complexity of the final image.\n        \n    Monitoring and Logging\n        Fluentd Driver\tA logging driver in Docker that routes logs from containers to Fluentd, a popular open-source data collector for logs.\n        Log Aggregation\tA process that collects and stores logs from multiple containers, often used in large-scale deployments for easier monitoring and debugging.\n        Metrics Exporter\tA tool or plugin that exports Docker metrics (like resource usage) to monitoring systems such as Prometheus or Datadog.\n        \n    Advanced Topics\n        Docker Machine\tA tool that simplifies the creation of Docker hosts on local computers, cloud providers, and remote servers.\n        Docker Swarm Mode\tThe native clustering feature in Docker that allows multiple Docker engines to work together as a single Swarm.\n        OverlayFS\tA filesystem technology that Docker uses to overlay one filesystem on top of another, often used in conjunction with storage drivers.\n        Containerd\tA container runtime that provides core functionalities for container lifecycle management, used by Docker as a low-level component.\n        Docker Enterprise\tA commercial edition of Docker that includes advanced features like role-based access control, image security scanning, and support for orchestrating Windows containers.","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"017aec9e-74c4-48f3-865c-099898b22109","order":0,"createdDate":{"$date":"2024-09-04T05:20:03.022Z"},"updatedDate":{"$date":"2024-09-04T05:20:03.022Z"},"uniqueId":"cce397ad-0c6a-407f-bd66-e22027ee8d0e","__v":0}
{"_id":{"$oid":"66d8281e26f385e1f949ad2b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a refined list of key terminologies related to **multithreading** and **concurrency** in Java:\n\n---\n\n### Multithreading and Concurrency: Key Terminologies\n\n#### **Thread**\nA thread is the smallest unit of execution within a process. It is a lightweight subprocess that can run concurrently with other threads within the same process.\n\n#### **Process**\nA process is a self-contained execution environment that includes its own memory space. It can contain multiple threads, each of which shares the process's resources.\n\n#### **Synchronization**\nSynchronization is a mechanism to ensure that only one thread can access a resource or critical section of code at a time. It prevents concurrent threads from corrupting data or causing race conditions.\n\n#### **Race Condition**\nA race condition occurs when the behavior of a program depends on the relative timing of uncontrollable events, such as thread execution order, leading to unpredictable results.\n\n#### **Deadlock**\nDeadlock is a situation where two or more threads are blocked forever, each waiting for the other to release resources they need. It results in a standstill where no progress can be made.\n\n#### **Starvation**\nStarvation happens when a thread is perpetually denied access to resources because other threads are continuously acquiring those resources.\n\n#### **Livelock**\nLivelock occurs when two or more threads keep changing their state in response to each other without making progress. Unlike deadlock, threads are active but unable to proceed.\n\n#### **Thread Safety**\nThread safety ensures that a class or method behaves correctly when accessed by multiple threads concurrently, preventing data corruption and inconsistencies.\n\n#### **Concurrent Collection**\nConcurrent collections are thread-safe data structures provided by the `java.util.concurrent` package, such as `ConcurrentHashMap`, designed to handle concurrent access efficiently.\n\n#### **Executor Service**\nThe ExecutorService is a higher-level replacement for managing threads, providing a way to submit tasks for execution and managing a pool of threads efficiently.\n\n#### **Callable**\nThe `Callable` interface is similar to `Runnable`, but it can return a result and throw a checked exception. It is used with the `ExecutorService` to execute tasks asynchronously.\n\n#### **Future**\nThe `Future` interface represents the result of an asynchronous computation. It provides methods to check if the computation is complete, retrieve the result, or handle exceptions.\n\n#### **CountDownLatch**\n`CountDownLatch` is a synchronization aid that allows one or more threads to wait until a set of operations being performed by other threads completes.\n\n#### **CyclicBarrier**\n`CyclicBarrier` is a synchronization aid that allows a set of threads to wait for each other to reach a common barrier point before any of them proceed.\n\n#### **Semaphore**\nA `Semaphore` is a synchronization aid that controls access to a shared resource by a number of threads. It maintains a set of permits, and threads must acquire a permit before accessing the resource.\n\n#### **ReentrantLock**\n`ReentrantLock` is a synchronization primitive that allows a thread to acquire the lock multiple times. It provides more flexible locking mechanisms compared to synchronized blocks.\n\n#### **ReadWriteLock**\n`ReadWriteLock` is a synchronization mechanism that allows multiple threads to read shared data concurrently while ensuring that writes are exclusive.\n\n#### **ForkJoinPool**\n`ForkJoinPool` is a specialized implementation of `ExecutorService` designed for work-stealing algorithms, allowing tasks to be split into smaller subtasks and processed concurrently.\n\n#### **ThreadLocal**\n`ThreadLocal` provides thread-local variables, which are unique to each thread, allowing threads to maintain their own separate copies of variables.\n\n#### **BlockingQueue**\nA `BlockingQueue` is a thread-safe queue that supports operations that wait for the queue to become non-empty when retrieving elements and wait for space to become available when storing elements.\n\n#### **Atomic Variables**\nAtomic variables, such as `AtomicInteger` and `AtomicBoolean`, provide thread-safe operations for single variables without the need for explicit synchronization.\n\n#### **Volatile**\nThe `volatile` keyword indicates that a variable’s value will be modified by different threads. It ensures visibility of changes to variables across threads.\n\n---\n\nThese terms cover the fundamental concepts and tools used for managing concurrency and multithreading in Java, ensuring effective and efficient execution of concurrent programs.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"dfbdd50f-3984-4540-9a77-5a5b830beda0","order":0,"createdDate":{"$date":"2024-09-04T09:27:58.261Z"},"updatedDate":{"$date":"2024-09-04T09:27:58.261Z"},"uniqueId":"491d5966-c13f-420d-b546-c23c4e44cba6","__v":0}
{"_id":{"$oid":"66d8287526f385e1f949bc09"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a list of major Java versions with their release dates and notable features:\n\n\tJava 1.0\n\t\t- Release Date: January 23, 1996\n\t\t- Notable Features: \n\t\t\t- Initial release with basic core libraries.\n\t\t\t- AWT (Abstract Window Toolkit) for GUI programming.\n\t\t\t- Basic applet support.\n\n\tJava 1.1\n\t\t- Release Date: February 19, 1997\n\t\t- Notable Features: \n\t\t\t- Inner classes.\n\t\t\t- JavaBeans.\n\t\t\t- JDBC (Java Database Connectivity).\n\t\t\t- RMI (Remote Method Invocation).\n\n\tJava 1.2 (Java 2)\n\t\t- Release Date: December 8, 1998\n\t\t- Notable Features:\n\t\t\t- Swing GUI components.\n\t\t\t- Collections Framework.\n\t\t\t- JIT (Just-In-Time) compiler.\n\t\t\t- Java Plug-in.\n\n\tJava 1.3\n\t\t- Release Date: May 8, 2000\n\t\t- Notable Features:\n\t\t\t- HotSpot JVM as the default.\n\t\t\t- JavaSound API.\n\t\t\t- Java Naming and Directory Interface (JNDI) included.\n\n\tJava 1.4\n\t\t- Release Date: February 6, 2002\n\t\t- Notable Features:\n\t\t\t- Assertion facility.\n\t\t\t- Exception chaining.\n\t\t\t- Non-blocking IO (NIO).\n\t\t\t- Logging API.\n\n\tJava 5 (1.5)\n\t\t- Release Date: September 30, 2004\n\t\t- Notable Features:\n\t\t\t- Generics.\n\t\t\t- Enhanced for loop.\n\t\t\t- Autoboxing/unboxing.\n\t\t\t- Enumerations.\n\t\t\t- Metadata annotations.\n\n\tJava 6 (1.6)\n\t\t- Release Date: December 11, 2006\n\t\t- Notable Features:\n\t\t\t- Scripting language support via JSR 223.\n\t\t\t- Pluggable annotations.\n\t\t\t- JAXB 2.0 and JAX-WS 2.0 API support.\n\t\t\t- Performance improvements.\n\n\tJava 7\n\t\t- Release Date: July 28, 2011\n\t\t- Notable Features:\n\t\t\t- Project Coin (small language enhancements).\n\t\t\t- NIO 2.0.\n\t\t\t- Fork/Join framework.\n\t\t\t- Timsort for Collections.sort.\n\n\tJava 8\n\t\t- Release Date: March 18, 2014\n\t\t- Notable Features:\n\t\t\t- Lambda expressions.\n\t\t\t- Stream API.\n\t\t\t- Default methods.\n\t\t\t- Optional class.\n\t\t\t- New Date and Time API (java.time).\n\n\tJava 9\n\t\t- Release Date: September 21, 2017\n\t\t- Notable Features:\n\t\t\t- Project Jigsaw (Module System).\n\t\t\t- JShell (REPL).\n\t\t\t- HTTP/2 client.\n\t\t\t- Factory methods for collections.\n\n\tJava 10\n\t\t- Release Date: March 20, 2018\n\t\t- Notable Features:\n\t\t\t- Local-Variable Type Inference (var).\n\t\t\t- Garbage-Collector interface.\n\t\t\t- Application Class-Data Sharing (AppCDS).\n\n\tJava 11\n\t\t- Release Date: September 25, 2018\n\t\t- Notable Features:\n\t\t\t- Long-Term Support (LTS) release.\n\t\t\t- New HTTP client.\n\t\t\t- Lambda parameter syntax for var.\n\t\t\t- Deprecated and removed APIs (like Java EE modules).\n\n\tJava 12\n\t\t- Release Date: March 19, 2019\n\t\t- Notable Features:\n\t\t\t- JVM Constants API.\n\t\t\t- Shenandoah and Z Garbage Collectors.\n\t\t\t- Switch expressions (preview).\n\n\tJava 13\n\t\t- Release Date: September 17, 2019\n\t\t- Notable Features:\n\t\t\t- Text Blocks (preview).\n\t\t\t- Dynamic CDS Archives.\n\t\t\t- Reimplemented the legacy socket API.\n\n\tJava 14\n\t\t- Release Date: March 17, 2020\n\t\t- Notable Features:\n\t\t\t- Records (preview).\n\t\t\t- Pattern matching for instanceof (preview).\n\t\t\t- Helpful NullPointerExceptions.\n\n\tJava 15\n\t\t- Release Date: September 15, 2020\n\t\t- Notable Features:\n\t\t\t- Sealed classes (preview).\n\t\t\t- Hidden classes.\n\t\t\t- Text Blocks.\n\n\tJava 16\n\t\t- Release Date: March 16, 2021\n\t\t- Notable Features:\n\t\t\t- Records.\n\t\t\t- Pattern Matching for instanceof.\n\t\t\t- Unix-domain socket channels.\n\n\tJava 17\n\t\t- Release Date: September 14, 2021\n\t\t- Notable Features:\n\t\t\t- Long-Term Support (LTS) release.\n\t\t\t- Sealed classes.\n\t\t\t- Foreign Function & Memory API (preview).\n\t\t\t- Deprecation of the Applet API.\n\n\tJava 18\n\t\t- Release Date: March 22, 2022\n\t\t- Notable Features:\n\t\t\t- Simple Web Server.\n\t\t\t- UTF-8 by default.\n\t\t\t- Code snippets in API documentation.\n\n\tJava 19\n\t\t- Release Date: September 20, 2022\n\t\t- Notable Features:\n\t\t\t- Virtual threads (preview).\n\t\t\t- Structured concurrency (preview).\n\t\t\t- Foreign Function & Memory API (second preview).\n\n\tJava 20\n\t\t- Release Date: March 21, 2023\n\t\t- Notable Features:\n\t\t\t- Scoped values (incubator).\n\t\t\t- Record patterns (second preview).\n\t\t\t- Pattern matching for switch (fourth preview).\n  \n\tJava SE 21 (LTS)\n\t\t- Release Date: September 19, 2023\n\t\t- Notable Features:\n\t\t\t- Record Patterns\n\t\t\t- Pattern Matching for Switch\n\t\t\t- Virtual Threads\n\t\t\t- String Templates (Preview)\n\t\t\t- Structured Concurrency (Preview)\n\t\t\t- Scoped Values (Preview)\n\n\tJava SE 22\n\t\t- Release Date: March 19, 2024\n\t\t- Notable Features:\n\t\t\t- Scoped Values\n\t\t\t- Stream Gatherers\n\t\t\t- Structured Concurrency\n\t\t\t- Statements Before Super\n\t\t\t- Class-File API\n\t\t\t- Region Pinning for the G1 Garbage Collector (G1 GC)\n\t\t\t- String Templates (Second Preview)\n\t\t\t- Unnamed Variables and Patterns","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"6859c491-d588-47cc-b816-7d442497bd68","order":0,"createdDate":{"$date":"2024-09-04T09:29:25.29Z"},"updatedDate":{"$date":"2024-09-04T09:29:25.29Z"},"uniqueId":"17c4870e-eb1d-4ac1-8a9d-08eca2b145aa","__v":0}
{"_id":{"$oid":"66d8291126f385e1f949f5cf"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java Memory Management\n    Core Concepts\n        Heap Memory\tThe runtime data area from which memory for all class instances and arrays is allocated.\n        Stack Memory\tThe runtime data area used for method calls and local variables.\n        Metaspace\tA memory area that stores class metadata and replaces the PermGen space in Java 8 and later.\n        PermGen Space\t(Pre-Java 8) The memory area used to store class metadata and other static data.\n\n    Garbage Collection\n        Garbage Collector\tThe process of automatically identifying and reclaiming memory that is no longer in use.\n        Generational Garbage Collection\tA technique that divides heap memory into generations (Young, Old) to optimize garbage collection.\n        Young Generation\tHeap memory area where new objects are allocated and most garbage collection occurs.\n        Old Generation\tHeap memory area where long-lived objects are eventually moved after surviving several garbage collections in the Young Generation.\n        Survivor Spaces\tTwo smaller areas in the Young Generation where objects are moved between each other during garbage collection.\n        Minor GC\tThe garbage collection process that collects objects from the Young Generation.\n        Major GC\tThe garbage collection process that collects objects from the Old Generation.\n        Full GC\tA garbage collection process that performs garbage collection on both the Young and Old Generations.\n\n    Memory Leaks\n        Memory Leak\tA situation where memory that is no longer needed is not released due to lingering references.\n        Weak References\tReferences that do not prevent an object from being collected by garbage collection.\n        Soft References\tReferences that are used for objects that are likely to be needed but can be collected if memory is low.\n        Phantom References\tReferences that are used to perform cleanup after an object has been finalized but before its memory is reclaimed.\n\n    JVM Tuning\n        Heap Size\tConfiguration parameters (e.g., `-Xms`, `-Xmx`) that set the initial and maximum heap size.\n        Garbage Collection Algorithms\tAlgorithms used for garbage collection, such as G1, CMS, and Parallel GC.\n        JVM Flags\tOptions used to configure the behavior of the JVM, such as garbage collection and heap size settings.\n\n    Memory Management Tools\n        JVisualVM\tA monitoring, troubleshooting, and profiling tool for Java applications that can track memory usage.\n        JConsole\tA Java monitoring and management console that provides information about memory usage and garbage collection.\n        Java Mission Control\tA tool for monitoring, profiling, and analyzing Java applications with low overhead.\n        Eclipse Memory Analyzer Tool (MAT)\tA tool for analyzing memory dumps and identifying memory leaks.\n\n    Finalization and Cleanup\n        Finalization\tThe process of executing the `finalize()` method on objects before they are garbage collected (deprecated in newer Java versions).\n        AutoCloseable\tAn interface for objects that need to release resources (e.g., file handles) when they are no longer needed.\n        try-with-resources\tA Java construct that ensures resources are closed automatically when done, reducing the risk of resource leaks.\n\n    JVM Memory Model\n        Stack Frame\tA data structure containing local variables, method parameters, and intermediate results for each method call.\n        Native Memory\tMemory allocated by the JVM that is not managed by the Java heap, used for native code and JNI operations.\n        Direct Memory\tMemory allocated outside of the Java heap that can be accessed directly by the JVM, often used for I/O operations.\n\n    Memory Allocation\n        Object Allocation\tThe process of allocating memory for objects in the heap.\n        Memory Pool\tA subset of heap memory used to manage different types of memory allocation (e.g., Eden, Survivor, Old Gen).\n\n    Common JVM Options\n        -Xms\tInitial heap size.\n        -Xmx\tMaximum heap size.\n        -XX:+UseG1GC\tEnable the G1 garbage collector.\n        -XX:+UseConcMarkSweepGC\tEnable the Concurrent Mark-Sweep garbage collector.\n        -XX:+PrintGCDetails\tPrint detailed information about garbage collection events.","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"7e5e8eb8-1fb7-44bf-941f-1c60c5e0323b","order":0,"createdDate":{"$date":"2024-09-04T09:32:01.279Z"},"updatedDate":{"$date":"2024-09-04T09:32:01.279Z"},"uniqueId":"d425cbc7-77b0-4343-94e1-f13b243df726","__v":0}
{"_id":{"$oid":"66d82b0126f385e1f94a3ce6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Design Patterns\n\tDefinition\n\t\t- Design patterns are established solutions to common software design challenges.\n\t\t- In object-oriented programming (OOP), they primarily address issues related to object creation and interaction.\n\t\t- Design patterns offer generalized, reusable solutions in the form of templates that can be applied to real-world problems.\n\t\t- These patterns capture best practices and provide a shared language for developers to discuss and implement efficient and effective solutions.\n\t\t- By abstracting common challenges, design patterns help avoid reinventing the wheel, simplifying complex software development tasks.\n\n\tTypes of Design Patterns : Design patterns are broadly categorized into three types:\t\n\n\t\t1. Creational Patterns:\n\t\t\t- Focus: Deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.\n\t\t\t- Examples:\n\t\t\t\t- Singleton: Ensures that a class has only one instance and provides a global point of access to that instance.\n\t\t\t\t- Factory Method: Defines an interface for creating an object, but lets subclasses alter the type of objects that will be created.\n\t\t\t\t- Builder: Constructs complex objects step by step, allowing for greater control over the construction process.\n\t\t\t\t- Prototype: Creates new objects by copying an existing object, known as the prototype.\n\n\t\t2. Structural Patterns:\n\t\t\t- Focus: Concerned with object composition or the way objects are structured and related to each other.\n\t\t\t- Examples:\n\t\t\t\t- Adapter: Allows incompatible interfaces to work together by acting as a bridge between them.\n\t\t\t\t- Decorator: Adds behavior to an object dynamically without affecting the behavior of other objects from the same class.\n\t\t\t\t- Facade: Provides a simplified interface to a complex subsystem, making it easier to use.\n\t\t\t\t- Composite: Composes objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions of objects uniformly.\n\n\t\t3. Behavioral Patterns:\n\t\t\t- Focus: Deal with algorithms and the assignment of responsibilities between objects. They help in defining how objects interact and communicate.\n\t\t\t- Examples:\n\t\t\t\t- Observer: Defines a dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n\t\t\t\t- Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.\n\t\t\t\t- Command: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n\t\t\t\t- Iterator: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\n\n\tBenefits of Design Patterns\n\n\t\t- Reusability:\n\t\t\t- Design patterns promote code reuse by providing proven, battle-tested solutions to common problems. This leads to more robust and maintainable code.\n\n\t\t- Improved Communication:\n\t\t\t- They provide a common language among developers, making it easier to communicate ideas and collaborate on solutions.\n\n\t\t- Efficiency:\n\t\t\t- By using design patterns, developers can solve problems more quickly, avoiding the pitfalls of ad-hoc solutions.\n\n\t\t- Flexibility:\n\t\t\t- Design patterns often provide solutions that are more adaptable to change, making the codebase easier to modify and extend over time.\n\n\t\t- Best Practices:\n\t\t\t- They encapsulate best practices in software design, helping developers to follow principles such as DRY (Don't Repeat Yourself) and SOLID principles.\n\n\tCommon Misconceptions and Pitfalls\n\n\t\t- Overuse:\n\t\t\t- While design patterns are powerful tools, they should not be overused. Applying a pattern where it is not needed can overcomplicate a solution, making the code harder to understand and maintain.\n\n\t\t- Rigid Application:\n\t\t\t- Design patterns should be seen as guidelines rather than strict rules. Developers should adapt patterns to fit the specific needs of the problem they are solving.\n\n\t\t- Premature Optimization:\n\t\t\t- Introducing a design pattern too early, before the problem it solves actually arises, can lead to unnecessary complexity. It’s important to assess the problem thoroughly before deciding on the appropriate pattern.\n\n\t\t- Learning Curve:\n\t\t\t- Understanding design patterns requires a good grasp of object-oriented principles and experience with complex software systems. While the benefits are significant, there can be a steep learning curve for newcomers.\n\tConclusion\n\t\t- Design patterns are a critical aspect of modern software development.\n\t\t- They encapsulate years of experience and best practices into reusable templates that solve common design problems.\n\t\t- The true value of design patterns lies in understanding the principles behind them, enabling developers to apply them judiciously.\n\t\t- Applying design patterns helps in building scalable, maintainable, and flexible software systems.\n\t\t- By balancing the use of design patterns with simplicity and clarity, developers can create solutions that are both elegant and effective.\n\n\n\t\t\nGang of Four Design Patterns\n\tCreational Patterns\n\t\tDefinition\n\t\t\tCreational patterns provide ways to instantiate single objects or groups of related objects.\n\t\tTypes\n\t\t\tSingleton\n\t\t\tFactory Method\n\t\t\tAbstract Factory\n\t\t\tBuilder\n\t\t\tPrototype\n\tStructural Patterns\n\t\tDefinition\n\t\t\tStructural patterns provide a manner to define relationships between classes or objects.\n\t\tTypes\n\t\t\tAdapter\n\t\t\tBridge\n\t\t\tComposite\n\t\t\tDecorator\n\t\t\tFacade\n\t\t\tFlyweight\n\t\t\tProxy\n\tBehavioural Patterns\n\t\tDefinition\n\t\t\tBehavioural patterns define manners of communication between classes and objects.\n\t\tTypes\n\t\t\tChain of Responsibility\n\t\t\tCommand\n\t\t\tInterpreter\n\t\t\tIterator\n\t\t\tMediator\n\t\t\tMemento\n\t\t\tObserver\n\t\t\tState\n\t\t\tStrategy\n\t\t\tTemplate Method\n\t\t\tVisitor\n\t\nDesign Patterns Used in Various Frameworks\n\tStruts Framework:\n\t\t- Model-View-Controller (MVC): Struts is based on the MVC architecture.\n\t\t- Command Pattern: Used by Struts controller.\n\t\t- Adapter Pattern: Used by action classes.\n\t\t- Template Method Pattern: Utilized by the `process()` method of the `RequestProcessor`.\n\t\t- Service to Worker, Dispatcher View, Composite View (Struts Tiles), Front Controller, View Helper, Synchronizer Token: J2EE design patterns implemented in Struts.\n\n\tStruts 2:\n\t\t- Inversion of Control (IoC): Also known as dependency injection.\n\t\t- Front Controller: Continues to follow the Front Controller pattern.\n\t\t- Command Pattern: Used by Action classes.\n\t\t- Context Object: Form Beans act like Context Objects.\n\t\t- Factory Pattern: Used for loading beans via `BeanFactory` and `ApplicationContext`.\n\n\tSpring Framework:\n\t\t- Inversion of Control (IoC): Central to the framework.\n\t\t- Model-View-Controller (MVC): Controllers are POJOs, easier for testing.\n\t\t- Front Controller: Uses `DispatcherServlet`.\n\t\t- View Helper: Custom JSP tags and velocity macros.\n\t\t- Proxy Pattern: Used extensively in AOP and remoting.\n\t\t- Singleton Pattern: Default scope of beans defined in Spring config files.\n\t\t- Template Method Pattern: Used by classes like `JdbcTemplate`, `JmsTemplate`, `JpaTemplate`.\n\n\tCommon Java Design Patterns:\n\t\t- Strategy or Visitor: Used for algorithms.\n\t\t- Command: Used for actions.\n\t\t- Bridge: Used in implementations.\n\t\t- Observer: Used for request and response handling.\n\t\t- Factory, Abstract Factory, Prototype: Used for object creation.\n\t\t- Builder: Used for structuring.\n\t\t- Iterator: Used for traversal algorithms.\n\t\t- Adapter: Used for object interfaces.\n\t\t- Decorator, State: Used for object behavior.\n\n\tJSF Framework:\n\t\t- Singleton: FacesServlet, Application, and LifeCycle instances.\n\t\t- Model-View-Controller (MVC): FacesServlet acts as the controller.\n\t\t- Factory Method: Used to create objects like `LifeCycleFactory`.\n\t\t- State: LifeCycle phases.\n\t\t- Composite: UI components.\n\t\t- Decorator: Extends behavior of objects dynamically.\n\t\t- Strategy: Used for rendering UI components.\n\t\t- Template Method: Provided by PhaseListeners.\n\t\t- Observer: ActionEvent and ValueChangedEvent.\n\n\tJava API Design Patterns:\n\t\t- MVC: Extensively used in Swing API.\n\t\t- Factory Method: `getInstance()` method in `java.util.Calendar`.\n\t\t- Singleton: `java.lang.System`, `java.sql.DriverManager`.\n\t\t- Prototype: `clone()` method and `java.lang.Cloneable` interface.\n\t\t- Command: Supported by `Action` interface and `AbstractAction` class in Swing.\n\t\t- Observer: Event model in Java 1.1, `java.util.Observable` and `java.util.Observer`.\n\t\t- Adapter: Used by adapter classes in `java.awt.event`.\n\t\t- Proxy: Implemented in Java's RMI and IDL features.\n\t\t- Composite: `Component` and `Container` classes in `java.awt`.\n\t\t- Bridge: Separation of components in `java.awt` and their counterparts in `java.awt.peer`.\n\n\tEnterprise JavaBeans (EJB) Model Patterns:\n\t\t- Factory Method: Used in EJB creation model.\n\t\t- Singleton: Example is `javax.naming.NamingManager`.\n\t\t- Abstract Factory: `InitialContext`, `InitialContextFactory`.\n\t\t- Builder: `InitialContextFactoryBuilder`.\n\t\t- Adapter: Implementation of EJBs that adapt to EJBObject interface.\n\t\t\t\nCommon Microservices Architecture design patterns:\n\tOverview\n\t\tThese patterns help address the challenges associated with building and maintaining microservices architectures.\n\t\t\n\tTypes\n\t\t1. Decomposition Patterns\n\t\t\t- Decompose by Business Capability\n\t\t\t- Decompose by Subdomain\n\n\t\t2. Data Management Patterns\n\t\t\t- Database per Service\n\t\t\t- Shared Database\n\t\t\t- Saga\n\t\t\t- CQRS (Command Query Responsibility Segregation)\n\t\t\t- Event Sourcing\n\n\t\t3. Communication Patterns\n\t\t\t- API Gateway\n\t\t\t- Backend for Frontend (BFF)\n\t\t\t- Circuit Breaker\n\t\t\t- Service Mesh\n\t\t\t- Service Registry\n\n\t\t4. Deployment Patterns\n\t\t\t- Service Instance per Container\n\t\t\t- Service Instance per Host\n\t\t\t- Service Instance per VM\n\t\t\t- Sidecar\n\t\t\t- Ambassador\n\t\t\t- Adapter\n\n\t\t5. Observability Patterns\n\t\t\t- Log Aggregation\n\t\t\t- Distributed Tracing\n\t\t\t- Application Metrics\n\t\t\t- Health Check API\n\n\t\t6. Security Patterns\n\t\t\t- Access Token\n\t\t\t- JWT (JSON Web Token)\n\t\t\t- Secure Token Service (STS)\n\t\t\t- API Gateway Offloading\n\t\t\t- Container Security\n\n\t\t7. Resilience Patterns\n\t\t\t- Retry\n\t\t\t- Timeout\n\t\t\t- Bulkhead\n\t\t\t- Fallback\n\t\t\t- Rate Limiting\n\n\t\t8. Transaction Management Patterns\n\t\t\t- Transactional Outbox\n\t\t\t- Process Manager\n\t\t\t- Compensating Transaction\n\n\t\t9. Service Discovery Patterns\n\t\t\t- Client-Side Discovery\n\t\t\t- Server-Side Discovery\n\n\t\t10. API Patterns\n\t\t\t- API Versioning\n\t\t\t- Consumer-Driven Contracts\n\n\nCommon JEE (Java Enterprise Edition) or J2EE (Java 2 Platform, Enterprise Edition) design patterns:\n\t1. Creational Patterns\n\t\t- Singleton\n\t\t- Factory Method\n\t\t- Abstract Factory\n\t\t- Builder\n\t\t- Prototype\n\n\t2. Structural Patterns\n\t\t- Adapter\n\t\t- Decorator\n\t\t- Composite\n\t\t- Proxy\n\t\t- Flyweight\n\t\t- Facade\n\t\t- Bridge\n\n\t3. Behavioral Patterns\n\t\t- Template Method\n\t\t- Mediator\n\t\t- Observer\n\t\t- Chain of Responsibility\n\t\t- Command\n\t\t- Strategy\n\t\t- State\n\t\t- Visitor\n\t\t- Interpreter\n\t\t- Iterator\n\t\t- Memento\n\n\t4. Concurrency Patterns\n\t\t- Thread Pool\n\t\t- Work Stealing\n\t\t- Balking\n\t\t- Guarded Suspension\n\t\t- Thread-Safe Singleton\n\t\t- Read-Write Lock\n\t\t- Scheduler\n\n\t5. JEE Patterns\n\t\t- Data Access Object (DAO)\n\t\t- Service Locator\n\t\t- Business Delegate\n\t\t- Model-View-Controller (MVC)\n\t\t- Transfer Object\n\t\t- Session Facade\n\t\t- Intercepting Filter\n\t\t- Front Controller\n\t\t- Composite Entity\n\t\t- Value Object\n\t\t- Application Service\n\t\t- Business Object\n\t\t- Web Service Broker\n\t\t\nCommon design pattern used in a spring boot microservice project\n\tOverview\n\t\tIn a Spring Boot microservice project, several design patterns are commonly used to promote modularity, maintainability, and scalability.\n\t\t\n\tsome of the most prevalent design patterns\n\t\t1. Singleton Pattern\n\t\t\t- Purpose: Ensures that a class has only one instance and provides a global point of access to it.\n\t\t\t- Usage: Often used in Spring beans where a single instance of a bean is shared across the application context, typically for service or repository classes.\n\n\t\t2. Factory Pattern\n\t\t\t- Purpose: Creates objects without specifying the exact class of object that will be created.\n\t\t\t- Usage: Used in Spring to create beans dynamically, especially when the exact type of the bean needs to be determined at runtime.\n\n\t\t3. Proxy Pattern\n\t\t\t- Purpose: Provides a surrogate or placeholder for another object to control access to it.\n\t\t\t- Usage: Used in AOP (Aspect-Oriented Programming) for cross-cutting concerns like logging, transaction management, and security. Spring AOP often uses proxies to implement method interceptors.\n\n\t\t4. Builder Pattern\n\t\t\t- Purpose: Provides a way to construct complex objects step by step.\n\t\t\t- Usage: Often used to construct immutable objects, such as DTOs (Data Transfer Objects), by chaining method calls.\n\n\t\t5. Decorator Pattern\n\t\t\t- Purpose: Adds behavior to individual objects dynamically without affecting the behavior of other objects from the same class.\n\t\t\t- Usage: Used in scenarios like adding additional responsibilities to classes, such as adding caching or logging behavior.\n\n\t\t6. Strategy Pattern\n\t\t\t- Purpose: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.\n\t\t\t- Usage: Commonly used in service layer implementations where different strategies can be applied depending on the context, such as different payment methods in an e-commerce application.\n\n\t\t7. Template Method Pattern\n\t\t\t- Purpose: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n\t\t\t- Usage: Often used in Spring for defining operations in a superclass and allowing subclasses to override specific steps of the algorithm, such as implementing different transaction management or error handling strategies.\n\n\t\t8. Observer Pattern\n\t\t\t- Purpose: Allows an object to notify other objects about changes in its state.\n\t\t\t- Usage: Can be implemented using Spring’s event mechanism, where events are published and subscribers (observers) act upon them.\n\n\t\t9. Repository Pattern\n\t\t\t- Purpose: Encapsulates the logic needed to access data sources, providing an abstraction over the data layer.\n\t\t\t- Usage: Commonly used in Spring Data to simplify data access and manipulation, making it easier to switch between different data sources or persistence frameworks.\n\n\t\t10. Circuit Breaker Pattern\n\t\t\t- Purpose: Prevents an application from performing an operation that is likely to fail, by \"breaking\" the circuit.\n\t\t\t- Usage: Typically implemented using libraries like Netflix Hystrix or Resilience4j, often integrated with Spring Cloud. It is used to handle service failures gracefully in a microservices architecture.\n\n\n\n\t\t11. Chain of Responsibility Pattern\n\t\t\t- Purpose: Passes a request along a chain of handlers. Each handler either processes the request or passes it to the next handler in the chain.\n\t\t\t- Usage: Useful in scenarios such as request filtering, logging, and authentication chains. In Spring, it can be implemented using Filter or Interceptor chains in the web layer.\n\n\t\t12. Command Pattern\n\t\t\t- Purpose: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n\t\t\t- Usage: Commonly used to implement undo/redo operations, or to queue commands for execution. In Spring, it can be used in conjunction with messaging systems or job scheduling.\n\n\t\t13. Adapter Pattern\n\t\t\t- Purpose: Allows incompatible interfaces to work together by wrapping an existing class with a new interface.\n\t\t\t- Usage: Often used to integrate with legacy systems or third-party services. For example, adapting a legacy API to fit the application's current service layer.\n\n\t\t14. Observer Pattern\n\t\t\t- Purpose: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified.\n\t\t\t- Usage: Implemented using Spring's event-publishing mechanism, where events are published by the source and handled by multiple listeners. Useful for decoupling components that need to react to certain events.\n\n\t\t15. Facade Pattern\n\t\t\t- Purpose: Provides a simplified interface to a complex subsystem.\n\t\t\t- Usage: In microservices, it can be used to provide a unified interface to multiple underlying services. For instance, an API Gateway can act as a facade for multiple microservices, handling requests, and aggregating responses.\n\n\t\t16. Composite Pattern\n\t\t\t- Purpose: Composes objects into tree structures to represent part-whole hierarchies.\n\t\t\t- Usage: Useful in scenarios where you want to treat individual objects and compositions of objects uniformly. For example, representing a menu system where each menu can contain submenus or menu items.\n\n\t\t17. State Pattern\n\t\t\t- Purpose: Allows an object to alter its behavior when its internal state changes.\n\t\t\t- Usage: Useful for implementing state machines, such as in an order processing system where an order can be in different states like \"Created,\" \"Paid,\" \"Shipped,\" etc., and each state has different behavior.\n\n\t\t18. Visitor Pattern\n\t\t\t- Purpose: Separates algorithms from the objects on which they operate.\n\t\t\t- Usage: Useful in scenarios where you need to perform operations across a collection of objects of different types. For example, implementing various reporting operations over a set of entities.\n\n\t\t19. Mediator Pattern\n\t\t\t- Purpose: Reduces the complexity of communication between multiple objects or classes.\n\t\t\t- Usage: Useful in microservices architectures to manage complex interactions. For instance, a mediator service can orchestrate the workflow between different microservices.\n\n\t\t20. Builder Pattern\n\t\t\t- Purpose: Provides a way to construct a complex object step by step.\n\t\t\t- Usage: Often used to construct immutable objects, such as DTOs (Data Transfer Objects), by chaining method calls.\n\n\t\t21. Interpreter Pattern\n\t\t\t- Purpose: Defines a grammatical representation for a language and provides an interpreter to deal with this grammar.\n\t\t\t- Usage: Useful in scenarios such as parsing expressions, command languages, or rules engines. It can be employed in implementing domain-specific languages (DSLs) within the application.\n\n\t\t22. Flyweight Pattern\n\t\t\t- Purpose: Reduces the cost of creating and manipulating a large number of similar objects by sharing common data.\n\t\t\t- Usage: Commonly used in scenarios where a large number of objects can be shared, such as caching frequently accessed data or managing connection pools.\n\n\t\t23. Data Mapper Pattern\n\t\t\t- Purpose: Maps data between in-memory objects and a database, keeping them independent of each other.\n\t\t\t- Usage: Frequently implemented in the data access layer of applications using ORM frameworks like Hibernate or JPA. This pattern helps separate business logic from database interactions.\n\n\t\t24. Dependency Injection (DI) Pattern\n\t\t\t- Purpose: Allows a class to receive its dependencies from an external source rather than creating them itself.\n\t\t\t- Usage: A core concept in Spring Framework, enabling loose coupling and enhancing testability by allowing mock dependencies to be injected during testing.\n\n\t\t25. Command Query Responsibility Segregation (CQRS) Pattern\n\t\t\t- Purpose: Segregates the methods that read data from the methods that update data.\n\t\t\t- Usage: Useful in systems that require high scalability and maintainability. In microservices, CQRS can be used to optimize read and write operations separately, often alongside event sourcing.\n\n\t\t26. Event Sourcing Pattern\n\t\t\t- Purpose: Stores the state of a system as a sequence of events rather than a single snapshot.\n\t\t\t- Usage: Common in systems that need a complete audit trail or require the ability to reconstruct past states. Event sourcing can be integrated with CQRS to manage the write-side events and project them to a read model.\n\n\t\t27. Aggregator Pattern\n\t\t\t- Purpose: Aggregates data from multiple inputs into a single output.\n\t\t\t- Usage: Commonly used in microservices to gather data from various services and present a unified response. This pattern can be implemented in an API Gateway or an aggregator service.\n\n\t\t28. Service Locator Pattern\n\t\t\t- Purpose: Provides a central registry to obtain instances of services without exposing the logic of service creation.\n\t\t\t- Usage: Useful in scenarios where a global access point for service instances is needed. However, it should be used cautiously as it can introduce hidden dependencies and make testing harder.\n\n\t\t29. Specification Pattern\n\t\t\t- Purpose: Encapsulates business logic that is combinable and reusable.\n\t\t\t- Usage: Useful in implementing complex business rules that can be combined using logical operators. It can be integrated with the repository pattern to query data based on specifications.\n\n\t\t30. Saga Pattern\n\t\t\t- Purpose: Manages distributed transactions across multiple microservices by dividing a transaction into a series of smaller, independent actions.\n\t\t\t- Usage: Commonly used in microservices architectures to maintain data consistency across services without using distributed transactions. Sagas can be orchestrated or choreographed depending on the use case.\n\n\t\t31. Anti-Corruption Layer Pattern\n\t\t\t- Purpose: Provides a layer that isolates the internal system from external systems that might have a different model or language.\n\t\t\t- Usage: Useful in integrating legacy systems or third-party services, ensuring that changes in external systems do not affect the internal system.\n\n\t\t32. Gateway Pattern\n\t\t\t- Purpose: Acts as a single entry point for accessing different services or resources.\n\t\t\t- Usage: Often implemented as an API Gateway in microservices architectures, managing requests, authentication, routing, and sometimes aggregation.\n\n\t\t33. Event-Driven Pattern\n\t\t\t- Purpose: Uses events to trigger and communicate between decoupled services.\n\t\t\t- Usage: In microservices, this pattern is employed for asynchronous communication using message brokers like Kafka, RabbitMQ, or ActiveMQ. It helps in building highly scalable and responsive systems.\n\n\t\t34. Pipes and Filters Pattern\n\t\t\t- Purpose: Breaks down a complex processing task into a series of discrete, reusable stages (filters) that are connected by channels (pipes).\n\t\t\t- Usage: Useful in scenarios like data transformation, processing pipelines, or ETL processes. Each filter can be independently developed and tested.\n\t\t\t\n\tConclusion\n\t\tThese patterns help in building a well-structured and maintainable microservices architecture by promoting best practices and standard solutions to common problems.\n\t\tThese patterns can be combined and tailored to fit specific project needs, providing robust solutions to common challenges in microservice architectures.\n\t\t\n\t\t\n","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"6f5292f7-457b-4e98-9d17-e35597f617ce","order":0,"createdDate":{"$date":"2024-09-04T09:40:17.209Z"},"updatedDate":{"$date":"2024-09-04T09:40:17.209Z"},"uniqueId":"9ee34517-8231-4068-965c-0278e916b203","__v":0}
{"_id":{"$oid":"66d83f1326f385e1f94ae9cd"},"name":"Common question trends: Interview preparation: 22nd Feb 2024","heading":"Common question trends: Interview preparation: 22nd Feb 2024","smartContent":{"content":"Common question trends: Interview preparation: 22nd Feb 2024\n\n\tJavascript\n\t\tClousures\n\t\t\n\tReactJS\n\t\tHow to create a ReactJS project from scratch\n\t\tHooks\n\t\tHigher Order Functions\n\t\t\n\tSpring Boot\n\t\tWhat is Inversion of control\n\t\t@Autowired\n\t\t@Component and @Service\n\t\tScopes\n\t\t\n\tSpring REST\n\t\t@Controller vs. @RestController\n\t\tDifferent Annotations used in \n\t\t\n\tGraphQl\n\t\tWhy should use GraphQL? \n\t\tHow GraphQL is better than REST?\n\t\tHow to do authentication in GraphQL?\n\t\t\n\t\t\n\tJava 8 questions\n\t\tFeatures Introduced in Java 8\n\t\tJava 8 program to find the 3rd and 4th largest integers in a given array\n\t\tusing java 8, Write a program to get value having maximum occurence in given array say, {2,1,2, 1, 2,3,4,2,4}\n\t\t\n\tJava Exceptions\n\t\tChecked and Unchecked Exceptions\n\t\t\n\tSolid Principles\n\tDesign Patterns\n\t\tFactory of factory pattern\n\tMicroservice Design Patterns","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c55b723a-b00a-44bf-b8ec-49e17b763d15","order":0,"createdDate":{"$date":"2024-09-04T11:05:55.913Z"},"updatedDate":{"$date":"2024-09-04T11:05:55.913Z"},"uniqueId":"18b80ee8-12c9-4269-a314-883884038a20","__v":0}
{"_id":{"$oid":"66d83fb426f385e1f94b1889"},"name":"Use Cases For Backend Frontend Database","heading":"Use Cases For Backend Frontend Database","smartContent":{"content":"Use-Cases\n\tFront-end\n\t\tUser Authentication: \n\t\t\tLogin and registration forms, password reset functionality.\n\t\tData Display: \n\t\t\tFetching and displaying data from APIs, such as lists, tables, charts, and graphs.\n\t\tForms and Validation: \n\t\t\tCreating dynamic forms with validation rules and error handling.\n\t\tNavigation: \n\t\t\tImplementing routing and navigation between different views or pages.\n\t\tState Management: \n\t\t\tManaging and synchronizing application state across components.\n\t\tResponsive Design: \n\t\t\tEnsuring the application is usable and looks good on various screen sizes.\n\t\tReal-time Updates: \n\t\t\tDisplaying real-time data using WebSockets or other techniques.\n\t\tUser Interactions: \n\t\t\tHandling user input and interactions like clicks, drags, and hovers.\n\t\tAnimations and Transitions: \n\t\t\tAdding visual feedback and improving user experience with animations.\n\t\t\tTypes of Animations\n\t\t\t\tFade In/Out: \n\t\t\t\t\tGradually increasing or decreasing the opacity of an element.\n\t\t\t\tSlide In/Out: \n\t\t\t\t\tMoving an element into or out of view from a specific direction (top, bottom, left, right).\n\t\t\t\tScale: \n\t\t\t\t\tIncreasing or decreasing the size of an element.\n\t\t\t\tRotate: \n\t\t\t\t\tRotating an element around a fixed point.\n\t\t\t\tBounce: \n\t\t\t\t\tCreating a bouncing effect for an element.\n\t\t\t\tShake: \n\t\t\t\t\tCreating a shaking or jittering effect for an element.\n\t\t\t\tFlip: \n\t\t\t\t\tFlipping an element around its horizontal or vertical axis.\n\t\t\t\tSpin: \n\t\t\t\t\tContinuously rotating an element.\n\t\t\t\tHover Effects: \n\t\t\t\t\tAnimations triggered when an element is hovered over.\n\t\t\t\tParallax Scrolling: \n\t\t\t\t\tCreating a 3D effect where background images move slower than foreground images.\n\t\t\t\tKeyframe Animations: \n\t\t\t\t\tDefining complex animations with multiple stages using keyframes.\n\t\t\t\tTransitions: \n\t\t\t\t\tSmoothly changing properties such as color, size, or position over a given duration.\n\t\t\t\tMorphing: \n\t\t\t\t\tGradually changing one shape into another.\n\t\t\t\tLoading Spinners: \n\t\t\t\t\tIndicating that content is loading with a rotating or pulsing effect.\n\t\t\t\tAccordion: \n\t\t\t\t\tExpanding or collapsing sections of content.\t\n\t\tLocalization: \n\t\t\tSupporting multiple languages and regional settings.\n\t\n\tBackend\n\t\tUser Authentication and Authorization: \n\t\t\tHandling user registration, login, password resets, and access control.\n\t\tData Management: \n\t\t\tCRUD (Create, Read, Update, Delete) operations on databases.\n\t\tAPI Development: \n\t\t\tCreating RESTful or GraphQL APIs for client-side applications to consume.\n\t\tFile Upload and Storage: \n\t\t\tHandling file uploads, processing, and storing files on the server.\n\t\tEmail Notifications: \n\t\t\tSending automated emails for various events such as registration confirmation, password reset, and notifications.\n\t\tPayment Processing: \n\t\t\tIntegrating payment gateways to handle transactions securely.\n\t\tLogging and Monitoring: \n\t\t\tKeeping track of application logs, monitoring performance, and tracking errors.\n\t\tData Processing: \n\t\t\tPerforming server-side data processing tasks such as data validation, transformation, and aggregation.\n\t\tBackground Jobs: \n\t\t\tHandling time-consuming tasks asynchronously using job queues.\n\t\tCaching: \n\t\t\tImplementing caching mechanisms to improve performance and reduce load on the database.\n\t\tSession Management: \n\t\t\tManaging user sessions to maintain state across requests.\n\t\tWebSockets: \n\t\t\tEnabling real-time communication between the server and clients.\n\t\tSecurity: \n\t\t\tImplementing security measures such as data encryption, protection against SQL injection, CSRF, and XSS attacks.\n\t\tThird-party Integrations: \n\t\t\tConnecting with external services and APIs such as social media platforms, analytics services, and cloud storage providers.\n\t\tMicroservices: \n\t\t\tDecomposing a monolithic application into smaller, independently deployable services.  ","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c55b723a-b00a-44bf-b8ec-49e17b763d15","order":0,"createdDate":{"$date":"2024-09-04T11:08:36.552Z"},"updatedDate":{"$date":"2024-09-04T11:08:36.552Z"},"uniqueId":"9b96156c-fa00-46f1-9606-03e0a5cfbca4","__v":0}
{"_id":{"$oid":"66d8400026f385e1f94b2cc3"},"name":"Project Atm-manthan: Along with Interview Preparation","heading":"Project Atm-manthan: Along with Interview Preparation","smartContent":{"content":"Project Atm-manthan: Along with Interview Preparation\n\tInterview Preparation\n\t\tTopics To prepare\n\t\t\tTechnical Interview Preparation \n\t\t\t\tTopics\n\t\t\t\t\tPrimary\n\t\t\t\t\t\tJava 8\n\t\t\t\t\t\tSpring Boot\n\t\t\t\t\t\tReactJS\n\t\t\t\t\t\tJavaScript\n\t\t\t\t\t\tAWS\n\t\t\t\t\t\tJunit\n\t\t\t\t\t\tMaven\n\t\t\t\t\tSecondary\n\t\t\t\t\t\tMicroservices\n\t\t\t\t\t\tNodeJS\n\t\t\t\t\t\tDocker K8s\n\t\t\t\t\t\tGit\n\t\t\t\t\t\tAgile\n\t\t\t\t\t\tTeam lead\n\t\t\t\t\t\tCommonly used Linux and Windows commands\n\t\t\t\t\t\tMySql\n\t\t\t\t\t\tMongoDB\n\t\t\t\t\t\tIntegration Testing\n\t\t\t\tSteps for each topic\n\t\t\t\t\tKey terminologies, with one-liner\n\t\t\t\t\tMajor versions and fetures introduced\n\t\t\t\t\tUse-cases, I have worked, in each topic\n\t\t\t\t\tHow much comfortable ( on scale of 10)\n\t\t\t\t\tProbable Interview Questions\n\t\t\t\t\t\n\t\t\tResume Preparation\n\t\t\t\tPrepare over-all tech stack info\n\t\t\t\t\tSteps\n\t\t\t\t\t\tTech stack for each project\n\t\t\t\t\t\tConsolidate company wise\n\t\t\t\t\t\tConsolidate for final list\n\t\t\t\tPrepare over-all use cases, tech stack wise\n\t\t\t\t\tSteps\n\t\t\t\t\t\tIdentify use cases project wise\n\t\t\t\t\t\tCompile company wise use cases\n\t\t\t\t\t\tConsolidate for final list\n\t\t\t\tPrepare information for \n\t\t\t\t\tRoles and Responsibilities in each project\n\t\t\t\t\t\n\t\t\t\t\n\tProject\n\t\tTarget:\n\t\t\t1. To develop applications for the following use cases, adhering to best practices:\n\t\t\t\t1.1. Tree data creation from given text.\n\t\t\t\t1.2. Visualization of tree data on a view page.\n\n\t\tAvailable Toolbox:\n\t\t\tFor utility/service creation for Requirement 1.1:\n\t\t\t\t- JavaScript\n\t\t\t\t- TypeScript\n\t\t\t\t- Java\n\t\t\t\t\t- To create a library\n\t\t\t\t\t- To create a REST service\n\t\t\t\t- Python\n\t\t\t\t- Node.js\n\t\t\t\t\t- To create a library\n\t\t\t\t\t- To create a REST service\n\t\t\t\n\t\t\tFor view creation for Requirement 1.2:\n\t\t\t\t- React.js\n\t\t\t\t- Angular\n\t\t\t\t- TypeScript\n\t\t\t\t- JavaScript\n\t\t\t\t- Servlet\n\t\t\t\t- JSP\n\n\t\tExecution Strategy:\n\t\t\t1. Design Phase:\n\t\t\t\t1.1. Requirement Analysis\n\t\t\t\t1.2. System Design and Architecture\n\t\t\t\t1.3. Data Structure Selection for Tree Representation\n\t\t\t\t\n\t\t\t2. Development Phase:\n\t\t\t\t2.1. Implement tree data creation using selected technologies.\n\t\t\t\t2.2. Develop REST services if needed.\n\t\t\t\t2.3. Build the front-end visualization components.\n\t\t\t\n\t\t\t3. Testing Phase:\n\t\t\t\t3.1. Unit testing for libraries/services.\n\t\t\t\t3.2. Integration testing for complete application flow.\n\t\t\t\t3.3. User Acceptance Testing (UAT).\n\n\t\t\t4. Deployment Phase:\n\t\t\t\t4.1. Deploy REST services and front-end application.\n\t\t\t\t4.2. Monitor performance and resolve any post-deployment issues.\n\n\t\tAdditional Considerations:\n\t\t\t- Code quality should be maintained with proper documentation.\n\t\t\t- Follow a version control strategy using Git.\n\t\t\t- Implement CI/CD pipelines for automated testing and deployment.\n\t\t\t- Ensure cross-browser compatibility for front-end applications.\n\t\t\t- Handle large tree data sets efficiently with pagination or lazy loading.","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c55b723a-b00a-44bf-b8ec-49e17b763d15","order":0,"createdDate":{"$date":"2024-09-04T11:09:52.636Z"},"updatedDate":{"$date":"2024-09-04T11:09:52.636Z"},"uniqueId":"2e4f9ba2-11e4-47ad-a66d-e0b405c18078","__v":0}
{"_id":{"$oid":"66d8488c26f385e1f94b4583"},"name":"Some third-party libraries commonly used with Java","heading":"Some third-party libraries commonly used with Java","smartContent":{"content":"Some third-party libraries commonly used with Java:\n\n\tSpring Framework: \n\t\tAn extensive framework for building Java applications, providing support for dependency injection, aspect-oriented programming, data access, transaction management, and more.\n\t\n\tHibernate: \n\t\tAn object-relational mapping (ORM) framework for Java, providing a mapping between Java objects and database tables, and facilitating database access and manipulation.\n\t\n\tLombok: \n\t\tA library that reduces boilerplate code in Java classes by automatically generating getters, setters, constructors, and other common methods at compile time.\n\t\n\tJackson: \n\t\tA fast and feature-rich JSON processor for Java, providing JSON parsing, generation, and data binding capabilities.\n\t\n\tSlf4j (Simple Logging Facade for Java): \n\t\tA simple facade or abstraction for various logging frameworks (e.g., Log4j, Logback), allowing for flexible logging configurations.\n\t\n\tJUnit: \n\t\tA popular testing framework for Java, providing annotations, assertions, and test runners for writing and running unit tests.\n\t\n\tMockito: \n\t\tA mocking framework for Java, allowing for the creation of mock objects and verification of interactions between objects in unit tests.\t\n\n\t\n\tApache HttpClient: \n\t\tA powerful HTTP client library for Java, providing support for HTTP/1.1 and HTTP/2 protocols, as well as handling authentication, cookies, and connection pooling.\n\t\n\tGson: \n\t\tAnother Java library for JSON serialization and deserialization, developed by Google, offering simple APIs for converting Java objects to and from JSON.\n\t\n\tApache POI: \n\t\tA library for working with Microsoft Office documents (Excel, Word, PowerPoint) in Java, allowing for reading, writing, and manipulating these documents programmatically.\n\t\n\tJoda-Time: \n\t\tA library for date and time manipulation in Java, providing a more intuitive and powerful API compared to the standard java.util.Date and java.util.Calendar classes.\n\t\n\tApache Commons Lang: \n\t\tA library that provides utilities for common operations on basic types, such as string manipulation, object reflection, array handling, and more.\n\t\n\tJDBC (Java Database Connectivity): \n\t\tAlthough part of the Java standard library, JDBC drivers from third-party vendors (e.g., MySQL Connector/J, Oracle JDBC Driver) are commonly used to connect Java applications to databases.\n\t\n\tEhcache: \n\t\tA widely used caching library for Java, providing in-memory caching capabilities with support for distributed caching, caching strategies, and expiration policies.\n\t\n\tApache Camel: \n\t\tA versatile integration framework for Java, facilitating the integration of different systems, protocols, and data formats through a variety of enterprise integration patterns (EIPs).\n\t\n\tApache Lucene: \n\t\tA high-performance, full-featured text search engine library for Java, providing indexing, querying, and analysis capabilities for building search applications.\n\t\n\tLogback: \n\t\tA logging framework for Java, serving as a successor to Log4j, with features like pluggable loggers, appenders, and filters, and support for configuration through XML or Groovy files.\n\t\n\tApache Kafka Clients: \n\t\tA collection of client libraries for Java, providing support for building producers and consumers for Apache Kafka, a distributed streaming platform.\t\n\n\tApache Commons Codec: \n\t\tA library providing implementations of common encoders and decoders for various encoding schemes such as Base64, URL, and MIME.\n\t\n\tApache Commons IO: \n\t\tA library providing utilities for working with files, streams, and I/O operations, including file copying, directory manipulation, and file content reading/writing.\n\t\n\tApache Commons Collections: \n\t\tA library providing additional collection classes and utilities beyond those found in the Java standard library, including bags, multisets, and bidirectional maps.\n\t\n\tApache Commons Math: \n\t\tA library providing mathematical algorithms and utilities for numerical computations, including statistics, linear algebra, optimization, and random number generation.\n\t\n\tApache Commons Configuration: \n\t\tA library providing a hierarchical configuration system with support for different configuration sources such as properties files, XML files, and databases.\n\t\n\tGoogle Guice: \n\t\tA lightweight dependency injection framework for Java, providing support for dependency injection through annotations and a fluent API.\n\t\n\tQuerydsl: \n\t\tA framework for constructing type-safe SQL-like queries in Java, enabling compile-time validation of queries and providing a fluent API for building complex queries.\n\t\n\tRxJava: \n\t\tA reactive extensions library for Java, providing support for asynchronous and event-based programming using observable sequences, enabling composition and transformation of asynchronous data streams.\n\t\n\tButterKnife: \n\t\tA lightweight library for Android development that simplifies view binding and resource injection using annotations, reducing boilerplate code in Android applications.\n\t\n\tOkHttp: \n\t\tA modern, HTTP client library for Java and Android, providing features such as connection pooling, request/response caching, and HTTP/2 support, with a simple and expressive API.\n\t\n\tGson: \n\t\tA library for JSON serialization and deserialization in Java, developed by Google, offering high performance and flexibility for converting Java objects to and from JSON.\n\t\n\tGuava Cache: \n\t\tA caching library provided as part of the Google Guava library, offering a simple and flexible API for in-memory caching with features such as automatic eviction, expiration, and concurrency control.\n\t\n\tSpark Framework: \n\t\tA lightweight web framework for Java and Kotlin, inspired by Sinatra, providing support for building RESTful web services and microservices with minimal configuration and boilerplate.\n\t\n\tJUnit Jupiter: \n\t\tThe next generation of JUnit, providing modern features and improved extensibility for writing and running tests in Java, including parameterized tests, nested tests, and extension models.\n\t\n\tHikariCP: \n\t\tA high-performance JDBC connection pool library for Java, offering fast, reliable, and lightweight connection pooling with minimal overhead and configuration.\n\t\n\tMapStruct: \n\t\tA code generation library for Java, enabling the automatic generation of type-safe mapping code between Java beans, eliminating the need for writing boilerplate mapping code manually.\n\t\n\tSlf4j (Simple Logging Facade for Java): \n\t\tA simple facade or abstraction for various logging frameworks (e.g., Log4j, Logback), allowing for flexible logging configurations.\n\t\n\tGuice Servlet: \n\t\tAn extension module for Google Guice that provides integration with the Java Servlet API, enabling dependency injection in servlets, filters, and listeners.\n\t\n\tJedis: \n\t\tA Java client library for Redis, providing support for interacting with Redis servers using simple and intuitive APIs for data manipulation, pub/sub messaging, and pipelining.\n\t\n\tTestNG: \n\t\tA testing framework for Java, providing features such as annotations, parameterized tests, dependency injection, and parallel test execution, as an alternative to JUnit.\n\t\t\n\tApache Commons: \n\t\tA collection of reusable Java components, including utilities for handling collections, IO, logging, configuration, and more.\n\t\n\tGoogle Guava: \n\t\tA set of core libraries developed by Google, providing primitives, collections, caching, concurrency libraries, common annotations, string processing, and more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d9c64150-1edc-48d2-9249-5d86769bef5d","order":0,"createdDate":{"$date":"2024-09-04T11:46:20.36Z"},"updatedDate":{"$date":"2024-09-04T11:46:20.36Z"},"uniqueId":"34c83ea3-6114-4c46-bca5-588e09a750ab","__v":0}
{"_id":{"$oid":"66d8496c26f385e1f94b7b67"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# The expectations from a candidate with 0-5 years of Java experience\n\nThe expectations from a candidate with 0-5 years of Java experience may vary based on their educational background, previous exposure to software development, and the complexity of the projects they've worked on. Here are some fair expectations for candidates within this experience range:\n\n1. **Understanding of Java Basics:**\n   - Ability to write basic Java programs.\n   - Familiarity with core concepts like variables, data types, loops, and conditionals.\n\n2. **Object-Oriented Programming (OOP):**\n   - Understanding of OOP principles like encapsulation, inheritance, and polymorphism.\n   - Ability to design and implement simple classes and relationships.\n\n3. **Debugging and Troubleshooting:**\n   - Basic debugging skills using IDE tools.\n   - Ability to identify and fix common programming errors.\n\n4. **Basic Knowledge of Data Structures:**\n   - Understanding of fundamental data structures like arrays, lists, and maps.\n\n5. **Understanding of Java Libraries:**\n   - Familiarity with commonly used Java libraries and their functionalities.\n\n6. **Understanding of Version Control:**\n   - Basic knowledge of version control systems like Git.\n\n7. **Web Development Basics (if applicable):**\n   - Basic understanding of web technologies if the candidate is involved in web development, such as servlets, JSP, or Spring MVC.\n\n8. **SQL and Database Basics:**\n   - Basic understanding of relational databases and ability to write simple SQL queries.\n\n9. **Problem-Solving Skills:**\n   - Ability to solve simple programming problems and algorithms.\n\n10. **Awareness of Best Practices:**\n    - Awareness of coding best practices and code readability.\n\n11. **Communication and Team Collaboration:**\n    - Effective communication and collaboration skills within a team.\n\n12. **Learning Agility:**\n    - Willingness to learn and adapt to new technologies and methodologies.\n\n13. **Awareness of Development Tools:**\n    - Familiarity with commonly used development tools and IDEs.\n\n14. **Understanding of Software Development Lifecycle:**\n    - Basic understanding of the software development lifecycle.\n\n15. **Code Review and Collaboration:**\n    - Ability to participate in code reviews and collaborate with team members.\n\nIt's important to recognize that candidates with 0-5 years of experience are still in the early stages of their career. Therefore, providing mentorship, opportunities for learning, and a supportive environment can contribute to their growth and development as effective Java developers.\n\n\n\n# expectations from candidate having 6-10 years java experience\n\nFor candidates with 6-10 years of Java experience, expectations tend to include a deeper understanding of Java, proficiency in various frameworks and tools, and the ability to contribute to complex projects. Here are fair expectations for candidates within this experience range:\n\n1. **Advanced Java Knowledge:**\n   - Proficiency in advanced Java concepts, such as concurrency, multithreading, and advanced I/O.\n\n2. **Expertise in Core Java:**\n   - Strong understanding and hands-on experience with core Java features and libraries.\n\n3. **Solid Understanding of Java EE or Spring:**\n   - Experience with Java EE or Spring frameworks for building enterprise-level applications.\n\n4. **Design Patterns:**\n   - Familiarity with and application of design patterns in software development.\n\n5. **Database and ORM Proficiency:**\n   - Deep understanding of databases, SQL, and experience with Object-Relational Mapping (ORM) frameworks like Hibernate.\n\n6. **Web Development Mastery (if applicable):**\n   - Proficiency in web development frameworks such as Spring MVC or expertise in servlets and JSP.\n\n7. **Microservices Architecture:**\n   - Experience with building and maintaining microservices architectures using Java.\n\n8. **Unit Testing and Test Automation:**\n   - Strong emphasis on writing unit tests and familiarity with test automation frameworks.\n\n9. **Build Tools and CI/CD:**\n   - Experience with build tools like Maven or Gradle and continuous integration/continuous deployment (CI/CD) pipelines.\n\n10. **API Design and Integration:**\n    - Proficient in designing and implementing APIs, as well as integrating with third-party APIs.\n\n11. **Performance Optimization:**\n    - Ability to identify and optimize performance bottlenecks in Java applications.\n\n12. **Security Best Practices:**\n    - Knowledge of secure coding practices and awareness of common security vulnerabilities.\n\n13. **Advanced Frameworks:**\n    - Proficiency in advanced frameworks within the Java ecosystem, such as Spring Boot or Jakarta EE.\n\n14. **Troubleshooting and Debugging:**\n    - Strong troubleshooting and debugging skills, including knowledge of profiling tools.\n\n15. **Code Review and Mentoring:**\n    - Ability to conduct effective code reviews and provide mentorship to junior team members.\n\n16. **Architectural Understanding:**\n    - Understanding of software architecture principles and ability to contribute to architectural decisions.\n\n17. **Agile Methodologies:**\n    - Experience working in Agile development methodologies and contributing to Agile practices.\n\n18. **Effective Communication:**\n    - Strong communication skills to collaborate with cross-functional teams and stakeholders.\n\n19. **Project Management Awareness:**\n    - Understanding of project management principles and the ability to contribute to project planning.\n\n20. **Continuous Learning:**\n    - A commitment to staying updated with the latest Java trends and technologies.\n\nThese expectations reflect the broader skill set and experience that candidates with 6-10 years of Java experience are likely to possess. However, it's essential to tailor expectations based on the specific needs and nature of the projects within your organization.\n\n\n\n# expectations from candidate having 11-20 years java experience\n\nFor candidates with 11-20 years of Java experience, expectations are higher, encompassing not only advanced technical skills but also a strong understanding of software architecture, leadership, and the ability to make strategic contributions to projects and teams. Here are fair expectations for candidates within this experience range:\n\n1. **Expert-Level Java Proficiency:**\n   - Mastery of Java language features, including the latest updates and enhancements.\n\n2. **Architecture and Design:**\n   - Proven ability to design scalable and maintainable software architectures.\n\n3. **Enterprise-level Experience:**\n   - Extensive experience in developing and maintaining large-scale enterprise applications.\n\n4. **Mentorship and Leadership:**\n   - Ability to mentor junior developers and provide technical leadership within the team.\n\n5. **Advanced Frameworks and Technologies:**\n   - Expertise in advanced Java frameworks, libraries, and associated technologies.\n\n6. **Performance Engineering:**\n   - Deep knowledge and experience in optimizing application performance and resource utilization.\n\n7. **Microservices and Cloud:**\n   - Expertise in designing, implementing, and deploying microservices-based architectures on cloud platforms.\n\n8. **DevOps Practices:**\n   - Proficiency in DevOps practices, including infrastructure as code, automation, and continuous integration/continuous deployment (CI/CD).\n\n9. **Security Expertise:**\n   - In-depth understanding of secure coding practices, encryption, and vulnerability assessments.\n\n10. **Advanced Database Knowledge:**\n    - Mastery of database design, optimization, and familiarity with both relational and NoSQL databases.\n\n11. **Full-Stack Development (if applicable):**\n    - Experience with both front-end and back-end development, including frameworks like Angular or React.\n\n12. **Cross-Functional Collaboration:**\n    - Proven ability to collaborate effectively with cross-functional teams, including product managers and designers.\n\n13. **Project Management and Delivery:**\n    - Experience in project management, including planning, estimation, and delivery of complex projects.\n\n14. **Expert Troubleshooting:**\n    - Advanced troubleshooting and debugging skills, including the use of profiling and monitoring tools.\n\n15. **Open Source Contributions:**\n    - Contributions to open-source projects or active involvement in the Java community.\n\n16. **Innovation and Problem-Solving:**\n    - Demonstrated ability to innovate and solve complex technical challenges.\n\n17. **Continuous Learning and Adaptability:**\n    - Commitment to staying abreast of emerging technologies and methodologies.\n\n18. **Communication with Stakeholders:**\n    - Effective communication with stakeholders, including presenting technical concepts to non-technical audiences.\n\n19. **Strategic Thinking:**\n    - Ability to contribute to strategic decisions and provide technical input for organizational goals.\n\n20. **Industry Recognition:**\n    - Recognition within the industry, possibly through publications, conference presentations, or awards.\n\nIt's crucial to note that expectations for candidates with 11-20 years of experience extend beyond technical skills to include leadership, mentoring, and strategic contributions to the organization. Tailor expectations based on the specific needs and goals of your team and projects.\n\n\n# expectations from candidate having 21-30 years java experience\n\nFor candidates with 21-30 years of Java experience, expectations are significantly high, encompassing not only deep technical expertise but also leadership at the organizational level. Here are fair expectations for candidates within this experience range:\n\n1. **Java Mastery:**\n   - Exceptional proficiency in Java, including advanced language features and deep understanding of the entire Java ecosystem.\n\n2. **Architectural Leadership:**\n   - Proven ability to provide architectural leadership for large-scale, mission-critical systems.\n\n3. **Strategic Technical Vision:**\n   - Development of a strategic technical vision for projects and the ability to align it with organizational goals.\n\n4. **Technical Leadership:**\n   - Leadership in driving technical decisions, influencing organizational strategy, and mentoring other technical leaders.\n\n5. **Enterprise-level Impact:**\n   - Demonstrated impact on the success of enterprise-level projects and systems.\n\n6. **Innovation and Research:**\n   - Contributions to innovation within the industry, possibly through research or development of cutting-edge solutions.\n\n7. **Collaboration with Executives:**\n   - Ability to effectively communicate with and influence executives, providing technical guidance for strategic business decisions.\n\n8. **Thought Leadership:**\n   - Recognition as a thought leader within the Java community or the broader software development community.\n\n9. **Governance and Standards:**\n   - Development and enforcement of coding standards, best practices, and governance policies.\n\n10. **Mentorship of Leaders:**\n    - Mentorship of other technical leaders within the organization.\n\n11. **Project and Program Management:**\n    - Involvement in project and program management, including oversight of multiple projects.\n\n12. **DevOps and Automation:**\n    - Leadership in implementing DevOps practices, automation, and continuous improvement across the organization.\n\n13. **Advanced Security Expertise:**\n    - Expertise in designing and implementing security strategies and mitigating advanced security threats.\n\n14. **Cross-Disciplinary Collaboration:**\n    - Collaboration with leaders from other disciplines such as product management, UX, and data science.\n\n15. **Regulatory Compliance:**\n    - Experience ensuring compliance with industry-specific regulations and standards.\n\n16. **Technology Evaluation:**\n    - Evaluation and recommendation of emerging technologies for organizational adoption.\n\n17. **Crisis Management:**\n    - Leadership in managing and resolving critical incidents and crises.\n\n18. **Budgetary and Resource Management:**\n    - Involvement in budgetary and resource allocation decisions.\n\n19. **Global Impact:**\n    - Contributions to projects with a global impact or that span multiple geographical regions.\n\n20. **Leadership in Industry Forums:**\n    - Participation in industry forums, standards bodies, or advisory groups.\n\nExpectations for candidates with 21-30 years of experience extend beyond technical skills to encompass strategic leadership, industry impact, and organizational influence. Tailor expectations based on the specific needs, goals, and complexity of your organization.\n\n\n\n# expectations from candidate having 30-40 years java experience\n\nIt's relatively uncommon for individuals to have 30-40 years of experience in Java, given that Java was officially released in 1995. However, if you are considering someone with extensive experience in software development and related technologies, here are some potential expectations:\n\n1. **Historical Context:**\n   - Understanding of the evolution of software development, from early languages to contemporary practices.\n\n2. **Vast Technical Expertise:**\n   - Profound expertise in Java and related technologies, with a deep understanding of language intricacies, frameworks, and libraries.\n\n3. **Architectural Wisdom:**\n   - Proven ability to architect and design complex systems, with an understanding of how architectural decisions impact the entire software lifecycle.\n\n4. **Mentorship and Leadership:**\n   - Mentorship and leadership experience, not only in a technical capacity but also in guiding the career development of others.\n\n5. **Innovation and Adaptability:**\n   - A history of innovation, including adapting to and influencing changes in technology trends over the decades.\n\n6. **Thought Leadership:**\n   - Recognition as a thought leader in the software development community, possibly through publications, speaking engagements, or industry contributions.\n\n7. **Strategic Impact:**\n   - Strategic impact on the direction of organizations or large-scale projects.\n\n8. **Governance and Standards:**\n   - Establishment and enforcement of coding standards, best practices, and governance policies.\n\n9. **Cross-Disciplinary Collaboration:**\n   - Collaboration with leaders across various disciplines, contributing to product, business, and technology decisions.\n\n10. **Global Influence:**\n    - Contributions to projects with a global impact or that span multiple geographical regions.\n\n11. **Regulatory and Compliance Mastery:**\n    - Expertise in ensuring compliance with industry-specific regulations and standards.\n\n12. **Crisis Management:**\n    - Proven ability to manage and resolve critical incidents and crises effectively.\n\n13. **Advanced Security Expertise:**\n    - Expertise in designing and implementing advanced security strategies and mitigating sophisticated security threats.\n\n14. **Involvement in Industry Forums:**\n    - Active participation in industry forums, standards bodies, or advisory groups.\n\n15. **Legacy System Experience:**\n    - Experience in dealing with legacy systems and knowledge of strategies for maintaining and modernizing them.\n\n16. **Knowledge Transfer:**\n    - A commitment to knowledge transfer, ensuring that accumulated wisdom is shared with the next generation of developers.\n\n17. **Global Technology Impact:**\n    - Contributions to the broader technology industry, possibly through the development of influential technologies or frameworks.\n\n18. **Teaching and Education:**\n    - Contribution to educational initiatives, potentially through teaching, writing educational materials, or creating learning resources.\n\n19. **Futuristic Vision:**\n    - A visionary approach to technology trends, anticipating future challenges and opportunities.\n\n20. **Legacy Building:**\n    - Building a lasting legacy, whether through the creation of successful products, influential teams, or enduring technological contributions.\n\nGiven the uniqueness of having 30-40 years of experience, expectations should be tailored to the individual's specific achievements and contributions. This level of experience brings a wealth of knowledge and a potential for profound impact in various aspects of the software development field.\n\n\n\n# expectations from candidate having 41-60 years java or other programming language experience\n\nIt's extremely rare for individuals to have 41-60 years of experience in programming languages like Java, given the relatively recent advent of modern programming languages. However, if you are considering someone with extensive experience in software development, potentially spanning multiple programming languages over the decades, here are some broad expectations:\n\n1. **Historical Context:**\n   - In-depth understanding of the historical evolution of software development, having witnessed the emergence of multiple programming paradigms and languages.\n\n2. **Polyglot Programming:**\n   - Proficiency in multiple programming languages, potentially including languages that are not in common use today.\n\n3. **Architectural Wisdom:**\n   - Proven ability to architect and design complex systems, with a deep understanding of how architectural decisions impact the entire software lifecycle.\n\n4. **Innovation Across Eras:**\n   - Demonstrated ability to innovate and adapt to technological changes across different eras of computing.\n\n5. **Thought Leadership:**\n   - Recognition as a thought leader in the software development community, potentially through publications, speaking engagements, or industry contributions.\n\n6. **Leadership and Mentorship:**\n   - Extensive leadership and mentorship experience, not only in a technical capacity but also in guiding the career development of others.\n\n7. **Strategic Impact:**\n   - Strategic impact on the direction of organizations or large-scale projects over an extended period.\n\n8. **Governance and Standards:**\n   - Establishment and enforcement of coding standards, best practices, and governance policies.\n\n9. **Cross-Disciplinary Collaboration:**\n   - Collaboration with leaders across various disciplines, contributing to product, business, and technology decisions.\n\n10. **Global Influence:**\n    - Contributions to projects with a global impact or that span multiple geographical regions.\n\n11. **Regulatory and Compliance Mastery:**\n    - Expertise in ensuring compliance with industry-specific regulations and standards.\n\n12. **Crisis Management:**\n    - Proven ability to manage and resolve critical incidents and crises effectively.\n\n13. **Security Mastery:**\n    - Advanced expertise in designing and implementing security strategies, with a deep understanding of evolving security threats.\n\n14. **Involvement in Industry Forums:**\n    - Active participation in industry forums, standards bodies, or advisory groups.\n\n15. **Legacy System Experience:**\n    - Experience in dealing with legacy systems and knowledge of strategies for maintaining and modernizing them.\n\n16. **Knowledge Transfer:**\n    - A commitment to knowledge transfer, ensuring that accumulated wisdom is shared with the next generation of developers.\n\n17. **Global Technology Impact:**\n    - Contributions to the broader technology industry, possibly through the development of influential technologies or frameworks.\n\n18. **Teaching and Education:**\n    - Contribution to educational initiatives, potentially through teaching, writing educational materials, or creating learning resources.\n\n19. **Futuristic Vision:**\n    - A visionary approach to technology trends, anticipating future challenges and opportunities.\n\n20. **Legacy Building:**\n    - Building a lasting legacy, whether through the creation of successful products, influential teams, or enduring technological contributions.\n\nGiven the unparalleled nature of having 41-60 years of experience, expectations should be tailored to the individual's specific achievements and contributions. This level of experience brings a unique perspective and a wealth of knowledge that can have a profound impact on the software development field.\n\n\n# What should be fair expectations from candidate  aspiring Software architect role having experience in java\n\nFor a candidate aspiring to a Software Architect role with experience in Java, the expectations should span a mix of technical, leadership, and strategic skills. Here are fair expectations for such a candidate:\n\n1. **Architectural Design:**\n   - Proven ability to design scalable, maintainable, and extensible software architectures.\n\n2. **Deep Java Expertise:**\n   - Mastery of Java language features and extensive experience in Java-based technologies.\n\n3. **Solution Architecture:**\n   - Experience in defining end-to-end solutions, considering various components and technologies within the Java ecosystem.\n\n4. **System Integration:**\n   - Ability to design and integrate complex systems, ensuring interoperability and scalability.\n\n5. **Microservices and Distributed Systems:**\n   - Expertise in designing microservices architectures and distributed systems using Java frameworks.\n\n6. **Performance Optimization:**\n   - Demonstrated ability to optimize system performance, including profiling and tuning Java applications.\n\n7. **Security Architecture:**\n   - Expertise in designing secure architectures, understanding common security vulnerabilities and mitigation strategies.\n\n8. **Design Patterns and Best Practices:**\n   - Application of design patterns, coding best practices, and architectural principles in Java development.\n\n9. **Frameworks and Libraries:**\n   - Proficiency in utilizing various Java frameworks and libraries for different architectural components.\n\n10. **API Design:**\n    - Ability to design robust and scalable APIs, considering RESTful principles and industry best practices.\n\n11. **Cloud Architecture:**\n    - Experience in designing cloud-native architectures, understanding cloud services and their integration with Java applications.\n\n12. **Database Design:**\n    - Mastery of database design principles, with the ability to choose and optimize databases for specific use cases.\n\n13. **Scalability and Resilience:**\n    - Designing systems for scalability and resilience, including the use of load balancing, clustering, and fault-tolerant mechanisms.\n\n14. **Containerization and Orchestration:**\n    - Experience with containerization (e.g., Docker) and orchestration tools (e.g., Kubernetes) in Java-based environments.\n\n15. **Architectural Documentation:**\n    - Effective documentation of architectural decisions, patterns, and guidelines.\n\n16. **Team Collaboration:**\n    - Collaboration with cross-functional teams, developers, and stakeholders to align architecture with business goals.\n\n17. **Leadership and Mentorship:**\n    - Mentorship of development teams, guiding them in implementing architectural best practices.\n\n18. **Technical Roadmaps:**\n    - Development and communication of technical roadmaps aligned with organizational goals.\n\n19. **Technology Evaluation:**\n    - Evaluation of emerging technologies, tools, and frameworks for potential adoption.\n\n20. **Agile Methodologies:**\n    - Integration of architectural practices within Agile methodologies, supporting iterative and incremental development.\n\n21. **Risk Assessment:**\n    - Identifying and mitigating technical risks, ensuring the longevity and stability of software solutions.\n\n22. **Continuous Learning:**\n    - Commitment to staying updated with industry trends, emerging technologies, and evolving best practices.\n\n23. **Communication Skills:**\n    - Excellent communication skills to convey complex technical concepts to both technical and non-technical stakeholders.\n\n24. **Regulatory Compliance:**\n    - Understanding and ensuring compliance with industry-specific regulations and standards.\n\n25. **Strategic Thinking:**\n    - Contribution to strategic decisions and alignment of technical decisions with broader business strategies.\n\nThese expectations reflect the comprehensive skill set required for a Software Architect role in a Java-centric environment. Candidates should not only showcase technical proficiency but also demonstrate leadership, collaboration, and a strategic mindset.\n\n\n# What should be fair expectations from candidate  aspiring Software architect having 10 direct reportee role having experience in java\n\nFor a candidate aspiring to a Software Architect role with managerial responsibilities, particularly overseeing 10 direct reports, the expectations would encompass a blend of technical leadership, people management, and strategic skills. Here are fair expectations for such a candidate:\n\n1. **Architectural Leadership:**\n   - Proven ability to design and lead the implementation of complex and scalable software architectures.\n\n2. **Deep Java Expertise:**\n   - Mastery of Java language features and extensive experience in Java-based technologies.\n\n3. **Team Management:**\n   - Experience managing and leading a team of 10 or more developers, fostering a collaborative and productive work environment.\n\n4. **Mentorship and Skill Development:**\n   - Mentorship of team members, providing guidance for career growth and skill development.\n\n5. **Technical Vision:**\n   - Development and communication of a technical vision for the team, aligning it with organizational goals.\n\n6. **System Integration and Collaboration:**\n   - Ability to design and oversee the integration of complex systems, ensuring collaboration across different components.\n\n7. **Leadership in Agile Methodologies:**\n   - Integration of architectural practices within Agile methodologies, supporting iterative and incremental development.\n\n8. **Performance Management:**\n   - Implementation of performance management practices, including regular feedback, goal setting, and performance evaluations.\n\n9. **Recruitment and Team Building:**\n   - Experience in recruiting, hiring, and building effective development teams.\n\n10. **Conflict Resolution:**\n    - Proven ability to handle conflicts within the team and facilitate effective resolutions.\n\n11. **Resource Allocation:**\n    - Efficient allocation of resources, balancing workload, and optimizing team productivity.\n\n12. **Strategic Planning:**\n    - Contribution to strategic planning, ensuring technical decisions align with broader business strategies.\n\n13. **Technology Evaluation and Adoption:**\n    - Evaluation of emerging technologies, tools, and frameworks for potential adoption by the team.\n\n14. **Architectural Documentation:**\n    - Effective documentation of architectural decisions, patterns, and guidelines for the team.\n\n15. **Budget Management:**\n    - Involvement in budgetary decisions related to the development team, including resource allocation and project funding.\n\n16. **Cross-Functional Collaboration:**\n    - Collaboration with leaders from other disciplines, ensuring alignment of technical decisions with overall business objectives.\n\n17. **Communication Skills:**\n    - Excellent communication skills to convey complex technical concepts to both technical and non-technical stakeholders.\n\n18. **Risk Management:**\n    - Identification and mitigation of technical risks, ensuring the stability and success of software solutions.\n\n19. **Regulatory Compliance:**\n    - Understanding and ensuring compliance with industry-specific regulations and standards.\n\n20. **Continuous Learning:**\n    - Commitment to staying updated with industry trends, emerging technologies, and evolving best practices.\n\n21. **Global Impact:**\n    - Contributions to projects with a global impact or that span multiple geographical regions.\n\nThese expectations reflect the leadership, managerial, and technical skills required for a Software Architect role overseeing a sizable development team. Candidates should showcase a holistic skill set that includes both technical proficiency and effective people management.\n\n\n\n# What should be fair expectations from candidate  aspiring Software architect role having experience in java with javascript and react\n\nFor a candidate aspiring to a Software Architect role with experience in Java, JavaScript, and React, the expectations should cover a broad range of technical skills, architectural expertise, and the ability to lead and guide teams in a full-stack development environment. Here are fair expectations for such a candidate:\n\n1. **Full-Stack Development:**\n   - Proficiency in both back-end (Java) and front-end (JavaScript, React) development.\n\n2. **Architectural Design:**\n   - Proven ability to design scalable, maintainable, and extensible software architectures for full-stack applications.\n\n3. **Deep Java Expertise:**\n   - Mastery of Java language features and extensive experience in Java-based technologies.\n\n4. **JavaScript and React Mastery:**\n   - Expertise in JavaScript and front-end development, with a strong command of React and related libraries.\n\n5. **Integration of Front-End and Back-End:**\n   - Experience in seamlessly integrating front-end and back-end components to build cohesive and efficient full-stack applications.\n\n6. **Microservices and Distributed Systems:**\n   - Expertise in designing microservices architectures and distributed systems using Java and JavaScript frameworks.\n\n7. **API Design:**\n   - Ability to design robust and scalable APIs, considering RESTful principles and industry best practices.\n\n8. **State Management in React:**\n   - Proficiency in state management in React applications, using tools like Redux or Context API.\n\n9. **Performance Optimization:**\n   - Demonstrated ability to optimize the performance of both back-end and front-end components.\n\n10. **Security Architecture:**\n    - Expertise in designing secure architectures, understanding common security vulnerabilities, and implementing effective mitigation strategies.\n\n11. **Database Design:**\n    - Mastery of database design principles, with the ability to choose and optimize databases for specific use cases.\n\n12. **Cross-Functional Collaboration:**\n    - Collaboration with leaders across various disciplines, contributing to product, business, and technology decisions.\n\n13. **Team Leadership:**\n    - Experience managing and leading a development team, fostering a collaborative and productive work environment.\n\n14. **Mentorship and Skill Development:**\n    - Mentorship of team members, providing guidance for career growth and skill development.\n\n15. **Technical Vision:**\n    - Development and communication of a technical vision for the team, aligning it with organizational goals.\n\n16. **Agile Methodologies:**\n    - Integration of architectural practices within Agile methodologies, supporting iterative and incremental development.\n\n17. **Continuous Learning:**\n    - Commitment to staying updated with industry trends, emerging technologies, and evolving best practices.\n\n18. **Communication Skills:**\n    - Excellent communication skills to convey complex technical concepts to both technical and non-technical stakeholders.\n\n19. **Regulatory Compliance:**\n    - Understanding and ensuring compliance with industry-specific regulations and standards.\n\n20. **Technology Evaluation and Adoption:**\n    - Evaluation of emerging technologies, tools, and frameworks for potential adoption by the team.\n\nThese expectations reflect the multifaceted skill set required for a Software Architect role in a full-stack development environment, combining expertise in Java, JavaScript, and React. Candidates should not only showcase technical proficiency but also demonstrate leadership, collaboration, and a strategic mindset.\n\n\n\n# ","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"cb2d297e-55e2-41fa-a584-815e21b850de","order":0,"createdDate":{"$date":"2024-09-04T11:50:04.605Z"},"updatedDate":{"$date":"2024-09-04T11:50:04.605Z"},"uniqueId":"4fc8b44b-b518-4d72-8012-353abbed2be2","__v":0}
{"_id":{"$oid":"66d84a2e26f385e1f94bb9e6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"##  List all keywords used in java. Also Please write one liner for each keywords.\n\n- `abstract`: Used to declare a class or method as abstract, meaning it cannot be instantiated or must be implemented by subclasses.\n- `assert`: Used for testing assumptions during development. Throws an error if the specified expression is false.\n- `boolean`: Represents a data type with two values: `true` or `false`.\n- `break`: Used to exit a loop or switch statement prematurely.\n- `byte`: Represents a data type that stores 8-bit signed two's complement integers.\n- `case`: Used within a switch statement to define different cases.\n- `catch`: Catches exceptions that are thrown in a try block.\n- `char`: Represents a data type that stores a single 16-bit Unicode character.\n- `class`: Declares a class, which is a blueprint for creating objects.\n- `const`: Not used in modern Java; historically reserved for future use.\n- `continue`: Skips the rest of the loop's code and proceeds to the next iteration.\n- `default`: Specifies the default case in a switch statement.\n- `do`: Starts a do-while loop, which executes a block of code at least once.\n- `double`: Represents a data type that stores double-precision floating-point numbers.\n- `else`: Specifies an alternative block of code to be executed if an if statement's condition is false.\n- `enum`: Declares an enumeration, a special type for defining a set of named constant values.\n- `extends`: Indicates that a class is inheriting from another class.\n- `final`: Used to mark a class, method, or variable as unchangeable or not extendable.\n- `finally`: Contains code that is always executed, regardless of whether an exception is thrown or not.\n- `float`: Represents a data type that stores single-precision floating-point numbers.\n- `for`: Initiates a loop that consists of an initialization, condition, and iteration expression.\n- `goto`: Not used in modern Java; historically reserved for future use.\n- `if`: Executes a block of code based on a specified condition.\n- `implements`: Indicates that a class implements an interface.\n- `import`: Declares a package or class to be used in the code.\n- `instanceof`: Checks if an object is an instance of a particular class or interface.\n- `int`: Represents a data type that stores 32-bit signed integers.\n- `interface`: Declares an interface, a collection of abstract methods.\n- `long`: Represents a data type that stores 64-bit signed integers.\n- `native`: Indicates that a method is implemented in platform-dependent code, often written in another language.\n- `new`: Creates a new instance of a class or array.\n- `package`: Declares a package, a namespace for organizing classes and interfaces.\n- `private`: Specifies that a class, method, or variable is accessible only within its own class.\n- `protected`: Allows access within the same package or by subclasses.\n- `public`: Specifies that a class, method, or variable is accessible from any other class.\n- `return`: Exits a method and optionally returns a value.\n- `short`: Represents a data type that stores 16-bit signed integers.\n- `static`: Declares a static method, variable, or block, which belongs to the class rather than an instance.\n- `strictfp`: Ensures consistent floating-point behavior across different platforms.\n- `super`: Refers to the superclass or parent class.\n- `switch`: Allows multi-way branching based on the value of an expression.\n- `synchronized`: Ensures that only one thread can access a block of code at a time.\n- `this`: Refers to the current instance of the class.\n- `throw`: Throws an exception manually.\n- `throws`: Specifies the exceptions that a method might throw.\n- `transient`: Specifies that a variable should not be serialized.\n- `try`: Contains code that might throw exceptions, and defines how to handle them.\n- `void`: Specifies that a method does not return any value.\n- `volatile`: Indicates that a variable's value may be changed by multiple threads simultaneously.\n- `while`: Initiates a while loop, which repeatedly executes a block of code as long as a specified condition is true.\n\n\n## I need to understand about java compiler internal\n\nThe Java compiler, `javac`, is responsible for translating Java source code into an intermediate form called bytecode. Here's a brief overview of the internal process:\n\n1. **Lexical Analysis (Scanning):** The compiler scans the source code to identify and categorize individual tokens, such as keywords, identifiers, operators, and literals.\n\n2. **Syntax Analysis (Parsing):** The parser checks the arrangement of tokens to ensure they conform to the grammatical structure of the Java language. It creates an abstract syntax tree (AST) as a hierarchical representation of the code's structure.\n\n3. **Semantic Analysis:** This phase checks the code for semantic correctness, ensuring that the program adheres to the language rules beyond just syntax. It involves type checking, variable scoping, and other semantic validations.\n\n4. **Intermediate Code Generation:** The compiler generates an intermediate representation of the code called bytecode. Bytecode is a set of instructions that is platform-independent and can be executed by the Java Virtual Machine (JVM).\n\n5. **Code Optimization:** The compiler may perform optimizations on the bytecode to enhance the efficiency of the generated code. This can include removing redundant code or restructuring instructions for better performance.\n\n6. **Code Generation:** The final machine-specific code is generated based on the optimized intermediate representation. This code is specific to the target platform and is not directly executable on its own.\n\n7. **Bytecode Generation (Optional):** Instead of directly generating machine code, Java compilers often produce bytecode, which is stored in `.class` files. Bytecode is later executed by the JVM, providing the \"write once, run anywhere\" capability of Java.\n\n8. **Class Loading:** The Java runtime environment (JRE) or JVM loads the compiled bytecode into memory as needed. The class loader is responsible for loading classes during runtime.\n\n9. **Execution:** The JVM interprets or compiles the bytecode further (JIT compilation) into machine code for the specific platform. The program is then executed.\n\nUnderstanding the internal workings of the Java compiler involves delving into compiler theory, lexical analysis, parsing techniques, and code generation strategies. The modular structure of the compiler facilitates code maintenance, optimization, and the ability to evolve with new Java language features.\n\n\n# interview questions for java 8 with answers\n\nCertainly! Here are a few interview questions specifically focused on Java 8 features along with sample answers:\n\n1. **What are the key features introduced in Java 8?**\n\n   *Answer:* \"Java 8 introduced several significant features, including lambda expressions, the Stream API, default methods in interfaces, the java.time package for date and time manipulation, and the Optional class for handling null values more effectively.\"\n\n2. **Can you explain the concept of lambda expressions in Java 8?**\n\n   *Answer:* \"Lambda expressions in Java 8 enable the functional programming paradigm by allowing the creation of anonymous functions. They provide a concise way to express behavior as methods argument, essentially allowing you to treat functionality as a method argument, or pass code as data.\"\n\n3. **How does the Stream API improve the way Java handles collections?**\n\n   *Answer:* \"The Stream API in Java 8 provides a powerful and functional approach to processing collections. It allows for declarative operations on collections, such as filtering, mapping, sorting, and reducing, which can be performed in a concise and readable manner. Streams also support parallel processing, which can significantly improve performance for large datasets.\"\n\n4. **What are default methods in interfaces, and how do they enhance Java 8's interface functionality?**\n\n   *Answer:* \"Default methods in interfaces allow interface to have method implementations, which enables the addition of new methods to interfaces without breaking existing implementations. This feature facilitates the evolution of interfaces and supports backward compatibility in libraries and APIs.\"\n\n5. **How does the java.time package in Java 8 improve upon date and time handling compared to previous versions?**\n\n   *Answer:* \"The java.time package introduces a modern API for handling dates and times, addressing many of the shortcomings of the legacy Date and Calendar classes. It provides immutable date/time classes that are thread-safe, offers better clarity in terms of date/time manipulation, and supports operations like date arithmetic, formatting, and parsing.\"\n\n6. **What is the purpose of the Optional class in Java 8, and how does it help in handling null values?**\n\n   *Answer:* \"The Optional class in Java 8 is designed to address the issue of null references in a more explicit and safe manner. It represents an optional value that may or may not be present, providing methods to check for presence and handle the absence of a value without encountering NullPointerExceptions.\"\n\n7. **How do you use method references in Java 8? Provide an example.**\n\n   *Answer:* \"Method references in Java 8 provide a shorthand syntax for lambda expressions that call a specific method. For example, instead of writing `(x) -> System.out.println(x)`, we can use a method reference like `System.out::println`, which refers to the println method of the System.out object.\"\n\nThese questions cover some of the key features introduced in Java 8 and are commonly asked in interviews to assess a candidate's familiarity and proficiency with the language's latest advancements.\n\n\nCertainly! Here are a few more Java 8 interview questions with answers:\n\n8. **What are the benefits of using lambda expressions in Java 8?**\n\n   *Answer:* \"Lambda expressions provide several benefits, including concise syntax, improved readability, and support for functional programming paradigms. They enable the writing of more expressive and flexible code, especially when working with collections and streams.\"\n\n9. **How does the forEach method in Java 8's Stream API differ from the traditional for-each loop?**\n\n   *Answer:* \"The forEach method in the Stream API allows for more concise and expressive iteration over elements in a collection. Unlike the traditional for-each loop, it can be parallelized, enabling concurrent processing of elements in the stream. Additionally, forEach can be chained with other stream operations, making it more versatile.\"\n\n10. **Can you explain the difference between a Predicate and a Function in Java 8?**\n\n    *Answer:* \"In Java 8, a Predicate is a functional interface that represents a boolean-valued function of one argument. It is typically used for filtering elements in collections or streams based on a condition. On the other hand, a Function is a functional interface that represents a function that accepts one argument and produces a result. It can be used for transforming or mapping elements in collections or streams.\"\n\n11. **How does the reduce method work in Java 8's Stream API, and what are its common use cases?**\n\n    *Answer:* \"The reduce method in the Stream API combines the elements of a stream into a single result by applying an associative accumulation function. It repeatedly applies the function to pairs of elements until only one element remains. Common use cases for reduce include calculating sums, finding maximum or minimum values, and concatenating strings.\"\n\n12. **What is the purpose of the Collectors class in Java 8's Stream API, and can you provide an example of its usage?**\n\n    *Answer:* \"The Collectors class in Java 8's Stream API provides a set of static factory methods for accumulating elements into collections or performing various reduction operations. It is commonly used with the collect method to transform the elements of a stream into a different form, such as a List, Set, or Map. For example, `Collectors.toList()` can be used to collect elements into a List.\"\n\n13. **How do you handle checked exceptions in lambda expressions in Java 8?**\n\n    *Answer:* \"Lambda expressions in Java 8 cannot directly throw checked exceptions. However, you can handle checked exceptions within lambda expressions by catching them and either handling them locally or rethrowing them as unchecked exceptions. Alternatively, you can use functional interfaces that declare checked exceptions in their functional method signatures.\"\n\nThese additional questions delve deeper into specific aspects of Java 8, providing a more comprehensive assessment of a candidate's knowledge and experience with the language's features and functionalities.\n\n\n## How java changed from java \n\nJava has undergone significant changes since Java 8, with each subsequent version introducing new features, enhancements, and improvements. Some notable changes include:\n\n1. **Functional Programming Features**: Java 8 introduced lambda expressions, which allow developers to write more concise and expressive code. It also introduced the Stream API for functional-style operations on collections, enabling easier parallelism and better performance.\n\n2. **Date and Time API**: Java 8 introduced the java.time package, providing a modern API for date and time manipulation, addressing the shortcomings of the legacy java.util.Date and java.util.Calendar classes.\n\n3. **Default and Static Methods in Interfaces**: Interfaces in Java 8 gained the ability to have default and static methods, allowing for better code reuse and evolution without breaking existing implementations.\n\n4. **Optional Class**: The Optional class was introduced to address the issue of null references. It encourages developers to handle null values more explicitly, reducing the risk of NullPointerExceptions.\n\n5. **CompletableFuture**: CompletableFuture was introduced in Java 8 as a powerful way to represent asynchronous computations and compose them in a non-blocking manner, making concurrent programming easier.\n\n6. **JVM Improvements**: Java 8 brought various improvements to the Java Virtual Machine (JVM), including the introduction of the Metaspace memory area to replace the PermGen space, enhancing performance and scalability.\n\n7. **Security Enhancements**: Java 8 included several security enhancements, such as the introduction of TLS 1.2 as the default protocol, improvements to the security manager, and enhanced cryptographic algorithms.\n\nOverall, Java 8 marked a significant milestone in the evolution of the language, introducing modern features and laying the foundation for future versions to build upon. Subsequent versions, such as Java 9, Java 10, Java 11, and so on, have continued to innovate and improve Java's capabilities in various areas, including modularity, performance, and developer productivity. With your 15 years of experience, you've likely witnessed and adapted to these changes, leveraging them to build better and more efficient Java applications.\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4b97db5b-87a1-442a-82c7-28272ab93f9c","order":0,"createdDate":{"$date":"2024-09-04T11:53:18.195Z"},"updatedDate":{"$date":"2024-09-04T11:53:18.195Z"},"uniqueId":"536783ab-fb29-4905-bf9b-e497f071f2c8","__v":0}
{"_id":{"$oid":"66d84ad326f385e1f94be40e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Session management refers to the process of securely managing and maintaining the state of interactions between a user and a web application or service. It involves techniques to authenticate users, authorize access to resources, and maintain the session state across multiple requests. This typically involves mechanisms such as cookies, tokens, and server-side data storage to keep track of a user's activity and identity during their visit to a website or web application. Proper session management is crucial for ensuring the security and integrity of user sessions and protecting against unauthorized access or attacks such as session hijacking or fixation.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2b242c76-9507-4d61-a0e8-b20d73b144e9","order":0,"createdDate":{"$date":"2024-09-04T11:56:03.944Z"},"updatedDate":{"$date":"2024-09-04T11:56:03.944Z"},"uniqueId":"9ee8f91e-9eb8-4ce7-8fc6-bafabf7fecc7","__v":0}
{"_id":{"$oid":"66d84b3826f385e1f94c0032"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"There are several ways to perform session management in a web application:\n\n1. **Cookies**: Cookies are small pieces of data stored in the user's browser. They can be used to store session IDs or other session-related information. However, cookies can be vulnerable to attacks like session hijacking if not implemented securely.\n\n2. **URL Rewriting**: Session IDs can be appended to URLs as query parameters. This approach doesn't rely on cookies but can expose session IDs in the URL, making them susceptible to being intercepted or leaked.\n\n3. **Hidden Form Fields**: Session IDs or tokens can be stored in hidden form fields within HTML forms. This approach is similar to cookies but can be less convenient and secure.\n\n4. **JSON Web Tokens (JWT)**: JWT is a compact, URL-safe means of representing claims to be transferred between two parties. It can be used to securely transmit information between parties as a JSON object. JWTs are commonly used for session management in stateless applications or microservices architectures.\n\n5. **Session Tokens**: Session tokens are unique identifiers generated by the server and passed to the client upon successful authentication. These tokens are then included in subsequent requests to authenticate the user's session.\n\n6. **Server-Side Sessions**: Session data can be stored on the server-side, either in-memory or using a database or cache. The client receives a session ID, which is used to retrieve session data from the server on subsequent requests.\n\n7. **HTML5 Web Storage**: HTML5 introduced mechanisms like localStorage and sessionStorage, which can be used to store session-related data on the client-side. While convenient, this approach may not be suitable for sensitive data due to potential security risks.\n\nEach approach has its advantages and disadvantages, and the choice depends on factors such as security requirements, scalability, and ease of implementation.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f0366224-4468-467b-9802-46d4836fe1d6","order":0,"createdDate":{"$date":"2024-09-04T11:57:44.797Z"},"updatedDate":{"$date":"2024-09-04T11:57:44.797Z"},"uniqueId":"fc6d1f11-2cd0-4d91-be1a-59516dbabe6e","__v":0}
{"_id":{"$oid":"66d84bac26f385e1f94c4591"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Certainly! Here are some standard API libraries commonly used with Java:\n\n1. **java.lang**: Provides fundamental classes and interfaces that are part of the Java language core, including basic data types, exception handling, and multi-threading support.\n2. **java.util**: Contains utility classes and data structures such as collections (ArrayList, LinkedList, HashMap), date and time manipulation (Date, Calendar), and utility functions (Arrays, Collections).\n3. **java.io**: Provides classes for input and output operations, including file handling (File, FileReader, FileWriter), stream-based I/O (InputStream, OutputStream), and serialization (ObjectInputStream, ObjectOutputStream).\n4. **java.net**: Offers classes for networking operations, including creating and managing network connections (Socket, ServerSocket), sending HTTP requests (HttpURLConnection), and handling URLs (URL, URLConnection).\n5. **java.nio**: Provides non-blocking I/O operations and support for buffer-based I/O, including channels (FileChannel, SocketChannel), buffers (ByteBuffer), and selectors (Selector).\n6. **java.sql**: Contains classes and interfaces for database access and management using JDBC (Java Database Connectivity), including connections (Connection), statements (Statement, PreparedStatement), and result sets (ResultSet).\n7. **java.util.concurrent**: Offers classes and interfaces for concurrent programming and synchronization, including thread pools (Executor, ThreadPoolExecutor), concurrent collections (ConcurrentHashMap, CopyOnWriteArrayList), and synchronization primitives (Semaphore, CountDownLatch).\n8. **java.awt** and **javax.swing**: Provide classes and interfaces for creating graphical user interfaces (GUI) in Java, including components (JFrame, JPanel), layout managers (FlowLayout, BorderLayout), and event handling (ActionListener, MouseListener).\n9. **java.math**: Contains classes for arbitrary-precision arithmetic, including BigInteger and BigDecimal, for working with large numbers and decimal precision.\n10. **java.security**: Provides classes and interfaces for implementing security features in Java applications, including encryption and decryption (Cipher), message digests (MessageDigest), and key management (KeyStore).\n11. **java.text**: Offers classes for formatting and parsing text, including dates (DateFormat, SimpleDateFormat), numbers (NumberFormat), and message formatting (MessageFormat).\n12. **java.util.regex**: Provides classes for working with regular expressions, including pattern matching (Pattern), matching operations (Matcher), and regular expression syntax.\n13. **java.lang.reflect**: Offers classes and interfaces for obtaining information about classes, methods, and fields at runtime, and for dynamically invoking methods and accessing fields.\n14. **java.util.stream**: Introduces a new stream API in Java 8 for processing collections of objects in a functional style, enabling powerful data manipulation operations such as filtering, mapping, and reducing.\n15. **javax.xml**: Contains classes and interfaces for working with XML documents and data, including parsing XML documents (SAXParser, DOMParser), creating XML documents (DocumentBuilder, Transformer), and querying XML data (XPath).\n\nCertainly! Here are a few more standard API libraries commonly used with Java:\n\n16. **java.util.concurrent.atomic**: Provides classes for atomic operations on single variables, such as AtomicInteger and AtomicLong, for thread-safe operations without the need for explicit synchronization.\n17. **java.util.concurrent.locks**: Offers classes and interfaces for advanced thread synchronization using locks, including ReentrantLock, ReadWriteLock, and Condition, for finer-grained control over thread access to shared resources.\n18. **java.util.concurrent.atomic**: Provides classes for atomic operations on single variables, such as AtomicInteger and AtomicLong, for thread-safe operations without the need for explicit synchronization.\n19. **java.util.logging**: Built-in logging framework for Java applications, offering classes and interfaces for logging messages, managing loggers, and configuring log handlers.\n20. **java.util.regex**: Provides classes for working with regular expressions, including pattern matching (Pattern), matching operations (Matcher), and regular expression syntax.\n21. **java.nio.file**: Offers classes and interfaces for file I/O operations with the NIO.2 file system API, including file and directory manipulation (Files, Path), file attributes (BasicFileAttributes), and file system operations (FileSystems, FileSystem).\n22. **java.rmi**: Contains classes and interfaces for building distributed applications using Remote Method Invocation (RMI), enabling communication between Java objects running on different JVMs.\n23. **java.lang.management**: Provides classes and interfaces for monitoring and managing the Java Virtual Machine (JVM) and the running Java applications, including memory management (MemoryMXBean), thread management (ThreadMXBean), and garbage collection (GarbageCollectorMXBean).\n24. **java.util.prefs**: Offers classes for storing and retrieving user preferences and configuration data persistently, including the Preferences class for accessing preference nodes and the PreferencesFactory class for creating preference instances.\n25. **javax.xml.bind**: Provides classes and interfaces for binding XML data to Java objects and vice versa using JAXB (Java Architecture for XML Binding), including marshalling (converting Java objects to XML) and unmarshalling (converting XML to Java objects) operations.\n26. **javax.crypto**: Contains classes and interfaces for cryptographic operations in Java applications, including encryption and decryption (Cipher), key generation (KeyGenerator), and key management (KeyStore).\n27. **javax.servlet**: Offers classes and interfaces for building web applications using the Java Servlet API, including servlets (HttpServlet), servlet contexts (ServletContext), request handling (HttpServletRequest), and response generation (HttpServletResponse).\n28. **javax.swing**: Provides classes and interfaces for creating graphical user interfaces (GUI) in Java, including components (JFrame, JPanel), layout managers (FlowLayout, BorderLayout), and event handling (ActionListener, MouseListener).\n29. **java.awt**: Contains classes and interfaces for creating abstract window toolkit (AWT) components and graphics operations in Java applications, including windows (Frame), buttons (Button), and graphics contexts (Graphics).\n30. **javax.imageio**: Offers classes and interfaces for reading and writing images in different formats (JPEG, PNG, GIF) using the Java Image I/O API, including readers (ImageReader), writers (ImageWriter), and image metadata (ImageMetadata).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"6b73b6cc-f1c2-45e1-a89c-4faea7a1c2f8","order":0,"createdDate":{"$date":"2024-09-04T11:59:40.849Z"},"updatedDate":{"$date":"2024-09-04T11:59:40.849Z"},"uniqueId":"217c28a5-71f5-4a65-a54f-33c013bbb00f","__v":0}
{"_id":{"$oid":"66d84c3226f385e1f94c8402"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Best Practices\n\n## best practices to write some java code with Spring boot\n\nWriting Java code with Spring Boot involves several best practices to ensure maintainability, scalability, and overall code quality. Here are some key best practices for writing Spring Boot applications:\n\n1. **Project Structure:**\n   - Organize your project using a clear and consistent directory structure.\n   - Follow the Maven or Gradle standard directory layout.\n   - Group related classes and packages logically (e.g., controllers, services, repositories).\n   - Use the package names that reflect the project's domain.\n\n2. **Dependency Management:**\n   - Clearly define and manage your project dependencies using a build tool like Maven or Gradle.\n   - Regularly update dependencies to benefit from bug fixes and new features.\n   - Use Spring Boot Starter dependencies to simplify configuration and reduce boilerplate code.\n\n3. **Configuration:**\n   - Externalize configuration using application properties or YAML files.\n   - Leverage profiles for environment-specific configuration.\n   - Use `@ConfigurationProperties` to bind external properties to Java objects.\n   - Avoid hardcoding values in the code; prefer configuration properties.\n\n4. **Logging:**\n   - Use the SLF4J API for logging in your application.\n   - Configure logging levels appropriately for different packages and classes.\n   - Avoid unnecessary or verbose logging, especially in production.\n   - Use parameterized logging to improve performance and readability.\n\n5. **Exception Handling:**\n   - Implement centralized exception handling using `@ControllerAdvice` and `@ExceptionHandler`.\n   - Provide meaningful error messages and HTTP status codes in the response.\n   - Log exceptions with relevant information for debugging.\n   - Consider using custom exception types to represent different error scenarios.\n\n6. **RESTful API Design:**\n   - Follow RESTful principles for designing your APIs.\n   - Use clear and consistent URI patterns.\n   - Utilize HTTP methods correctly (GET, POST, PUT, DELETE).\n   - Use appropriate status codes in responses.\n   - Document your APIs using tools like Swagger or Spring Rest Docs.\n\n7. **Security:**\n   - Implement proper authentication and authorization mechanisms.\n   - Use Spring Security for handling security concerns.\n   - Protect against common security vulnerabilities (e.g., CSRF, XSS).\n   - Keep sensitive information, such as credentials and API keys, secure and avoid hardcoding them in the code.\n\n8. **Testing:**\n   - Write unit tests for critical components using tools like JUnit and Mockito.\n   - Use Spring Boot's testing annotations (`@SpringBootTest`, `@WebMvcTest`, etc.).\n   - Create integration tests for end-to-end testing.\n   - Consider using tools like Testcontainers for testing with external dependencies.\n\n9. **Database Access:**\n   - Use Spring Data JPA for simplified database access.\n   - Leverage the repository pattern for data access.\n   - Optimize database queries and use appropriate indexing.\n   - Consider using database migration tools like Flyway or Liquibase.\n\n10. **Performance:**\n    - Profile and optimize critical parts of your application.\n    - Use caching where appropriate.\n    - Be mindful of lazy loading in JPA to avoid N+1 query issues.\n    - Monitor your application using tools like Spring Boot Actuator.\n\n11. **Documentation:**\n    - Document your code using clear and concise comments.\n    - Provide README files with information on how to build, configure, and run your application.\n    - Use tools like Javadoc for generating API documentation.\n\n12. **Code Reviews:**\n    - Conduct regular code reviews to ensure code quality and adherence to coding standards.\n    - Encourage team collaboration and knowledge sharing.\n    - Use static code analysis tools to catch potential issues early.\n\nBy following these best practices, you can create maintainable, scalable, and robust Spring Boot applications. Keep in mind that these practices are general guidelines, and adjustments may be needed based on the specific requirements of your project.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"67717530-3dc9-40fc-bfc0-5300afae0ff8","order":0,"createdDate":{"$date":"2024-09-04T12:01:54.921Z"},"updatedDate":{"$date":"2024-09-04T12:01:54.921Z"},"uniqueId":"b9ac9673-e4a6-4fad-9239-95fd4774be7c","__v":0}
{"_id":{"$oid":"66d84d2626f385e1f94cdc31"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# java program to upload some string text into S3 file\n\nTo upload a string text to an S3 file using Java, you can use the AWS SDK for Java. Here's a basic example using the AWS SDK version 2.x:\n\n1. Add the AWS SDK for Java dependency to your project. You can do this by adding the following Maven dependency to your `pom.xml` if you're using Maven:\n\n```xml\n<dependency>\n    <groupId>software.amazon.awssdk</groupId>\n    <artifactId>s3</artifactId>\n    <version>2.17.16</version> <!-- Use the latest version -->\n</dependency>\n```\n\n2. Create a Java class for uploading the string text to an S3 file:\n\n```java\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.PutObjectRequest;\n\nimport java.io.ByteArrayInputStream;\n\npublic class S3UploadExample {\n    public static void main(String[] args) {\n        String accessKey = \"YOUR_ACCESS_KEY\";\n        String secretKey = \"YOUR_SECRET_KEY\";\n        String bucketName = \"your-bucket-name\";\n        String key = \"path/to/your/file.txt\"; // The object key (file path) in S3\n        String textToUpload = \"This is the text that you want to upload to the S3 file.\";\n\n        S3Client s3Client = S3Client.builder()\n                .region(Region.US_EAST_1) // Set your desired region\n                .credentialsProvider(DefaultCredentialsProvider.builder()\n                        .accessKeyId(accessKey)\n                        .secretAccessKey(secretKey)\n                        .build())\n                .build();\n\n        byte[] contentBytes = textToUpload.getBytes();\n        ByteArrayInputStream contentStream = new ByteArrayInputStream(contentBytes);\n\n        PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                .bucket(bucketName)\n                .key(key)\n                .contentLength((long) contentBytes.length)\n                .contentType(\"text/plain\")\n                .build();\n\n        s3Client.putObject(putObjectRequest, contentStream);\n\n        System.out.println(\"Text uploaded to S3 file: \" + key);\n\n        s3Client.close();\n    }\n}\n```\n\nReplace `YOUR_ACCESS_KEY`, `YOUR_SECRET_KEY`, `your-bucket-name`, and adjust the region with your own values.\n\nPlease note that handling credentials in your code directly is not recommended in production. Instead, you should use IAM roles or external configuration methods like environment variables or AWS configuration files.\n\n\n\n# Write one java program to get all text inside [..] in below given lines of string\n\n```\n[PKG-130] 1. Goals: DMW Goals landing - JIRA (atlassian.net)\n[PKG-131] 2. Goals: Create qualitative or quantitative goals & general details - JIRA (atlassian.net)\n[PKG-132] 3. Goals: Link targets with qualitative goals - JIRA (atlassian.net)\n[PKG-133] 4. Goals: Link targets with quantitative goals - JIRA (atlassian.net)\n[PKG-743] 5. Goals: Linking UNSDG, SBTi & PKG Forward initiatives - JIRA (atlassian.net)\n[PKG-744] 6. Goals: Goal details UI - JIRA (atlassian.net)\n[PKG-745] 7. Goals: Goal details & target progress in DMW - JIRA (atlassian.net)\n[PKG-746] 8. Goals: UNSDG Snapshot - JIRA (atlassian.net)\n[PKG-747] 9. Metric: Metric landing DMW - JIRA (atlassian.net)\n[PKG-748] 10. Metric: Add new derived metric - JIRA (atlassian.net)\n[PKG-749] 11. Metric: Add new data category metric - JIRA (atlassian.net)\n[PKG-750] 12. Metric: View metric progress in DMW - JIRA (atlassian.net)\n[PKG-751] 13. Metric: Metric landing UI - JIRA (atlassian.net)\n[PKG-826] 14. Metric: View metric progress in UI - JIRA (atlassian.net)\n[PKG-827] 15. Initiatives: Initiatives landing DMW - JIRA (atlassian.net)\n[PKG-828] 16. Initiatives: Create internal initiative step 1 & 2 - JIRA (atlassian.net)\n[PKG-829] 17. Initiatives: Create supplier initiative step 1 & 2 - JIRA (atlassian.net)\n[PKG-830] 18. Initiatives: Create internal/supplier initiative step 3 - JIRA (atlassian.net)\n[PKG-831] 19. Initiatives: View initiatives in DMW - JIRA (atlassian.net)\n[PKG-832] 20. Initiatives: View initiatives in UI - JIRA (atlassian.net)\n[PKG-833] 21. Initiatives: View initiatives drill down DMW & UI - JIRA (atlassian.net)\n```\n\n- Answer:-\n\nYou can achieve this by using regular expressions in Java. Here's a Java program that extracts text inside `[..]` from the given lines of text:\n\n```java\nimport java.util.regex.*;\nimport java.util.*;\n\npublic class TextInsideBrackets {\n    public static void main(String[] args) {\n        // The input lines of text\n        String[] lines = {\n            \"[PKG-130] 1. Goals: DMW Goals landing - JIRA (atlassian.net)\",\n            \"[PKG-131] 2. Goals: Create qualitative or quantitative goals & general details - JIRA (atlassian.net)\",\n            // Add more lines here\n        };\n\n        // Regular expression pattern to match text inside [..]\n        Pattern pattern = Pattern.compile(\"\\\\[(.*?)\\\\]\");\n\n        // List to store the extracted text\n        List<String> extractedTextList = new ArrayList<>();\n\n        // Iterate through each line and extract text inside [..]\n        for (String line : lines) {\n            Matcher matcher = pattern.matcher(line);\n            while (matcher.find()) {\n                // Group 1 contains the text inside [..]\n                String extractedText = matcher.group(1);\n                extractedTextList.add(extractedText);\n            }\n        }\n\n        // Print the extracted text\n        for (String extractedText : extractedTextList) {\n            System.out.println(extractedText);\n        }\n    }\n}\n```\n\nThis program uses a regular expression pattern `\\\\[(.*?)\\\\]` to match text inside `[..]` and extracts it using the `Matcher` class. The extracted text is then stored in a `List<String>` and printed out.\n\n\n# Please write java 8 code to sum all even numbers in below given list.\n\n```List<integers> list= Arrays.asList(1,2,3,4,5);```\n\nSure! Here's how you can achieve this using Java 8 streams:\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        \n        int sumOfEvens = list.stream()\n                            .filter(i -> i % 2 == 0) // Filter even numbers\n                            .mapToInt(Integer::intValue) // Map Integer to int\n                            .sum(); // Sum all elements\n        \n        System.out.println(\"Sum of even numbers: \" + sumOfEvens);\n    }\n}\n```\n\nThis code will output:\n\n```\nSum of even numbers: 6\n```\n\nExplanation:\n- We start by creating a stream from the list using `stream()`.\n- Then, we use the `filter()` method to keep only the even numbers by checking if the number modulo 2 equals 0.\n- Next, we use `mapToInt()` to convert the `Integer` objects to `int` primitives.\n- Finally, we call `sum()` to get the sum of all even numbers in the list.\n\n\n## few Java 8 coding skill questions around lists of integers\n\nCertainly! Here are a few Java 8 coding skill questions around lists of integers:\n\n1. **Find the sum of all integers in a list**:\n   Write a method that takes a list of integers as input and returns the sum of all the integers in the list.\n\n2. **Find the maximum integer in a list**:\n   Write a method that takes a list of integers as input and returns the maximum integer in the list.\n\n3. **Find the minimum integer in a list**:\n   Write a method that takes a list of integers as input and returns the minimum integer in the list.\n\n4. **Find the average of all integers in a list**:\n   Write a method that takes a list of integers as input and returns the average of all the integers in the list.\n\n5. **Check if all integers in a list are even**:\n   Write a method that takes a list of integers as input and returns true if all the integers in the list are even, otherwise false.\n\n6. **Check if any integer in a list is negative**:\n   Write a method that takes a list of integers as input and returns true if there is at least one negative integer in the list, otherwise false.\n\n7. **Filter even integers from a list**:\n   Write a method that takes a list of integers as input and returns a new list containing only the even integers from the original list.\n\n8. **Double all integers in a list**:\n   Write a method that takes a list of integers as input and returns a new list where each integer is doubled.\n\n9. **Find the count of integers divisible by 3 in a list**:\n   Write a method that takes a list of integers as input and returns the count of integers that are divisible by 3.\n\n10. **Find the sum of squares of all integers in a list**:\n    Write a method that takes a list of integers as input and returns the sum of the squares of all the integers in the list.\n\nThese questions cover a range of Java 8 stream operations and functional programming concepts applied to lists of integers. They can be used to assess candidates' understanding of Java 8 features and their ability to write concise and efficient code.\n\n### few Java 8 coding skill questions around lists of integers with examples\n\nSure! Here are a few more Java 8 coding skill questions along with their solutions:\n\n1. **Question:** Write a Java 8 program to find the sum of all elements in a list of integers.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        \n        int sum = numbers.stream()\n                         .mapToInt(Integer::intValue)\n                         .sum();\n        \n        System.out.println(\"Sum of all elements: \" + sum);\n    }\n}\n```\n\n2. **Question:** Write a Java 8 program to find the maximum element in a list of integers.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        \n        Optional<Integer> max = numbers.stream()\n                                       .max(Integer::compareTo);\n        \n        if (max.isPresent()) {\n            System.out.println(\"Maximum element: \" + max.get());\n        } else {\n            System.out.println(\"List is empty.\");\n        }\n    }\n}\n```\n\n3. **Question:** Write a Java 8 program to find the average of all elements in a list of integers.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.OptionalDouble;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        \n        OptionalDouble average = numbers.stream()\n                                       .mapToDouble(Integer::doubleValue)\n                                       .average();\n        \n        if (average.isPresent()) {\n            System.out.println(\"Average: \" + average.getAsDouble());\n        } else {\n            System.out.println(\"List is empty.\");\n        }\n    }\n}\n```\n\nFeel free to try out these questions and solutions, and let me know if you need further explanations!\n\nCertainly! Here are a few more Java 8 coding skill questions along with their solutions:\n\n4. **Question:** Write a Java 8 program to find the count of even numbers in a list of integers.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        \n        long countEven = numbers.stream()\n                                .filter(n -> n % 2 == 0)\n                                .count();\n        \n        System.out.println(\"Count of even numbers: \" + countEven);\n    }\n}\n```\n\n5. **Question:** Write a Java 8 program to find the product of all elements in a list of integers.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        \n        Optional<Integer> product = numbers.stream()\n                                           .reduce((a, b) -> a * b);\n        \n        if (product.isPresent()) {\n            System.out.println(\"Product of all elements: \" + product.get());\n        } else {\n            System.out.println(\"List is empty.\");\n        }\n    }\n}\n```\n\n6. **Question:** Write a Java 8 program to check if all elements in a list of integers are greater than 10.\n\n```java\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(15, 20, 25, 30, 35);\n        \n        boolean allGreaterThan10 = numbers.stream()\n                                          .allMatch(n -> n > 10);\n        \n        if (allGreaterThan10) {\n            System.out.println(\"All elements are greater than 10.\");\n        } else {\n            System.out.println(\"Some elements are not greater than 10.\");\n        }\n    }\n}\n```\n\nFeel free to try out these questions and solutions, and let me know if you need further assistance!\n\n## few coding skills questions around List of Strings. (only questions)\nCertainly! Here are some Java coding skill questions based on lists of strings:\n\n1. Write a Java program to find the count of strings longer than a specific length in a list of strings.\n  \n2. Write a Java program to sort a list of strings in alphabetical order.\n  \n3. Write a Java program to remove duplicate strings from a list of strings.\n  \n4. Write a Java program to check if a specific string is present in the list of strings.\n  \n5. Write a Java program to concatenate all strings in a list into a single string.\n\n6. Write a Java program to find the count of vowels in each string of a list of strings.\n\n7. Write a Java program to find the longest common prefix among a list of strings.\n\n8. Write a Java program to reverse each string in a list of strings.\n\n9. Write a Java program to find the second largest string length in a list of strings.\n\n10. Write a Java program to find the strings with the maximum and minimum lengths in a list of strings.\n\nFeel free to use these questions for coding interviews or practice! If you need solutions or explanations for any of these questions, just let me know.\n\nCertainly! Here are a few more Java coding skill questions based on lists of strings:\n\n11. Write a Java program to find the frequency of each character in a list of strings.\n\n12. Write a Java program to find the longest palindrome substring in a list of strings.\n\n13. Write a Java program to group strings in a list based on their lengths.\n\n14. Write a Java program to find the strings that are anagrams of each other in a list of strings.\n\n15. Write a Java program to find the strings that contain only unique characters in a list of strings.\n\n16. Write a Java program to find the strings that contain a specific character at a given position in a list of strings.\n\n17. Write a Java program to find the strings that start and end with the same character in a list of strings.\n\n18. Write a Java program to find the strings that have a specific substring occurring more than once in a list of strings.\n\n19. Write a Java program to find the strings that have alternating vowels and consonants in a list of strings.\n\n20. Write a Java program to find the strings that have the same characters but in a different order in a list of strings.\n\nThese questions cover a variety of string manipulation and analysis tasks, offering a good range of challenges for coding practice. If you need further explanation or assistance with any of these questions, feel free to ask!\n\n\n# please write mysql create script for below tables\n\nDepartment \nid, name\nEmployee \nid, name, salary, joining_date, dept_id(FK)\n\nAlso generate dummy data with insert queries\n\n**Answer:** \nSure! Below is the MySQL create script for the two tables along with insert queries to generate dummy data:\n\n```sql\n-- Create Department table\nCREATE TABLE Department (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n\n-- Create Employee table\nCREATE TABLE Employee (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    salary DECIMAL(10, 2) NOT NULL,\n    joining_date DATE NOT NULL,\n    dept_id INT,\n    FOREIGN KEY (dept_id) REFERENCES Department(id)\n);\n\n-- Insert dummy data into Department table\nINSERT INTO Department (name) VALUES\n    ('Finance'),\n    ('Human Resources'),\n    ('Marketing');\n\n-- Insert dummy data into Employee table\nINSERT INTO Employee (name, salary, joining_date, dept_id) VALUES\n    ('John Doe', 50000.00, '2023-01-15', 1),\n    ('Jane Smith', 60000.00, '2022-05-20', 2),\n    ('Michael Johnson', 55000.00, '2023-03-10', 3),\n    ('Emily Brown', 62000.00, '2024-02-28', 1),\n    ('David Wilson', 58000.00, '2022-11-05', 2);\n```\n\nThis script creates two tables: `Department` and `Employee`, and populates them with dummy data. The `Employee` table has a foreign key constraint referencing the `id` column of the `Department` table.\n\n## QUESTION:  Please write queries : \n1. To get the top 10 employee records with the maximum salary\n2. To get all department names with the total number of employees in them:\n\n**Answer:** Here are the corrected queries:\n\n1. **To get the top 10 employee records with the maximum salary:**\n\n```sql\nSELECT id, name, salary \nFROM Employee \nORDER BY salary DESC \nLIMIT 10;\n```\n\nExplanation:\n- We select the `id`, `name`, and `salary` columns from the `Employee` table.\n- We order the result by the `salary` column in descending order using `ORDER BY salary DESC`.\n- Finally, we limit the result to the top 10 records using `LIMIT 10`.\n\n2. **To get all department names with the total number of employees in them:**\n\n```sql\nSELECT d.name, COUNT(e.id) AS total_employees \nFROM Department d \nLEFT JOIN Employee e ON d.id = e.dept_id \nGROUP BY d.name;\n```\n\nExplanation:\n- We select the `name` column from the `Department` table and count the number of employees in each department using `COUNT(e.id)`.\n- We use a `LEFT JOIN` to ensure that we include departments even if they have no employees.\n- We group the result by the department name using `GROUP BY d.name`.\n\n\n### few more query questions and their answers\n\nCertainly! Here are the SQL queries for the provided questions:\n\n1. **Retrieve the names of all employees who joined the company in the year 2023.**\n\n```sql\nSELECT name\nFROM Employee\nWHERE YEAR(joining_date) = 2023;\n```\n\n2. **Find the department with the highest average salary among its employees.**\n\n```sql\nSELECT d.name AS department_name, AVG(e.salary) AS avg_salary\nFROM Department d\nJOIN Employee e ON d.id = e.dept_id\nGROUP BY d.name\nORDER BY avg_salary DESC\nLIMIT 1;\n```\n\n3. **Identify the employee(s) with the lowest salary in the Marketing department.**\n\n```sql\nSELECT name\nFROM Employee\nWHERE dept_id = (SELECT id FROM Department WHERE name = 'Marketing')\nORDER BY salary\nLIMIT 1;\n```\n\n4. **Calculate the total salary expenditure for each department.**\n\n```sql\nSELECT d.name AS department_name, SUM(e.salary) AS total_salary_expenditure\nFROM Department d\nJOIN Employee e ON d.id = e.dept_id\nGROUP BY d.name;\n```\n\n5. **List the names of employees who earn more than the average salary across all departments.**\n\n```sql\nSELECT name\nFROM Employee\nWHERE salary > (SELECT AVG(salary) FROM Employee);\n```\n\n6. **Determine the department(s) with the highest number of employees.**\n\n```sql\nSELECT d.name AS department_name, COUNT(e.id) AS num_employees\nFROM Department d\nLEFT JOIN Employee e ON d.id = e.dept_id\nGROUP BY d.name\nORDER BY num_employees DESC\nLIMIT 1;\n```\n\n7. **Find the employee(s) who joined the company most recently.**\n\n```sql\nSELECT name\nFROM Employee\nORDER BY joining_date DESC\nLIMIT 1;\n```\n\n8. **Retrieve the employee with the highest salary in each department.**\n\n```sql\nSELECT e.name AS employee_name, d.name AS department_name, e.salary\nFROM Employee e\nJOIN Department d ON e.dept_id = d.id\nWHERE (e.salary, e.dept_id) IN (\n    SELECT MAX(salary), dept_id\n    FROM Employee\n    GROUP BY dept_id\n);\n```\n\n9. **Identify the department(s) where no employee has joined yet.**\n\n```sql\nSELECT name AS department_name\nFROM Department\nWHERE id NOT IN (SELECT DISTINCT dept_id FROM Employee);\n```\n\n10. **Calculate the average salary for employees who joined the company before the year 2023.**\n\n```sql\nSELECT AVG(salary) AS average_salary\nFROM Employee\nWHERE YEAR(joining_date) < 2023;\n```\n\nFeel free to try out these queries with your database and let me know if you need further assistance!\n\n## Spring boot JPA entities and repository for both tables\n\nSure! Here are the Spring Boot JPA entity classes and repositories for the `Department` and `Employee` tables:\n\n1. Department Entity:\n\n```java\nimport javax.persistence.*;\n\n@Entity\n@Table(name = \"Department\")\npublic class Department {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    // Constructors, getters, and setters\n}\n```\n\n2. Employee Entity:\n\n```java\nimport javax.persistence.*;\nimport java.math.BigDecimal;\nimport java.util.Date;\n\n@Entity\n@Table(name = \"Employee\")\npublic class Employee {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"salary\")\n    private BigDecimal salary;\n\n    @Column(name = \"joining_date\")\n    @Temporal(TemporalType.DATE)\n    private Date joiningDate;\n\n    @ManyToOne\n    @JoinColumn(name = \"dept_id\")\n    private Department department;\n\n    // Constructors, getters, and setters\n}\n```\n\n3. Department Repository:\n\n```java\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DepartmentRepository extends JpaRepository<Department, Long> {\n}\n```\n\n4. Employee Repository:\n\n```java\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n}\n```\n\nMake sure to adjust the data types and annotations according to your specific requirements. These classes and interfaces define the entities and repositories required for interacting with the `Department` and `Employee` tables using Spring Data JPA in a Spring Boot application.\n\n\n### can we have reference of all employees in Department entity?\n\nYes, you can have a reference to all employees within the `Department` entity. This can be achieved by using a bidirectional `@OneToMany` relationship, where each department can have multiple employees associated with it. Here's how you can modify the `Department` entity to include this reference:\n\n```java\nimport javax.persistence.*;\nimport java.util.List;\n\n@Entity\n@Table(name = \"Department\")\npublic class Department {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @OneToMany(mappedBy = \"department\")\n    private List<Employee> employees;\n\n    // Constructors, getters, and setters\n}\n```\n\nIn this modified version, the `Department` entity has a `@OneToMany` relationship with the `Employee` entity. The `mappedBy` attribute specifies that the `department` field in the `Employee` entity is the owning side of the relationship. This means that the `Department` entity does not have a foreign key column referencing the `Employee` table.\n\nWith this setup, each `Department` object can have a list of associated `Employee` objects accessible through the `employees` field. This allows you to easily navigate from a department to its employees. Make sure to update the constructors, getters, and setters accordingly.\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"91df4456-b833-4f16-a723-60e97038735e","order":0,"createdDate":{"$date":"2024-09-04T12:05:58.329Z"},"updatedDate":{"$date":"2024-09-04T12:05:58.329Z"},"uniqueId":"fe64aa4a-054d-40d2-ba58-1ce6207de045","__v":0}
{"_id":{"$oid":"66d84dca26f385e1f94d2fd8"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"\n# Please write names of framework for java Unit Testing\n\nCertainly! Here are some popular Java unit testing frameworks:\n\n1. JUnit\n2. TestNG\n3. Mockito\n4. PowerMock\n5. Spock\n6. AssertJ\n7. EasyMock\n8. JMock\n9. Hamcrest\n10. WireMock\n\nThese frameworks are commonly used by Java developers for writing and executing unit tests to ensure the correctness of their code.\n\n\n# is spring boot has some testing library?\n\nYes, Spring Boot does indeed provide support for testing through its testing library. The primary testing framework used in conjunction with Spring Boot is JUnit, which allows developers to write and execute unit tests for their Spring Boot applications. Additionally, Spring Boot provides integration testing support through the Spring Test framework, which allows for testing of Spring components within the application context.\n\nSo while Spring Boot itself doesn't have its own separate testing library, it leverages existing testing frameworks like JUnit and Spring Test to facilitate testing of Spring Boot applications.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"db8ea512-ddc1-409f-a787-2f147c854549","order":0,"createdDate":{"$date":"2024-09-04T12:08:42.759Z"},"updatedDate":{"$date":"2024-09-04T12:08:42.759Z"},"uniqueId":"d7988986-b829-403b-aa14-5e3826120567","__v":0}
{"_id":{"$oid":"66d84e9326f385e1f94d3ef2"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"\n## Please write roles and responsibilities for a software architect\n\nCertainly! Here are some typical roles and responsibilities for a software architect:\n\n**Roles:**\n\n1. **Design Leader:** Lead the architectural design of software systems, ensuring they meet technical and business requirements.\n2. **Technical Expert:** Provide expertise in software development technologies, frameworks, and best practices.\n3. **Team Mentor:** Mentor and guide software development teams on architectural principles, patterns, and practices.\n4. **Collaborator:** Collaborate with stakeholders, including product managers, business analysts, and developers, to understand requirements and constraints.\n5. **Problem Solver:** Identify technical challenges and propose innovative solutions to address them.\n6. **Risk Manager:** Assess technical risks associated with architectural decisions and propose mitigation strategies.\n7. **Quality Advocate:** Advocate for quality attributes such as scalability, reliability, performance, and security in software designs.\n8. **Communicator:** Communicate architectural decisions and rationale to both technical and non-technical stakeholders.\n\n**Responsibilities:**\n\n1. **Architectural Design:** Design software architectures that align with business goals, scalability requirements, and technological constraints.\n2. **Technology Evaluation:** Evaluate new technologies, tools, and frameworks to ensure they meet project requirements and align with architectural principles.\n3. **Documentation:** Document architectural designs, decisions, and guidelines to ensure clarity and maintainability.\n4. **Code Review:** Review code to ensure adherence to architectural standards, coding guidelines, and best practices.\n5. **Performance Optimization:** Identify and optimize performance bottlenecks in software systems through architectural changes or optimizations.\n6. **Security Assurance:** Ensure software systems adhere to security best practices and standards to mitigate security risks.\n7. **Collaboration:** Collaborate with cross-functional teams to align architectural decisions with project goals and requirements.\n8. **Continuous Improvement:** Continuously monitor and evaluate software architectures for opportunities to improve efficiency, scalability, and maintainability.\n9. **Leadership:** Provide technical leadership and guidance to development teams, fostering a culture of collaboration and innovation.\n10. **Problem Resolution:** Resolve technical issues and challenges encountered during the software development lifecycle.\n11. **Compliance:** Ensure software architectures comply with regulatory requirements and industry standards.\n\nThese roles and responsibilities may vary depending on the specific organization, project, and team structure.\n\n\n## Please write roles and responsibilities for software team leader\n\nHere's a breakdown of the roles and responsibilities for a software team leader:\n\n**Roles:**\n\n1. **Team Manager:** Lead and manage a team of software developers, ensuring productivity, motivation, and professional growth.\n2. **Technical Leader:** Provide technical guidance, mentorship, and support to team members to help them solve technical challenges and improve their skills.\n3. **Project Coordinator:** Coordinate the activities of the team to ensure timely delivery of software projects within budget and scope.\n4. **Communicator:** Facilitate communication within the team and with stakeholders to ensure alignment on project goals, priorities, and progress.\n5. **Problem Solver:** Address issues and obstacles encountered by the team, such as technical roadblocks, conflicts, and resource constraints.\n6. **Quality Advocate:** Promote and uphold software quality standards, including code quality, testing practices, and documentation.\n7. **Performance Manager:** Monitor and evaluate the performance of team members, providing feedback, coaching, and recognition as needed.\n8. **Risk Manager:** Identify and mitigate risks that may impact project delivery, such as resource constraints, technical debt, and scope creep.\n\n**Responsibilities:**\n\n1. **Team Leadership:** Lead, motivate, and empower team members to achieve their full potential and contribute effectively to project success.\n2. **Resource Management:** Allocate resources effectively to ensure that project tasks are completed on time and within budget.\n3. **Task Assignment:** Assign tasks to team members based on their skills, availability, and project priorities.\n4. **Progress Monitoring:** Monitor the progress of project tasks and milestones, identifying any deviations from the project plan and taking corrective action as necessary.\n5. **Conflict Resolution:** Address conflicts and disagreements within the team in a constructive and timely manner, fostering a positive and collaborative work environment.\n6. **Technical Guidance:** Provide technical guidance and support to team members, helping them overcome technical challenges and improve their skills.\n7. **Stakeholder Communication:** Communicate regularly with stakeholders, including project managers, clients, and other teams, to provide updates on project status, risks, and issues.\n8. **Continuous Improvement:** Identify opportunities for process improvement and innovation within the team, implementing changes to enhance productivity, quality, and efficiency.\n9. **Performance Evaluation:** Evaluate the performance of team members regularly, providing constructive feedback and support for their professional development.\n10. **Knowledge Sharing:** Encourage knowledge sharing and collaboration within the team, facilitating peer learning and skill development.\n11. **Team Building:** Foster a positive team culture and morale, organizing team-building activities and recognizing team achievements.\n12. **Adherence to Standards:** Ensure that team members adhere to organizational standards, policies, and best practices for software development, quality assurance, and project management.\n\nThese roles and responsibilities may vary depending on the specific organization, project, and team dynamics.\n\n\n\n## Please write roles and responsibilities for senior developer\n\nCertainly! Here's an outline of the roles and responsibilities typically associated with a senior developer:\n\n**Roles:**\n\n1. **Technical Expert:** Serve as a subject matter expert in one or more areas of software development, providing guidance and mentorship to less experienced developers.\n  \n2. **Problem Solver:** Analyze complex technical problems and propose effective solutions, leveraging deep technical knowledge and experience.\n\n3. **Code Reviewer:** Review code written by other team members to ensure adherence to coding standards, best practices, and maintainability.\n\n4. **Technical Leader:** Lead technical discussions and decision-making processes within the team, guiding architectural design and implementation decisions.\n\n5. **Team Mentor:** Mentor junior developers, providing guidance on technical skills, coding techniques, and career development.\n\n6. **Collaborator:** Collaborate with other team members, including product managers, designers, and quality assurance engineers, to ensure alignment on project goals and requirements.\n\n7. **Quality Advocate:** Advocate for software quality, ensuring that code is well-structured, maintainable, and thoroughly tested.\n\n**Responsibilities:**\n\n1. **Software Development:** Write high-quality, efficient, and maintainable code in accordance with project requirements and coding standards.\n\n2. **Design and Architecture:** Contribute to the design and architecture of software systems, ensuring scalability, performance, and maintainability.\n\n3. **Technical Documentation:** Document technical designs, code, and APIs to facilitate understanding and maintainability for other team members.\n\n4. **Code Reviews:** Conduct and participate in code reviews to provide feedback, identify areas for improvement, and ensure consistency and quality across the codebase.\n\n5. **Technical Research:** Stay up-to-date with emerging technologies, tools, and best practices in software development, and evaluate their potential applicability to the project.\n\n6. **Problem Solving:** Analyze and troubleshoot complex technical issues, identifying root causes and implementing effective solutions.\n\n7. **Performance Optimization:** Identify opportunities for performance optimization in the codebase and implement improvements to enhance system efficiency.\n\n8. **Risk Management:** Identify technical risks and dependencies in the project and propose mitigation strategies to address them.\n\n9. **Continuous Improvement:** Continuously seek opportunities to improve software development processes, tools, and practices within the team.\n\n10. **Knowledge Sharing:** Share knowledge and expertise with other team members through code reviews, pair programming, technical presentations, and mentoring.\n\n11. **Estimation and Planning:** Participate in project estimation and planning activities, providing input on technical feasibility, complexity, and effort estimation for tasks and features.\n\n12. **Adherence to Standards:** Ensure that development activities adhere to organizational standards, coding guidelines, and best practices.\n\nSenior developers play a crucial role in ensuring the technical success of software projects by providing leadership, expertise, and guidance to the development team.\n\n\n\n## Please write roles and responsibilities for developer or team lead, who frequently takes part in interview selection process\n\nCertainly! Here's an outline of the roles and responsibilities for a developer or team lead who frequently takes part in the interview selection process:\n\n**Roles:**\n\n1. **Technical Interviewer:** Conduct technical interviews with candidates to assess their skills, experience, and fit for the role.\n\n2. **Evaluator:** Evaluate candidates' technical abilities, problem-solving skills, and potential for growth based on their performance in interviews and assessments.\n\n3. **Ambassador:** Represent the company and team positively during interviews, providing candidates with a clear understanding of the organization's culture, values, and expectations.\n\n4. **Assessor:** Assess candidates' alignment with the team's technical requirements, project needs, and company goals to determine their suitability for the role.\n\n5. **Coach:** Provide constructive feedback to candidates after interviews, offering guidance on areas for improvement and suggestions for further skill development.\n\n6. **Collaborator:** Collaborate with other interviewers and hiring stakeholders, including recruiters, hiring managers, and team members, to ensure a consistent and fair evaluation process.\n\n**Responsibilities:**\n\n1. **Interview Preparation:** Review candidates' resumes, job descriptions, and interview guides to prepare for interviews and ensure alignment with role requirements.\n\n2. **Technical Assessment:** Design and administer technical assessments, coding exercises, and problem-solving tasks to evaluate candidates' technical proficiency and problem-solving abilities.\n\n3. **Behavioral Assessment:** Conduct behavioral interviews to assess candidates' communication skills, teamwork abilities, and cultural fit within the organization.\n\n4. **Candidate Evaluation:** Evaluate candidates' performance in interviews, providing detailed feedback on their technical skills, communication abilities, and overall suitability for the role.\n\n5. **Documentation:** Document interview feedback and evaluation scores in the applicant tracking system (ATS) or hiring database to ensure accurate and consistent record-keeping.\n\n6. **Candidate Experience:** Ensure a positive candidate experience throughout the interview process by communicating clearly, providing timely feedback, and treating candidates with respect and professionalism.\n\n7. **Continuous Improvement:** Provide input and feedback on the interview process, including interview questions, evaluation criteria, and candidate experience, to identify opportunities for improvement and optimization.\n\n8. **Training and Development:** Participate in training sessions and workshops to enhance interview skills, stay updated on best practices in interviewing, and share knowledge with other interviewers.\n\n9. **Diversity and Inclusion:** Advocate for diversity and inclusion in the hiring process by actively seeking out and supporting candidates from diverse backgrounds and underrepresented groups.\n\n10. **Decision Making:** Collaborate with hiring stakeholders to make informed decisions on candidate selection, providing input on technical suitability, cultural fit, and team dynamics.\n\nBy actively participating in the interview selection process, developers or team leads contribute to building a strong and talented team that aligns with the organization's goals and values.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2fa04f96-2079-4049-8fb5-0bb26dc94246","order":0,"createdDate":{"$date":"2024-09-04T12:12:03.877Z"},"updatedDate":{"$date":"2024-09-04T12:12:03.877Z"},"uniqueId":"fb63a21e-7d67-4e22-b0b0-e94734559534","__v":0}
{"_id":{"$oid":"66d84ef426f385e1f94d6bba"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# I am senior java software developer with 13 years. I want to become Software Architect. Please suggest milestones so that I can achieve my target.\n\nBecoming a Software Architect is a great career goal, and with your 13 years of experience as a senior Java software developer, you are well-positioned to make the transition. Here are some milestones and steps you can consider to achieve your goal:\n\n1. **Self-Assessment**:\n   - Reflect on your current skills and knowledge. Identify your strengths and areas that need improvement.\n\n2. **Learn about Software Architecture**:\n   - Start by reading books and online resources about software architecture. Some recommended books include \"Software Architecture in Practice\" by Len Bass, Paul Clements, and Rick Kazman, and \"Clean Architecture\" by Robert C. Martin.\n\n3. **Formal Education**:\n   - Consider enrolling in formal education programs like a master's degree in software engineering or a related field. This can provide you with a solid foundation in architectural principles.\n\n4. **Certifications**:\n   - Look into relevant certifications, such as AWS Certified Solutions Architect or Microsoft Certified: Azure Solutions Architect. These certifications can validate your architectural knowledge.\n\n5. **Hands-on Experience**:\n   - Seek opportunities to work on projects with a focus on architecture. Volunteer for architecture-related tasks in your current role or take on side projects that allow you to design and implement architectural solutions.\n\n6. **Mentorship**:\n   - Find a mentor who is an experienced software architect. They can provide guidance, share their experiences, and help you navigate the path to becoming an architect.\n\n7. **Soft Skills Development**:\n   - Enhance your soft skills, including communication, leadership, and problem-solving. Architects often need to work closely with teams and stakeholders to make critical decisions.\n\n8. **Stay Current**:\n   - The technology landscape is always evolving. Stay up-to-date with the latest trends and emerging technologies in software architecture.\n\n9. **Networking**:\n   - Attend conferences, meetups, and online forums related to software architecture. Networking can help you learn from others and open up potential job opportunities.\n\n10. **Build a Portfolio**:\n    - Document your architectural work and create a portfolio. This can be a valuable tool when applying for architect positions, as it demonstrates your practical experience.\n\n11. **Apply for Architect Roles**:\n    - Start applying for software architect positions when you feel confident in your skills and experience. Be prepared for interviews that may include technical assessments and architectural discussions.\n\n12. **Continuous Improvement**:\n    - Software architecture is a field that requires continuous learning and adaptation. Keep refining your skills and seeking feedback to become a better architect over time.\n\n13. **Contribute to Open Source**:\n    - Participate in open-source projects related to architecture. This not only enhances your skills but also showcases your commitment to the field.\n\n14. **Publish and Share**:\n    - Write articles, give presentations, or contribute to architecture-related blogs. Sharing your knowledge can establish you as an expert in the field.\n\n15. **Seek Feedback**:\n    - Always seek feedback from peers, mentors, and colleagues. Constructive feedback is essential for growth.\n\n16. **Leadership Roles**:\n    - As you gain more experience, consider taking on leadership roles within your organization, such as lead architect or chief architect.\n\nRemember that the path to becoming a software architect may vary from person to person. It's important to set clear goals, stay dedicated, and keep learning throughout your journey. With your experience and determination, you can certainly achieve your goal of becoming a Software Architect.\n\n\n# How can I become System Architect\n\nBecoming a System Architect typically involves the following steps:\n\n1. Education: Start with a strong educational foundation. Most System Architects have a bachelor's or master's degree in computer science, information technology, or a related field.\n\n2. Gain Experience: Work in the IT industry to gain practical experience. Start as a software developer, systems engineer, or a related role to build your expertise.\n\n3. Develop Technical Skills: Master various technical skills, including software architecture, network design, database management, and cloud computing.\n\n4. Learn System Design Principles: Study system design principles and methodologies. Familiarize yourself with architecture patterns like MVC, microservices, and SOA.\n\n5. Certification: Consider pursuing relevant certifications, such as AWS Certified Solutions Architect, Microsoft Certified: Azure Solutions Architect, or Certified Information Systems Security Professional (CISSP).\n\n6. Stay Current: Keep up-to-date with the latest technologies, trends, and best practices in system architecture through continuous learning and professional development.\n\n7. Build a Portfolio: Create a portfolio of your work and projects, showcasing your ability to design and implement systems.\n\n8. Communication Skills: Develop strong communication and interpersonal skills, as System Architects often need to work closely with stakeholders and teams.\n\n9. Networking: Build a professional network by attending conferences, seminars, and joining relevant industry groups.\n\n10. Apply for System Architect Roles: Start applying for System Architect positions or seek internal opportunities within your current organization.\n\nRemember that becoming a System Architect takes time and effort, and gaining practical experience is crucial to your success in this role.\n\n\n\n# I have 15 years of java development experience\n\nHaving 15 years of Java development experience is a valuable asset if you're interested in pursuing a career as a System Architect. Here's how you can leverage your experience:\n\n1. Specialize in Java Enterprise Technologies: Given your extensive Java experience, consider specializing in Java Enterprise Edition (Java EE) or Jakarta EE. These are commonly used in enterprise-level system architecture.\n\n2. Expand Your Knowledge: Broaden your understanding of software architecture patterns, cloud computing, database design, and system integration, as these are essential for system architects.\n\n3. Learn Other Technologies: While Java is a strong foundation, familiarize yourself with other programming languages, frameworks, and tools commonly used in system architecture, such as Python, Node.js, Docker, Kubernetes, and microservices.\n\n4. Certification: Consider earning relevant certifications, like the Java Enterprise Architect or certifications in cloud platforms like AWS, Azure, or GCP.\n\n5. Showcase Your Work: Highlight your Java development expertise and contributions to complex projects in your portfolio. Emphasize your role in system design and architecture decisions.\n\n6. Network and Collaborate: Connect with other professionals in the field, attend architecture-focused meetups or conferences, and collaborate on cross-functional teams to gain experience in architectural decision-making.\n\nWith your extensive Java development background, you have a strong foundation to transition into a System Architect role. Continue building your expertise in system design and architecture, and consider positions or projects that allow you to apply your knowledge in this area.\n\n\n\n\n# What should be my carreer milestone till 35 years of experience\n\nWith 15 years of experience in your career, you likely have significant expertise in your field. By setting ambitious yet achievable career milestones, you can continue to advance and stay motivated. Here are some career milestones you might consider aiming for by the time you reach 35 years of experience:\n\n1. Leadership Role: Aim for a senior leadership position such as Chief Technology Officer (CTO), Chief Information Officer (CIO), or a Director of Technology. Your extensive experience will make you a strong candidate for these roles.\n\n2. Expert in Your Niche: Become a recognized expert in a specific niche within your field, which could involve an industry, technology, or domain expertise.\n\n3. Mentorship and Training: Develop a mentorship program or training initiative to give back to your industry by sharing your knowledge and mentoring the next generation of professionals.\n\n4. Start Your Own Venture: If entrepreneurship interests you, consider starting your own tech company or consultancy, leveraging your deep industry insights.\n\n5. Publish and Present: Share your insights and experience through publications, presentations, or public speaking engagements at industry conferences.\n\n6. Industry Awards and Recognition: Strive to receive industry awards, recognitions, or certifications that highlight your expertise and contributions.\n\n7. Global Projects: Engage in international projects or expand your professional network on a global scale.\n\n8. Continued Learning: Stay up-to-date with the latest trends, technologies, and best practices in your field. Pursue advanced degrees or certifications, if necessary.\n\n9. Balance Work and Life: Aim for a balanced work-life situation and continue to grow personally and professionally.\n\n10. Impactful Projects: Contribute to projects that have a significant impact on your organization or industry.\n\nRemember that milestones can vary depending on your career goals and industry. It's essential to set goals that align with your personal aspirations and the opportunities within your field. Regularly reassess and adjust your milestones as your career evolves.\n\n\n\n# With 35 years experience what could be my role? \n\nWith 35 years of experience in your career, your role and responsibilities can vary significantly based on your expertise, industry, and preferences. Here are some high-level roles that you could consider:\n\n1. Chief Technology Officer (CTO): As a CTO, you would lead the technology strategy and innovation efforts of a company. You'd be responsible for overseeing technology development, architecture, and ensuring that it aligns with the company's goals.\n\n2. Chief Information Officer (CIO): The CIO is typically responsible for managing an organization's IT infrastructure, data management, and information systems. You'd focus on aligning technology with business objectives.\n\n3. Chief Architect: As a Chief Architect, you'd be the top-level technical authority within an organization. Your role would involve setting the technical vision and architectural standards for all projects.\n\n4. Technology Evangelist: You could become a technology evangelist or thought leader, advocating for and educating others about emerging technologies and best practices within your field.\n\n5. Senior Consultant or Advisor: Transition into a senior advisory or consulting role where you provide expert guidance to organizations seeking your expertise.\n\n6. Professor or Educator: Consider becoming a professor or educator to share your knowledge with the next generation of professionals in your field.\n\n7. Independent Consultant: Start your consultancy or freelance business, offering your deep expertise to multiple clients in various projects.\n\n8. Author or Speaker: Share your knowledge through books, articles, and speaking engagements, becoming an influential voice in your industry.\n\n9. Industry Influencer: Work on building your reputation and influence within your industry, serving on boards, committees, or industry associations.\n\n10. Philanthropic or Non-Profit Work: Use your expertise to make a difference in non-profit organizations, contributing to causes you are passionate about.\n\nYour role should align with your interests, values, and the opportunities within your field. At this stage in your career, you have the experience and knowledge to take on leadership and strategic roles, making a significant impact in your industry.\n\n\n#  I would like to start my own work once I have 25 years experience. What should be probable plan to achieve it\n\nStarting your own business or venture after gaining 25 years of experience is an admirable goal. Here's a probable plan to help you achieve this:\n\n1. Identify Your Business Idea:\n   - Leverage your deep industry knowledge and identify a gap or problem that your business can address.\n   - Consider your passions and interests, as a successful business often stems from something you're passionate about.\n\n2. Market Research:\n   - Conduct thorough market research to understand your target audience, competitors, and industry trends.\n   - Identify your unique value proposition and what sets your business apart.\n\n3. Business Plan:\n   - Create a detailed business plan outlining your business goals, strategies, financial projections, and operational plan.\n\n4. Financial Planning:\n   - Assess your financial situation and secure funding if necessary. This could be from personal savings, investors, loans, or grants.\n\n5. Legal and Regulatory Considerations:\n   - Register your business, obtain any necessary licenses, and comply with legal and regulatory requirements.\n\n6. Build a Team:\n   - Hire or partner with individuals who complement your skills and can help you execute your business plan.\n\n7. Branding and Marketing:\n   - Develop a strong brand identity and marketing strategy to create awareness about your business.\n   - Build an online presence through a professional website and social media.\n\n8. Product/Service Development:\n   - Develop and refine your product or service, ensuring it meets the needs of your target market.\n\n9. Sales and Customer Acquisition:\n   - Create a sales strategy to acquire your first customers and establish a customer base.\n\n10. Operations and Scalability:\n    - Streamline your operations and plan for scalability as your business grows.\n\n11. Continuous Learning:\n    - Stay updated with industry trends and continuously learn about entrepreneurship and business management.\n\n12. Networking:\n    - Leverage your professional network to seek advice, partnerships, and potential clients.\n\n13. Test and Iterate:\n    - Be prepared to adapt and evolve your business based on feedback and changing market conditions.\n\n14. Transition Smoothly:\n    - Plan a smooth transition from your current role to entrepreneurship, considering financial stability and responsibilities.\n\nStarting a business is a significant undertaking, and it's important to be well-prepared and committed to your vision. Seek guidance from mentors and consider taking entrepreneurship courses or seeking professional advice to increase your chances of success.\n\n\n\n### Please re-write questions of each sub-category of Aspiration to Become a Software Architect\n\nCertainly! Here are the questions re-written for each sub-category of Aspiration to Become a Software Architect:\n\n**Definition of Software Architect Role and Responsibilities:**\n1. How would you define the role of a Software Architect, and what are the key responsibilities associated with it?\n2. Can you explain the difference between a Software Architect and other roles in software development, such as a software engineer or a project manager?\n\n**Necessary Qualifications and Experience:**\n1. What qualifications and experience do you believe are necessary to transition into a Software Architect role?\n2. Can you discuss any specific skills or competencies you consider essential for success as a Software Architect?\n\n**Leadership and Decision-Making Skills:**\n1. How do you demonstrate leadership and decision-making skills in your current role or projects?\n2. Can you provide examples of situations where you had to make architectural decisions and lead a team to implement them?\n\n**Staying Current with Technology Trends:**\n1. How do you stay informed about emerging technologies, trends, and best practices in software architecture?\n2. Can you discuss any recent technology trends or innovations that you find particularly exciting or relevant to software architecture?\n\n**Examples of Successful Architectural Designs:**\n1. Can you share examples of successful architectural designs or solutions you have implemented in previous projects?\n2. How did these architectural designs contribute to the overall success of the projects?\n\n**Balancing Technical Feasibility and Business Requirements:**\n1. How do you approach balancing technical feasibility with business requirements when designing software solutions?\n2. Can you discuss a specific instance where you had to reconcile conflicting technical and business priorities in an architectural decision?\n\n**Collaborative and Mentoring Approach:**\n1. How do you collaborate with other team members, stakeholders, and clients to ensure alignment with architectural goals and objectives?\n2. Can you discuss your approach to mentoring and coaching junior team members in software architecture principles and practices?\n\n**Risk Assessment and Mitigation:**\n1. How do you assess and mitigate risks associated with architectural decisions and design choices?\n2. Can you provide examples of how you have addressed potential risks or vulnerabilities in architectural designs?\n\n**Handling Conflicting Priorities and Opinions:**\n1. How do you handle conflicting priorities or opinions among stakeholders when defining the architectural direction of a project?\n2. Can you discuss a specific instance where you had to navigate conflicting viewpoints and reach consensus on an architectural decision?\n\n**Documentation and Communication of Architectural Designs:**\n1. What tools or techniques do you use for documenting and communicating architectural designs and decisions to stakeholders and team members?\n2. How do you ensure that architectural designs are well-understood and effectively communicated to all relevant parties?\n\n**Performance Evaluation and Scalability Assessment:**\n1. How do you evaluate the performance and scalability of architectural designs?\n2. Can you discuss any metrics or benchmarks you use to measure the performance and scalability of software solutions?\n\n**Long-Term Career Vision and Development Plans:**\n1. What is your long-term career vision as a Software Architect, and how do you plan to achieve it?\n2. Can you discuss your plans for continued professional development and growth in the field of software architecture?\n\nThese questions aim to assess your readiness, skills, and mindset for transitioning into a Software Architect role, covering various aspects such as leadership, collaboration, decision-making, and long-term career aspirations.\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"110b083e-a9f9-4b23-bf3d-634e4b43664b","order":0,"createdDate":{"$date":"2024-09-04T12:13:40.113Z"},"updatedDate":{"$date":"2024-09-04T12:13:40.113Z"},"uniqueId":"34e0c29c-16d5-410c-a270-49fc3d7cfaf6","__v":0}
{"_id":{"$oid":"66d84fbf26f385e1f94d87f0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"## AWS sevices different categories and name of services\n\nAmazon Web Services (AWS) offers a wide range of cloud computing services across various categories. Here are some of the main categories along with examples of AWS services within each category:\n\n1. **Compute Services**:\n   - Amazon Elastic Compute Cloud (EC2): Virtual servers in the cloud.\n   - AWS Lambda: Serverless compute service for running code without provisioning or managing servers.\n   - AWS Elastic Beanstalk: Platform as a Service (PaaS) for deploying and managing applications.\n\n2. **Storage Services**:\n   - Amazon Simple Storage Service (S3): Object storage service for storing and retrieving data.\n   - Amazon Elastic Block Store (EBS): Block storage volumes for EC2 instances.\n   - Amazon Glacier: Low-cost, long-term storage for data archiving and backup.\n\n3. **Database Services**:\n   - Amazon Relational Database Service (RDS): Managed relational database service for MySQL, PostgreSQL, Oracle, SQL Server, and others.\n   - Amazon DynamoDB: Fully managed NoSQL database service.\n   - Amazon Redshift: Fully managed data warehouse service.\n\n4. **Networking Services**:\n   - Amazon Virtual Private Cloud (VPC): Isolated virtual network in the AWS cloud.\n   - Amazon Route 53: Domain Name System (DNS) web service.\n   - AWS Direct Connect: Dedicated network connection between AWS and your data center.\n\n5. **Security, Identity, and Compliance Services**:\n   - AWS Identity and Access Management (IAM): Identity and access management service for controlling user access to AWS resources.\n   - Amazon GuardDuty: Managed threat detection service that continuously monitors for malicious activity.\n   - AWS Key Management Service (KMS): Managed service for creating and controlling encryption keys.\n\n6. **Analytics Services**:\n   - Amazon Athena: Interactive query service for analyzing data in S3 using standard SQL.\n   - Amazon EMR: Managed Hadoop framework for big data processing.\n   - Amazon Kinesis: Managed streaming data service for real-time analytics.\n\n7. **Machine Learning Services**:\n   - Amazon SageMaker: Fully managed machine learning service for building, training, and deploying machine learning models.\n   - Amazon Comprehend: Natural language processing (NLP) service for extracting insights from text.\n   - Amazon Rekognition: Image and video analysis service for object and facial recognition.\n\n8. **Internet of Things (IoT) Services**:\n   - AWS IoT Core: Managed cloud service for securely connecting IoT devices to the AWS cloud.\n   - AWS IoT Greengrass: Software that extends AWS IoT to edge devices, allowing them to run local compute, messaging, and data caching.\n\n9. **Developer Tools**:\n   - AWS CodePipeline: Continuous integration and continuous delivery (CI/CD) service for automating software release workflows.\n   - AWS CodeBuild: Fully managed build service for compiling source code and running tests.\n   - AWS CodeDeploy: Automated deployment service for deploying applications to EC2 instances or Lambda functions.\n\n10. **Management and Governance Services**:\n    - AWS CloudFormation: Infrastructure as Code (IaC) service for provisioning and managing AWS resources.\n    - Amazon CloudWatch: Monitoring and observability service for collecting and analyzing metrics, logs, and events.\n    - AWS Organizations: Service for centrally managing and governing multiple AWS accounts.\n\nThese are just some examples of the many AWS services available across different categories. AWS continues to innovate and expand its service offerings to meet the evolving needs of cloud computing customers.\n\n## In which category AWS glue lies?\n\nAWS Glue falls under the category of **Data Integration** or **Data Management** services. Specifically, it is an Extract, Transform, and Load (ETL) service provided by Amazon Web Services (AWS). Glue is designed to automate the process of discovering, cataloging, cleaning, and transforming data, making it easier to prepare and load data into data lakes, data warehouses, or analytical databases for analysis and reporting purposes.\n\n## What may be other services in same category\n\nIn the same category of Data Integration or Data Management, AWS offers several other services that complement AWS Glue and help organizations manage and process their data efficiently. Some of these services include:\n\n1. **AWS Data Pipeline**: A managed ETL service that orchestrates and automates the movement and transformation of data across various AWS services and on-premises data sources.\n\n2. **Amazon EMR (Elastic MapReduce)**: A managed big data platform that enables processing and analysis of large-scale data using popular distributed processing frameworks such as Apache Hadoop, Apache Spark, and Apache Hive.\n\n3. **Amazon Kinesis**: A suite of services for real-time data streaming and processing, including Amazon Kinesis Data Streams, Amazon Kinesis Data Firehose, and Amazon Kinesis Data Analytics.\n\n4. **AWS Glue DataBrew**: A visual data preparation tool that helps clean and transform data without writing code, making it easier for users to explore and prepare data for analytics.\n\n5. **AWS Lake Formation**: A service that simplifies the process of setting up and managing data lakes on AWS, providing capabilities for data ingestion, cataloging, security, and access control.\n\n6. **AWS Database Migration Service (DMS)**: A service that helps migrate databases to AWS quickly and securely, enabling organizations to move data between on-premises databases, AWS database services, and other cloud platforms.\n\n7. **Amazon Redshift Spectrum**: A feature of Amazon Redshift that allows querying data directly from Amazon S3, extending the data warehouse's querying capabilities to include data stored in S3 without the need to load it into Redshift.\n\n8. **AWS Glue Schema Registry**: A service that provides a centralized repository for storing and managing schema definitions, allowing users to track and version schemas used in data transformation workflows.\n\n9. **AWS AppFlow**: A fully managed integration service that enables bi-directional data flow between AWS services and Software as a Service (SaaS) applications, such as Salesforce, Slack, and Google Analytics.\n\n10. **Amazon Managed Workflows for Apache Airflow (MWAA)**: A managed service for Apache Airflow that makes it easier to orchestrate and automate complex data workflows, including data processing, transformation, and scheduling tasks.\n\nThese services, along with AWS Glue, provide a comprehensive suite of tools and capabilities for managing, integrating, and analyzing data in the AWS cloud.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"ea3f8edd-7c17-4ad1-8e6e-dc99b739c947","order":0,"createdDate":{"$date":"2024-09-04T12:17:03.105Z"},"updatedDate":{"$date":"2024-09-04T12:17:03.105Z"},"uniqueId":"86b332e8-0a2e-4f14-8ca8-0c23edbd03fe","__v":0}
{"_id":{"$oid":"66d8503a26f385e1f94da453"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"## Please write few interview questions for docker with answers \n\nCertainly! Here are some interview questions for Docker along with sample answers:\n\n1. **What is Docker, and how does it differ from traditional virtualization?**\n\n   *Answer:* \"Docker is a platform for developing, shipping, and running applications using containerization technology. Unlike traditional virtualization, which involves running multiple virtual machines on a single physical machine, Docker containers share the host operating system's kernel and are more lightweight and efficient.\"\n\n2. **Explain the concept of containerization in Docker and its advantages.**\n\n   *Answer:* \"Containerization in Docker involves packaging applications and their dependencies into standardized units called containers. Containers encapsulate the application code, runtime, libraries, and dependencies, allowing them to run consistently across different environments. Containerization offers advantages such as portability, scalability, isolation, and faster deployment.\"\n\n3. **How do you create a Docker container from a Dockerfile?**\n\n   *Answer:* \"To create a Docker container from a Dockerfile, we use the `docker build` command followed by the path to the directory containing the Dockerfile. For example: `docker build -t myapp:latest .`. This command builds an image tagged as `myapp:latest` using the Dockerfile in the current directory (`.`).\"\n\n4. **What are Docker images and Docker containers, and how do they relate to each other?**\n\n   *Answer:* \"A Docker image is a read-only template containing the application code, dependencies, and configuration needed to run an application. Docker containers are lightweight, runnable instances of Docker images. Containers are created from images and can be started, stopped, and deleted as needed. Images serve as the basis for containers, providing the environment in which the application runs.\"\n\n5. **Explain the difference between Docker volumes and Docker bind mounts.**\n\n   *Answer:* \"Docker volumes and bind mounts are both mechanisms for persisting data outside of a container's filesystem. However, Docker volumes are managed by Docker and stored within the Docker ecosystem, while bind mounts are specified by the user and can be located anywhere on the host filesystem. Volumes are generally preferred for production use cases due to their ease of management and support for features like backup and restoration.\"\n\n6. **How do you scale Docker containers horizontally to handle increased load?**\n\n   *Answer:* \"To scale Docker containers horizontally, we can use Docker Swarm or Kubernetes for orchestration. These tools allow us to deploy multiple instances of a container across multiple hosts, distributing the workload and ensuring high availability. Additionally, we can leverage Docker Compose to define and manage multi-container applications and use Docker's service scaling feature to scale individual services within a Docker Compose stack.\"\n\n7. **How do you troubleshoot and debug issues in Docker containers?**\n\n   *Answer:* \"To troubleshoot and debug issues in Docker containers, we can use tools like `docker logs` to view container logs, `docker exec` to execute commands inside a running container, and `docker inspect` to inspect container metadata. We can also attach to a running container's console using `docker attach` or `docker exec -it` to interactively debug issues. Additionally, Docker provides health checks and diagnostics features to monitor container health and performance.\"\n\nThese questions cover some fundamental concepts and practical aspects of Docker, providing a comprehensive understanding of how to work with containers and manage containerized applications.\n\nCertainly! Here are a few more interview questions for Docker:\n\n8. **What is Docker Compose, and how does it simplify multi-container application deployment?**\n\n   *Answer:* \"Docker Compose is a tool for defining and running multi-container Docker applications using a YAML file. It allows developers to define the services, networks, and volumes for an application in a single file, making it easy to manage complex configurations and dependencies. With Docker Compose, developers can spin up an entire application stack with a single command, facilitating development, testing, and deployment.\"\n\n9. **Explain the difference between Docker images and Docker registries.**\n\n   *Answer:* \"Docker images are portable, lightweight, and standalone packages that contain everything needed to run an application, including the code, runtime, libraries, and dependencies. Docker registries are repositories for storing and sharing Docker images. Registries can be public, like Docker Hub, or private, hosted on-premises or in the cloud. Images are pushed to and pulled from registries to distribute and share applications across environments.\"\n\n10. **How do you optimize Docker images for size and performance?**\n\n    *Answer:* \"To optimize Docker images for size and performance, we can follow best practices such as using multi-stage builds to reduce image size, minimizing the number of layers by combining RUN commands, using a minimal base image like Alpine Linux, and removing unnecessary dependencies and files. Additionally, we can leverage Docker's caching mechanism and build arguments to optimize image builds and reduce build times.\"\n\n11. **What are Docker networks, and how do they facilitate communication between containers?**\n\n    *Answer:* \"Docker networks are virtual networks that enable communication between containers running on the same host or across multiple hosts. Docker provides default bridge, host, and overlay networks, as well as the ability to create custom networks. Containers within the same network can communicate with each other using their container names or IP addresses, allowing for seamless inter-container communication.\"\n\n12. **How do you ensure security in Docker containers and containerized environments?**\n\n    *Answer:* \"To ensure security in Docker containers, we follow best practices such as using official base images from trusted sources, regularly updating images and dependencies to patch security vulnerabilities, minimizing the attack surface by running containers with least privilege, enabling Docker Content Trust to verify image integrity, and scanning images for vulnerabilities using tools like Clair or Trivy. Additionally, we implement network segmentation, access controls, and monitoring to detect and mitigate security threats in containerized environments.\"\n\nThese questions cover additional aspects of Docker, including orchestration, optimization, networking, and security, providing a more comprehensive understanding of Docker's capabilities and best practices.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"92c28dae-d0c8-4ee2-b185-429c33868178","order":0,"createdDate":{"$date":"2024-09-04T12:19:06.061Z"},"updatedDate":{"$date":"2024-09-04T12:19:06.061Z"},"uniqueId":"0d954cac-d39c-48f6-9ca2-f22f1fcee4e8","__v":0}
{"_id":{"$oid":"66d850ac26f385e1f94dc0a6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# What is kubernetes and what is it's benefit of use? \n\nKubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. Containers allow developers to package an application and its dependencies into a single unit for easy deployment and scalability.\n\nBenefits of using Kubernetes include:\n\n1. **Container Orchestration:** Kubernetes automates the deployment and scaling of containerized applications, making it easier to manage and scale complex systems.\n\n2. **Scalability:** It enables seamless scaling of applications up or down based on demand, ensuring optimal resource utilization.\n\n3. **High Availability:** Kubernetes provides mechanisms for ensuring that applications are highly available, reducing downtime and improving reliability.\n\n4. **Resource Efficiency:** Efficiently utilizes hardware resources by packing containers onto nodes based on their resource requirements.\n\n5. **Declarative Configuration:** Applications and their components are defined declaratively, making it easier to understand, manage, and version control.\n\n6. **Service Discovery and Load Balancing:** Kubernetes automates the discovery of services and distributes network traffic across multiple instances for load balancing.\n\n7. **Rolling Updates and Rollbacks:** Facilitates seamless updates and rollbacks of applications without downtime, ensuring continuous delivery.\n\n8. **Self-healing:** Automatically replaces and reschedules containers that fail, improving application resilience.\n\n9. **Multi-Cloud Support:** Supports deployment across various cloud providers, making it easier to avoid vendor lock-in.\n\n10. **Community Support:** Being open source, Kubernetes has a large and active community, contributing to its ongoing development and improvement.\n\nOverall, Kubernetes simplifies the deployment and management of containerized applications, providing a robust and scalable infrastructure for modern, cloud-native applications.\n\n\n# I have one node js server running on port 3003 and reactjs application running on 3002 port. Both application are placed under chatapp folder named backend and frontend folders respectively. Please suggest how to run with kubernetes\n\nTo run your Node.js server and React.js application using Kubernetes, you'll need to create Kubernetes manifests (YAML files) to define the deployment, service, and potentially an Ingress resource. Below is a simple example to get you started.\n\n1. **Node.js Server Deployment YAML (`backend-deployment.yaml`):**\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend\n  template:\n    metadata:\n      labels:\n        app: backend\n    spec:\n      containers:\n        - name: backend-container\n          image: your/nodejs-image:tag\n          ports:\n            - containerPort: 3003\n```\n\n2. **React.js Application Deployment YAML (`frontend-deployment.yaml`):**\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frontend-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frontend\n  template:\n    metadata:\n      labels:\n        app: frontend\n    spec:\n      containers:\n        - name: frontend-container\n          image: your/reactjs-image:tag\n          ports:\n            - containerPort: 3002\n```\n\n3. **Service YAML (`service.yaml`):**\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-service\nspec:\n  selector:\n    app: backend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3003\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 3002\n```\n\n4. **Apply the Deployments and Services:**\n\n```bash\nkubectl apply -f backend-deployment.yaml\nkubectl apply -f frontend-deployment.yaml\nkubectl apply -f service.yaml\n```\n\nThis assumes you have Docker images for your Node.js and React.js applications. Make sure to replace `\"your/nodejs-image:tag\"` and `\"your/reactjs-image:tag\"` with the actual image references.\n\nThis is a basic setup. Depending on your requirements, you might need additional configurations, such as Ingress for external access, persistent volumes, and environment variables. Adjust the YAML files accordingly based on your needs.\n\n\n## Please write few interview questions for kubernetes with answers\n\n\nCertainly! Here are some interview questions for Kubernetes along with sample answers:\n\n1. **What is Kubernetes, and what problem does it solve in containerized environments?**\n\n   *Answer:* \"Kubernetes is an open-source container orchestration platform developed by Google. It automates the deployment, scaling, and management of containerized applications, providing features such as service discovery, load balancing, and automated rollouts and rollbacks. Kubernetes solves the problem of deploying and managing containerized applications at scale, allowing developers to focus on building and shipping applications without worrying about infrastructure management.\"\n\n2. **Explain the architecture of Kubernetes and its components.**\n\n   *Answer:* \"The architecture of Kubernetes consists of several components that work together to manage containerized applications. The main components include:\n   - Master Node: Manages the cluster and coordinates communication between nodes.\n   - Worker Node: Runs containers and executes tasks assigned by the master node.\n   - kube-apiserver: Exposes the Kubernetes API, which allows users to interact with the cluster.\n   - kube-controller-manager: Manages various controllers that regulate the state of the cluster.\n   - kube-scheduler: Assigns pods to nodes based on resource requirements and constraints.\n   - kubelet: Runs on each node and communicates with the master node to manage containers.\n   - kube-proxy: Manages network communication between pods and services.\"\n\n3. **How do you deploy an application on Kubernetes?**\n\n   *Answer:* \"To deploy an application on Kubernetes, we typically create a YAML manifest file describing the desired state of the application, including the deployment, service, and optionally other resources such as pods, persistent volumes, and secrets. We then use the `kubectl apply` command to apply the manifest file to the cluster, which instructs Kubernetes to create and manage the specified resources.\"\n\n4. **What is a Pod in Kubernetes, and why is it the smallest deployable unit?**\n\n   *Answer:* \"A Pod in Kubernetes is the smallest deployable unit that represents one or more containers running together on the same host. Pods encapsulate application containers, storage resources, and a unique network IP, providing a cohesive unit of deployment and scaling. Pods enable flexible scaling, load balancing, and management of containerized applications.\"\n\n5. **Explain the concept of Kubernetes Services and how they enable communication between Pods.**\n\n   *Answer:* \"Kubernetes Services are an abstraction that defines a logical set of Pods and a policy by which to access them. Services enable communication between Pods within the cluster and external clients outside the cluster. Kubernetes provides different types of Services, such as ClusterIP, NodePort, and LoadBalancer, to expose Pods to other components within the cluster or to external users.\"\n\n6. **What are Kubernetes Deployments, and how do they facilitate application updates and rollbacks?**\n\n   *Answer:* \"Kubernetes Deployments are a declarative way to manage the lifecycle of application Pods. Deployments ensure that a specified number of replica Pods are running at any given time, handling updates, scaling, and rollbacks automatically. By defining a desired state and desired number of replicas, Deployments enable seamless application updates and rollbacks without downtime or manual intervention.\"\n\nThese questions cover fundamental concepts and practical aspects of Kubernetes, providing a comprehensive understanding of how to deploy, manage, and scale containerized applications using Kubernetes.\n\nCertainly! Here are a few more interview questions for Kubernetes:\n\n7. **Explain the concept of Kubernetes namespaces and their use cases.**\n\n   *Answer:* \"Kubernetes namespaces provide a way to divide cluster resources between multiple users or teams. They enable isolation, resource quota enforcement, and segregation of objects within a cluster. Namespaces can be used to organize and manage applications, enforce access controls, and prevent resource conflicts in multi-tenant environments.\"\n\n8. **What is Kubernetes' Horizontal Pod Autoscaler, and how does it work?**\n\n   *Answer:* \"The Horizontal Pod Autoscaler (HPA) in Kubernetes automatically adjusts the number of replica Pods in a Deployment, ReplicaSet, or StatefulSet based on observed CPU utilization or other custom metrics. HPA continuously monitors resource metrics and scales Pods up or down to maintain target resource utilization levels, ensuring optimal performance and efficient resource utilization.\"\n\n9. **How do you handle application configuration and secrets in Kubernetes?**\n\n    *Answer:* \"In Kubernetes, application configuration can be managed using ConfigMaps and Secrets. ConfigMaps store configuration data as key-value pairs, which can be consumed by containers as environment variables or mounted as files in volumes. Secrets store sensitive information such as passwords, API keys, or certificates, and are encoded or encrypted at rest and in transit. Both ConfigMaps and Secrets enable decoupling of configuration from application code and support dynamic updates without redeploying the application.\"\n\n10. **Explain the difference between StatefulSets and Deployments in Kubernetes.**\n\n    *Answer:* \"StatefulSets and Deployments are both controllers used to manage Pods in Kubernetes, but they differ in their handling of stateful and stateless applications. Deployments are ideal for stateless applications that can be scaled horizontally and don't require persistent identity or storage. StatefulSets, on the other hand, are designed for stateful applications that require stable, unique network identifiers, persistent storage, and ordered deployment and scaling. StatefulSets ensure that Pods are deployed and scaled in a predictable and deterministic manner, with stable network identities and persistent storage.\"\n\n11. **What is Kubernetes Ingress, and how does it enable external access to services in the cluster?**\n\n    *Answer:* \"Kubernetes Ingress is an API object that defines rules for routing external HTTP and HTTPS traffic to services within the cluster. Ingress acts as a layer 7 load balancer, allowing external clients to access services based on hostnames, paths, or other request parameters. Ingress controllers such as Nginx, Traefik, or HAProxy implement Ingress rules and manage traffic routing, SSL termination, and load balancing.\"\n\n12. **How do you monitor and troubleshoot Kubernetes clusters?**\n\n    *Answer:* \"To monitor Kubernetes clusters, we can use tools like Prometheus, Grafana, or Kubernetes' native monitoring stack (Heapster, InfluxDB, and Grafana). These tools provide insights into cluster resource usage, application performance, and health metrics. For troubleshooting, we can use `kubectl` commands to inspect cluster resources, view logs, and debug networking issues. Kubernetes also provides diagnostic tools like `kubectl describe` and `kubectl logs` to identify and resolve problems in Pods, Deployments, or other objects.\"\n\nThese questions cover additional aspects of Kubernetes, including scaling, configuration management, networking, and monitoring, providing a more comprehensive understanding of Kubernetes' capabilities and best practices.\n\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f77cbf83-c3ab-46c4-bc92-17eba8645cff","order":0,"createdDate":{"$date":"2024-09-04T12:21:00.72Z"},"updatedDate":{"$date":"2024-09-04T12:21:00.72Z"},"uniqueId":"08351579-c814-4fa5-8395-ceb237cc902f","__v":0}
{"_id":{"$oid":"66d8512b26f385e1f94ddd03"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# What are commonly used commands of docker\n\nDocker is a popular containerization platform that allows you to build, deploy, and manage applications using lightweight containers. Here are some commonly used Docker commands:\n\n1. **docker run**: This command is used to create and start a new container from a specified image. It pulls the image from a registry if it doesn't already exist locally.\n\n   Example: `docker run image_name`\n\n2. **docker build**: This command is used to build a Docker image from a Dockerfile, which contains instructions on how to create the image.\n\n   Example: `docker build -t image_name .`\n\n3. **docker pull**: This command is used to download a Docker image from a registry, without starting a container.\n\n   Example: `docker pull image_name`\n\n4. **docker ps**: This command lists all running containers.\n\n   Example: `docker ps`\n\n5. **docker images**: This command lists all locally available Docker images.\n\n   Example: `docker images`\n\n6. **docker stop**: This command is used to stop a running container.\n\n   Example: `docker stop container_id`\n\n7. **docker rm**: This command is used to remove one or more stopped containers.\n\n   Example: `docker rm container_id`\n\n8. **docker rmi**: This command is used to remove one or more Docker images.\n\n   Example: `docker rmi image_name`\n\n9. **docker exec**: This command is used to run a command inside a running container.\n\n   Example: `docker exec container_id command`\n\n10. **docker-compose**: This command is used to manage multi-container Docker applications using a YAML file (docker-compose.yml).\n\n    Example: `docker-compose up`\n\nThese are just a few examples of commonly used Docker commands. Docker provides a comprehensive set of commands and options for managing containers and images, allowing you to perform various tasks related to containerization and deployment.\n\n\n\n# What are commonly used commands of docker-compose\n\nDocker Compose is a tool used to define and run multi-container Docker applications. It allows you to manage multiple containers and their dependencies using a YAML file. Here are some commonly used Docker Compose commands:\n\n1. **docker-compose up**: This command creates and starts containers defined in the docker-compose.yml file.\n\n   Example: `docker-compose up`\n\n2. **docker-compose down**: This command stops and removes containers, networks, and volumes defined in the docker-compose.yml file.\n\n   Example: `docker-compose down`\n\n3. **docker-compose build**: This command builds or rebuilds the images defined in the docker-compose.yml file.\n\n   Example: `docker-compose build`\n\n4. **docker-compose start**: This command starts existing containers defined in the docker-compose.yml file.\n\n   Example: `docker-compose start`\n\n5. **docker-compose stop**: This command stops running containers defined in the docker-compose.yml file, without removing them.\n\n   Example: `docker-compose stop`\n\n6. **docker-compose restart**: This command restarts containers defined in the docker-compose.yml file.\n\n   Example: `docker-compose restart`\n\n7. **docker-compose ps**: This command lists the status of containers defined in the docker-compose.yml file.\n\n   Example: `docker-compose ps`\n\n8. **docker-compose logs**: This command displays the logs of containers defined in the docker-compose.yml file.\n\n   Example: `docker-compose logs`\n\n9. **docker-compose exec**: This command runs a command inside a running container defined in the docker-compose.yml file.\n\n   Example: `docker-compose exec service_name command`\n\n10. **docker-compose pull**: This command pulls the latest images for services defined in the docker-compose.yml file.\n\n    Example: `docker-compose pull`\n\nThese are some commonly used commands in Docker Compose. With Docker Compose, you can define complex multi-container applications, specify their dependencies and configurations, and manage them using a single command-line tool.\n\n\n\n# What are commonly used commands for Kubernetes\n\nKubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. Here are some commonly used commands for Kubernetes:\n\n1. **kubectl create**: This command is used to create resources in a Kubernetes cluster. You can create various resources such as deployments, services, pods, etc.\n\n   Example: `kubectl create deployment my-deployment --image=image_name`\n\n2. **kubectl get**: This command is used to retrieve information about resources in a Kubernetes cluster. You can get information about pods, services, deployments, nodes, etc.\n\n   Example: `kubectl get pods`\n\n3. **kubectl describe**: This command provides detailed information about a specific resource.\n\n   Example: `kubectl describe pod my-pod`\n\n4. **kubectl apply**: This command is used to apply configuration changes to resources in a Kubernetes cluster. It is often used to update or modify existing resources.\n\n   Example: `kubectl apply -f my-config.yaml`\n\n5. **kubectl delete**: This command is used to delete resources from a Kubernetes cluster.\n\n   Example: `kubectl delete pod my-pod`\n\n6. **kubectl scale**: This command is used to scale the number of replicas for a deployment or replicaset.\n\n   Example: `kubectl scale deployment my-deployment --replicas=3`\n\n7. **kubectl logs**: This command is used to retrieve the logs of a specific pod.\n\n   Example: `kubectl logs my-pod`\n\n8. **kubectl exec**: This command is used to execute a command inside a running container in a pod.\n\n   Example: `kubectl exec my-pod -- command`\n\n9. **kubectl port-forward**: This command is used to forward network traffic from a local machine to a pod.\n\n   Example: `kubectl port-forward my-pod 8080:80`\n\n10. **kubectl rollout**: This command is used to manage rollouts and updates of deployments.\n\n    Example: `kubectl rollout restart deployment my-deployment`\n\nThese are some commonly used commands in Kubernetes. Kubernetes provides a rich set of commands and options to manage and operate containerized applications in a cluster environment.\n\n\n# What are commonly used commands used in Dockerfile\n\nA Dockerfile is a text file that contains instructions for building a Docker image. Here are some commonly used commands in a Dockerfile:\n\n1. **FROM**: This command specifies the base image for your Docker image. It is typically the first line in a Dockerfile.\n\n   Example: `FROM ubuntu:latest`\n\n2. **RUN**: This command executes a command inside the container during the build process. It is used to install packages, run scripts, or perform any other necessary setup steps.\n\n   Example: `RUN apt-get update && apt-get install -y python3`\n\n3. **COPY**: This command copies files and directories from the build context (the directory containing the Dockerfile) to the image.\n\n   Example: `COPY app.py /app/`\n\n4. **ADD**: This command is similar to COPY, but it can also handle URLs and automatically extract compressed files.\n\n   Example: `ADD https://example.com/file.tar.gz /`\n\n5. **WORKDIR**: This command sets the working directory for subsequent instructions in the Dockerfile.\n\n   Example: `WORKDIR /app`\n\n6. **EXPOSE**: This command specifies the network ports that the container listens on at runtime.\n\n   Example: `EXPOSE 8080`\n\n7. **CMD**: This command specifies the default command to run when a container is started from the image. It can be overridden with command-line arguments.\n\n   Example: `CMD [\"python3\", \"app.py\"]`\n\n8. **ENTRYPOINT**: This command specifies the executable that will run when the container starts. It is similar to CMD but cannot be overridden with command-line arguments.\n\n   Example: `ENTRYPOINT [\"python3\", \"app.py\"]`\n\n9. **ENV**: This command sets environment variables inside the container.\n\n   Example: `ENV MY_ENV_VAR=my_value`\n\n10. **VOLUME**: This command creates a mount point and marks it as externally mounted. It is used to persist data or share data between containers.\n\n    Example: `VOLUME /data`\n\nThese are some commonly used commands in a Dockerfile. Dockerfiles provide a way to define the steps required to build an image, customize the container environment, and specify the behavior of the container at runtime.\n\n\n## Collated list of commands for Docker, Docker-compose and K8s\n\nPlease write commands related to \n1. docker \n2. Docker compose\n3. Kubernetes \n\nSure! Here are some commonly used commands for Docker, Docker Compose, and Kubernetes:\n\n**Docker:**\n\n1. **docker run:**\n   - Description: Run a container from a Docker image.\n   - Example: `docker run -d -p 8080:80 nginx`\n\n2. **docker build:**\n   - Description: Build a Docker image from a Dockerfile.\n   - Example: `docker build -t myapp .`\n\n3. **docker ps:**\n   - Description: List running containers.\n   - Example: `docker ps`\n\n4. **docker images:**\n   - Description: List Docker images.\n   - Example: `docker images`\n\n5. **docker pull:**\n   - Description: Pull a Docker image from a registry.\n   - Example: `docker pull ubuntu`\n\n6. **docker stop:**\n   - Description: Stop a running container.\n   - Example: `docker stop container_id`\n\n7. **docker rm:**\n   - Description: Remove one or more containers.\n   - Example: `docker rm container_id`\n\n8. **docker rmi:**\n   - Description: Remove one or more images.\n   - Example: `docker rmi image_id`\n\n**Docker Compose:**\n\n1. **docker-compose up:**\n   - Description: Create and start containers defined in the docker-compose.yml file.\n   - Example: `docker-compose up -d`\n\n2. **docker-compose down:**\n   - Description: Stop and remove containers created by `docker-compose up`.\n   - Example: `docker-compose down`\n\n3. **docker-compose build:**\n   - Description: Build or rebuild services defined in the docker-compose.yml file.\n   - Example: `docker-compose build`\n\n4. **docker-compose ps:**\n   - Description: List containers started by `docker-compose up`.\n   - Example: `docker-compose ps`\n\n5. **docker-compose exec:**\n   - Description: Run a command in a running container.\n   - Example: `docker-compose exec service_name command`\n\n**Kubernetes:**\n\n1. **kubectl apply:**\n   - Description: Apply configuration changes to resources.\n   - Example: `kubectl apply -f deployment.yaml`\n\n2. **kubectl get:**\n   - Description: Display one or many resources.\n   - Example: `kubectl get pods`\n\n3. **kubectl describe:**\n   - Description: Show details of a specific resource or group of resources.\n   - Example: `kubectl describe pod pod_name`\n\n4. **kubectl logs:**\n   - Description: Print the logs from a container in a pod.\n   - Example: `kubectl logs pod_name`\n\n5. **kubectl exec:**\n   - Description: Execute a command in a container.\n   - Example: `kubectl exec -it pod_name -- command`\n\n6. **kubectl delete:**\n   - Description: Delete resources by filenames, stdin, resources, resources and names, or by resources and label selector.\n   - Example: `kubectl delete pod pod_name`\n\nThese commands provide a starting point for interacting with Docker, Docker Compose, and Kubernetes. Depending on your specific use case and requirements, you may need to use additional commands or options.\n\nCertainly! Here are a few more commands for Docker, Docker Compose, and Kubernetes:\n\n**Docker:**\n\n9. **docker exec:**\n   - Description: Run a command in a running container.\n   - Example: `docker exec -it container_id command`\n\n10. **docker network ls:**\n    - Description: List Docker networks.\n    - Example: `docker network ls`\n\n11. **docker volume ls:**\n    - Description: List Docker volumes.\n    - Example: `docker volume ls`\n\n12. **docker-compose logs:**\n    - Description: View output from containers started by `docker-compose up`.\n    - Example: `docker-compose logs`\n\n**Docker Compose:**\n\n6. **docker-compose restart:**\n   - Description: Restart services.\n   - Example: `docker-compose restart service_name`\n\n7. **docker-compose scale:**\n   - Description: Scale services to a specified number of containers.\n   - Example: `docker-compose scale service_name=3`\n\n8. **docker-compose exec:**\n   - Description: Run a command in a service container.\n   - Example: `docker-compose exec service_name command`\n\n**Kubernetes:**\n\n7. **kubectl scale:**\n   - Description: Scale a resource.\n   - Example: `kubectl scale deployment/deployment_name --replicas=3`\n\n8. **kubectl rollout:**\n   - Description: Manage the rollout of a resource.\n   - Example: `kubectl rollout status deployment/deployment_name`\n\n9. **kubectl port-forward:**\n   - Description: Forward one or more local ports to a pod.\n   - Example: `kubectl port-forward pod_name 8080:80`\n\n10. **kubectl create:**\n    - Description: Create a resource from a file or stdin.\n    - Example: `kubectl create -f deployment.yaml`\n\n11. **kubectl edit:**\n    - Description: Edit resources in an external editor.\n    - Example: `kubectl edit deployment/deployment_name`\n\nThese additional commands provide more flexibility and control over managing containers, services, and resources in Docker, Docker Compose, and Kubernetes environments.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4898b027-fe8a-4652-ae5a-9891e722db6d","order":0,"createdDate":{"$date":"2024-09-04T12:23:07.295Z"},"updatedDate":{"$date":"2024-09-04T12:23:07.295Z"},"uniqueId":"f11d438c-25cd-4645-8c71-c8f1339ba67b","__v":0}
{"_id":{"$oid":"66d851c526f385e1f94df950"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Microservice design patterns\n\n## Name some Microservice design patterns\n\nMicroservice architecture relies on various design patterns to address challenges like scalability, fault tolerance, and maintainability. Some common microservice design patterns include:\n\n1. **Service Registry:**\n   - **Description:** Maintain a central registry where microservices can register their location and discover other services.\n   - **Benefits:** Dynamic service discovery, load balancing, and fault tolerance.\n\n2. **API Gateway:**\n   - **Description:** A single entry point that manages requests, handles composition of microservices, and provides additional functionalities like authentication and caching.\n   - **Benefits:** Simplifies client-side experience, centralizes management, and enhances security.\n\n3. **Circuit Breaker:**\n   - **Description:** Prevents cascading failures by temporarily stopping requests to a failing service, allowing it to recover.\n   - **Benefits:** Improves system resilience by avoiding prolonged failures.\n\n4. **Bulkhead:**\n   - **Description:** Isolates components of a system to prevent the failure of one from affecting others.\n   - **Benefits:** Limits the impact of failures, improves overall system stability.\n\n5. **Saga Pattern:**\n   - **Description:** Manages distributed transactions across multiple microservices by using a sequence of local transactions.\n   - **Benefits:** Ensures consistency in a distributed system.\n\n6. **Event Sourcing:**\n   - **Description:** Instead of storing the current state of an entity, maintain a sequence of events that can be used to reconstruct the entity's state.\n   - **Benefits:** Provides a historical view, simplifies audit trails, and supports scalability.\n\n7. **Choreography vs. Orchestration:**\n   - **Description:** Defines how microservices communicate and coordinate actions. Orchestration is centralized, while choreography relies on decentralized communication.\n   - **Benefits:** Flexibility and autonomy in choreography, centralized control in orchestration.\n\n8. **Sidecar Pattern:**\n   - **Description:** Attach additional functionalities (sidecar) to the main microservice, like logging, monitoring, or security features.\n   - **Benefits:** Modularity, easier maintenance, and uniform application of cross-cutting concerns.\n\n9. **Dependency Injection:**\n   - **Description:** Inject dependencies into microservices, allowing better testability and flexibility.\n   - **Benefits:** Decouples components, simplifies testing, and promotes modular design.\n\n10. **Health Check:**\n   - **Description:** Regularly check the health of microservices to identify and handle potential issues proactively.\n   - **Benefits:** Improves reliability and facilitates automatic scaling.\n\nThese patterns help address various concerns in microservices architecture, contributing to a more robust and scalable system.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"3be36420-447a-4034-bdb4-0dd31680ff4b","order":0,"createdDate":{"$date":"2024-09-04T12:25:41.864Z"},"updatedDate":{"$date":"2024-09-04T12:25:41.864Z"},"uniqueId":"2a7debe1-ec6e-42eb-8836-d296d940c0a1","__v":0}
{"_id":{"$oid":"66d852d726f385e1f94e23b9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Few interview questions for Nodejs\n- Can you explain the event-driven architecture in Node.js and how it differs from traditional request-response models?\n- How do you handle asynchronous operations in Node.js, and what are some common patterns for managing callbacks, promises, and async/await?\n- Describe the role of npm (Node Package Manager) in a Node.js project and how you would manage dependencies efficiently.\n- What is the purpose of middleware in Express.js? Can you give examples of middleware you've used in your projects?\n- How do you handle errors in Node.js applications, and what are some best practices for error handling and logging?\n- What tools do you use for debugging Node.js applications, and how do you approach troubleshooting performance issues?\n- Explain the concept of streams in Node.js and provide a use case where streams would be beneficial.\n- How do you structure your Node.js applications for scalability and maintainability, especially in large projects?\n- Can you discuss the role of clustering in Node.js and how it can be utilized to improve application performance?\n- What are some security considerations when developing Node.js applications, and how do you ensure your applications are secure against common vulnerabilities?\n\n\n# brief answers for above questions\n\n1. **Event-driven architecture**: Node.js uses an event-driven, non-blocking I/O model, where operations are executed asynchronously. This allows it to handle high concurrency without blocking the event loop.\n\n2. **Asynchronous operations handling**: In Node.js, asynchronous operations are managed using callbacks, promises, or async/await. Callbacks are traditional, promises provide a cleaner syntax for handling asynchronous operations, and async/await offers even more readable code by allowing asynchronous code to look synchronous.\n\n3. **npm and dependency management**: npm is the default package manager for Node.js. It's used to install, manage, and share packages and dependencies. `package.json` file is crucial for managing dependencies efficiently, specifying project metadata and dependencies.\n\n4. **Express.js middleware**: Middleware in Express.js are functions that have access to the request and response objects. They can execute any code, make changes to the request and response objects, end the request-response cycle, or call the next middleware in the stack. Examples include body parsers, authentication middleware, and error handlers.\n\n5. **Error handling in Node.js**: Error handling in Node.js involves using try-catch blocks, error-first callbacks, promises' catch method, or async/await with try-catch. Best practices include centralizing error handling, logging errors with detailed information, and responding to errors appropriately to maintain application stability.\n\n6. **Debugging Node.js applications**: Tools like Node.js Inspector, Chrome DevTools, and logging libraries such as Winston or Bunyan are commonly used for debugging Node.js applications. Troubleshooting performance issues involves analyzing CPU and memory usage, profiling code, and optimizing database queries.\n\n7. **Streams in Node.js**: Streams are objects that let you read data from a source or write data to a destination in a continuous fashion. They're beneficial for processing large amounts of data efficiently, such as reading from files or network sockets, without loading the entire dataset into memory.\n\n8. **Structuring Node.js applications**: Structuring Node.js applications involves separating concerns into modules, organizing code into logical components (e.g., controllers, services), following a modular architecture like MVC (Model-View-Controller), and using design patterns like Dependency Injection or Singleton pattern.\n\n9. **Clustering in Node.js**: Clustering allows a Node.js application to utilize multiple CPU cores by creating multiple processes (workers) to handle incoming requests. It improves application performance and scalability by distributing the workload across multiple cores.\n\n10. **Security considerations**: Common security considerations in Node.js include preventing common vulnerabilities like injection attacks (SQL injection, XSS), implementing authentication and authorization mechanisms, using secure communication protocols (HTTPS), validating and sanitizing user inputs, and keeping dependencies up to date to avoid vulnerabilities in third-party packages.\n\n\n11. **Explain the concept of the Event Loop in Node.js and how it enables non-blocking I/O.**\n   - The Event Loop is at the core of Node.js's asynchronous, non-blocking I/O model. It continuously checks the event queue for pending tasks and executes them one by one, allowing the application to handle multiple requests concurrently without blocking.\n\n12. **What are the differences between the `require()` function and `import` statements in Node.js?**\n   - `require()` is a CommonJS module system function used to import modules in Node.js, while `import` is part of ES6 module syntax. `import` statements are statically analyzed, allowing for more efficient tree-shaking and better support for static analysis tools compared to `require()`. However, `import` statements require the use of an ES6-compatible module loader like Babel or Webpack in Node.js.\n\n13. **How do you handle cross-origin resource sharing (CORS) in a Node.js application?**\n   - CORS is managed in Node.js using middleware like `cors` in Express.js. By adding `cors()` middleware to Express routes, you can specify which origins are allowed to access the resources, what methods are allowed, and what headers can be included in the request.\n\n14. **Explain the purpose of the `process` object in Node.js and give examples of its usage.**\n   - The `process` object provides information and control over the Node.js process. Examples of its usage include accessing environment variables (`process.env`), exiting the process (`process.exit()`), listening for signals (`process.on('SIGINT', ...)`), and retrieving command line arguments (`process.argv`).\n\n15. **What are some techniques for improving the performance of a Node.js application?**\n   - Performance improvements in Node.js can be achieved through various techniques such as optimizing database queries, caching frequently accessed data, using asynchronous I/O operations, minimizing blocking code, implementing clustering for multi-core utilization, optimizing memory usage, and leveraging CDN for static assets.\n\n16. **How do you handle sessions and authentication in a Node.js application?**\n   - Sessions and authentication in Node.js are often managed using middleware like `express-session` for session management and libraries like Passport.js for authentication. Sessions are stored either in-memory, using session stores like Redis or MongoDB, or as HTTP cookies with encrypted session data.\n\n17. **Explain the role of `Buffer` in Node.js and give examples of its usage.**\n   - `Buffer` is a global object in Node.js used to handle binary data. It provides methods for encoding and decoding data to and from various formats (e.g., UTF-8, Base64). Examples of its usage include reading from and writing to streams, handling file operations, and working with network protocols like TCP and HTTP.\n\n18. **What is middleware chaining in Express.js, and how does it work?**\n   - Middleware chaining in Express.js involves executing multiple middleware functions sequentially for a given route. Each middleware function has access to the request and response objects and can modify them or terminate the request-response cycle by calling the `next()` function. Middleware chaining allows for modular, reusable code and enables implementing cross-cutting concerns like logging, authentication, and error handling.\n\nOf course!\n\n19. **What is the purpose of the `cluster` module in Node.js, and how does it work?**\n   - The `cluster` module in Node.js allows for the creation of multiple processes (workers) to handle incoming requests, utilizing multiple CPU cores. It works by forking the main Node.js process into child processes, each of which can accept connections independently. This improves application performance and scalability by distributing the workload across multiple cores.\n\n20. **Explain the concept of middleware error handling in Express.js and how it differs from regular error handling.**\n   - Middleware error handling in Express.js involves defining error-handling middleware functions with four parameters (err, req, res, next) that are specifically designed to handle errors. These middleware functions are invoked when an error occurs in previous middleware or route handlers. Unlike regular error handling, middleware error handling can centralize error handling logic, separate it from regular route handling, and provide more control over error responses.\n\n21. **What are WebSockets, and how are they used in Node.js applications?**\n   - WebSockets provide a full-duplex communication channel over a single TCP connection, allowing bidirectional communication between the client and server. In Node.js, libraries like `ws` or `socket.io` are commonly used to implement WebSocket functionality. They're used for real-time applications like chat applications, multiplayer games, and live data streaming, where low-latency, high-throughput communication is required.\n\n22. **How do you handle file uploads in a Node.js application?**\n   - File uploads in Node.js are typically handled using middleware like `multer` in Express.js. Multer simplifies the process of handling multipart/form-data, which is commonly used for file uploads. It parses the incoming request, extracts the uploaded files, and saves them to the server's file system or cloud storage services like Amazon S3 or Google Cloud Storage.\n\n23. **What are some techniques for securing APIs in a Node.js application?**\n   - Securing APIs in Node.js involves implementing authentication mechanisms like JSON Web Tokens (JWT) or OAuth2, validating and sanitizing user inputs to prevent injection attacks, enforcing HTTPS for secure communication, rate limiting to prevent abuse, implementing CORS policies, and applying input validation and authorization checks at the API endpoints.\n\n24. **Explain the concept of microservices architecture and how it can be implemented using Node.js.**\n   - Microservices architecture involves breaking down a monolithic application into smaller, loosely coupled services that can be developed, deployed, and scaled independently. In Node.js, each microservice can be implemented as a separate Node.js application, communicating with each other via APIs or message brokers like RabbitMQ or Kafka. Node.js's lightweight, event-driven nature makes it well-suited for building and scaling microservices architectures.\n\n\n\n## As nodejs could be used to create views too, as I heard , please suggest few alternative view technology other than Reactjs\n\nCertainly! Here are a few alternative view technologies to ReactJS:\n\n1. **Angular**: Developed and maintained by Google, Angular is a comprehensive framework for building web applications. It provides a full-featured MVC architecture and comes with built-in tools for routing, forms, HTTP client, and more.\n\n2. **Vue.js**: Vue.js is a progressive JavaScript framework for building user interfaces. It's known for its simplicity and flexibility, allowing developers to incrementally adopt its features. Vue.js is often praised for its small size and ease of integration with existing projects.\n\n3. **Svelte**: Unlike traditional frameworks like React and Vue, Svelte shifts much of the work from the browser to the compilation step, resulting in highly optimized and efficient code. It's gaining popularity for its simplicity and performance.\n\n4. **Ember.js**: Ember.js is a framework for building ambitious web applications. It provides a strong convention over configuration approach, making it suitable for large-scale projects. Ember.js includes built-in solutions for routing, data management, and testing.\n\n5. **Backbone.js**: Backbone.js is a lightweight framework that provides the minimal structure needed for web applications. It's often used for projects where you need more control over the architecture and prefer a less opinionated framework.\n\nThese are just a few alternatives to ReactJS, each with its own strengths and use cases. The choice of framework often depends on factors like project requirements, developer preferences, and the existing ecosystem.\n\nOf course! Here are a few more options for view technologies:\n\n6. **Preact**: Preact is a lightweight alternative to React, with a similar API and compatibility. It offers fast performance and a small footprint, making it ideal for projects where size and speed are critical.\n\n7. **Mithril**: Mithril is a modern client-side JavaScript framework for building single-page applications. It's known for its simplicity, size (only 8kb gzipped), and performance. Mithril follows the \"write less, do more\" philosophy and provides a streamlined API for building UI components.\n\n8. **Riot.js**: Riot.js is a simple and elegant client-side framework for building web applications. It emphasizes simplicity and reusability, with a focus on small size and ease of integration. Riot.js offers a component-based architecture similar to React, but with a lighter footprint.\n\n9. **Cycle.js**: Cycle.js is a functional and reactive JavaScript framework for building user interfaces. It's based on the concept of reactive programming, where UI components react to changes in data over time. Cycle.js encourages a unidirectional data flow and provides tools for building applications in a declarative and composable way.\n\n10. **Alpine.js**: Alpine.js is a minimalistic JavaScript framework for building interactive web applications. It's designed to be lightweight (only 8kb minified) and easy to use, with a focus on enhancing HTML with declarative data binding and DOM manipulation.\n\nThese are additional options for view technologies, each with its own unique features and strengths. Depending on your project requirements and preferences, one of these frameworks may be a better fit than others.\n\nAbsolutely, there are indeed more options beyond the ones mentioned. Here are a few additional view technologies:\n\n11. **Marko**: Marko is a fast and lightweight UI library/framework developed by eBay. It focuses on speed and efficiency, with a template syntax that resembles HTML. Marko offers server-side rendering and seamless integration with Node.js.\n\n12. **Rax**: Rax is a lightweight and extensible framework for building universal applications. Developed by Alibaba Group, Rax is highly performant and optimized for rendering UI components on various platforms, including web browsers, Weex (for native mobile), and Node.js.\n\n13. **SolidJS**: SolidJS is a declarative JavaScript library for building user interfaces. It's known for its reactivity system, which provides efficient rendering and updates. SolidJS emphasizes simplicity and performance, making it a suitable choice for modern web applications.\n\n14. **Hyperapp**: Hyperapp is a minimalistic JavaScript library for building web applications. It's inspired by Elm and Redux, with a focus on simplicity and functional programming principles. Hyperapp provides a tiny footprint (less than 2kb) and a simple API for building UI components.\n\n15. **Stimulus**: Stimulus is a modest JavaScript framework developed by Basecamp. It's designed to augment HTML with interactivity, without the need for complex SPA architecture. Stimulus focuses on enhancing server-rendered HTML by adding behavior to existing DOM elements.\n\nThese are additional options for view technologies, each with its own set of features and use cases. Depending on your project requirements and preferences, one of these frameworks or libraries may be a good fit for your needs.\n\n\n## Please light some on PUG and EJS\n\nCertainly! Pug (formerly known as Jade) and EJS (Embedded JavaScript) are both popular template engines for Node.js and web development. \n\n### Pug:\nPug is a high-performance template engine that simplifies writing HTML markup with a clean and concise syntax. Here are some key features of Pug:\n\n1. **Whitespace-based Syntax**: Pug uses indentation to define the structure of the HTML document, reducing the need for closing tags and making the code more readable.\n\n2. **Code Interpolation**: Pug allows you to embed JavaScript code directly within your templates using interpolation syntax, enabling dynamic content generation.\n\n3. **Reusability**: Pug supports template inheritance and includes, allowing you to create reusable components and layouts.\n\n4. **Filters**: Pug provides filters for processing text, such as Markdown or CoffeeScript, directly within the template.\n\n5. **Extensibility**: Pug can be extended with custom plugins and middleware to add additional functionality.\n\nPug is commonly used in Node.js web frameworks like Express.js and has a vibrant ecosystem of plugins and extensions.\n\n### EJS:\nEJS is a simple and flexible template engine for generating HTML markup with JavaScript. Here are some key features of EJS:\n\n1. **JavaScript Integration**: EJS allows you to embed JavaScript code directly within your templates using <% %> tags, enabling dynamic content generation and logic.\n\n2. **Control Flow**: EJS supports control flow statements such as if-else and loops, allowing you to conditionally render content based on data.\n\n3. **Partial Views**: EJS supports partial views and includes, enabling you to reuse components and layouts across multiple pages.\n\n4. **Custom Tags**: EJS allows you to define custom tags and functions, extending its functionality as needed.\n\n5. **Client-side Support**: EJS templates can be compiled and rendered both server-side and client-side, making it suitable for building isomorphic web applications.\n\nEJS is widely used in the Node.js ecosystem and is often chosen for its simplicity and familiarity to developers coming from a JavaScript background.\n\nBoth Pug and EJS are powerful tools for generating HTML markup in Node.js applications, and the choice between them often comes down to personal preference and project requirements.\n\n\n# Node JS\n\n## Explore\n - npm Uninstall – How to Remove a Package, https://www.freecodecamp.org/news/npm-uninstall-how-to-remove-a-package\n \n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"94f401e5-b6b6-41d6-bc93-37748ac577d3","order":0,"createdDate":{"$date":"2024-09-04T12:30:15.447Z"},"updatedDate":{"$date":"2024-09-04T12:30:15.447Z"},"uniqueId":"eebb9d45-cf9a-4f19-b5de-2fb961a59150","__v":0}
{"_id":{"$oid":"66d8535326f385e1f94e403b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"\n## interview questions for Reactjs with answers\n\nCertainly! Here are some interview questions for ReactJS along with sample answers:\n\n1. **What is ReactJS, and what are its key features?**\n\n   *Answer:* \"ReactJS is a JavaScript library developed by Facebook for building user interfaces, particularly for single-page applications. Its key features include a virtual DOM for efficient rendering, component-based architecture for reusable and maintainable code, and a declarative approach to defining UI components.\"\n\n2. **Explain the difference between React class components and functional components.**\n\n   *Answer:* \"React class components are ES6 classes that extend React.Component and have state and lifecycle methods. They are used for more complex components that need to manage state or lifecycle events. Functional components, on the other hand, are simple JavaScript functions that accept props as input and return JSX elements. They are primarily used for presentational components or components that don't need to manage state.\"\n\n3. **What is JSX, and why is it used in React?**\n\n   *Answer:* \"JSX is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript. It stands for JavaScript XML. JSX makes it easier to write and understand React components by allowing you to mix HTML markup with JavaScript logic. It is then transformed into regular JavaScript function calls by tools like Babel.\"\n\n4. **Explain the concept of virtual DOM in React and how it improves performance.**\n\n   *Answer:* \"The virtual DOM is a lightweight copy of the actual DOM. When state or props change in a React component, the virtual DOM is updated first, and then React compares the virtual DOM with the actual DOM to determine the minimal set of changes needed to update the UI efficiently. This approach reduces the number of DOM manipulations, resulting in improved performance.\"\n\n5. **What are React props, and how are they used?**\n\n   *Answer:* \"React props (short for properties) are a way of passing data from parent components to child components. Props are read-only and are used to customize the behavior or appearance of a component. They are passed as attributes to components in JSX and can be accessed within the component using `this.props` in class components or directly as arguments in functional components.\"\n\n6. **What is the significance of key prop in React lists?**\n\n   *Answer:* \"The key prop is a special attribute that React uses to identify elements in a list. It helps React identify which items have changed, been added, or been removed. Using a unique key for each list item ensures proper reconciliation and improves rendering performance. Keys should be stable, predictable, and unique among siblings.\"\n\n7. **Explain the purpose of state in React components.**\n\n   *Answer:* \"State in React components represents the internal state of a component that can change over time. It is managed internally by the component and can be modified using the `setState` method. State allows components to manage dynamic data and trigger UI updates in response to user interactions or other events.\"\n\nThese questions cover some fundamental concepts of ReactJS and are commonly asked in interviews to assess a candidate's understanding and proficiency with the library.\n\nCertainly! Here are a few more interview questions for ReactJS along with sample answers:\n\n8. **What are the lifecycle methods in React class components, and when are they invoked?**\n\n   *Answer:* \"React class components have several lifecycle methods that are invoked at different stages of a component's lifecycle, including mounting, updating, and unmounting. Some of the key lifecycle methods include `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`. These methods allow developers to perform actions like fetching data, updating the UI, or cleaning up resources.\"\n\n9. **What are React hooks, and how do they differ from class components?**\n\n   *Answer:* \"React hooks are functions that enable functional components to use state and other React features without writing a class. They were introduced in React 16.8 as a way to write components more easily and with less boilerplate. Hooks, such as `useState` and `useEffect`, allow functional components to manage state and perform side effects similar to class components.\"\n\n10. **Explain the useEffect hook in React and its purpose.**\n\n    *Answer:* \"The `useEffect` hook in React allows functional components to perform side effects, such as data fetching, subscriptions, or DOM manipulations, after the component has rendered. It replaces lifecycle methods like `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` in class components. `useEffect` takes a callback function as its first argument and an optional array of dependencies as its second argument to specify when the effect should be re-run.\"\n\n11. **What is the useContext hook in React, and how is it used?**\n\n    *Answer:* \"The `useContext` hook in React allows functional components to consume values from a React context. It provides a way to access context values without nesting multiple levels of components. `useContext` takes a context object created by `React.createContext` as its argument and returns the current context value.\"\n\n12. **Explain the concept of component composition in React and its advantages.**\n\n    *Answer:* \"Component composition in React refers to the practice of building UIs by combining smaller, reusable components. This approach promotes code reuse, maintainability, and scalability by breaking down complex UIs into smaller, manageable pieces. It also facilitates a modular and declarative approach to building UIs, making it easier to reason about and test.\"\n\n13. **What are React fragments, and why are they used?**\n\n    *Answer:* \"React fragments are a way to group multiple elements without adding extra nodes to the DOM. They allow developers to return multiple elements from a component's render method without needing to wrap them in a container element like a `<div>`. Fragments improve code readability and maintainability by reducing unnecessary DOM clutter.\"\n\nThese additional questions delve deeper into specific aspects of ReactJS, providing a more comprehensive assessment of a candidate's knowledge and experience with the library's features and functionalities.\n\nOf course! Here are a few more interview questions for ReactJS:\n\n14. **What are controlled components in React, and how do they differ from uncontrolled components?**\n\n    *Answer:* \"Controlled components in React are form elements whose values are controlled by React state. This means that the value of the input is set by the component's state and changes are handled by React event handlers. In contrast, uncontrolled components allow the form elements to manage their own state internally, without React controlling their values.\"\n\n15. **Explain the concept of conditional rendering in React and provide examples of how it can be implemented.**\n\n    *Answer:* \"Conditional rendering in React involves rendering different components or UI elements based on certain conditions. This can be achieved using JavaScript conditional operators like `if` statements or ternary operators, as well as logical && operator. For example, we can conditionally render a component based on the value of a state variable or a prop.\"\n\n16. **What is the purpose of React Router, and how does it facilitate client-side routing in React applications?**\n\n    *Answer:* \"React Router is a popular library for implementing client-side routing in React applications. It allows developers to define routes and map them to specific components, enabling navigation within a single-page application. React Router provides declarative routing, allowing developers to define routes using JSX syntax and handle navigation using components like `<Link>` and `<Route>`.\"\n\n17. **Explain the concept of higher-order components (HOCs) in React and provide an example of how they can be used.**\n\n    *Answer:* \"Higher-order components (HOCs) are a pattern in React that involves wrapping a component with another component to enhance its functionality. HOCs are used for code reuse, cross-cutting concerns, and abstraction of common logic. For example, a `withAuthentication` HOC can be used to conditionally render a component based on the user's authentication status.\"\n\n18. **What are React hooks rules and best practices you follow in your development?**\n\n    *Answer:* \"When using React hooks, it's important to follow certain rules and best practices to ensure code readability, maintainability, and performance. Some best practices include: \n    - Only call hooks at the top level of a functional component or custom hook.\n    - Don't call hooks inside loops, conditions, or nested functions.\n    - Use the appropriate hook for each use case (e.g., `useState` for managing state, `useEffect` for side effects).\n    - Extract complex logic into custom hooks for reusability.\n    - Name custom hooks with a `use` prefix to indicate that they are hooks.\"\n\nThese questions provide a deeper understanding of ReactJS concepts and best practices, allowing interviewers to assess a candidate's proficiency in building React applications effectively.\n\n\n# Please write few interview questions for team lead with java 15 years experience. Also he has 5+ years experience in Reactjs, DevOps, node js, AWS, MySQL, mongodb \n\nCertainly! Here are some interview questions tailored for a team lead with extensive experience in Java, ReactJS, DevOps, Node.js, AWS, MySQL, and MongoDB:\n\n1. **As a team lead with 15 years of Java experience, can you discuss your approach to mentoring junior developers and ensuring code quality and consistency within the team?**\n\n   *Answer:* \"As a team lead, I prioritize mentorship by providing guidance, code reviews, and pairing sessions to junior developers. I emphasize best practices, design patterns, and coding standards to maintain code quality and consistency. Additionally, I advocate for continuous learning and encourage knowledge sharing within the team to foster a culture of growth.\"\n\n2. **With your experience in ReactJS, how do you ensure efficient collaboration between frontend and backend teams in a full-stack development environment?**\n\n   *Answer:* \"Effective collaboration between frontend and backend teams is crucial for delivering seamless user experiences. I facilitate communication channels, such as regular stand-ups and cross-functional meetings, to align priorities and share progress. Additionally, I promote a shared understanding of APIs and data requirements to streamline integration between frontend and backend components.\"\n\n3. **As someone with DevOps experience, what strategies do you employ to optimize CI/CD pipelines and automate deployment processes?**\n\n   *Answer:* \"I leverage automation tools like Jenkins, GitLab CI/CD, or AWS CodePipeline to streamline the CI/CD pipeline. I prioritize infrastructure as code using tools like Terraform or AWS CloudFormation for reproducible and scalable environments. Additionally, I implement automated testing, monitoring, and rollback mechanisms to ensure reliability and stability in deployments.\"\n\n4. **With your expertise in Node.js, how do you ensure high-performance and scalable backend services?**\n\n   *Answer:* \"In Node.js development, I focus on asynchronous programming and non-blocking I/O to maximize concurrency and scalability. I employ frameworks like Express.js for building lightweight and efficient RESTful APIs. I also utilize clustering, load balancing, and caching strategies to handle high traffic and improve performance.\"\n\n5. **As someone experienced with AWS, how do you design and implement highly available and fault-tolerant architectures on AWS cloud?**\n\n   *Answer:* \"I design architectures on AWS using principles like redundancy, elasticity, and fault tolerance. I leverage services like Amazon EC2, Auto Scaling, and Elastic Load Balancing for horizontal scaling and high availability. I also implement multi-region deployments, data replication, and disaster recovery mechanisms using services like Amazon S3 and Route 53.\"\n\n6. **With your database experience in MySQL and MongoDB, how do you choose between relational and NoSQL databases for different use cases?**\n\n   *Answer:* \"I evaluate the requirements of each project to determine the appropriate database solution. For structured data and complex queries, I prefer relational databases like MySQL for their ACID compliance and strong consistency. For unstructured or rapidly evolving data, I opt for NoSQL databases like MongoDB for their flexibility, scalability, and performance.\"\n\nThese questions assess the candidate's leadership skills, technical expertise, and ability to apply their diverse experience to various aspects of software development and architecture.\n\nOf course! Here are a few more interview questions for a team lead with extensive experience in Java, ReactJS, DevOps, Node.js, AWS, MySQL, and MongoDB:\n\n7. **As a team lead, how do you handle conflict resolution and foster a collaborative work environment within your team?**\n\n   *Answer:* \"Conflict resolution is a natural part of any team dynamic, and as a leader, I approach it with empathy and open communication. I encourage team members to voice their concerns openly and respectfully, and I facilitate constructive discussions to find mutually beneficial solutions. I also emphasize the importance of understanding different perspectives and finding common ground to maintain a positive and collaborative work environment.\"\n\n8. **With your experience in DevOps, how do you ensure continuous improvement and optimization of development processes within your team?**\n\n   *Answer:* \"Continuous improvement is a core principle of DevOps, and I integrate it into our development processes by fostering a culture of experimentation, feedback, and learning. I regularly conduct retrospectives to identify areas for improvement and implement automation, monitoring, and feedback mechanisms to streamline workflows and reduce bottlenecks. Additionally, I encourage knowledge sharing and cross-functional collaboration to promote innovation and efficiency.\"\n\n9. **As someone proficient in ReactJS, how do you approach performance optimization and code maintainability in frontend development?**\n\n   *Answer:* \"Performance optimization and code maintainability are critical aspects of frontend development. I prioritize code modularization, component reusability, and adherence to best practices to ensure maintainable code. I also leverage performance profiling tools like Chrome DevTools to identify performance bottlenecks and optimize rendering, network requests, and memory usage for a smoother user experience.\"\n\n10. **With your expertise in AWS, how do you ensure security and compliance in cloud environments?**\n\n    *Answer:* \"Security and compliance are top priorities in AWS environments. I implement security best practices such as least privilege access, encryption at rest and in transit, and regular security audits and compliance checks. I also leverage AWS services like AWS Identity and Access Management (IAM), AWS Key Management Service (KMS), and AWS Config to enforce security policies, monitor compliance, and respond to security incidents effectively.\"\n\n11. **As a team lead, how do you prioritize tasks and allocate resources effectively to meet project deadlines?**\n\n    *Answer:* \"Prioritization and resource allocation are key responsibilities of a team lead. I work closely with stakeholders to understand project requirements and deadlines, and I prioritize tasks based on their impact on project goals and objectives. I allocate resources according to team members' strengths, skills, and availability, while also considering workload balance and individual development opportunities. Regular communication and feedback loops help ensure alignment and adaptability to changing priorities.\"\n\nThese questions further delve into the candidate's leadership skills, problem-solving abilities, and proficiency across various technologies, providing a comprehensive assessment of their suitability for a team lead role.\n\nCertainly! Here are a few more interview questions for a team lead with extensive experience in Java, ReactJS, DevOps, Node.js, AWS, MySQL, and MongoDB:\n\n12. **With your experience in Node.js, how do you ensure code quality and maintainability in backend development?**\n\n    *Answer:* \"In Node.js backend development, I prioritize code organization, modularization, and adherence to coding standards to ensure code quality and maintainability. I also leverage tools like ESLint, Prettier, and SonarQube for code linting, formatting, and static code analysis. Additionally, I advocate for writing unit tests and implementing test automation using frameworks like Jest or Mocha to catch bugs early and facilitate code refactoring.\"\n\n13. **As someone experienced in MySQL and MongoDB, how do you approach database schema design and optimization for different application requirements?**\n\n    *Answer:* \"Database schema design and optimization depend on factors such as data structure, access patterns, and scalability requirements. For relational databases like MySQL, I follow normalization principles to minimize redundancy and ensure data integrity. I also optimize queries, indexes, and database configurations to improve performance. For NoSQL databases like MongoDB, I design schemas based on data denormalization and query patterns, and I utilize features like sharding and indexing for scalability and performance.\"\n\n14. **As a team lead, how do you foster a culture of innovation and continuous learning within your team?**\n\n    *Answer:* \"Fostering a culture of innovation and continuous learning is essential for keeping the team motivated and competitive. I encourage creativity and experimentation by providing opportunities for brainstorming, hackathons, and project prototyping. I also support professional development through training, workshops, and conferences, and I allocate time for research and exploration of emerging technologies and industry trends. Recognizing and celebrating achievements and contributions further reinforces a culture of innovation and learning.\"\n\n15. **With your experience in ReactJS, how do you handle cross-browser compatibility and accessibility in frontend development?**\n\n    *Answer:* \"Cross-browser compatibility and accessibility are critical considerations in frontend development. I conduct thorough testing across different browsers and devices using tools like BrowserStack or CrossBrowserTesting to identify and address compatibility issues. I also follow accessibility guidelines, such as the Web Content Accessibility Guidelines (WCAG), to ensure that our applications are accessible to users with disabilities. Using semantic HTML, ARIA roles, and keyboard navigation techniques helps improve accessibility and usability for all users.\"\n\nThese questions provide a deeper insight into the candidate's expertise, leadership approach, and ability to address various challenges across different technologies and domains.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9d1a976a-5ecf-49b5-8f4a-bee7732980da","order":0,"createdDate":{"$date":"2024-09-04T12:32:19.988Z"},"updatedDate":{"$date":"2024-09-04T12:32:19.988Z"},"uniqueId":"cef84e3a-2fc1-4947-921b-9c9b9d4d03b5","__v":0}
{"_id":{"$oid":"66d853ba26f385e1f94e6473"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# different roles name in a software development teams\n1. **Product Manager:** Guides the vision and strategy, ensuring the team builds the right product for the market needs, while aligning with business goals.\n\n2. **Software Engineer:** Crafts elegant solutions through code, translating requirements into functional software, and maintaining code quality and efficiency.\n\n3. **UX/UI Designer:** Shapes user experiences with intuitive interfaces, focusing on usability and aesthetics to enhance user satisfaction and engagement.\n\n4. **Quality Assurance Engineer:** Ensures product reliability and performance by rigorously testing software, identifying and resolving bugs to deliver a seamless user experience.\n\n5. **Scrum Master:** Facilitates agile processes, empowering the team to self-organize and deliver high-quality increments of work, while removing impediments and fostering continuous improvement.\n\n6. **DevOps Engineer:** Bridges development and operations, automating deployment pipelines, maintaining infrastructure, and optimizing workflows for efficient and reliable software delivery.\n\n7. **Data Scientist:** Analyzes and interprets data to drive informed decisions, leveraging statistical models and machine learning algorithms to extract actionable insights and improve product performance.\n\n8. **Technical Writer:** Communicates complex technical concepts clearly and concisely, producing documentation and guides to assist users and developers in understanding and using the software effectively.\n\n9. **Project Manager:** Coordinates project activities, managing timelines, resources, and budgets to ensure timely delivery of software solutions that meet stakeholder expectations.\n\n10. **Security Engineer:** Safeguards the integrity and confidentiality of software systems, identifying and mitigating vulnerabilities, and implementing robust security measures to protect against threats and breaches.\n\n11. **Systems Architect:** Designs the overall structure and framework of software systems, ensuring scalability, reliability, and maintainability while aligning with organizational goals and industry best practices.\n\n12. **Frontend Developer:** Specializes in creating the visual elements and user interfaces of web applications, using languages like HTML, CSS, and JavaScript to bring designs to life and enhance user interactions.\n\n13. **Backend Developer:** Focuses on the server-side logic and database interactions of web applications, designing and implementing efficient algorithms and data storage solutions to support frontend functionality.\n\n14. **Database Administrator (DBA):** Manages and maintains databases, ensuring data integrity, security, and performance through monitoring, optimization, backup, and recovery procedures.\n\n15. **Release Manager:** Oversees the deployment and release process of software updates, coordinating with development, testing, and operations teams to ensure smooth and timely delivery to end-users.\n\n16. **Technical Support Engineer:** Provides technical assistance to users and customers, troubleshooting issues, resolving bugs, and offering guidance on product usage and configuration.\n\n17. **Agile Coach:** Guides teams in adopting and improving agile practices, facilitating ceremonies, coaching on agile principles, and fostering a culture of collaboration, transparency, and continuous improvement.\n\n18. **Data Engineer:** Builds and maintains data pipelines and infrastructure, collecting, processing, and storing large volumes of data for analysis and decision-making purposes.\n\n19. **Infrastructure Engineer:** Manages and supports the underlying hardware and network infrastructure of software systems, ensuring reliability, scalability, and security through configuration, monitoring, and maintenance.\n\n20. **Product Owner:** Represents the interests of stakeholders and customers, prioritizing and managing the product backlog, and collaborating with the development team to define and deliver valuable features and enhancements.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"006d2e2b-4cae-4235-affe-9a87d0f2671c","order":0,"createdDate":{"$date":"2024-09-04T12:34:02.215Z"},"updatedDate":{"$date":"2024-09-04T12:34:02.215Z"},"uniqueId":"35458b8b-d72e-4ebf-9f68-318c670e16a0","__v":0}
{"_id":{"$oid":"66d8541626f385e1f94e80c7"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# software development methodologies\n\n## what are other methodologies than waterfall\n\nThere are several alternative software development methodologies to the traditional Waterfall model. Each of these methodologies has its own set of principles, practices, and approaches. Here are some of the most prominent ones:\n\n1. **Agile Methodology:**\n   - **Overview:** Agile is an iterative and incremental approach to software development. It emphasizes flexibility, collaboration, and customer satisfaction.\n   - **Key Principles:** Individuals and interactions over processes and tools, working software over comprehensive documentation, customer collaboration over contract negotiation, and responding to change over following a plan.\n\n2. **Scrum:**\n   - **Overview:** Scrum is a specific Agile framework that divides the project into fixed-length iterations called sprints. It includes roles like Product Owner, Scrum Master, and the development team.\n   - **Key Concepts:** Daily stand-up meetings, sprint planning, sprint review, and sprint retrospective are essential components of Scrum.\n\n3. **Kanban:**\n   - **Overview:** Kanban is a visual management method to optimize the flow of work. It emphasizes continuous delivery and encourages teams to pull work through the process.\n   - **Key Concepts:** Visual boards with cards representing tasks, work-in-progress (WIP) limits, and continuous improvement.\n\n4. **Extreme Programming (XP):**\n   - **Overview:** XP is an Agile methodology that focuses on improving software quality and responsiveness to changing customer requirements through frequent releases.\n   - **Key Practices:** Pair programming, continuous integration, test-driven development (TDD), and frequent releases.\n\n5. **Lean Development:**\n   - **Overview:** Lean development is inspired by lean manufacturing principles. It aims to eliminate waste, optimize efficiency, and deliver value to the customer.\n   - **Key Principles:** Just-in-time production, minimizing inventory, and continuous improvement.\n\n6. **Feature-Driven Development (FDD):**\n   - **Overview:** FDD is an iterative and incremental software development methodology. It emphasizes building features in a planned and organized way.\n   - **Key Concepts:** Feature lists, domain object modeling, and regular builds.\n\n7. **RAD (Rapid Application Development):**\n   - **Overview:** RAD is focused on rapid prototyping and quick feedback. It aims to deliver a high-quality system with a fast development cycle.\n   - **Key Features:** Prototyping, iterative development, and user feedback.\n\n8. **DevOps:**\n   - **Overview:** DevOps is more of a cultural and organizational approach that emphasizes collaboration between development and operations teams. It aims to automate processes and improve efficiency throughout the software development lifecycle.\n\n9. **Spiral Model:**\n   - **Overview:** The Spiral model combines elements of both Waterfall and iterative development models. It involves repeated cycles of planning, risk analysis, engineering, and evaluation.\n\nThese methodologies offer different approaches to project management, development processes, and team collaboration, allowing organizations to choose the one that best fits their specific needs and project requirements. The choice often depends on factors such as project size, complexity, customer involvement, and the team's experience and preferences.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"b414cf43-fac7-4777-a8ef-97634d396c1d","order":0,"createdDate":{"$date":"2024-09-04T12:35:34.95Z"},"updatedDate":{"$date":"2024-09-04T12:35:34.95Z"},"uniqueId":"66bc31a5-23e7-41f9-b1a7-0e04c1e50f76","__v":0}
{"_id":{"$oid":"66d8602226f385e1f94e9d8c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Please write frequently used commands in git with example\n\nSure, here are some frequently used Git commands along with examples:\n\n1. **Initialize a Repository:**\n   ```bash\n   git init\n   ```\n   Initialize a new Git repository in the current directory.\n\n2. **Clone a Repository:**\n   ```bash\n   git clone <repository-url>\n   ```\n   Clone a remote repository to your local machine. For example:\n   ```bash\n   git clone https://github.com/user/repo.git\n   ```\n\n3. **Add Files to Staging Area:**\n   ```bash\n   git add <file1> <file2> ...\n   ```\n   Stage specific files for the next commit.\n\n4. **Commit Changes:**\n   ```bash\n   git commit -m \"Your commit message\"\n   ```\n   Commit staged changes with a descriptive message.\n\n5. **Check Status:**\n   ```bash\n   git status\n   ```\n   View the status of your working directory and staging area.\n\n6. **View Commit History:**\n   ```bash\n   git log\n   ```\n   Display the commit history.\n\n7. **Create a New Branch:**\n   ```bash\n   git branch <branch-name>\n   ```\n   Create a new branch at the current commit.\n\n8. **Switch Branches:**\n   ```bash\n   git checkout <branch-name>\n   ```\n   Switch to the specified branch.\n\n9. **Merge Branches:**\n   ```bash\n   git merge <branch-name>\n   ```\n   Merge changes from `<branch-name>` into the current branch.\n\n10. **Pull Changes from Remote Repository:**\n    ```bash\n    git pull\n    ```\n    Fetch and merge changes from the remote repository to your local repository.\n\n11. **Push Changes to Remote Repository:**\n    ```bash\n    git push\n    ```\n    Push committed changes from your local repository to the remote repository.\n\n12. **Fetch Changes from Remote Repository:**\n    ```bash\n    git fetch\n    ```\n    Download objects and refs from another repository.\n\n13. **Discard Changes in Working Directory:**\n    ```bash\n    git checkout -- <file>\n    ```\n    Discard changes in the working directory for a specific file.\n\n14. **Undo Last Commit:**\n    ```bash\n    git reset --soft HEAD~1\n    ```\n    Undo the last commit, keeping changes in the staging area.\n\n15. **Stash Changes:**\n    ```bash\n    git stash\n    ```\n    Temporarily store changes in a stash.\n\nThese are just a few of the many Git commands available. Each command has various options and use cases, so it's beneficial to explore the Git documentation or use `git --help` for more information on each command.\n\nCertainly! Here are a few more Git commands along with examples:\n\n16. **View Remote Repositories:**\n    ```bash\n    git remote -v\n    ```\n    Display the names and URLs of remote repositories.\n\n17. **Add Remote Repository:**\n    ```bash\n    git remote add <name> <url>\n    ```\n    Add a new remote repository with the specified name and URL.\n\n18. **Remove Remote Repository:**\n    ```bash\n    git remote remove <name>\n    ```\n    Remove the remote repository with the specified name.\n\n19. **Rename a Branch:**\n    ```bash\n    git branch -m <old-name> <new-name>\n    ```\n    Rename the current branch from `<old-name>` to `<new-name>`.\n\n20. **Delete a Branch:**\n    ```bash\n    git branch -d <branch-name>\n    ```\n    Delete the specified branch. Use `-D` to force delete.\n\n21. **Create and Checkout New Branch:**\n    ```bash\n    git checkout -b <branch-name>\n    ```\n    Create a new branch with the specified name and switch to it.\n\n22. **Show Differences Between Branches:**\n    ```bash\n    git diff <branch1> <branch2>\n    ```\n    Show the differences between two branches.\n\n23. **Show Changes in a Specific Commit:**\n    ```bash\n    git show <commit-hash>\n    ```\n    Display the changes introduced by the specified commit.\n\n24. **Amend the Last Commit:**\n    ```bash\n    git commit --amend\n    ```\n    Modify the last commit (for example, to add forgotten files or update the commit message).\n\n25. **Reset Staging Area to Last Commit:**\n    ```bash\n    git reset HEAD\n    ```\n    Unstage all changes in the staging area.\n\n26. **Revert Changes Introduced by a Commit:**\n    ```bash\n    git revert <commit-hash>\n    ```\n    Create a new commit that undoes the changes introduced by the specified commit.\n\n27. **List Stashes:**\n    ```bash\n    git stash list\n    ```\n    List all stashes in the repository.\n\n28. **Apply a Stash:**\n    ```bash\n    git stash apply <stash-name>\n    ```\n    Apply changes from the specified stash.\n\n29. **Clean Untracked Files:**\n    ```bash\n    git clean -n\n    ```\n    Preview untracked files to be deleted.\n    ```bash\n    git clean -f\n    ```\n    Delete untracked files from the working directory.\n\n30. **Find Where a Commit is Referenced:**\n    ```bash\n    git branch --contains <commit-hash>\n    ```\n    List all branches containing the specified commit.\n\nThese commands cover various scenarios and operations commonly performed in Git. Experimenting with these commands in a safe environment can help you become more proficient with Git.\n\n\n# git rename branch command\n\nTo rename a branch in Git, you can use the following commands:\n\n```bash\n# Rename the local branch\ngit branch -m <old-branch-name> <new-branch-name>\n\n# Push the renamed branch to the remote repository\ngit push origin -u <new-branch-name>\n```\n\nReplace `<old-branch-name>` with the current name of the branch you want to rename, and `<new-branch-name>` with the new name you want to give to the branch.\n\nAfter renaming the local branch, you need to push the changes to the remote repository. The `-u` option is used to set up a tracking relationship between the local and remote branch. This allows you to use `git push` and `git pull` without specifying the branch name and remote.\n\nKeep in mind that renaming a branch might affect collaborators if they have the old branch name in their local repositories. It's a good practice to communicate such changes with your team to avoid confusion.\n\nNote: If you're renaming the branch you are currently on, you may encounter an error. In that case, switch to a different branch first, then perform the renaming.\n\n\n# git cherry-pick commnad\n\nThe `git cherry-pick` command is used to apply changes from a specific commit on one branch to another branch. It takes the changes introduced by the given commit and applies them as a new commit on the current branch. Here's the basic syntax:\n\n```bash\ngit cherry-pick <commit-hash>\n```\n\nReplace `<commit-hash>` with the hash of the commit you want to apply. You can find the commit hash by using `git log`.\n\nHere are a few additional options and considerations:\n\n- **Cherry-pick a Range of Commits:**\n  ```bash\n  git cherry-pick <start-commit>^..<end-commit>\n  ```\n  This applies all commits from `start-commit` to `end-commit` (excluding `start-commit` itself).\n\n- **Cherry-pick into a Specific Branch:**\n  ```bash\n  git cherry-pick <commit-hash> -e <branch-name>\n  ```\n  This applies the changes to the specified branch instead of the current branch.\n\n- **Interactive Mode:**\n  ```bash\n  git cherry-pick -i <commit-hash>\n  ```\n  This opens the commit in interactive mode, allowing you to edit the commit message and choose which changes to apply.\n\n- **Cherry-pick with a Different Parent:**\n  ```bash\n  git cherry-pick -x <commit-hash>\n  ```\n  This appends a line to the commit message indicating the original commit's hash, which can be useful for reference.\n\n- **Cherry-pick and Preserve the Original Committer:**\n  ```bash\n  git cherry-pick --signoff <commit-hash>\n  ```\n  This adds a \"Signed-off-by\" line to the commit message, preserving the original author's information.\n\nRemember that conflicts might occur during the cherry-pick process, especially if the changes in the commit being picked conflict with changes in the target branch. In such cases, you will need to resolve the conflicts manually.\n\nAlways be cautious when using `git cherry-pick`, especially on shared branches, as it introduces new commits and can alter the commit history. Communicate with your team before applying changes in this way.\n\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"8aceafc4-489c-4da9-a84e-43af2a76f537","order":0,"createdDate":{"$date":"2024-09-04T13:26:58.632Z"},"updatedDate":{"$date":"2024-09-04T13:26:58.632Z"},"uniqueId":"9c58f4b7-73e0-4fe1-93f9-1d9afa4cc0a8","__v":0}
{"_id":{"$oid":"66d8658926f385e1f94ed6b7"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple example demonstrating the use of `ExecutorService` in Java to manage a pool of threads and execute tasks asynchronously:\n\n```java\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class ExecutorServiceExample {\n\n    public static void main(String[] args) {\n        // Create an ExecutorService with a fixed thread pool of 3 threads\n        ExecutorService executorService = Executors.newFixedThreadPool(3);\n\n        // Submit a few tasks to the executor\n        Future<Integer> future1 = executorService.submit(new Task(10));\n        Future<Integer> future2 = executorService.submit(new Task(20));\n        Future<Integer> future3 = executorService.submit(new Task(30));\n\n        try {\n            // Retrieve and print the results of the tasks\n            System.out.println(\"Result of Task 1: \" + future1.get());\n            System.out.println(\"Result of Task 2: \" + future2.get());\n            System.out.println(\"Result of Task 3: \" + future3.get());\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            // Shutdown the executor service\n            executorService.shutdown();\n            try {\n                // Wait for all tasks to finish before shutting down the service completely\n                if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n                    executorService.shutdownNow();\n                }\n            } catch (InterruptedException e) {\n                executorService.shutdownNow();\n            }\n        }\n    }\n\n    // A simple Callable task that performs some computation and returns an integer result\n    static class Task implements Callable<Integer> {\n        private final int number;\n\n        public Task(int number) {\n            this.number = number;\n        }\n\n        @Override\n        public Integer call() throws Exception {\n            // Simulate some work with sleep\n            TimeUnit.SECONDS.sleep(2);\n            return number * 2;\n        }\n    }\n}\n```\n\n### Explanation:\n- **ExecutorService**: Created with a fixed thread pool of 3 threads using `Executors.newFixedThreadPool(3)`.\n- **Task Submission**: Three tasks are submitted using `submit()`. Each task is an instance of `Callable`, which performs a simple computation (doubling a number).\n- **Future**: The `submit()` method returns a `Future` object, which represents the result of an asynchronous computation. `Future.get()` is used to retrieve the result.\n- **Shutdown**: After submitting tasks, `executorService.shutdown()` is called to stop accepting new tasks and to wait for the completion of all running tasks. The code ensures proper shutdown by waiting up to 60 seconds for tasks to complete.\n\nThis example demonstrates basic usage of `ExecutorService` to manage threads and execute tasks in parallel.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"eb47fa29-e87a-4871-af04-4b58d861d485","order":0,"createdDate":{"$date":"2024-09-04T13:50:01.897Z"},"updatedDate":{"$date":"2024-09-04T13:50:01.897Z"},"uniqueId":"2c91ddb0-d1fc-45e6-8398-cdd7d11528c4","__v":0}
{"_id":{"$oid":"66d8664b26f385e1f94ef361"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Java, the `Executors` utility class provides several factory methods to create different types of thread pools. Here are the most commonly used types:\n\n### 1. **Fixed Thread Pool**\nCreates a thread pool with a fixed number of threads. If all threads are busy, new tasks will wait in a queue until a thread becomes available.\n\n```java\nExecutorService fixedThreadPool = Executors.newFixedThreadPool(4);\n```\n\n### 2. **Single Thread Executor**\nCreates a thread pool with a single worker thread. Tasks are executed sequentially in the order they are submitted.\n\n```java\nExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n```\n\n### 3. **Cached Thread Pool**\nCreates a thread pool that creates new threads as needed but will reuse previously constructed threads when available. Idle threads are terminated after 60 seconds of inactivity.\n\n```java\nExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n```\n\n### 4. **Scheduled Thread Pool**\nCreates a thread pool that can schedule commands to run after a given delay or to execute periodically.\n\n```java\nScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(3);\n```\n\n### 5. **Single Thread Scheduled Executor**\nCreates a single-threaded executor that can schedule commands to run after a given delay or to execute periodically.\n\n```java\nScheduledExecutorService singleThreadScheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n```\n\n### 6. **Work-Stealing Pool (Java 8 and above)**\nCreates a work-stealing thread pool that maintains enough threads to support a given parallelism level. It is useful for parallelism-intensive applications.\n\n```java\nExecutorService workStealingPool = Executors.newWorkStealingPool();\n```\n\n### 7. **Custom Thread Pool**\nYou can also create a custom thread pool using the `ThreadPoolExecutor` class. This allows you to specify the core pool size, maximum pool size, keep-alive time, and task queue.\n\n```java\nExecutorService customThreadPool = new ThreadPoolExecutor(\n    2, // core pool size\n    4, // maximum pool size\n    60, // keep-alive time\n    TimeUnit.SECONDS, // time unit for keep-alive\n    new LinkedBlockingQueue<Runnable>() // work queue\n);\n```\n\nEach of these thread pools serves different purposes, and the choice of which to use depends on the specific requirements of the application.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"3fdff74c-c76e-4288-8e8f-06f6c580e920","order":0,"createdDate":{"$date":"2024-09-04T13:53:15.566Z"},"updatedDate":{"$date":"2024-09-04T13:53:15.566Z"},"uniqueId":"dc75c0e1-fb0a-4ff9-a2e6-4776d360a675","__v":0}
{"_id":{"$oid":"66d8677d26f385e1f94f1073"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s a sample Java program that demonstrates how to use `Callable` with an `ExecutorService` to execute a task and retrieve the result.\n\n### Example: Using `Callable` with `ExecutorService`\n\n```java\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\n\npublic class CallableExample {\n\n    public static void main(String[] args) {\n        // Create a callable task\n        Callable<Integer> callableTask = () -> {\n            // Simulate some computation\n            System.out.println(\"Task started...\");\n            TimeUnit.SECONDS.sleep(2);\n            return 42; // return some result\n        };\n\n        // Create a fixed thread pool with 2 threads\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n        try {\n            // Submit the callable task to the executor service\n            Future<Integer> future = executorService.submit(callableTask);\n\n            // Do some other tasks if needed\n\n            // Retrieve the result from the future\n            Integer result = future.get(); // This will block until the result is available\n\n            System.out.println(\"Result from callable task: \" + result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            // Shutdown the executor service\n            executorService.shutdown();\n        }\n    }\n}\n```\n\n### Explanation:\n1. **Callable Task**: The `Callable` interface is used to define a task that returns a result. In this example, the task sleeps for 2 seconds and then returns `42`.\n2. **Executor Service**: We create an `ExecutorService` with a fixed thread pool of 2 threads.\n3. **Submit Task**: The `Callable` task is submitted to the executor service using the `submit()` method, which returns a `Future`.\n4. **Retrieve Result**: The `get()` method of the `Future` object is used to retrieve the result. This method blocks until the result is available.\n5. **Shutdown**: The `shutdown()` method is called to stop the executor service after the task is completed.\n\n### Output:\n```\nTask started...\nResult from callable task: 42\n```\n\nThis example shows how `Callable` is used to execute a task that returns a result and how `Future` is used to retrieve that result once the task completes.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"fa9f9c4d-6991-42e0-829f-eb0018d91f48","order":0,"createdDate":{"$date":"2024-09-04T13:58:21.211Z"},"updatedDate":{"$date":"2024-09-04T13:58:21.211Z"},"uniqueId":"08e6397a-61d2-45fa-bbb3-aa47370d7102","__v":0}
{"_id":{"$oid":"66d8689726f385e1f94f2d33"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, there are a few alternatives to using `future.get()` for retrieving the result of a task. Here are some of the ways:\n\n### 1. **Using `CompletionService`**\n   - `CompletionService` combines `Executor` and `BlockingQueue` to decouple the production of new asynchronous tasks from the consumption of the results of completed tasks.\n   - You can submit multiple tasks and then retrieve their results as they complete using `CompletionService`.\n\n   ```java\n   import java.util.concurrent.*;\n\n   public class CompletionServiceExample {\n\n       public static void main(String[] args) {\n           ExecutorService executorService = Executors.newFixedThreadPool(2);\n           CompletionService<Integer> completionService = new ExecutorCompletionService<>(executorService);\n\n           Callable<Integer> task1 = () -> {\n               TimeUnit.SECONDS.sleep(2);\n               return 1;\n           };\n\n           Callable<Integer> task2 = () -> {\n               TimeUnit.SECONDS.sleep(1);\n               return 2;\n           };\n\n           // Submit tasks\n           completionService.submit(task1);\n           completionService.submit(task2);\n\n           // Retrieve results as they complete\n           for (int i = 0; i < 2; i++) {\n               try {\n                   Future<Integer> future = completionService.take(); // Blocks until a task is completed\n                   System.out.println(\"Result: \" + future.get());\n               } catch (InterruptedException | ExecutionException e) {\n                   e.printStackTrace();\n               }\n           }\n\n           executorService.shutdown();\n       }\n   }\n   ```\n\n   **Explanation**:\n   - The `CompletionService` allows you to retrieve the results of tasks in the order they complete, rather than the order they were submitted.\n\n### 2. **Using `invokeAll()`**\n   - `invokeAll()` submits a collection of `Callable` tasks to an `ExecutorService` and returns a list of `Future` objects. This method blocks until all tasks are completed.\n\n   ```java\n   import java.util.Arrays;\n   import java.util.List;\n   import java.util.concurrent.*;\n\n   public class InvokeAllExample {\n\n       public static void main(String[] args) {\n           ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n           List<Callable<Integer>> tasks = Arrays.asList(\n               () -> { TimeUnit.SECONDS.sleep(2); return 1; },\n               () -> { TimeUnit.SECONDS.sleep(1); return 2; }\n           );\n\n           try {\n               List<Future<Integer>> futures = executorService.invokeAll(tasks);\n\n               for (Future<Integer> future : futures) {\n                   System.out.println(\"Result: \" + future.get()); // Blocks until the result is available\n               }\n           } catch (InterruptedException | ExecutionException e) {\n               e.printStackTrace();\n           } finally {\n               executorService.shutdown();\n           }\n       }\n   }\n   ```\n\n   **Explanation**:\n   - `invokeAll()` ensures that all tasks complete, and you can iterate through the returned list of `Future` objects to retrieve the results.\n\n### 3. **Using `invokeAny()`**\n   - `invokeAny()` submits a collection of `Callable` tasks to an `ExecutorService` and returns the result of the first task to complete successfully. This method blocks until one task completes or fails.\n\n   ```java\n   import java.util.Arrays;\n   import java.util.List;\n   import java.util.concurrent.*;\n\n   public class InvokeAnyExample {\n\n       public static void main(String[] args) {\n           ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n           List<Callable<Integer>> tasks = Arrays.asList(\n               () -> { TimeUnit.SECONDS.sleep(2); return 1; },\n               () -> { TimeUnit.SECONDS.sleep(1); return 2; }\n           );\n\n           try {\n               Integer result = executorService.invokeAny(tasks);\n               System.out.println(\"First completed task result: \" + result);\n           } catch (InterruptedException | ExecutionException e) {\n               e.printStackTrace();\n           } finally {\n               executorService.shutdown();\n           }\n       }\n   }\n   ```\n\n   **Explanation**:\n   - `invokeAny()` is useful when you are only interested in the result of the first task that completes, ignoring the rest.\n\n### 4. **Polling with `isDone()`**\n   - You can periodically check if a task is done using the `isDone()` method of the `Future` object.\n\n   ```java\n   import java.util.concurrent.*;\n\n   public class PollingExample {\n\n       public static void main(String[] args) {\n           ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n           Callable<Integer> task = () -> {\n               TimeUnit.SECONDS.sleep(2);\n               return 42;\n           };\n\n           Future<Integer> future = executorService.submit(task);\n\n           // Polling to check if the task is done\n           while (!future.isDone()) {\n               System.out.println(\"Task is still running...\");\n               try {\n                   TimeUnit.MILLISECONDS.sleep(500); // Wait for 500 milliseconds\n               } catch (InterruptedException e) {\n                   e.printStackTrace();\n               }\n           }\n\n           try {\n               System.out.println(\"Result: \" + future.get());\n           } catch (InterruptedException | ExecutionException e) {\n               e.printStackTrace();\n           } finally {\n               executorService.shutdown();\n           }\n       }\n   }\n   ```\n\n   **Explanation**:\n   - This method is less efficient compared to `get()` or other methods since it involves continuous polling, but it can be used when you want to perform other tasks while waiting for the result.\n\nEach of these methods provides different ways to retrieve the result of a `Callable` task, depending on your specific use case.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2b53aa32-ef79-46d6-96c9-af6ba88ba031","order":0,"createdDate":{"$date":"2024-09-04T14:03:03.038Z"},"updatedDate":{"$date":"2024-09-04T14:03:03.038Z"},"uniqueId":"ce07161b-691e-4bc9-8533-7b3a9eecf958","__v":0}
{"_id":{"$oid":"66d869af26f385e1f94f4a47"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, you can implement a callback mechanism in Java to execute a function asynchronously once a task is completed. Java doesn't have built-in support for callbacks like some other languages, but you can achieve this using interfaces, lambda expressions, or by using a `Future` combined with an `ExecutorService`.\n\n### Example using a Custom Callback Interface\nYou can define a custom callback interface and pass it to the task. When the task is done, it will invoke the callback.\n\n```java\nimport java.util.concurrent.*;\n\npublic class CallbackExample {\n\n    // Define a callback interface\n    interface TaskCallback<T> {\n        void onComplete(T result);\n    }\n\n    // A task that accepts a callback\n    static class Task implements Callable<Integer> {\n        private final TaskCallback<Integer> callback;\n\n        public Task(TaskCallback<Integer> callback) {\n            this.callback = callback;\n        }\n\n        @Override\n        public Integer call() throws Exception {\n            // Simulate long-running task\n            TimeUnit.SECONDS.sleep(2);\n            int result = 42;\n\n            // Call the callback with the result\n            callback.onComplete(result);\n\n            return result;\n        }\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n\n        // Implement the callback function\n        TaskCallback<Integer> callback = (result) -> {\n            System.out.println(\"Task completed with result: \" + result);\n            // Perform the next step here\n        };\n\n        // Submit the task with the callback\n        Future<Integer> future = executor.submit(new Task(callback));\n\n        executor.shutdown();\n    }\n}\n```\n\n### Explanation:\n- **TaskCallback Interface**: This is a functional interface with a single method, `onComplete`, that will be invoked when the task finishes.\n- **Task Class**: Implements `Callable<Integer>` and accepts a `TaskCallback` instance. Once the task is done, it calls `callback.onComplete(result)`.\n- **Main Method**: You create a `TaskCallback` as a lambda expression and pass it to the `Task` when submitting it to the executor.\n\n### Example using `CompletableFuture` for Asynchronous Callback\nAnother way to handle this is by using `CompletableFuture`, which provides a rich API for asynchronous programming and allows you to attach callbacks that are executed when the future completes.\n\n```java\nimport java.util.concurrent.*;\n\npublic class CompletableFutureExample {\n\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n\n        CompletableFuture.supplyAsync(() -> {\n            try {\n                // Simulate long-running task\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return 42;\n        }, executor).thenAccept(result -> {\n            System.out.println(\"Task completed with result: \" + result);\n            // Perform the next step here\n        });\n\n        executor.shutdown();\n    }\n}\n```\n\n### Explanation:\n- **supplyAsync**: Starts an asynchronous computation using the provided `ExecutorService`.\n- **thenAccept**: This is a callback that will be executed when the `CompletableFuture` completes. It takes the result of the computation as an argument.\n\n`CompletableFuture` provides a more idiomatic and flexible way to chain asynchronous operations and callbacks in Java.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d339e7c6-3277-44aa-8b81-5e7ab30ea2c8","order":0,"createdDate":{"$date":"2024-09-04T14:07:43.135Z"},"updatedDate":{"$date":"2024-09-04T14:07:43.135Z"},"uniqueId":"7b962e37-d775-41c8-8b3e-a20e39a97d5a","__v":0}
{"_id":{"$oid":"66d869d426f385e1f94f58a4"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, you can use a callback mechanism to execute a function or perform the next step asynchronously once a task is completed. While Java doesn't have a built-in callback function concept like some other languages, you can achieve this behavior using a combination of `Future`, `ExecutorService`, and custom callback interfaces. Additionally, Java 8 introduced `CompletableFuture`, which provides a more idiomatic way to handle callbacks.\n\n### 1. **Using `CompletableFuture` with a Callback**\n\n`CompletableFuture` allows you to attach callbacks that execute when the task completes. Here's an example:\n\n```java\nimport java.util.concurrent.*;\n\npublic class CompletableFutureCallbackExample {\n\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n        CompletableFuture.supplyAsync(() -> {\n            // Simulate a long-running task\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            return \"Task Result\";\n        }, executorService)\n        .thenAccept(result -> {\n            // This is the callback that gets executed once the task is done\n            System.out.println(\"Callback: The task is done, result: \" + result);\n        })\n        .exceptionally(ex -> {\n            // Handle any exceptions thrown during task execution\n            System.err.println(\"Task failed with exception: \" + ex);\n            return null;\n        });\n\n        System.out.println(\"Main thread is free to do other work...\");\n        \n        executorService.shutdown();\n    }\n}\n```\n\n**Explanation**:\n- `supplyAsync()` submits the task to the `ExecutorService` and returns a `CompletableFuture`.\n- `thenAccept()` is the callback function that gets executed when the task is completed.\n- `exceptionally()` handles any exceptions that might occur during task execution.\n\n### 2. **Using Custom Callback Interface**\n\nIf you're not using Java 8 or want more control, you can define your own callback interface and pass it to the task. Here's how:\n\n```java\nimport java.util.concurrent.*;\n\npublic class CustomCallbackExample {\n\n    // Define a callback interface\n    interface TaskCallback {\n        void onComplete(String result);\n        void onFailure(Exception ex);\n    }\n\n    // Callable task that accepts a callback\n    static class CallableTask implements Callable<String> {\n        private TaskCallback callback;\n\n        public CallableTask(TaskCallback callback) {\n            this.callback = callback;\n        }\n\n        @Override\n        public String call() {\n            try {\n                // Simulate a long-running task\n                TimeUnit.SECONDS.sleep(2);\n                String result = \"Task Result\";\n                if (callback != null) {\n                    callback.onComplete(result); // Call the callback on success\n                }\n                return result;\n            } catch (Exception ex) {\n                if (callback != null) {\n                    callback.onFailure(ex); // Call the callback on failure\n                }\n                return null;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n        TaskCallback callback = new TaskCallback() {\n            @Override\n            public void onComplete(String result) {\n                System.out.println(\"Callback: The task is done, result: \" + result);\n            }\n\n            @Override\n            public void onFailure(Exception ex) {\n                System.err.println(\"Callback: The task failed with exception: \" + ex.getMessage());\n            }\n        };\n\n        CallableTask task = new CallableTask(callback);\n        Future<String> future = executorService.submit(task);\n\n        System.out.println(\"Main thread is free to do other work...\");\n\n        executorService.shutdown();\n    }\n}\n```\n\n**Explanation**:\n- A custom `TaskCallback` interface defines `onComplete()` and `onFailure()` methods.\n- The `CallableTask` class takes this callback and invokes it when the task completes or fails.\n- You can pass different implementations of the callback depending on what you want to do when the task is done.\n\nThis way, you can effectively perform the next steps asynchronously once the task completes, without blocking the main thread.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d339e7c6-3277-44aa-8b81-5e7ab30ea2c8","order":0,"createdDate":{"$date":"2024-09-04T14:08:20.02Z"},"updatedDate":{"$date":"2024-09-04T14:08:20.02Z"},"uniqueId":"ca8e6178-ac04-4bee-b1c7-baaeeedc7d9b","__v":0}
{"_id":{"$oid":"66d86bca26f385e1f94f75c3"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, it is generally necessary to call `executorService.shutdown()` when you're done using an `ExecutorService`. This method initiates an orderly shutdown of the executor, in which previously submitted tasks are executed, but no new tasks will be accepted.\n\n### Why is it necessary?\n\n1. **Resource Management**: An `ExecutorService` typically uses a pool of threads. If you don't shut it down, those threads will remain active and consume system resources like memory and CPU.\n\n2. **Graceful Shutdown**: `shutdown()` allows the executor to finish executing all the submitted tasks before it stops. Without calling `shutdown()`, the JVM may not exit because the executor's threads are still running in the background.\n\n3. **Avoiding Memory Leaks**: Not shutting down an `ExecutorService` may lead to memory leaks because the threads and associated resources are not released properly.\n\n### What if you don't call `shutdown()`?\n\n- **JVM Won't Exit**: If you don't shut down the executor, the JVM may keep running indefinitely, waiting for the threads to finish.\n- **Resource Leaks**: The resources (threads, memory) associated with the executor might not be released, leading to resource exhaustion over time.\n\n### Alternatives to `shutdown()`\n\n- **shutdownNow()**: This method attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. This method does not wait for actively executing tasks to terminate, which can lead to incomplete tasks.\n  \n- **awaitTermination()**: After calling `shutdown()`, you can call `awaitTermination()` to block until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.\n\n### Example with `shutdown()` and `awaitTermination()`\n\n```java\nimport java.util.concurrent.*;\n\npublic class ExecutorServiceExample {\n\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n\n        executorService.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n                System.out.println(\"Task 1 completed\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executorService.submit(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(1);\n                System.out.println(\"Task 2 completed\");\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        executorService.shutdown(); // Initiates an orderly shutdown\n\n        try {\n            // Blocks until all tasks have completed execution or the timeout occurs\n            if (!executorService.awaitTermination(5, TimeUnit.SECONDS)) {\n                executorService.shutdownNow(); // Force shutdown if tasks take too long\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow(); // Force shutdown on interruption\n        }\n\n        System.out.println(\"Executor service shut down\");\n    }\n}\n```\n\nIn summary, calling `shutdown()` is important for proper resource management and ensuring that the JVM can exit cleanly after your program has finished executing.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e652e0ba-4257-47b6-8f21-622b9df6b74d","order":0,"createdDate":{"$date":"2024-09-04T14:16:42.79Z"},"updatedDate":{"$date":"2024-09-04T14:16:42.79Z"},"uniqueId":"e6da1755-584a-48fc-b82d-9e9d70822500","__v":0}
{"_id":{"$oid":"66d86d7f26f385e1f94f937c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s a simple Java program demonstrating the usage of atomic variables using `AtomicInteger`. Atomic variables are used to perform thread-safe operations on single variables without using explicit synchronization.\n\n```java\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class AtomicVariableExample {\n\n    // Shared atomic integer variable\n    private static AtomicInteger atomicCounter = new AtomicInteger(0);\n\n    public static void main(String[] args) {\n        // Create multiple threads that increment the atomic counter\n        Thread thread1 = new Thread(new IncrementTask());\n        Thread thread2 = new Thread(new IncrementTask());\n        Thread thread3 = new Thread(new IncrementTask());\n\n        // Start the threads\n        thread1.start();\n        thread2.start();\n        thread3.start();\n\n        // Wait for all threads to finish\n        try {\n            thread1.join();\n            thread2.join();\n            thread3.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        // Display the final value of the counter\n        System.out.println(\"Final counter value: \" + atomicCounter.get());\n    }\n\n    static class IncrementTask implements Runnable {\n        @Override\n        public void run() {\n            for (int i = 0; i < 1000; i++) {\n                // Atomically increment the counter\n                atomicCounter.incrementAndGet();\n            }\n            System.out.println(\"Thread \" + Thread.currentThread().getName() + \" completed.\");\n        }\n    }\n}\n```\n\n### Explanation:\n\n- **AtomicInteger**: The `AtomicInteger` class is used here to maintain a counter that can be safely incremented by multiple threads concurrently without requiring explicit synchronization.\n  \n- **incrementAndGet()**: This method atomically increments the current value by one and returns the updated value. It's thread-safe and ensures that even if multiple threads try to increment the counter simultaneously, no updates are lost.\n\n### Output:\n\nWhen you run this program, you will see output similar to this (depending on thread scheduling):\n\n```\nThread Thread-0 completed.\nThread Thread-2 completed.\nThread Thread-1 completed.\nFinal counter value: 3000\n```\n\n### Notes:\n- Without atomic variables (using regular integers), you would need to use synchronization (like `synchronized` blocks) to achieve thread-safety, which is less efficient.\n- This example demonstrates how `AtomicInteger` can be used to perform safe concurrent updates to a shared variable across multiple threads without using locks or synchronization.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9f216abe-d4a1-409f-8cd2-80869d5158e2","order":0,"createdDate":{"$date":"2024-09-04T14:23:59.966Z"},"updatedDate":{"$date":"2024-09-04T14:23:59.966Z"},"uniqueId":"ab535caf-deb6-4b9b-bfac-b9777ab5f2d7","__v":0}
{"_id":{"$oid":"66d86e0e26f385e1f94fb06a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Using atomic variables, like `AtomicInteger`, in place of a `synchronized` block offers several advantages, particularly in scenarios where you are dealing with single variables that need to be updated atomically in a multithreaded environment. Here are the key advantages:\n\n### 1. **Better Performance**\n   - **Lock-Free Operation**: Atomic variables use low-level CPU instructions (like compare-and-swap) to perform operations atomically without locking. This can lead to significant performance improvements because lock contention is avoided, especially when many threads are accessing the same variable.\n   - **No Context Switching Overhead**: Since atomic variables don't use locks, there's no context switching between threads, which can be expensive in terms of CPU time when using `synchronized`.\n\n### 2. **Reduced Complexity**\n   - **Simpler Code**: With atomic variables, there's no need to explicitly manage locks or synchronized blocks, which simplifies the code. This reduces the chance of making mistakes like deadlocks or incorrect lock granularity.\n   - **Avoiding Deadlocks**: Since there's no locking, atomic variables eliminate the possibility of deadlocks that can occur when multiple threads hold locks and wait for each other.\n\n### 3. **Thread-Safe Operations**\n   - **Atomicity of Operations**: Operations on atomic variables (like incrementing, setting, comparing, etc.) are guaranteed to be atomic, meaning they will complete entirely without interruption by other threads. This ensures consistent behavior in a multithreaded environment.\n   - **Non-Blocking Algorithms**: Atomic variables are often used in non-blocking algorithms where threads try to perform operations without getting blocked by locks, improving throughput in highly concurrent applications.\n\n### 4. **Fine-Grained Control**\n   - **Operation-Specific Atomicity**: Unlike `synchronized`, which locks an entire block of code or a method, atomic variables provide atomicity for specific operations only. This can lead to more efficient and fine-grained concurrency control.\n\n### 5. **Scalability**\n   - **Better Scalability in Multithreaded Applications**: Since atomic variables avoid locking, they can scale better in applications with a high number of threads. This leads to better performance under heavy load conditions, where traditional synchronized blocks might become a bottleneck due to lock contention.\n\n### 6. **Memory Consistency**\n   - **Memory Visibility Guarantees**: Atomic variables provide memory consistency guarantees, ensuring that changes made to the variable by one thread are visible to other threads immediately without needing to enter a synchronized block.\n\n### 7. **Built-in Methods for Common Operations**\n   - **Convenient Methods**: Atomic classes provide methods like `incrementAndGet()`, `decrementAndGet()`, `compareAndSet()`, etc., which are common operations in multithreaded scenarios. These methods simplify code by handling the atomicity internally.\n\n### Summary:\nUsing atomic variables like `AtomicInteger` instead of `synchronized` blocks allows for more efficient, scalable, and simpler concurrent programming, especially for operations on single variables or simple data structures. It eliminates the overhead and complexity associated with explicit synchronization while still providing the necessary thread safety.","textOutputType":"markdown","textInputType":"TextArea"},"rating":5,"linkedQuestionsId":"f4434626-3f0a-4942-b026-e0c2d27e343e","order":0,"createdDate":{"$date":"2024-09-04T14:26:22.488Z"},"updatedDate":{"$date":"2024-09-04T14:26:22.488Z"},"uniqueId":"9811261d-8cdb-403f-a3f3-d17f931e51ee","__v":0}
{"_id":{"$oid":"66d86f3a26f385e1f94fce4e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java SE 8 introduced several enhancements and new features related to multithreading and concurrency. Here are some of the key additions:\n\n### 1. **CompletableFuture**\n   - **Asynchronous Programming**: `CompletableFuture` is a powerful addition to the `java.util.concurrent` package that allows for non-blocking asynchronous programming. It provides methods for combining, chaining, and handling results of asynchronous computations.\n   - **Callbacks and Composability**: You can register callbacks to be executed upon the completion of a task, and it supports combining multiple `CompletableFuture` instances with methods like `thenCombine`, `thenApply`, `thenCompose`, etc.\n   - **Exception Handling**: It provides methods to handle exceptions in the asynchronous flow (`exceptionally`, `handle`, etc.).\n\n### 2. **Parallel Streams**\n   - **Parallel Processing**: Java SE 8 introduced the `Stream` API, which can be parallelized using `parallelStream()`. This allows you to process collections in parallel with minimal code changes, taking advantage of multiple CPU cores.\n   - **Automatic Thread Management**: Parallel streams use the Fork/Join framework under the hood to split tasks across multiple threads automatically.\n\n### 3. **Enhanced Fork/Join Framework**\n   - **Work Stealing**: The Fork/Join framework, which was introduced in Java 7, was enhanced in Java 8 with improvements in work-stealing algorithms. This helps in better balancing the load across available threads, leading to improved performance for parallel tasks.\n\n### 4. **Concurrent Accumulators and Adders**\n   - **LongAdder and DoubleAdder**: These classes were introduced in the `java.util.concurrent.atomic` package as alternatives to `AtomicLong` and `AtomicDouble`. They are designed for high-contention scenarios, offering better performance by reducing contention through striped counters.\n\n### 5. **Improvements in `ConcurrentHashMap`**\n   - **Enhanced Performance**: `ConcurrentHashMap` was significantly improved in Java 8, offering better scalability and performance by using internal optimizations such as reducing the overhead of locking and improving the distribution of segments.\n   - **New Methods**: Several new methods were added to `ConcurrentHashMap`, such as `forEach`, `reduce`, `search`, and `merge`, which are similar to the methods provided in the `Stream` API.\n\n### 6. **StampedLock**\n   - **Optimistic Locking**: `StampedLock` is a new lock mechanism introduced in Java 8 that offers an alternative to `ReentrantReadWriteLock`. It provides support for optimistic reads, which can be much faster than traditional read locks in cases where conflicts are rare.\n   - **Three Modes**: It supports three modes: writing, reading, and optimistic reading, allowing more flexibility in controlling concurrency.\n\n### 7. **ThreadLocal Improvements**\n   - **ThreadLocal.withInitial()**: A new method `withInitial(Supplier<? extends T> supplier)` was added, making it easier to create `ThreadLocal` variables with an initial value.\n\n### 8. **Executors New Methods**\n   - **New Executors Methods**: Java 8 added new methods to the `Executors` class, such as `newWorkStealingPool()`, which creates a work-stealing thread pool, and methods related to handling asynchronous tasks with `CompletableFuture`.\n\n### Summary:\nJava SE 8 brought significant enhancements to the concurrency model, making it easier to write efficient, scalable, and maintainable concurrent code. The introduction of `CompletableFuture` and the `Stream` API were particularly impactful, providing powerful tools for asynchronous and parallel programming, respectively. The enhancements in existing frameworks and classes like `Fork/Join`, `ConcurrentHashMap`, and the new `StampedLock` also contributed to better performance and flexibility in multithreaded applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"0a82984e-457d-4c8e-8e94-e90e10b61596","order":0,"createdDate":{"$date":"2024-09-04T14:31:22.198Z"},"updatedDate":{"$date":"2024-09-04T14:31:22.198Z"},"uniqueId":"73202542-2254-48f4-92e0-87ff5b1dd84b","__v":0}
{"_id":{"$oid":"66d8786d26f385e1f94feb32"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"\n## OOPS concept\n\n### Difference between Encapsulation and abstraction \nEncapsulation is the bundling of data and methods that operate on the data into a single unit or class, hiding the internal state and requiring all interaction to be performed through an object's methods. Abstraction, on the other hand, is the concept of hiding the implementation details and showing only the necessary features of an object or system to the outside world, focusing on what an object does rather than how it does it. In essence, encapsulation focuses on data hiding and access control, while abstraction focuses on simplifying complexity by hiding unnecessary details.\n\n\n### Please write few frequently interview questions related to Java for \"difference between ..\"\n\nCertainly! Here are a few interview questions related to Java and the differences between various concepts:\n\n1. **Difference between Encapsulation and Abstraction:**\n   - Explain the concepts of encapsulation and abstraction in Java.\n   - How does encapsulation promote data hiding and abstraction in Java?\n   - Can you provide an example of encapsulation and abstraction in Java code?\n\n2. **Difference between Inheritance and Polymorphism:**\n   - What is inheritance in Java, and how does it facilitate code reuse?\n   - Explain polymorphism and its types in Java.\n   - How does inheritance relate to polymorphism, and can you provide an example?\n\n3. **Difference between Abstract Class and Interface:**\n   - What are abstract classes and interfaces in Java, and when would you use each?\n   - Explain the key differences between abstract classes and interfaces.\n   - Can a class implement multiple interfaces but extend only one class? Why or why not?\n\n4. **Difference between Checked and Unchecked Exceptions:**\n   - Define checked and unchecked exceptions in Java.\n   - What is the main difference between checked and unchecked exceptions?\n   - Provide examples of each type of exception and when you would use them.\n\n5. **Difference between StringBuilder and StringBuffer:**\n   - Explain the differences between StringBuilder and StringBuffer in Java.\n   - When would you use StringBuilder over StringBuffer, and vice versa?\n   - How does the mutability of StringBuilder and StringBuffer affect performance?\n\nThese questions cover some of the fundamental concepts in Java programming and can help assess a candidate's understanding of these topics during an interview.\n\n\n### Difference between String, String buffer, String builder\n\nCertainly! Here's a breakdown of the differences between String, StringBuffer, and StringBuilder in Java:\n\n1. **String:**\n   - Strings in Java are immutable, meaning once created, their values cannot be changed.\n   - Operations such as concatenation or substring creation create new String objects rather than modifying the original String.\n   - String objects are stored in the string pool, which enhances memory efficiency by allowing multiple String variables to reference the same underlying String object if they have the same value.\n   - Because of immutability, String operations can be less efficient when manipulating large strings or performing many concatenations.\n\n2. **StringBuffer:**\n   - StringBuffer is a mutable sequence of characters.\n   - Unlike Strings, StringBuffer objects can be modified after creation without creating new objects.\n   - StringBuffer provides methods for appending, inserting, deleting, and replacing characters within the buffer.\n   - StringBuffer is thread-safe, meaning it is synchronized and can be accessed safely from multiple threads. However, this synchronization can impact performance.\n\n3. **StringBuilder:**\n   - StringBuilder is similar to StringBuffer in functionality, as both are mutable character sequences.\n   - However, StringBuilder is not thread-safe, making it faster than StringBuffer in single-threaded environments.\n   - Because StringBuilder is not synchronized, it is more efficient for use cases where thread safety is not a concern.\n   - StringBuilder is generally preferred over StringBuffer unless thread safety is explicitly required.\n\nIn summary, String is immutable, StringBuffer is mutable and thread-safe, and StringBuilder is mutable but not thread-safe. The choice between them depends on the specific requirements of the application, with StringBuilder being the preferred choice for most use cases due to its performance advantages in single-threaded environments.\n\n### Difference between Java and javascript \n\nJava and JavaScript are two distinct programming languages with different origins, purposes, and use cases:\n\n1. **Origin and History:**\n   - Java was developed by James Gosling and released by Sun Microsystems in 1995. It was initially designed for use in embedded systems but gained popularity for its ability to write once, run anywhere (WORA) due to its platform independence through the Java Virtual Machine (JVM).\n   - JavaScript, originally named LiveScript, was developed by Brendan Eich at Netscape in 1995. It was created to add interactivity to web pages and was later renamed JavaScript to capitalize on the popularity of Java. Despite the name similarity, JavaScript has very little in common with Java in terms of syntax or purpose.\n\n2. **Language Type:**\n   - Java is a statically typed, object-oriented programming language. It requires explicit declaration of data types and follows a class-based inheritance model.\n   - JavaScript is a dynamically typed, prototype-based scripting language. It does not require explicit declaration of data types, and objects can inherit properties directly from other objects.\n\n3. **Execution Environment:**\n   - Java applications are typically compiled into bytecode, which can be executed by any Java Virtual Machine (JVM) regardless of the underlying operating system or hardware. This provides platform independence.\n   - JavaScript code is executed by web browsers natively. It is primarily used for client-side scripting to enhance interactivity and functionality of web pages. However, JavaScript can also be executed server-side using environments like Node.js.\n\n4. **Typical Use Cases:**\n   - Java is commonly used for building standalone desktop applications, enterprise-level server-side applications (e.g., web servers, application servers), mobile applications (Android development), and large-scale distributed systems.\n   - JavaScript is predominantly used for front-end web development to add interactivity, validate forms, manipulate DOM elements, and make asynchronous requests. It is also increasingly used for server-side development (with Node.js), game development, and building desktop and mobile applications (using frameworks like Electron and React Native).\n\n5. **Syntax and Features:**\n   - While Java and JavaScript share some syntactical similarities (due to both being influenced by C), they have significant differences in syntax, semantics, and features. For example, Java is strongly typed, requires explicit declaration of variables and types, and follows a class-based inheritance model, whereas JavaScript is weakly typed, allows dynamic typing, and uses prototypal inheritance.\n\nIn summary, Java is a general-purpose, statically typed programming language used for a wide range of applications, while JavaScript is a dynamic scripting language primarily used for client-side web development but increasingly adopted for server-side development and other application domains.\n\n\n### Difference between List and Vectors\n\nIn Java, both `List` and `Vector` are interfaces that represent a collection of elements, but they have some differences:\n\n1. **Synchronization:**\n   - `Vector` is synchronized by default, meaning it is thread-safe for use in multi-threaded environments. Each method of `Vector` is synchronized, ensuring that only one thread can modify the vector at a time.\n   - `List` implementations such as `ArrayList` and `LinkedList` are not synchronized by default. If thread safety is required, synchronization needs to be handled externally (e.g., using `Collections.synchronizedList()`).\n\n2. **Performance:**\n   - Due to its synchronized nature, `Vector` might incur performance overhead in multi-threaded scenarios, as synchronization can lead to contention and reduced concurrency.\n   - `ArrayList` typically provides better performance than `Vector` in single-threaded scenarios, as it is not synchronized. However, in multi-threaded scenarios, the performance difference might be negligible or even in favor of `Vector` due to its built-in synchronization.\n\n3. **Growth Capacity:**\n   - Both `Vector` and `ArrayList` dynamically resize to accommodate additional elements beyond their initial capacity. However, `Vector` doubles its capacity by default when resizing, whereas `ArrayList` increases its capacity by 50% of the current size. This difference can affect memory usage and performance in certain scenarios.\n\n4. **Legacy Considerations:**\n   - `Vector` is one of the original collection classes in Java and is considered part of the Java Collections Framework. However, it has been largely superseded by other collection implementations such as `ArrayList` and `LinkedList`.\n   - `Vector` is still maintained for backward compatibility, but in most cases, developers prefer to use other implementations like `ArrayList` due to better performance and flexibility.\n\nIn summary, while both `List` and `Vector` represent ordered collections of elements, the choice between them depends on factors such as thread safety requirements, performance considerations, and legacy compatibility. In most modern Java applications, `ArrayList` or other non-synchronized implementations of `List` are preferred over `Vector` due to their better performance and flexibility.\n\n### Difference between ArrayList and LinkedList\n\nArrayList and LinkedList are both implementations of the List interface in Java, but they have different underlying data structures and performance characteristics:\n\n1. **Underlying Data Structure:**\n   - **ArrayList:** Internally backed by an array, which allows for random access to elements based on their index. Adding or removing elements at the end of the list is efficient because it doesn't require shifting elements. However, inserting or removing elements from the middle of the list requires shifting subsequent elements to accommodate the change.\n   - **LinkedList:** Internally implemented as a doubly linked list, where each element is a separate node containing a reference to the previous and next elements. This structure allows for efficient insertion and removal of elements at any position in the list because it only requires adjusting the references of neighboring nodes. However, random access to elements by index is less efficient compared to ArrayList because it requires traversing the list from the beginning or end.\n\n2. **Performance:**\n   - **ArrayList:** Provides efficient random access to elements using the get(int index) method, which has a time complexity of O(1). However, inserting or removing elements from the middle of the list has a time complexity of O(n) because it requires shifting subsequent elements.\n   - **LinkedList:** Offers efficient insertion and removal of elements anywhere in the list with a time complexity of O(1), as it only involves updating neighboring node references. However, accessing elements by index has a time complexity of O(n) because it requires traversing the list from the beginning or end to reach the desired position.\n\n3. **Memory Usage:**\n   - **ArrayList:** Consumes less memory per element compared to LinkedList because it doesn't require additional memory for storing node references.\n   - **LinkedList:** Requires additional memory overhead for storing references to the previous and next nodes, which can increase memory usage, especially for large collections.\n\n4. **Usage Scenarios:**\n   - **ArrayList:** Suitable for scenarios where random access to elements by index is frequent, and the collection size doesn't change frequently. It is also preferred when memory efficiency is a concern.\n   - **LinkedList:** Ideal for scenarios where frequent insertion or removal of elements at arbitrary positions is required, and random access by index is less common. It is often used in scenarios where dynamic resizing and efficient insertions/deletions are crucial.\n\nIn summary, ArrayList provides efficient random access to elements but slower insertion/removal operations, while LinkedList offers efficient insertion/removal operations but slower random access. The choice between them depends on the specific requirements of the application in terms of data access patterns, performance considerations, and memory usage.\n\n### Difference between HashMap and HashTable\n\nHashMap and HashTable are both implementations of the Map interface in Java, but they have several differences:\n\n1. **Synchronization:**\n   - **HashMap:** Not synchronized, meaning it is not thread-safe. Multiple threads can access a HashMap concurrently without external synchronization, but concurrent modifications may lead to undefined behavior.\n   - **HashTable:** Synchronized, meaning it is thread-safe. All methods of HashTable are synchronized, ensuring that only one thread can modify the table at a time. This makes HashTable slower in multi-threaded scenarios but provides thread safety.\n\n2. **Null Keys and Values:**\n   - **HashMap:** Allows one null key and multiple null values. Both key and value can be null.\n   - **HashTable:** Does not allow null keys or values. Attempting to insert a null key or value will throw a NullPointerException.\n\n3. **Performance:**\n   - **HashMap:** Generally offers better performance compared to HashTable due to its lack of synchronization. In single-threaded scenarios, HashMap is preferred for its faster operations.\n   - **HashTable:** Slower performance compared to HashMap due to its synchronized nature. Synchronization adds overhead, impacting performance, especially in high-throughput or multi-threaded scenarios.\n\n4. **Iterator Fail-Safe Behavior:**\n   - **HashMap:** Provides fail-fast iterators, meaning if the HashMap is structurally modified after the iterator is created (except through the iterator's own remove method), the iterator will throw a ConcurrentModificationException.\n   - **HashTable:** Uses legacy enumeration instead of iterators. The Enumeration returned by HashTable's keys and elements methods is not fail-fast and does not throw ConcurrentModificationException. This can lead to potential issues if the table is modified concurrently during iteration.\n\n5. **Legacy Status:**\n   - **HashMap:** Part of the Java Collections Framework since Java 1.2 and is the preferred choice for most new applications.\n   - **HashTable:** Considered a legacy class and has been largely replaced by HashMap. It is maintained for backward compatibility with legacy code but is not recommended for new development due to its slower performance and lack of support for null keys and values.\n\nIn summary, HashMap is preferred over HashTable in most scenarios due to its better performance, support for null keys and values, and fail-fast iterators. HashTable's main advantage is its thread safety, making it suitable for multi-threaded environments where synchronization is required. However, in modern Java development, explicit synchronization or the use of ConcurrentHashMap is often preferred over HashTable for better performance and flexibility.\n\n\n### Internal working of HashMap\n\nThe internal working of HashMap in Java is based on an array of linked lists (or more accurately, an array of buckets), where each bucket contains a linked list of key-value pairs. Here's a detailed explanation of how HashMap works internally:\n\n1. **Hashing Function:**\n   - When a key-value pair is added to the HashMap, the key's hashCode() method is called to generate a hash code. The hash code is an integer value that represents the key's unique identifier.\n   - The hashCode() method returns a hash value, which is used to determine the index (or bucket) in the array where the key-value pair will be stored.\n\n2. **Index Calculation:**\n   - To convert the hash code into an index within the array, HashMap applies a bit-wise AND operation between the hash code and (n-1), where n is the current capacity of the array. This operation ensures that the index falls within the range of array indices.\n\n3. **Collision Handling:**\n   - Since multiple keys can have the same hash code or may be mapped to the same index due to the finite size of the array, collisions can occur.\n   - To handle collisions, each bucket in the array is implemented as a linked list (or a balanced tree in Java 8 and later versions). If multiple key-value pairs map to the same index, they are stored in the same bucket as nodes in the linked list (or entries in the tree).\n   - When retrieving a value associated with a key, HashMap iterates through the linked list (or traverses the tree) in the corresponding bucket to find the entry with the matching key.\n\n4. **Load Factor and Rehashing:**\n   - HashMap maintains a load factor, which is a measure of how full the underlying array is. When the number of elements in the map exceeds a certain threshold determined by the load factor and the current capacity of the array, the map is resized and rehashed.\n   - Rehashing involves creating a new, larger array, recalculating the index for each key-value pair, and redistributing them into the new array. This process helps maintain a balance between the number of elements in the map and the size of the underlying array, preventing performance degradation due to collisions.\n\n5. **Iterating Through Entries:**\n   - When iterating through the entries in a HashMap, the order in which entries are returned is not guaranteed and may change when the map is modified (e.g., through addition or removal of elements). This behavior is due to the use of linked lists (or trees) for collision resolution and the resizing of the underlying array during rehashing.\n\nIn summary, HashMap uses hashing and linked lists (or trees) to efficiently store and retrieve key-value pairs. It handles collisions through separate chaining, dynamically resizes the underlying array to maintain performance, and provides constant-time average-case performance for insertion, retrieval, and removal operations.\n\n### Internal working of concurrent HashMap\n\nThe internal working of ConcurrentHashMap in Java is designed to support concurrent access from multiple threads while maintaining thread safety and performance. Here's an overview of its internal mechanisms:\n\n1. **Segmentation:**\n   - ConcurrentHashMap internally divides its data into segments, each of which acts as a separate HashMap. This segmentation reduces contention by allowing different segments to be locked independently, enabling concurrent access to different parts of the map.\n\n2. **Hashing and Indexing:**\n   - Similar to HashMap, ConcurrentHashMap uses a hashing function to determine the index of a key-value pair in the internal array. However, instead of a single hash table, ConcurrentHashMap maintains an array of segments, and each segment contains its own hash table (or similar data structure).\n\n3. **Lock Striping:**\n   - Each segment of ConcurrentHashMap is protected by a separate lock, which allows multiple threads to access different segments concurrently without blocking each other. This technique is called lock striping and helps to minimize contention while ensuring thread safety.\n   \n4. **Read Operations:**\n   - Read operations (e.g., get) can be performed concurrently without acquiring locks. Since each segment is independently accessible, multiple threads can read from different segments simultaneously without blocking.\n   \n5. **Write Operations:**\n   - Write operations (e.g., put, remove) acquire a lock on the appropriate segment to ensure thread safety. Lock striping allows multiple threads to modify different segments concurrently, reducing contention and improving performance.\n   \n6. **Expansion and Rehashing:**\n   - ConcurrentHashMap dynamically expands and rehashes segments when necessary to maintain a balance between the number of elements and the size of the internal data structure. This process helps prevent performance degradation due to collisions and ensures efficient concurrent access.\n\n7. **Concurrent Modification:**\n   - ConcurrentHashMap provides iterators that are designed to be weakly consistent. This means that they may reflect some modifications made after the iterator was created, but they do not throw ConcurrentModificationException. Instead, they may miss some elements or include some additional elements that were added during iteration.\n\nOverall, ConcurrentHashMap achieves thread safety and high concurrency by dividing its data into segments, using lock striping to minimize contention, and allowing concurrent read and write operations on different segments. This design enables efficient concurrent access to the map while maintaining consistent and predictable behavior.\n\n### Difference between Spring and Spring boot \n\nSpring and Spring Boot are both popular frameworks for building Java applications, but they serve different purposes and have distinct characteristics:\n\n1. **Spring Framework:**\n   - **Purpose:** Spring Framework is a comprehensive framework for building enterprise Java applications. It provides support for various features such as dependency injection, aspect-oriented programming, transaction management, MVC web framework, data access, and more.\n   - **Configuration:** Spring Framework requires explicit configuration using XML files, Java configuration classes, or annotations. Developers have full control over the configuration of their application, but it can be verbose and require boilerplate code.\n   - **Modularity:** Spring Framework is highly modular, allowing developers to use only the components they need for their application. It follows a modular architecture with various modules such as Spring Core, Spring MVC, Spring Data, Spring Security, etc.\n\n2. **Spring Boot:**\n   - **Purpose:** Spring Boot is an opinionated framework built on top of the Spring Framework, designed to simplify the process of building and deploying production-ready Spring-based applications. It aims to minimize configuration and boilerplate code by providing sensible defaults and auto-configuration.\n   - **Convention over Configuration:** Spring Boot promotes convention over configuration, meaning that it makes assumptions about the application's configuration based on the dependencies and components present in the classpath. Developers can override these defaults as needed, but they can get started quickly without extensive configuration.\n   - **Embedded Servers:** Spring Boot includes embedded servers (such as Tomcat, Jetty, or Undertow) by default, allowing developers to package their application as a standalone JAR file with an embedded server. This simplifies deployment and eliminates the need for external server setup.\n   - **Actuator:** Spring Boot includes built-in features like Spring Boot Actuator, which provides endpoints for monitoring and managing the application at runtime, such as health checks, metrics, and environment information.\n\nIn summary, Spring Framework is a comprehensive framework for building enterprise Java applications with explicit configuration and modular architecture. Spring Boot, on the other hand, is an opinionated framework that simplifies the process of building and deploying Spring-based applications by providing defaults, auto-configuration, and embedded servers. While Spring Framework offers flexibility and control, Spring Boot offers convenience and rapid development, making it a popular choice for microservices and cloud-native applications.\n\n\n### Difference between Maven and gradle\n\nMaven and Gradle are both popular build automation tools used primarily for Java projects, but they have differences in their configuration, dependency management, and flexibility:\n\n1. **Configuration:**\n   - **Maven:** Maven uses XML-based configuration files (pom.xml) to define project settings, dependencies, and build instructions. It follows a convention-over-configuration approach, meaning that it has predefined project structures and build lifecycles that developers need to adhere to.\n   - **Gradle:** Gradle uses a Groovy or Kotlin-based DSL (Domain-Specific Language) for build scripts (build.gradle). It offers a more flexible and expressive syntax compared to Maven's XML configuration. Gradle allows developers to define custom tasks, plugins, and build logic easily.\n\n2. **Dependency Management:**\n   - **Maven:** Maven uses a centralized repository called Maven Central to manage dependencies. Dependencies are declared in the pom.xml file, and Maven automatically downloads them from the repository during the build process. Maven relies on XML-based dependency management.\n   - **Gradle:** Gradle also supports Maven Central as well as other repositories like JCenter and custom repositories. Dependency declarations in Gradle's build.gradle file are more concise and expressive compared to Maven's XML format. Gradle provides a more flexible dependency resolution mechanism and supports transitive dependencies out of the box.\n\n3. **Performance:**\n   - **Maven:** Maven's performance can sometimes be slower, especially for large projects, due to its reliance on XML parsing and its lack of incremental builds by default.\n   - **Gradle:** Gradle offers faster build times, thanks to its incremental build feature, which only rebuilds the parts of the project that have changed since the last build. Gradle's dependency caching also contributes to faster builds by reducing the need to download dependencies repeatedly.\n\n4. **Plugin Ecosystem:**\n   - **Maven:** Maven has a rich ecosystem of plugins available for various tasks such as code quality checks, code coverage, and deployment to different environments. Plugins are configured in the pom.xml file.\n   - **Gradle:** Gradle also has a wide range of plugins available, and its plugin system is more flexible and powerful. Gradle plugins are written in Groovy or Kotlin and can define custom tasks, extensions, and other build logic directly in the build.gradle file.\n\n5. **Community Adoption:**\n   - **Maven:** Maven has been around longer and has a larger user base and more extensive documentation and community support.\n   - **Gradle:** Gradle has gained popularity in recent years, especially for Android development and enterprise projects. It has an active community and is continuously evolving with new features and improvements.\n\nIn summary, Maven and Gradle are both powerful build automation tools with their own strengths and weaknesses. Maven offers convention-over-configuration and XML-based configuration, while Gradle provides flexibility, expressiveness, and faster build times with its Groovy or Kotlin-based DSL. The choice between them depends on the project requirements, familiarity with the tools, and personal preference.\n\n\n### What is difference between roles and Authorization\n\nRoles and authorization are related concepts in security, but they serve different purposes:\n\n1. **Roles**:\n   - **Definition**: Roles represent a set of permissions or privileges granted to a user within an application or system.\n   - **Purpose**: Roles are used to categorize users based on their functional responsibilities or access levels. They define what actions or operations a user is allowed to perform within the application.\n   - **Implementation**: Roles are typically defined as a collection of permissions or authorities assigned to users or groups. Each role may have one or more associated permissions.\n   - **Example**: In a web application, roles could include \"admin\", \"user\", \"manager\", etc. Users with the \"admin\" role might have permission to perform administrative tasks, while users with the \"user\" role might have restricted access to certain features.\n\n2. **Authorization**:\n   - **Definition**: Authorization is the process of determining whether a user has permission to access a specific resource or perform a particular action within the application.\n   - **Purpose**: Authorization ensures that only authorized users are allowed to access certain parts of the application or perform specific operations.\n   - **Implementation**: Authorization is implemented by checking the user's roles or permissions against the access control rules defined for the resource or action. If the user has the necessary roles or permissions, they are granted access; otherwise, access is denied.\n   - **Example**: In a web application, authorization could involve checking whether a user has the \"admin\" role before allowing them to access the admin dashboard or perform administrative tasks.\n\nIn summary, roles define the set of permissions associated with a user, while authorization determines whether a user with specific roles or permissions is allowed to access a particular resource or perform an action within the application. Roles are used to categorize users and assign permissions, while authorization enforces access control based on those permissions.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"283807a5-2647-4896-a2f2-20faeed2b7ff","order":0,"createdDate":{"$date":"2024-09-04T15:10:37.894Z"},"updatedDate":{"$date":"2024-09-04T15:10:37.894Z"},"uniqueId":"3c97978a-456f-4fa5-9fd1-73959d36ba3d","__v":0}
{"_id":{"$oid":"66d879ae26f385e1f95017ef"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To implement a multi-threaded approach for extracting records from a source MySQL database, transforming the data, and inserting it into a target MySQL database, follow these steps:\n\n### Steps:\n\n1. **Setup MySQL Connections:**\n   - Configure JDBC drivers and set up connection properties for both the source and target MySQL databases.\n\n2. **Define the Data Model:**\n   - Create a class representing the question records with appropriate fields (e.g., `id`, `questionName`).\n\n3. **Create a Data Access Object (DAO) Layer:**\n   - Implement DAO classes for interacting with both the source and target databases. These classes will handle database operations.\n\n4. **Extract Data from Source Database:**\n   - Implement a method to fetch question records from the source database. Use pagination or batching to handle large datasets efficiently.\n\n5. **Transform Data:**\n   - Implement a method to transform the question names to uppercase.\n\n6. **Insert Transformed Data into Target Database:**\n   - Implement a method to insert transformed question records into the target database.\n\n7. **Implement Multi-Threading:**\n   - Use an `ExecutorService` to handle multiple threads for data extraction, transformation, and insertion.\n\n8. **Coordinate Tasks:**\n   - Use futures or callable tasks to manage and coordinate asynchronous processing.\n\n9. **Handle Exceptions and Logging:**\n   - Implement exception handling and logging to manage errors and track the progress of operations.\n\n10. **Shutdown ExecutorService:**\n    - Properly shut down the `ExecutorService` once all tasks are completed.\n\n### Sample Code:\n\nHere is a simplified example using Java and JDBC:\n\n```java\nimport java.sql.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class DataTransfer {\n\n    private static final String SOURCE_URL = \"jdbc:mysql://source-db-url\";\n    private static final String TARGET_URL = \"jdbc:mysql://target-db-url\";\n    private static final String USER = \"username\";\n    private static final String PASSWORD = \"password\";\n\n    private static final int BATCH_SIZE = 100; // Adjust based on your needs\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(10); // Use an appropriate number of threads\n\n        try (Connection sourceConn = DriverManager.getConnection(SOURCE_URL, USER, PASSWORD);\n             Connection targetConn = DriverManager.getConnection(TARGET_URL, USER, PASSWORD)) {\n\n            // Step 1: Extract records from source database\n            List<Question> questions = fetchQuestionsFromSource(sourceConn);\n\n            // Step 2: Process records in parallel\n            List<Callable<Void>> tasks = new ArrayList<>();\n            for (Question question : questions) {\n                tasks.add(() -> {\n                    // Transform\n                    question.setQuestionName(question.getQuestionName().toUpperCase());\n\n                    // Insert into target database\n                    insertQuestionIntoTarget(targetConn, question);\n                    return null;\n                });\n            }\n\n            // Execute tasks\n            executor.invokeAll(tasks);\n\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    private static List<Question> fetchQuestionsFromSource(Connection conn) throws SQLException {\n        List<Question> questions = new ArrayList<>();\n        String sql = \"SELECT id, questionName FROM Questions\";\n        try (Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n\n            while (rs.next()) {\n                Question question = new Question(rs.getInt(\"id\"), rs.getString(\"questionName\"));\n                questions.add(question);\n            }\n        }\n        return questions;\n    }\n\n    private static void insertQuestionIntoTarget(Connection conn, Question question) throws SQLException {\n        String sql = \"INSERT INTO Questions (id, questionName) VALUES (?, ?)\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, question.getId());\n            pstmt.setString(2, question.getQuestionName());\n            pstmt.executeUpdate();\n        }\n    }\n\n    static class Question {\n        private int id;\n        private String questionName;\n\n        public Question(int id, String questionName) {\n            this.id = id;\n            this.questionName = questionName;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getQuestionName() {\n            return questionName;\n        }\n\n        public void setQuestionName(String questionName) {\n            this.questionName = questionName;\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Setup Connections**: JDBC connections to the source and target databases are established.\n\n2. **Extract Data**: `fetchQuestionsFromSource` method retrieves records from the source database.\n\n3. **Transform and Insert Data**: For each question, transform the name to uppercase and insert it into the target database.\n\n4. **Multi-threading**: `ExecutorService` is used to execute data transformation and insertion tasks in parallel.\n\n5. **Shutdown**: The `ExecutorService` is properly shut down after all tasks are completed.\n\nYou may need to adjust the number of threads, batch sizes, and error handling based on your specific requirements and workload.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"500a9015-7542-45ea-8926-d5d1cd288117","order":0,"createdDate":{"$date":"2024-09-04T15:15:58.21Z"},"updatedDate":{"$date":"2024-09-04T15:15:58.21Z"},"uniqueId":"c83946c6-5bbb-4b5a-a1ff-21d40281089b","__v":0}
{"_id":{"$oid":"66d87b1c26f385e1f95043bb"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"When dealing with a large number of records (e.g., millions) and you don't know the exact number, you need to consider efficient data handling, processing, and resource management. Here are some suggested changes and improvements to the initial approach:\n\n### 1. **Pagination/Batching:**\n   - **Use Pagination:** Instead of loading all records at once, fetch data in smaller chunks or pages. This prevents high memory usage and improves performance.\n   - **Implement Batch Processing:** Process records in batches to manage memory usage and reduce the load on the database.\n\n### 2. **Parallel Processing:**\n   - **Divide Workload:** Use multiple threads to process batches concurrently, which helps in speeding up the process and efficiently utilizing CPU resources.\n\n### 3. **Efficient Data Transformation:**\n   - **In-Memory Transformation:** Transform data in-memory within batches before inserting it into the target database.\n\n### 4. **Resource Management:**\n   - **Manage Connections:** Use connection pooling to efficiently manage database connections and reduce connection overhead.\n   - **Monitor and Adjust Thread Pool:** Dynamically adjust the number of threads based on the workload and available system resources.\n\n### 5. **Error Handling and Logging:**\n   - **Implement Robust Error Handling:** Ensure that errors are logged, and retries or fallback mechanisms are in place for failed operations.\n   - **Progress Monitoring:** Track progress and provide status updates, especially for long-running tasks.\n\n### 6. **Shutdown Handling:**\n   - **Graceful Shutdown:** Ensure that the `ExecutorService` is properly shut down and any pending tasks are completed or handled.\n\n### Sample Revised Code:\n\nHere’s an updated version of the code that incorporates pagination and batch processing:\n\n```java\nimport java.sql.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class DataTransfer {\n\n    private static final String SOURCE_URL = \"jdbc:mysql://source-db-url\";\n    private static final String TARGET_URL = \"jdbc:mysql://target-db-url\";\n    private static final String USER = \"username\";\n    private static final String PASSWORD = \"password\";\n\n    private static final int BATCH_SIZE = 1000; // Number of records per batch\n    private static final int THREAD_POOL_SIZE = 10; // Number of concurrent threads\n\n    public static void main(String[] args) throws Exception {\n        ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);\n\n        try (Connection sourceConn = DriverManager.getConnection(SOURCE_URL, USER, PASSWORD);\n             Connection targetConn = DriverManager.getConnection(TARGET_URL, USER, PASSWORD)) {\n\n            int offset = 0;\n            boolean hasMoreData = true;\n\n            while (hasMoreData) {\n                // Step 1: Extract records from source database in batches\n                List<Question> questions = fetchQuestionsFromSource(sourceConn, offset, BATCH_SIZE);\n                hasMoreData = !questions.isEmpty();\n                \n                if (hasMoreData) {\n                    // Step 2: Process records in parallel\n                    List<Callable<Void>> tasks = new ArrayList<>();\n                    for (Question question : questions) {\n                        tasks.add(() -> {\n                            // Transform\n                            question.setQuestionName(question.getQuestionName().toUpperCase());\n\n                            // Insert into target database\n                            insertQuestionIntoTarget(targetConn, question);\n                            return null;\n                        });\n                    }\n\n                    // Execute tasks\n                    executor.invokeAll(tasks);\n\n                    // Update offset for next batch\n                    offset += BATCH_SIZE;\n                }\n            }\n\n        } finally {\n            executor.shutdown();\n            executor.awaitTermination(1, TimeUnit.HOURS); // Wait for all tasks to complete\n        }\n    }\n\n    private static List<Question> fetchQuestionsFromSource(Connection conn, int offset, int limit) throws SQLException {\n        List<Question> questions = new ArrayList<>();\n        String sql = \"SELECT id, questionName FROM Questions LIMIT ? OFFSET ?\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, limit);\n            pstmt.setInt(2, offset);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                while (rs.next()) {\n                    Question question = new Question(rs.getInt(\"id\"), rs.getString(\"questionName\"));\n                    questions.add(question);\n                }\n            }\n        }\n        return questions;\n    }\n\n    private static void insertQuestionIntoTarget(Connection conn, Question question) throws SQLException {\n        String sql = \"INSERT INTO Questions (id, questionName) VALUES (?, ?)\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, question.getId());\n            pstmt.setString(2, question.getQuestionName());\n            pstmt.executeUpdate();\n        }\n    }\n\n    static class Question {\n        private int id;\n        private String questionName;\n\n        public Question(int id, String questionName) {\n            this.id = id;\n            this.questionName = questionName;\n        }\n\n        public int getId() {\n            return id;\n        }\n\n        public String getQuestionName() {\n            return questionName;\n        }\n\n        public void setQuestionName(String questionName) {\n            this.questionName = questionName;\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Pagination**: `fetchQuestionsFromSource` method now supports `LIMIT` and `OFFSET` to handle data in batches.\n2. **Thread Pool**: `ExecutorService` is used to manage concurrent processing of batches.\n3. **Batch Size**: Adjust `BATCH_SIZE` based on memory and performance considerations.\n4. **Shutdown**: `awaitTermination` ensures that the `ExecutorService` shuts down gracefully after all tasks are completed.\n\nThis approach allows for efficient handling of large datasets, reducing memory usage, and improving overall performance.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"cb9b94a8-a30d-4575-952f-92810fa6755c","order":0,"createdDate":{"$date":"2024-09-04T15:22:04.309Z"},"updatedDate":{"$date":"2024-09-04T15:22:04.309Z"},"uniqueId":"fde1ad21-63f2-457a-85ba-921463b0dee2","__v":0}
{"_id":{"$oid":"66d87d1a26f385e1f9508fe9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a summary of key terminologies related to exception handling:\n\n### 1. **Exception:**\n   - **Definition:** An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions. It is an object representing an error or unexpected condition.\n   - **Example:** `java.lang.ArithmeticException`\n\n### 2. **Throwable:**\n   - **Definition:** The superclass of all errors and exceptions in Java. It has two main subclasses: `Exception` and `Error`.\n   - **Example:** `java.lang.Throwable`\n\n### 3. **Exception Class:**\n   - **Definition:** A class that extends `Throwable` and represents an exception that can be caught and handled by the application.\n   - **Example:** `java.lang.Exception`\n\n### 4. **Error Class:**\n   - **Definition:** A class that extends `Throwable` and represents serious errors that are typically outside the control of the application, such as hardware failures.\n   - **Example:** `java.lang.Error`\n\n### 5. **Checked Exception:**\n   - **Definition:** An exception that must be either caught or declared in the method's `throws` clause. These are exceptions that are checked at compile time.\n   - **Example:** `java.io.IOException`\n\n### 6. **Unchecked Exception:**\n   - **Definition:** An exception that does not need to be caught or declared. These exceptions are not checked at compile time but are checked at runtime.\n   - **Example:** `java.lang.NullPointerException`\n\n### 7. **Try Block:**\n   - **Definition:** A block of code in which exceptions can occur. It is used to start a block of code where exceptions will be handled.\n   - **Syntax:**\n     ```java\n     try {\n         // Code that may throw an exception\n     }\n     ```\n\n### 8. **Catch Block:**\n   - **Definition:** A block of code that handles exceptions thrown by the try block. Multiple catch blocks can follow a single try block.\n   - **Syntax:**\n     ```java\n     catch (ExceptionType e) {\n         // Code to handle the exception\n     }\n     ```\n\n### 9. **Finally Block:**\n   - **Definition:** A block of code that will always execute after the try and catch blocks, regardless of whether an exception was thrown or not. It is typically used for cleanup activities.\n   - **Syntax:**\n     ```java\n     finally {\n         // Cleanup code\n     }\n     ```\n\n### 10. **Throw Statement:**\n   - **Definition:** A statement used to explicitly throw an exception from a method or block of code.\n   - **Syntax:**\n     ```java\n     throw new ExceptionType(\"Error message\");\n     ```\n\n### 11. **Throws Clause:**\n   - **Definition:** A clause used in a method signature to declare that a method may throw one or more exceptions. It informs the caller of the method about possible exceptions.\n   - **Syntax:**\n     ```java\n     public void method() throws IOException, SQLException {\n         // Method code\n     }\n     ```\n\n### 12. **Exception Propagation:**\n   - **Definition:** The process by which an exception is passed up the call stack to find a suitable handler.\n   - **Example:** If a method does not handle an exception, it is propagated to the calling method.\n\n### 13. **Custom Exception:**\n   - **Definition:** An exception class created by the programmer to handle specific situations or errors that are not covered by standard exceptions.\n   - **Example:**\n     ```java\n     public class CustomException extends Exception {\n         public CustomException(String message) {\n             super(message);\n         }\n     }\n     ```\n\n### 14. **Stack Trace:**\n   - **Definition:** A list of method calls that were active at the time an exception was thrown. It helps in debugging by providing information about where the exception occurred.\n   - **Example:**\n     ```java\n     e.printStackTrace();\n     ```\n\n### 15. **Exception Handling Best Practices:**\n   - **Handle Specific Exceptions:** Catch specific exceptions rather than generic ones.\n   - **Avoid Empty Catch Blocks:** Do not leave catch blocks empty; handle or log the exception.\n   - **Use Finally for Cleanup:** Use the `finally` block for resource cleanup, ensuring resources are released even if an exception occurs.\n   - **Rethrow Exceptions:** Use `throw` to rethrow an exception if you cannot handle it in the current method.\n\nThese terminologies and practices help in understanding and implementing effective exception handling in Java applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"8a59fdb7-8d64-4096-855d-510e2d131dff","order":0,"createdDate":{"$date":"2024-09-04T15:30:34.753Z"},"updatedDate":{"$date":"2024-09-04T15:30:34.753Z"},"uniqueId":"23f85d17-05a3-4129-8e77-db7be7650ee3","__v":0}
{"_id":{"$oid":"66d88bc726f385e1f950af6d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Keywords related to\n[Java Keywords](#java) | [HTML Keywords](#html) | [CSS3 Keywords](#css3) | [ReactJS Keywords](#reactjs) | [AWS Keywords](#aws) | [Adobe Flex4 Keywords](#adobe-flex4) | [Team Lead Keywords](#team-lead) | [ChatGPT Keywords](#chatgpt) | [Agile Keywords](#agile) | [Spring Keywords](#spring) | [Spring Boot Keywords](#spring-boot) | [Microservice Keywords](#microservice) | [Angular Keywords](#angular) | [SQL Keywords](#sql) | [AngularJS Keywords](#angularjs) | [JavaScript Keywords](#javascript) | [Node.js Keywords](#nodejs) | [MongoDB Keywords](#mongodb) | [Spring Security Keywords](#spring-security)\n\n\n[Terminologies keywords related to Kafka](#terminologies-keywords-related-to-kafka)  \n[Apache Ant terminologies and buzz words](#apache-ant-terminologies-and-buzz-words)  \n[Kubernetes terminologies and buzz words](#kubernetes-terminologies-and-buzz-words)  \n[Docker terminologies and buzz words](#docker-terminologies-and-buzz-words)  \n[Docker compose terminologies and buzz words](#docker-compose-terminologies-and-buzz-words)  \n[Frontend development terminologies and buzz words](#frontend-development-terminologies-and-buzz-words)  \n[Backend development terminologies and buzz words](#backend-development-terminologies-and-buzz-words)  \n[Microservices terminologies and buzz words](#microservices-terminologies-and-buzz-words)  \n[Mongodb terminologies and buzz words](#mongodb-terminologies-and-buzz-words)  \n[MySQL terminologies and buzz words](#mysql-terminologies-and-buzz-words)  \n[ETL terminologies and buzz words](#etl-terminologies-and-buzz-words)  \n[AWS S3 terminologies and buzz words](#aws-s3-terminologies-and-buzz-words)  \n[AWS glue terminologies and buzz words](#aws-glue-terminologies-and-buzz-words)  \n[AWS glue DataBrew terminologies and buzz words](#aws-glue-databrew-terminologies-and-buzz-words)  \n[Microservices design patterns terminologies and buzz words](#microservices-design-patterns-terminologies-and-buzz-words)  \n[Core Java design patterns terminologies and buzz words](#core-java-design-patterns-terminologies-and-buzz-words)  \n[Java 8 terminologies and buzz words](#java-8-terminologies-and-buzz-words)  \n[OOPs (Object-oriented programming) concept terminologies and buzz words](#oops-object-oriented-programming-concept-terminologies-and-buzz-words)  \n[Java concurrency terminologies and buzz words](#java-concurrency-terminologies-and-buzz-words)  \n[JDBC terminologies and buzz words](#jdbc-terminologies-and-buzz-words)  \n[JSP terminologies and buzz words](#jsp-terminologies-and-buzz-words)  \n[JSTL (JavaServer Pages Standard Tag Library) terminologies and buzz words](#jstl-javaserver-pages-standard-tag-library-terminologies-and-buzz-words)  \n[Servlets terminologies and buzz words](#servlets-terminologies-and-buzz-words)  \n[Webpack terminologies and buzz words](#webpack-terminologies-and-buzz-words)  \n[Rollup.js terminologies and buzz words](#rollupjs-terminologies-and-buzz-words)  \n[Javascript terminologies and buzz words](#javascript-terminologies-and-buzz-words)  \n[Reactjs terminologies and buzz words](#reactjs-terminologies-and-buzz-words)  \n[Reduxjs terminologies and buzz words](#reduxjs-terminologies-and-buzz-words)  \n[JWT terminologies and buzz words](#jwt-terminologies-and-buzz-words)  \n[Java Annotations terminologies and buzz words](#java-annotations-terminologies-and-buzz-words)  \n[Nodejs terminologies and buzz words](#nodejs-terminologies-and-buzz-words)  \n[PUG (formerly known as Jade) terminologies and buzz words](#pug-formerly-known-as-jade-terminologies-and-buzz-words)  \n[EJS terminologies and buzz words](#ejs-terminologies-and-buzz-words)  \n[Angular terminologies and buzz words](#angular-terminologies-and-buzz-words)  \n[spring boot JPA terminologies and buzz words](#spring-boot-jpa-terminologies-and-buzz-words)  \n[Spring boot security terminologies and buzz words](#spring-boot-security-terminologies-and-buzz-words)  \n[Maven terminologies and buzz words](#maven-terminologies-and-buzz-words)  \n[Apache Ant terminologies and buzz words](#apache-ant-terminologies-and-buzz-words)  \n[Gradle terminologies and buzz words](#gradle-terminologies-and-buzz-words)  \n\n# Please write **keywords** related to:  \n\n## java\n\nJava, programming language, JVM, object-oriented, class, method, variable, inheritance, polymorphism, encapsulation, abstraction, syntax, platform-independent, JDK, JRE, bytecode, IDE, Eclipse, NetBeans, IntelliJ, data types, loops, conditional statements, exception handling, collections, arrays, strings, threads, GUI, Swing, JavaFX, serialization, JDBC, Spring framework.\n\n## HTML\n\nHTML, web development, markup language, tags, elements, attributes, structure, head, body, paragraph, heading, hyperlink, image, list, table, form, input, button, attribute, CSS, style, JavaScript, DOM, HTML5, semantic elements, div, span, attribute, responsive design, metadata, viewport, doctype, link, media, attribute, encoding, validation, W3C, browser, rendering, SEO, accessibility, semantic markup.\n\n## css3\n\nCSS3, Cascading Style Sheets, styling, design, selectors, properties, values, box model, layout, flexbox, grid, responsive design, media queries, transitions, animations, pseudo-classes, pseudo-elements, transforms, gradients, shadows, fonts, colors, variables, preprocessors (e.g., Sass, Less), box-sizing, normalize, vendor prefixes, browser compatibility, CSS frameworks (e.g., Bootstrap, Foundation), CSS Grid Layout, CSS Flexbox, keyframes, filters, blend modes, 3D transforms, responsive typography.\n\n## reactjs\n\nReactJS, JavaScript library, front-end, UI library, component-based, virtual DOM, JSX, state, props, lifecycle methods, hooks, useState, useEffect, context API, Redux, Flux architecture, component rendering, React Router, conditional rendering, event handling, forms in React, controlled components, uncontrolled components, React Native, server-side rendering (SSR), Single Page Application (SPA), declarative programming, functional components, class components, higher-order components (HOC), PureComponent, memoization, React Fiber, reconciliation, React DevTools, JSX syntax, Babel.\n\n## AWS\n\nAWS, Amazon Web Services, cloud computing, EC2, S3, Lambda, IAM, VPC, RDS, DynamoDB, CloudFront, Route 53, Elastic Beanstalk, ECS, EKS, SNS, SQS, CloudWatch, CloudTrail, AWS CLI, AWS SDK, serverless architecture, API Gateway, Cognito, AWS Identity and Access Management (IAM), Security Groups, Load Balancer, Elastic Load Balancing (ELB), Auto Scaling, Elastic Container Service (ECS), Elastic Kubernetes Service (EKS), CloudFormation, AWS Lambda, Amazon Aurora, Amazon Redshift, AWS Elastic Beanstalk, AWS Direct Connect, AWS CodeDeploy, AWS CodePipeline, AWS Organizations, AWS Key Management Service (KMS), AWS Elastic File System (EFS).\n\n## Adobe Flex4\n\nAdobe Flex 4, Flex framework, ActionScript, MXML, Adobe Flash, Rich Internet Applications (RIAs), UI components, data binding, Spark components, Halo components, Flex SDK, Flex Compiler, Flex Builder, FlexJS, Flex Data Services, Flash Builder, Flash Player, Adobe AIR, cross-platform development, declarative programming, event-driven programming, Flex containers, ItemRenderers, States, Skinning, Flex modules, AMF (Action Message Format), BlazeDS, Flex remoting, Flex charting, Flex automation, Flex SDK open source, Flex framework architecture.\n\n## team lead\n\nTeam lead, leadership, management, communication, delegation, mentorship, team building, project management, decision-making, problem-solving, conflict resolution, motivation, accountability, goal setting, collaboration, coaching, feedback, interpersonal skills, time management, organizational skills, strategic thinking, empowerment, Agile methodology, Scrum, task prioritization, technical leadership, decision-making, vision, adaptability, team dynamics, performance evaluation, continuous improvement.\n\n## chatgpt\n\nChatGPT, GPT-3.5, OpenAI, language model, natural language processing, conversational AI, chatbot, artificial intelligence, deep learning, neural networks, transformer architecture, training data, fine-tuning, prompt engineering, natural language understanding, text generation, context-aware responses, knowledge cutoff, virtual assistant, human-like conversation, machine learning, response generation, large language model, NLP applications, language understanding, chat-based interfaces.\n\n## Agile\n\nAgile, Scrum, Kanban, Agile methodology, Agile principles, Sprint, User Stories, Product Backlog, Sprint Backlog, Daily Standup, Sprint Review, Sprint Retrospective, Agile Manifesto, Iterative development, Incremental development, Cross-functional teams, Product Owner, Scrum Master, Development Team, Agile ceremonies, Continuous Integration, Continuous Delivery, Burndown chart, Velocity, Lean Agile, Agile framework, Agile practices, Agile coaching, Agile transformation, Agile mindset, Adaptive planning, Customer collaboration, Responding to change, Agile tools.\n\n## spring\n\nSpring Framework, Java, Dependency Injection, Inversion of Control (IoC), Spring Boot, Spring MVC, Spring Data, Spring Security, Spring AOP (Aspect-Oriented Programming), Bean, ApplicationContext, Configuration, Bean Lifecycle, Spring Batch, Spring Cloud, Spring Integration, Spring REST, Hibernate, JPA (Java Persistence API), Spring JDBC, Spring Transactions, Spring Test, Spring Annotations, Spring Profiles, Spring WebFlux, Spring WebSocket, Spring Core, Spring Expression Language (SpEL), Spring AspectJ integration, Spring Boot Starter, Spring Boot Actuator, Spring Cloud Netflix, Spring Cloud Config, Spring Cloud Gateway.\n\n## spring boot\n\nSpring Boot, Microservices, Java, Spring Framework, Embedded Tomcat, Embedded Jetty, Embedded Undertow, Spring Boot Starter, Spring Boot Auto-Configuration, Spring Boot Actuator, Spring Boot DevTools, Spring Boot CLI, Spring Boot Data, Spring Boot Web, Spring Boot Security, Spring Boot Testing, Spring Boot RESTful API, Spring Boot JPA, Spring Boot Thymeleaf, Spring Boot Logging, Spring Boot Configuration, Spring Boot Profiles, Spring Boot Gradle, Spring Boot Maven, Spring Boot Cloud, Spring Boot Microservices Architecture, Spring Boot Docker, Spring Boot Kubernetes, Spring Boot Monitoring, Spring Boot Logging, Spring Boot Annotations.\n\n## microservice\n\nMicroservices, Microservices Architecture, Service-oriented Architecture (SOA), Decentralized, Scalability, Resilience, Independence, Docker, Kubernetes, Containerization, RESTful API, JSON, Service Discovery, API Gateway, Circuit Breaker, Load Balancing, Event-driven, Asynchronous Communication, Message Queue, Event Sourcing, CQRS (Command Query Responsibility Segregation), Polyglot Persistence, DevOps, Continuous Integration, Continuous Deployment, Scalability, Fault Tolerance, Consistency, Micro Frontends, Spring Cloud, Service Mesh, Microservices Monitoring, Microservices Security.\n\n## Angular\n\nAngular, TypeScript, Single Page Application (SPA), Angular CLI, Angular Modules, Angular Components, Angular Directives, Angular Services, Dependency Injection, Angular Templates, Angular Data Binding, Two-way Binding, ngModel, Reactive Forms, Template-driven Forms, Angular Pipes, Angular Routing, Lazy Loading, Angular Lifecycle Hooks, Angular Interceptors, Angular HTTP Client, Angular Animations, Angular Material, RxJS (Reactive Extensions for JavaScript), Angular Testing, Unit Testing, Integration Testing, End-to-End Testing, Jasmine, Protractor, Angular CLI, Angular Router, Angular Dependency Injection, Angular Change Detection, Angular ngIf, ngFor, ngSwitch, Angular Decorators.\n\n## SQL\n\nSQL, Relational Database, Database Management System (DBMS), Structured Query Language, Tables, Columns, Rows, SQL Query, SELECT statement, FROM clause, WHERE clause, ORDER BY clause, GROUP BY clause, JOIN, INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN, Primary Key, Foreign Key, Index, Database Schema, Data Definition Language (DDL), Data Manipulation Language (DML), CREATE TABLE, ALTER TABLE, DROP TABLE, INSERT INTO, UPDATE, DELETE, Constraints, UNIQUE constraint, NOT NULL constraint, DEFAULT constraint, SQL Functions, Aggregate Functions, COUNT, SUM, AVG, MIN, MAX, Joins, Subqueries, Transactions, ACID properties.\n\n## angularjs\n\nAngularJS, JavaScript framework, MVC (Model-View-Controller), Data Binding, Two-way Binding, Directives, ng-app, ng-model, ng-bind, Controllers, $scope, Services, Dependency Injection, Templates, Views, Routing, $routeProvider, Directives, Custom Directives, $http service, AJAX, Promises, Filters, ng-repeat, ng-show, ng-hide, ng-if, ng-switch, Form Validation, $watch, $digest cycle, Dependency Injection, Modules, AngularJS expressions, ng-controller, ng-view, ng-app, ng-init, ng-click, ng-disabled, $rootScope, $location service.\n\n## javascript\n\nJavaScript, ECMAScript, Web Development, Front-end, Client-side scripting, HTML, CSS, Document Object Model (DOM), Browser, Event Handling, Functions, Variables, Data Types, Objects, Arrays, Strings, Numbers, Boolean, Operators, Control Flow, Conditional Statements, Loops, Functions, Scope, Closures, Callbacks, Promises, Asynchronous Programming, AJAX (Asynchronous JavaScript and XML), JSON (JavaScript Object Notation), ES6 (ECMAScript 2015), Arrow Functions, Template Literals, Destructuring Assignment, Classes, Modules, Promises, Fetch API, Rest and Spread Operators, Web APIs, Local Storage, Session Storage, Cookies, JavaScript Frameworks (e.g., React, Angular, Vue), Node.js, NPM (Node Package Manager), Package.json.\n\n## Node.js\n\nNode.js, JavaScript runtime, Server-side, Event-driven, Asynchronous, Non-blocking I/O, V8 engine, NPM (Node Package Manager), CommonJS, Modules, Express.js, RESTful API, Middleware, Routing, Template Engines (e.g., EJS, Pug), WebSocket, JSON, Callbacks, Promises, Async/Await, Streams, Buffers, File System, HTTP Module, Package.json, Nodemon, Node.js Frameworks (e.g., Express, Koa, Hapi), Node.js Libraries, MongoDB, Mongoose, MySQL, PostgreSQL, Passport.js, Authentication, Authorization, Socket.io, Serverless, AWS Lambda with Node.js, Real-time applications, Microservices with Node.js.\n\n## mongodb\n\nMongoDB, NoSQL database, Document-oriented, BSON (Binary JSON), Collections, Documents, Fields, JSON-like data, Document Store, CRUD Operations (Create, Read, Update, Delete), Indexing, Query Language, Aggregation Framework, Atlas (MongoDB Cloud Service), Compass (MongoDB GUI), Mongoose (MongoDB Object Modeling for Node.js), Sharding, Replication, GridFS, WiredTiger Storage Engine, Geospatial Indexing, MongoDB Drivers (e.g., Node.js driver), Capped Collections, ACID properties, NoSQL Data Model, JSON Schema, Data Consistency, Database Scalability, MongoDB Compass, MongoDB Realm, MongoDB Stitch, Document Validation, Full-text Search.\n\n## spring security\n\nSpring Security, Authentication, Authorization, Security Configuration, UserDetails, UserDetailsService, AuthenticationProvider, GrantedAuthority, SecurityContextHolder, AuthenticationManager, Principal, GrantedAuthority, PasswordEncoder, CSRF (Cross-Site Request Forgery) protection, Session Management, Remember-Me authentication, LDAP (Lightweight Directory Access Protocol) integration, OAuth (Open Authorization), SAML (Security Assertion Markup Language), JWT (JSON Web Token), Role-Based Access Control (RBAC), Method Security, @Secured annotation, @PreAuthorize annotation, @PostAuthorize annotation, Web Security, URL-based security, Spring Security Filters, Custom Authentication Success/Failure Handlers, Security Annotations, CSRF Token, Spring Security OAuth, Spring Security Core Module.\n\n# Terminologies and buzz words\n\n### Terminologies keywords related to Kafka \n\nSure, here are some key terminologies and keywords related to Kafka:\n\n1. Broker: A Kafka server responsible for handling and storing the messages.\n2. Topic: A category or feed name to which messages are published by producers.\n3. Producer: An application that sends messages to Kafka topics.\n4. Consumer: An application that reads messages from Kafka topics.\n5. Partition: A portion of a Kafka topic's data spread across multiple brokers for scalability and parallelism.\n6. Offset: A unique identifier for each message within a partition.\n7. ZooKeeper: A centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.\n8. Replication: The process of duplicating data across multiple brokers for fault tolerance.\n9. Consumer Group: A group of consumers that jointly consume a topic. Each message is delivered to one consumer within the group.\n10. Offset Management: Mechanism for tracking the last consumed message by each consumer.\n11. Retention Policy: Configurable setting determining how long Kafka retains messages in a topic.\n12. Kafka Connect: A framework for importing/exporting data to/from Kafka.\n13. Streams: Kafka Streams is a library for building real-time, scalable, fault-tolerant, distributed applications.\n14. ACL (Access Control Lists): Mechanism for controlling access to Kafka resources.\n15. Log Compaction: A retention policy that retains only the latest value for each key within a Kafka topic.\n\n\n### Apache Ant terminologies and buzz words\n\nApache Ant is a build automation tool primarily used for Java projects. Here are some key terminologies and buzzwords associated with Apache Ant:\n\n1. **Build Script:** A build script is an XML file that defines the tasks and targets required to build, test, and deploy a project using Ant. It typically has a filename like `build.xml` and is structured using XML tags.\n\n2. **Task:** A task is a unit of work defined in the build script. Ant provides a wide range of built-in tasks for compiling code, copying files, running tests, generating documentation, and more. Tasks can also be extended or customized using custom Java classes.\n\n3. **Target:** A target is a collection of tasks that are executed together as a single unit. Targets are defined in the build script and can depend on other targets, allowing for a modular and organized build process.\n\n4. **Dependency:** Dependencies are relationships between targets that specify the order in which targets should be executed. Targets can depend on other targets, ensuring that prerequisite tasks are completed before executing dependent tasks.\n\n5. **Property:** Properties are key-value pairs used to store configuration settings, file paths, version numbers, and other values used in the build process. Properties can be defined in the build script, passed as command-line arguments, or loaded from external files.\n\n6. **Macrodef:** A macrodef is a custom task definition that encapsulates a sequence of tasks into a reusable unit. Macros allow developers to define complex workflows once and reuse them multiple times throughout the build script.\n\n7. **Build Lifecycle:** The build lifecycle refers to the sequence of steps involved in building, testing, and deploying a project. It typically includes tasks such as compiling source code, running tests, generating documentation, packaging artifacts, and deploying to production.\n\n8. **Integration with IDEs:** Ant can be integrated with Integrated Development Environments (IDEs) such as Eclipse, IntelliJ IDEA, and NetBeans to provide visual editing, debugging, and execution of Ant build scripts within the IDE environment.\n\n9. **External Tools Integration:** Ant can be integrated with external tools and libraries such as JUnit for unit testing, Ivy for dependency management, FindBugs for static code analysis, and more. These integrations enhance the capabilities of Ant and facilitate the automation of various development tasks.\n\n10. **Community and Extensions:** Apache Ant has a vibrant community of users and contributors who develop and share extensions, plugins, and best practices for using Ant in different scenarios. These extensions expand the functionality of Ant and address specific requirements in various domains.\n\nBy understanding these terminologies and concepts, developers can effectively leverage Apache Ant to automate the build process and streamline software development workflows.\n\n### Kubernetes terminologies and buzz words\n\nSure, Kubernetes has quite a few terminologies and buzzwords. Here are some of the key ones:\n\n1. **Pod**: The smallest deployable unit in Kubernetes, consisting of one or more containers.\n\n2. **Node**: A physical or virtual machine in the Kubernetes cluster where pods are deployed.\n\n3. **Deployment**: A Kubernetes resource that manages the lifecycle of pods and replica sets.\n\n4. **Service**: An abstraction that defines a logical set of pods and a policy by which to access them.\n\n5. **ReplicaSet**: Ensures that a specified number of pod replicas are running at any given time.\n\n6. **Namespace**: A way to divide cluster resources between multiple users or teams.\n\n7. **Container**: A lightweight, portable, and self-sufficient software package that contains everything needed to run an application.\n\n8. **Cluster**: A set of physical or virtual machines that run containerized applications managed by Kubernetes.\n\n9. **Label**: A key-value pair attached to Kubernetes objects for grouping and selecting related resources.\n\n10. **Ingress**: A Kubernetes resource that manages external access to services within a cluster.\n\n11. **PersistentVolume**: A piece of storage in the cluster that has been provisioned by an administrator.\n\n12. **Secret**: A Kubernetes resource used to store sensitive information, such as passwords, OAuth tokens, and SSH keys.\n\n13. **ConfigMap**: A Kubernetes resource used to store configuration data separately from the pod's specification.\n\n14. **HorizontalPodAutoscaler (HPA)**: Automatically adjusts the number of replicas in a deployment based on CPU utilization or custom metrics.\n\n15. **StatefulSet**: Manages stateful applications and maintains a unique identity for each pod.\n\nThese are just a few, but there are many more depending on the specific use cases and configurations within a Kubernetes environment.\n\n\n### Docker terminologies and buzz words\n\nCertainly! Docker has its own set of terminologies and buzzwords. Here are some of the key ones:\n\n1. **Image**: A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, runtime, libraries, environment variables, and configuration files.\n\n2. **Container**: An instance of a Docker image that runs a software application in an isolated environment.\n\n3. **Dockerfile**: A text file that contains instructions for building a Docker image.\n\n4. **Docker Engine**: The core software component of Docker that runs and manages containers.\n\n5. **Registry**: A storage and distribution system for Docker images. Docker Hub is the default public registry.\n\n6. **Containerization**: The process of encapsulating an application and its dependencies into a container image.\n\n7. **Volume**: A Docker feature that allows data to persist beyond the lifetime of a container.\n\n8. **Docker Compose**: A tool for defining and running multi-container Docker applications using a YAML file.\n\n9. **Docker Swarm**: A native clustering and orchestration tool for Docker containers.\n\n10. **Docker Hub**: A cloud-based repository where Docker users can share and distribute container images.\n\n11. **Docker Network**: A networking feature of Docker that allows containers to communicate with each other and with external networks.\n\n12. **Docker Registry**: A service that stores Docker images for distribution and sharing within a network or organization.\n\n13. **Overlay Network**: A Docker networking feature that enables communication between containers running on different Docker hosts.\n\n14. **Docker Volume Driver**: A plugin system that allows Docker containers to use external storage devices.\n\n15. **Docker Machine**: A tool that provisions Docker hosts on local or remote machines.\n\nThese are some of the fundamental terms and concepts in the Docker ecosystem. There are many more advanced features and tools available, but these should give you a good starting point.\n\n\n\n\n### Docker compose terminologies and buzz words\n\nCertainly! Docker Compose introduces its own set of terminologies and concepts for defining and running multi-container Docker applications. Here are some key terms:\n\n1. **Service**: A containerized application defined in a Docker Compose file. Each service represents a container and its configuration.\n\n2. **Docker Compose file**: A YAML file (usually named `docker-compose.yml`) that defines the structure of multi-container Docker applications, including services, networks, volumes, and other configurations.\n\n3. **Container**: An isolated environment that runs a software application and its dependencies, managed by Docker.\n\n4. **Image**: A read-only template used to create Docker containers. Images are defined in the Docker Compose file and are built from Dockerfiles or pulled from Docker registries.\n\n5. **Volume**: A Docker feature that allows data to persist beyond the lifetime of a container. Volumes can be defined in the Docker Compose file to share data between containers or persist data on the host machine.\n\n6. **Network**: A communication channel that allows containers within the same Docker Compose application to communicate with each other. Networks can be defined in the Docker Compose file to isolate containers or provide connectivity between them.\n\n7. **Environment variables**: Variables that are injected into Docker containers at runtime, allowing dynamic configuration of containerized applications. Environment variables can be defined in the Docker Compose file or passed externally.\n\n8. **Build context**: The directory containing the files needed to build a Docker image. The build context is specified in the Docker Compose file and is used when building custom Docker images.\n\n9. **Port mapping**: The process of mapping ports between containers and the host machine, allowing external access to containerized services. Port mappings can be defined in the Docker Compose file to expose container ports to the host machine.\n\n10. **Dependency**: The relationship between services in a Docker Compose application, where one service depends on another for functionality. Dependencies can be defined in the Docker Compose file to ensure services start in the correct order.\n\nThese are some of the key terms and concepts in Docker Compose. Understanding them will help you define, manage, and run multi-container Docker applications efficiently using Docker Compose.\n\n\n\n### Frontend development terminologies and buzz words\n\nFrontend development has its own set of terminologies and buzzwords. Here are some key ones:\n\n1. **HTML (Hypertext Markup Language)**: The standard markup language for creating web pages and web applications.\n\n2. **CSS (Cascading Style Sheets)**: A style sheet language used for describing the presentation of a document written in HTML.\n\n3. **JavaScript**: A programming language that enables interactive and dynamic content on web pages. \n\n4. **Responsive Design**: Design approach aimed at creating websites that provide optimal viewing and interaction experience across a wide range of devices and screen sizes.\n\n5. **CSS Frameworks**: Pre-designed libraries that provide standardized styling and layout for web pages and web applications.\n\n6. **JavaScript Frameworks/Libraries**: Tools like React, Angular, or Vue.js that provide a structured way to build interactive user interfaces and manage application state.\n\n7. **API (Application Programming Interface)**: A set of rules and protocols that allows different software applications to communicate with each other.\n\n8. **AJAX (Asynchronous JavaScript and XML)**: A technique used to send and receive data from a server asynchronously without interfering with the display and behavior of the existing page.\n\n9. **Single Page Application (SPA)**: A web application that loads a single HTML page and dynamically updates the content as the user interacts with the application.\n\n10. **Frontend Frameworks**: Comprehensive libraries and tools that provide a structure and predefined components for building web applications, such as Bootstrap, Materialize, or Foundation.\n\n11. **UI (User Interface)**: The visual elements and layout of a web page or application that users interact with.\n\n12. **UX (User Experience)**: The overall experience of a user when interacting with a web page or application, including usability, accessibility, and satisfaction.\n\n13. **DOM (Document Object Model)**: A programming interface for web documents that represents the structure of a document as a tree of objects, allowing scripts to dynamically access and modify content.\n\n14. **Component-based Development**: A development approach where UIs are built from reusable and self-contained components, promoting code reusability and maintainability.\n\n15. **Progressive Web Apps (PWA)**: Web applications that use modern web capabilities to provide a native app-like experience, including offline functionality, push notifications, and home screen installation.\n\nThese are just a few of the many terms and concepts in frontend development. Keeping up with these terminologies can help you navigate and stay informed in the dynamic world of web development.\n\n\n\n### Backend development terminologies and buzz words\n\nCertainly! Backend development has its own set of terminologies and buzzwords. Here are some key ones:\n\n1. **Server**: A computer or system that provides resources, data, services, or functionality to other computers, known as clients, over a network.\n\n2. **Database**: A structured set of data stored electronically in a computer system, typically organized in tables, rows, and columns, and used for storing, retrieving, and managing data.\n\n3. **API (Application Programming Interface)**: A set of rules, protocols, and tools that allows different software applications to communicate with each other.\n\n4. **RESTful API (Representational State Transfer)**: An architectural style for designing networked applications, typically using HTTP requests to perform CRUD (Create, Read, Update, Delete) operations on resources.\n\n5. **Microservices**: A software architectural style that structures an application as a collection of loosely coupled services, each responsible for a specific business function and communicating with each other via APIs.\n\n6. **Framework**: A software framework that provides a foundation of reusable code libraries, tools, and APIs for developing software applications.\n\n7. **Server-side scripting**: The process of writing code that runs on the server to generate dynamic web content or perform server-side tasks, often using languages like PHP, Python, Ruby, or Node.js.\n\n8. **Authentication**: The process of verifying the identity of a user or system, typically through the use of usernames, passwords, tokens, or other credentials.\n\n9. **Authorization**: The process of determining what actions a user or system is allowed to perform, typically based on their identity, role, or permissions.\n\n10. **Middleware**: Software components that provide common services and capabilities to applications, often used in the context of web development for tasks like request processing, authentication, logging, and caching.\n\n11. **Scalability**: The ability of a system to handle increasing amounts of work or traffic by adding resources, such as CPU, memory, or storage, without significantly affecting performance.\n\n12. **Caching**: The process of storing frequently accessed data in memory or on disk to reduce the need to recompute or retrieve it from the original source, improving performance and scalability.\n\n13. **Session Management**: The process of maintaining stateful information about a user's interaction with a web application across multiple requests, typically using cookies, session tokens, or other mechanisms.\n\n14. **ORM (Object-Relational Mapping)**: A programming technique that allows developers to interact with a relational database using an object-oriented paradigm, mapping database tables to classes and rows to objects.\n\n15. **CI/CD (Continuous Integration/Continuous Deployment)**: A set of practices and tools used to automate the process of integrating code changes into a shared repository, testing them, and deploying them to production environments.\n\nThese are just a few of the many terms and concepts in backend development. Keeping up with these terminologies can help you navigate and stay informed in the dynamic world of software development.\n\n\n\n### Microservices terminologies and buzz words\n\nMicroservices architecture comes with its own set of terminologies and buzzwords. Here are some key ones:\n\n1. **Microservices**: A software architectural style that structures an application as a collection of loosely coupled services, each responsible for a specific business function and communicating with each other via APIs.\n\n2. **Service**: An individual component or module of functionality within a microservices architecture, typically encapsulating a specific business capability.\n\n3. **API (Application Programming Interface)**: A set of rules, protocols, and tools that allows different software components or services to communicate with each other.\n\n4. **Containerization**: The process of packaging software applications along with their dependencies into lightweight, portable containers, such as Docker containers, for easy deployment and scalability.\n\n5. **Orchestration**: The automated management and coordination of microservices, containers, and other resources within a distributed system, typically performed by orchestration tools like Kubernetes, Docker Swarm, or Apache Mesos.\n\n6. **Service Discovery**: The process of dynamically locating and connecting to available services within a microservices architecture, often facilitated by service registry and discovery tools like Consul, Etcd, or ZooKeeper.\n\n7. **Event-driven Architecture**: A software architectural pattern where components or services communicate with each other by producing and consuming events, enabling loose coupling and asynchronous communication.\n\n8. **Saga Pattern**: A design pattern for managing distributed transactions across multiple microservices, ensuring consistency and data integrity despite the distributed nature of the system.\n\n9. **Circuit Breaker**: A design pattern used to prevent cascading failures in a microservices architecture by detecting and isolating failures in dependent services.\n\n10. **Fault Tolerance**: The ability of a system to continue operating and providing functionality in the presence of failures or errors, often achieved through redundancy, error handling, and graceful degradation mechanisms.\n\n11. **Service Mesh**: A dedicated infrastructure layer for handling communication between microservices, providing features like service discovery, load balancing, security, and observability.\n\n12. **Container Orchestration**: The automated management and deployment of containers within a distributed environment, often performed by container orchestration platforms like Kubernetes, Docker Swarm, or Amazon ECS.\n\n13. **DevOps**: A set of practices and cultural philosophies that aims to unify software development (Dev) and IT operations (Ops) to enable continuous delivery, collaboration, and automation throughout the software development lifecycle.\n\n14. **Observability**: The ability to measure, monitor, and understand the internal state and behavior of a system, including metrics, logs, and traces, often facilitated by observability tools like Prometheus, Grafana, or Jaeger.\n\n15. **Serverless Computing**: A cloud computing model where cloud providers dynamically manage the allocation and scaling of resources, allowing developers to focus on writing code without worrying about infrastructure management.\n\nThese are just a few of the many terms and concepts in microservices architecture. Keeping up with these terminologies can help you navigate and stay informed in the dynamic world of distributed systems and software development.\n\n\n### Mongodb terminologies and buzz words\n\nCertainly! MongoDB, being a popular NoSQL database, has its own set of terminologies and buzzwords. Here are some key ones:\n\n1. **Document**: In MongoDB, data is stored in flexible, JSON-like documents. Each document can have a different structure, which allows for greater flexibility compared to traditional relational databases.\n\n2. **Collection**: A grouping of MongoDB documents. Collections are analogous to tables in relational databases but do not enforce a schema. Documents within a collection can have different fields.\n\n3. **Database**: A physical container for collections. Each MongoDB instance can have multiple databases, each containing its own set of collections.\n\n4. **Document-oriented database**: MongoDB is a document-oriented database, meaning it stores data in documents rather than rows and columns. This allows for more natural representation of data structures.\n\n5. **Index**: An index in MongoDB is similar to indexes in relational databases. It improves the speed of data retrieval operations by allowing queries to quickly locate documents based on indexed fields.\n\n6. **Query**: In MongoDB, queries are used to retrieve data from collections based on specified criteria. MongoDB supports a rich query language that includes filtering, projection, sorting, and aggregation.\n\n7. **Aggregation**: Aggregation operations in MongoDB allow for data processing and transformation, such as grouping, sorting, and performing calculations on data within collections.\n\n8. **Sharding**: Sharding is a method of horizontal partitioning in MongoDB, where data is distributed across multiple machines to improve scalability and performance.\n\n9. **Replica Set**: A group of MongoDB servers that maintain the same data set, providing redundancy and high availability. Replica sets are used for automatic failover and data redundancy.\n\n10. **GridFS**: GridFS is a specification for storing and retrieving large files in MongoDB. It breaks files into smaller chunks, which are then stored as separate documents, allowing for efficient storage and retrieval of large files.\n\n11. **Read Concern**: Read concern in MongoDB specifies the level of consistency guarantee for read operations. It allows users to control the visibility of data changes across distributed environments.\n\n12. **Write Concern**: Write concern in MongoDB specifies the level of acknowledgment required from MongoDB servers for write operations. It determines the durability of data changes and ensures data consistency.\n\n13. **Geospatial Indexes**: MongoDB supports geospatial indexes, allowing for efficient querying of location-based data. This is useful for applications that require location-aware features, such as geolocation services or mapping applications.\n\n14. **Change Streams**: Change streams in MongoDB provide a way to watch for changes in collections in real-time. They allow applications to react to data changes as they occur, enabling reactive and event-driven architectures.\n\n15. **Atlas**: MongoDB Atlas is a fully managed cloud database service provided by MongoDB, Inc. It allows users to deploy, operate, and scale MongoDB clusters with ease, without the need for manual intervention.\n\nThese are some of the key terminologies and concepts in MongoDB. Understanding them can help you work effectively with MongoDB databases and develop scalable and efficient applications.\n\n\n### MySQL terminologies and buzz words\n\nCertainly! MySQL, being one of the most popular relational database management systems, has its own set of terminologies and buzzwords. Here are some key ones:\n\n1. **Database**: A structured set of data organized and stored electronically in a computer system. MySQL databases consist of one or more tables and are used to store and manage data.\n\n2. **Table**: A collection of related data organized into rows and columns. Tables are the fundamental storage unit in MySQL databases.\n\n3. **Row**: A single record or entry in a MySQL table, containing a set of values corresponding to the columns defined in the table.\n\n4. **Column**: A vertical arrangement of data elements in a MySQL table, representing a particular attribute or field of the data.\n\n5. **Primary Key**: A unique identifier for each row in a MySQL table, used to ensure data integrity and facilitate efficient data retrieval.\n\n6. **Foreign Key**: A field in a MySQL table that establishes a relationship with another table's primary key, enforcing referential integrity between related tables.\n\n7. **Index**: A data structure that improves the speed of data retrieval operations in MySQL by allowing queries to quickly locate rows based on indexed columns.\n\n8. **Query**: A request for data or information from a MySQL database. Queries are written in SQL (Structured Query Language) and can perform various operations such as selecting, inserting, updating, or deleting data.\n\n9. **Stored Procedure**: A precompiled collection of SQL statements stored in the MySQL database and executed as a single unit. Stored procedures can accept input parameters and return results to the caller.\n\n10. **Trigger**: A database object in MySQL that automatically executes a set of SQL statements in response to certain events, such as insertions, updates, or deletions on a table.\n\n11. **Normalization**: The process of organizing data in MySQL databases to reduce redundancy and improve data integrity by eliminating data anomalies.\n\n12. **Denormalization**: The opposite of normalization, denormalization in MySQL involves intentionally introducing redundancy into the database schema to improve query performance by reducing the need for joins and increasing data availability.\n\n13. **Transaction**: A sequence of one or more SQL statements executed as a single unit of work in MySQL. Transactions ensure data consistency by either committing all changes or rolling back to the original state in case of failure.\n\n14. **ACID Properties**: A set of properties that guarantee reliable and consistent database transactions. ACID stands for Atomicity, Consistency, Isolation, and Durability.\n\n15. **InnoDB**: The default storage engine for MySQL, known for its support for transactions, referential integrity, and crash recovery features.\n\nThese are some of the key terminologies and concepts in MySQL. Understanding them can help you work effectively with MySQL databases and develop robust and efficient applications.\n\n\n### ETL terminologies and buzz words\n\nETL (Extract, Transform, Load) is a process used in data warehousing and analytics to extract data from various sources, transform it into a consistent format, and load it into a target database or data warehouse. Here are some key terminologies and buzzwords associated with ETL:\n\n1. **Extract**: The process of retrieving data from one or more source systems, which can include databases, files, APIs, or other data repositories.\n\n2. **Transform**: The process of cleaning, structuring, and manipulating the extracted data to make it suitable for analysis or storage in the target system. Transformation tasks may include data cleansing, data validation, aggregation, normalization, or enrichment.\n\n3. **Load**: The process of inserting the transformed data into the target database or data warehouse. Loading may involve inserting new records, updating existing records, or appending data to existing tables.\n\n4. **Data Warehouse**: A centralized repository that stores structured, historical data from one or more sources, typically used for reporting, analysis, and decision-making purposes.\n\n5. **Data Mart**: A subset of a data warehouse that is optimized for a specific business function, department, or group of users. Data marts often contain summarized or aggregated data tailored to the needs of specific users or applications.\n\n6. **ETL Pipeline**: A series of interconnected processes and tasks that automate the extraction, transformation, and loading of data from source systems to target databases or data warehouses.\n\n7. **Batch Processing**: A method of processing data in which data is collected, processed, and loaded in discrete batches or chunks at scheduled intervals, often overnight or during off-peak hours.\n\n8. **Real-time ETL**: A variant of ETL in which data is extracted, transformed, and loaded into the target system in near real-time or with minimal latency, enabling organizations to make timely decisions based on up-to-date data.\n\n9. **Data Integration**: The process of combining data from different sources into a unified view, often involving ETL processes to transform and load data into a centralized repository.\n\n10. **Data Cleansing**: The process of detecting and correcting errors, inconsistencies, and duplicates in the data during the transformation phase of ETL, ensuring data quality and integrity.\n\n11. **Data Mapping**: The process of defining the relationships and transformations between data elements in the source and target systems, specifying how data should be mapped, transformed, and loaded.\n\n12. **Data Profiling**: The process of analyzing and understanding the structure, quality, and characteristics of the data in the source systems, often used to identify data quality issues and inform data transformation rules.\n\n13. **ETL Tool**: Software tools and platforms specifically designed to automate and streamline the ETL process, providing features such as data extraction, transformation, loading, scheduling, monitoring, and error handling.\n\n14. **Change Data Capture (CDC)**: A technique used to identify and capture changes made to source data since the last ETL run, enabling incremental updates and real-time replication of data to the target system.\n\n15. **Data Quality**: The measure of the accuracy, completeness, consistency, timeliness, and reliability of the data, ensuring that data meets the requirements of the intended use case or business process.\n\nThese are some of the key terminologies and concepts in ETL. Understanding them can help you design, implement, and maintain efficient data integration processes in your organization.\n\n### AWS S3 terminologies and buzz words\n\nCertainly! Amazon Simple Storage Service (S3) is a widely used object storage service provided by Amazon Web Services (AWS). Here are some key terminologies and buzzwords associated with AWS S3:\n\n1. **Bucket**: A container for storing objects in S3. All objects are stored within a bucket, and each bucket has a unique name across all of AWS.\n\n2. **Object**: The fundamental entity stored in S3, which consists of data (such as a file) and metadata (information about the object). Objects can range in size from 0 bytes to 5 terabytes.\n\n3. **Key**: The unique identifier for an object within a bucket. It is similar to a file name and includes the full path of the object within the bucket.\n\n4. **Region**: A geographical area where S3 stores data. Each bucket is associated with a specific AWS region, and data is replicated across multiple Availability Zones within the region for durability and availability.\n\n5. **Storage Classes**: Different storage tiers offered by S3, each optimized for specific use cases based on performance, durability, availability, and cost. Common storage classes include S3 Standard, S3 Standard-IA (Infrequent Access), S3 One Zone-IA, S3 Glacier, and S3 Glacier Deep Archive.\n\n6. **Lifecycle Policies**: Rules defined at the bucket or object level to automatically transition objects between different storage classes or delete them after a specified period. Lifecycle policies help optimize storage costs by moving data to lower-cost tiers as it ages.\n\n7. **Versioning**: A feature of S3 that allows multiple versions of an object to be stored in the same bucket. Versioning helps protect against accidental deletion or overwrite of objects and enables data recovery in case of unintended changes.\n\n8. **Cross-Region Replication (CRR)**: A feature of S3 that automatically replicates objects from one bucket to another in a different AWS region. CRR helps improve data durability and availability by maintaining copies of objects in multiple geographic locations.\n\n9. **Transfer Acceleration**: A feature of S3 that uses Amazon CloudFront's globally distributed edge locations to accelerate data transfers to and from S3. Transfer Acceleration can significantly reduce latency and improve upload speeds, especially for users located far from the AWS region hosting the bucket.\n\n10. **Event Notifications**: A feature of S3 that allows you to configure event notifications for specific bucket events, such as object creation, deletion, or replication. Event notifications can trigger AWS Lambda functions, Amazon SNS notifications, or Amazon SQS messages, enabling automated workflows and integrations with other AWS services.\n\n11. **Access Control Lists (ACLs)**: A mechanism for managing access to objects and buckets in S3. ACLs define who can perform specific actions (such as read, write, or delete) on objects or buckets and can be configured at the bucket or object level.\n\n12. **Bucket Policies**: JSON-based access policies that define permissions for a bucket and its objects. Bucket policies can grant or deny access based on various criteria, such as IP address, IAM user, or AWS account, and are applied to all objects within the bucket.\n\n13. **Static Website Hosting**: A feature of S3 that allows you to host static websites directly from an S3 bucket. You can configure S3 to serve static content (HTML, CSS, JavaScript, etc.) over HTTP or HTTPS, with support for custom domain names and error pages.\n\n14. **Server-Side Encryption**: A feature of S3 that automatically encrypts objects at rest using AES-256 encryption. You can choose between different encryption options, including SSE-S3 (encryption by AWS) or SSE-KMS (encryption with AWS Key Management Service).\n\n15. **Data Transfer Costs**: The costs associated with transferring data into and out of S3, including data transfer within the same AWS region, data transfer between AWS regions, and data transfer over the internet.\n\nThese are some of the key terminologies and concepts in AWS S3. Understanding them can help you effectively use S3 for storing, managing, and serving your data in the AWS cloud.\n\n### AWS glue terminologies and buzz words\n\nAWS Glue is a fully managed extract, transform, and load (ETL) service provided by Amazon Web Services (AWS). Here are some key terminologies and buzzwords associated with AWS Glue:\n\n1. **ETL**: Extract, Transform, Load - The process of extracting data from various sources, transforming it into a consistent format, and loading it into a target data store for analysis or reporting.\n\n2. **Data Catalog**: A central metadata repository in AWS Glue that stores information about datasets, tables, schemas, partitions, and transformations. The data catalog provides a unified view of data across different sources and formats.\n\n3. **Crawler**: An AWS Glue component that automatically scans and discovers data in various data stores, such as Amazon S3, RDS, Redshift, and DynamoDB. Crawlers infer schema, partitioning, and data statistics to populate the AWS Glue Data Catalog.\n\n4. **Job**: An AWS Glue component that defines an ETL workflow, including the source data, transformation logic, and target data destination. Jobs can be authored using Python or Apache Spark code and run on a scheduled or ad-hoc basis.\n\n5. **Trigger**: A mechanism in AWS Glue that enables you to automatically start an ETL job based on a predefined event or schedule. Triggers can be configured to start jobs in response to data arriving in S3, CloudWatch events, or on a recurring schedule.\n\n6. **Development Endpoint**: A provisioned environment in AWS Glue that allows developers to interactively author, debug, and test ETL scripts using the AWS Glue console or external development tools. Development endpoints provide an isolated environment for experimenting with data and code.\n\n7. **Data Lake**: A centralized repository that stores structured and unstructured data at scale, typically in a raw or unprocessed form. AWS Glue can be used to transform and catalog data stored in a data lake, enabling analytics and data exploration.\n\n8. **Schema**: A formal definition of the structure of a dataset or table, including the names, types, and relationships of its fields or columns. AWS Glue uses schemas to infer the structure of data during discovery and transformation processes.\n\n9. **Partition**: A way to logically divide data into smaller, manageable subsets based on a partitioning key, such as date, region, or category. Partitions are commonly used to improve query performance and reduce data scanning in large datasets.\n\n10. **Data Lake House**: An architectural approach that combines the flexibility and scalability of a data lake with the performance and reliability of a data warehouse. AWS Glue can be used to build and maintain data lake house solutions by transforming and preparing data for analytics and reporting.\n\n11. **Apache Spark**: A fast and general-purpose distributed computing system for big data processing, often used for large-scale data processing, machine learning, and ETL workflows. AWS Glue supports Apache Spark as a runtime environment for running ETL jobs.\n\n12. **AWS Lambda**: A serverless compute service provided by AWS that allows you to run code in response to events without provisioning or managing servers. AWS Glue can invoke AWS Lambda functions to perform custom data processing tasks as part of ETL workflows.\n\n13. **Glue DataBrew**: An AWS service that provides visual data preparation tools for cleaning, transforming, and normalizing data without writing code. Glue DataBrew can be integrated with AWS Glue to simplify and accelerate data preparation tasks.\n\n14. **Data Lineage**: The ability to track and visualize the movement and transformation of data across different systems and processes. AWS Glue provides data lineage capabilities to trace data from its source to its destination, helping to ensure data quality and compliance.\n\n15. **Data Quality**: The measure of the accuracy, completeness, consistency, timeliness, and reliability of data. AWS Glue provides data quality assessment capabilities to identify and remediate data quality issues during ETL processes.\n\nThese are some of the key terminologies and concepts in AWS Glue. Understanding them can help you effectively use AWS Glue to build, automate, and manage ETL workflows in the AWS cloud.\n\n\n### AWS glue DataBrew terminologies and buzz words\n\nAWS Glue DataBrew is a visual data preparation tool that simplifies the process of cleaning and transforming data for analytics and machine learning. Here are some key terminologies and buzzwords associated with AWS Glue DataBrew:\n\n1. **Dataset**: A collection of data that is ingested and processed by AWS Glue DataBrew. Datasets can be sourced from various locations, such as Amazon S3, Amazon Redshift, or relational databases.\n\n2. **Project**: A workspace within AWS Glue DataBrew where users can create and manage data preparation tasks for a specific dataset. Projects provide a centralized location for organizing and collaborating on data preparation activities.\n\n3. **Recipe**: A set of data transformation steps defined in AWS Glue DataBrew to clean, enrich, and normalize data. Recipes are created using a visual interface and can include operations such as filtering, joining, pivoting, and formatting.\n\n4. **Profile**: A summary of statistical information and data quality metrics generated by AWS Glue DataBrew for a dataset or recipe. Profiles provide insights into the structure, distribution, and quality of the data, helping users identify issues and make informed decisions.\n\n5. **Data Quality Rule**: A predefined or custom rule applied to data in AWS Glue DataBrew to detect and flag anomalies, errors, or inconsistencies. Data quality rules help ensure the accuracy and integrity of data during the preparation process.\n\n6. **Sample Data**: A subset of data from a dataset used for exploratory analysis and testing in AWS Glue DataBrew. Sample data allows users to preview and interact with a portion of the dataset before applying transformations.\n\n7. **Data Transformation**: The process of converting raw data into a structured and usable format for analysis or machine learning. AWS Glue DataBrew provides a variety of built-in transformations and functions for cleaning, enriching, and aggregating data.\n\n8. **Data Profiling**: The process of analyzing and summarizing the characteristics and quality of data in AWS Glue DataBrew. Data profiling helps users understand the distribution, patterns, and anomalies present in the data, facilitating data preparation and decision-making.\n\n9. **Data Cleansing**: The process of identifying and correcting errors, duplicates, and inconsistencies in data to improve its quality and reliability. AWS Glue DataBrew offers tools and functions for cleansing and standardizing data, such as removing duplicates, correcting typos, and parsing dates.\n\n10. **Data Enrichment**: The process of enhancing raw data with additional information or context to make it more valuable for analysis or machine learning. AWS Glue DataBrew supports data enrichment through operations such as joining datasets, applying lookups, and deriving new attributes.\n\n11. **Data Visualization**: The presentation of data in visual formats, such as charts, graphs, and tables, to facilitate understanding and analysis. While AWS Glue DataBrew focuses primarily on data preparation, it integrates with other AWS services, such as Amazon QuickSight, for data visualization and exploration.\n\n12. **Data Catalog Integration**: The seamless integration of AWS Glue DataBrew with the AWS Glue Data Catalog, allowing users to access and prepare data stored in various data sources, including Amazon S3, Amazon Redshift, and relational databases.\n\n13. **Data Lineage**: The tracking and visualization of the lineage or lineage of data in AWS Glue DataBrew, showing how data is ingested, prepared, and consumed across different stages of the data pipeline. Data lineage helps users understand the origin and impact of changes to data.\n\n14. **Collaboration**: The ability for multiple users to work together on data preparation tasks within AWS Glue DataBrew. Collaboration features include sharing projects, recipes, and datasets, as well as providing comments and feedback on data transformations.\n\n15. **Scheduled Jobs**: The automated execution of data preparation tasks on a recurring basis in AWS Glue DataBrew. Scheduled jobs allow users to define a schedule for running recipes and updating datasets, ensuring data remains up-to-date and ready for analysis.\n\nThese are some of the key terminologies and concepts in AWS Glue DataBrew. Understanding them can help you effectively use the tool to prepare, clean, and transform data for analytics and machine learning workflows.\n\n\n### Microservices design patterns terminologies and buzz words\n\nCertainly! Microservices architecture comes with various design patterns and best practices to address common challenges and requirements. Here are some key terminologies and buzzwords associated with microservices design patterns:\n\n1. **Service Decomposition**: The process of breaking down a monolithic application into smaller, independent services, each responsible for a specific business capability or domain.\n\n2. **Service Autonomy**: The principle that each microservice should be self-contained and independently deployable, with its own data store and business logic.\n\n3. **Service Discovery**: The mechanism by which microservices locate and communicate with each other in a distributed environment. Service discovery can be achieved through service registries, DNS-based solutions, or third-party tools.\n\n4. **API Gateway**: A service that sits at the entry point of a microservices architecture and acts as a single entry point for client applications to access multiple microservices. API gateways handle routing, authentication, authorization, and protocol translation.\n\n5. **Event Sourcing**: A pattern where microservices communicate and collaborate by producing and consuming events. Events represent state changes or domain events that are recorded and used for updating data in other microservices asynchronously.\n\n6. **CQRS (Command Query Responsibility Segregation)**: A pattern that separates the responsibility for handling commands (write operations) from queries (read operations) in a microservices architecture. CQRS helps improve scalability, performance, and maintainability by optimizing read and write operations independently.\n\n7. **Saga Pattern**: A design pattern for managing distributed transactions across multiple microservices. Sagas coordinate a series of local transactions within each microservice and use compensating transactions to ensure eventual consistency across the entire system.\n\n8. **Service Mesh**: A dedicated infrastructure layer for handling communication between microservices, providing features such as service discovery, load balancing, encryption, and observability. Service meshes use sidecar proxies to intercept and manage traffic between microservices.\n\n9. **Bulkhead Pattern**: A pattern that isolates and limits the impact of failures in one microservice from affecting other microservices. Bulkheads enforce resource constraints, such as thread pools or connection pools, to prevent cascading failures and improve system resilience.\n\n10. **Retry Pattern**: A pattern that automatically retries failed requests or operations in microservices to improve fault tolerance and resilience. Retries can be implemented with exponential backoff, circuit breakers, or retry queues to handle transient failures.\n\n11. **Circuit Breaker Pattern**: A pattern that detects and prevents repeated failures in microservices by temporarily interrupting requests to a failing service. Circuit breakers monitor service health and open when failure thresholds are exceeded, reducing the impact of failures on downstream services.\n\n12. **Backpressure Pattern**: A pattern that controls the rate of data flow or requests in microservices to prevent overload and resource exhaustion. Backpressure mechanisms, such as queueing, throttling, or load shedding, help manage system capacity and prioritize critical workloads.\n\n13. **Service Orchestration vs. Choreography**: Two approaches to coordinating interactions between microservices. Service orchestration involves a central coordinator that controls and sequences interactions between services, while choreography relies on decentralized communication and collaboration between services.\n\n14. **Immutable Infrastructure**: A principle that advocates for treating infrastructure as code and deploying immutable, disposable components, such as containers or virtual machines, to ensure consistency, reproducibility, and scalability in microservices environments.\n\n15. **Observability**: The ability to monitor, measure, and understand the internal state and behavior of microservices in real-time. Observability tools provide metrics, logs, and traces to diagnose issues, optimize performance, and improve reliability in microservices architectures.\n\nThese are just a few of the many design patterns and concepts used in microservices architecture. Understanding these patterns can help architects and developers design scalable, resilient, and maintainable microservices-based systems.\n\nOf course! Here are some additional terminologies and buzzwords related to microservices architecture:\n\n16. **Domain-Driven Design (DDD)**: An approach to software development that emphasizes modeling the domain of a problem space and designing software systems around it. DDD aligns well with microservices architecture by encouraging the creation of services that reflect specific business domains.\n\n17. **Event-Driven Architecture (EDA)**: An architectural style in which components communicate with each other by producing and consuming events. Event-driven architecture is often used in microservices to enable loose coupling, scalability, and asynchronous communication between services.\n\n18. **Service-Level Objective (SLO)**: A quantitative measure of the desired reliability or performance of a microservice, expressed as a target value for a specific metric (e.g., availability, latency). SLOs help define service expectations and guide resource allocation and optimization efforts.\n\n19. **Service-Level Agreement (SLA)**: A contractual agreement between service providers and consumers that defines the expected level of service, including guarantees for availability, performance, and support. SLAs establish accountability and provide recourse in case of service failures.\n\n20. **Blue-Green Deployment**: A deployment strategy in which two identical environments, referred to as blue and green, are maintained concurrently. Updates or changes are first deployed to the inactive environment (e.g., green), which is then swapped with the active environment (e.g., blue) once the update is validated. Blue-green deployments minimize downtime and risk by enabling seamless rollbacks in case of issues.\n\n21. **Canary Deployment**: A deployment strategy that gradually rolls out changes to a small subset of users or traffic before making them available to the entire user base. Canary deployments allow for early validation of changes and mitigate the impact of potential issues by limiting exposure.\n\n22. **API Versioning**: The practice of managing changes to APIs by assigning version numbers to each release or iteration. API versioning ensures backward compatibility and allows clients to choose which version of the API to use, minimizing disruption and enabling controlled evolution of the API over time.\n\n23. **Serverless Architecture**: An architectural style in which applications are built and run without managing server infrastructure. Serverless architectures leverage cloud services, such as AWS Lambda, to execute code on-demand, scale automatically, and pay only for the resources consumed.\n\n24. **Micro Frontends**: An architectural pattern for decomposing user interfaces into small, independently deployable frontend components, each owned by a separate team. Micro frontends enable teams to develop, deploy, and evolve frontend features autonomously, similar to microservices for backend functionality.\n\n25. **DevOps**: A cultural and organizational approach that emphasizes collaboration, automation, and continuous integration and delivery (CI/CD) between development and operations teams. DevOps practices aim to streamline software delivery, improve agility, and increase the quality and reliability of software systems.\n\n26. **Immutable Infrastructure**: A concept in which infrastructure components, such as servers or containers, are treated as immutable artifacts that are never modified after deployment. Immutable infrastructure ensures consistency, reproducibility, and reliability by avoiding configuration drift and minimizing manual intervention.\n\n27. **Chaos Engineering**: A discipline that involves intentionally introducing failures or disturbances into a system to proactively identify weaknesses, vulnerabilities, and failure modes. Chaos engineering helps validate system resilience, improve fault tolerance, and build confidence in distributed systems, including microservices architectures.\n\n28. **Distributed Tracing**: A technique for monitoring and troubleshooting distributed systems by tracking the flow of requests and interactions across multiple services and components. Distributed tracing tools, such as Jaeger or Zipkin, provide visibility into service dependencies, latency, and performance bottlenecks in microservices architectures.\n\n29. **API Gateway**: A central entry point for managing and securing APIs in microservices architectures. API gateways handle authentication, authorization, rate limiting, and request routing, providing a unified interface for client applications to access backend services.\n\n30. **Infrastructure as Code (IaC)**: The practice of defining and provisioning infrastructure resources using code and automation tools. IaC enables reproducible, version-controlled infrastructure deployments and facilitates the management of complex infrastructure configurations in microservices environments.\n\nThese additional terminologies and buzzwords further enrich the understanding of key concepts and practices in microservices architecture and related disciplines.\n\n\n### Core Java design patterns terminologies and buzz words\n\nCertainly! Core Java design patterns are recurring solutions to common problems encountered in software design using the Java programming language. Here are some key terminologies and buzzwords associated with Core Java design patterns:\n\n1. **Design Pattern**: A general reusable solution to a recurring problem in software design. Design patterns provide a common language and set of best practices for expressing and implementing software architecture and solutions.\n\n2. **Creational Patterns**: Design patterns that deal with object creation mechanisms, providing flexible ways to create objects while decoupling the construction logic from the object creation process.\n   - **Singleton Pattern**: Ensures that a class has only one instance and provides a global point of access to that instance.\n   - **Factory Method Pattern**: Defines an interface for creating objects but allows subclasses to alter the type of objects that will be created.\n   - **Abstract Factory Pattern**: Provides an interface for creating families of related or dependent objects without specifying their concrete classes.\n\n3. **Structural Patterns**: Design patterns that focus on organizing classes and objects in a structure that simplifies the system architecture and promotes code reusability.\n   - **Adapter Pattern**: Allows incompatible interfaces to work together by wrapping an existing class with a new interface.\n   - **Decorator Pattern**: Adds new functionality to an object dynamically by wrapping it with one or more decorator objects.\n   - **Composite Pattern**: Represents objects hierarchically as part-whole relationships, allowing clients to treat individual objects and compositions of objects uniformly.\n\n4. **Behavioral Patterns**: Design patterns that govern the interaction and communication between objects, focusing on how objects collaborate to accomplish tasks.\n   - **Observer Pattern**: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.\n   - **Strategy Pattern**: Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.\n   - **Command Pattern**: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.\n\n5. **Concurrency Patterns**: Design patterns that address the challenges of writing concurrent and multi-threaded programs, ensuring correct and efficient synchronization and communication between threads.\n   - **Producer-Consumer Pattern**: Coordinates the work of multiple threads by separating tasks into producers that create data and consumers that process data.\n   - **Readers-Writers Pattern**: Controls access to shared resources between multiple readers and writers, allowing concurrent read access but exclusive write access.\n\n6. **Anti-Patterns**: Common pitfalls or bad practices in software design that should be avoided as they can lead to inefficiencies, code complexity, and maintainability issues.\n   - **God Object**: A class that knows too much or does too much, violating the single responsibility principle and making the code difficult to understand and maintain.\n   - **Spaghetti Code**: Unstructured and tangled code that is difficult to read, debug, and modify, typically resulting from poor design and lack of separation of concerns.\n\n7. **Immutable Objects**: Objects whose state cannot be modified after creation, providing benefits such as thread safety, simplicity, and predictability in concurrent and distributed environments.\n\n8. **Java Collections Framework**: A set of interfaces, implementations, and algorithms provided by Java for managing and manipulating collections of objects, such as lists, sets, maps, and queues.\n\n9. **Lambda Expressions and Functional Interfaces**: Java features introduced in Java 8 that enable functional programming constructs, such as lambda expressions, method references, and functional interfaces, facilitating concise and expressive code for implementing design patterns like Strategy and Observer.\n\nThese are some of the key terminologies and concepts related to Core Java design patterns. Understanding these patterns and principles can help Java developers write cleaner, more maintainable, and efficient code.\n\n\n### Java 8 terminologies and buzz words\n\nJava 8 introduced several significant features and enhancements to the Java programming language and platform. Here are some key terminologies and buzzwords associated with Java 8:\n\n1. **Lambda Expressions**: A new language feature that allows the definition of anonymous functions (also known as closures) in Java. Lambda expressions provide a concise syntax for representing functional interfaces, enabling more expressive and readable code.\n\n2. **Functional Interfaces**: Interfaces that have exactly one abstract method, known as a functional method. Functional interfaces are used in conjunction with lambda expressions and method references to provide functional programming capabilities in Java.\n\n3. **Stream API**: A new API introduced in Java 8 for processing collections of elements in a functional style. Streams enable operations such as map, filter, reduce, and collect to be performed on collections with concise and declarative syntax, promoting functional programming paradigms.\n\n4. **Method References**: A shorthand syntax for referring to methods or constructors using the `::` operator. Method references simplify the usage of lambda expressions for invoking methods and provide a more concise alternative for certain lambda expressions.\n\n5. **Default Methods**: A feature that allows interfaces to provide method implementations, enabling backward compatibility with existing code while still evolving interfaces with new methods. Default methods reduce the need for abstract classes and facilitate API evolution.\n\n6. **Optional**: A container object that may or may not contain a non-null value. Optional is designed to prevent null pointer exceptions by encouraging explicit handling of potentially absent values, improving code robustness and readability.\n\n7. **Date and Time API**: A new API introduced in Java 8 for handling date and time values in a more flexible, comprehensive, and thread-safe manner. The Date and Time API addresses the shortcomings of the legacy `java.util.Date` and `java.util.Calendar` classes and provides improved support for date and time operations.\n\n8. **CompletableFuture**: A class that represents a future result of an asynchronous computation in Java. CompletableFuture provides a flexible and composable way to perform asynchronous tasks, enabling non-blocking and parallel execution of tasks with support for chaining and combining results.\n\n9. **Parallel Streams**: Streams that leverage the parallel processing capabilities of multi-core processors to perform operations concurrently on collections. Parallel streams enable improved performance for CPU-intensive operations by distributing workloads across multiple threads.\n\n10. **Nashorn JavaScript Engine**: A lightweight, high-performance JavaScript engine that is integrated into the Java platform in Java 8. Nashorn provides seamless interoperability between Java and JavaScript, allowing developers to embed and execute JavaScript code within Java applications.\n\n11. **Functional Programming**: A programming paradigm that treats computation as the evaluation of mathematical functions and emphasizes immutable data, higher-order functions, and declarative programming style. Java 8 introduces functional programming constructs, such as lambda expressions and streams, to support functional programming principles in Java.\n\n12. **Type Annotations**: Annotations that can be applied to types, such as classes, interfaces, and type parameters, in addition to the existing element annotations. Type annotations enable stronger type checking, improved documentation, and enhanced tooling support for type-related metadata in Java programs.\n\nThese are some of the key terminologies and concepts introduced in Java 8. Understanding these features can help developers leverage the power and capabilities of Java 8 to write more expressive, concise, and maintainable code.\n\n### OOPs (Object-oriented programming) concept terminologies and buzz words\n\nCertainly! Object-oriented programming (OOP) is a programming paradigm that relies on the concept of \"objects\" to organize and structure code. Here are some key terminologies and buzzwords associated with object-oriented programming and OOP concepts:\n\n1. **Class**: A blueprint for creating objects, defining their properties (attributes) and behaviors (methods). Classes serve as templates for creating multiple instances of objects with similar characteristics.\n\n2. **Object**: An instance of a class that encapsulates data (attributes) and behavior (methods). Objects represent real-world entities or concepts and interact with each other by sending messages and invoking methods.\n\n3. **Encapsulation**: The bundling of data and methods that operate on the data within a single unit, known as a class. Encapsulation hides the internal state of an object and exposes only the necessary interfaces for interacting with it, promoting data integrity and abstraction.\n\n4. **Inheritance**: A mechanism that allows a class (subclass or derived class) to inherit properties and behaviors from another class (superclass or base class). Inheritance enables code reuse, extensibility, and hierarchical organization of classes.\n\n5. **Polymorphism**: The ability of objects to exhibit different behaviors or methods depending on their type or class hierarchy. Polymorphism enables dynamic method dispatch, method overriding, and subtype polymorphism, enhancing code flexibility and extensibility.\n\n6. **Abstraction**: The process of modeling complex systems or concepts by focusing on the essential features and ignoring irrelevant details. Abstraction enables the creation of simplified and generalized models that capture the essence of real-world entities, facilitating code design and understanding.\n\n7. **Interface**: A contract specifying a set of methods that a class must implement. Interfaces define a common behavior or capability that can be shared by multiple classes, promoting code modularity, flexibility, and polymorphism.\n\n8. **Composition**: A design principle that involves combining simple or smaller components (objects) to create more complex objects or systems. Composition enables building complex structures from reusable components and promotes code reuse and modularity.\n\n9. **Association**: A relationship between two classes that indicates how they are related or connected. Associations can be one-to-one, one-to-many, or many-to-many and can represent various types of relationships, such as aggregation, composition, or dependency.\n\n10. **Aggregation**: A type of association that represents a \"has-a\" relationship between classes, where one class (the whole) contains or is composed of other classes (parts) that have an independent lifecycle. Aggregation implies a weaker relationship than composition and allows parts to exist independently of the whole.\n\n11. **Composition**: A stronger form of aggregation in which the lifecycle of the contained objects (parts) is tightly bound to the lifecycle of the containing object (whole). Composition implies ownership and responsibility for managing the lifecycle of the contained objects.\n\n12. **Overloading**: The ability to define multiple methods in a class with the same name but different parameter lists. Method overloading enables creating methods that perform similar tasks but accept different types or numbers of arguments, enhancing code readability and flexibility.\n\n13. **Overriding**: The process of providing a new implementation for a method in a subclass that is already defined in its superclass. Method overriding allows subclasses to customize or extend the behavior of inherited methods, enabling polymorphism and dynamic method dispatch.\n\n14. **Static**: A keyword in Java used to declare members (variables and methods) that belong to the class itself rather than to individual instances (objects) of the class. Static members are shared among all instances of the class and can be accessed using the class name.\n\n15. **Final**: A keyword in Java used to restrict the modification or extension of classes, methods, or variables. Final classes cannot be subclassed, final methods cannot be overridden, and final variables cannot be reassigned after initialization.\n\nThese are some of the key terminologies and concepts associated with object-oriented programming (OOP) and the principles of OOP. Understanding these concepts is essential for writing well-structured, maintainable, and extensible code in Java and other object-oriented programming languages.\n\n\n### Java concurrency terminologies and buzz words\n\nCertainly! Java concurrency refers to the ability of Java programs to execute multiple tasks concurrently, allowing for parallel execution and efficient utilization of system resources. Here are some key terminologies and buzzwords associated with Java concurrency:\n\n1. **Thread**: A lightweight process that represents a single sequential flow of control within a Java program. Threads enable concurrent execution of tasks and allow programs to perform multiple operations simultaneously.\n\n2. **Multithreading**: The concurrent execution of multiple threads within a single process or program. Multithreading enables programs to perform tasks concurrently, improving performance, responsiveness, and resource utilization.\n\n3. **Concurrency**: The property of a program that allows multiple tasks or operations to make progress simultaneously. Concurrency enables efficient utilization of system resources, better responsiveness, and improved scalability in multi-user or multi-tasking environments.\n\n4. **Thread Safety**: The property of a program or data structure that ensures correct behavior in a multithreaded environment. Thread-safe code or data structures can be accessed and modified by multiple threads concurrently without causing data corruption or race conditions.\n\n5. **Synchronization**: The coordination of access to shared resources or critical sections of code by multiple threads to prevent data races and ensure thread safety. Synchronization mechanisms, such as locks, monitors, and synchronized blocks, serialize access to shared resources and establish mutual exclusion.\n\n6. **Race Condition**: A situation that occurs in a multithreaded program when the outcome of operations depends on the relative timing or interleaving of thread execution. Race conditions can lead to non-deterministic behavior, data corruption, and program failures if not properly handled.\n\n7. **Lock**: A synchronization mechanism used to control access to shared resources by multiple threads. Locks provide exclusive access to critical sections of code or data structures, preventing concurrent modification and ensuring thread safety.\n\n8. **Monitor**: A synchronization construct provided by the Java Virtual Machine (JVM) to coordinate access to synchronized methods and blocks. Monitors use intrinsic locks (also known as mutexes) to enforce mutual exclusion and ensure thread-safe access to shared resources.\n\n9. **Semaphore**: A synchronization primitive that controls access to a shared resource by limiting the number of threads that can simultaneously acquire a lock or access the resource. Semaphores are used to manage access to finite resources and implement concurrency control mechanisms.\n\n10. **Deadlock**: A situation that occurs when two or more threads are blocked indefinitely, waiting for each other to release resources that they need to proceed. Deadlocks can occur due to improper synchronization, incorrect locking order, or resource contention, leading to program hang or deadlock.\n\n11. **Thread Pool**: A managed collection of pre-initialized threads that are available for executing tasks concurrently. Thread pools improve performance and resource utilization by reusing threads for multiple tasks, avoiding the overhead of creating and destroying threads frequently.\n\n12. **Executor Framework**: A framework provided by the `java.util.concurrent` package for managing thread execution and scheduling tasks asynchronously. The Executor framework abstracts the details of thread management and provides higher-level abstractions for executing tasks, such as `ExecutorService` and `ScheduledExecutorService`.\n\n13. **Fork-Join Framework**: A framework provided by the `java.util.concurrent` package for parallelizing recursive divide-and-conquer algorithms. The Fork-Join framework uses a work-stealing algorithm to dynamically distribute tasks among worker threads, maximizing parallelism and efficiency.\n\n14. **Atomic Operations**: Operations that are performed atomically (indivisibly) without interference from other threads. Atomic operations ensure thread safety and prevent data races by guaranteeing that certain operations, such as read-modify-write operations, are performed in a single, uninterruptible step.\n\n15. **Volatile Keyword**: A keyword in Java used to declare variables that are subject to visibility guarantees and atomicity constraints in a multithreaded environment. Volatile variables ensure that changes made by one thread are immediately visible to other threads and prevent certain types of data races.\n\nThese are some of the key terminologies and concepts associated with Java concurrency and multithreading. Understanding these concepts is essential for writing scalable, efficient, and thread-safe Java applications that leverage the benefits of concurrent execution.\n\n### JDBC terminologies and buzz words\n\nCertainly! JDBC (Java Database Connectivity) is a Java API for connecting and interacting with relational databases. Here are some key terminologies and buzzwords associated with JDBC:\n\n1. **Driver**: A software component that provides the necessary functionality to connect Java applications to specific database management systems (DBMS). JDBC drivers implement the JDBC API and translate JDBC calls into database-specific commands.\n\n2. **JDBC URL**: A Uniform Resource Locator (URL) used to specify the connection details and parameters for establishing a connection to a database. JDBC URLs typically include information such as the database type, host address, port number, database name, and authentication credentials.\n\n3. **Connection**: A JDBC object representing a connection to a database. Connections are used to establish communication with a database server, execute SQL statements, and manage transactions.\n\n4. **Statement**: A JDBC object used to execute SQL statements against a database. Statements can be of three types: `Statement` for executing simple SQL queries, `PreparedStatement` for executing parameterized SQL queries, and `CallableStatement` for executing stored procedures.\n\n5. **ResultSet**: A JDBC object representing the result of executing a SQL query. ResultSets encapsulate the retrieved rows of a query and provide methods for navigating, accessing, and manipulating the data returned by the query.\n\n6. **Metadata**: Information about the structure and properties of a database, such as the names and data types of tables, columns, and indexes. JDBC provides metadata interfaces, such as `DatabaseMetaData` and `ResultSetMetaData`, for retrieving and querying metadata from a database.\n\n7. **Transaction**: A logical unit of work performed against a database that consists of one or more SQL statements. Transactions ensure data consistency and integrity by providing mechanisms for committing changes (making them permanent) or rolling back changes (undoing them) in case of errors or failures.\n\n8. **Batch Processing**: A technique for executing multiple SQL statements as a single batch to improve performance and reduce database round-trips. JDBC supports batch processing through the `addBatch()` and `executeBatch()` methods of `Statement` and `PreparedStatement` objects.\n\n9. **Connection Pooling**: A mechanism for managing and reusing database connections to minimize the overhead of establishing new connections. Connection pooling frameworks, such as Apache DBCP and HikariCP, maintain a pool of pre-initialized database connections that can be borrowed and returned by applications as needed.\n\n10. **DataSource**: A JDBC interface representing a factory for creating database connections. DataSources provide a standardized way to obtain database connections in Java applications and support connection pooling, transaction management, and resource optimization.\n\n11. **DriverManager**: A JDBC class responsible for managing JDBC drivers and establishing database connections. The DriverManager class provides methods for registering drivers, obtaining connections, and configuring connection properties.\n\n12. **SQL Injection**: A security vulnerability that occurs when untrusted user input is improperly handled in SQL queries, allowing attackers to execute arbitrary SQL commands or manipulate the behavior of database queries. JDBC provides mechanisms, such as prepared statements and parameterized queries, to prevent SQL injection attacks.\n\n13. **Connection Pool**: A collection of reusable database connections maintained by a connection pooling framework. Connection pools manage the lifecycle of database connections, including creation, validation, and recycling, to improve performance and scalability in multi-user or multi-threaded environments.\n\n14. **Statement Pooling**: A technique for reusing prepared statements or callable statements to avoid the overhead of parsing and compiling SQL queries repeatedly. Statement pooling frameworks, such as Apache Commons DBCP, cache and manage prepared statements to improve database performance and resource utilization.\n\n15. **Transaction Isolation**: The degree to which the changes made by one transaction are visible to other concurrent transactions. JDBC supports different levels of transaction isolation, such as `READ_UNCOMMITTED`, `READ_COMMITTED`, `REPEATABLE_READ`, and `SERIALIZABLE`, to control the visibility and consistency of data in concurrent transactions.\n\nThese are some of the key terminologies and concepts associated with JDBC, which are essential for understanding and working with database connectivity in Java applications.\n\n\n### JSP terminologies and buzz words\n\nCertainly! JSP (JavaServer Pages) is a technology used for creating dynamic web pages with Java. Here are some key terminologies and buzzwords associated with JSP:\n\n1. **Dynamic Web Pages**: Web pages that are generated dynamically by a web server in response to client requests. JSP allows developers to embed Java code directly into HTML pages, enabling the creation of dynamic content and interactions with web users.\n\n2. **Servlet**: A Java program that runs on the server side to handle client requests and generate dynamic web content. JSP pages are ultimately translated into servlets by the JSP container, allowing for the execution of Java code and the generation of HTML output.\n\n3. **JSP Container**: A component of a web server or application server responsible for processing JSP pages, compiling them into servlets, and executing them to generate dynamic web content. Examples of JSP containers include Apache Tomcat, Jetty, and GlassFish.\n\n4. **Scriptlet**: A block of Java code embedded within a JSP page using `<% %>` tags. Scriptlets allow developers to execute Java logic, perform calculations, and access data from within the JSP page, enabling dynamic content generation based on user input or application state.\n\n5. **Expression Language (EL)**: A language used to simplify the access and manipulation of data within JSP pages. EL expressions are enclosed within `${ }` tags and can be used to retrieve values from JavaBeans, session attributes, request parameters, and other objects stored in the page context.\n\n6. **Standard Actions**: Predefined XML-like tags provided by JSP for performing common tasks, such as including other files, forwarding requests, setting variables, iterating over collections, and manipulating HTTP headers. Standard actions provide a declarative way to perform common operations without writing Java code directly.\n\n7. **Custom Tags**: User-defined tags created by developers to encapsulate reusable components or functionality within JSP pages. Custom tags allow for modularization, abstraction, and reuse of code, promoting code maintainability and readability.\n\n8. **Tag Libraries**: Collections of custom tags organized into reusable components or libraries for use in JSP pages. Tag libraries provide a higher level of abstraction and encapsulation compared to scriptlets and standard actions, enabling the development of more modular and maintainable web applications.\n\n9. **JSP Directive**: Special instructions or directives provided by JSP for controlling the behavior of the JSP container during page translation and execution. Directives include `page`, `include`, and `taglib` directives, which specify page attributes, include other files, and import tag libraries, respectively.\n\n10. **JSP Lifecycle**: The sequence of events and phases that occur during the processing of a JSP page by the JSP container. The JSP lifecycle includes stages such as translation, compilation, initialization, execution, and destruction, which determine how JSP pages are processed and executed.\n\n11. **Model-View-Controller (MVC)**: A design pattern used to organize web applications into three separate components: the model (business logic and data), the view (presentation layer), and the controller (request handling and flow control). JSP is often used as the view component in MVC architectures, separating presentation logic from application logic.\n\n12. **JavaBean**: A reusable component or Java class that encapsulates data and provides accessor and mutator methods for accessing and manipulating the data. JavaBeans are commonly used in JSP pages to represent business entities, manage application state, and interact with databases or other backend systems.\n\n13. **Request Scope**: The scope or lifespan of objects and data associated with a single HTTP request in a web application. Request-scoped objects, such as request parameters and attributes, are accessible only within the context of the current request and are discarded after the request is processed.\n\n14. **Session Scope**: The scope or lifespan of objects and data associated with a single user session in a web application. Session-scoped objects, such as session attributes, are persistent across multiple requests from the same user and are typically stored on the server side, enabling stateful interactions and user-specific customization.\n\n15. **Page Directive**: A JSP directive used to specify various attributes and settings for the current JSP page, such as the page language, content type, error handling, and buffer size. Page directives are defined using `<%@ page %>` tags and provide metadata and configuration options for controlling the behavior of the JSP container.\n\nThese are some of the key terminologies and concepts associated with JSP, which are essential for understanding and developing dynamic web applications using JavaServer Pages.\n\n\n### JSTL (JavaServer Pages Standard Tag Library) terminologies and buzz words\n\nJSTL (JavaServer Pages Standard Tag Library) is a collection of custom tags and functions designed to simplify the development of JSP (JavaServer Pages) pages. Here are some key terminologies and buzzwords associated with JSTL:\n\n1. **Tag Library**: A collection of custom tags and functions that extend the capabilities of JSP pages. JSTL provides a standard set of tags and functions for performing common tasks, such as iteration, conditionals, formatting, and internationalization, without writing Java code directly.\n\n2. **Core Tags**: A set of JSTL tags used for basic control flow, iteration, variable manipulation, and URL management within JSP pages. Core tags include `<c:if>`, `<c:forEach>`, `<c:set>`, `<c:remove>`, `<c:url>`, and `<c:choose>`, among others.\n\n3. **Formatting Tags**: JSTL tags used for formatting and internationalization of data within JSP pages. Formatting tags include `<fmt:formatDate>`, `<fmt:formatNumber>`, `<fmt:parseNumber>`, and `<fmt:message>`, which provide support for date, number, and message formatting based on locale settings.\n\n4. **SQL Tags**: Deprecated JSTL tags used for executing SQL queries and accessing relational databases within JSP pages. SQL tags include `<sql:setDataSource>`, `<sql:query>`, `<sql:update>`, and `<sql:param>`, which are typically replaced by more robust and secure approaches, such as JDBC or ORM frameworks.\n\n5. **XML Tags**: JSTL tags used for processing XML data within JSP pages. XML tags include `<x:parse>`, `<x:out>`, `<x:forEach>`, and `<x:choose>`, which provide support for parsing, rendering, and manipulating XML documents and nodes.\n\n6. **EL Functions**: A set of utility functions provided by JSTL for performing common operations within EL (Expression Language) expressions. EL functions include functions for string manipulation, date and time operations, mathematical calculations, and collection manipulation, such as `fn:length()`, `fn:substring()`, `fn:concat()`, and `fn:contains()`.\n\n7. **Taglib Directive**: A JSP directive used to declare the usage of a tag library within a JSP page. The taglib directive specifies the prefix and URI (Uniform Resource Identifier) of the tag library, allowing JSP pages to reference and use the custom tags and functions provided by the library.\n\n8. **JSP Expression Language (EL)**: A language used to simplify the access and manipulation of data within JSP pages. EL expressions are enclosed within `${ }` tags and can be used to retrieve values from JavaBeans, session attributes, request parameters, and other objects stored in the page context.\n\n9. **Standard Actions**: Predefined XML-like tags provided by JSTL for performing common tasks within JSP pages. Standard actions include conditional statements (`<c:if>`), iteration (`<c:forEach>`), setting variables (`<c:set>`), removing variables (`<c:remove>`), and handling errors (`<c:catch>`).\n\n10. **Custom Tags**: User-defined tags created by developers to encapsulate reusable components or functionality within JSP pages. Custom tags allow for modularization, abstraction, and reuse of code, promoting code maintainability and readability.\n\n11. **JSTL Functions**: A collection of utility functions provided by JSTL for performing common operations within JSP pages. JSTL functions include functions for string manipulation, date and time operations, mathematical calculations, and collection manipulation, such as `fn:length()`, `fn:substring()`, `fn:concat()`, and `fn:contains()`.\n\nThese are some of the key terminologies and concepts associated with JSTL, which are essential for understanding and leveraging the capabilities of JavaServer Pages Standard Tag Library in web development with JSP.\n\n### Servlets terminologies and buzz words\n\nCertainly! Servlets are Java programs that run on the server side to handle client requests and generate dynamic web content. Here are some key terminologies and buzzwords associated with servlets:\n\n1. **Servlet Container**: A runtime environment provided by a web server or application server for executing servlets. Servlet containers manage the lifecycle of servlets, handle client requests, and generate dynamic responses, adhering to the Java Servlet API specifications.\n\n2. **Java Servlet API**: A standard Java API provided by the Java EE (Enterprise Edition) platform for developing server-side web applications using servlets. The Servlet API defines the contract between servlets and servlet containers, specifying servlet lifecycle, request handling, response generation, and other functionalities.\n\n3. **HTTP Servlet**: A subclass of the `javax.servlet.http.HttpServlet` class used for handling HTTP requests and generating HTTP responses in servlet-based web applications. HTTP servlets implement the `doGet()`, `doPost()`, `doPut()`, `doDelete()`, and other methods to handle different HTTP methods and request types.\n\n4. **Servlet Lifecycle**: The sequence of states and events that occur during the lifecycle of a servlet within a servlet container. The servlet lifecycle includes stages such as initialization, service, destruction, and garbage collection, which determine how servlet instances are created, executed, and cleaned up by the container.\n\n5. **Initialization**: The process of initializing a servlet and preparing it for handling client requests. Servlet initialization occurs when the servlet container loads the servlet class, creates an instance, and calls the `init()` method to perform initialization tasks, such as reading configuration parameters and establishing resources.\n\n6. **Request Handling**: The process of processing client requests and generating responses within a servlet. Servlets handle incoming HTTP requests by implementing the `service()` method or specific HTTP method handlers (`doGet()`, `doPost()`, etc.), parsing request parameters, invoking business logic, and generating dynamic content or forwarding requests to other components.\n\n7. **Response Generation**: The process of generating and sending HTTP responses back to clients from within a servlet. Servlets construct HTTP responses by setting response headers, writing content to the response body, and sending the response back to the client using the `HttpServletResponse` object provided by the servlet container.\n\n8. **Session Management**: The process of managing user sessions and maintaining session state across multiple requests within a servlet-based web application. Servlets use session management techniques, such as cookies, URL rewriting, and session objects (`HttpSession`), to associate user data with unique session identifiers and track user interactions over time.\n\n9. **Servlet Mapping**: The association of URL patterns or request URIs with servlets within a web application deployment descriptor (web.xml) or using annotations. Servlet mapping determines which servlet should handle incoming requests based on the requested URL, enabling dispatching of requests to appropriate servlets.\n\n10. **Filter**: A Java component used for intercepting and processing HTTP requests and responses before they reach the servlet or after they have been processed by the servlet. Filters provide reusable and pluggable components for implementing cross-cutting concerns, such as authentication, authorization, logging, and request/response modification.\n\n11. **Listener**: A Java component used for listening to and handling lifecycle events within a servlet container. Servlet listeners, such as `ServletContextListener`, `ServletRequestListener`, and `HttpSessionListener`, enable applications to respond to container events, such as context initialization, request arrival, session creation, and attribute changes.\n\n12. **Context Initialization**: The process of initializing the servlet context and application-wide resources within a servlet container. Servlet context initialization occurs when the container starts up and deploys the web application, allowing servlets to perform global initialization tasks, such as database connection pooling, resource loading, and configuration setup.\n\n13. **Forwarding**: The process of internally redirecting an HTTP request from one servlet to another servlet, JSP page, or resource within the same web application. Servlet forwarding allows servlets to delegate request processing to other components while maintaining the original request URL and attributes.\n\n14. **Include**: The process of including the output of another servlet, JSP page, or resource within the response generated by the current servlet. Servlet inclusion allows servlets to reuse and compose dynamic content from multiple sources, such as header and footer components, within the same response.\n\n15. **Asynchronous Processing**: The capability of servlets to handle long-running tasks or non-blocking I/O operations asynchronously, without tying up server resources or blocking other requests. Servlet asynchronous processing allows for improved scalability, responsiveness, and resource utilization in servlet-based web applications.\n\nThese are some of the key terminologies and concepts associated with servlets, which are essential for understanding and developing server-side web applications using Java Servlet technology.\n\n\n### Webpack terminologies and buzz words\n\nCertainly! Webpack is a popular module bundler for JavaScript applications. Here are some key terminologies and buzzwords associated with Webpack:\n\n1. **Module Bundler**: A tool used to bundle multiple modules or files into a single bundle for deployment in web applications. Webpack analyzes dependencies between modules, resolves import statements, and generates optimized bundles that include all required assets, such as JavaScript, CSS, images, and fonts.\n\n2. **Entry Point**: The starting point or main file of a Webpack application where the bundling process begins. The entry point specifies the module or file that Webpack should use as the root of the dependency graph when building the application bundle.\n\n3. **Output**: The generated bundle or output file produced by Webpack after bundling all modules and dependencies. The output configuration in Webpack specifies the filename and location of the output bundle, as well as additional settings such as public path and bundle format.\n\n4. **Loader**: A Webpack plugin used to preprocess or transform files before they are included in the bundle. Loaders enable Webpack to handle different types of files, such as JavaScript, CSS, HTML, and images, by applying transformations, such as transpilation, minification, and optimization, using loaders such as Babel, CSS-loader, and file-loader.\n\n5. **Plugin**: A Webpack extension or add-on used to perform custom tasks or optimizations during the bundling process. Plugins provide hooks and APIs for modifying the Webpack build process, injecting additional functionality, and optimizing output bundles. Common Webpack plugins include HtmlWebpackPlugin, UglifyJsPlugin, and MiniCssExtractPlugin.\n\n6. **Code Splitting**: A technique used to split the application code into multiple bundles or chunks to improve performance and reduce initial loading time. Webpack supports code splitting using dynamic import statements, entry points, and splitChunks optimization to generate smaller bundles that can be loaded asynchronously as needed.\n\n7. **Tree Shaking**: A process of eliminating dead code or unused modules from the final bundle to reduce its size and improve runtime performance. Webpack uses tree shaking in conjunction with module bundling and static analysis to identify and remove unused exports and dependencies from the application code.\n\n8. **Hot Module Replacement (HMR)**: A feature of Webpack that enables real-time updating of modules in the browser without requiring a full page reload. HMR allows developers to make code changes and see the results instantly in the browser, improving development workflow and productivity.\n\n9. **DevServer**: A built-in development server provided by Webpack for serving the bundled application and supporting features such as hot module replacement, live reloading, and HTTP proxying during development. DevServer enables rapid iteration and testing of changes without the need for manual setup or configuration.\n\n10. **Mode**: A configuration option in Webpack that specifies the build mode or environment, such as development or production. The mode setting influences various aspects of the bundling process, including optimization, output size, and error reporting, to optimize performance and generate optimized bundles for different environments.\n\n11. **Webpack Configuration**: A JavaScript configuration file (typically named webpack.config.js) used to customize and configure the behavior of Webpack for a specific project. The Webpack configuration file defines entry points, output settings, loaders, plugins, optimization options, and other parameters required for building the application bundle.\n\n12. **Chunk**: A unit of code or bundle generated by Webpack during the bundling process, representing a group of modules and dependencies. Webpack generates chunks based on entry points, code splitting, and optimization settings to optimize resource loading and improve application performance.\n\n13. **Asset Management**: The process of handling static assets, such as images, fonts, and media files, in a Webpack application. Webpack provides loaders and plugins for importing and processing assets, optimizing file size, and generating asset URLs in the output bundle.\n\n14. **Module Resolution**: The process of resolving import statements and module dependencies within a Webpack application. Webpack uses module resolution rules, such as file extensions, aliases, and module paths, to locate and load modules from the file system or node_modules directory.\n\n15. **Webpack CLI**: Command-line interface (CLI) tool for running Webpack commands, managing project configurations, and executing build tasks from the terminal. Webpack CLI provides commands for building, watching, analyzing, and serving Webpack bundles, as well as options for configuring the build process.\n\nThese are some of the key terminologies and concepts associated with Webpack, which are essential for understanding and configuring the module bundling process in modern JavaScript applications.\n\n### Rollup.js terminologies and buzz words\n\nCertainly! Rollup.js is another popular module bundler for JavaScript applications, with a focus on generating optimized bundles for production use. Here are some key terminologies and buzzwords associated with Rollup.js:\n\n1. **Module Bundler**: Similar to Webpack, Rollup.js is a tool used to bundle multiple modules or files into a single bundle for deployment in web applications. Rollup analyzes module dependencies and generates optimized bundles that leverage ES6 module features and tree-shaking for better performance.\n\n2. **ES Module**: ECMAScript (ES) modules are a standard module system introduced in ES6 (ES2015) for organizing and structuring JavaScript code. Rollup supports ES modules natively and encourages the use of ES6 module syntax for better interoperability, readability, and tree-shaking optimization.\n\n3. **Tree-Shaking**: A process of eliminating dead code or unused modules from the final bundle to reduce its size and improve runtime performance. Rollup.js uses tree shaking to analyze module dependencies statically and remove unused exports and dependencies from the application code, resulting in smaller and more efficient bundles.\n\n4. **Entry Point**: The main file or module of a Rollup.js application where the bundling process begins. The entry point specifies the starting point of the dependency graph, and Rollup recursively resolves and bundles all dependencies into a single output bundle.\n\n5. **Output Options**: Configuration settings in Rollup.js that specify the filename, format, and other properties of the output bundle generated by the bundling process. Rollup output options allow developers to customize the output bundle format, such as ES module, CommonJS, AMD, UMD, or IIFE (Immediately Invoked Function Expression).\n\n6. **Plugin**: A Rollup.js extension or add-on used to customize and extend the functionality of the bundling process. Rollup plugins provide hooks and APIs for transforming files, handling assets, optimizing output, and integrating with third-party tools and libraries, such as Babel, TypeScript, and CSS preprocessors.\n\n7. **Rollup Configuration**: A JavaScript configuration file (typically named rollup.config.js) used to define and customize the behavior of Rollup.js for a specific project. The Rollup configuration file specifies entry points, output options, plugins, and other parameters required for building the application bundle.\n\n8. **Chunk**: A unit of code or bundle generated by Rollup.js during the bundling process, representing a group of modules and dependencies. Rollup generates chunks based on entry points, module imports, and code splitting techniques to optimize resource loading and improve application performance.\n\n9. **Code Splitting**: A technique used to split the application code into multiple chunks or bundles to improve performance and reduce initial loading time. Rollup.js supports code splitting by generating separate bundles for different entry points or dynamically imported modules, allowing for better resource management and lazy loading.\n\n10. **Dynamic Import**: A feature of JavaScript that allows modules to be imported asynchronously at runtime using dynamic import statements (`import()`). Rollup.js supports dynamic import syntax for code splitting and generating separate bundles for dynamically loaded modules, enabling lazy loading and better performance optimization.\n\n11. **Optimization**: The process of optimizing the output bundle generated by Rollup.js for better performance and efficiency. Rollup provides built-in optimizations, such as tree shaking, minification, code splitting, and scope hoisting, to reduce bundle size, improve runtime performance, and minimize load times.\n\n12. **Scope Hoisting**: An optimization technique used by Rollup.js to reduce bundle size and improve runtime performance by hoisting module scopes and sharing module bindings across multiple modules. Scope hoisting eliminates redundant code and reduces function call overhead, resulting in smaller and faster bundles.\n\n13. **Watch Mode**: A development mode in Rollup.js that monitors file changes and automatically rebuilds the output bundle whenever a source file is modified. Rollup watch mode enables rapid iteration and testing of changes during development, providing instant feedback without manual rebuilding.\n\n14. **External Dependencies**: Dependencies that are not bundled into the output bundle by Rollup.js and are expected to be provided by the runtime environment or loaded separately at runtime. Rollup supports specifying external dependencies to exclude them from the bundle and generate import statements for dynamic loading.\n\n15. **Advanced Configuration**: Advanced configuration options and features provided by Rollup.js for fine-tuning and optimizing the bundling process. Rollup allows developers to customize module resolution, output formats, asset handling, source maps, and other aspects of the bundling process to meet specific project requirements.\n\nThese are some of the key terminologies and concepts associated with Rollup.js, which are essential for understanding and configuring the module bundling process in JavaScript applications using Rollup.js.\n\n\n### Javascript terminologies and buzz words\n\nCertainly! JavaScript is a versatile programming language widely used for building web applications, server-side applications, mobile apps, and more. Here are some key terminologies and buzzwords associated with JavaScript:\n\n1. **JavaScript (JS)**: A high-level, interpreted programming language primarily used for client-side web development. JavaScript enables dynamic behavior, interactivity, and manipulation of web page content within web browsers.\n\n2. **ECMAScript (ES)**: The official standard specification for JavaScript maintained by Ecma International. ECMAScript defines the syntax, semantics, and behavior of JavaScript, ensuring consistency and interoperability across different implementations and environments.\n\n3. **Frontend**: The client-facing part of a web application or website that users interact with directly in their web browsers. Frontend development involves designing and implementing user interfaces, interactivity, and functionality using HTML, CSS, and JavaScript.\n\n4. **Backend**: The server-side part of a web application or website responsible for processing requests, executing business logic, and interacting with databases or external services. Backend development involves implementing server-side logic, APIs, and data storage using programming languages such as JavaScript (Node.js), Python, Ruby, PHP, etc.\n\n5. **Node.js**: A runtime environment for executing JavaScript code outside the web browser, typically on the server side. Node.js enables developers to build scalable, high-performance server applications using JavaScript, leveraging event-driven, non-blocking I/O model.\n\n6. **Package Manager**: A tool used to manage dependencies, libraries, and third-party packages in JavaScript projects. Package managers, such as npm (Node Package Manager) and Yarn, provide commands for installing, updating, and removing packages from project dependencies.\n\n7. **Framework**: A software framework or library that provides pre-written code, utilities, and abstractions to facilitate application development and streamline common tasks. JavaScript frameworks, such as Angular, React, and Vue.js, are widely used for building frontend user interfaces and single-page applications (SPAs).\n\n8. **Library**: A collection of reusable code modules, functions, and utilities that provide specific functionality or solve common programming tasks. JavaScript libraries, such as jQuery, Lodash, and Axios, are often used to simplify DOM manipulation, data manipulation, and AJAX requests in web applications.\n\n9. **Asynchronous Programming**: A programming paradigm used to handle operations that may take significant time to complete, such as I/O operations or network requests, without blocking the execution of the main program. JavaScript supports asynchronous programming using callbacks, promises, and async/await syntax.\n\n10. **Callback Function**: A function passed as an argument to another function and invoked asynchronously to handle the result of an asynchronous operation or event. Callback functions are commonly used in JavaScript to execute code after completion of asynchronous tasks, such as AJAX requests or setTimeout.\n\n11. **Promise**: An object representing the eventual completion or failure of an asynchronous operation, typically used to handle asynchronous tasks and manage their results. Promises provide a cleaner and more readable way to write asynchronous code compared to callback-based approaches.\n\n12. **Async/Await**: A modern JavaScript syntax introduced in ES2017 (ES8) for asynchronous programming, providing a more intuitive and synchronous-like way to write asynchronous code using async functions and await expressions. Async/await simplifies error handling and control flow in asynchronous code.\n\n13. **Single-Page Application (SPA)**: A web application or website that dynamically updates and renders content in response to user interactions without reloading the entire page from the server. SPAs use JavaScript frameworks or libraries to manage client-side routing, state management, and view rendering.\n\n14. **DOM Manipulation**: The process of accessing, modifying, or updating the Document Object Model (DOM) of a web page using JavaScript. DOM manipulation allows developers to dynamically change page content, structure, and styles based on user interactions or application logic.\n\n15. **Event Handling**: The process of capturing and responding to user interactions, browser events, or custom events within a web application using JavaScript. Event handling allows developers to define event listeners and callback functions to execute specific actions in response to events, such as clicks, keypresses, or form submissions.\n\nThese are some of the key terminologies and concepts associated with JavaScript, which are essential for understanding and developing modern web applications and server-side applications using JavaScript technologies and frameworks.\n\n\n### Reactjs terminologies and buzz words\n\nCertainly! React.js is a popular JavaScript library for building user interfaces, particularly for single-page applications (SPAs). Here are some key terminologies and buzzwords associated with React.js:\n\n1. **React**: A JavaScript library developed by Facebook for building user interfaces using a component-based architecture. React allows developers to create reusable UI components and manage component state, rendering, and lifecycle efficiently.\n\n2. **Component**: A self-contained and reusable building block of a React application that encapsulates UI elements, behavior, and state. React components can be composed hierarchically to create complex user interfaces, promoting modularity, reusability, and maintainability.\n\n3. **JSX (JavaScript XML)**: A syntax extension for JavaScript used in React to define and render UI components using HTML-like syntax within JavaScript code. JSX allows developers to write expressive and declarative UI code, combining HTML markup with JavaScript expressions and logic.\n\n4. **Virtual DOM (Document Object Model)**: A lightweight, in-memory representation of the actual DOM tree maintained by React for efficient rendering and updates. React uses the virtual DOM to perform diffing and reconciliation between the current and previous states of the DOM, minimizing DOM manipulation and improving performance.\n\n5. **State**: The internal data or state managed by a React component that determines its behavior, appearance, and rendering. React components can have local state managed using the `useState` hook or global state managed using state management libraries like Redux or Context API.\n\n6. **Props (Properties)**: Short for properties, props are inputs passed to React components to customize their behavior, appearance, and content. Props are immutable and are typically used to pass data from parent components to child components, enabling component composition and reusability.\n\n7. **Component Lifecycle**: The sequence of stages or phases that a React component goes through during its lifetime, from initialization to destruction. React components have lifecycle methods, such as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`, which allow developers to hook into different stages of the component lifecycle and perform actions or side effects.\n\n8. **Hooks**: A feature introduced in React 16.8 for adding stateful and side-effectful behavior to functional components. React hooks, such as `useState`, `useEffect`, `useContext`, and `useReducer`, allow functional components to manage state, handle side effects, access context, and implement custom logic without using class components.\n\n9. **Context API**: A feature in React for passing data through the component tree without explicitly passing props down manually at every level. Context API provides a way to share global state or configuration across multiple components in a React application, simplifying state management and reducing prop drilling.\n\n10. **Conditional Rendering**: The process of conditionally rendering UI components or elements based on certain conditions or expressions. React supports conditional rendering using JavaScript expressions, ternary operators, logical && operator, and conditional rendering patterns such as if statements and switch statements.\n\n11. **List Rendering**: The process of rendering dynamic lists or collections of data as UI components in a React application. React provides map() method and JSX syntax for iterating over arrays or collections and rendering list items dynamically based on the data.\n\n12. **Event Handling**: The process of capturing and handling user interactions, browser events, or custom events within React components. React components use event handlers, such as onClick, onChange, onSubmit, etc., to respond to user actions and trigger specific behavior or updates in the application.\n\n13. **Component Composition**: The practice of composing or combining multiple React components together to create complex user interfaces. React components can be composed hierarchically, allowing for the creation of reusable, modular, and maintainable UI components and layouts.\n\n14. **React Router**: A popular routing library for React applications used for managing navigation and routing between different views or pages in a single-page application. React Router provides declarative routing and navigation components, such as `<BrowserRouter>`, `<Route>`, `<Link>`, and `<Switch>`, for building navigation interfaces.\n\n15. **State Management**: The process of managing application state, data, and state transitions in a React application. React provides built-in state management features using component state and context API, while external libraries like Redux, MobX, and Recoil offer more advanced state management solutions for complex applications.\n\nThese are some of the key terminologies and concepts associated with React.js, which are essential for understanding and developing modern web applications using React.js library.\n\n### Reduxjs terminologies and buzz words\n\nCertainly! Redux is a predictable state container for JavaScript applications, commonly used with React for managing application state. Here are some key terminologies and buzzwords associated with Redux:\n\n1. **State**: The single source of truth that represents the entire application state stored in a plain JavaScript object. In Redux, the state is immutable and can only be modified by dispatching actions.\n\n2. **Store**: An object that holds the application state and provides methods for accessing, updating, and subscribing to state changes. The Redux store is created using the `createStore()` function and serves as the central hub for managing state in a Redux application.\n\n3. **Action**: Plain JavaScript objects that represent an intention to change the state of the application. Actions are dispatched to the Redux store using the `dispatch()` method and typically contain a `type` property indicating the type of action and optional payload data.\n\n4. **Reducer**: A pure function that specifies how the application state should change in response to dispatched actions. Reducers take the current state and an action as input and return a new state object without mutating the original state. Redux combines multiple reducers using the `combineReducers()` function to manage different slices of state.\n\n5. **Action Creator**: A function that creates and returns action objects to dispatch to the Redux store. Action creators encapsulate the logic for creating actions and abstract away the details of action construction, making it easier to dispatch actions from components.\n\n6. **Dispatch**: A method provided by the Redux store for dispatching actions to trigger state changes. Components and middleware can dispatch actions using the `dispatch()` function, which passes the action to the root reducer to update the application state.\n\n7. **Middleware**: Functions that intercept and process actions before they reach the reducers, enabling additional functionality such as logging, asynchronous operations, and side effects. Redux middleware sits between the action dispatch and reducer invocation and can modify, delay, or dispatch additional actions based on intercepted actions.\n\n8. **Store Subscription**: A mechanism provided by Redux for subscribing to state changes and receiving notifications whenever the state of the Redux store updates. Components can subscribe to the Redux store using the `subscribe()` method and react to state changes by re-rendering or updating their UI.\n\n9. **Selectors**: Functions used to extract specific pieces of data or computed values from the Redux store state. Selectors provide a way to encapsulate and memoize state access logic, improving performance and maintainability by avoiding unnecessary recomputations.\n\n10. **Immutable Update Patterns**: Patterns and techniques used to update immutable state in Redux reducers without mutating the original state object. Common immutable update patterns include object spread syntax, `Object.assign()`, and libraries like Immer or Immutable.js.\n\n11. **Redux DevTools**: A browser extension or development tool for inspecting and debugging Redux applications. Redux DevTools provides a graphical interface for visualizing state changes, time-travel debugging, and analyzing dispatched actions and state snapshots during development.\n\n12. **Thunks**: A type of Redux middleware used to handle asynchronous logic and side effects in Redux applications. Thunks are functions that can be dispatched as actions and can contain asynchronous code, such as API calls, and dispatch additional actions based on the results.\n\n13. **Selectors**: Functions used to extract specific pieces of data or computed values from the Redux store state. Selectors provide a way to encapsulate and memoize state access logic, improving performance and maintainability by avoiding unnecessary recomputations.\n\n14. **Reselect**: A popular library for creating memoized selectors in Redux applications. Reselect provides memoized selector functions that efficiently compute derived data from the Redux store state and cache the results to prevent unnecessary recomputations.\n\n15. **Async Actions**: Actions that involve asynchronous operations, such as fetching data from an API, waiting for user input, or performing time-delayed tasks. Redux middleware, such as Thunks or Sagas, can handle async actions by dispatching multiple actions asynchronously and handling the results when they resolve.\n\nThese are some of the key terminologies and concepts associated with Redux, which are essential for understanding and implementing state management in JavaScript applications using Redux library.\n\n### JWT terminologies and buzz words\n\nJWT (JSON Web Token) is a compact, URL-safe means of representing claims to be transferred between two parties. Here are some key terminologies and buzzwords associated with JWT:\n\n1. **Token**: A string representing a set of claims as a JSON object that is encoded in a compact form. JWT tokens consist of three parts: a header, a payload, and a signature, separated by dots (`.`).\n\n2. **Header**: The first part of a JWT token that contains metadata about the type of token and the cryptographic algorithms used for signing the token. The header typically includes properties such as `alg` (algorithm) and `typ` (token type), encoded as a JSON object.\n\n3. **Payload**: The second part of a JWT token that contains the claims or assertions about the user and additional metadata. The payload includes standard claims (e.g., `iss`, `sub`, `exp`, `iat`) and custom claims defined by the application, encoded as a JSON object.\n\n4. **Signature**: The third part of a JWT token that is used to verify the integrity and authenticity of the token. The signature is generated by encoding the header and payload, appending a secret key known only to the server, and applying a cryptographic algorithm (e.g., HMAC, RSA) to produce a unique hash.\n\n5. **Claims**: Statements or assertions about a subject (e.g., user, client) encoded within the payload of a JWT token. Claims represent information such as user ID, role, permissions, expiration time, and other attributes relevant to authentication and authorization.\n\n6. **Issuer (iss)**: A claim in the JWT payload that identifies the issuer of the token, typically representing the identity provider or authentication service responsible for issuing the token.\n\n7. **Subject (sub)**: A claim in the JWT payload that identifies the subject of the token, typically representing the user or entity associated with the token.\n\n8. **Expiration Time (exp)**: A claim in the JWT payload that specifies the expiration time of the token, expressed as a Unix timestamp or a date/time in ISO 8601 format. After the expiration time, the token is considered invalid and should not be accepted for authentication.\n\n9. **Issued At (iat)**: A claim in the JWT payload that specifies the time at which the token was issued, expressed as a Unix timestamp or a date/time in ISO 8601 format.\n\n10. **Audience (aud)**: A claim in the JWT payload that specifies the intended audience or recipients of the token. The audience claim is optional and can be used to restrict the token's validity to specific clients or services.\n\n11. **Signing Algorithm**: The cryptographic algorithm used to generate the signature for a JWT token, ensuring its integrity and authenticity. Common signing algorithms include HMAC (HS256, HS384, HS512) for symmetric key cryptography and RSA (RS256, RS384, RS512) for asymmetric key cryptography.\n\n12. **Verification**: The process of verifying the integrity and authenticity of a JWT token by validating its signature using the appropriate cryptographic algorithm and verifying the claims within the payload.\n\n13. **Bearer Token**: A type of access token used for authentication and authorization in HTTP requests, typically transmitted in the `Authorization` header using the Bearer authentication scheme (`Bearer <token>`).\n\n14. **Stateless Authentication**: A authentication mechanism in which the server does not maintain session state or store user sessions. JWT tokens enable stateless authentication by containing all necessary information within the token itself, eliminating the need for server-side session storage.\n\n15. **Token Revocation**: The process of invalidating or revoking a JWT token before its expiration time, typically in response to security incidents, user logout, or token expiration. Token revocation mechanisms include blacklisting tokens, using short-lived tokens, and implementing token expiration policies.\n\nThese are some of the key terminologies and concepts associated with JWT, which are essential for understanding and implementing token-based authentication and authorization mechanisms in web applications and APIs.\n\n\n### Java Annotations terminologies and buzz words\n\nCertainly! Java annotations are metadata that provide data about a program but are not part of the program itself. Here are some key terminologies and buzzwords associated with Java annotations:\n\n1. **Annotation**: A form of metadata that provides data about a program, which can be embedded within Java source code, classes, methods, fields, or other program elements. Annotations are defined using the `@` symbol followed by the annotation name, optionally with parameters enclosed in parentheses.\n\n2. **Annotation Type**: A Java interface that defines the structure and semantics of an annotation. Annotation types are declared using the `@interface` keyword, and can include elements representing annotation parameters, default values, and retention policy.\n\n3. **Meta-Annotation**: Annotations that annotate other annotations, providing additional information or directives about the behavior and usage of annotated elements. Meta-annotations include built-in annotations like `@Retention`, `@Target`, `@Documented`, and `@Inherited`.\n\n4. **Retention Policy**: The policy that determines how long an annotation is retained or available at runtime. Java supports three retention policies: `SOURCE`, `CLASS`, and `RUNTIME`, specified using the `@Retention` meta-annotation.\n\n5. **Target**: The type of program elements to which an annotation can be applied. Java annotations can target classes, methods, fields, parameters, packages, and other program elements, specified using the `@Target` meta-annotation.\n\n6. **Documented**: A meta-annotation used to indicate that annotations with this meta-annotation should be documented by JavaDoc tools and included in generated API documentation.\n\n7. **Inherited**: A meta-annotation used to indicate that annotations with this meta-annotation should be inherited by subclasses of annotated classes.\n\n8. **Built-in Annotations**: Predefined annotations provided by the Java language or standard libraries for common tasks such as marking deprecated code (`@Deprecated`), suppressing warnings (`@SuppressWarnings`), and overriding superclass methods (`@Override`).\n\n9. **Custom Annotations**: User-defined annotations created by developers to add metadata and behaviors to their own Java classes and programs. Custom annotations are declared using annotation types and can be used to convey specific information or trigger specific actions at runtime.\n\n10. **Annotation Processor**: A tool or framework used to process and analyze annotations at compile time or runtime, typically to generate code, perform validation, or provide additional functionality based on annotated elements.\n\n11. **Annotation Processing API**: The Java API for processing annotations programmatically within annotation processors. The javax.annotation.processing package provides classes and interfaces for reading, writing, and processing annotations in Java programs.\n\n12. **Reflection**: The mechanism by which a Java program can introspect and manipulate its own structure, metadata, and behavior at runtime. Reflection APIs, such as java.lang.reflect package, enable runtime access to annotations, classes, methods, fields, and other program elements.\n\n13. **Spring Annotations**: Annotations provided by the Spring Framework for configuring and managing Spring-based applications. Spring annotations include `@Component`, `@Autowired`, `@RequestMapping`, `@Service`, `@Controller`, and many others used for dependency injection, MVC configuration, AOP, and more.\n\n14. **JPA Annotations**: Annotations provided by the Java Persistence API (JPA) for mapping Java objects to relational database tables and entities. JPA annotations include `@Entity`, `@Table`, `@Id`, `@GeneratedValue`, `@Column`, and others used for object-relational mapping (ORM) and database access.\n\n15. **JUnit Annotations**: Annotations provided by the JUnit testing framework for defining and controlling test cases and test execution. JUnit annotations include `@Test`, `@Before`, `@After`, `@BeforeClass`, `@AfterClass`, `@Ignore`, and others used for writing and running unit tests in Java.\n\nThese are some of the key terminologies and concepts associated with Java annotations, which are essential for understanding and using annotations effectively in Java programming for metadata-driven configurations, frameworks, and libraries.\n\n\n### Nodejs terminologies and buzz words\n\nCertainly! Node.js is a popular runtime environment for executing JavaScript code outside the web browser, typically on the server-side. Here are some key terminologies and buzzwords associated with Node.js:\n\n1. **Node.js**: An open-source, cross-platform JavaScript runtime environment built on Chrome's V8 JavaScript engine. Node.js enables developers to run JavaScript code outside the browser, allowing for server-side programming, networking, and file system operations.\n\n2. **Event-Driven Architecture**: A programming paradigm used in Node.js to handle I/O operations asynchronously and efficiently. Node.js uses an event loop and event-driven model to process requests and events non-blocking manner, allowing for high concurrency and scalability.\n\n3. **Non-blocking I/O**: A programming model used in Node.js to perform I/O operations asynchronously without blocking the execution of other code. Node.js uses non-blocking I/O APIs and event-driven architecture to handle I/O operations concurrently, improving performance and scalability.\n\n4. **Callback Function**: A function passed as an argument to another function and invoked asynchronously to handle the result of an asynchronous operation or event. Callback functions are commonly used in Node.js for handling I/O operations, event handling, and asynchronous tasks.\n\n5. **Package Manager**: A tool used to manage dependencies, libraries, and packages in Node.js projects. npm (Node Package Manager) is the default package manager for Node.js, providing commands for installing, updating, and removing packages from project dependencies.\n\n6. **npm (Node Package Manager)**: The default package manager for Node.js, used to install, manage, and publish packages and dependencies for Node.js projects. npm provides a vast repository of open-source packages and libraries for various purposes, including web development, utilities, frameworks, and tools.\n\n7. **Module**: A reusable piece of code or library encapsulated within a file or directory in Node.js. Node.js modules can be imported and exported using the `require()` and `module.exports` or `export` keywords, allowing for modular and maintainable code organization.\n\n8. **CommonJS**: A module system used in Node.js for defining and importing modules using the `require()` function and exporting modules using the `module.exports` object. CommonJS modules are synchronous and commonly used in Node.js for server-side JavaScript development.\n\n9. **ECMAScript Modules (ESM)**: A standardized module system introduced in ECMAScript 6 (ES6) for defining and importing modules using `import` and `export` keywords. Node.js supports ESM modules with the `.mjs` file extension and experimental support for `.js` files using `--experimental-modules` flag.\n\n10. **Express.js**: A minimalist web application framework for Node.js used for building web servers and APIs. Express.js provides a robust set of features and middleware for routing, request handling, middleware composition, and HTTP utility methods, making it popular for building web applications in Node.js.\n\n11. **Middleware**: Functions or modules used in Express.js to process HTTP requests and responses in the request-response cycle. Express middleware functions can modify request and response objects, execute additional logic, and pass control to the next middleware in the chain.\n\n12. **RESTful API**: A style of web API architecture based on Representational State Transfer (REST) principles for designing scalable and interoperable web services. Node.js is commonly used for building RESTful APIs using frameworks like Express.js and libraries like `express.Router()` for routing and resource handling.\n\n13. **WebSocket**: A communication protocol that provides full-duplex communication channels over a single TCP connection, allowing for real-time, bidirectional data transfer between clients and servers. Node.js supports WebSocket communication using libraries like `ws` and frameworks like Socket.io.\n\n14. **Asynchronous Module Definition (AMD)**: A module system and specification for defining and loading modules asynchronously in JavaScript environments, commonly used in client-side web development. Node.js does not natively support AMD modules but can be used with AMD-compatible loaders like RequireJS.\n\n15. **Cluster**: A module in Node.js used for managing multiple instances of a Node.js process to take advantage of multi-core CPU architectures and improve application performance and scalability. Node.js clusters enable parallel processing and load balancing of incoming requests across multiple workers.\n\nThese are some of the key terminologies and concepts associated with Node.js, which are essential for understanding and developing applications using Node.js runtime environment and JavaScript ecosystem.\n\n\n### PUG (formerly known as Jade) terminologies and buzz words\n\nAh, I see! In the context of Node.js, \"PUB\" likely refers to the popular template engine called Pug (formerly known as Jade). Pug is a templating engine for Node.js and browsers that allows you to write HTML markup in a concise and expressive manner using indentation and mixins. Here are some terminologies and buzzwords associated with Pug:\n\n1. **Template Engine**: A software component that allows you to generate dynamic HTML content by combining static markup with dynamic data. Template engines like Pug enable developers to write HTML templates with placeholders for variables and logic.\n\n2. **HTML Templating**: The process of creating HTML templates that can be dynamically populated with data from a server or application. HTML templating engines like Pug simplify the process of generating HTML content by providing syntax for placeholders, loops, conditionals, and includes.\n\n3. **Syntax**: The specific rules and conventions used to write markup and code in the Pug template language. Pug syntax is indentation-based, with support for mixins, interpolation, attributes, conditionals, loops, and more.\n\n4. **Indentation-based Syntax**: Pug uses indentation to define the structure and hierarchy of HTML elements, eliminating the need for closing tags and reducing visual clutter in template files.\n\n5. **Mixins**: Reusable code snippets or functions defined in Pug templates that can be included and invoked multiple times within the same or different templates. Mixins help to encapsulate and reuse common HTML patterns or components.\n\n6. **Interpolation**: The process of embedding dynamic values or expressions within Pug templates using interpolation syntax. Variables, JavaScript expressions, and function calls can be interpolated within Pug templates using the `#{}` syntax.\n\n7. **Attributes**: HTML attributes can be specified inline or using shorthand syntax in Pug templates, allowing for the dynamic generation of attribute values based on data or logic.\n\n8. **Conditionals**: Pug supports conditional rendering of HTML elements based on boolean expressions or data values using the `if`, `else if`, and `else` keywords.\n\n9. **Loops**: Pug provides syntax for iterating over arrays or collections and generating repetitive HTML content using loop constructs such as `each` and `for`.\n\n10. **Include**: Pug allows you to include and import external template files or partials into main template files using the `include` keyword, enabling modularization and code reuse.\n\n11. **Extends and Blocks**: Pug supports template inheritance through the `extends` and `block` keywords, allowing you to create base templates with placeholder blocks that can be overridden by child templates.\n\n12. **Filters**: Pug provides built-in filters for processing and transforming text content within templates, such as Markdown, CoffeeScript, and Sass filters.\n\n13. **Client-side Compilation**: Pug templates can be compiled and rendered on the client-side using JavaScript libraries like Pug.js, allowing for dynamic rendering of HTML content in web browsers.\n\n14. **Express.js Integration**: Pug is commonly used with the Express.js web framework for Node.js, providing seamless integration and support for rendering Pug templates in Express.js applications.\n\n15. **Performance**: Pug is known for its performance and efficiency, with features like template caching, precompilation, and minimal runtime overhead for rendering dynamic HTML content.\n\nThese are some of the key terminologies and concepts associated with Pug, the template engine used with Node.js for generating dynamic HTML content in web applications and server-side rendering.\n\n#### Please write few alternatives for Pug\n\nCertainly! While Pug (formerly known as Jade) is a popular choice for templating in Node.js applications, there are several alternatives available. Here are a few alternatives to Pug:\n\n1. **EJS (Embedded JavaScript)**: EJS is a simple templating language that lets you generate HTML markup with plain JavaScript embedded within `<% %>` tags. It is widely used and offers a familiar syntax for developers comfortable with JavaScript.\n\n2. **Handlebars**: Handlebars is a popular templating engine that provides a logic-less template syntax with support for expressions, helpers, partials, and block expressions. It emphasizes simplicity, performance, and flexibility.\n\n3. **Mustache**: Mustache is a logic-less template system available in multiple programming languages, including JavaScript. It offers a simple and intuitive syntax for generating HTML markup with placeholders that are replaced with data at runtime.\n\n4. **Nunjucks**: Nunjucks is a powerful templating engine inspired by Jinja2 (Python) and Twig (PHP). It provides features like template inheritance, macros, filters, and asynchronous rendering, making it suitable for building complex web applications.\n\n5. **Twig.js**: Twig.js is a JavaScript implementation of the Twig templating language, originally developed for PHP. It offers a concise and expressive syntax with support for template inheritance, block tags, filters, and internationalization.\n\n6. **React**: React is a JavaScript library for building user interfaces, but it can also be used for server-side rendering (SSR) with libraries like ReactDOMServer. JSX syntax allows you to write HTML-like markup directly in JavaScript files, offering component-based templating and reusability.\n\n7. **Nunjucks**: Another great choice, built on top of Jinja2 (Python) and Twig (PHP), offering template inheritance, block tags, filters, and more.\n\n8. **Handlebars**: A logic-less templating engine that focuses on semantic templates and an easy-to-understand syntax. It supports partials, helpers, and precompilation, making it suitable for building dynamic web applications.\n\n9. **Marko**: A fast, lightweight, and intuitive templating engine developed by eBay. It offers a syntax that closely resembles HTML, along with features like custom tags, reusable components, and server-side rendering.\n\n10. **Swig**: A robust, feature-rich templating engine inspired by Django's template syntax. It provides support for template inheritance, filters, loops, and conditionals, making it suitable for building dynamic web applications.\n\nThese are just a few alternatives to Pug, each with its own syntax, features, and strengths. The choice of templating engine depends on factors such as personal preference, project requirements, familiarity with the syntax, and ecosystem compatibility.\n\n### EJS terminologies and buzz words\n\nCertainly! EJS (Embedded JavaScript) is a simple templating language that lets you generate HTML markup with plain JavaScript embedded within `<% %>` tags. Here are some key terminologies and buzzwords associated with EJS:\n\n1. **Template Engine**: A software component that allows you to generate dynamic HTML content by combining static markup with dynamic data. EJS is a template engine for JavaScript that enables developers to embed JavaScript code directly within HTML templates.\n\n2. **Embedded JavaScript (EJS)**: The name of the templating language and file extension used for EJS templates. EJS templates typically have the `.ejs` file extension and contain HTML markup with embedded JavaScript code enclosed within `<% %>` tags.\n\n3. **Interpolation**: The process of embedding dynamic values or expressions within EJS templates using interpolation syntax. Variables, JavaScript expressions, and function calls can be interpolated within EJS templates using the `<%= %>` syntax.\n\n4. **Scriptlet**: A block of JavaScript code embedded within EJS templates using scriptlet tags `<% %>` without any output or interpolation. Scriptlets are used for executing logic, control flow statements, and function definitions within EJS templates.\n\n5. **Expression**: A JavaScript expression enclosed within `<%= %>` tags that is evaluated and inserted into the HTML output of the EJS template. Expressions can include variables, function calls, arithmetic operations, and conditional expressions.\n\n6. **Partial**: A reusable fragment of HTML or EJS code that can be included and rendered within multiple EJS templates. Partials allow for code reuse and modularization of template components, improving maintainability and readability of EJS templates.\n\n7. **Layout**: A master template or layout file that defines the overall structure, layout, and common elements of multiple EJS templates. Layouts typically include placeholders for dynamic content and partials, allowing for consistent styling and design across pages.\n\n8. **Control Flow**: The execution of JavaScript code based on conditional expressions, loops, and control statements within EJS templates. EJS provides syntax for control flow constructs such as `if`, `else`, `for`, `while`, and `switch` statements for dynamic content generation.\n\n9. **Escaping**: The process of converting special characters and HTML entities into their corresponding HTML escape sequences to prevent XSS (Cross-Site Scripting) attacks and maintain HTML validity. EJS automatically escapes HTML output by default, but you can disable escaping using `<%- %>` tags.\n\n10. **Delimiter**: The characters used to delimit JavaScript code blocks, expressions, and scriptlets within EJS templates. EJS supports configurable delimiters, allowing you to customize the opening and closing tags for scriptlets (`<% %>`) and expressions (`<%= %>`) as needed.\n\n11. **Rendering**: The process of compiling and executing EJS templates to generate HTML output dynamically based on the provided data and logic. EJS templates are rendered on the server-side or client-side using JavaScript runtime environments like Node.js.\n\n12. **Layout Engine**: The component responsible for parsing, compiling, and rendering EJS templates to generate HTML output. EJS templates are processed by the EJS layout engine, which evaluates embedded JavaScript code and interpolates dynamic values to produce the final HTML content.\n\n13. **Partial Rendering**: The process of rendering and including partials within EJS templates to compose complex views and user interfaces from smaller, reusable components. Partial rendering allows for modularization and encapsulation of UI components, promoting code reusability and maintainability.\n\n14. **Dynamic Content**: Content within EJS templates that is generated or modified dynamically based on data, user input, or application logic. EJS templates support dynamic content generation using JavaScript code, expressions, and variables embedded within the template markup.\n\n15. **Client-side Rendering**: The process of rendering EJS templates on the client-side using JavaScript frameworks or libraries like Angular, React, or Vue.js. EJS templates can be precompiled or rendered dynamically in the browser to generate HTML content dynamically on the client-side.\n\nThese are some of the key terminologies and concepts associated with EJS, the Embedded JavaScript templating language used for generating dynamic HTML content in web applications and server-side rendering with Node.js.\n\n\n### Angular terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Angular:\n\n1. **Angular**: Angular is a popular open-source web application framework maintained by Google and a community of developers. It is used for building dynamic single-page web applications (SPAs) and progressive web applications (PWAs).\n\n2. **Component-based Architecture**: Angular follows a component-based architecture where the UI is built using reusable and composable components. Each component encapsulates its own logic, template, and styling, making it easier to maintain and scale applications.\n\n3. **Module**: An Angular module is a mechanism for organizing the application into cohesive blocks of functionality. Modules can contain components, services, directives, and other Angular constructs. Angular applications typically have at least one root module (AppModule) and may have additional feature modules for organizing related functionality.\n\n4. **Component**: A building block of Angular applications, a component is a TypeScript class that defines the behavior and properties of a UI element. Components have associated templates (HTML markup) for rendering the UI and styles (CSS) for styling the UI elements.\n\n5. **Template**: An HTML markup associated with an Angular component that defines the structure of the UI. Angular templates can include data bindings, directives, interpolation, and event bindings to interact with component logic and data.\n\n6. **Data Binding**: Data binding is a mechanism for synchronizing data between the component class and its template. Angular supports one-way data binding (from component to template), two-way data binding (both component to template and template to component), and event binding (from template to component).\n\n7. **Directive**: Directives are markers on a DOM element that tell Angular to attach a specific behavior or functionality to that element. Angular provides built-in directives like ngIf, ngFor, and ngModel, as well as the ability to create custom directives for extending HTML functionality.\n\n8. **Service**: Angular services are reusable singleton objects that encapsulate business logic, data manipulation, or communication with external services. Services are typically injected into components or other services using Angular's dependency injection mechanism.\n\n9. **Dependency Injection (DI)**: Dependency injection is a design pattern used in Angular for managing dependencies between components and services. Angular's DI system allows you to declare dependencies in the constructor of a component or service and have them provided automatically by the Angular injector.\n\n10. **Router**: The Angular Router is a powerful tool for managing navigation and routing in Angular applications. It allows you to define routes, associate them with components, and handle navigation between different views or pages within the application.\n\n11. **HTTP Client**: Angular provides an HttpClient module for making HTTP requests to remote servers or APIs. It offers features like request and response interception, error handling, and observables-based API for handling asynchronous data.\n\n12. **Observables**: Observables are a key feature of Angular's reactive programming paradigm, based on the RxJS library. Observables represent streams of data that can be observed and manipulated asynchronously, enabling reactive and event-driven programming in Angular applications.\n\n13. **Forms**: Angular provides support for both template-driven forms and reactive forms for handling user input and validation. Template-driven forms use directives and two-way data binding, while reactive forms use reactive programming and a model-driven approach for managing form data and validation.\n\n14. **Lifecycle Hooks**: Angular components have a lifecycle with various stages such as creation, initialization, rendering, and destruction. Angular provides lifecycle hooks like ngOnInit, ngOnDestroy, ngOnChanges, etc., for executing custom logic at different stages of a component's lifecycle.\n\n15. **NgModule**: Angular modules (NgModule) are used to organize the application into cohesive units of functionality. They can contain components, directives, pipes, and services, and help in lazy loading and optimizing the application's performance.\n\nThese are some of the key terminologies and concepts associated with Angular, which are essential for understanding and developing applications using the Angular framework.\n\n\n### spring boot JPA terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Spring Boot and JPA (Java Persistence API):\n\n1. **Spring Boot**: Spring Boot is a popular open-source Java framework used for building stand-alone, production-grade Spring-based applications. It provides a streamlined development experience by offering auto-configuration, embedded servers, and opinionated defaults.\n\n2. **JPA (Java Persistence API)**: JPA is a Java specification for accessing, managing, and persisting data between Java objects and relational databases. It provides a high-level abstraction over database operations and simplifies the development of data access layers in Java applications.\n\n3. **Entity**: In JPA, an entity is a Java class that represents a persistent data entity mapped to a database table. Entities typically correspond to database records and contain fields (properties) that map to table columns.\n\n4. **Repository**: A repository in Spring Data JPA is an interface that provides CRUD (Create, Read, Update, Delete) operations for managing entities. Repositories extend the JpaRepository interface or its subinterfaces, which offer methods for common database operations.\n\n5. **EntityManager**: The EntityManager is a core interface in JPA used for managing entity instances and performing database operations. It provides methods for persisting, retrieving, updating, and deleting entities, as well as querying the database using JPQL (Java Persistence Query Language).\n\n6. **Persistence Context**: The Persistence Context is a cache-like environment managed by the EntityManager that stores managed entity instances during the lifecycle of a transaction. It tracks changes to entities and synchronizes them with the database upon transaction commit.\n\n7. **Primary Key (ID)**: In database terminology, a primary key is a unique identifier for each record in a table. In JPA entities, the primary key is typically represented by a field annotated with the @Id annotation.\n\n8. **Entity Manager Factory**: The EntityManagerFactory is a factory class responsible for creating EntityManager instances. It is typically configured with persistence unit information and database connection settings.\n\n9. **DTO (Data Transfer Object)**: DTOs are Java objects used for transferring data between different layers of an application, such as between the presentation layer and the service layer. In Spring Boot JPA applications, DTOs are often used to encapsulate data retrieved from entities and passed to the presentation layer.\n\n10. **JPQL (Java Persistence Query Language)**: JPQL is a query language used to perform database queries in JPA applications. It is similar to SQL (Structured Query Language) but operates on entity objects rather than database tables. JPQL queries are defined using entity and field names rather than table and column names.\n\n11. **Criteria API**: The Criteria API is a programmatic API in JPA for building dynamic, type-safe queries using Java code. It allows developers to construct query criteria and conditions using a fluent API, making queries more readable and maintainable.\n\n12. **Cascade Type**: Cascade type is an attribute of JPA associations (such as @OneToMany and @ManyToOne) that specifies how entity lifecycle operations (such as persist, merge, remove) should be cascaded from parent entities to associated child entities.\n\n13. **Lazy Loading**: Lazy loading is a fetching strategy in JPA where associated entities are loaded from the database only when accessed for the first time. This helps reduce memory usage and improve performance by avoiding unnecessary database queries.\n\n14. **Auditing**: Auditing is a feature in Spring Data JPA that automatically tracks and records changes to entity objects, such as creation time, modification time, and the user who made the changes. Auditing is commonly used for implementing audit trails and versioning in database applications.\n\n15. **Optimistic Locking**: Optimistic locking is a concurrency control mechanism in JPA where multiple transactions are allowed to access and modify the same data concurrently. It relies on versioning or timestamping to detect and prevent conflicting updates during transaction commits.\n\nThese are some of the key terminologies and concepts associated with Spring Boot and JPA, which are essential for understanding and developing data access layers in Java applications using the Spring framework.\n\n\n### Spring boot security terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Spring Boot Security:\n\n1. **Spring Security**: Spring Security is a powerful and customizable authentication and access control framework for securing Java-based applications. It provides comprehensive security features such as authentication, authorization, session management, and protection against common security vulnerabilities.\n\n2. **Authentication**: Authentication is the process of verifying the identity of a user or entity accessing an application. Spring Security supports various authentication mechanisms, including form-based authentication, HTTP basic authentication, OAuth, and LDAP authentication.\n\n3. **Authorization**: Authorization is the process of determining whether an authenticated user has permission to access a particular resource or perform a specific operation within the application. Spring Security supports role-based access control (RBAC), expression-based access control, and method-level security.\n\n4. **Principal**: In Spring Security, a Principal represents the currently authenticated user or entity accessing the application. Principals encapsulate information about the user's identity, such as username, authorities, and additional attributes.\n\n5. **Granted Authority**: A Granted Authority represents a permission or role granted to a user or entity within the application. Authorities are typically used for defining access control rules and determining whether a user has permission to perform certain actions.\n\n6. **UserDetailsService**: The UserDetailsService interface is used in Spring Security for retrieving user details (such as username, password, and authorities) from a data source, such as a database or LDAP directory. It is responsible for loading user information during authentication.\n\n7. **PasswordEncoder**: The PasswordEncoder interface is used in Spring Security for encrypting and validating passwords stored in the application's database or user repository. It provides secure hashing algorithms (such as BCrypt, SCrypt, or SHA) for protecting user passwords against unauthorized access.\n\n8. **AuthenticationProvider**: An AuthenticationProvider is a strategy interface in Spring Security for authenticating users based on their credentials. It is responsible for performing authentication logic, such as verifying passwords, validating tokens, or integrating with external authentication providers.\n\n9. **SecurityContext**: The SecurityContext is a thread-local container in Spring Security that holds the security-related information associated with the current user's session. It includes details such as the authenticated principal, authentication status, and granted authorities.\n\n10. **FilterChain**: A FilterChain is a series of filters in Spring Security that intercept and process incoming HTTP requests before they reach the application's endpoints. Filters are responsible for performing security checks, authentication, authorization, and other security-related tasks.\n\n11. **CSRF Protection**: Cross-Site Request Forgery (CSRF) protection is a security feature in Spring Security that prevents unauthorized users from submitting malicious requests on behalf of authenticated users. Spring Security provides built-in CSRF protection mechanisms, such as CSRF tokens and CSRF filters.\n\n12. **Session Management**: Session management is the process of managing user sessions and maintaining session state securely in web applications. Spring Security offers features for controlling session creation, tracking session activity, and implementing session fixation protection.\n\n13. **Remember Me Authentication**: Remember Me authentication is a feature in Spring Security that allows users to authenticate once and be remembered across multiple sessions without re-entering their credentials. It relies on persistent tokens or cookies to automatically authenticate users upon subsequent visits.\n\n14. **Access Control List (ACL)**: Access Control Lists (ACLs) are security mechanisms used in Spring Security for fine-grained access control at the domain object level. ACLs define permissions and restrictions on individual domain objects, allowing for complex authorization rules based on object ownership, roles, and permissions.\n\n15. **OAuth**: OAuth is an open standard for authorization that allows users to grant third-party applications limited access to their resources without sharing their credentials. Spring Security provides support for OAuth 2.0, enabling secure authentication and authorization in distributed systems and APIs.\n\nThese are some of the key terminologies and concepts associated with Spring Boot Security, which are essential for understanding and implementing robust security features in Java-based applications using the Spring framework.\n\n\n### Maven terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Maven:\n\n1. **Maven**: Maven is a powerful build automation tool used primarily for Java projects. It provides a standardized way to manage project dependencies, build processes, and project lifecycle management.\n\n2. **POM (Project Object Model)**: The POM is an XML file that contains configuration information and metadata for a Maven project. It defines project settings, dependencies, plugins, and build profiles.\n\n3. **Artifact**: An artifact is a file generated by Maven during the build process. It can be a JAR (Java Archive), WAR (Web Archive), EAR (Enterprise Archive), or any other type of file produced by the project build.\n\n4. **Dependency**: A dependency is a library or module that a Maven project relies on to build and run successfully. Dependencies are defined in the POM file and automatically downloaded from remote repositories by Maven.\n\n5. **Repository**: A repository is a location where Maven stores project dependencies and artifacts. Maven supports two types of repositories: local repositories (stored on the developer's machine) and remote repositories (hosted on a server and accessed over the internet).\n\n6. **Plugin**: A plugin is a software component that extends Maven's functionality by providing additional goals and tasks for the build process. Plugins are configured in the POM file and can perform various tasks such as compiling code, running tests, packaging artifacts, and deploying applications.\n\n7. **Lifecycle**: The Maven lifecycle defines a series of phases that represent the stages of the project build process. Each phase is associated with a set of goals, which are executed sequentially to perform tasks such as compilation, testing, packaging, and deployment.\n\n8. **Goal**: A goal is a specific task or operation performed by a Maven plugin during the build process. Goals are bound to specific phases of the build lifecycle and are executed in a predefined order.\n\n9. **Build Profile**: A build profile is a set of configuration settings that can be activated or deactivated based on certain conditions or environments. Profiles allow developers to customize the build process for different scenarios, such as development, testing, or production.\n\n10. **Transitive Dependency**: A transitive dependency is a dependency of a project's direct dependency. When Maven resolves dependencies, it automatically includes transitive dependencies to ensure that all required libraries are available for the project.\n\n11. **SNAPSHOT**: In Maven, a SNAPSHOT version indicates that the artifact is under active development and subject to frequent changes. SNAPSHOT versions are typically used for development and testing purposes and may not be stable or suitable for production use.\n\n12. **Repository Manager**: A repository manager is a server application used to manage and host repositories of Maven artifacts. Popular repository managers include Nexus, Artifactory, and Apache Archiva.\n\n13. **Dependency Management**: Dependency management is the process of managing project dependencies and ensuring that the correct versions of libraries are used throughout the project. Maven's dependency management features simplify the process of resolving and managing dependencies.\n\n14. **Parent POM**: A parent POM is an XML file that contains common configuration settings and dependencies shared by multiple Maven projects. It allows developers to centralize project configuration and enforce consistency across related projects.\n\n15. **Maven Coordinates**: Maven coordinates, also known as GAV coordinates, uniquely identify a Maven artifact within a repository. GAV stands for Group ID, Artifact ID, and Version, which together specify the artifact's group, name, and version.\n\nThese are some of the key terminologies and concepts associated with Maven, which are essential for understanding and effectively using Maven for building and managing Java projects.\n\n\n### Apache Ant terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Apache Ant:\n\n1. **Ant**: Apache Ant is a popular open-source build automation tool used primarily for Java projects. It is similar to Apache Maven but uses XML-based configuration files (build.xml) instead of POM files for defining build processes and tasks.\n\n2. **Build.xml**: The build.xml file is the main configuration file used by Apache Ant to define build targets, tasks, dependencies, and other build-related settings. It is written in XML and contains instructions for building, testing, packaging, and deploying the project.\n\n3. **Task**: A task is a unit of work or operation performed by Apache Ant during the build process. Tasks are defined in the build.xml file using XML elements and attributes, and they can perform various actions such as compiling code, copying files, running tests, and generating documentation.\n\n4. **Target**: A target is a collection of tasks that represent a specific build goal or action in Apache Ant. Targets are defined in the build.xml file and can depend on other targets, allowing for sequential execution of tasks and modularization of the build process.\n\n5. **Dependency**: A dependency is a file or resource required by a task or target in Apache Ant. Dependencies can be specified using <classpath>, <fileset>, or <path> elements in the build.xml file to include libraries, source files, configuration files, or other resources needed for the build.\n\n6. **Property**: A property is a named value or variable used to store configuration settings, file paths, or other data in Apache Ant. Properties can be defined in the build.xml file using <property> elements and referenced by tasks and targets to parameterize the build process.\n\n7. **Taskdef**: The taskdef task is used in Apache Ant to define custom tasks or extend the functionality of Ant by loading external task definitions from Java classes or JAR files. It allows developers to create reusable custom tasks to automate specific build tasks.\n\n8. **Antlib**: An Antlib is a library of reusable tasks and types packaged as a JAR file and designed for use with Apache Ant. Antlibs can contain custom tasks, types, and resources that extend the functionality of Ant and provide additional capabilities for building and managing projects.\n\n9. **Fileset**: A fileset is a collection of files or directories specified by patterns and used as input to tasks in Apache Ant. Filesets are defined using <fileset> elements in the build.xml file and allow developers to specify sets of files to include or exclude from a task's operation.\n\n10. **Filter**: A filter is a mechanism in Apache Ant for processing and modifying text files or resources during the build process. Filters can be applied to files using the <filter> task and are commonly used for performing text replacement, token substitution, or property expansion.\n\n11. **Condition**: A condition is a test or evaluation performed by Apache Ant to determine whether a task or target should be executed based on certain criteria. Conditions can be specified using <condition> elements in the build.xml file and are used to control the flow of the build process.\n\n12. **Macrodef**: The macrodef task is used in Apache Ant to define reusable macro tasks or parameterized sequences of tasks. Macrodefs allow developers to encapsulate common build logic into reusable components and simplify the build.xml file by reducing duplication.\n\n13. **Resource Collection**: A resource collection is a set of files, directories, or other resources specified by patterns and used as input to tasks in Apache Ant. Resource collections are defined using <resources> elements and can be combined, filtered, or modified to suit the needs of the build process.\n\n14. **Selector**: A selector is a mechanism in Apache Ant for selecting files or resources based on specific criteria such as file attributes, patterns, or conditions. Selectors can be used to include or exclude files from tasks like copying, archiving, or deleting files during the build process.\n\n15. **Extension Point**: An extension point is a predefined hook or marker in Apache Ant that allows developers to inject custom behavior or tasks into the build process. Extension points provide flexibility for extending and customizing the build.xml file with additional functionality or logic.\n\nThese are some of the key terminologies and concepts associated with Apache Ant, which are essential for understanding and effectively using Ant for automating build processes and managing Java projects.\n\n\n\n### Gradle terminologies and buzz words\n\nCertainly! Here are some key terminologies and buzzwords associated with Gradle:\n\n1. **Gradle**: Gradle is a powerful build automation tool and dependency management system used primarily for Java, Groovy, and Kotlin projects. It uses a Groovy-based domain-specific language (DSL) or Kotlin DSL for defining build scripts and tasks.\n\n2. **Build Script**: A build script is a Groovy or Kotlin script written in Gradle's DSL that defines the configuration, tasks, dependencies, and build logic for a project. Build scripts are typically named build.gradle and are located in the project's root directory.\n\n3. **Task**: A task is a unit of work or operation performed by Gradle during the build process. Tasks are defined in the build script and can perform various actions such as compiling code, running tests, packaging artifacts, and deploying applications.\n\n4. **Project**: A project is a logical unit of organization in Gradle that represents a software project or module. Projects can have dependencies, configurations, tasks, and other settings defined in their build scripts.\n\n5. **Dependency**: A dependency is a library or module required by a project to build and run successfully. Dependencies are declared in the build script and automatically downloaded from remote repositories by Gradle.\n\n6. **Plugin**: A plugin is a software component that extends Gradle's functionality by providing additional tasks, configurations, and capabilities for the build process. Gradle supports a wide range of plugins for various purposes, including Java, Groovy, Kotlin, Android, and more.\n\n7. **Configuration**: A configuration is a named set of dependencies and settings used by Gradle to resolve dependencies, compile code, and perform other build tasks. Gradle provides predefined configurations such as compile, runtime, testCompile, and testRuntime, which define different scopes for dependencies.\n\n8. **Repository**: A repository is a location where Gradle stores project dependencies and artifacts. Gradle supports two types of repositories: local repositories (stored on the developer's machine) and remote repositories (hosted on a server and accessed over the internet).\n\n9. **Build Lifecycle**: The build lifecycle in Gradle defines a series of phases or stages that represent the stages of the project build process. Each phase is associated with a set of tasks and dependencies that are executed sequentially to perform the build.\n\n10. **Convention over Configuration**: Gradle follows the convention over configuration principle, which means that it provides sensible defaults and conventions for project configuration and build settings. This allows developers to focus on writing code rather than configuring build scripts.\n\n11. **Multi-Project Build**: Gradle supports multi-project builds, where multiple projects or modules are organized into a hierarchical structure and built together as a single unit. Multi-project builds allow for better code reuse, dependency management, and modularization of large-scale projects.\n\n12. **Incremental Build**: Gradle's incremental build feature allows it to recompile, test, and package only the parts of the project that have changed since the last build. This helps improve build performance and reduces build times by avoiding unnecessary re-execution of tasks.\n\n13. **Gradle Wrapper**: The Gradle Wrapper is a tool provided by Gradle for generating and distributing a standalone script (gradlew or gradlew.bat) that can automatically download and install the correct version of Gradle for the project. The wrapper ensures that all developers use the same version of Gradle and simplifies project setup and distribution.\n\n14. **Custom Task**: Gradle allows developers to define custom tasks in the build script using Groovy or Kotlin. Custom tasks can perform any arbitrary action or operation required for the build process and can be integrated into the build lifecycle as needed.\n\n15. **Build Cache**: Gradle's build cache feature allows it to cache task outputs and build artifacts between builds. This helps improve build performance by avoiding redundant work and reusing previously cached results when possible.\n\nThese are some of the key terminologies and concepts associated with Gradle, which are essential for understanding and effectively using Gradle for building and managing software projects.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"aceaabca-2f10-40fa-acc4-357eb37372b5","order":0,"createdDate":{"$date":"2024-09-04T16:33:11.32Z"},"updatedDate":{"$date":"2024-09-04T16:33:11.32Z"},"uniqueId":"47381389-8bdf-40f3-a1db-2090cac7536a","__v":0}
{"_id":{"$oid":"66d9892961ec30d61c0c8d23"},"name":"Memory Map","heading":"Memory Map","smartContent":{"content":"JavaScript\n\tCore Concepts\n\t\tVariable\tA named storage location in memory used to hold data. Variables are declared using `var`, `let`, or `const`.\n\t\tData Types\tThe different types of values that can be represented in JavaScript, including `undefined`, `null`, `boolean`, `number`, `string`, `symbol`, and `object`.\n\t\tFunctions\tA block of code designed to perform a particular task. Functions can be declared using the `function` keyword or as arrow functions `() => {}`.\n\t\tObjects\tA collection of key-value pairs where keys are strings (or Symbols) and values can be any data type.\n\t\tArrays\tA special type of object used for storing ordered collections of values.\n\t\tScope\tThe context in which variables and functions are accessible. Includes global scope, function scope, and block scope.\n\n\tControl Flow\n\t\tConditionals\tStatements that perform different actions based on different conditions, using `if`, `else if`, and `else`.\n\t\tSwitch Statement\tA control flow statement that evaluates an expression and executes code blocks based on matching case labels.\n\t\tLoops\tStatements that execute a block of code repeatedly based on a condition, including `for`, `while`, and `do...while` loops.\n\t\t`break` and `continue`\tStatements used within loops to control the flow of execution, where `break` exits the loop and `continue` skips to the next iteration.\n\n\tObject-Oriented Programming\n\t\tClasses\tA blueprint for creating objects with shared properties and methods. Introduced in ES6 using the `class` keyword.\n\t\tInheritance\tA mechanism where one class inherits properties and methods from another class.\n\t\tEncapsulation\tThe bundling of data and methods that operate on that data into a single unit or class.\n\t\tPolymorphism\tThe ability of different classes to be treated as instances of the same class through a common interface.\n\t\t\n\tClosure\n\t\tIn JavaScript, a closure is a feature where a function retains access to its lexical scope even after the function has finished executing. This means that a function defined inside another function has access to the variables and parameters of the outer function, even when the outer function has returned.\n\n\tAsynchronous Programming\n\t\tCallbacks\tA function passed as an argument to another function, which is invoked once the asynchronous operation completes.\n\t\tPromises\tAn object representing the eventual completion or failure of an asynchronous operation. Promises have `then()`, `catch()`, and `finally()` methods.\n\t\t`async`/`await`\tSyntax for working with asynchronous code, allowing asynchronous code to be written in a synchronous style.\n\n\tModules\n\t\tCommonJS\tA module system used in Node.js where modules are loaded using `require()` and exported using `module.exports`.\n\t\tES Modules (ESM)\tA standardized module system where modules are imported using `import` and exported using `export`.\n\n\tError Handling\n\t\t`try...catch`\tA construct used to handle exceptions. The `try` block contains code that may throw an error, and the `catch` block contains code that handles the error.\n\t\tError Object\tA built-in object that represents an error. Includes properties such as `name`, `message`, and `stack`.\n\n\tEvents\n\t\tEvent Listeners\tA function that is executed when a specific event occurs, such as a user interaction or an API response.\n\t\tEvent Bubbling\tThe process by which events propagate from the innermost element to the outer elements.\n\t\tEvent Delegation\tA technique where a single event listener is added to a parent element to manage events for multiple child elements.\n\n\tDOM Manipulation\n\t\tDocument Object Model (DOM)\tA hierarchical representation of the web page structure. JavaScript can interact with the DOM to modify content and structure.\n\t\t`querySelector()` and `querySelectorAll()`\tMethods used to select elements from the DOM based on CSS selectors.\n\t\t`getElementById()` and `getElementsByClassName()`\tMethods used to select elements by their ID or class name.\n\n\tES6+ Features\n\t\tArrow Functions\tA concise syntax for writing functions using `() => {}`.\n\t\tTemplate Literals\tA way to create strings with embedded expressions using backticks \\`` `\\`.\n\t\tDestructuring Assignment\tA syntax for unpacking values from arrays or properties from objects into distinct variables.\n\t\tSpread and Rest Operators\tThe spread operator (`...`) expands elements of an iterable, and the rest operator collects multiple elements into an array.\n\n\tEvent Loop\n\t\tEvent Queue\tA queue that stores events and their associated callbacks to be processed by the event loop.\n\t\tMicrotasks and Macrotasks\tTwo types of tasks in the event loop. Microtasks are handled before macrotasks, and include promises and mutation observers.\n\n\tWeb APIs\n\t\tFetch API\tA modern API for making network requests similar to `XMLHttpRequest`, but with a simpler and more powerful interface.\n\t\tXMLHttpRequest\tA legacy API for making network requests. It is less powerful compared to the Fetch API but still widely used.\n\n\tFrameworks and Libraries\n\t\tReact\tA JavaScript library for building user interfaces, focusing on component-based architecture and efficient rendering.\n\t\tAngular\tA front-end framework for building single-page applications, featuring two-way data binding and dependency injection.\n\t\tVue.js\tA progressive framework for building user interfaces with an emphasis on simplicity and flexibility.\n\n\tTesting\n\t\tJest\tA testing framework developed by Facebook, with built-in support for mocking and assertion.\n\t\tMocha\tA testing framework that provides a flexible and customizable environment for writing tests.\n\t\tChai\tA BDD/TDD assertion library used in combination with testing frameworks like Mocha.\n\n\tDevelopment Tools\n\t\tBabel\tA JavaScript compiler that converts ES6+ code into a backwards-compatible version of JavaScript.\n\t\tWebpack\tA module bundler that packages JavaScript files and their dependencies into a single bundle.\n\t\tESLint\tA tool for identifying and reporting on patterns found in JavaScript code, helping to maintain code quality and consistency.\n\t\t\n\t","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b4915200-5048-4736-8b51-f25224e48a90","order":0,"createdDate":{"$date":"2024-09-05T10:34:17.926Z"},"updatedDate":{"$date":"2024-09-20T19:18:36.549Z"},"uniqueId":"51b77932-3a2c-46c9-89e6-10ca6f77a002","__v":0}
{"_id":{"$oid":"66d98aa761ec30d61c0cc3cb"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In JavaScript, a **closure** is a feature where a function retains access to its lexical scope even after the function has finished executing. This means that a function defined inside another function has access to the variables and parameters of the outer function, even when the outer function has returned.\n\n### Key Points about Closures:\n\n1. **Function Inside Function**: A closure is created when a function is defined inside another function and the inner function retains access to the variables of the outer function.\n\n2. **Lexical Scope**: Closures preserve the lexical scope, which means the inner function has access to the variables of the outer function at the time the inner function was defined, not when it is executed.\n\n3. **Encapsulation**: Closures allow for data encapsulation and hiding of implementation details. Variables in the outer function are not accessible from the global scope but are accessible from the inner function.\n\n4. **Memory Management**: Closures help manage memory by allowing functions to maintain state without relying on global variables.\n\n### Importance of Closures:\n\n1. **Data Privacy**: Closures enable data encapsulation, allowing private variables and functions to be hidden from the outside scope while still being accessible to inner functions.\n\n2. **Factory Functions**: Closures can be used to create factory functions that generate other functions with their own private state.\n\n3. **Event Handlers and Callbacks**: Closures are useful in asynchronous programming, such as handling events or callbacks, where you want to preserve some state across multiple invocations.\n\n4. **Functional Programming**: Closures are a fundamental concept in functional programming, allowing the creation of higher-order functions and functional patterns.\n\n### Example of a Closure:\n\n```javascript\nfunction createCounter() {\n    let count = 0; // `count` is a private variable\n\n    return function() {\n        count += 1;\n        return count;\n    };\n}\n\nconst counter = createCounter();\n\nconsole.log(counter()); // Output: 1\nconsole.log(counter()); // Output: 2\nconsole.log(counter()); // Output: 3\n```\n\nIn this example:\n- `createCounter` is an outer function that declares a private variable `count`.\n- The inner function, which is returned from `createCounter`, forms a closure and retains access to the `count` variable.\n- Each call to `counter()` increments the `count` and returns the new value, demonstrating how the inner function retains access to and modifies the `count` variable even after `createCounter` has finished executing.\n\nClosures are crucial in JavaScript for managing state, creating private variables, and implementing various design patterns effectively.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"eb544661-96fc-443a-96e5-678cd317a36e","order":0,"createdDate":{"$date":"2024-09-05T10:40:39.908Z"},"updatedDate":{"$date":"2024-09-05T10:40:39.908Z"},"uniqueId":"67a6dfca-ee98-4c6a-978a-cfd59ae3da31","__v":0}
{"_id":{"$oid":"66d98faf61ec30d61c0d1e7f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In JavaScript, `var`, `let`, and `const` are keywords used for variable declaration, but they have different scopes, hoisting behaviors, and reassignability.\n\n### `var`\n\n- **Scope**: Function-scoped or globally-scoped if declared outside a function. This means that a `var` variable is accessible throughout the function in which it is declared or globally if declared outside any function.\n- **Hoisting**: Variables declared with `var` are hoisted to the top of their scope and initialized with `undefined`. This means that you can reference the variable before its declaration in the code.\n- **Reassignable**: Variables declared with `var` can be reassigned.\n\n#### Example:\n```javascript\nfunction example() {\n    console.log(x); // undefined (due to hoisting)\n    var x = 5;\n    console.log(x); // 5\n}\n```\n\n### `let`\n\n- **Scope**: Block-scoped. This means that a `let` variable is only accessible within the block (enclosed by `{}`) where it is declared.\n- **Hoisting**: Variables declared with `let` are hoisted but not initialized. Accessing them before the declaration in their block will result in a `ReferenceError`. This behavior is known as the \"temporal dead zone.\"\n- **Reassignable**: Variables declared with `let` can be reassigned.\n\n#### Example:\n```javascript\nfunction example() {\n    // console.log(y); // ReferenceError (temporal dead zone)\n    let y = 10;\n    console.log(y); // 10\n}\n```\n\n### `const`\n\n- **Scope**: Block-scoped, similar to `let`. This means that a `const` variable is only accessible within the block where it is declared.\n- **Hoisting**: Variables declared with `const` are hoisted but not initialized. Accessing them before the declaration in their block will result in a `ReferenceError`. This behavior is also part of the \"temporal dead zone.\"\n- **Reassignable**: Variables declared with `const` cannot be reassigned. However, this only applies to the variable binding itself; if the `const` variable holds an object or an array, the properties or elements of the object/array can still be modified.\n\n#### Example:\n```javascript\nfunction example() {\n    const z = 20;\n    console.log(z); // 20\n    // z = 30; // TypeError: Assignment to constant variable\n    \n    const obj = { key: 'value' };\n    obj.key = 'new value'; // Allowed (object properties can be modified)\n    console.log(obj.key); // 'new value'\n}\n```\n\n### Summary\n\n- Use `var` when you need a variable that is function-scoped or global-scoped and when you are okay with the variable being hoisted.\n- Use `let` when you need block-scoping and expect to reassign the variable.\n- Use `const` when you need block-scoping and do not intend to reassign the variable.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"36dc0509-2970-4f95-a645-ae796d3a4fb5","order":0,"createdDate":{"$date":"2024-09-05T11:02:07.369Z"},"updatedDate":{"$date":"2024-09-05T11:02:07.369Z"},"uniqueId":"138ca570-5f16-47cf-913c-6f9ad45fe20d","__v":0}
{"_id":{"$oid":"66d993e061ec30d61c0df645"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Sure! Here’s a list of key CSS and CSS3 terminologies categorized into meaningful categories:\n\n### **Selectors and Properties**\n- **Selector**: A pattern used to select elements to apply styles.\n- **Pseudo-class**: A keyword added to selectors to specify a special state of an element (e.g., `:hover`, `:focus`).\n- **Pseudo-element**: A keyword added to selectors to style specific parts of an element (e.g., `::before`, `::after`).\n- **Property**: An attribute used to define the style of an element (e.g., `color`, `font-size`).\n\n### **Box Model**\n- **Box Model**: A concept that describes the rectangular boxes generated for elements and includes margins, borders, padding, and content.\n- **Margin**: The space outside the border of an element.\n- **Border**: The line surrounding the padding of an element.\n- **Padding**: The space between the element’s content and its border.\n- **Content**: The actual content of the element, such as text or images.\n\n### **Layout and Positioning**\n- **Flexbox**: A layout module that provides a more efficient way to align and distribute space among items in a container.\n- **Grid**: A two-dimensional layout system for creating complex web layouts using rows and columns.\n- **Positioning**: Controls the positioning of an element (e.g., `static`, `relative`, `absolute`, `fixed`, `sticky`).\n- **Float**: A property that allows elements to be pushed to the left or right of their container, allowing other content to flow around them.\n\n### **Typography and Text**\n- **Font-family**: Specifies the typeface for text.\n- **Font-size**: Sets the size of the font.\n- **Line-height**: Defines the amount of space between lines of text.\n- **Text-align**: Aligns text horizontally (e.g., `left`, `right`, `center`, `justify`).\n\n### **Colors and Backgrounds**\n- **Color**: Defines the color of text or other elements.\n- **Background**: Sets the background of an element, including color, image, and position.\n- **Opacity**: Defines the transparency level of an element (e.g., `0` for fully transparent, `1` for fully opaque).\n\n### **Transitions and Animations**\n- **Transition**: A property that allows changes in CSS property values to occur smoothly over a specified duration.\n- **Animation**: A property that allows you to create complex animations with keyframes and control the timing and behavior of animations.\n\n### **Responsive Design**\n- **Media Query**: A feature that allows different styles to be applied based on device characteristics like screen size, resolution, or orientation.\n- **Viewport**: The visible area of a web page on a device, often controlled with meta tags for responsive design.\n\n### **Advanced Features**\n- **CSS Variables (Custom Properties)**: Variables defined in CSS that allow for reusable and dynamically changeable values.\n- **Calc()**: A function that allows mathematical expressions to be used for property values.\n- **Grid Template Areas**: Defines grid areas using named grid lines or areas for more complex layouts.\n- **Clamp()**: A function that sets a value within a defined range, useful for responsive design.\n\nThese categories and terminologies provide a broad overview of CSS and CSS3 features, helping to understand and use styles effectively.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b9dddc1e-13d7-48f5-8be6-d31af4367590","order":0,"createdDate":{"$date":"2024-09-05T11:20:00.026Z"},"updatedDate":{"$date":"2024-09-05T11:20:00.026Z"},"uniqueId":"e4572765-c2ea-4c16-b370-c60440843391","__v":0}
{"_id":{"$oid":"66d99ca961ec30d61c0e1a73"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s the output breakdown:\n\n1. **`c` Calculation:**\n   - The `for` loop iterates from `i = 1` to `i = 10`, inclusive. \n   - The variable `c` accumulates the sum of all values of `i` from 1 to 10.\n   - The sum of integers from 1 to 10 is \\( 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55 \\).\n   - Therefore, `console.log(c);` will output `55`.\n\n2. **`i` Value:**\n   - Since `var` has function scope (or global scope if not in a function), the variable `i` is accessible outside of the loop.\n   - After the loop completes, `i` will be `11` because the loop condition `i <= 10` fails when `i` becomes `11`.\n\nSo, the output of the code will be:\n\n```\n55\n11\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2af3e249-4104-4170-85ad-6c31c1a8a833","order":0,"createdDate":{"$date":"2024-09-05T11:57:29.11Z"},"updatedDate":{"$date":"2024-09-05T11:57:29.11Z"},"uniqueId":"221330de-4dce-4467-b515-d84361260baf","__v":0}
{"_id":{"$oid":"66d99dd661ec30d61c0e3e5f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The **Event Loop** in JavaScript is a mechanism that handles asynchronous operations. It allows JavaScript to perform non-blocking tasks despite being single-threaded. \n\nJavaScript executes code in a **call stack**, but when it encounters asynchronous operations (like I/O tasks, timers, or promises), these are handled by the **event loop**, which continuously checks the **message queue** for pending tasks. Once the stack is clear, the event loop moves tasks from the queue to the stack for execution. \n\nThis enables JavaScript to handle asynchronous code without blocking the main thread.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"97f4e068-60a1-454b-a648-a32829d15733","order":0,"createdDate":{"$date":"2024-09-05T12:02:30.543Z"},"updatedDate":{"$date":"2024-09-05T12:02:30.543Z"},"uniqueId":"3b7656fa-9c49-4a4b-b8cf-a53df53d582e","__v":0}
{"_id":{"$oid":"66d99fcd61ec30d61c0e6225"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Node.js\n    Core Concepts\n        Event Loop\tThe mechanism that handles asynchronous operations in Node.js, allowing non-blocking I/O operations.\n        Asynchronous Programming\tA programming model that enables operations to run in the background and continue execution without waiting for the operation to complete.\n        Non-blocking I/O\tA feature that allows Node.js to handle multiple I/O operations concurrently without blocking the execution of other operations.\n        Callback Functions\tA function passed as an argument to another function, which is executed once a task is completed.\n        Streams\tA sequence of data that can be read from or written to in a continuous manner. Includes readable, writable, and transform streams.\n\n    Modules\n        CommonJS\tA module system used by Node.js where modules are loaded using `require()` and exported using `module.exports`.\n        ES Modules (ESM)\tA module system based on ECMAScript standards, where modules are imported using `import` and exported using `export`.\n        `require()`\tA function used to load and use modules in CommonJS format.\n        `module.exports`\tAn object used to export functions, objects, or values from a module in CommonJS.\n        `import`\tAn ES Module syntax used to load and use modules.\n        `export`\tAn ES Module syntax used to define what a module exports.\n\n    Package Management\n        npm (Node Package Manager)\tThe default package manager for Node.js, used to install and manage Node.js packages.\n        `package.json`\tA file that holds metadata about the project and its dependencies. Includes scripts, dependencies, and project configuration.\n        Dependencies\tExternal libraries or modules required by a project. Listed in the `dependencies` or `devDependencies` sections of `package.json`.\n        `node_modules`\tDirectory where installed Node.js packages are stored.\n\n    Web Server\n        HTTP Module\tA core Node.js module that allows for the creation of HTTP servers and clients.\n        Express\tA popular web application framework for Node.js that simplifies routing, middleware, and handling HTTP requests and responses.\n        Middleware\tFunctions in Express that process requests before they reach the route handlers. They can modify request and response objects, end requests, or call the next middleware function.\n\n    Error Handling\n        `try...catch`\tAn error handling construct in JavaScript used to catch and handle exceptions that occur during execution.\n        Error Object\tAn object representing an error that contains properties such as `name`, `message`, and `stack`.\n\n    Debugging\n        `console.log()`\tA function used for logging messages to the console for debugging purposes.\n        Node Inspector\tA tool that provides debugging capabilities for Node.js applications. Can be used through the command line or with integrated development environments.\n\n    Development Tools\n        Nodemon\tA development tool that automatically restarts a Node.js application when file changes are detected.\n        PM2\tA process manager for Node.js applications that handles process management, load balancing, and monitoring.\n\n    Networking\n        TCP/UDP Protocols\tProtocols for low-level network communication. Node.js provides modules like `net` for TCP and `dgram` for UDP.\n        WebSocket\tA protocol for full-duplex communication channels over a single TCP connection. Node.js supports WebSocket via modules like `ws`.\n\n    Security\n        Environment Variables\tA way to securely store configuration settings and sensitive information. Managed via `process.env`.\n        Authentication and Authorization\tMechanisms to verify user identity and control access to resources. Commonly implemented using libraries such as `passport`.\n\n    File System\n        `fs` Module\tA core Node.js module that provides file system operations such as reading and writing files.\n        Asynchronous File Operations\tFile operations that do not block the execution of other code, using methods like `fs.readFile()` and `fs.writeFile()`.\n\n    Database Connectivity\n        MongoDB\tA NoSQL database often used with Node.js. Node.js provides libraries like `mongoose` for interacting with MongoDB.\n        SQL Databases\tNode.js can connect to SQL databases using libraries such as `sequelize` or `knex`.\n\n    Frameworks and Libraries\n        Koa\tA lightweight web framework for Node.js, created by the same team that built Express, focusing on modern JavaScript features.\n        Hapi\tA rich framework for building applications and services with a focus on configuration-driven development.\n\n    Testing\n        Mocha\tA testing framework for Node.js that supports various assertion libraries and test reporting.\n        Chai\tA BDD/TDD assertion library for Node.js that can be used with Mocha for writing tests.\n        Jest\tA testing framework developed by Facebook with a focus on simplicity and support for mocking.\n\n    Deployment\n        Docker\tA tool for containerizing Node.js applications, allowing them to be run in isolated environments.\n        Heroku\tA cloud platform that supports deploying Node.js applications with built-in scaling and monitoring features.","textOutputType":"skeleton","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1a74986b-c798-42b5-8f5a-c9ee86c9ff91","order":0,"createdDate":{"$date":"2024-09-05T12:10:53.239Z"},"updatedDate":{"$date":"2024-09-05T12:10:53.239Z"},"uniqueId":"0654e4ea-82e3-4c41-8d36-85b9b3eb5fba","__v":0}
{"_id":{"$oid":"66d9bb9461ec30d61c0ecdd1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The Event Loop in JavaScript is responsible for managing asynchronous tasks by continuously monitoring and handling the execution of code, including callbacks and promises. Here’s how it works:\n\n1. **Call Stack**: JavaScript executes synchronous code in the Call Stack. Functions are pushed onto the stack and executed one by one, with the topmost function being executed first. Once a function completes, it is popped off the stack.\n\n2. **Web APIs**: Asynchronous operations like timers, network requests (e.g., `fetch`), or DOM events are handled by Web APIs (or Node.js APIs in the case of Node.js). These APIs are outside the Call Stack.\n\n3. **Task Queue (Callback Queue)**: When an asynchronous operation completes (e.g., an HTTP request finishes), its associated callback function is placed in the Task Queue.\n\n4. **Event Loop**: The Event Loop continuously checks if the Call Stack is empty. If the stack is empty, the Event Loop picks the first task from the Task Queue and pushes it onto the Call Stack for execution.\n\n5. **Microtask Queue**: Promises and mutation observers use the Microtask Queue, which has higher priority than the Task Queue. When the Call Stack is empty, the Event Loop processes tasks in the Microtask Queue before the Task Queue.\n\n### Process:\n- Synchronous code runs first.\n- Asynchronous tasks are offloaded to Web APIs.\n- When they complete, their callbacks are queued.\n- The Event Loop pushes queued callbacks to the stack when it’s free.\n- Microtasks (e.g., resolved promises) are prioritized over tasks.\n\nThis process allows JavaScript to handle non-blocking operations efficiently, even though it's single-threaded.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"db6e4ec3-3e7d-4889-a4dd-a82808e019f7","order":0,"createdDate":{"$date":"2024-09-05T14:09:24.187Z"},"updatedDate":{"$date":"2024-09-05T14:09:24.187Z"},"uniqueId":"c9f5bd94-c752-42a8-afe8-52f3367ec304","__v":0}
{"_id":{"$oid":"66d9bc3961ec30d61c0ef1c4"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"When we say **JavaScript is single-threaded**, it means that JavaScript can execute one operation (or one piece of code) at a time in a single sequence. It uses a **single Call Stack** to execute code, meaning only one task can be processed at any given moment.\n\nIn simpler terms:\n- **Single Call Stack**: JavaScript runs on a single thread, so it processes one statement at a time in a linear order.\n- **Concurrency via Event Loop**: Despite being single-threaded, JavaScript can handle asynchronous tasks (like timers, network requests) using the Event Loop without blocking the execution of other code.\n\nThus, JavaScript can appear to handle multiple tasks (asynchronous operations) simultaneously, but in reality, it is just managing them sequentially.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1cc61751-fc8c-4d82-aae3-6707ffb9564e","order":0,"createdDate":{"$date":"2024-09-05T14:12:09.399Z"},"updatedDate":{"$date":"2024-09-05T14:12:09.399Z"},"uniqueId":"7a7971d9-44be-4501-8de8-cc37b5af53af","__v":0}
{"_id":{"$oid":"66d9bcf461ec30d61c0f1654"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"JavaScript's garbage collection (GC) happens automatically and is based on memory management to free up space occupied by objects that are no longer needed. JavaScript engines, like V8 in Chrome, use a **Mark-and-Sweep** algorithm to perform garbage collection.\n\n### Steps in the Garbage Collection process:\n\n1. **Root Objects**: JavaScript starts with \"roots,\" such as global variables and the current execution context. These objects are always considered \"reachable\" and are not eligible for garbage collection.\n\n2. **Marking Phase**: \n   - The garbage collector starts from the root objects and traverses all references (objects, functions, closures) that are accessible (directly or indirectly) from these roots.\n   - Objects that are referenced are \"marked\" as reachable.\n\n3. **Sweep Phase**:\n   - After marking, all unmarked objects (those that are no longer reachable) are considered \"garbage.\"\n   - The garbage collector then sweeps and frees up memory associated with these unreachable objects.\n\n4. **Compaction (optional)**: In some cases, after sweeping, the garbage collector may compact the memory by rearranging the objects to reduce fragmentation.\n\nJavaScript's garbage collection process runs automatically and at regular intervals, so developers typically don't have to manage memory manually.\n\n### Key Points:\n- **Reachability** is the primary criteria for GC.\n- Memory management is automatic, meaning developers don't have to explicitly free memory.\n- **Weak references** (e.g., `WeakMap`, `WeakSet`) allow references to objects without preventing garbage collection of those objects.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c2b30fff-f928-4e38-89dc-de6569aa9f7a","order":0,"createdDate":{"$date":"2024-09-05T14:15:16.094Z"},"updatedDate":{"$date":"2024-09-05T14:15:16.094Z"},"uniqueId":"5935957c-b291-448b-b4b5-fcf2d32df40a","__v":0}
{"_id":{"$oid":"66d9c2ca61ec30d61c0f6008"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The call stack in JavaScript is a data structure used by the JavaScript engine to keep track of function calls and execution contexts. It operates in a Last In, First Out (LIFO) manner, meaning the most recently added function call is the first to be executed and removed.\n\n### How the Call Stack Works:\n\n1. **Function Call**:\n   - When a function is called, a new \"stack frame\" is created and pushed onto the call stack.\n   - This stack frame contains information about the function's execution context, such as local variables and the function's state.\n\n2. **Function Execution**:\n   - The JavaScript engine executes the function at the top of the stack.\n   - If the function calls another function, a new stack frame for the called function is pushed onto the stack.\n\n3. **Return**:\n   - When the function completes its execution, its stack frame is popped off the stack.\n   - Control returns to the function that was on top of the stack before the current function was called.\n\n4. **Stack Overflow**:\n   - If the call stack grows too large (e.g., due to infinite recursion or excessively deep function calls), it can result in a \"stack overflow\" error, where the stack exceeds its limit.\n\n### Example:\n\n```javascript\nfunction first() {\n  console.log('First');\n  second();\n}\n\nfunction second() {\n  console.log('Second');\n  third();\n}\n\nfunction third() {\n  console.log('Third');\n}\n\nfirst();\n```\n\n### Call Stack During Execution:\n\n1. `first()` is called → **`first`** is pushed onto the stack.\n2. `console.log('First')` is executed.\n3. `second()` is called from `first()` → **`second`** is pushed onto the stack.\n4. `console.log('Second')` is executed.\n5. `third()` is called from `second()` → **`third`** is pushed onto the stack.\n6. `console.log('Third')` is executed.\n7. `third()` completes → **`third`** is popped from the stack.\n8. `second()` completes → **`second`** is popped from the stack.\n9. `first()` completes → **`first`** is popped from the stack.\n\nThe call stack ensures that functions are executed in the order they are called and returns control to the correct function upon completion.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"80d39a40-91a9-48a8-a24a-8032f4f83a94","order":0,"createdDate":{"$date":"2024-09-05T14:40:10.041Z"},"updatedDate":{"$date":"2024-09-05T14:40:10.041Z"},"uniqueId":"24adf8e3-2f0f-4efb-be2d-f6a775d63989","__v":0}
{"_id":{"$oid":"66d9c37861ec30d61c0f9700"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In JavaScript, the **Task Queue** (also known as the **Callback Queue** or **Message Queue**) is a data structure that holds asynchronous tasks, such as event handlers, network responses, and timers, that are waiting to be executed. The Task Queue works alongside the Call Stack and is an essential part of JavaScript's concurrency model.\n\n### How the Task Queue Works:\n\n1. **Event Loop**:\n   - The Event Loop continuously checks the Call Stack and the Task Queue.\n   - If the Call Stack is empty, the Event Loop takes the first task from the Task Queue and pushes it onto the Call Stack for execution.\n\n2. **Asynchronous Tasks**:\n   - When asynchronous operations like timers (`setTimeout`), network requests, or events complete, their callbacks are placed in the Task Queue.\n   - These tasks remain in the Task Queue until the Call Stack is empty, allowing the Event Loop to process them.\n\n3. **Task Scheduling**:\n   - JavaScript's concurrency model ensures that tasks are processed one at a time, in the order they were added to the Task Queue.\n   - This prevents race conditions and ensures that tasks are executed in a predictable manner.\n\n### Example:\n\n```javascript\nconsole.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout callback');\n}, 1000);\n\nconsole.log('End');\n```\n\n### Task Queue During Execution:\n\n1. `console.log('Start')` is executed and logged.\n2. `setTimeout` sets up a timer, and the callback is added to the Task Queue after 1000 milliseconds.\n3. `console.log('End')` is executed and logged.\n4. After 1000 milliseconds, the callback function is moved from the Task Queue to the Call Stack.\n5. The callback function `console.log('Timeout callback')` is executed and logged.\n\n### Key Points:\n\n- **Task Queue**: Holds callbacks from asynchronous operations, waiting to be processed.\n- **Event Loop**: Manages the Task Queue and Call Stack, ensuring tasks are executed in order.\n- **Concurrency Model**: JavaScript is single-threaded but uses the Task Queue and Event Loop to handle asynchronous tasks.\n\nThe Task Queue allows JavaScript to handle asynchronous events efficiently while maintaining a single-threaded execution model.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"fefff1f1-275b-424c-882b-f2c91b142b68","order":0,"createdDate":{"$date":"2024-09-05T14:43:04.65Z"},"updatedDate":{"$date":"2024-09-05T14:43:04.65Z"},"uniqueId":"6991b094-54fe-4f1f-823f-cf7169df53c8","__v":0}
{"_id":{"$oid":"66d9c40661ec30d61c0fa90e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The **Micro Task Queue** (also known as the **Job Queue** or **Microtask Queue**) is a special queue in JavaScript that handles microtasks, which are tasks that need to be executed after the currently executing script but before any rendering or I/O tasks. Microtasks are typically used for handling promises and other tasks that need to be executed as soon as possible, before the next event loop tick.\n\n### How the Micro Task Queue Works:\n\n1. **Execution Order**:\n   - The Event Loop processes tasks from the Call Stack and then checks the Micro Task Queue.\n   - After executing all tasks from the Call Stack, the Event Loop processes all tasks in the Micro Task Queue before moving on to the next phase of the event loop.\n\n2. **Microtasks**:\n   - Microtasks include operations like promise callbacks (`.then()`, `.catch()`, `.finally()`) and certain `MutationObserver` callbacks.\n   - They are designed to be executed quickly and efficiently, before the browser can update the UI or process any other asynchronous tasks.\n\n3. **Task Scheduling**:\n   - Microtasks are scheduled to run immediately after the currently executing script and before rendering or I/O tasks.\n   - This ensures that microtasks are processed quickly and consistently.\n\n### Example:\n\n```javascript\nconsole.log('Start');\n\nPromise.resolve().then(() => {\n  console.log('Promise callback');\n});\n\nconsole.log('End');\n```\n\n### Micro Task Queue During Execution:\n\n1. `console.log('Start')` is executed and logged.\n2. `Promise.resolve().then()` schedules a microtask to handle the promise callback.\n3. `console.log('End')` is executed and logged.\n4. Before moving on to any other tasks or rendering updates, the Event Loop processes the microtask from the Micro Task Queue.\n5. The promise callback `console.log('Promise callback')` is executed and logged.\n\n### Key Points:\n\n- **Micro Task Queue**: A queue for microtasks, which are executed after the current script but before the next rendering or I/O tasks.\n- **Promise Callbacks**: Microtasks often include promise handlers and are processed immediately after the synchronous code execution.\n- **Event Loop**: The Event Loop processes microtasks from the Micro Task Queue before handling any other asynchronous tasks or rendering updates.\n\nThe Micro Task Queue is crucial for ensuring that promise-related operations and other critical tasks are executed promptly, providing a way to manage and schedule tasks that need to be completed before the browser updates the UI or processes other tasks.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"76e86dd5-fb8f-4b28-a39e-e094aa799f31","order":0,"createdDate":{"$date":"2024-09-05T14:45:26.001Z"},"updatedDate":{"$date":"2024-09-05T14:45:26.001Z"},"uniqueId":"bfc63298-b4bc-400e-9820-3deb2402f54e","__v":0}
{"_id":{"$oid":"66d9c46c61ec30d61c0fbb72"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"JavaScript is a high-level, interpreted programming language that is widely used for creating dynamic and interactive content on the web. It was originally developed by Netscape as a client-side scripting language to add interactivity to websites, but it has since evolved into a versatile language that can be used both on the client side (in web browsers) and on the server side (via environments like Node.js).\n\n### Key Features of JavaScript:\n\n1. **Interpreted Language**:\n   - JavaScript code is executed directly by the JavaScript engine in the browser or server environment, without the need for compilation.\n\n2. **Dynamic Typing**:\n   - JavaScript is dynamically typed, meaning variables can hold values of any type and types are checked at runtime.\n\n3. **Event-Driven**:\n   - JavaScript is designed to handle events like user interactions, network responses, and timers, enabling asynchronous programming and dynamic content updates.\n\n4. **Object-Oriented**:\n   - JavaScript supports object-oriented programming with prototypes and ES6 classes, allowing for the creation of objects and inheritance.\n\n5. **Functional Programming**:\n   - JavaScript supports functional programming features like first-class functions, closures, and higher-order functions.\n\n6. **Single-Threaded with Event Loop**:\n   - JavaScript runs in a single-threaded environment, using an event loop to handle asynchronous operations and manage concurrency.\n\n7. **Runs in Browsers and Servers**:\n   - Initially designed for browsers, JavaScript can also run on servers through platforms like Node.js, enabling full-stack development.\n\n8. **Rich Ecosystem**:\n   - JavaScript has a vast ecosystem with numerous libraries and frameworks (e.g., React, Angular, Vue.js) that facilitate web development and other programming tasks.\n\n### Example:\n\n```javascript\n// Simple JavaScript code to display an alert\nfunction greet(name) {\n  alert(`Hello, ${name}!`);\n}\n\ngreet('World'); // Displays an alert with the message \"Hello, World!\"\n```\n\n### Usage:\n\n- **Client-Side**: Enhances user interactions on web pages, such as form validation, animations, and dynamic content updates.\n- **Server-Side**: Used in server environments like Node.js to handle server-side logic, database interactions, and API development.\n\nJavaScript's flexibility and wide adoption make it a fundamental technology for web development and a powerful tool for various types of programming.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ec73499b-a8e8-4042-8049-7100f9bdf3b5","order":0,"createdDate":{"$date":"2024-09-05T14:47:08.902Z"},"updatedDate":{"$date":"2024-09-05T14:47:08.902Z"},"uniqueId":"0be385c5-0b5e-49e9-9e47-bf75a7b58bc6","__v":0}
{"_id":{"$oid":"66d9c52061ec30d61c0fe04e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In JavaScript, `Promise` is an object representing the eventual completion (or failure) of an asynchronous operation and its resulting value. It provides a way to handle asynchronous code in a more manageable and readable way. \n\nHere are the key member variables and functions of a `Promise`:\n\n### Member Variables:\n- **`[[PromiseStatus]]`**: Internal slot indicating the status of the promise (`\"pending\"`, `\"fulfilled\"`, or `\"rejected\"`).\n- **`[[PromiseValue]]`**: Internal slot holding the value or reason associated with the promise's fulfillment or rejection.\n\n### Methods/Functions:\n\n#### Core Methods:\n1. **`Promise.resolve(value)`**:\n   - Returns a `Promise` that is resolved with the given value. If the value is a promise, it returns that promise; otherwise, it returns a promise that resolves with the value.\n\n   ```javascript\n   Promise.resolve('Success').then(result => console.log(result)); // Output: Success\n   ```\n\n2. **`Promise.reject(reason)`**:\n   - Returns a `Promise` that is rejected with the given reason.\n\n   ```javascript\n   Promise.reject('Error').catch(error => console.error(error)); // Output: Error\n   ```\n\n3. **`Promise.all(iterable)`**:\n   - Returns a single promise that resolves when all of the promises in the iterable have resolved or when the iterable contains no promises. It rejects with the reason of the first promise that rejects.\n\n   ```javascript\n   Promise.all([Promise.resolve(1), Promise.resolve(2)]).then(results => console.log(results)); // Output: [1, 2]\n   ```\n\n4. **`Promise.allSettled(iterable)`**:\n   - Returns a promise that resolves after all of the given promises have either resolved or rejected, with an array of objects that each describe the outcome of each promise.\n\n   ```javascript\n   Promise.allSettled([Promise.resolve(1), Promise.reject('Error')])\n     .then(results => console.log(results));\n   // Output: [{status: 'fulfilled', value: 1}, {status: 'rejected', reason: 'Error'}]\n   ```\n\n5. **`Promise.any(iterable)`**:\n   - Returns a promise that resolves as soon as one of the promises in the iterable fulfills. It rejects if no promises in the iterable fulfill (i.e., if all promises are rejected).\n\n   ```javascript\n   Promise.any([Promise.reject('Error1'), Promise.resolve('Success')])\n     .then(result => console.log(result)); // Output: Success\n   ```\n\n6. **`Promise.race(iterable)`**:\n   - Returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.\n\n   ```javascript\n   Promise.race([Promise.resolve(1), new Promise((_, reject) => setTimeout(() => reject('Error'), 100))])\n     .then(result => console.log(result)) // Output: 1\n     .catch(error => console.error(error));\n   ```\n\n7. **`Promise.finally(onFinally)`**:\n   - Adds a callback to be invoked when the promise is settled, regardless of its outcome. This method does not modify the resolved or rejected value.\n\n   ```javascript\n   Promise.resolve('Done')\n     .finally(() => console.log('Promise is settled'))\n     .then(result => console.log(result)); // Output: Done \\n Promise is settled\n   ```\n\n#### Instance Methods:\n1. **`.then(onFulfilled, onRejected)`**:\n   - Adds fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler.\n\n   ```javascript\n   Promise.resolve('Success')\n     .then(result => console.log(result)) // Output: Success\n     .catch(error => console.error(error));\n   ```\n\n2. **`.catch(onRejected)`**:\n   - Adds a rejection handler callback to the promise and returns a new promise resolving to the return value of the callback if it is called.\n\n   ```javascript\n   Promise.reject('Error')\n     .catch(error => console.error(error)); // Output: Error\n   ```\n\n3. **`.finally(onFinally)`**:\n   - Adds a callback to be invoked when the promise is settled, regardless of its outcome.\n\n   ```javascript\n   Promise.resolve('Success')\n     .finally(() => console.log('Completed'));\n   ```\n\nThese methods help handle asynchronous operations, manage errors, and process results in a more structured way.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"30fab064-c356-4757-ba0e-94e7c624d031","order":0,"createdDate":{"$date":"2024-09-05T14:50:08.9Z"},"updatedDate":{"$date":"2024-09-05T14:50:08.9Z"},"uniqueId":"456fc743-7a0c-4bb9-b8f5-e0819b944566","__v":0}
{"_id":{"$oid":"66d9c62c61ec30d61c10051a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Web APIs (Application Programming Interfaces) in JavaScript are sets of functions and objects provided by the browser that allow you to interact with web-based features and services. These APIs provide a way to access and manipulate the web browser's capabilities and the underlying operating system directly from JavaScript code running in a web page. They enable various functionalities such as DOM manipulation, network requests, storage access, and more.\n\n### Key Categories and Examples of Web APIs:\n\n1. **DOM (Document Object Model) APIs**:\n   - **`document`**: Provides access to the HTML document, allowing manipulation of elements and attributes.\n   - **`window`**: Provides access to the browser window, including functions for handling events, timers, and global objects.\n   - **`HTMLElement`**: Allows interaction with HTML elements, including modifying their content and attributes.\n\n   ```javascript\n   // Example: Change the text content of an element\n   document.getElementById('myElement').textContent = 'Hello, World!';\n   ```\n\n2. **Fetch API**:\n   - Provides a modern way to make network requests to fetch resources (e.g., JSON, HTML) from a server.\n\n   ```javascript\n   // Example: Fetch data from a server\n   fetch('https://api.example.com/data')\n     .then(response => response.json())\n     .then(data => console.log(data))\n     .catch(error => console.error('Error:', error));\n   ```\n\n3. **Web Storage API**:\n   - **`localStorage`**: Stores data with no expiration date. Data is stored per origin and persists across browser sessions.\n   - **`sessionStorage`**: Stores data for the duration of the page session. Data is cleared when the page session ends.\n\n   ```javascript\n   // Example: Store and retrieve data from localStorage\n   localStorage.setItem('key', 'value');\n   console.log(localStorage.getItem('key')); // Output: value\n   ```\n\n4. **WebSockets API**:\n   - Allows for full-duplex communication between the browser and server over a single, long-lived connection.\n\n   ```javascript\n   // Example: Create a WebSocket connection\n   const socket = new WebSocket('wss://example.com/socket');\n   socket.onmessage = event => console.log('Message from server:', event.data);\n   ```\n\n5. **Geolocation API**:\n   - Provides access to the device's geographical location.\n\n   ```javascript\n   // Example: Get the current position of the device\n   navigator.geolocation.getCurrentPosition(position => {\n     console.log('Latitude:', position.coords.latitude);\n     console.log('Longitude:', position.coords.longitude);\n   });\n   ```\n\n6. **Canvas API**:\n   - Allows for dynamic, scriptable rendering of 2D shapes and bitmap images.\n\n   ```javascript\n   // Example: Draw a rectangle on a canvas\n   const canvas = document.getElementById('myCanvas');\n   const context = canvas.getContext('2d');\n   context.fillStyle = 'blue';\n   context.fillRect(10, 10, 100, 100);\n   ```\n\n7. **Web Audio API**:\n   - Provides a way to control and manipulate audio in the browser, including sound synthesis and real-time audio processing.\n\n   ```javascript\n   // Example: Create an audio context and play a sound\n   const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n   const oscillator = audioContext.createOscillator();\n   oscillator.type = 'sine';\n   oscillator.frequency.setValueAtTime(440, audioContext.currentTime); // 440 Hz\n   oscillator.connect(audioContext.destination);\n   oscillator.start();\n   oscillator.stop(audioContext.currentTime + 1); // Play sound for 1 second\n   ```\n\n8. **IndexedDB API**:\n   - Provides a way to store large amounts of structured data, including files and blobs, within the browser.\n\n   ```javascript\n   // Example: Open an IndexedDB database\n   const request = indexedDB.open('myDatabase', 1);\n   request.onupgradeneeded = event => {\n     const db = event.target.result;\n     db.createObjectStore('myStore', { keyPath: 'id' });\n   };\n   request.onsuccess = event => console.log('Database opened successfully');\n   ```\n\n9. **Notification API**:\n   - Allows web pages to send notifications to the user outside the context of the web page.\n\n   ```javascript\n   // Example: Request permission and show a notification\n   Notification.requestPermission().then(permission => {\n     if (permission === 'granted') {\n       new Notification('Hello, World!');\n     }\n   });\n   ```\n\n10. **Service Workers API**:\n    - Enables background scripts that can intercept and handle network requests, cache resources, and perform background tasks.\n\n    ```javascript\n    // Example: Register a service worker\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/service-worker.js')\n        .then(registration => console.log('Service Worker registered:', registration))\n        .catch(error => console.error('Service Worker registration failed:', error));\n    }\n    ```\n\nThese APIs are designed to provide a rich set of capabilities to enhance the functionality and interactivity of web applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"67890eca-0c63-4296-a406-43ffc054fbbc","order":0,"createdDate":{"$date":"2024-09-05T14:54:36.207Z"},"updatedDate":{"$date":"2024-09-05T14:54:36.207Z"},"uniqueId":"e56a8a55-c97e-490f-be85-5840e6be2043","__v":0}
{"_id":{"$oid":"66d9d37c61ec30d61c104ed1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In JavaScript, there are several types of `for` loops that you can use for iterating over data. Here are the different kinds:\n\n1. **Traditional `for` Loop**\n   - Syntax:\n     ```javascript\n     for (initialization; condition; update) {\n         // Code to execute\n     }\n     ```\n   - Example:\n     ```javascript\n     for (let i = 0; i < 5; i++) {\n         console.log(i);\n     }\n     ```\n\n2. **`for...of` Loop**\n   - Used for iterating over iterable objects such as arrays, strings, maps, sets, etc.\n   - Syntax:\n     ```javascript\n     for (const item of iterable) {\n         // Code to execute\n     }\n     ```\n   - Example:\n     ```javascript\n     const array = [1, 2, 3];\n     for (const value of array) {\n         console.log(value);\n     }\n     ```\n\n3. **`for...in` Loop**\n   - Used for iterating over the enumerable properties of an object.\n   - Syntax:\n     ```javascript\n     for (const key in object) {\n         // Code to execute\n     }\n     ```\n   - Example:\n     ```javascript\n     const obj = { a: 1, b: 2 };\n     for (const key in obj) {\n         console.log(key, obj[key]);\n     }\n     ```\n\n4. **`forEach` Method**\n   - Used with arrays to execute a function for each element. It is not a loop per se, but a method for iteration.\n   - Syntax:\n     ```javascript\n     array.forEach((element, index, array) => {\n         // Code to execute\n     });\n     ```\n   - Example:\n     ```javascript\n     const array = [1, 2, 3];\n     array.forEach((value, index) => {\n         console.log(index, value);\n     });\n     ```\n\n5. **`for...await...of` Loop**\n   - Used for iterating over asynchronous iterables (async generators).\n   - Syntax:\n     ```javascript\n     for await (const item of asyncIterable) {\n         // Code to execute\n     }\n     ```\n   - Example:\n     ```javascript\n     async function* asyncGenerator() {\n         yield 1;\n         yield 2;\n         yield 3;\n     }\n\n     (async () => {\n         for await (const value of asyncGenerator()) {\n             console.log(value);\n         }\n     })();\n     ```\n\nThese loops cover various needs for iterating through collections, objects, and asynchronous data in JavaScript.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f90e96e7-7a68-4630-bb65-f140458460a8","order":0,"createdDate":{"$date":"2024-09-05T15:51:24.938Z"},"updatedDate":{"$date":"2024-09-05T15:51:24.938Z"},"uniqueId":"f0aea318-bc3b-476d-8e5a-8262825a16da","__v":0}
{"_id":{"$oid":"66d9de1861ec30d61c10786b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some key TypeScript terminologies with one-liner definitions:\n\n### Basic Types\n- **`number`**: Represents numeric values (integer, floating-point).\n- **`string`**: Represents textual data.\n- **`boolean`**: Represents a true or false value.\n- **`void`**: Represents the absence of any type, commonly used for functions that do not return a value.\n- **`any`**: Represents any type of value, bypassing type checking.\n- **`unknown`**: Represents a value of unknown type, safer than `any` as it requires type checking before use.\n- **`null`**: Represents a null value.\n- **`undefined`**: Represents a value that has not been assigned.\n\n### Data Structures\n- **`Array`**: Represents a collection of elements of the same type.\n- **`Tuple`**: Represents an array with fixed size and types for each element.\n- **`Enum`**: Represents a set of named constants.\n\n### Functions\n- **`Function Signature`**: Defines the parameters and return type of a function.\n- **`Generic`**: Allows functions, classes, and interfaces to work with any data type while maintaining type safety.\n\n### Classes and Interfaces\n- **`Class`**: A blueprint for creating objects with properties and methods.\n- **`Interface`**: Defines the shape of an object, including its properties and methods.\n- **`Inheritance`**: Mechanism to create a new class based on an existing class.\n- **`Abstract Class`**: A class that cannot be instantiated directly but can be extended by other classes.\n\n### Modifiers\n- **`public`**: A member that is accessible from outside the class.\n- **`private`**: A member that is accessible only within the class.\n- **`protected`**: A member that is accessible within the class and its subclasses.\n\n### Advanced Types\n- **`Type Alias`**: Defines a new name for a type.\n- **`Union Type`**: Represents a value that can be one of several types.\n- **`Intersection Type`**: Combines multiple types into one.\n- **`Literal Type`**: Represents a specific value (e.g., `\"hello\"`).\n\n### Utility Types\n- **`Partial`**: Constructs a type with all properties set to optional.\n- **`Required`**: Constructs a type with all properties set to required.\n- **`Readonly`**: Constructs a type with all properties set to read-only.\n- **`Record`**: Constructs a type with a set of properties of a specific type.\n- **`Pick`**: Constructs a type by picking a subset of properties from another type.\n- **`Omit`**: Constructs a type by omitting specific properties from another type.\n\n### Modules\n- **`Module`**: Encapsulates code within a file or a namespace to avoid global scope pollution.\n- **`Namespace`**: Organizes code into logical groups, often used in older TypeScript versions.\n\nThese terms cover the essential aspects of TypeScript and provide a foundation for understanding how TypeScript enhances JavaScript with type safety and advanced features.\n\nHere are some additional key TypeScript terminologies:\n\n### Types and Type Guards\n- **`Type Assertion`**: A way to tell the TypeScript compiler to treat a variable as a specific type.\n- **`Type Guard`**: A function or condition that checks if a value is of a certain type during runtime.\n- **`Discriminated Union`**: A union type that uses a common property to differentiate between multiple object types.\n\n### Conditional and Mapped Types\n- **`Conditional Types`**: A type that is based on a condition (e.g., `T extends U ? X : Y`).\n- **`Mapped Types`**: Constructs types by iterating over the properties of another type (e.g., `{ [P in keyof T]: U }`).\n\n### Decorators\n- **`Decorator`**: A special kind of declaration that can be attached to a class, method, or property to modify its behavior (commonly used in frameworks like Angular).\n\n### Modules and Imports\n- **`Export`**: Makes a class, function, or variable available to other modules.\n- **`Import`**: Brings in functionality from other modules or packages.\n\n### Generics and Utility Types\n- **`Default Type Parameter`**: A default value assigned to a generic type parameter when it's not provided.\n- **`Exclude`**: Constructs a type by excluding specific properties from a union type.\n- **`Extract`**: Constructs a type by extracting properties from a union type.\n\n### Error Handling\n- **`Never`**: A type representing values that never occur, typically used for functions that throw an error or never return.\n\n### Type Compatibility\n- **`Structural Typing`**: TypeScript’s type system is structural, meaning that types are compatible based on their members, not names.\n- **`Declaration Merging`**: TypeScript allows multiple declarations with the same name to merge into a single declaration.\n\n### Module Resolution\n- **`Ambient Declaration`**: A way to tell TypeScript about the types of third-party libraries or global variables using `.d.ts` files.\n\nThese additional terms dive deeper into some of the more advanced and lesser-known features of TypeScript, enriching the understanding of its capabilities.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2cb312c7-2524-4849-ad1e-d253c083373e","order":0,"createdDate":{"$date":"2024-09-05T16:36:40.185Z"},"updatedDate":{"$date":"2024-09-05T16:38:34.366Z"},"uniqueId":"49395666-5d8c-4b4f-931c-ff64b83b0b99","__v":0}
{"_id":{"$oid":"66d9df3061ec30d61c10ae5c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To set up a TypeScript project from scratch with only Node.js installed, follow these steps:\n\n### Step 1: Initialize Node.js Project\n- Open your terminal and navigate to your project folder.\n- Initialize a new Node.js project:\n  ```bash\n  npm init -y\n  ```\n  This will create a `package.json` file with default settings.\n\n### Step 2: Install TypeScript\n- Install TypeScript as a development dependency:\n  ```bash\n  npm install typescript --save-dev\n  ```\n\n### Step 3: Create a `tsconfig.json`\n- Create a TypeScript configuration file (`tsconfig.json`) to manage compiler options.\n- Use the TypeScript compiler to generate a basic configuration file:\n  ```bash\n  npx tsc --init\n  ```\n  This will generate a `tsconfig.json` file with default options.\n\n### Step 4: Update `tsconfig.json` (optional)\n- Customize `tsconfig.json` if needed. Some common options include:\n  - **`outDir`**: Directory to output compiled JavaScript files.\n  - **`rootDir`**: Specify the root directory of the source files.\n  - **`strict`**: Enable strict type-checking options.\n\n  Example:\n  ```json\n  {\n    \"compilerOptions\": {\n      \"target\": \"es6\",\n      \"module\": \"commonjs\",\n      \"outDir\": \"./dist\",\n      \"rootDir\": \"./src\",\n      \"strict\": true\n    }\n  }\n  ```\n\n### Step 5: Create `src` Directory and TypeScript Files\n- Create a `src` directory to store your TypeScript files:\n  ```bash\n  mkdir src\n  ```\n- Create a TypeScript file inside the `src` directory, e.g., `src/index.ts`:\n  ```typescript\n  const greeting: string = 'Hello, TypeScript!';\n  console.log(greeting);\n  ```\n\n### Step 6: Compile TypeScript Files\n- Compile the TypeScript files to JavaScript:\n  ```bash\n  npx tsc\n  ```\n  The compiled JavaScript files will be placed in the `outDir` specified in `tsconfig.json` (e.g., `dist`).\n\n### Step 7: Run the Compiled JavaScript\n- Use Node.js to run the compiled JavaScript file:\n  ```bash\n  node dist/index.js\n  ```\n\n### Step 8: Add Scripts to `package.json`\n- To streamline the workflow, add build and run scripts to `package.json`:\n  ```json\n  {\n    \"scripts\": {\n      \"build\": \"tsc\",\n      \"start\": \"node dist/index.js\"\n    }\n  }\n  ```\n- Now, you can run the project with:\n  ```bash\n  npm run build\n  npm start\n  ```\n\n### Optional: Install Additional Node.js Types\n- If you're using Node.js APIs, install type definitions:\n  ```bash\n  npm install @types/node --save-dev\n  ```\n\n### Optional: Watch Mode for Auto-Recompile\n- To automatically recompile TypeScript when changes are detected, use `tsc` in watch mode:\n  ```bash\n  npx tsc --watch\n  ```\n\nYour TypeScript project is now set up and ready for development!","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"8dcf15e1-3289-482a-bf0a-80a6237d65b4","order":0,"createdDate":{"$date":"2024-09-05T16:41:20.168Z"},"updatedDate":{"$date":"2024-09-05T16:41:20.168Z"},"uniqueId":"a94a9acf-647e-47f4-815b-adfea3efdd98","__v":0}
{"_id":{"$oid":"66d9e1f461ec30d61c10c276"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Java APIs utilize several major design patterns to provide reusable and scalable solutions. Here are some of the key design patterns used in Java APIs:\n\n### **1. Singleton Pattern**  \n- **Used in**: `java.lang.Runtime`, `java.awt.Desktop`, `java.sql.DriverManager`.  \n- Ensures that only one instance of a class is created.\n- **Example**: `java.lang.System` and `java.sql.DriverManager` are examples, though implemented using static methods rather than the traditional GoF approach.\n\n### **2. Factory Pattern**  \n- **Used in**: `java.util.Calendar`, `java.sql.Connection`, `java.net.URLConnection`.  \n- Encapsulates object creation and returns a specific object based on input.\n- **Example**: `java.util.Calendar.getInstance()` demonstrates a simple Factory Method pattern.\n\n### **3. Abstract Factory Pattern**  \n- **Used in**: `javax.xml.parsers.DocumentBuilderFactory`, `javax.xml.transform.TransformerFactory`.  \n- Provides an interface for creating families of related or dependent objects without specifying their concrete classes.\n\n### **4. Builder Pattern**  \n- **Used in**: `java.lang.StringBuilder`, `java.nio.ByteBuffer`, `java.util.stream.Stream`.  \n- Constructs complex objects step by step.\n\n### **5. Decorator Pattern**  \n- **Used in**: `java.io.BufferedReader`, `java.io.FileInputStream`, `java.util.Collections.unmodifiableList`.  \n- Dynamically adds behavior to individual objects.\n\n### **6. Observer Pattern**  \n- **Used in**: `java.util.Observer`, `java.util.Observable`, `javax.swing.EventListener`.  \n- Defines a one-to-many relationship where an object (subject) notifies its observers of state changes.\n- **Example**: The Java 1.1 event model is based on the Observer pattern.\n\n### **7. Strategy Pattern**  \n- **Used in**: `java.util.Comparator`, `javax.crypto.Cipher`.  \n- Defines a family of algorithms and makes them interchangeable at runtime.\n\n### **8. Proxy Pattern**  \n- **Used in**: `java.lang.reflect.Proxy`, `javax.sql.DataSource`, Java RMI, and IDL features.  \n- Provides a surrogate or placeholder for another object to control access to it.\n\n### **9. Adapter Pattern**  \n- **Used in**: `java.util.Arrays.asList()`, `java.io.InputStreamReader`, `java.io.OutputStreamWriter`.  \n- Converts one interface into another that the client expects.\n- **Example**: Extensively used in adapter classes in `java.awt.event`.\n\n### **10. Command Pattern**  \n- **Used in**: `javax.swing.Action`, `java.lang.Runnable`.  \n- Encapsulates a request as an object, enabling parameterization and queuing of requests.\n- **Example**: Java Swing classes provide an `Action` interface and `AbstractAction` class.\n\n### **11. Template Method Pattern**  \n- **Used in**: `java.util.AbstractList`, `java.util.AbstractSet`, `java.util.AbstractMap`.  \n- Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.\n\n### **12. Composite Pattern**  \n- **Used in**: `java.awt.Container`, `javax.swing.JComponent`.  \n- Composes objects into tree structures to represent part-whole hierarchies.\n- **Example**: Found in the structure of `Component` and `Container` classes in `java.awt`.\n\n### **13. Prototype Pattern**  \n- **Supported by**: The `clone()` method in `Object` and the `java.lang.Cloneable` interface.  \n- Allows cloning of objects to create a duplicate.\n\n### **14. Bridge Pattern**  \n- **Used in**: The separation of components in `java.awt` (e.g., `Button` and `List`), and their counterparts in `java.awt.peer`.  \n- Decouples an abstraction from its implementation so that the two can vary independently.\n\n### **15. Iterator Pattern**  \n- **Used in**: `java.util.Iterator`, `java.util.Enumeration`.  \n- Provides a way to access elements of a collection sequentially without exposing its underlying structure.\n\n### **16. Chain of Responsibility Pattern**  \n- **Used in**: `java.util.logging.Logger`.  \n- Passes a request along a chain of handlers, each having the opportunity to process the request.\n\nThese patterns form the backbone of Java's APIs, ensuring flexibility, maintainability, and scalability in various software projects.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"0c6b3327-87e9-4964-b889-f9c9c8bc6a31","order":0,"createdDate":{"$date":"2024-09-05T16:53:08.697Z"},"updatedDate":{"$date":"2024-09-05T16:53:08.697Z"},"uniqueId":"6eb7843c-c354-4eab-96ed-fbeee8915e36","__v":0}
{"_id":{"$oid":"66da7a3e0045b6a7c1183cd5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are examples of each type of dependency injection in Java:\n\n### 1. **Field Injection**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FieldInjectionExample {\n\n    @Autowired\n    private Service service;\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\n### 2. **Setter Injection**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SetterInjectionExample {\n\n    private Service service;\n\n    @Autowired\n    public void setService(Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\n### 3. **Constructor Injection**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ConstructorInjectionExample {\n\n    private final Service service;\n\n    @Autowired\n    public ConstructorInjectionExample(Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\nIn all these examples, the `Service` class is injected into the main class (via field, setter, or constructor). This is how dependency injection works in Spring framework.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d55c4ada-22b3-435e-9e52-14ca0e411b7d","order":0,"createdDate":{"$date":"2024-09-06T03:42:54.809Z"},"updatedDate":{"$date":"2024-09-06T03:42:54.809Z"},"uniqueId":"b132ea33-ff25-4d15-9c81-65fdaaaf6b4c","__v":0}
{"_id":{"$oid":"66da7ab10045b6a7c1186aec"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"There are five main ways to perform autowiring in Spring:\n\n1. **byType**: Autowires by matching the property type with the bean type.\n2. **byName**: Autowires by matching the bean name with the property name.\n3. **constructor**: Autowires by constructor, matching the constructor parameter types with the bean types.\n4. **@Autowired**: Uses annotations to mark fields, setters, or constructors for autowiring.\n5. **@Qualifier**: Used alongside `@Autowired` when multiple beans of the same type exist, to specify the exact bean to inject by name. \n\n### Example for each:\n\n#### 1. **byType**\n```xml\n<bean id=\"example\" class=\"com.example.ClassExample\" autowire=\"byType\"/>\n```\n\n#### 2. **byName**\n```xml\n<bean id=\"example\" class=\"com.example.ClassExample\" autowire=\"byName\"/>\n```\n\n#### 3. **constructor**\n```xml\n<bean id=\"example\" class=\"com.example.ClassExample\" autowire=\"constructor\"/>\n```\n\n#### 4. **@Autowired**\n```java\n@Component\npublic class AutowireExample {\n    @Autowired\n    private Service service;\n}\n```\n\n#### 5. **@Qualifier**\n```java\n@Component\npublic class AutowireExample {\n    @Autowired\n    @Qualifier(\"specificService\")\n    private Service service;\n}\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"4d865b70-2afb-450f-a7ba-a3eff98247aa","order":0,"createdDate":{"$date":"2024-09-06T03:44:49.774Z"},"updatedDate":{"$date":"2024-09-06T03:44:49.774Z"},"uniqueId":"06f8dbfa-d213-4630-8dc1-bb7369f933bd","__v":0}
{"_id":{"$oid":"66da7b1b0045b6a7c1189196"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, the first three types of autowiring (**`byType`**, **`byName`**, and **`constructor`**) are traditionally used with **XML-based** configuration in Spring.\n\nWith **Java-based** configuration or **Spring annotations**, you typically use `@Autowired` and `@Qualifier` for autowiring.\n\nHere’s how the first 3 can be done using **XML**:\n\n### 1. **byType**\n```xml\n<bean id=\"service\" class=\"com.example.Service\" />\n<bean id=\"example\" class=\"com.example.ExampleClass\" autowire=\"byType\" />\n```\n\n### 2. **byName**\n```xml\n<bean id=\"service\" class=\"com.example.Service\" />\n<bean id=\"example\" class=\"com.example.ExampleClass\" autowire=\"byName\" />\n```\n\n### 3. **constructor**\n```xml\n<bean id=\"service\" class=\"com.example.Service\" />\n<bean id=\"example\" class=\"com.example.ExampleClass\" autowire=\"constructor\" />\n```\n\nIn **annotation-based configuration**, these methods are generally replaced by `@Autowired`, `@Qualifier`, or constructor injection directly in the code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"410f7bf1-9b91-4167-bf0e-9dddb8fc1f8b","order":0,"createdDate":{"$date":"2024-09-06T03:46:35.594Z"},"updatedDate":{"$date":"2024-09-06T03:46:35.594Z"},"uniqueId":"d84e390c-bd2f-4ecc-8910-1e0eab5848dc","__v":0}
{"_id":{"$oid":"66da7b7c0045b6a7c118b609"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are examples demonstrating different ways to use `@Autowired` and `@Qualifier` in Spring:\n\n### 1. **Field Injection with `@Autowired`**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FieldInjectionExample {\n    @Autowired\n    private Service service;\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\n### 2. **Setter Injection with `@Autowired`**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SetterInjectionExample {\n    private Service service;\n\n    @Autowired\n    public void setService(Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\n### 3. **Constructor Injection with `@Autowired`**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ConstructorInjectionExample {\n    private final Service service;\n\n    @Autowired\n    public ConstructorInjectionExample(Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component\nclass Service {\n    public void perform() {\n        System.out.println(\"Service performing task\");\n    }\n}\n```\n\n### 4. **Using `@Qualifier` with `@Autowired` (Field Injection)**\nIf you have multiple beans of the same type, use `@Qualifier` to specify which one to inject.\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class FieldInjectionWithQualifier {\n    @Autowired\n    @Qualifier(\"specificService\")\n    private Service service;\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component(\"specificService\")\nclass SpecificService implements Service {\n    public void perform() {\n        System.out.println(\"Specific Service performing task\");\n    }\n}\n\n@Component(\"anotherService\")\nclass AnotherService implements Service {\n    public void perform() {\n        System.out.println(\"Another Service performing task\");\n    }\n}\n\ninterface Service {\n    void perform();\n}\n```\n\n### 5. **Using `@Qualifier` with `@Autowired` (Constructor Injection)**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ConstructorInjectionWithQualifier {\n    private final Service service;\n\n    @Autowired\n    public ConstructorInjectionWithQualifier(@Qualifier(\"anotherService\") Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component(\"specificService\")\nclass SpecificService implements Service {\n    public void perform() {\n        System.out.println(\"Specific Service performing task\");\n    }\n}\n\n@Component(\"anotherService\")\nclass AnotherService implements Service {\n    public void perform() {\n        System.out.println(\"Another Service performing task\");\n    }\n}\n\ninterface Service {\n    void perform();\n}\n```\n\n### 6. **Using `@Qualifier` with `@Autowired` (Setter Injection)**\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SetterInjectionWithQualifier {\n    private Service service;\n\n    @Autowired\n    @Qualifier(\"specificService\")\n    public void setService(Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component(\"specificService\")\nclass SpecificService implements Service {\n    public void perform() {\n        System.out.println(\"Specific Service performing task\");\n    }\n}\n\n@Component(\"anotherService\")\nclass AnotherService implements Service {\n    public void perform() {\n        System.out.println(\"Another Service performing task\");\n    }\n}\n\ninterface Service {\n    void perform();\n}\n```\n\n### Summary:\n- **`@Autowired`** injects the dependency automatically.\n- **`@Qualifier`** is used when you have multiple beans of the same type and need to specify which one to inject.\n\nEach example shows different ways you can combine `@Autowired` and `@Qualifier` depending on your injection strategy (field, setter, or constructor).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"82df9c39-9bd2-4475-a7bc-d7faf3eb3e62","order":0,"createdDate":{"$date":"2024-09-06T03:48:12.191Z"},"updatedDate":{"$date":"2024-09-06T03:48:12.191Z"},"uniqueId":"d74217a4-c22b-41af-86f2-48a8a94cea1a","__v":0}
{"_id":{"$oid":"66da7bd30045b6a7c118daa6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, you can use **property files** to manage **autowiring with `@Qualifier`** in Spring by injecting property values to dynamically select which beans should be wired at runtime. This can be achieved using Spring's `@Value` annotation to read the property and use it in combination with `@Qualifier`.\n\nHere’s how you can do it:\n\n### 1. **Define a Property File**\n\nYou can define a property file, for example `application.properties`, to specify the bean name.\n\n```properties\nservice.name=specificService\n```\n\n### 2. **Use `@Value` to Read the Property**\n\nThen, you can inject the property value and use it with `@Qualifier`.\n\n### Example Code:\n\n#### **Property File (`application.properties`)**\n```properties\nservice.name=specificService\n```\n\n#### **Java Configuration and Autowiring**\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PropertyBasedQualifierInjection {\n\n    private Service service;\n\n    @Autowired\n    public PropertyBasedQualifierInjection(@Qualifier(\"${service.name}\") Service service) {\n        this.service = service;\n    }\n\n    public void doSomething() {\n        service.perform();\n    }\n}\n\n@Component(\"specificService\")\nclass SpecificService implements Service {\n    public void perform() {\n        System.out.println(\"Specific Service performing task\");\n    }\n}\n\n@Component(\"anotherService\")\nclass AnotherService implements Service {\n    public void perform() {\n        System.out.println(\"Another Service performing task\");\n    }\n}\n\ninterface Service {\n    void perform();\n}\n```\n\n### Explanation:\n- The `@Value(\"${service.name}\")` injects the value of the property `service.name` from the properties file (`application.properties`).\n- The `@Qualifier` then uses this value to determine which bean to inject (either `\"specificService\"` or `\"anotherService\"` in this case).\n  \n### 3. **Enable Property Configuration**\n\nIn order to enable the use of property files, make sure your Spring configuration class or XML configuration includes property file support:\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\n\n@Configuration\n@PropertySource(\"classpath:application.properties\")\npublic class AppConfig {\n    // Application configuration here\n}\n```\n\n### Using XML Configuration:\n\nIf you are using XML configuration, you can achieve the same by specifying the property file and injecting the qualifier as follows:\n\n#### **XML Configuration (`spring-config.xml`)**\n```xml\n<context:property-placeholder location=\"classpath:application.properties\"/>\n\n<bean id=\"specificService\" class=\"com.example.SpecificService\"/>\n<bean id=\"anotherService\" class=\"com.example.AnotherService\"/>\n\n<bean id=\"example\" class=\"com.example.PropertyBasedQualifierInjection\">\n    <constructor-arg>\n        <bean class=\"org.springframework.beans.factory.config.ConfigurableBeanFactory\" factory-method=\"resolveBean\">\n            <constructor-arg value=\"${service.name}\" />\n        </bean>\n    </constructor-arg>\n</bean>\n```\n\nThis way, you can dynamically manage the autowiring of beans based on property file values.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"309b2cb9-8fd3-4369-b9df-0d919dcd17a0","order":0,"createdDate":{"$date":"2024-09-06T03:49:39.344Z"},"updatedDate":{"$date":"2024-09-06T03:49:39.344Z"},"uniqueId":"a0584c5b-15a9-47e4-8a22-38df5f8c159c","__v":0}
{"_id":{"$oid":"66da85d80045b6a7c1193bb0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Spring core Framework: Key Terminologies\n\nHere’s a list of key terminologies in the **Spring Core Framework**, organized into meaningful categories with brief one-liners for each:\n\n### 1. **Inversion of Control (IoC) and Dependency Injection (DI)**\n- **IoC (Inversion of Control)**: Design principle where the control flow of the program is inverted, letting the framework manage dependencies.\n- **Dependency Injection (DI)**: A technique where dependencies are injected into a class from external sources rather than being created within the class.\n- **Bean**: An object that is instantiated, assembled, and managed by the Spring IoC container.\n- **ApplicationContext**: The central interface for Spring's IoC container, responsible for managing the beans.\n- **BeanFactory**: A lightweight IoC container that provides basic DI capabilities, typically used for simple applications.\n- **@Autowired**: Annotation to automatically inject dependencies by type.\n- **@Qualifier**: Specifies which bean to inject when multiple candidates are available.\n- **@ComponentScan**: Used to scan for Spring components and automatically register them as beans in the context.\n- **@Primary**: Marks a bean as the default bean to be used when multiple candidates exist.\n\n### 2. **Spring Beans and Scopes**\n- **@Component**: Generic stereotype annotation for marking a class as a Spring-managed component.\n- **@Service**: Specialized stereotype annotation used to define service layer components.\n- **@Repository**: Specialized stereotype annotation used for persistence layer components.\n- **@Controller**: Stereotype annotation for defining Spring MVC controller components.\n- **Singleton**: Default bean scope where only one instance of the bean is created per Spring container.\n- **Prototype**: Scope that creates a new bean instance every time it is requested.\n- **Request Scope**: Defines that a bean is created and tied to a single HTTP request.\n- **Session Scope**: Defines that a bean is tied to an HTTP session, with one instance per session.\n\n### 3. **Bean Lifecycle and Configuration**\n- **@Configuration**: Indicates that a class contains Spring bean definitions.\n- **@Bean**: Used to define beans explicitly within a `@Configuration` class.\n- **BeanPostProcessor**: Interface used to intercept bean creation processes and perform operations before or after initialization.\n- **@PostConstruct**: Marks a method to be executed after dependency injection is done.\n- **@PreDestroy**: Marks a method to be called just before a bean is destroyed.\n- **@Lazy**: Indicates that a bean should be lazily initialized, meaning it's created only when requested.\n\n### 4. **Events and Listeners**\n- **ApplicationEvent**: Base class for all Spring events, allowing beans to communicate via events.\n- **ApplicationListener**: Interface used to handle Spring events asynchronously.\n- **@EventListener**: Annotation that marks a method as a listener for application events.\n- **ContextRefreshedEvent**: Event fired when the ApplicationContext is initialized or refreshed.\n- **ContextClosedEvent**: Event fired when the ApplicationContext is closed.\n\n### 5. **Aspect-Oriented Programming (AOP)**\n- **Aspect**: A module that encapsulates cross-cutting concerns (e.g., logging, security).\n- **Join Point**: A point in the execution of a program, such as a method call, where an aspect can be applied.\n- **Advice**: Action taken by an aspect at a particular join point, such as before or after method execution.\n- **Pointcut**: Expression that matches join points where advice should be applied.\n- **Weaving**: Process of linking aspects with other application types or objects.\n- **@Aspect**: Marks a class as an aspect in Spring AOP.\n- **@Before, @After, @Around**: Advices to be executed before, after, or around a method.\n\n### 6. **Annotations and Profiles**\n- **@Profile**: Used to define beans that are only available in specific environments (e.g., dev, prod).\n- **@Value**: Injects values from properties or environment variables into beans.\n- **@PropertySource**: Specifies the location of a properties file to be loaded into the Spring environment.\n\n### 7. **Spring Expressions (SpEL)**\n- **SpEL (Spring Expression Language)**: A powerful expression language used for querying and manipulating an object graph at runtime.\n- **#{…}**: Syntax for SpEL expressions, often used within annotations to inject dynamic values.\n\n### 8. **Transaction Management**\n- **@Transactional**: Declares that a method or class should be wrapped in a database transaction.\n- **Propagation**: Defines how transactions are propagated from one method to another (e.g., REQUIRED, REQUIRES_NEW).\n- **Isolation**: Defines how transaction integrity is maintained between concurrent transactions (e.g., READ_COMMITTED, SERIALIZABLE).\n- **Rollback**: Mechanism to revert the state of a transaction in case of an error.\n\n### 9. **Miscellaneous**\n- **Spring Profiles**: Allow the registration of different beans or configurations based on the active profile (e.g., development, production).\n- **Spring Boot**: A project built on top of Spring that simplifies application setup with conventions and auto-configuration.\n- **IoC Container**: Core of the Spring Framework that manages the lifecycle and configuration of application objects (beans).\n\n\n\n\n### 10. **Java-based Configuration**\n- **@EnableAutoConfiguration**: Enables Spring Boot's auto-configuration mechanism that automatically configures beans based on classpath settings and other factors.\n- **@ComponentScan**: Tells Spring where to scan for annotated components (like `@Controller`, `@Service`).\n- **@Import**: Allows importing configuration from other classes into the main configuration class.\n- **@Conditional**: Allows conditional bean registration based on certain conditions, such as environment settings or properties.\n\n### 11. **Bean Validation and Data Binding**\n- **@Valid**: Annotation that triggers bean validation before method execution, usually used with Spring MVC or method parameters.\n- **BindingResult**: Interface that holds the results of a data binding operation, including validation errors.\n- **@InitBinder**: Annotation used in controllers to customize the binding of request parameters to model objects.\n\n### 12. **Event Handling and Scheduling**\n- **@Scheduled**: Annotation used for scheduling a method to run at specific intervals (cron jobs, fixed delays).\n- **@Async**: Used to execute methods asynchronously in a separate thread, often for long-running tasks or tasks that don’t require immediate response.\n  \n### 13. **Caching**\n- **@Cacheable**: Indicates that the result of a method invocation should be cached, and future calls to that method should return the cached value.\n- **@CacheEvict**: Removes the cached entries for a method or cache when a condition is met, typically used for cache cleanup.\n- **@CachePut**: Updates the cache without interfering with method execution, ensuring the cache is synchronized with the database.\n\n### 14. **Message and Internationalization (i18n)**\n- **MessageSource**: Interface for resolving messages, supporting internationalization (i18n) by reading message files (e.g., `messages.properties`).\n- **LocaleResolver**: Used to determine and resolve the `Locale` in a web application for language-specific content delivery.\n\n### 15. **Task Execution and Scheduling**\n- **TaskExecutor**: Abstraction for asynchronous task execution, often used with `@Async`.\n- **TaskScheduler**: Abstraction for scheduling tasks to run at some point in the future.\n  \n### 16. **Spring FactoryBean**\n- **FactoryBean**: Interface that allows developers to create a complex object within a Spring IoC container. It provides a way to customize the instantiation logic for beans.\n  \n### 17. **Bean Definition and Injection Strategies**\n- **@Lookup**: Used to inject a new instance of a bean into another bean, often used in prototype bean injection.\n- **@Resource**: JSR-250 annotation for injection, similar to `@Autowired`, but allows injecting by name.\n  \n### 18. **Profiles and Environments**\n- **Environment**: Interface representing the environment in which the application is running, useful for resolving profiles and property sources.\n- **ConfigurableEnvironment**: Subinterface of `Environment` that allows customizing property sources and active profiles programmatically.\n\nThese terms further expand your understanding of the Spring Core Framework and cover additional areas such as Java-based configuration, bean validation, task scheduling, caching, and internationalization (i18n).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"391128f7-be2a-48ba-93e1-3c8623b155de","order":0,"createdDate":{"$date":"2024-09-06T04:32:24.727Z"},"updatedDate":{"$date":"2024-09-06T04:32:24.727Z"},"uniqueId":"918742fc-2331-4d8f-852f-e3b293748a3d","__v":0}
{"_id":{"$oid":"66da99e20045b6a7c1199a63"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"# Spring Boot Learning Plan\n\n## 1. Basic Concepts and Setup (Day 1-3)\n- **Introduction to Spring Boot**:\n  - Learn the basics of Spring Boot and how it simplifies application development.\n  - Understand how it differs from the Spring Framework.\n- **Setting Up the Development Environment**:\n  - Install Java, Maven/Gradle, and an IDE (like IntelliJ or Eclipse).\n  - Set up your first Spring Boot project using Spring Initializr.\n- **Core Concepts**:\n  - Learn about the `@SpringBootApplication` annotation and auto-configuration.\n  - Understand the structure of a typical Spring Boot project.\n\n**Tasks**:\n- Create a simple Spring Boot project with a basic REST API (`@RestController`, `@GetMapping`, etc.).\n- Experiment with running the application from the command line or IDE.\n\n## 2. Dependency Injection and Configuration (Day 4-7)\n- **Spring Beans and IoC Container**:\n  - Learn how Spring Boot manages beans and dependencies using `@Component`, `@Service`, and `@Repository`.\n- **Java-based Configuration**:\n  - Learn how to configure Spring Boot using `@Configuration`, `@Bean`, and `@ComponentScan`.\n- **Externalized Configuration**:\n  - Understand how to use `application.properties` or `application.yml` for configuration.\n  - Explore `@Value` to inject values from property files.\n\n**Tasks**:\n- Create a multi-layered application with service and repository layers.\n- Use externalized configuration to manage environment-specific properties.\n\n## 3. Spring Boot RESTful APIs (Day 8-12)\n- **REST API Basics**:\n  - Create RESTful services using `@RestController`, `@GetMapping`, `@PostMapping`, `@PutMapping`, and `@DeleteMapping`.\n- **Handling HTTP Requests and Responses**:\n  - Learn how to work with `RequestBody`, `PathVariable`, `RequestParam`, and `ResponseEntity`.\n- **Error Handling**:\n  - Implement global exception handling using `@ControllerAdvice` and `@ExceptionHandler`.\n\n**Tasks**:\n- Build a simple CRUD REST API with validation (`@Valid`) and error handling.\n- Add custom exception handling using `@ControllerAdvice`.\n\n## 4. Data Persistence with Spring Boot (Day 13-18)\n- **Spring Data JPA**:\n  - Learn how to integrate Spring Data JPA for database access.\n  - Understand `CrudRepository`, `JpaRepository`, and custom query methods.\n- **Database Configuration**:\n  - Learn how to configure data sources in `application.properties`.\n  - Use H2 as an in-memory database for testing.\n- **Entity Mapping**:\n  - Learn basic JPA annotations like `@Entity`, `@Table`, `@Id`, and relationships (`@OneToMany`, `@ManyToOne`).\n\n**Tasks**:\n- Create an application with JPA entities, repositories, and service layers.\n- Implement CRUD operations in a REST API with database persistence.\n\n## 5. Spring Boot Security (Day 19-23)\n- **Introduction to Spring Security**:\n  - Learn the basics of Spring Security and how to secure REST endpoints.\n- **Authentication and Authorization**:\n  - Understand user roles and authorities.\n  - Explore default configurations and customize security using `WebSecurityConfigurerAdapter`.\n- **JWT Authentication**:\n  - Implement JWT-based authentication and authorization for secure APIs.\n\n**Tasks**:\n- Secure the REST API with basic authentication.\n- Implement JWT authentication for securing your API.\n\n## 6. Spring Boot Testing (Day 24-28)\n- **Unit Testing with JUnit and Mockito**:\n  - Write unit tests for Spring Boot services and controllers.\n- **Integration Testing**:\n  - Learn how to write integration tests for your Spring Boot application using `@SpringBootTest`.\n- **Mocking Dependencies**:\n  - Use `@MockBean` and Mockito to mock dependencies in tests.\n\n**Tasks**:\n- Write unit and integration tests for the CRUD API.\n- Ensure code coverage by testing services, repositories, and controllers.\n\n## 7. Spring Boot Caching and Scheduling (Day 29-32)\n- **Caching with Spring Boot**:\n  - Learn how to use `@Cacheable`, `@CachePut`, and `@CacheEvict` to cache method results.\n  - Configure caching with different caching providers (e.g., Ehcache, Redis).\n- **Task Scheduling**:\n  - Implement scheduled tasks using `@Scheduled` and asynchronous processing with `@Async`.\n\n**Tasks**:\n- Add caching to an existing service and configure cache expiration.\n- Schedule a task to run at fixed intervals using `@Scheduled`.\n\n## 8. Advanced Topics (Day 33-38)\n- **Spring Boot Actuator**:\n  - Use Spring Boot Actuator to monitor and manage the application (e.g., health checks, metrics).\n- **Spring Boot Profiles**:\n  - Learn how to use profiles for environment-specific configurations (e.g., dev, prod).\n- **Microservices with Spring Cloud**:\n  - Get an introduction to microservices using Spring Cloud (e.g., Eureka, Zuul, Feign).\n\n**Tasks**:\n- Enable Spring Boot Actuator and explore its endpoints.\n- Create different profiles for `dev` and `prod` and configure them.\n- Set up a basic microservice architecture with service discovery using Spring Cloud.\n\n## 9. Deploying Spring Boot Applications (Day 39-43)\n- **Packaging Spring Boot Applications**:\n  - Learn how to package your Spring Boot app as a JAR or WAR.\n- **Deploying to Cloud**:\n  - Deploy your application to cloud platforms like AWS, Azure, or Google Cloud.\n- **Dockerizing Spring Boot Applications**:\n  - Create Docker containers for your Spring Boot applications.\n\n**Tasks**:\n- Package your application and deploy it to a cloud provider.\n- Dockerize the application and run it in a container.\n\n## 10. Project and Real-World Application (Day 44-50)\n- **Build a Full Project**:\n  - Build a real-world application with multiple layers, security, caching, database persistence, and error handling.\n  - Apply best practices for structuring, testing, and deploying Spring Boot applications.\n\n## Continuous Learning\n- **Explore Spring Boot Documentation**: Always refer to official documentation for the latest features and updates.\n- **Follow Spring Community**: Stay active in the community, participate in forums, and explore real-world use cases.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"fa7774d2-9c11-4b8d-bab2-fcc1e1bd71ec","order":0,"createdDate":{"$date":"2024-09-06T05:57:54.745Z"},"updatedDate":{"$date":"2024-09-06T05:57:54.745Z"},"uniqueId":"97816836-540e-4410-aad6-8751a1fca35b","__v":0}
{"_id":{"$oid":"66dab0430045b6a7c11badfb"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### HTML and HTML5: Key Terminologies\n\n#### **Basic Concepts**\n- **HTML (HyperText Markup Language):** The standard language used to create web pages, focusing on the structure of content.\n- **Tag:** The basic building block of HTML, used to define elements (e.g., `<div>`, `<p>`, `<a>`).\n- **Element:** A complete HTML structure consisting of a start tag, content, and an end tag (e.g., `<p>Content</p>`).\n- **Attribute:** Extra information added to HTML elements (e.g., `href` for links, `src` for images).\n\n#### **HTML5-Specific Features**\n- **HTML5:** The latest version of HTML, introducing new elements, attributes, and APIs for better multimedia and graphical support.\n- **Semantic Elements:** Elements that give meaning to the page content (e.g., `<article>`, `<section>`, `<header>`, `<footer>`, `<nav>`).\n- **`<canvas>`:** An HTML5 element used to draw graphics and animations with JavaScript.\n- **`<video>` and `<audio>`:** HTML5 elements for embedding media files without the need for external plugins.\n- **Geolocation API:** HTML5 API for retrieving geographical location data of a user.\n- **Local Storage:** A feature of HTML5 that allows web applications to store data locally within the user's browser.\n\n#### **Form Enhancements**\n- **Input Types:** HTML5 introduced new input types such as `email`, `url`, `number`, `date`, `range`, etc., for better form data validation.\n- **`<datalist>`:** Provides an autocomplete feature on form inputs.\n- **Placeholder:** A short hint that describes the expected value of an input field.\n- **Required Attribute:** Forces the user to fill out the field before submitting a form.\n\n#### **Multimedia and Graphics**\n- **Scalable Vector Graphics (SVG):** XML-based markup language for creating vector images.\n- **WebGL:** A JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser.\n  \n#### **Connectivity and Performance**\n- **WebSocket API:** Enables bidirectional communication between a client and server, allowing real-time data transfer.\n- **IndexedDB:** A client-side storage solution for storing significant amounts of structured data.\n\n#### **Browser Support and Compatibility**\n- **Fallback Content:** Content that is displayed if a browser doesn't support a particular HTML5 element.\n- **Doctype Declaration (`<!DOCTYPE html>`):** Simplified in HTML5, it signals that the document uses the HTML5 specification.\n\nThese terminologies are essential for understanding the differences and improvements HTML5 brought over previous versions of HTML, allowing for more powerful, efficient, and interactive web applications.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5423d80c-4049-48b6-a61d-ac0885676160","order":0,"createdDate":{"$date":"2024-09-06T07:33:23.631Z"},"updatedDate":{"$date":"2024-09-06T07:33:23.631Z"},"uniqueId":"ab30db16-ec08-45ee-99ff-b3c2d43d0e30","__v":0}
{"_id":{"$oid":"66dab0f40045b6a7c11bd331"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"### HTML Versions and Their Major Features\n\n#### **1. HTML 1.0 (1993)**\n- **First Release of HTML:** Very basic set of tags, mainly for structuring content with elements like `<p>`, `<h1>` to `<h6>`, `<a>`, `<img>`, and `<ul>`.\n- **Lacked Styling and Scripting:** No support for CSS or JavaScript.\n\n#### **2. HTML 2.0 (1995)**\n- **Form Elements:** Introduced forms (`<form>`, `<input>`, `<textarea>`, `<button>`) allowing user input.\n- **Basic Tables:** Added support for basic tables (`<table>`, `<tr>`, `<td>`).\n- **Improved Hyperlinks:** Enhancements in linking mechanisms with attributes like `target`.\n\n#### **3. HTML 3.2 (1997)**\n- **CSS Support:** Basic support for styling using Cascading Style Sheets (CSS).\n- **Tables and Applets:** Better support for complex tables and integration with Java applets.\n- **Scripting Language:** Introduced the use of JavaScript (initially with `<script>` tag).\n- **Attributes for Styling:** Introduced inline styling via attributes like `align`, `bgcolor`, `font` (now deprecated).\n\n#### **4. HTML 4.01 (1999)**\n- **Separation of Content and Style:** Strong emphasis on separating content (HTML) from presentation (CSS).\n- **Internationalization:** Support for multiple languages through attributes like `lang`.\n- **Improved Forms:** Enhanced form control with new attributes like `label` and `fieldset`.\n- **Accessibility:** Added attributes like `id` and `name` for better accessibility and document structure.\n- **Document Object Model (DOM):** Improved interaction between HTML and JavaScript.\n\n#### **5. XHTML 1.0 (2000)**\n- **XML-Based HTML:** Stricter, more standardized version of HTML following XML rules (well-formed documents).\n- **Self-Closing Tags:** Required tags like `<img />` and `<br />` to be self-closed.\n- **Case Sensitivity:** Tags and attributes must be in lowercase.\n\n#### **6. HTML5 (2014)**\n- **Semantic Elements:** Introduced elements like `<article>`, `<section>`, `<header>`, `<footer>`, and `<nav>` for better content structure.\n- **Multimedia Support:** Native support for `<audio>`, `<video>`, and `<canvas>` for multimedia and graphics, without plugins.\n- **New Form Elements:** New input types like `email`, `url`, `date`, and `range`, improving form validation.\n- **Local Storage & Session Storage:** Mechanisms for storing data on the client-side, replacing cookies for certain use cases.\n- **Geolocation API:** Allows websites to access geographical location data.\n- **WebSockets and Web Workers:** Real-time, bidirectional communication and multi-threading support.\n- **Offline Capabilities:** Service workers and application cache for offline functionality.\n- **Simplified Doctype:** Use of `<!DOCTYPE html>` to simplify document declaration.\n\n#### **7. HTML 5.1 (2016)**\n- **Improved Semantics:** Updated elements like `<main>`, allowing better page structure.\n- **Picture Element:** Introduction of `<picture>` for responsive images.\n- **Menu Elements:** Enhanced handling of context menus and navigation.\n\n#### **8. HTML 5.2 (2017)**\n- **Security Improvements:** Better handling of secure context, ensuring HTTPS for sensitive operations.\n- **Dialog Element:** Support for `<dialog>` to create native modal dialogs.\n- **Content Security Policy (CSP):** Introduced to prevent cross-site scripting (XSS) attacks and improve security.\n\n#### **9. HTML 5.3 (Upcoming)**\n- **Additional Form Controls:** More improvements for forms, including enhanced data validation.\n- **Improved Web Components:** Expanded support for custom HTML elements.\n\nEach version of HTML progressively added features for better content structuring, multimedia support, interactivity, and security while aiming to make web development more flexible and user-friendly.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9826b9ac-effa-4ab3-bfcf-4e2763e2c63c","order":0,"createdDate":{"$date":"2024-09-06T07:36:20.846Z"},"updatedDate":{"$date":"2024-09-06T07:36:20.846Z"},"uniqueId":"355b71c7-f888-4c7d-ae0f-21a66254e553","__v":0}
{"_id":{"$oid":"66dab3030045b6a7c11c0bb5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an overview of ReactJS versions with major features:\n\n### React 0.3 (July 2013)\n- **Initial Release**: Early version of React introduced by Facebook.\n\n### React 0.14 (October 2015)\n- **Split of React and ReactDOM**: `react` and `react-dom` were separated into different packages.\n- **Stateless Functional Components**: Introduced functional components.\n\n### React 15 (April 2016)\n- **String Refs**: Deprecated `this.refs.string` in favor of callback `ref` function.\n- **Improved Performance**: Better performance when updating DOM elements.\n- **DOM Attribute Whitelisting**: Restricts rendering invalid HTML attributes.\n\n### React 16 (September 2017)\n- **Fiber Architecture**: Complete rewrite for better performance, especially with animations and gestures.\n- **Error Boundaries**: A mechanism to catch JavaScript errors anywhere in the child component tree.\n- **Fragments**: Return multiple elements from a component render method without a wrapper element.\n- **Portals**: Render children into a DOM node outside of the parent hierarchy.\n\n### React 16.3 (March 2018)\n- **Context API**: Improved context for managing global state without the need for third-party libraries like Redux.\n- **Lifecycle Methods Changes**: Introduction of new lifecycle methods (`getDerivedStateFromProps`, `getSnapshotBeforeUpdate`).\n- **StrictMode**: A wrapper to highlight potential issues in an application.\n\n### React 16.6 (October 2018)\n- **React.memo**: A higher-order component for optimizing functional components.\n- **Suspense**: Helps in loading components lazily (part of Concurrent Mode).\n- **Lazy Loading with React.lazy**: Dynamically import components as needed.\n\n### React 16.8 (February 2019)\n- **React Hooks**: Introduction of `useState`, `useEffect`, `useContext`, and other hooks to manage state and side effects in functional components.\n\n### React 17 (October 2020)\n- **No New Features**: This was a preparatory release focused on making upgrades easier and improving the React ecosystem.\n- **Event Delegation Change**: Changes in how React attaches events to the DOM.\n\n### React 18 (March 2022)\n- **Concurrent Rendering**: Supports rendering updates concurrently with minimal blocking, improving user experience.\n- **Automatic Batching**: Batches multiple updates into a single render.\n- **Transitions**: Manage user input delays while keeping the app responsive with `useTransition`.\n- **Suspense for Data Fetching**: Full support for suspense boundaries to handle asynchronous data fetching.\n\nThese are the major features across versions of ReactJS. Each update has progressively improved performance, usability, and provided more powerful tools to developers.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5c662a38-4e6e-40ff-adf3-c8ceb9243a6a","order":0,"createdDate":{"$date":"2024-09-06T07:45:07.253Z"},"updatedDate":{"$date":"2024-09-06T07:45:07.253Z"},"uniqueId":"d01d5851-e825-4ca3-81c5-cf349e71c3b6","__v":0}
{"_id":{"$oid":"66dab3600045b6a7c11c310e"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s an overview of Node.js versions with major features:\n\n### Node.js 0.x (Initial Releases, 2009-2015)\n- **Node.js 0.1 (May 2009)**: Initial release with basic features and capabilities.\n- **Node.js 0.10 (March 2013)**: Introduction of streams2, improved performance and stability.\n- **Node.js 0.12 (February 2015)**: Enhanced performance, support for new ES6 features, and upgraded dependencies.\n\n### Node.js 4.x (September 2015)\n- **LTS Release**: First Long-Term Support release.\n- **V8 4.5**: Updated V8 JavaScript engine for improved performance.\n- **ES6 Features**: Support for ES6 features such as classes, arrow functions, and template strings.\n\n### Node.js 6.x (April 2016)\n- **LTS Release**: Introduced as a Long-Term Support release.\n- **NPM 3**: Updated npm version with improved performance and new features.\n- **V8 5.0**: Improved V8 JavaScript engine.\n- **Async Hooks**: Basic support for tracking asynchronous operations.\n\n### Node.js 8.x (May 2017)\n- **LTS Release**: Stabilized for long-term support.\n- **Async/Await**: Added support for async/await syntax.\n- **N-API**: Introduced Node API (N-API) for building native addons.\n- **V8 6.0**: Upgraded V8 engine for better performance.\n\n### Node.js 10.x (April 2018)\n- **LTS Release**: Focused on performance improvements and long-term support.\n- **Improved Diagnostics**: Better diagnostic tools and improved error messages.\n- **V8 6.8**: Further enhancements in the V8 engine.\n- **HTTP/2 Support**: Basic support for HTTP/2 protocol.\n\n### Node.js 12.x (April 2019)\n- **LTS Release**: Enhanced stability and long-term support features.\n- **V8 7.4**: Updated V8 engine for improved performance and new JavaScript features.\n- **ECMAScript Modules**: Experimental support for ECMAScript modules (`import`/`export`).\n- **Diagnostic Reports**: Built-in diagnostic reports for better debugging.\n\n### Node.js 14.x (April 2020)\n- **LTS Release**: Long-term support with improved features and stability.\n- **V8 8.1**: Updated V8 engine with new features and performance improvements.\n- **NPM 6**: Upgraded npm to version 6 with performance improvements.\n- **Optional Chaining**: Support for optional chaining (`?.`) and nullish coalescing (`??`) operators.\n- **Diagnostic Report Improvements**: Enhanced diagnostic report features.\n\n### Node.js 16.x (April 2021)\n- **LTS Release**: Long-term support with newer features and improvements.\n- **V8 9.0**: New V8 engine features and optimizations.\n- **NPM 7**: Updated npm version with workspaces and improved package-lock.\n- **Core Modules**: Several core modules updated and improved.\n- **Async Local Storage**: Support for `AsyncLocalStorage` API for context management.\n\n### Node.js 18.x (April 2022)\n- **LTS Release**: Enhanced features and improvements.\n- **V18.0**: New V8 engine features and performance enhancements.\n- **Fetch API**: Experimental support for the `fetch` API for making HTTP requests.\n- **Global This**: Introduction of `globalThis` for accessing the global object.\n\nThese versions highlight significant changes and improvements in Node.js, providing better performance, new features, and improved stability over time.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"89aaf615-bd19-4494-809a-c0f83a519be9","order":0,"createdDate":{"$date":"2024-09-06T07:46:40.931Z"},"updatedDate":{"$date":"2024-09-06T07:46:40.931Z"},"uniqueId":"1aca9b71-96b4-4e62-8d89-fec5379cc29d","__v":0}
{"_id":{"$oid":"66dab48c0045b6a7c11c6eca"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s a categorized list of key AngularJS terminologies with one-liner definitions:\n\n### Core Concepts\n- **AngularJS**: A JavaScript framework for building dynamic single-page applications (SPAs) using MVC architecture.\n- **Model-View-Controller (MVC)**: A design pattern used by AngularJS to separate concerns by dividing application into models, views, and controllers.\n- **Two-Way Data Binding**: Synchronizes data between the model and view so that changes in one automatically update the other.\n\n### Directives\n- **Directive**: A special marker on a DOM element that tells AngularJS to do something to that element or its children.\n- **ng-model**: A directive that binds the value of HTML controls (like input fields) to application data.\n- **ng-repeat**: A directive for repeating a set of HTML elements for each item in a collection.\n\n### Dependency Injection\n- **Dependency Injection (DI)**: A design pattern used to inject dependencies (like services) into AngularJS components and controllers.\n- **Service**: A singleton object or function that provides specific functionality and is used for business logic or data handling.\n- **Factory**: A service that returns an object or function, used to create instances of services or objects.\n\n### Data Binding\n- **Expression**: A JavaScript expression used within AngularJS templates to bind data and display dynamic content.\n- **Interpolation**: The process of embedding expressions in HTML using double curly braces `{{ }}`.\n- **Filters**: Functions that format or transform data in templates and expressions.\n\n### Components\n- **Controller**: A JavaScript function that initializes the data for the view and handles user input.\n- **Scope**: An object that refers to the application model and serves as the binding context for expressions.\n- **$rootScope**: A parent scope available throughout the application, accessible by all other scopes.\n\n### Services\n- **$http**: A service used to make HTTP requests to a server and handle responses.\n- **$timeout**: A service that allows you to execute code after a specified delay, similar to `setTimeout` in vanilla JavaScript.\n- **$q**: A service used for handling asynchronous operations with promises.\n\n### Routing\n- **$routeProvider**: A service used to configure routes in AngularJS applications.\n- **ngRoute**: A module that provides routing and deep linking capabilities for AngularJS applications.\n\n### Miscellaneous\n- **ng-app**: A directive that initializes an AngularJS application.\n- **ng-controller**: A directive that defines a controller for the associated view.\n- **ng-init**: A directive used to initialize data in the scope.\n\nThese terms are fundamental to understanding AngularJS and its functionality, providing a solid foundation for working with this JavaScript framework.\n\nCertainly! Here are additional key terminologies for AngularJS:\n\n### Data Handling\n- **$httpBackend**: A mock service used for testing that simulates HTTP requests and responses.\n- **$resource**: A service that simplifies interactions with RESTful server-side data sources.\n- **$cacheFactory**: A service used to create and manage in-memory caches.\n\n### Directives\n- **ng-show / ng-hide**: Directives that conditionally show or hide elements based on the value of an expression.\n- **ng-class**: A directive that dynamically sets CSS classes on an element based on an expression.\n- **ng-if**: A directive that includes or excludes an element from the DOM based on the truthiness of an expression.\n\n### Dependency Injection\n- **Provider**: A configurable service factory used to create and configure services.\n- **Injector**: An internal AngularJS service responsible for instantiating and injecting dependencies.\n\n### Scope and Binding\n- **Child Scope**: A scope that inherits from its parent scope, allowing for hierarchical data binding.\n- **$watch**: A method used to observe changes to a model and execute a callback function when changes occur.\n- **$apply**: A method that ensures expressions are evaluated and applied to the scope, triggering a digest cycle.\n\n### Services and Factories\n- **Service Worker**: Not AngularJS-specific but can be used with AngularJS to handle background tasks, caching, and offline capabilities.\n- **$location**: A service that provides information about and allows manipulation of the browser's URL.\n- **$filter**: A service that provides built-in and custom filters for transforming data in expressions and templates.\n\n### Testing\n- **$httpBackend**: A mock service used for testing HTTP requests in AngularJS applications.\n- **$rootScope.$apply()**: A method used to manually trigger a digest cycle during testing.\n- **Angular Mocks**: A library that provides utilities for unit testing AngularJS applications, including mocks and spies.\n\n### Animation\n- **ngAnimate**: A module that provides support for animations in AngularJS applications.\n- **$animate**: A service used to control animations and transitions for AngularJS directives.\n\n### Customization\n- **ng-model-options**: A directive used to configure the behavior of `ng-model` including debounce time and update strategy.\n- **ng-form**: A directive that creates a form object, which allows for nested forms and better control of form validation.\n\nThese additional terms cover more advanced features and customization options in AngularJS, enhancing your understanding of this framework.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2d763e6b-1230-4269-902f-9a8cf3995390","order":0,"createdDate":{"$date":"2024-09-06T07:51:40.483Z"},"updatedDate":{"$date":"2024-09-06T07:51:40.483Z"},"uniqueId":"ef2d1ce7-4710-4c07-96dc-e47d772abcf4","__v":0}
{"_id":{"$oid":"66dab5790045b6a7c11c816c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are key terminologies for Angular (Angular 2+), grouped by categories:\n\n### Core Concepts\n- **Module**: A container for a cohesive block of code dedicated to an application domain or a workflow.\n- **Component**: A building block of Angular applications, defining a view and its associated behavior.\n- **Service**: A class with a specific purpose, such as data access or business logic, that can be injected into components or other services.\n- **Dependency Injection (DI)**: A design pattern used for injecting dependencies into components or services rather than hard-coding them.\n\n### Directives\n- **Structural Directive**: Directives that change the DOM layout by adding or removing elements (e.g., `*ngIf`, `*ngFor`).\n- **Attribute Directive**: Directives that change the appearance or behavior of an element (e.g., `ngClass`, `ngStyle`).\n\n### Data Binding\n- **Interpolation**: A technique for embedding expressions in HTML templates using `{{ }}` syntax.\n- **Property Binding**: Binding a property of a DOM element to a component property using `[property]=\"expression\"`.\n- **Event Binding**: Binding a DOM event to a component method using `(event)=\"handler\"` syntax.\n- **Two-Way Binding**: Synchronizing data between the component and the view using `[(ngModel)]`.\n\n### Routing\n- **Router**: A service that facilitates navigation between views or components in an Angular application.\n- **Route**: A configuration that maps a URL path to a component.\n- **RouterLink**: A directive used to navigate to a route when an element is clicked.\n- **RouterOutlet**: A directive where routed components are displayed.\n\n### Forms\n- **Reactive Forms**: A model-driven approach to handling form inputs, using `FormGroup`, `FormControl`, and `FormBuilder`.\n- **Template-Driven Forms**: A form handling approach using Angular directives in the template, such as `ngModel` and `ngForm`.\n\n### Lifecycle Hooks\n- **ngOnInit**: A lifecycle hook called after Angular has initialized the component's data-bound properties.\n- **ngOnChanges**: A lifecycle hook called when input properties change.\n- **ngOnDestroy**: A lifecycle hook called before the component is destroyed.\n\n### Pipes\n- **Pipe**: A feature used to transform data in templates (e.g., `DatePipe`, `CurrencyPipe`).\n- **Async Pipe**: A pipe that subscribes to an Observable or Promise and returns the latest value.\n\n### Angular CLI\n- **ng**: The Angular Command Line Interface (CLI) used to create, build, and manage Angular applications.\n- **ng serve**: A command to build and serve the application locally with live-reload.\n\n### RxJS\n- **Observable**: A stream of data that can be subscribed to and manipulated asynchronously.\n- **Subject**: A type of Observable that allows values to be multicasted to many Observers.\n- **Operators**: Functions used to transform, filter, or combine Observables (e.g., `map`, `filter`, `mergeMap`).\n\n### Change Detection\n- **Change Detection**: The mechanism Angular uses to keep the view in sync with the model by checking for changes in data.\n- **ChangeDetectorRef**: A service that allows manual control of the change detection process.\n\n### Compilation\n- **Ahead-of-Time (AOT) Compilation**: A compilation method where the Angular templates and components are compiled during the build time.\n- **Just-in-Time (JIT) Compilation**: A compilation method where Angular templates and components are compiled at runtime.\n\n### Security\n- **Sanitization**: The process of cleaning and validating untrusted data to prevent security vulnerabilities like XSS (Cross-Site Scripting).\n- **DomSanitizer**: A service used to sanitize potentially dangerous values.\n\nThese terminologies cover the core concepts, features, and utilities that are fundamental to understanding and working with Angular.\n\nCertainly! Here are a few more key terminologies for Angular (Angular 2+):\n\n### Angular Elements\n- **Angular Elements**: A feature that allows Angular components to be used as custom elements (web components) in other frameworks or vanilla JavaScript.\n\n### Change Detection Strategies\n- **Default Change Detection**: The default strategy where Angular checks all components for changes in each change detection cycle.\n- **OnPush Change Detection**: A strategy that optimizes performance by checking components only when their input properties change or an event occurs within the component.\n\n### Angular Material\n- **Angular Material**: A UI component library that provides pre-designed components following Google's Material Design principles (e.g., `mat-button`, `mat-form-field`).\n\n### NgModules\n- **Root Module**: The main module of an Angular application, typically named `AppModule`, which bootstraps the application.\n- **Feature Module**: Modules that encapsulate a specific feature or set of functionalities within the application.\n\n### Angular Universal\n- **Angular Universal**: A technology for server-side rendering (SSR) of Angular applications, improving performance and SEO.\n\n### NgRx\n- **NgRx**: A library for managing state in Angular applications using the Redux pattern, incorporating stores, actions, reducers, and effects.\n\n### Lazy Loading\n- **Lazy Loading**: A technique to load feature modules or components on demand, improving initial load time and performance.\n\n### Directives and Decorators\n- **Decorator**: A function used to add metadata to classes and their members, such as `@Component`, `@Injectable`, and `@NgModule`.\n- **Structural Directive**: Directives that alter the structure of the DOM (e.g., `*ngIf`, `*ngFor`).\n\n### Guards\n- **Route Guard**: Services that can be used to control navigation to routes based on certain conditions (e.g., `CanActivate`, `CanDeactivate`).\n\n### Interceptors\n- **HTTP Interceptor**: A service that intercepts HTTP requests and responses, allowing for modifications like adding authentication tokens or handling errors.\n\n### Providers\n- **Provider**: A configuration that determines how Angular creates and delivers a dependency, often used in `@NgModule` and `@Component` metadata.\n\n### Decorators\n- **@Injectable**: A decorator indicating that a class can be injected as a dependency.\n- **@Component**: A decorator that marks a class as an Angular component and provides metadata for it.\n\n### Angular Ivy\n- **Angular Ivy**: The rendering engine introduced in Angular 9, offering improved build times, reduced bundle sizes, and better debugging.\n\n### ViewChild and ViewChildren\n- **ViewChild**: A decorator used to get a reference to a child component, directive, or DOM element from within the parent component.\n- **ViewChildren**: A decorator used to query multiple child components, directives, or DOM elements from within the parent component.\n\n### Change Detection\n- **ChangeDetectorRef**: A service that allows manual control over the change detection process.\n\n### Angular CLI Commands\n- **ng build**: A command to compile the Angular application into an output directory.\n- **ng test**: A command to run unit tests for the Angular application.\n\nThese additional terminologies further enrich the understanding of Angular’s ecosystem and tools.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ae84d6d4-180e-42b1-88e5-5cb1320af81e","order":0,"createdDate":{"$date":"2024-09-06T07:55:37.574Z"},"updatedDate":{"$date":"2024-09-06T07:55:37.574Z"},"uniqueId":"7616d1ee-da88-4b8a-9685-9eebd433d98d","__v":0}
{"_id":{"$oid":"66dab6020045b6a7c11c942f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In React, hooks are special functions that allow you to \"hook into\" React state and lifecycle features from function components. They enable you to use React features without writing a class. Hooks were introduced in React 16.8 and have since become a fundamental part of building React applications. Here are some key hooks in React:\n\n### **1. `useState`**\n- **Purpose**: Adds state to function components.\n- **Usage**: `const [state, setState] = useState(initialState);`\n\n### **2. `useEffect`**\n- **Purpose**: Performs side effects in function components, such as fetching data or updating the DOM.\n- **Usage**: `useEffect(() => { /* effect */ }, [dependencies]);`\n\n### **3. `useContext`**\n- **Purpose**: Accesses the context value from a Context provider.\n- **Usage**: `const value = useContext(MyContext);`\n\n### **4. `useReducer`**\n- **Purpose**: Manages more complex state logic using a reducer function.\n- **Usage**: `const [state, dispatch] = useReducer(reducer, initialState);`\n\n### **5. `useCallback`**\n- **Purpose**: Returns a memoized callback function that only changes if its dependencies change.\n- **Usage**: `const memoizedCallback = useCallback(() => { /* callback */ }, [dependencies]);`\n\n### **6. `useMemo`**\n- **Purpose**: Returns a memoized value that only changes if its dependencies change.\n- **Usage**: `const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);`\n\n### **7. `useRef`**\n- **Purpose**: Accesses or manipulates DOM elements and persists values across renders.\n- **Usage**: `const ref = useRef(initialValue);`\n\n### **8. `useImperativeHandle`**\n- **Purpose**: Customizes the instance value that is exposed when using `ref` with forward refs.\n- **Usage**: `useImperativeHandle(ref, () => ({ /* exposed values */ }), [dependencies]);`\n\n### **9. `useLayoutEffect`**\n- **Purpose**: Similar to `useEffect`, but fires synchronously after all DOM mutations.\n- **Usage**: `useLayoutEffect(() => { /* effect */ }, [dependencies]);`\n\n### **10. `useDebugValue`**\n- **Purpose**: Displays a label for custom hooks in React DevTools.\n- **Usage**: `useDebugValue(value);`\n\n### **11. `useTransition` (React 18+)**\n- **Purpose**: Allows for marking certain updates as non-urgent.\n- **Usage**: `const [isPending, startTransition] = useTransition();`\n\n### **12. `useDeferredValue` (React 18+)**\n- **Purpose**: Defers the value of a state to avoid blocking user interactions.\n- **Usage**: `const deferredValue = useDeferredValue(value);`\n\nHooks enable you to build more modular and reusable components by separating stateful logic from the UI logic. They help you avoid the complexity of class components and make it easier to share stateful logic across components.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"bf556893-7c29-44da-a6b6-cd7260fe78bc","order":0,"createdDate":{"$date":"2024-09-06T07:57:54.439Z"},"updatedDate":{"$date":"2024-09-06T07:57:54.439Z"},"uniqueId":"0d7824c5-0e59-47c4-a7a6-42dd3e25154c","__v":0}
{"_id":{"$oid":"66dab6460045b6a7c11cb9ff"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"A Higher-Order Component (HOC) is a pattern in React used to reuse component logic. An HOC is a function that takes a component and returns a new component with additional props or functionality.\n\n### **Key Points:**\n\n- **Definition**: A Higher-Order Component is a function that accepts a component and returns a new component with enhanced capabilities.\n\n- **Purpose**: HOCs are used to add common logic or features to multiple components without repeating code. This allows you to apply the same logic to different components and keep them clean and focused.\n\n- **Syntax**: \n  ```jsx\n  function withExtraProps(WrappedComponent) {\n    return function EnhancedComponent(props) {\n      // Add or modify props\n      const extraProps = { additionalProp: 'value' };\n\n      return <WrappedComponent {...props} {...extraProps} />;\n    };\n  }\n  ```\n\n- **Example**:\n  ```jsx\n  // Higher-Order Component\n  function withLoadingSpinner(WrappedComponent) {\n    return function WithLoadingSpinner(props) {\n      const { isLoading, ...rest } = props;\n\n      if (isLoading) {\n        return <div>Loading...</div>;\n      }\n\n      return <WrappedComponent {...rest} />;\n    };\n  }\n\n  // Regular Component\n  function MyComponent({ data }) {\n    return <div>{data}</div>;\n  }\n\n  // Enhanced Component with loading spinner\n  const MyComponentWithLoading = withLoadingSpinner(MyComponent);\n\n  // Usage\n  function App() {\n    return <MyComponentWithLoading isLoading={true} data=\"Some Data\" />;\n  }\n  ```\n\n### **Usage Scenarios**:\n\n1. **Code Reuse**: Apply shared logic or functionality to multiple components (e.g., adding authentication checks, logging).\n\n2. **Cross-Cutting Concerns**: Handle concerns like data fetching, user permissions, or form validation.\n\n3. **Enhancements**: Modify or add props to components dynamically based on certain conditions.\n\nHOCs provide a powerful way to enhance components by abstracting and reusing common functionality, leading to cleaner and more maintainable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b907f231-11c7-4bda-82e3-0b44c956f9b8","order":0,"createdDate":{"$date":"2024-09-06T07:59:02.814Z"},"updatedDate":{"$date":"2024-09-06T07:59:02.814Z"},"uniqueId":"fedeb242-46b2-4a66-8364-f149643738f7","__v":0}
{"_id":{"$oid":"66dacc190045b6a7c11d3d6f"},"name":"Using Java, pre-java 8 syntax, Optimized one","heading":"Using Java, pre-java 8 syntax, Optimized one","smartContent":{"content":"Here’s an optimized version of your code, using pre-Java 8 syntax. Improvements include better handling of edge cases, simplified logic, and clearer variable naming.\n\n### Optimized Code:\n\n```java\npackage com.coding.practice.codes.level1.a_fibonacciSeries;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TraditionalApproach {\n    public static void main(String[] args) {\n        List<Integer> series = getFibonacciSeries(10);\n        System.out.println(series);\n    }\n\n    private static List<Integer> getFibonacciSeries(int n) {\n        List<Integer> result = new ArrayList<>();\n\n        if (n < 1) {\n            System.out.println(\"Invalid input: \" + n);\n            return result;\n        }\n\n        // Add initial two Fibonacci numbers\n        result.add(0);\n        if (n > 1) {\n            result.add(1);\n        }\n\n        // Generate Fibonacci series\n        for (int i = 2; i < n; i++) {\n            int next = result.get(i - 1) + result.get(i - 2);\n            result.add(next);\n        }\n\n        return result;\n    }\n}\n```\n\n### Changes:\n1. **Simplified Edge Case Handling**: The function now handles cases for `n < 1`, `n = 1`, and `n > 1` in a more straightforward way.\n2. **Removed Redundant Conditions**: Removed unnecessary conditional branches for when `n == 0` or `n == 1`.\n3. **Improved Variable Naming**: Changed `i` to `n` to clearly represent the number of terms.\n4. **Simplified Loop**: The loop now starts at 2 and runs only when `n > 1`, making it cleaner and more efficient.\n\n## Time and space complexity\n\nThe time and space complexity of the updated Fibonacci program are as follows:\n\n### Time Complexity:\n- The loop runs `n - 2` times, where `n` is the number of Fibonacci terms to be generated.\n- Each loop iteration performs a constant amount of work (retrieving and adding two numbers).\n- Hence, the time complexity is **O(n)**, as the loop iterates linearly with respect to `n`.\n\n### Space Complexity:\n- The space used by the program is primarily for storing the Fibonacci series in the `result` list, which contains `n` elements.\n- Therefore, the space complexity is **O(n)**, as the list grows linearly with the number of Fibonacci terms. \n\nBoth time and space complexity are **O(n)**.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e72927f1-08e8-44d9-892d-dfa557b01a2f","order":0,"createdDate":{"$date":"2024-09-06T09:32:09.754Z"},"updatedDate":{"$date":"2024-09-06T09:39:20.163Z"},"uniqueId":"f073063d-0e4b-4fe6-9efb-9d26fb270a1e","__v":0}
{"_id":{"$oid":"66dad1ad0045b6a7c11d7581"},"name":"Using Java 8 syntax, Optimized one","heading":"Using Java 8 syntax, Optimized one","smartContent":{"content":"Here’s the updated program using Java 8 syntax, utilizing streams and lambda expressions:\n\n```java\npackage com.coding.practice.codes.level1.a_fibonacciSeries;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Java8Approach {\n    public static void main(String[] args) {\n        List<Integer> series = getFibonacciSeries(10);\n        System.out.println(series);\n    }\n\n    private static List<Integer> getFibonacciSeries(int count) {\n        if (count < 0) {\n            System.out.println(\"Invalid number: \" + count);\n            return List.of();\n        }\n\n        return Stream.iterate(new int[]{0, 1}, f -> new int[]{f[1], f[0] + f[1]})\n                .limit(count)\n                .map(f -> f[0])\n                .collect(Collectors.toList());\n    }\n}\n```\n\n### Key Changes:\n- **Streams**: Used `Stream.iterate()` to generate a stream of Fibonacci pairs.\n- **Lambda**: Each Fibonacci pair is calculated using a lambda expression.\n- **Collectors**: The stream is collected into a `List<Integer>`.\n\nThis approach is concise and leverages the power of functional programming introduced in Java 8.\n\n\n##  Time and space complexity\n\nThe time and space complexity of the updated program using Java 8 streams are as follows:\n\n### Time Complexity:\n- The program generates the Fibonacci sequence using `Stream.iterate()`, which performs a constant-time operation for each element in the sequence (calculating the next Fibonacci number).\n- Since the program generates `n` Fibonacci numbers, the time complexity is **O(n)**, where `n` is the number of Fibonacci numbers to be generated.\n\n### Space Complexity:\n- The space complexity is **O(n)** as well, because the program stores `n` Fibonacci numbers in a `List<Integer>`.\n\nThus, the overall complexity for this updated program is:\n- **Time Complexity**: **O(n)**\n- **Space Complexity**: **O(n)**","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e72927f1-08e8-44d9-892d-dfa557b01a2f","order":0,"createdDate":{"$date":"2024-09-06T09:55:57.031Z"},"updatedDate":{"$date":"2024-09-06T09:55:57.031Z"},"uniqueId":"3beaca43-2936-410b-b045-a2def5478833","__v":0}
{"_id":{"$oid":"66dae1050045b6a7c11d9afa"},"name":"a few more examples that use Stream.iterate in Java 8","heading":"a few more examples that use Stream.iterate in Java 8","smartContent":{"content":"Here are a few more examples that use `Stream.iterate` in Java 8:\n\n### 1. Generate a Sequence of Even Numbers\n```java\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class EvenNumbers {\n    public static void main(String[] args) {\n        List<Integer> evenNumbers = Stream.iterate(0, n -> n + 2)\n                                          .limit(10)\n                                          .collect(Collectors.toList());\n\n        System.out.println(evenNumbers);\n    }\n}\n```\n- **Output**: `[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]`\n\n### 2. Generate a Geometric Progression (Multiplying by a Constant Factor)\n```java\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class GeometricProgression {\n    public static void main(String[] args) {\n        List<Integer> gp = Stream.iterate(1, n -> n * 2)\n                                 .limit(10)\n                                 .collect(Collectors.toList());\n\n        System.out.println(gp);\n    }\n}\n```\n- **Output**: `[1, 2, 4, 8, 16, 32, 64, 128, 256, 512]`\n\n### 3. Generate Powers of a Number\n```java\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class PowerOfThree {\n    public static void main(String[] args) {\n        List<Integer> powersOfThree = Stream.iterate(1, n -> n * 3)\n                                            .limit(10)\n                                            .collect(Collectors.toList());\n\n        System.out.println(powersOfThree);\n    }\n}\n```\n- **Output**: `[1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]`\n\n### 4. Generate a Sequence of Factorials\n```java\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class FactorialSequence {\n    public static void main(String[] args) {\n        List<Integer> factorials = Stream.iterate(new int[]{1, 1}, n -> new int[]{n[0] + 1, n[1] * (n[0] + 1)})\n                                         .limit(10)\n                                         .map(n -> n[1])\n                                         .collect(Collectors.toList());\n\n        System.out.println(factorials);\n    }\n}\n```\n- **Output**: `[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]`\n\n### 5. Generate Fibonacci Series (Alternative Approach)\n```java\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class FibonacciSeries {\n    public static void main(String[] args) {\n        List<Integer> fibonacci = Stream.iterate(new int[]{0, 1}, n -> new int[]{n[1], n[0] + n[1]})\n                                        .limit(10)\n                                        .map(n -> n[0])\n                                        .collect(Collectors.toList());\n\n        System.out.println(fibonacci);\n    }\n}\n```\n- **Output**: `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`\n\n### 6. Generate an Infinite Stream of Random Numbers\n```java\nimport java.util.Random;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.List;\n\npublic class RandomNumbers {\n    public static void main(String[] args) {\n        Random random = new Random();\n        List<Integer> randomNumbers = Stream.iterate(random.nextInt(), n -> random.nextInt())\n                                            .limit(10)\n                                            .collect(Collectors.toList());\n\n        System.out.println(randomNumbers);\n    }\n}\n```\n- **Output**: This will generate 10 random numbers each time.\n\nThese examples demonstrate the versatility of `Stream.iterate()` for creating sequences and performing computations in a functional style.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"6dd50ed3-a3d0-4479-934f-84799485d944","order":0,"createdDate":{"$date":"2024-09-06T11:01:25.827Z"},"updatedDate":{"$date":"2024-09-06T11:02:02.256Z"},"uniqueId":"0249e6ae-f968-43ee-8cc1-41bcab749772","__v":0}
{"_id":{"$oid":"66dae7670045b6a7c11dd31e"},"name":"use cases for IntStream in Java","heading":"use cases for IntStream in Java","smartContent":{"content":"Here are a few use cases for `IntStream` in Java:\n\n### 1. **Generate a Range of Numbers**\nUse `IntStream.range()` to generate a stream of integers within a specific range.\n```java\nimport java.util.stream.IntStream;\n\npublic class RangeExample {\n    public static void main(String[] args) {\n        IntStream.range(1, 10).forEach(System.out::println);\n    }\n}\n```\n- **Output**: `1 2 3 4 5 6 7 8 9`\n\n### 2. **Sum of Elements in an Array**\nCalculate the sum of all elements in an `int[]` array.\n```java\nimport java.util.stream.IntStream;\n\npublic class ArraySum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int sum = IntStream.of(numbers).sum();\n        System.out.println(\"Sum: \" + sum);\n    }\n}\n```\n- **Output**: `Sum: 15`\n\n### 3. **Check if All Numbers are Even**\nUse `IntStream` to check if all numbers in a range are even.\n```java\nimport java.util.stream.IntStream;\n\npublic class AllEvenCheck {\n    public static void main(String[] args) {\n        boolean allEven = IntStream.range(1, 10).allMatch(n -> n % 2 == 0);\n        System.out.println(\"All numbers are even: \" + allEven);\n    }\n}\n```\n- **Output**: `All numbers are even: false`\n\n### 4. **Find Maximum Element in an Array**\nFind the maximum value in an array of integers.\n```java\nimport java.util.stream.IntStream;\n\npublic class MaxElement {\n    public static void main(String[] args) {\n        int[] numbers = {3, 5, 7, 2, 8};\n        int max = IntStream.of(numbers).max().orElse(-1);\n        System.out.println(\"Max: \" + max);\n    }\n}\n```\n- **Output**: `Max: 8`\n\n### 5. **Generate a Stream of Random Numbers**\nUse `IntStream.generate()` to create an infinite stream of random numbers.\n```java\nimport java.util.Random;\nimport java.util.stream.IntStream;\n\npublic class RandomNumbers {\n    public static void main(String[] args) {\n        Random random = new Random();\n        IntStream.generate(random::nextInt).limit(5).forEach(System.out::println);\n    }\n}\n```\n- **Output**: (Random numbers)\n\n### 6. **Filter and Collect Even Numbers**\nUse `IntStream` to filter out even numbers from a range and collect them into a list.\n```java\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class FilterEvenNumbers {\n    public static void main(String[] args) {\n        List<Integer> evens = IntStream.range(1, 20)\n                                       .filter(n -> n % 2 == 0)\n                                       .boxed()\n                                       .collect(Collectors.toList());\n        System.out.println(evens);\n    }\n}\n```\n- **Output**: `[2, 4, 6, 8, 10, 12, 14, 16, 18]`\n\n### 7. **Map Integer Stream to Square Values**\nSquare each element in the stream using `map()` operation.\n```java\nimport java.util.stream.IntStream;\n\npublic class SquareNumbers {\n    public static void main(String[] args) {\n        IntStream.range(1, 5)\n                 .map(n -> n * n)\n                 .forEach(System.out::println);\n    }\n}\n```\n- **Output**: `1 4 9 16`\n\n### 8. **Parallel Processing**\nPerform parallel operations on the stream using `parallel()`.\n```java\nimport java.util.stream.IntStream;\n\npublic class ParallelProcessing {\n    public static void main(String[] args) {\n        IntStream.range(1, 10).parallel().forEach(System.out::println);\n    }\n}\n```\n- **Output**: Numbers from 1 to 9 printed in parallel (order may vary).\n\n### 9. **Find Prime Numbers**\nUse `IntStream` to find and print prime numbers in a range.\n```java\nimport java.util.stream.IntStream;\n\npublic class PrimeNumbers {\n    public static void main(String[] args) {\n        IntStream.range(2, 50)\n                 .filter(PrimeNumbers::isPrime)\n                 .forEach(System.out::println);\n    }\n\n    private static boolean isPrime(int number) {\n        return IntStream.range(2, (int) Math.sqrt(number) + 1)\n                        .noneMatch(n -> number % n == 0);\n    }\n}\n```\n- **Output**: Prime numbers between 2 and 50.\n\n### 10. **Sum of Squares**\nCalculate the sum of squares of numbers from 1 to 10.\n```java\nimport java.util.stream.IntStream;\n\npublic class SumOfSquares {\n    public static void main(String[] args) {\n        int sumOfSquares = IntStream.range(1, 11)\n                                    .map(n -> n * n)\n                                    .sum();\n        System.out.println(\"Sum of squares: \" + sumOfSquares);\n    }\n}\n```\n- **Output**: `Sum of squares: 385`\n\nThese examples demonstrate how `IntStream` can be effectively used for a variety of operations, including filtering, mapping, parallel processing, and mathematical operations.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9678fb13-fd7b-4543-b4f8-b5fc00eb7388","order":0,"createdDate":{"$date":"2024-09-06T11:28:39.981Z"},"updatedDate":{"$date":"2024-09-06T11:29:11.864Z"},"uniqueId":"8bac351a-cdbc-463d-9446-9ba61a141bb8","__v":0}
{"_id":{"$oid":"66db049d0045b6a7c11ead1d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a code snippet to fill the `input` array with the values from the `valid` and `invalid` arrays:\n\n```java\npublic class ArrayFillExample {\n    public static void main(String[] args) {\n        String[] valid = {\n            \"madam\", \"racecar\", \"121\", \"A man, a plan, a canal, Panama\", \"Able was I ere I saw Elba\"\n        };\n        String[] invalid = {\n            \"hello\", \"apple\", \"12345\", \"Palindrome\", \"world\"\n        };\n\n        // Create an array to hold both valid and invalid strings\n        String[] input = new String[valid.length + invalid.length];\n\n        // Fill the input array with valid values\n        System.arraycopy(valid, 0, input, 0, valid.length);\n\n        // Fill the input array with invalid values\n        System.arraycopy(invalid, 0, input, valid.length, invalid.length);\n\n        // Print the result\n        for (String str : input) {\n            System.out.println(str);\n        }\n    }\n}\n```\n\n### Explanation:\n- `System.arraycopy()` is used to copy elements from the `valid` and `invalid` arrays into the `input` array.\n  - `System.arraycopy(valid, 0, input, 0, valid.length);` copies the elements from the `valid` array to the start of the `input` array.\n  - `System.arraycopy(invalid, 0, input, valid.length, invalid.length);` copies the elements from the `invalid` array to the end of the `input` array.\n- This approach efficiently combines both arrays into one without needing manual iteration.","textOutputType":"markdown","textInputType":"TextArea"},"rating":4,"linkedQuestionsId":"8a84a69f-c236-4d6a-8693-8bd669a605d8","order":0,"createdDate":{"$date":"2024-09-06T13:33:17.246Z"},"updatedDate":{"$date":"2024-09-06T13:33:17.246Z"},"uniqueId":"a8b4eba8-029c-465a-bc82-209d7640bd89","__v":0}
{"_id":{"$oid":"66db0d8d0045b6a7c11f0b92"},"name":"Using Pre-java 8 syntax, Optimized one","heading":"Using Pre-java 8 syntax, Optimized one","smartContent":{"content":"Here is the optimized version of your code with improvements to readability, efficiency, and logic. The palindrome check loop has been simplified, and unnecessary variables have been removed.\n\n```java\npackage com.coding.practice.codes.level1.b_palindromeCheck;\n\nimport java.util.Arrays;\n\npublic class TraditionalApproach {\n    public static void main(String[] args) {\n        String[] valid = {\"madam\", \"racecar\", \"121\", \"A man, a plan, a canal, Panama\", \"Able was I ere I saw Elba\"};\n        String[] invalid = {\"hello\", \"apple\", \"12345\", \"Palindrome\", \"world\"};\n\n        // Merge valid and invalid arrays into input\n        String[] input = Arrays.copyOf(valid, valid.length + invalid.length);\n        System.arraycopy(invalid, 0, input, valid.length, invalid.length);\n\n        // Print the result for each string in the input array\n        for (String str : input) {\n            System.out.println(\"Given string: \" + str + \" , is a palindrome: \" + checkPalindrome(str));\n        }\n    }\n\n    private static String normalizeString(String input) {\n        // Remove spaces, punctuation, and make it lowercase\n        return input.replaceAll(\"[\\\\W_]\", \"\").toLowerCase();\n    }\n\n    private static boolean checkPalindrome(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n\n        String normalized = normalizeString(str);\n        int len = normalized.length();\n\n        // Compare characters from start to end\n        for (int i = 0; i < len / 2; i++) {\n            if (normalized.charAt(i) != normalized.charAt(len - i - 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\n### Key Improvements:\n1. **Array Merging:** The input array is now initialized using `Arrays.copyOf()`, reducing redundancy.\n2. **Palindrome Check Logic:** The `checkPalindrome` method has been optimized to return `false` as soon as a mismatch is found, improving efficiency. The loop compares characters from the start and the end in one pass.\n3. **Simplified Conditions:** The condition to check null and empty strings is consolidated into a single return statement.\n\nThis version is more efficient and easier to read, with fewer redundant checks and operations.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"99f5619e-beb9-438b-a3d9-86daeb7851a2","order":0,"createdDate":{"$date":"2024-09-06T14:11:25.816Z"},"updatedDate":{"$date":"2024-09-06T14:26:21.283Z"},"uniqueId":"11f1c56e-abae-436b-97ce-c18160bdcdd0","__v":0}
{"_id":{"$oid":"66db10e60045b6a7c11f1e4d"},"name":"Using Java 8 syntax, Optimized one","heading":"Using Java 8 syntax, Optimized one","smartContent":{"content":"Here's the optimized version of your Java 8 code. The use of `Optional` has been streamlined, and a functional programming approach has been applied to reduce boilerplate code:\n\n```java\npackage com.coding.practice.codes.level1.b_palindromeCheck;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Java8Approach {\n    public static void main(String[] args) {\n        String[] valid = {\"madam\", \"racecar\", \"121\", \"A man, a plan, a canal, Panama\", \"Able was I ere I saw Elba\"};\n        String[] invalid = {\"hello\", \"apple\", \"12345\", \"Palindrome\", \"world\"};\n\n        // Merge valid and invalid arrays into input\n        String[] input = Arrays.copyOf(valid, valid.length + invalid.length);\n        System.arraycopy(invalid, 0, input, valid.length, invalid.length);\n\n        // Print the result for each string in the input array using streams\n        Arrays.stream(input)\n              .forEach(str -> System.out.println(\"Given string: \" + str + \" , is a palindrome: \" + checkPalindrome(str)));\n    }\n\n    private static boolean checkPalindrome(String str) {\n        return Optional.ofNullable(str)\n                .map(s -> s.replaceAll(\"[\\\\W_]\", \"\").toLowerCase()) // Normalize string\n                .map(normalized -> new StringBuilder(normalized).reverse().toString().equals(normalized)) // Compare with reverse\n                .orElse(false); // Handle null cases\n    }\n}\n```\n\n### Key Optimizations:\n1. **Stream API:** Replaced the traditional `for` loop with the `Arrays.stream()` to leverage Java 8's functional style of iteration.\n2. **Simplified Palindrome Check:** Instead of manually comparing characters, it now uses `StringBuilder` to reverse the normalized string and compare it directly.\n3. **Optional Handling:** The `Optional.ofNullable()` safely handles null input, and `orElse(false)` removes the need for a custom exception.\n\nThis version is more concise, utilizes Java 8's functional programming capabilities, and is easier to maintain.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"99f5619e-beb9-438b-a3d9-86daeb7851a2","order":0,"createdDate":{"$date":"2024-09-06T14:25:42.82Z"},"updatedDate":{"$date":"2024-09-06T14:25:42.82Z"},"uniqueId":"2d4f8dd1-add1-4181-b919-e54236d1a0d9","__v":0}
{"_id":{"$oid":"66db189b0045b6a7c11f7d0e"},"name":"Using Pre-java 8 syntax, Optimized one","heading":"Using Pre-java 8 syntax, Optimized one","smartContent":{"content":"Your code is well-structured. Here's an optimized version that simplifies both the recursive and iterative approaches. I've removed unnecessary semicolons and improved readability without changing the core logic:\n\n### Optimized Code:\n```java\npackage com.coding.practice.codes.level1.factorial;\n\npublic class TraditionalApproach {\n    public static void main(String[] args) {\n        int[] arr = {0, 1, 2, 3, 10};\n\n        System.out.println(\"Recursive Approach\");\n        for (int val : arr) {\n            System.out.println(\"Factorial of \" + val + \" = \" + factorialRecursive(val));\n        }\n\n        System.out.println(\"Iterative Approach\");\n        for (int val : arr) {\n            System.out.println(\"Factorial of \" + val + \" = \" + factorialIterative(val));\n        }\n    }\n\n    private static int factorialRecursive(int val) {\n        return (val < 1) ? 1 : val * factorialRecursive(val - 1);\n    }\n\n    private static int factorialIterative(int val) {\n        if (val < 1) {\n            return 1;\n        }\n        int result = 1;\n        for (int i = 2; i <= val; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n```\n\n### Changes made:\n1. Removed redundant semicolons after `println`.\n2. Simplified the recursive method using a ternary operator for conciseness.\n3. Improved the iterative approach by using a more straightforward loop from 2 to `val` to avoid decrementing `val` directly (more intuitive and cleaner).\n4. Added formatted output to clarify which value is being calculated. \n\n### Time Complexity:\n- **Recursive Approach**: O(n) — due to n recursive calls.\n- **Iterative Approach**: O(n) — iterates n times.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5ec91839-8427-48c5-bb31-5b1e6400a800","order":0,"createdDate":{"$date":"2024-09-06T14:58:35.238Z"},"updatedDate":{"$date":"2024-09-06T14:58:35.238Z"},"uniqueId":"0f932821-3d45-4ca7-a7d3-703193dbb017","__v":0}
{"_id":{"$oid":"66db1fb60045b6a7c11fa2db"},"name":"No, Optional has other use cases too other than to avoid `NullPointerException`","heading":"No, Optional has other use cases too other than to avoid `NullPointerException`","smartContent":{"content":"No, `Optional` in Java is not only used for checking null values. While one of its primary purposes is to avoid `NullPointerException` by handling nulls gracefully, it has several other uses and benefits:\n\n### Key Uses of `Optional`:\n1. **Encapsulating values**: It represents a container that may or may not contain a non-null value, thus allowing you to express that a variable could be empty or absent.\n   \n2. **Avoiding null checks**: Instead of traditional null checks, you can use methods like `isPresent()`, `ifPresent()`, `orElse()`, `orElseGet()`, etc., to handle both present and absent values more elegantly.\n\n3. **Method chaining and functional operations**: With `Optional`, you can chain method calls using `map()`, `filter()`, `flatMap()`, etc., making the code more declarative and concise.\n\n4. **Handling default values**: `Optional` helps provide default values with methods like `orElse()` and `orElseGet()`.\n\n5. **Throwing exceptions on absent values**: It also supports throwing exceptions when a value is absent using `orElseThrow()`.\n\n### Example:\n```java\nOptional<String> optionalString = Optional.ofNullable(getSomeValue());\n\n// Avoiding null check\noptionalString.ifPresent(value -> System.out.println(value.toUpperCase()));\n\n// Providing a default value if null\nString defaultString = optionalString.orElse(\"Default Value\");\n\n// Using map and filter\noptionalString.filter(value -> value.length() > 5)\n              .map(String::toUpperCase)\n              .ifPresent(System.out::println);\n```\n\nSo, while `Optional` is commonly used to check for null values, its utility extends far beyond that, helping to write more expressive, readable, and functional-style code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"cd8c01ff-0a94-4081-a557-589f19b79299","order":0,"createdDate":{"$date":"2024-09-06T15:28:54.797Z"},"updatedDate":{"$date":"2024-09-06T15:28:54.797Z"},"uniqueId":"9edb8a62-1ce6-4ec5-8231-f2dbd64ca1f4","__v":0}
{"_id":{"$oid":"66db20370045b6a7c11fc918"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, you can use `Optional` to chain operations on an `int`. Here's an example of how to achieve the behavior where if the value is less than 1, it returns 1, otherwise, it returns twice the value:\n\n### Example:\n```java\nimport java.util.Optional;\n\npublic class OptionalIntExample {\n    public static void main(String[] args) {\n        int input = -5;\n        int result = processValue(input);\n        System.out.println(result);  // Output will be 1, since input is less than 1\n\n        input = 4;\n        result = processValue(input);\n        System.out.println(result);  // Output will be 8, since input >= 1\n    }\n\n    private static int processValue(int val) {\n        return Optional.of(val)\n                .filter(v -> v >= 1)   // If value >= 1, it proceeds, otherwise the optional becomes empty\n                .map(v -> v * 2)       // Multiply by 2 if the value is >= 1\n                .orElse(1);            // Return 1 if value is less than 1\n    }\n}\n```\n\n### Explanation:\n- `Optional.of(val)` creates an `Optional` for the given integer.\n- `.filter(v -> v >= 1)` checks if the value is greater than or equal to 1. If the condition is false, the `Optional` becomes empty.\n- `.map(v -> v * 2)` applies the transformation (multiplying the value by 2) if the value passes the filter.\n- `.orElse(1)` ensures that if the `Optional` is empty (i.e., if the original value was less than 1), it returns 1.\n\nIn this way, `Optional` helps chain the operations in a concise and readable way.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5e04608d-78c4-4e20-997f-4aa3f5816b45","order":0,"createdDate":{"$date":"2024-09-06T15:31:03.931Z"},"updatedDate":{"$date":"2024-09-06T15:31:03.931Z"},"uniqueId":"35e6d434-179e-471b-9539-2f29d005e563","__v":0}
{"_id":{"$oid":"66db29eb0045b6a7c12016bf"},"name":"Using Java 8 syntax, Optimized one","heading":"Using Java 8 syntax, Optimized one","smartContent":{"content":"\n```\npackage com.coding.practice.codes.level1.factorial;\n\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Java8Approach {\n    public static void main(String[] args) {\n        int[] arr = {0, 1, 2, 3, 10};\n\n        System.out.println(\"Recursive Approach\");\n        Arrays.stream(arr).forEach(val -> System.out.println(\"Factorial of \" + val + \" = \" + factorialRecursive(val)));\n\n\n        System.out.println(\"Iterative Approach\");\n        Arrays.stream(arr).forEach(val -> System.out.println(\"Factorial of \" + val + \" = \" + factorialIterative(val)));\n\n    }\n\n    private static int factorialRecursive(int val) {\n        return Optional.of(val)\n                .filter(v -> v >= 1)\n                .map(v -> v * factorialRecursive(v - 1))\n                .orElse(1);\n    }\n\n    private static int factorialIterative(int val) {\n        // Use Optional to handle invalid values\n        return Optional.of(val)\n                .filter(v -> v >= 1) // Filter to only process values >= 1\n                .map(v -> java.util.stream.IntStream.rangeClosed(2, v)\n                        .reduce(1, (a, b) -> a * b)) // Compute factorial\n                .orElse(1); // Return 1 if val < 1 (or empty Optional)\n    }\n}\n\n\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5ec91839-8427-48c5-bb31-5b1e6400a800","order":0,"createdDate":{"$date":"2024-09-06T16:12:27.428Z"},"updatedDate":{"$date":"2024-09-06T16:12:27.428Z"},"uniqueId":"ee7456ce-e97f-424d-8364-4fb45c615dfe","__v":0}
{"_id":{"$oid":"66db35020045b6a7c1207649"},"name":"Second Example","heading":"Second Example","smartContent":{"content":"Here are a few use cases demonstrating the use of `Collectors` in Java 8:\n\n### 1. **Grouping Elements by a Property**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nclass Product {\n    String name;\n    String category;\n\n    Product(String name, String category) {\n        this.name = name;\n        this.category = category;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Product> products = Arrays.asList(\n            new Product(\"Laptop\", \"Electronics\"),\n            new Product(\"Shirt\", \"Clothing\"),\n            new Product(\"Mobile\", \"Electronics\"),\n            new Product(\"Jeans\", \"Clothing\")\n        );\n\n        Map<String, List<Product>> productsByCategory = products.stream()\n            .collect(Collectors.groupingBy(Product::getCategory));\n\n        System.out.println(productsByCategory);\n    }\n}\n```\n\n### 2. **Summing Values by a Property**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nclass Order {\n    String product;\n    int quantity;\n\n    Order(String product, int quantity) {\n        this.product = product;\n        this.quantity = quantity;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public String getProduct() {\n        return product;\n    }\n}\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Order> orders = Arrays.asList(\n            new Order(\"Laptop\", 2),\n            new Order(\"Mobile\", 5),\n            new Order(\"Laptop\", 3),\n            new Order(\"Headphones\", 7)\n        );\n\n        Map<String, Integer> totalQuantityByProduct = orders.stream()\n            .collect(Collectors.groupingBy(Order::getProduct, Collectors.summingInt(Order::getQuantity)));\n\n        System.out.println(totalQuantityByProduct);\n    }\n}\n```\n\n### 3. **Joining Strings**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"John\", \"Jane\", \"Jack\");\n\n        String joinedNames = names.stream()\n            .collect(Collectors.joining(\", \"));\n\n        System.out.println(joinedNames);\n    }\n}\n```\n\n### 4. **Partitioning by a Predicate**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(2, 5, 8, 11, 14, 17, 20);\n\n        Map<Boolean, List<Integer>> partitionedByEvenOdd = numbers.stream()\n            .collect(Collectors.partitioningBy(num -> num % 2 == 0));\n\n        System.out.println(partitionedByEvenOdd);\n    }\n}\n```\n\n### 5. **Counting Elements**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<String> items = Arrays.asList(\"Apple\", \"Banana\", \"Apple\", \"Orange\", \"Banana\", \"Apple\");\n\n        Map<String, Long> itemCount = items.stream()\n            .collect(Collectors.groupingBy(item -> item, Collectors.counting()));\n\n        System.out.println(itemCount);\n    }\n}\n```\n\nThese examples illustrate various use cases of `Collectors` in Java 8, covering grouping, summing, joining, partitioning, and counting operations.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"09c76dbd-2b03-4236-9d28-3fb62504d676","order":0,"createdDate":{"$date":"2024-09-06T16:59:46.714Z"},"updatedDate":{"$date":"2024-09-06T16:59:46.714Z"},"uniqueId":"1590830e-2771-43a8-b6d6-09c15910f2dd","__v":0}
{"_id":{"$oid":"66db40b10045b6a7c120c622"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Answer aayega!","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1496294f-dd32-47c5-b681-ac67f2fbaf99","order":0,"createdDate":{"$date":"2024-09-06T17:49:37.313Z"},"updatedDate":{"$date":"2024-09-06T17:51:43.841Z"},"uniqueId":"f73bef04-83a9-4211-8356-7714c8f11c2c","__v":0}
{"_id":{"$oid":"66db41470045b6a7c120ff6f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some common sorting algorithms with brief descriptions:\n\n1. **Bubble Sort**: Repeatedly swaps adjacent elements if they are in the wrong order.\n2. **Selection Sort**: Selects the smallest element from the unsorted part and swaps it with the first unsorted element.\n3. **Insertion Sort**: Builds the sorted array one element at a time by inserting each new element into its proper position.\n4. **Merge Sort**: Divides the array into halves, sorts them, and then merges them back together.\n5. **Quick Sort**: Picks a pivot element, partitions the array, and sorts the partitions recursively.\n6. **Heap Sort**: Turns the array into a max heap and repeatedly extracts the maximum element.\n7. **Radix Sort**: Sorts numbers digit by digit, starting from the least significant digit.\n8. **Counting Sort**: Counts the number of occurrences of each element and places them in the correct position.\n9. **Shell Sort**: An optimized version of insertion sort that allows the exchange of items far apart.\n10. **Bucket Sort**: Distributes elements into buckets, sorts each bucket, and then concatenates them.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"205079f6-b4b2-472c-a08c-fb2d9839f9c5","order":0,"createdDate":{"$date":"2024-09-06T17:52:07.205Z"},"updatedDate":{"$date":"2024-09-06T17:52:07.205Z"},"uniqueId":"ea3a764b-d5ae-439a-ac1b-82509fb411e1","__v":0}
{"_id":{"$oid":"66db418b0045b6a7c1211286"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here is a simple implementation of **Bubble Sort** in Java:\n\n```java\npublic class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                // Swap if the element is greater than the next one\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        bubbleSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- The algorithm compares adjacent elements and swaps them if they are in the wrong order.\n- It repeats the process for every element, pushing the largest unsorted element to its correct position in each iteration.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"01285f89-0c58-4320-b6ed-076e28824696","order":0,"createdDate":{"$date":"2024-09-06T17:53:15.429Z"},"updatedDate":{"$date":"2024-09-06T17:53:15.429Z"},"uniqueId":"04a9a890-7676-4234-83da-f064b147d465","__v":0}
{"_id":{"$oid":"66db44240045b6a7c121d591"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Bucket Sort** in Java:\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class BucketSort {\n    // Function to perform bucket sort\n    public static void bucketSort(float[] arr) {\n        if (arr.length <= 0) {\n            return;\n        }\n\n        // 1. Create empty buckets\n        int n = arr.length;\n        ArrayList<Float>[] buckets = new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            buckets[i] = new ArrayList<>();\n        }\n\n        // 2. Insert elements into buckets\n        for (float num : arr) {\n            int bucketIndex = (int) (num * n);\n            buckets[bucketIndex].add(num);\n        }\n\n        // 3. Sort each bucket and collect the elements\n        int index = 0;\n        for (ArrayList<Float> bucket : buckets) {\n            Collections.sort(bucket);\n            for (float num : bucket) {\n                arr[index++] = num;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        float[] arr = {0.42f, 0.32f, 0.75f, 0.12f, 0.45f, 0.23f};\n        bucketSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (float num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Bucket Creation**: Create an empty bucket for each range of values.\n- **Distribution**: Distribute elements into these buckets based on their values.\n- **Sorting**: Sort each bucket individually.\n- **Concatenation**: Merge the sorted buckets to get the final sorted array.\n\nThis implementation assumes the input array contains floating-point numbers in the range [0, 1).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b9ec4017-25a8-4b30-9215-ecbae0ec1994","order":0,"createdDate":{"$date":"2024-09-06T18:04:20.69Z"},"updatedDate":{"$date":"2024-09-06T18:04:20.69Z"},"uniqueId":"a9ef1f1a-5d33-4600-aeee-319183cacbe4","__v":0}
{"_id":{"$oid":"66db44590045b6a7c121e8b5"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Shell Sort** in Java:\n\n```java\npublic class ShellSort {\n    // Function to perform shell sort\n    public static void shellSort(int[] arr) {\n        int n = arr.length;\n        // Start with a big gap, then reduce the gap\n        for (int gap = n / 2; gap > 0; gap /= 2) {\n            // Do a gapped insertion sort for this gap size.\n            for (int i = gap; i < n; i++) {\n                int temp = arr[i];\n                int j;\n                // Shift earlier gap-sorted elements up until the correct location for arr[i] is found\n                for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\n                    arr[j] = arr[j - gap];\n                }\n                arr[j] = temp;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        shellSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int i : arr) {\n            System.out.print(i + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Gap Sequence**: Start with a large gap and reduce it gradually. The gap determines how far apart elements are compared and swapped.\n- **Gapped Insertion Sort**: For each gap size, perform an insertion sort that compares elements separated by the current gap.\n- **Reduction**: As the gap gets smaller, the array becomes more sorted until a final insertion sort with a gap of 1.\n\nShell Sort improves on insertion sort by allowing the exchange of items that are far apart, reducing the number of necessary comparisons and swaps.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"063cb424-c8de-44e1-83ea-8566e3c8b808","order":0,"createdDate":{"$date":"2024-09-06T18:05:13.671Z"},"updatedDate":{"$date":"2024-09-06T18:05:13.671Z"},"uniqueId":"872f560a-b1da-4cda-ae88-57857b51957d","__v":0}
{"_id":{"$oid":"66db448a0045b6a7c121fbd9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Counting Sort** in Java:\n\n```java\npublic class CountingSort {\n    // Function to perform counting sort\n    public static void countingSort(int[] arr) {\n        if (arr.length == 0) return;\n\n        // Find the maximum value in the array\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n\n        // Initialize the count array with zeros\n        int[] count = new int[max + 1];\n\n        // Store the count of each element\n        for (int num : arr) {\n            count[num]++;\n        }\n\n        // Reconstruct the sorted array\n        int index = 0;\n        for (int i = 0; i < count.length; i++) {\n            while (count[i] > 0) {\n                arr[index++] = i;\n                count[i]--;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 2, 2, 8, 3, 3, 1};\n        countingSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Counting Elements**: Count the number of occurrences of each value.\n- **Reconstruct Sorted Array**: Use the counts to place each element in the correct position in the output array.\n\nCounting Sort is efficient when the range of input values is not significantly larger than the number of values.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f3c09790-0950-4d9a-9b1e-83c20f1a9510","order":0,"createdDate":{"$date":"2024-09-06T18:06:02.189Z"},"updatedDate":{"$date":"2024-09-06T18:06:02.189Z"},"uniqueId":"d1e202d9-4766-409d-b165-aa8544056855","__v":0}
{"_id":{"$oid":"66db44cb0045b6a7c1220efd"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Radix Sort** in Java:\n\n```java\nimport java.util.Arrays;\n\npublic class RadixSort {\n    // Function to perform radix sort\n    public static void radixSort(int[] arr) {\n        if (arr.length == 0) return;\n\n        // Find the maximum number to know the number of digits\n        int max = Arrays.stream(arr).max().getAsInt();\n        int exp = 1; // Exponent for the digit place (1, 10, 100, ...)\n\n        // Perform counting sort for each digit place\n        while (max / exp > 0) {\n            countingSortByDigit(arr, exp);\n            exp *= 10;\n        }\n    }\n\n    // Function to perform counting sort based on the digit represented by exp\n    private static void countingSortByDigit(int[] arr, int exp) {\n        int n = arr.length;\n        int[] output = new int[n];\n        int[] count = new int[10];\n\n        // Count occurrences of each digit\n        Arrays.fill(count, 0);\n        for (int i = 0; i < n; i++) {\n            int digit = (arr[i] / exp) % 10;\n            count[digit]++;\n        }\n\n        // Calculate cumulative count\n        for (int i = 1; i < 10; i++) {\n            count[i] += count[i - 1];\n        }\n\n        // Build the output array\n        for (int i = n - 1; i >= 0; i--) {\n            int digit = (arr[i] / exp) % 10;\n            output[count[digit] - 1] = arr[i];\n            count[digit]--;\n        }\n\n        // Copy the output array to arr\n        System.arraycopy(output, 0, arr, 0, n);\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {170, 45, 75, 90, 802, 24, 2, 66};\n        radixSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Radix Sort**: It sorts numbers digit by digit, starting from the least significant digit (LSD) to the most significant digit (MSD).\n- **Counting Sort by Digit**: For each digit place, use counting sort to sort the array based on that digit.\n\nRadix Sort is efficient for sorting large numbers when the range of digits is not too large relative to the number of elements.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"37136f23-b870-4dfe-a5a3-f208358f771f","order":0,"createdDate":{"$date":"2024-09-06T18:07:07.699Z"},"updatedDate":{"$date":"2024-09-06T18:07:07.699Z"},"uniqueId":"993406f4-c593-4081-9858-402d3f8f890d","__v":0}
{"_id":{"$oid":"66db45160045b6a7c1222221"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Heap Sort** in Java:\n\n```java\npublic class HeapSort {\n    // Function to perform heap sort\n    public static void heapSort(int[] arr) {\n        int n = arr.length;\n\n        // Build a max heap\n        for (int i = n / 2 - 1; i >= 0; i--) {\n            heapify(arr, n, i);\n        }\n\n        // Extract elements from the heap one by one\n        for (int i = n - 1; i >= 0; i--) {\n            // Move the current root to the end\n            int temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            // Call heapify on the reduced heap\n            heapify(arr, i, 0);\n        }\n    }\n\n    // Function to heapify a subtree rooted at index i\n    private static void heapify(int[] arr, int n, int i) {\n        int largest = i; // Initialize largest as root\n        int left = 2 * i + 1; // left = 2*i + 1\n        int right = 2 * i + 2; // right = 2*i + 2\n\n        // If left child is larger than root\n        if (left < n && arr[left] > arr[largest]) {\n            largest = left;\n        }\n\n        // If right child is larger than largest so far\n        if (right < n && arr[right] > arr[largest]) {\n            largest = right;\n        }\n\n        // If largest is not root\n        if (largest != i) {\n            int swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n\n            // Recursively heapify the affected subtree\n            heapify(arr, n, largest);\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 11, 13, 5, 6, 7};\n        heapSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Heap Construction**: Build a max heap from the input data.\n- **Heap Sort**: Continuously extract the maximum element from the heap and rebuild the heap with the remaining elements.\n- **Heapify**: Ensure the subtree rooted at a given index satisfies the heap property.\n\nHeap Sort works by leveraging the properties of heaps to efficiently sort an array with a time complexity of O(n log n).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"0f972650-aa83-4ce3-b820-461bcfa7aef0","order":0,"createdDate":{"$date":"2024-09-06T18:08:22.992Z"},"updatedDate":{"$date":"2024-09-06T18:08:22.992Z"},"uniqueId":"7d35f784-61cb-42ad-95b1-7f33630594f7","__v":0}
{"_id":{"$oid":"66db45550045b6a7c1223545"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Quick Sort** in Java:\n\n```java\npublic class QuickSort {\n    // Function to perform quick sort\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            // Partition the array and get the pivot index\n            int pi = partition(arr, low, high);\n\n            // Recursively sort elements before and after partition\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n    // Function to partition the array\n    private static int partition(int[] arr, int low, int high) {\n        // Choose the rightmost element as pivot\n        int pivot = arr[high];\n        int i = low - 1;\n\n        for (int j = low; j < high; j++) {\n            // If current element is smaller than or equal to pivot\n            if (arr[j] <= pivot) {\n                i++;\n                // Swap elements at i and j\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n\n        // Swap the pivot element with the element at i + 1\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n\n        return i + 1; // Return the partition index\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {10, 7, 8, 9, 1, 5};\n        quickSort(arr, 0, arr.length - 1);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Partitioning**: Choose a pivot element and rearrange the array so that elements less than the pivot are on its left and elements greater are on its right.\n- **Recursion**: Recursively apply the same process to the sub-arrays on the left and right of the pivot.\n\nQuick Sort is an efficient, in-place sorting algorithm with an average time complexity of O(n log n).","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"3ad5efc3-fea5-4af3-98a4-0a66153e5394","order":0,"createdDate":{"$date":"2024-09-06T18:09:25.956Z"},"updatedDate":{"$date":"2024-09-06T18:09:25.956Z"},"uniqueId":"e9ec4e9d-fd9f-4a30-b126-3ca1b8c0f072","__v":0}
{"_id":{"$oid":"66db45960045b6a7c1224869"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Merge Sort** in Java:\n\n```java\npublic class MergeSort {\n    // Function to perform merge sort\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            // Find the middle point\n            int mid = (left + right) / 2;\n\n            // Recursively sort the two halves\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n\n            // Merge the sorted halves\n            merge(arr, left, mid, right);\n        }\n    }\n\n    // Function to merge two sorted halves\n    private static void merge(int[] arr, int left, int mid, int right) {\n        // Find sizes of two subarrays to be merged\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        // Create temporary arrays\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        // Copy data to temporary arrays\n        System.arraycopy(arr, left, L, 0, n1);\n        System.arraycopy(arr, mid + 1, R, 0, n2);\n\n        // Merge the temporary arrays back into arr\n        int i = 0, j = 0;\n        int k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k++] = L[i++];\n            } else {\n                arr[k++] = R[j++];\n            }\n        }\n\n        // Copy the remaining elements of L[], if any\n        while (i < n1) {\n            arr[k++] = L[i++];\n        }\n\n        // Copy the remaining elements of R[], if any\n        while (j < n2) {\n            arr[k++] = R[j++];\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {38, 27, 43, 3, 9, 82, 10};\n        mergeSort(arr, 0, arr.length - 1);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Divide**: Recursively split the array into two halves until each sub-array contains a single element.\n- **Merge**: Combine the sorted sub-arrays back into a single sorted array.\n\nMerge Sort is a stable sorting algorithm with a time complexity of O(n log n), making it suitable for sorting large arrays.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"0184f5ef-58e8-4c93-9519-b90e0f7b65de","order":0,"createdDate":{"$date":"2024-09-06T18:10:30.991Z"},"updatedDate":{"$date":"2024-09-06T18:10:30.991Z"},"uniqueId":"1b5c4a23-0af9-45c5-ad10-a8a1cbdbd2db","__v":0}
{"_id":{"$oid":"66db45c30045b6a7c1225b8d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Insertion Sort** in Java:\n\n```java\npublic class InsertionSort {\n    // Function to perform insertion sort\n    public static void insertionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n\n            // Move elements of arr[0..i-1], that are greater than key, to one position ahead\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {12, 11, 13, 5, 6};\n        insertionSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Insertion**: Starts with the second element and inserts it into the correct position within the sorted portion of the array.\n- **Shift Elements**: Moves elements that are greater than the key element to the right to make space for the key.\n\nInsertion Sort is efficient for small datasets or nearly sorted arrays, with a time complexity of O(n²) in the average and worst cases.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"2d5456dd-4da2-4bc3-9203-2af88f71051d","order":0,"createdDate":{"$date":"2024-09-06T18:11:15.265Z"},"updatedDate":{"$date":"2024-09-06T18:11:15.265Z"},"uniqueId":"afab6be4-e00e-40a8-afcd-ec3da659392f","__v":0}
{"_id":{"$oid":"66db45f30045b6a7c1226eb1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a simple implementation of **Selection Sort** in Java:\n\n```java\npublic class SelectionSort {\n    // Function to perform selection sort\n    public static void selectionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n - 1; i++) {\n            // Find the index of the minimum element in the remaining unsorted array\n            int minIndex = i;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[j] < arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n\n            // Swap the found minimum element with the first element of the unsorted portion\n            int temp = arr[minIndex];\n            arr[minIndex] = arr[i];\n            arr[i] = temp;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {64, 25, 12, 22, 11};\n        selectionSort(arr);\n        System.out.println(\"Sorted array:\");\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}\n```\n\n### Explanation:\n- **Selection**: Iterates through the array, finds the minimum element in the unsorted portion, and swaps it with the first unsorted element.\n- **Swap**: After identifying the minimum element, it is swapped with the current element at the beginning of the unsorted section.\n\nSelection Sort has a time complexity of O(n²) and is easy to implement, but it is generally less efficient for large datasets compared to algorithms like Quick Sort or Merge Sort.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c02c3f54-a9f6-44d9-9663-a281c53ceac6","order":0,"createdDate":{"$date":"2024-09-06T18:12:03.515Z"},"updatedDate":{"$date":"2024-09-06T18:12:03.515Z"},"uniqueId":"b948dc42-6ec4-4187-976a-c59e9936e995","__v":0}
{"_id":{"$oid":"66db46a70045b6a7c122950f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Iteration refers to the process of repeating a set of instructions or statements in a loop until a certain condition is met. In programming, iterations are used to execute a block of code multiple times, often with different values.\n\nHere are common types of iteration structures:\n\n1. **For Loop**: Executes a block of code a specific number of times.\n   ```java\n   for (int i = 0; i < 5; i++) {\n       System.out.println(i);\n   }\n   ```\n   This will print numbers 0 to 4.\n\n2. **While Loop**: Continues to execute a block of code as long as a condition is true.\n   ```java\n   int i = 0;\n   while (i < 5) {\n       System.out.println(i);\n       i++;\n   }\n   ```\n   This will also print numbers 0 to 4.\n\n3. **Do-While Loop**: Executes a block of code once, and then continues to execute as long as a condition is true.\n   ```java\n   int i = 0;\n   do {\n       System.out.println(i);\n       i++;\n   } while (i < 5);\n   ```\n   This will print numbers 0 to 4 as well, with the initial execution guaranteed.\n\nIteration is fundamental for tasks such as traversing arrays, processing items in collections, and implementing repetitive algorithms.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ec61ed46-aece-46c8-be8a-3ac122107322","order":0,"createdDate":{"$date":"2024-09-06T18:15:03.654Z"},"updatedDate":{"$date":"2024-09-06T18:15:03.654Z"},"uniqueId":"f5385a4f-f985-4816-af81-0ca85daa7ae1","__v":0}
{"_id":{"$oid":"66db47030045b6a7c122bb84"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Recursion is a programming technique where a function calls itself directly or indirectly to solve a problem. The key idea is to break down a problem into smaller, more manageable sub-problems of the same type.\n\n### Key Components of Recursion:\n1. **Base Case**: The condition under which the recursion stops. It prevents infinite recursion and eventually leads to the termination of the function.\n2. **Recursive Case**: The part of the function where it calls itself with a modified argument, moving towards the base case.\n\n### Example of Recursion:\nHere's a simple example of recursion using the factorial function:\n\n```java\npublic class RecursionExample {\n    // Function to calculate factorial using recursion\n    public static int factorial(int n) {\n        // Base case: factorial of 0 or 1 is 1\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        // Recursive case: n! = n * (n-1)!\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        int number = 5;\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));\n    }\n}\n```\n\n### Explanation:\n- **Base Case**: `if (n == 0 || n == 1)` returns 1. This is the termination condition.\n- **Recursive Case**: `return n * factorial(n - 1)` breaks the problem into smaller sub-problems, reducing `n` by 1 each time until reaching the base case.\n\n### Advantages of Recursion:\n- Can simplify code and make it more intuitive for problems that are naturally recursive (like tree traversals, the factorial function, etc.).\n- Often reduces the complexity of the problem.\n\n### Disadvantages of Recursion:\n- Can lead to high memory usage due to the function call stack.\n- May result in stack overflow errors if the recursion depth is too large or if there is no proper base case.\n\nRecursion is a powerful technique but should be used judiciously, especially for problems that can be solved more efficiently with iteration.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"dc650276-9914-4b0c-a4a4-250f426a99a5","order":0,"createdDate":{"$date":"2024-09-06T18:16:35.276Z"},"updatedDate":{"$date":"2024-09-06T18:16:35.276Z"},"uniqueId":"d125bd0c-fd18-4528-9c28-93724d3d1e1b","__v":0}
{"_id":{"$oid":"66db48210045b6a7c122e21c"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The choice between recursion and iteration depends on several factors, including the nature of the problem, performance considerations, and code readability. Here's a comparison to help determine which is preferable in different situations:\n\n### When to Prefer Recursion:\n\n1. **Problem Nature**: Recursion is often more natural for problems that can be divided into similar sub-problems, such as tree traversal, graph traversal, and divide-and-conquer algorithms (e.g., merge sort, quick sort).\n\n2. **Code Readability**: Recursive solutions can be more intuitive and easier to understand for certain problems. For example, the code for recursive algorithms often closely mirrors the problem's mathematical definition.\n\n3. **Divide and Conquer**: Algorithms like merge sort and quick sort benefit from recursion as they break down the problem into smaller chunks, process them, and then combine the results.\n\n### When to Prefer Iteration:\n\n1. **Performance**: Iterative solutions are generally more efficient in terms of both time and space. They avoid the overhead of function calls and are less prone to stack overflow errors. This is crucial for problems with large input sizes or deep recursion.\n\n2. **Memory Usage**: Iterative solutions typically use less memory because they don't involve multiple function calls and the associated call stack overhead.\n\n3. **Simple Problems**: For straightforward problems or when the recursion depth is unknown and potentially large, iteration can be a more robust solution.\n\n### Example Comparisons:\n\n- **Factorial Calculation**:\n  - Recursive:\n    ```java\n    public static int factorial(int n) {\n        if (n == 0) return 1;\n        return n * factorial(n - 1);\n    }\n    ```\n  - Iterative:\n    ```java\n    public static int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    ```\n\n- **Fibonacci Sequence**:\n  - Recursive (can be inefficient for large numbers due to repeated calculations):\n    ```java\n    public static int fibonacci(int n) {\n        if (n <= 1) return n;\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n    ```\n  - Iterative (more efficient for larger values):\n    ```java\n    public static int fibonacci(int n) {\n        if (n <= 1) return n;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a + b;\n            a = b;\n            b = temp;\n        }\n        return b;\n    }\n    ```\n\n### Summary:\n- **Recursion** is preferable for problems that are naturally recursive and can benefit from cleaner, more intuitive code.\n- **Iteration** is preferable for performance-critical applications, simple problems, or when dealing with large datasets that could lead to deep recursion and stack overflow.\n\nIn practice, both techniques have their uses, and choosing the right one depends on the specific problem and constraints you are working with.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"d3632a26-1a83-43f0-b5eb-d4c339f824a9","order":0,"createdDate":{"$date":"2024-09-06T18:21:21.998Z"},"updatedDate":{"$date":"2024-09-06T18:21:21.998Z"},"uniqueId":"1ffc7f64-db0e-4038-8d30-ddb2f6c16420","__v":0}
{"_id":{"$oid":"66db49450045b6a7c1230ae0"},"name":"Using Pre-java 8 syntax, Optimized one","heading":"Using Pre-java 8 syntax, Optimized one","smartContent":{"content":"```\n    private static String reverse(String input) throws InvalidInputException {\n        if (input == null || input.isEmpty() || input.trim().isEmpty()) {\n            throw new InvalidInputException(\"Input is missing or empty\");\n        }\n\n        char[] chArr = input.trim().toCharArray();\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i = chArr.length - 1; i >= 0; i--) {\n            stringBuffer.append(chArr[i]);\n        }\n\n        return stringBuffer.toString();\n\n    }\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"714059cf-f63f-4445-9eff-e7a55dd6216f","order":0,"createdDate":{"$date":"2024-09-06T18:26:13.445Z"},"updatedDate":{"$date":"2024-09-06T18:26:13.445Z"},"uniqueId":"376fab13-b915-4c13-9502-d5e6735909d5","__v":0}
{"_id":{"$oid":"66db49f90045b6a7c1231e07"},"name":"Using Java 8 syntax, Optimized one","heading":"Using Java 8 syntax, Optimized one","smartContent":{"content":"\n```\n    private static final Supplier<InvalidInputException> invalidInputExceptionSupplier =\n            () -> new InvalidInputException(\"Input string is null or empty\");\n\n    private static final StringOperation reverseString = input ->\n            input.map(s -> s.chars()\n                            .mapToObj(c -> String.valueOf((char) c))\n                            .reduce(\"\", (acc, c) -> c + acc))\n                    .orElseThrow(invalidInputExceptionSupplier);\n\n    @FunctionalInterface\n    private interface StringOperation {\n        String perform(Optional<String> input) throws InvalidInputException;\n\n        default String performWithTitle(String title, String input) throws InvalidInputException {\n            if (title != null) {\n                System.out.print(title + \"\\t\\t\");\n            }\n            if (input == null || input.isEmpty()) {\n                throw new InvalidInputException(\"Input is missing or empty\");\n            }\n            return perform(Optional.of(input));\n        }\n    }\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"714059cf-f63f-4445-9eff-e7a55dd6216f","order":0,"createdDate":{"$date":"2024-09-06T18:29:13.085Z"},"updatedDate":{"$date":"2024-09-06T18:29:13.085Z"},"uniqueId":"4d5b65ce-5e37-4084-a110-4fbcb54c7019","__v":0}
{"_id":{"$oid":"66db4a970045b6a7c1234862"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a basic implementation of a singly linked list in Java, including operations for insertion, deletion, and searching:\n\n```java\npublic class SinglyLinkedList {\n    // Node class representing each element in the list\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    private Node head;\n\n    // Insert a new node at the end of the list\n    public void insert(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n\n    // Delete the first occurrence of a node with specified data\n    public void delete(int data) {\n        if (head == null) return;\n\n        // If the node to be deleted is the head node\n        if (head.data == data) {\n            head = head.next;\n            return;\n        }\n\n        Node current = head;\n        while (current.next != null && current.next.data != data) {\n            current = current.next;\n        }\n\n        // If the node was found\n        if (current.next != null) {\n            current.next = current.next.next;\n        }\n    }\n\n    // Search for a node with specified data\n    public boolean search(int data) {\n        Node current = head;\n        while (current != null) {\n            if (current.data == data) {\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    }\n\n    // Print the linked list\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" \");\n            current = current.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n        \n        list.insert(1);\n        list.insert(2);\n        list.insert(3);\n        list.insert(4);\n\n        System.out.println(\"Linked List:\");\n        list.printList(); // Output: 1 2 3 4\n\n        System.out.println(\"Searching for 3: \" + list.search(3)); // Output: true\n        System.out.println(\"Searching for 5: \" + list.search(5)); // Output: false\n\n        list.delete(3);\n        System.out.println(\"Linked List after deleting 3:\");\n        list.printList(); // Output: 1 2 4\n\n        list.delete(1);\n        System.out.println(\"Linked List after deleting 1:\");\n        list.printList(); // Output: 2 4\n    }\n}\n```\n\n### Explanation:\n1. **Node Class**: Represents each node in the list, with `data` and `next` fields.\n2. **Insert**: Adds a new node to the end of the list.\n3. **Delete**: Removes the first occurrence of a node with the specified data. Handles edge cases, such as when the node to be deleted is the head of the list.\n4. **Search**: Looks for a node with the specified data and returns `true` if found, `false` otherwise.\n5. **Print List**: Displays the elements of the list.\n\nThis implementation covers basic operations for a singly linked list, and you can extend it with additional functionalities as needed.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"1d67de93-ed67-4b2a-94a8-2c7e7811c319","order":0,"createdDate":{"$date":"2024-09-06T18:31:51.162Z"},"updatedDate":{"$date":"2024-09-06T18:31:51.162Z"},"uniqueId":"8f063504-9c53-47dd-9856-9bb4670d82ee","__v":0}
{"_id":{"$oid":"66e3ce6003e1eb31c507d36a"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The equivalent PowerShell command for `dir /b` is:\n\n```powershell\nGet-ChildItem -Name\n```\n\nThis lists the files and directories in the current directory without additional information, similar to `dir /b` in Command Prompt.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c178fee3-e660-40ba-ad5a-be0201cb971b","order":0,"createdDate":{"$date":"2024-09-13T05:32:16.6Z"},"updatedDate":{"$date":"2024-09-13T05:32:16.6Z"},"uniqueId":"dec0822c-8351-437d-8453-1aaaa31cb314","__v":0}
{"_id":{"$oid":"66e3cef403e1eb31c507fa2d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In PowerShell, you can concatenate two or more commands using semicolons (`;`) or the pipe operator (`|`), depending on what you want to achieve.\n\n### 1. **Using Semicolon (`;`)**:\nTo run multiple commands sequentially:\n```powershell\nCommand1; Command2; Command3\n```\n\nExample:\n```powershell\nGet-ChildItem; Write-Host \"Directory listing complete\"\n```\n\n### 2. **Using Pipe (`|`)**:\nTo pass the output of one command as input to another:\n```powershell\nCommand1 | Command2 | Command3\n```\n\nExample:\n```powershell\nGet-ChildItem | Where-Object { $_.Length -gt 1KB } | Select-Object Name, Length\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"31bcae5e-1076-434b-b884-d1863919811d","order":0,"createdDate":{"$date":"2024-09-13T05:34:44.963Z"},"updatedDate":{"$date":"2024-09-13T05:34:44.963Z"},"uniqueId":"92c08be8-5d9c-49b6-b41a-19784c7b87d2","__v":0}
{"_id":{"$oid":"66e3df4d03e1eb31c5087cd2"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here is a minimal example of a Spring Boot application with Spring Security using basic authentication:\n\n**pom.xml**\n```xml\n<dependencies>\n    <!-- Spring Boot Starter Web -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!-- Spring Boot Starter Security -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n\n    <!-- Spring Boot Starter Test (optional, for testing) -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n```\n\n**Security Configuration (Basic Authentication)**\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests((authz) -> authz\n                .anyRequest().authenticated()\n            )\n            .httpBasic();\n        return http.build();\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n            .username(\"user\")\n            .password(\"password\")\n            .roles(\"USER\")\n            .build();\n\n        return new InMemoryUserDetailsManager(user);\n    }\n}\n```\n\n**Controller**\n\n```java\n@Controller\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    @ResponseBody\n    public String hello() {\n        return \"Hello, World!\";\n    }\n}\n```\n\n**Application Class**\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SpringSecurityBasicAuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringSecurityBasicAuthApplication.class, args);\n    }\n}\n```\n\nTo test:\n- Start the application.\n- Go to: `http://localhost:8080/hello`.\n- It will prompt for a username and password. Use:\n  - Username: `user`\n  - Password: `password`\n\nThis is a simple setup using basic authentication with an in-memory user.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"814e1023-539a-4455-9a88-5535fc53b06d","order":0,"createdDate":{"$date":"2024-09-13T06:44:29.342Z"},"updatedDate":{"$date":"2024-09-13T06:44:29.342Z"},"uniqueId":"aac9c3e5-fba1-4fb8-bffb-ce0cf404baf6","__v":0}
{"_id":{"$oid":"66e3dfdb03e1eb31c508a352"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are some common authentication methods in Spring Security:\n\n1. **Form-based Authentication**  \n   Default Spring Security login form that allows users to authenticate via a username and password input form. It provides a custom login page and handles redirection after successful or failed logins.\n\n2. **OAuth2/OpenID Connect**  \n   Authentication using external providers (e.g., Google, GitHub, Facebook). Spring Security integrates with OAuth2 to allow users to log in using their accounts from third-party services, utilizing access tokens for secure authentication.\n\n3. **JWT (JSON Web Token)**  \n   A stateless authentication mechanism that passes a token in the HTTP header for every request. The server decodes the JWT to verify the user's identity and privileges, eliminating the need for session storage.\n\n4. **LDAP (Lightweight Directory Access Protocol)**  \n   Authentication against a directory service like Active Directory. Spring Security can connect to LDAP servers to validate user credentials and retrieve user roles.\n\n5. **SAML (Security Assertion Markup Language)**  \n   Used for Single Sign-On (SSO) across web domains, SAML allows Spring Security to authenticate users through identity providers (IdPs) like Okta or Azure AD, commonly used in enterprise applications.\n\n6. **Database Authentication (JDBC)**  \n   Custom authentication using a database where user credentials and roles are stored. Spring Security connects to the database using JDBC to validate users.\n\n7. **Digest Authentication**  \n   Similar to Basic Authentication but more secure, it encrypts the password in the HTTP request using MD5. It prevents credentials from being transmitted as plaintext.\n\n8. **Token-based Authentication (non-JWT)**  \n   Involves generating and validating tokens (usually stored in cookies or HTTP headers). Tokens are associated with sessions and can expire, requiring the user to re-authenticate.\n\n9. **Pre-authentication**  \n   Spring Security allows integration with external systems that authenticate the user (e.g., via a proxy or container). After the pre-authentication, Spring Security manages the session.\n\n10. **Certificate-based Authentication (X.509)**  \n    Uses client certificates for authentication. Typically applied in secure, highly regulated environments where a certificate uniquely identifies the user.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"a1d15060-bca9-42ea-bae5-365f95e33b6e","order":0,"createdDate":{"$date":"2024-09-13T06:46:51.194Z"},"updatedDate":{"$date":"2024-09-13T06:46:51.194Z"},"uniqueId":"72166d85-0da0-4590-a07f-e2da2a2660a4","__v":0}
{"_id":{"$oid":"66e3e09503e1eb31c508c9ef"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Yes, you can integrate multiple authentication mechanisms in Spring Security by configuring a chain of authentication providers. Below is an example where the application first attempts in-memory authentication (basic authentication) and, if that fails, it falls back to database authentication.\n\n### Steps:\n1. **In-memory (Basic Authentication)** as the primary provider.\n2. **Database Authentication (JDBC)** as the fallback provider.\n\n### Updated Code:\n\n**pom.xml**\n```xml\n<dependencies>\n    <!-- Spring Boot Starter Web -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <!-- Spring Boot Starter Security -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n\n    <!-- Spring Boot Starter Data JPA (for Database access) -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\n    </dependency>\n\n    <!-- H2 Database (for simplicity in this example) -->\n    <dependency>\n        <groupId>com.h2database</groupId>\n        <artifactId>h2</artifactId>\n        <scope>runtime</scope>\n    </dependency>\n\n    <!-- JDBC Template for Database Authentication -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-jdbc</artifactId>\n    </dependency>\n</dependencies>\n```\n\n**SecurityConfig.java**\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests((authz) -> authz\n                .anyRequest().authenticated()\n            )\n            .httpBasic();  // Basic authentication\n        return http.build();\n    }\n\n    @Bean\n    public InMemoryUserDetailsManager inMemoryUserDetailsManager() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n            .username(\"user\")\n            .password(\"password\")\n            .roles(\"USER\")\n            .build();\n\n        return new InMemoryUserDetailsManager(user);\n    }\n\n    // JDBC-based UserDetailsService\n    @Bean\n    public UserDetailsService jdbcUserDetailsService(DataSource dataSource) {\n        JdbcDaoImpl jdbcDao = new JdbcDaoImpl();\n        jdbcDao.setDataSource(dataSource);\n        return jdbcDao;\n    }\n\n    @Bean\n    public AuthenticationManagerBuilder authManager(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {\n        // First in-memory authentication\n        auth\n            .inMemoryAuthentication()\n            .withUser(\"user\")\n            .password(\"{noop}password\")  // NoOpPasswordEncoder for simplicity\n            .roles(\"USER\");\n\n        // Fall back to JDBC-based authentication\n        auth\n            .jdbcAuthentication()\n            .dataSource(dataSource);\n        \n        return auth;\n    }\n}\n```\n\n**application.properties**\n```properties\n# H2 Database configuration (or you can use any other DB)\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.h2.console.enabled=true\n```\n\n**Database User Table**\n```sql\nCREATE TABLE users (\n    username VARCHAR(50) NOT NULL PRIMARY KEY,\n    password VARCHAR(100) NOT NULL,\n    enabled BOOLEAN NOT NULL\n);\n\nCREATE TABLE authorities (\n    username VARCHAR(50) NOT NULL,\n    authority VARCHAR(50) NOT NULL,\n    FOREIGN KEY (username) REFERENCES users(username)\n);\n\n-- Insert some test data\nINSERT INTO users (username, password, enabled) VALUES ('dbuser', '{noop}dbpassword', true);\nINSERT INTO authorities (username, authority) VALUES ('dbuser', 'ROLE_USER');\n```\n\n### How It Works:\n1. **In-memory authentication** is tried first. If the user `user` with password `password` is valid, authentication succeeds.\n2. If in-memory authentication fails, it tries **JDBC authentication**, where it looks up users in the database (`users` and `authorities` tables).\n   - If the user `dbuser` with password `dbpassword` exists in the database, this authentication succeeds.\n\nYou can test this by accessing the `/hello` endpoint:\n- For in-memory user: `user` / `password`\n- For database user: `dbuser` / `dbpassword`","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"28f1b946-900b-46c1-a853-bd725f2f11e6","order":0,"createdDate":{"$date":"2024-09-13T06:49:57.306Z"},"updatedDate":{"$date":"2024-09-13T06:49:57.306Z"},"uniqueId":"480c6955-4552-4679-b482-23d2e5c2ba5d","__v":0}
{"_id":{"$oid":"66e3e24803e1eb31c508f09d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In the previous example, the chaining was not configured correctly in the `AuthenticationManagerBuilder`. The intent was to configure multiple authentication providers in a chain. Below is the corrected version where the chaining is explicitly set.\n\nTo properly chain multiple authentication mechanisms (in-memory followed by JDBC), we need to configure them in the `AuthenticationManagerBuilder`. This is where Spring Security tries each provider in the order they're defined until one succeeds.\n\n### Updated Code with Proper Chaining:\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\n\nimport javax.sql.DataSource;\n\n@Configuration\npublic class SecurityConfig {\n\n    // This bean configures both in-memory and JDBC authentication\n    @Bean\n    public AuthenticationManager authenticationManager(HttpSecurity http, DataSource dataSource) throws Exception {\n        return http.getSharedObject(AuthenticationManagerBuilder.class)\n            .inMemoryAuthentication()  // First authentication provider: In-memory\n                .withUser(\"user\")\n                .password(\"{noop}password\")  // NoOpPasswordEncoder for simplicity\n                .roles(\"USER\")\n            .and()  // Chain the next authentication method\n            .jdbcAuthentication()  // Second authentication provider: JDBC\n                .dataSource(dataSource)\n                .withDefaultSchema()  // Uses Spring Security's default schema\n            .and().build();\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests((authz) -> authz\n                .anyRequest().authenticated()\n            )\n            .httpBasic();  // Basic authentication\n        return http.build();\n    }\n}\n```\n\n### Key Changes:\n1. **Authentication Manager**: The `AuthenticationManager` is configured to chain the two authentication mechanisms (`inMemoryAuthentication()` and `jdbcAuthentication()`).\n2. **Chaining**: The `and()` method connects the two providers, ensuring that if in-memory authentication fails, JDBC is tried next.\n\n### Explanation of Flow:\n- **In-memory authentication**: First, the system tries to authenticate using an in-memory user (in this case, `user` / `password`).\n- **JDBC authentication**: If the in-memory authentication fails (e.g., the user is not found or the password is incorrect), Spring Security will attempt JDBC authentication against the users in the database (`users` and `authorities` tables).\n\nNow, the chain is correctly set up.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"ecf81f96-759d-4e72-a9e1-a43f1e37df22","order":0,"createdDate":{"$date":"2024-09-13T06:57:12.788Z"},"updatedDate":{"$date":"2024-09-13T06:57:12.788Z"},"uniqueId":"b38365ac-e719-42ca-b38d-4767613484eb","__v":0}
{"_id":{"$oid":"66e3ecd503e1eb31c50923e9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To execute the provided SQL script in an H2 in-memory database at startup in a Spring Boot project, you can follow these steps:\n\n### 1. **Place the SQL script in the `src/main/resources` directory**\n   - Create a file named `data.sql` inside the `src/main/resources` directory.\n   - Paste your SQL script into this `data.sql` file.\n\nThe contents of `data.sql`:\n\n```sql\nCREATE TABLE users (\n    username VARCHAR(50) NOT NULL PRIMARY KEY,\n    password VARCHAR(100) NOT NULL,\n    enabled BOOLEAN NOT NULL\n);\n\nCREATE TABLE authorities (\n    username VARCHAR(50) NOT NULL,\n    authority VARCHAR(50) NOT NULL,\n    FOREIGN KEY (username) REFERENCES users(username)\n);\n\n-- Insert some test data\nINSERT INTO users (username, password, enabled) VALUES ('dbuser', '{noop}dbpassword', true);\nINSERT INTO authorities (username, authority) VALUES ('dbuser', 'ROLE_USER');\n```\n\n### 2. **Configure H2 Database in `application.properties`**\n\nIn `src/main/resources/application.properties`, make sure the H2 database is properly configured:\n\n```properties\n# H2 In-Memory Database Configuration\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.datasource.platform=h2\n\n# Automatically run schema.sql and data.sql\nspring.datasource.initialize=true\n\n# Enable H2 console\nspring.h2.console.enabled=true\nspring.h2.console.path=/h2-console\n```\n\n### 3. **Run the application**\n\nWhen you start your Spring Boot application, it will automatically execute the `data.sql` file to create the `users` and `authorities` tables and insert the provided test data into the in-memory H2 database.\n\n### **Additional Notes**:\n- You can access the H2 database console at `http://localhost:8080/h2-console` using the JDBC URL `jdbc:h2:mem:testdb`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"8d3e5bb7-9a75-45ab-a9a9-d020d5a0080e","order":0,"createdDate":{"$date":"2024-09-13T07:42:13.433Z"},"updatedDate":{"$date":"2024-09-13T07:42:13.433Z"},"uniqueId":"fa341d62-368e-4c00-91ca-1f79892130a1","__v":0}
{"_id":{"$oid":"66e3f4bb03e1eb31c5094bb0"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To update your script so that tables are only created if they do not exist in an H2 database, use the `CREATE TABLE IF NOT EXISTS` statement.\n\nHere’s your updated script:\n\n```sql\nCREATE TABLE IF NOT EXISTS users (\n    username VARCHAR(50) NOT NULL PRIMARY KEY,\n    password VARCHAR(100) NOT NULL,\n    enabled BOOLEAN NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS authorities (\n    username VARCHAR(50) NOT NULL,\n    authority VARCHAR(50) NOT NULL,\n    FOREIGN KEY (username) REFERENCES users(username)\n);\n\n-- Insert some test data\nMERGE INTO users (username, password, enabled) \nKEY(username) \nVALUES ('dbuser', '{noop}dbpassword', true);\n\nMERGE INTO authorities (username, authority) \nKEY(username, authority) \nVALUES ('dbuser', 'ROLE_USER');\n```\n\nChanges made:\n- Added `IF NOT EXISTS` to the `CREATE TABLE` statements.\n- Replaced `INSERT INTO` with `MERGE INTO` for inserting the test data to prevent duplicate inserts if the data already exists.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"05f0ea48-a812-4e2f-9eb8-4df097bf8ebe","order":0,"createdDate":{"$date":"2024-09-13T08:15:55.555Z"},"updatedDate":{"$date":"2024-09-13T08:15:55.555Z"},"uniqueId":"4c939c77-32c7-449d-91bb-12ad4f8eb0ba","__v":0}
{"_id":{"$oid":"66e403fc03e1eb31c5098d71"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here's a summary of the classes and methods commonly used from `Optional`, `Supplier`, and `Collectors` in Java:\n\n### 1. **Optional**\n\n`Optional` is a container object which may or may not contain a non-null value. It is used to represent optional values and avoid `null` checks.\n\n**Key Methods:**\n- `empty()`: Returns an empty `Optional` instance.\n- `of(T value)`: Returns an `Optional` with the specified non-null value.\n- `ofNullable(T value)`: Returns an `Optional` with the specified value, or an empty `Optional` if the value is null.\n- `isPresent()`: Checks if there is a value present in the `Optional`.\n- `ifPresent(Consumer<? super T> action)`: Executes a given action if a value is present.\n- `get()`: Returns the value if present; otherwise, throws `NoSuchElementException`.\n- `orElse(T other)`: Returns the value if present; otherwise, returns `other`.\n- `orElseGet(Supplier<? extends T> other)`: Returns the value if present; otherwise, returns the result of `other.get()`.\n- `orElseThrow(Supplier<? extends X> exceptionSupplier)`: Returns the value if present; otherwise, throws an exception produced by the given supplier.\n- `map(Function<? super T, ? extends U> mapper)`: Applies a function to the value if present, returning a new `Optional`.\n- `flatMap(Function<? super T, Optional<U>> mapper)`: Similar to `map`, but the function must return an `Optional`.\n\n### 2. **Supplier**\n\n`Supplier` is a functional interface that represents a supplier of results. It is used for generating or supplying values.\n\n**Key Methods:**\n- `get()`: Returns a result. This is the only method in the `Supplier` interface.\n\n### 3. **Collectors**\n\n`Collectors` is a utility class that provides various implementations of the `Collector` interface to be used with streams.\n\n**Key Methods:**\n- `toList()`: Collects elements of a stream into a `List`.\n- `toSet()`: Collects elements of a stream into a `Set`.\n- `toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends V> valueMapper)`: Collects elements into a `Map` using provided key and value mappers.\n- `joining()`: Concatenates the elements of a stream into a single `String`. Overloaded methods allow specifying delimiters, prefixes, and suffixes.\n- `groupingBy(Function<? super T, ? extends K> classifier)`: Groups the elements of a stream by a classifier function into a `Map`.\n- `partitioningBy(Predicate<? super T> predicate)`: Partitions the elements of a stream into a `Map` with Boolean keys based on the predicate.\n- `counting()`: Counts the number of elements in the stream.\n- `summarizingInt(ToIntFunction<? super T> mapper)`: Collects statistics, such as count, sum, min, average, and max, for `int` values.\n- `mapping(Function<? super T, ? extends U> mapper, Collector<? super U, A, R> downstream)`: Applies a mapping function before collecting the results with a downstream collector.\n\nThese classes and methods are integral to functional programming and stream processing in Java, helping to write more concise and readable code.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"7d7933bc-19aa-44cb-a4a2-e58ba20dffe6","order":0,"createdDate":{"$date":"2024-09-13T09:21:00.007Z"},"updatedDate":{"$date":"2024-09-13T09:21:00.007Z"},"uniqueId":"5245831c-190d-40c3-9c21-da803fae3791","__v":0}
{"_id":{"$oid":"66e4047403e1eb31c509b45d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are a few use cases demonstrating the use of `Collectors` in Java 8:\n\n### 1. **Grouping Elements by a Property**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nclass Product {\n    String name;\n    String category;\n\n    Product(String name, String category) {\n        this.name = name;\n        this.category = category;\n    }\n\n    public String getCategory() {\n        return category;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Product> products = Arrays.asList(\n            new Product(\"Laptop\", \"Electronics\"),\n            new Product(\"Shirt\", \"Clothing\"),\n            new Product(\"Mobile\", \"Electronics\"),\n            new Product(\"Jeans\", \"Clothing\")\n        );\n\n        Map<String, List<Product>> productsByCategory = products.stream()\n            .collect(Collectors.groupingBy(Product::getCategory));\n\n        System.out.println(productsByCategory);\n    }\n}\n```\n\n### 2. **Summing Values by a Property**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nclass Order {\n    String product;\n    int quantity;\n\n    Order(String product, int quantity) {\n        this.product = product;\n        this.quantity = quantity;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public String getProduct() {\n        return product;\n    }\n}\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Order> orders = Arrays.asList(\n            new Order(\"Laptop\", 2),\n            new Order(\"Mobile\", 5),\n            new Order(\"Laptop\", 3),\n            new Order(\"Headphones\", 7)\n        );\n\n        Map<String, Integer> totalQuantityByProduct = orders.stream()\n            .collect(Collectors.groupingBy(Order::getProduct, Collectors.summingInt(Order::getQuantity)));\n\n        System.out.println(totalQuantityByProduct);\n    }\n}\n```\n\n### 3. **Joining Strings**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"John\", \"Jane\", \"Jack\");\n\n        String joinedNames = names.stream()\n            .collect(Collectors.joining(\", \"));\n\n        System.out.println(joinedNames);\n    }\n}\n```\n\n### 4. **Partitioning by a Predicate**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(2, 5, 8, 11, 14, 17, 20);\n\n        Map<Boolean, List<Integer>> partitionedByEvenOdd = numbers.stream()\n            .collect(Collectors.partitioningBy(num -> num % 2 == 0));\n\n        System.out.println(partitionedByEvenOdd);\n    }\n}\n```\n\n### 5. **Counting Elements**\n```java\nimport java.util.*;\nimport java.util.stream.Collectors;\n\npublic class CollectorsExample {\n    public static void main(String[] args) {\n        List<String> items = Arrays.asList(\"Apple\", \"Banana\", \"Apple\", \"Orange\", \"Banana\", \"Apple\");\n\n        Map<String, Long> itemCount = items.stream()\n            .collect(Collectors.groupingBy(item -> item, Collectors.counting()));\n\n        System.out.println(itemCount);\n    }\n}\n```\n\nThese examples illustrate various use cases of `Collectors` in Java 8, covering grouping, summing, joining, partitioning, and counting operations.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"9c4989d7-e067-40ad-9b3f-ea9066041f5d","order":0,"createdDate":{"$date":"2024-09-13T09:23:00.698Z"},"updatedDate":{"$date":"2024-09-13T09:23:00.698Z"},"uniqueId":"5c076d22-093c-427d-bf8e-f7884a6c91bf","__v":0}
{"_id":{"$oid":"66e40ec803e1eb31c509dd9f"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here is the completed program to check if two strings are anagrams:\n\n```java\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class AnagramChecker {\n\n    public boolean isAnagram(String s1, String s2) {\n        if (s1 != null && s2 != null) {\n            s1 = s1.trim();\n            s2 = s2.trim();\n            \n            // If lengths are different, they can't be anagrams\n            if (s1.length() != s2.length()) {\n                return false;\n            }\n\n            // Creating character count maps for both strings\n            Map<Character, Long> s1Map = s1.chars()\n                    .mapToObj(c -> (char) c)\n                    .collect(Collectors.groupingBy(c -> c, Collectors.counting()));\n\n            Map<Character, Long> s2Map = s2.chars()\n                    .mapToObj(c -> (char) c)\n                    .collect(Collectors.groupingBy(c -> c, Collectors.counting()));\n\n            // Compare both maps\n            return s1Map.equals(s2Map);\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        AnagramChecker checker = new AnagramChecker();\n\n        String s1 = \"listen\";\n        String s2 = \"silent\";\n\n        if (checker.isAnagram(s1, s2)) {\n            System.out.println(s1 + \" and \" + s2 + \" are anagrams.\");\n        } else {\n            System.out.println(s1 + \" and \" + s2 + \" are not anagrams.\");\n        }\n    }\n}\n```\n\n### Explanation of Fixes:\n- The `s1.trim()` and `s2.trim()` are stored back in `s1` and `s2` to handle leading/trailing spaces.\n- Changed `Collectors.counting()` to count each character's occurrences.\n- Fixed `mapToObj(c -> (char) c)` to correctly convert the `int` stream from `chars()` into a stream of characters.\n- Correctly compare the two maps using `.equals()` at the end.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"dc9d013a-3fc3-408c-adfd-9889ac2de192","order":0,"createdDate":{"$date":"2024-09-13T10:07:04.442Z"},"updatedDate":{"$date":"2024-09-13T10:07:04.442Z"},"uniqueId":"ff9c9e22-2dfe-48a4-9cab-e25a936dffad","__v":0}
{"_id":{"$oid":"66e4165f03e1eb31c50a2b84"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here’s the functional approach to rewrite your code:\n\n```java\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class AnagramChecker {\n\n    public static boolean isAnagram(String s1, String s2) {\n        return (s1 != null && s2 != null) &&\n                s1.trim().length() == s2.trim().length() &&\n                s1.chars().mapToObj(c -> (char) c)\n                        .collect(Collectors.groupingBy(c -> c, Collectors.counting()))\n                        .equals(s2.chars().mapToObj(c -> (char) c)\n                        .collect(Collectors.groupingBy(c -> c, Collectors.counting())));\n    }\n\n    public static void main(String[] args) {\n        String s1 = \"listen\";\n        String s2 = \"silent\";\n\n        System.out.println(isAnagram(s1, s2) ? s1 + \" and \" + s2 + \" are anagrams.\" : s1 + \" and \" + s2 + \" are not anagrams.\");\n    }\n}\n```\n\n### Functional Changes:\n- Combined all checks and operations in a single return statement.\n- Eliminated intermediate variables (`s1Map` and `s2Map`) for a more concise functional approach.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"dd8ec1dd-ee8f-449c-87d2-9121ec159fcc","order":0,"createdDate":{"$date":"2024-09-13T10:39:27.189Z"},"updatedDate":{"$date":"2024-09-13T10:39:27.189Z"},"uniqueId":"d57c934b-e719-45e9-b66d-cdd54c122843","__v":0}
{"_id":{"$oid":"66e54e6b3a40579da27a0cad"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"A **Type Predicate** in TypeScript is a special feature that allows you to create custom type guards, which help TypeScript narrow down types at runtime based on a condition. Type predicates are useful when working with union types or when you need to determine if a variable is of a certain type.\n\n### Syntax:\n\nA type predicate is expressed with the following syntax:\n\n```typescript\nfunction isType(value: any): value is Type {\n  return someCondition(value);\n}\n```\n\nIn this function, `value is Type` is the type predicate. It tells TypeScript that if the function returns `true`, then `value` should be treated as `Type`.\n\n### Example:\n\nLet’s consider a simple example where we have a union type, and we want to differentiate between `string` and `number` types at runtime:\n\n```typescript\nfunction isString(value: any): value is string {\n  return typeof value === 'string';\n}\n\nfunction printValue(value: string | number) {\n  if (isString(value)) {\n    // TypeScript knows value is a string here\n    console.log(`String: ${value.toUpperCase()}`);\n  } else {\n    // TypeScript knows value is a number here\n    console.log(`Number: ${value.toFixed(2)}`);\n  }\n}\n\nprintValue(\"hello\"); // Output: String: HELLO\nprintValue(42);      // Output: Number: 42.00\n```\n\n### Key Points:\n- A type predicate narrows the type by asserting a type in a function.\n- Inside the block where the type guard is used (`if (isString(value))`), TypeScript knows the type of `value`.\n- TypeScript uses this information to give you type-specific features (e.g., `toUpperCase()` for strings or `toFixed()` for numbers).\n\n### Use Case:\n\nType predicates are particularly useful when you need to handle custom objects or complex union types.\n\nExample with custom objects:\n\n```typescript\ninterface Dog {\n  bark: () => void;\n}\n\ninterface Cat {\n  meow: () => void;\n}\n\nfunction isDog(animal: Dog | Cat): animal is Dog {\n  return (animal as Dog).bark !== undefined;\n}\n\nfunction interactWithAnimal(animal: Dog | Cat) {\n  if (isDog(animal)) {\n    animal.bark(); // TypeScript knows this is a Dog\n  } else {\n    animal.meow(); // TypeScript knows this is a Cat\n  }\n}\n```\n\nHere, `isDog` acts as a type predicate to determine if `animal` is of type `Dog`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c22e3f53-a6a3-41ad-ae39-881b833fd2e6","order":0,"createdDate":{"$date":"2024-09-14T08:50:51.891Z"},"updatedDate":{"$date":"2024-09-14T08:50:51.891Z"},"uniqueId":"36c7115f-f944-405d-af45-a48899a17d99","__v":0}
{"_id":{"$oid":"66e566a23a40579da27a5c0b"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In React with TypeScript, `ElementType` is a utility type provided by `@types/react` that represents any valid React component or HTML tag. It is useful when you want to work with a generic component type that could be a string representing an HTML element (like `'div'`, `'span'`, etc.) or a React component (function or class-based).\n\n### Definition:\n```typescript\ntype ElementType<P = any> = keyof JSX.IntrinsicElements | React.JSXElementConstructor<P>;\n```\n\nThis type is defined in `@types/react` and can be broken down as:\n- `keyof JSX.IntrinsicElements`: Represents all valid HTML tags (`'div'`, `'span'`, `'button'`, etc.).\n- `React.JSXElementConstructor<P>`: Represents a React component (either function or class component) with props `P`.\n\n### Use Case:\n\n1. **Generic Component Prop**: You might use `ElementType` when you want to allow a prop to accept either an HTML tag or a React component.\n\n### Example: `ElementType` in a Custom Component\n\nIn this example, `as` is a prop that can be either an HTML element or a custom React component.\n\n```tsx\nimport React, { ElementType, ComponentPropsWithRef } from 'react';\n\ninterface ButtonProps<T extends ElementType = 'button'> {\n  as?: T;\n  children: React.ReactNode;\n  className?: string;\n}\n\n// Use the ComponentPropsWithRef helper to infer the props of the \"as\" element\nfunction Button<T extends ElementType = 'button'>({\n  as,\n  children,\n  className,\n  ...props\n}: ButtonProps<T> & ComponentPropsWithRef<T>) {\n  const Component = as || 'button';\n  return (\n    <Component className={className} {...props}>\n      {children}\n    </Component>\n  );\n}\n\nexport default function App() {\n  return (\n    <div>\n      <Button as=\"a\" href=\"https://www.example.com\">Link Button</Button>\n      <Button as=\"button\">Button</Button>\n      <Button as=\"div\">Div Button</Button>\n    </div>\n  );\n}\n```\n\n### Explanation:\n- **`ElementType`** allows the `as` prop to be any valid HTML tag or React component.\n- **`ComponentPropsWithRef<T>`** is used to infer the props for the `as` component, allowing TypeScript to understand the available props like `href` for an anchor tag or `onClick` for a button.\n- The `Button` component can be used with different `as` types, making it more flexible.\n\n### Why Use `ElementType`?\n- **Flexibility**: It enables you to create reusable components that can change the underlying HTML element or React component.\n- **Type Safety**: It ensures that the correct props are passed based on the type of component being rendered, either an HTML element or a React component.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"06730979-1db0-49b4-805b-796d93c71c33","order":0,"createdDate":{"$date":"2024-09-14T10:34:10.265Z"},"updatedDate":{"$date":"2024-09-14T10:34:10.265Z"},"uniqueId":"515f3394-3ad6-444b-ba41-5c3d6fef2720","__v":0}
{"_id":{"$oid":"66e56ad13a40579da27a83a9"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In React with TypeScript, `ElementType` and `ReactNode` are both utility types used to describe the types of elements and components, but they serve different purposes and have distinct use cases. Here's a breakdown of the differences:\n\n### 1. **ReactNode**:\n- **Definition**: \n  `ReactNode` is a type that describes anything that can be rendered in JSX. This includes:\n  - Strings, numbers, booleans (though `false`, `null`, and `undefined` don't render anything)\n  - React elements (e.g., `<div />`)\n  - Arrays of nodes\n  - `null`, `undefined`, and `false` (which represent no rendering)\n\n- **Use Case**: Use `ReactNode` when defining the type of `children` or any prop that will accept valid JSX content.\n\n- **Example**:\n  ```tsx\n  type MyComponentProps = {\n    children: React.ReactNode;\n  };\n\n  const MyComponent: React.FC<MyComponentProps> = ({ children }) => {\n    return <div>{children}</div>;\n  };\n  ```\n\n- **ReactNode Includes**:\n  - Strings (`\"Hello\"`)\n  - Numbers (`123`)\n  - JSX elements (`<div />`)\n  - `null`, `undefined`, `false` (to represent no rendering)\n\n- **What It Represents**:\n  - Any valid content that can be rendered inside a React component.\n\n### 2. **ElementType**:\n- **Definition**: \n  `ElementType` is a type that represents any valid React component type or HTML element name. This includes:\n  - HTML tags like `'div'`, `'button'`, `'a'`, etc.\n  - Custom React components (either function components or class components)\n\n- **Use Case**: Use `ElementType` when you want a prop to accept a component (either a string representing an HTML element or a React component) that you can later render.\n\n- **Example**:\n  ```tsx\n  import { ElementType } from 'react';\n\n  type MyComponentProps<T extends ElementType> = {\n    as?: T; // \"as\" prop can be an HTML element or React component\n  };\n\n  const MyComponent = <T extends ElementType = 'div'>({ as }: MyComponentProps<T>) => {\n    const Tag = as || 'div';\n    return <Tag>Some content</Tag>;\n  };\n\n  // Usage\n  <MyComponent as=\"button\" />; // renders a <button>\n  <MyComponent as={SomeCustomComponent} />; // renders a custom React component\n  ```\n\n- **ElementType Includes**:\n  - HTML element strings (e.g., `'div'`, `'span'`, `'button'`)\n  - React component classes or functions\n\n- **What It Represents**:\n  - A valid component type (either an HTML tag or a React component) that can be rendered.\n\n### **Key Differences**:\n\n| Feature       | **ReactNode**                                                | **ElementType**                                      |  \n|---------------|--------------------------------------------------------------|------------------------------------------------------|  \n| **Definition**| Anything that can be rendered in JSX (strings, numbers, JSX elements, etc.) | A type representing HTML elements or React components |  \n| **Use Case**  | For describing the type of `children` or any renderable content | For describing component props when you want a flexible component or HTML tag |  \n| **Includes**  | Strings, numbers, JSX elements, arrays of nodes, `null`, `undefined`, `false` | HTML tags (like `'div'`, `'button'`) or React components |  \n| **Example**   | `<div>{children}</div>`                                       | `<Component as=\"button\" />` or `<Component as={CustomComponent} />` |  \n\n### Summary:\n- **`ReactNode`** is used to describe any valid content that can be rendered in React, making it ideal for `children` or similar props.\n- **`ElementType`** is used to represent a component (either a string representing an HTML tag or a React component), making it suitable for flexible components like those with an `as` prop.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b8a53265-f34f-44b2-986e-6f82335a5055","order":0,"createdDate":{"$date":"2024-09-14T10:52:01.066Z"},"updatedDate":{"$date":"2024-09-14T10:52:01.066Z"},"uniqueId":"f2a86617-c631-49a5-b3b6-4d98d52d9341","__v":0}
{"_id":{"$oid":"66e582fb3a40579da27b1709"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The core idea behind generic types in TypeScript is to create reusable components or functions that work with a variety of types while still maintaining type safety. Generics allow you to define types and functions that can handle any type of data, but the type is specified only when the component or function is used.\n\n### Core Concepts:\n\n1. **Type Parameterization**:\n   Generics allow you to define a placeholder type (usually denoted by `T` or another type parameter) that can be specified later when the component or function is instantiated. This provides flexibility and reusability.\n\n   ```typescript\n   function identity<T>(arg: T): T {\n     return arg;\n   }\n   ```\n\n   Here, `T` is a generic type parameter. It can represent any type, and the actual type is specified when calling the function.\n\n2. **Type Safety**:\n   Generics ensure that the types used within a function or class are consistent and predictable. This means that you get the benefits of type checking and autocompletion, which helps prevent bugs.\n\n   ```typescript\n   const result = identity<number>(42); // T is specified as number\n   ```\n\n3. **Reusability**:\n   Generics allow you to write components or functions that can handle a variety of types without duplicating code. This promotes DRY (Don't Repeat Yourself) principles.\n\n   ```typescript\n   class Box<T> {\n     value: T;\n     constructor(value: T) {\n       this.value = value;\n     }\n   }\n   ```\n\n   In this example, `Box` is a generic class that can store any type of value.\n\n4. **Constraints**:\n   You can constrain the types that can be used with a generic by specifying bounds. This restricts the generic type to only those types that meet certain criteria.\n\n   ```typescript\n   function logLength<T extends { length: number }>(arg: T): void {\n     console.log(arg.length);\n   }\n   ```\n\n   Here, `T` must be a type that has a `length` property.\n\n5. **Default Types**:\n   Generics can have default types, which will be used if no specific type is provided.\n\n   ```typescript\n   function createArray<T = string>(length: number, value: T): T[] {\n     return Array(length).fill(value);\n   }\n   ```\n\n   If no type is specified, `T` defaults to `string`.\n\n### Example Usage\n\n#### Generic Function\n\n```typescript\nfunction merge<T, U>(obj1: T, obj2: U): T & U {\n  return { ...obj1, ...obj2 };\n}\n\nconst result = merge({ name: 'Alice' }, { age: 25 });\n// result: { name: 'Alice', age: 25 }\n```\n\n#### Generic Class\n\n```typescript\nclass Container<T> {\n  private value: T;\n\n  constructor(value: T) {\n    this.value = value;\n  }\n\n  getValue(): T {\n    return this.value;\n  }\n}\n\nconst numberContainer = new Container<number>(123);\nconst stringContainer = new Container<string>('hello');\n```\n\n### Summary\nGenerics in TypeScript provide a powerful way to write flexible, reusable, and type-safe code. They allow you to abstract and generalize code while still maintaining the benefits of static type checking.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"f1b6850e-5110-434a-95c4-96b825b06a21","order":0,"createdDate":{"$date":"2024-09-14T12:35:07.305Z"},"updatedDate":{"$date":"2024-09-14T12:35:07.305Z"},"uniqueId":"174c47a5-9997-43e8-82fc-f25139104c3a","__v":0}
{"_id":{"$oid":"66e598943a40579da27b4013"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"`forwardRef` in React is a function that allows you to pass a ref from a parent component to a child component, which can then access the DOM element or a class component inside the child. By default, refs cannot be passed directly to functional components, but `forwardRef` enables this behavior.\n\n### Core Idea:\n\nThe main purpose of `forwardRef` is to give a parent component the ability to access the DOM element or a child component’s instance created in a functional component. This is particularly useful when you need to interact with the underlying DOM directly, like focusing an input or managing scroll positions.\n\n### Basic Example\n\n```jsx\nimport React, { forwardRef } from 'react';\n\n// Define a functional component that uses forwardRef\nconst MyInput = forwardRef((props, ref) => {\n  return <input ref={ref} {...props} />;\n});\n\nfunction ParentComponent() {\n  const inputRef = React.useRef(null);\n\n  const focusInput = () => {\n    // Focus the input element from the parent component\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <MyInput ref={inputRef} />\n      <button onClick={focusInput}>Focus the input</button>\n    </div>\n  );\n}\n\nexport default ParentComponent;\n```\n\n### Key Concepts:\n1. **Accessing Child DOM Element**: `forwardRef` allows the parent component to get direct access to the child component's DOM element (in this case, the `input` element).\n  \n2. **Refs in Functional Components**: Normally, refs work only with class components or DOM elements, but `forwardRef` extends this capability to functional components.\n\n3. **Props and Refs Together**: The `forwardRef` function takes two arguments:\n   - `props`: The props passed to the component.\n   - `ref`: The ref that’s forwarded to the child component.\n\n### When to Use `forwardRef`:\n- When you need to focus or manipulate a DOM element inside a functional component from a parent component.\n- When you want to expose an internal DOM element of a component to its parent.\n\n### Example Use Cases:\n1. **Controlling focus** (e.g., focusing an input field).\n2. **Managing scroll positions** of an element.\n3. **Triggering animations** on child elements directly. \n\nIn short, `forwardRef` is useful for forwarding refs to child components, particularly functional components that don’t natively accept refs.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"73693c23-a69b-4cad-bdec-3c4c6cca7ca8","order":0,"createdDate":{"$date":"2024-09-14T14:07:16.934Z"},"updatedDate":{"$date":"2024-09-14T14:07:16.934Z"},"uniqueId":"64474119-f2b2-4bb2-add6-a05d30f0dbfd","__v":0}
{"_id":{"$oid":"66e5cde73a40579da27b6889"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The `useImperativeHandle` hook in React is used to customize the instance value (or imperative methods) that is exposed to a parent component when using `ref`. It allows a child component to expose a controlled API to the parent, instead of just exposing a DOM node or component instance. This is particularly useful when you want to interact with a child component in a more structured or controlled way.\n\n### Common Use Cases for `useImperativeHandle`:\n\n1. **Controlling DOM Elements from Parent Components**:\n   - `useImperativeHandle` can be used to expose certain DOM manipulation methods (e.g., `focus`, `scroll`) from a child component to its parent. This gives the parent component control over the child’s behavior, like focusing an input or triggering animations.\n\n   ```jsx\n   import React, { useRef, useImperativeHandle, forwardRef } from 'react';\n\n   const InputComponent = forwardRef((props, ref) => {\n     const inputRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       focusInput: () => {\n         inputRef.current.focus();\n       },\n     }));\n\n     return <input ref={inputRef} />;\n   });\n\n   function ParentComponent() {\n     const inputComponentRef = useRef();\n\n     const focusChildInput = () => {\n       inputComponentRef.current.focusInput(); // Access the focus method from the child\n     };\n\n     return (\n       <div>\n         <InputComponent ref={inputComponentRef} />\n         <button onClick={focusChildInput}>Focus Input</button>\n       </div>\n     );\n   }\n   ```\n\n2. **Exposing Custom Methods from Functional Components**:\n   - In a functional component, you can use `useImperativeHandle` to expose custom methods or state to a parent component, even though functional components do not have the same instance methods as class components.\n   - For instance, in a slider or carousel component, you could expose `next` and `previous` methods to control the slides from the parent.\n\n   ```jsx\n   const Carousel = forwardRef((props, ref) => {\n     const [index, setIndex] = useState(0);\n\n     useImperativeHandle(ref, () => ({\n       next: () => setIndex((i) => i + 1),\n       previous: () => setIndex((i) => i - 1),\n     }));\n\n     return <div>Slide {index}</div>;\n   });\n\n   function App() {\n     const carouselRef = useRef();\n\n     return (\n       <div>\n         <Carousel ref={carouselRef} />\n         <button onClick={() => carouselRef.current.previous()}>Previous</button>\n         <button onClick={() => carouselRef.current.next()}>Next</button>\n       </div>\n     );\n   }\n   ```\n\n3. **Managing Scroll or Animation from Parent**:\n   - For complex elements like scrollable lists or animations, you can expose imperative methods that manage the scroll position or trigger specific animations. This allows the parent to control these actions without tightly coupling with the child component’s implementation.\n\n   ```jsx\n   const ScrollableList = forwardRef((props, ref) => {\n     const listRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       scrollToTop: () => listRef.current.scrollTo(0, 0),\n       scrollToBottom: () => listRef.current.scrollTo(0, listRef.current.scrollHeight),\n     }));\n\n     return (\n       <div ref={listRef} style={{ height: '200px', overflowY: 'auto' }}>\n         {props.children}\n       </div>\n     );\n   });\n\n   function App() {\n     const listRef = useRef();\n\n     return (\n       <div>\n         <ScrollableList ref={listRef}>\n           {/* List of items */}\n         </ScrollableList>\n         <button onClick={() => listRef.current.scrollToTop()}>Scroll to Top</button>\n         <button onClick={() => listRef.current.scrollToBottom()}>Scroll to Bottom</button>\n       </div>\n     );\n   }\n   ```\n\n4. **Extending Component Functionalities Without Exposing the Entire DOM**:\n   - You may want to expose only a subset of the component's functionality instead of the entire DOM reference. `useImperativeHandle` allows you to control what is exposed to the parent component, offering more flexibility in handling encapsulation and abstraction.\n\n   ```jsx\n   const Modal = forwardRef((props, ref) => {\n     const [isOpen, setIsOpen] = useState(false);\n\n     useImperativeHandle(ref, () => ({\n       open: () => setIsOpen(true),\n       close: () => setIsOpen(false),\n     }));\n\n     return isOpen ? <div>Modal Content</div> : null;\n   });\n\n   function App() {\n     const modalRef = useRef();\n\n     return (\n       <div>\n         <button onClick={() => modalRef.current.open()}>Open Modal</button>\n         <button onClick={() => modalRef.current.close()}>Close Modal</button>\n         <Modal ref={modalRef} />\n       </div>\n     );\n   }\n   ```\n\n### Key Points:\n- **Functional Component Refs**: `useImperativeHandle` enables functional components to expose imperative methods or values similar to class component instance methods.\n- **Custom API Exposure**: It provides a controlled way to expose methods or properties, avoiding exposing the entire component or DOM node, enhancing encapsulation.\n- **DOM Manipulation**: Often used for scenarios where you need to manipulate DOM elements like focus, scroll, or animations from the parent.\n- **Works with `forwardRef`**: It must be used in conjunction with `forwardRef`, as the ref is forwarded from the parent component to the child.\n\nIn summary, `useImperativeHandle` is useful for creating components that need to expose specific functionalities (like focus, scroll, or other imperative actions) to their parent components without exposing the entire DOM node or component.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"692b3b52-a0b0-4245-87ce-beb90cf2d9d8","order":0,"createdDate":{"$date":"2024-09-14T17:54:47.597Z"},"updatedDate":{"$date":"2024-09-14T17:54:47.597Z"},"uniqueId":"c6957d5a-cca7-4c13-a300-5bfe71fd09d7","__v":0}
{"_id":{"$oid":"66e5d4bd3a40579da27b91f1"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Here are a few more **imperative actions** that you can control with `useImperativeHandle` in React:\n\n### 1. **Play, Pause, and Control Media Elements (Audio/Video)**\n   - **Use Case**: Control the playback of audio or video elements.\n   ```jsx\n   const VideoPlayer = forwardRef((props, ref) => {\n     const videoRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       play: () => videoRef.current.play(),\n       pause: () => videoRef.current.pause(),\n       stop: () => {\n         videoRef.current.pause();\n         videoRef.current.currentTime = 0;\n       },\n     }));\n\n     return <video ref={videoRef} src=\"video.mp4\" controls />;\n   });\n\n   function App() {\n     const videoPlayerRef = useRef();\n\n     return (\n       <div>\n         <VideoPlayer ref={videoPlayerRef} />\n         <button onClick={() => videoPlayerRef.current.play()}>Play</button>\n         <button onClick={() => videoPlayerRef.current.pause()}>Pause</button>\n         <button onClick={() => videoPlayerRef.current.stop()}>Stop</button>\n       </div>\n     );\n   }\n   ```\n\n### 2. **Trigger Animations**\n   - **Use Case**: Control animations or transitions in a child component from the parent.\n   ```jsx\n   const AnimatedBox = forwardRef((props, ref) => {\n     const boxRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       startAnimation: () => {\n         boxRef.current.classList.add('animate');\n       },\n       stopAnimation: () => {\n         boxRef.current.classList.remove('animate');\n       },\n     }));\n\n     return <div ref={boxRef} className=\"box\">Box</div>;\n   });\n\n   function App() {\n     const boxRef = useRef();\n\n     return (\n       <div>\n         <AnimatedBox ref={boxRef} />\n         <button onClick={() => boxRef.current.startAnimation()}>Start Animation</button>\n         <button onClick={() => boxRef.current.stopAnimation()}>Stop Animation</button>\n       </div>\n     );\n   }\n   ```\n\n### 3. **Form Reset or Submit**\n   - **Use Case**: Programmatically submit or reset a form from a parent component.\n   ```jsx\n   const FormComponent = forwardRef((props, ref) => {\n     const formRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       resetForm: () => {\n         formRef.current.reset();\n       },\n       submitForm: () => {\n         formRef.current.submit();\n       },\n     }));\n\n     return (\n       <form ref={formRef}>\n         <input type=\"text\" name=\"name\" />\n         <button type=\"submit\">Submit</button>\n       </form>\n     );\n   });\n\n   function App() {\n     const formRef = useRef();\n\n     return (\n       <div>\n         <FormComponent ref={formRef} />\n         <button onClick={() => formRef.current.submitForm()}>Submit Form</button>\n         <button onClick={() => formRef.current.resetForm()}>Reset Form</button>\n       </div>\n     );\n   }\n   ```\n\n### 4. **Opening and Closing Modals**\n   - **Use Case**: Control the open/close state of modals or dialogs.\n   ```jsx\n   const Modal = forwardRef((props, ref) => {\n     const [isOpen, setIsOpen] = useState(false);\n\n     useImperativeHandle(ref, () => ({\n       openModal: () => setIsOpen(true),\n       closeModal: () => setIsOpen(false),\n     }));\n\n     return isOpen ? <div className=\"modal\">Modal Content</div> : null;\n   });\n\n   function App() {\n     const modalRef = useRef();\n\n     return (\n       <div>\n         <Modal ref={modalRef} />\n         <button onClick={() => modalRef.current.openModal()}>Open Modal</button>\n         <button onClick={() => modalRef.current.closeModal()}>Close Modal</button>\n       </div>\n     );\n   }\n   ```\n\n### 5. **Manage Tooltip Visibility**\n   - **Use Case**: Show or hide a tooltip programmatically.\n   ```jsx\n   const Tooltip = forwardRef((props, ref) => {\n     const [isVisible, setIsVisible] = useState(false);\n\n     useImperativeHandle(ref, () => ({\n       show: () => setIsVisible(true),\n       hide: () => setIsVisible(false),\n     }));\n\n     return isVisible ? <div className=\"tooltip\">Tooltip</div> : null;\n   });\n\n   function App() {\n     const tooltipRef = useRef();\n\n     return (\n       <div>\n         <Tooltip ref={tooltipRef} />\n         <button onClick={() => tooltipRef.current.show()}>Show Tooltip</button>\n         <button onClick={() => tooltipRef.current.hide()}>Hide Tooltip</button>\n       </div>\n     );\n   }\n   ```\n\n### 6. **Resetting or Updating Timers**\n   - **Use Case**: Control timers or intervals (e.g., start, stop, or reset).\n   ```jsx\n   const Timer = forwardRef((props, ref) => {\n     const [seconds, setSeconds] = useState(0);\n     const intervalRef = useRef(null);\n\n     useImperativeHandle(ref, () => ({\n       startTimer: () => {\n         intervalRef.current = setInterval(() => {\n           setSeconds(prev => prev + 1);\n         }, 1000);\n       },\n       stopTimer: () => {\n         clearInterval(intervalRef.current);\n       },\n       resetTimer: () => {\n         clearInterval(intervalRef.current);\n         setSeconds(0);\n       },\n     }));\n\n     return <div>Elapsed Time: {seconds}s</div>;\n   });\n\n   function App() {\n     const timerRef = useRef();\n\n     return (\n       <div>\n         <Timer ref={timerRef} />\n         <button onClick={() => timerRef.current.startTimer()}>Start Timer</button>\n         <button onClick={() => timerRef.current.stopTimer()}>Stop Timer</button>\n         <button onClick={() => timerRef.current.resetTimer()}>Reset Timer</button>\n       </div>\n     );\n   }\n   ```\n\n### 7. **Triggering File Input (File Upload)**\n   - **Use Case**: Open the file upload dialog programmatically.\n   ```jsx\n   const FileUpload = forwardRef((props, ref) => {\n     const inputRef = useRef();\n\n     useImperativeHandle(ref, () => ({\n       triggerUpload: () => {\n         inputRef.current.click();\n       },\n     }));\n\n     return <input ref={inputRef} type=\"file\" style={{ display: 'none' }} />;\n   });\n\n   function App() {\n     const fileUploadRef = useRef();\n\n     return (\n       <div>\n         <FileUpload ref={fileUploadRef} />\n         <button onClick={() => fileUploadRef.current.triggerUpload()}>Upload File</button>\n       </div>\n     );\n   }\n   ```\n\n### Summary of Common Imperative Actions:\n1. **Focus**: Focus a text input or form field.\n2. **Scroll**: Scroll to a specific element or position.\n3. **Play/Pause Media**: Control video or audio playback.\n4. **Trigger Animations**: Start or stop animations or transitions.\n5. **Form Submission**: Programmatically submit or reset forms.\n6. **Modal Control**: Open or close modals or dialogs.\n7. **Tooltip**: Show or hide tooltips.\n8. **Timers**: Start, stop, or reset timers or intervals.\n9. **File Upload**: Open file input dialogs.\n\nThese use cases show how `useImperativeHandle` can enable imperative actions that go beyond just basic DOM manipulation, giving fine-grained control to parent components.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"63734fd5-3d00-4125-bf61-c0bc4d84cd15","order":0,"createdDate":{"$date":"2024-09-14T18:23:57.217Z"},"updatedDate":{"$date":"2024-09-14T18:23:57.217Z"},"uniqueId":"f7d8b43c-ccd3-4055-beca-2da48df1a7d0","__v":0}
{"_id":{"$oid":"66e5e62b3a40579da27bbcb4"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"When merging two React projects, CSS conflicts can occur due to overlapping or contradictory styles. To resolve these issues, you can adopt multiple strategies, such as **CSS modules**, **namespacing**, and **scoped styles**. Below are suggestions and strategies to help isolate and prevent CSS from conflicting:\n\n### 1. **Use CSS Modules**\n   - CSS modules ensure that styles are scoped locally to the component, preventing conflicts with other styles.\n   - Rename the `.css` files to `.module.css`.\n   - Update your CSS imports and apply classes using `className={styles.someClass}`.\n\n```css\n/* index.module.css */\nbody {\n  font-family: 'Quicksand', sans-serif;\n  background: linear-gradient(#c8d8d7, #979e9d);\n}\n\n#root {\n  max-width: 50rem;\n  margin: 2rem auto;\n  padding: 2rem;\n  background: linear-gradient(#35535b, #294a52);\n  border-radius: 8px;\n  color: white;\n}\n\n/* ... other styles */\n```\n\n```css\n/* course.module.css */\nbody {\n  font-family: 'Poppins', sans-serif;\n  background: linear-gradient(#f0f6f8, #e0e1e7);\n}\n\nmain {\n  width: 90%;\n  background-color: #d58d1f;\n  padding: 2rem;\n  color: #f0f8f1;\n  border-radius: 6px;\n}\n\n/* ... other styles */\n```\n\n**Usage in components:**\n```jsx\nimport styles from './index.module.css';\n\nconst IndexComponent = () => {\n  return (\n    <div className={styles.root}>\n      {/* JSX content */}\n    </div>\n  );\n};\n```\n\n### 2. **Scoped CSS (or BEM Naming Convention)**\n   - Use more specific class names or scope the styles to a certain class to avoid conflicts.\n   - You can use a BEM (Block, Element, Modifier) naming convention to avoid clashes.\n\n```css\n/* Scoped or BEM styles in index.css */\n.index-body {\n  background: linear-gradient(#c8d8d7, #979e9d);\n  font-family: 'Quicksand', sans-serif;\n}\n\n.index-root {\n  background: linear-gradient(#35535b, #294a52);\n  border-radius: 8px;\n  padding: 2rem;\n}\n```\n\n```css\n/* Scoped styles in course.css */\n.course-body {\n  background: linear-gradient(#f0f6f8, #e0e1e7);\n  font-family: 'Poppins', sans-serif;\n}\n\n.course-main {\n  background-color: #d58d1f;\n  padding: 2rem;\n  color: #f0f8f1;\n  border-radius: 6px;\n}\n```\n\nIn your React component:\n```jsx\n<div className=\"index-root\">\n  {/* Index specific content */}\n</div>\n```\n\n### 3. **Prefixing Classes**\n   - If you can't use CSS Modules, manually prefix class names for better isolation.\n   - This will avoid conflicts by giving unique class names to each project’s styles.\n\n```css\n/* index.css */\n.index-body {\n  font-family: 'Quicksand', sans-serif;\n  background: linear-gradient(#c8d8d7, #979e9d);\n}\n\n/* course.css */\n.course-body {\n  font-family: 'Poppins', sans-serif;\n  background: linear-gradient(#f0f6f8, #e0e1e7);\n}\n```\n\n### 4. **Use Styled-Components (CSS-in-JS)**\n   - Using a CSS-in-JS solution like **styled-components** will scope the styles directly to the component, avoiding conflicts altogether.\n   - This approach encapsulates your styles in JavaScript files, avoiding clashes with other components.\n\n```jsx\nimport styled from 'styled-components';\n\nconst StyledRoot = styled.div`\n  max-width: 50rem;\n  margin: 2rem auto;\n  padding: 2rem;\n  background: linear-gradient(#35535b, #294a52);\n  border-radius: 8px;\n  color: white;\n`;\n\nconst IndexComponent = () => (\n  <StyledRoot>\n    {/* Content */}\n  </StyledRoot>\n);\n```\n\n### 5. **Namespace the Project Styles**\n   - Wrap each project’s CSS in a namespace by wrapping elements in a container with a unique class or ID.\n   - Add a class to a container (`<div class=\"index-app\">` for project A, `<div class=\"course-app\">` for project B) and scope all CSS rules within that container.\n\n```css\n/* index.css */\n.index-app body {\n  font-family: 'Quicksand', sans-serif;\n  background: linear-gradient(#c8d8d7, #979e9d);\n}\n\n.index-app #root {\n  background: linear-gradient(#35535b, #294a52);\n  border-radius: 8px;\n  padding: 2rem;\n}\n```\n\n```css\n/* course.css */\n.course-app body {\n  font-family: 'Poppins', sans-serif;\n  background: linear-gradient(#f0f6f8, #e0e1e7);\n}\n\n.course-app main {\n  background-color: #d58d1f;\n  padding: 2rem;\n  color: #f0f8f1;\n}\n```\n\n### 6. **Global vs Local Styles**\n   - If some styles are supposed to be **global**, define them in a single shared file (like `global.css`), and keep the other styles scoped.\n\n```css\n/* global.css */\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n}\n\n/* Specific styles are separated into their own CSS */\n```\n\n### 7. **Remove or Refactor Conflicting Global Styles**\n   - Identify the most problematic styles and refactor them into more specific rules or namespaces.\n   - Be cautious of universal selectors like `*`, `body`, or `ul` in global styles, as they can easily lead to conflicts across different components.\n\n### Conclusion\nYou can fix the CSS conflicts in your combined React project by using one or more of these methods:\n- **CSS Modules** for isolated styles.\n- **Scoped or Namespaced CSS** using classes or IDs.\n- **CSS-in-JS** solutions like styled-components.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"03467fd1-8153-4115-b022-29be71f4f219","order":0,"createdDate":{"$date":"2024-09-14T19:38:19.297Z"},"updatedDate":{"$date":"2024-09-14T19:38:19.297Z"},"uniqueId":"7e7def3f-bae1-40ab-a340-22f0df6321b1","__v":0}
{"_id":{"$oid":"66e7e302656c0d07ce30bfed"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To create a new Next.js project from scratch on your Windows machine with Node.js already installed, follow these commands:\n\n1. **Open Command Prompt** or **PowerShell**.\n\n2. **Navigate to the desired directory** where you want to create your project:\n   ```bash\n   cd path\\to\\your\\directory\n   ```\n\n3. **Run the following command to create a new Next.js app**:\n   ```bash\n   npx create-next-app@latest\n   ```\n\n4. **Follow the prompts** to name your project and set preferences. For example, you can name your project `my-next-app`.\n\n5. **Navigate to the project folder**:\n   ```bash\n   cd my-next-app\n   ```\n\n6. **Start the development server**:\n   ```bash\n   npm run dev\n   ```\n\nThis will start the Next.js development server, and you can access the app at `http://localhost:3000`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"892ec031-012a-48cb-99e7-d77d8882b265","order":0,"createdDate":{"$date":"2024-09-16T07:49:22.359Z"},"updatedDate":{"$date":"2024-09-16T07:49:22.359Z"},"uniqueId":"2a63160d-2db1-4a53-bf8b-c68271c6c08c","__v":0}
{"_id":{"$oid":"66e7e36b656c0d07ce30e731"},"name":"Yes it is possible","heading":"Yes It is possible","smartContent":{"content":"Yes, you can directly specify the project folder name in the same command. Here's how:\n\n```bash\nnpx create-next-app@latest my-next-app\n```\n\nReplace `my-next-app` with your desired folder name. This will create a new Next.js project in a folder with that name.\n\nOnce done, navigate to the folder and start the development server:\n\n```bash\ncd my-next-app\nnpm run dev\n```","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"37fc5132-01e0-4630-a72a-3951cc99d31c","order":0,"createdDate":{"$date":"2024-09-16T07:51:07.27Z"},"updatedDate":{"$date":"2024-09-16T07:51:07.27Z"},"uniqueId":"7b1a2450-c475-4d59-ab05-5caaf57b7a96","__v":0}
{"_id":{"$oid":"66e7e978656c0d07ce3122a6"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To run your Next.js app on a different port, like `5174`, use the following command:\n\n```bash\nnpm run dev -- -p 5174\n```\n\nThis will start your Next.js app on `http://localhost:5174` instead of the default `3000`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"07fc8891-7e81-4955-b296-9591b7b39ccb","order":0,"createdDate":{"$date":"2024-09-16T08:16:56.614Z"},"updatedDate":{"$date":"2024-09-16T08:16:56.614Z"},"uniqueId":"9549f053-cbf9-4b57-9ef6-1328eae1081c","__v":0}
{"_id":{"$oid":"66e7eaed656c0d07ce314a0c"},"name":"Yes, with the help of `.env.local` file","heading":"Yes, with the help of `.env.local` file","smartContent":{"content":"Yes, you can specify the port in a `.env` file by adding the following line:\n\n1. Create a `.env.local` file in the root of your Next.js project (if it doesn't already exist).\n\n2. Add the following line to specify the port:\n   ```\n   PORT=5174\n   ```\n\n3. Run your project as usual with:\n   ```bash\n   npm run dev\n   ```\n\nThis will automatically pick up the port from the `.env.local` file and run your app on `http://localhost:5174`.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"7840eada-34a2-4147-a2fd-d5fccc573c08","order":0,"createdDate":{"$date":"2024-09-16T08:23:09.321Z"},"updatedDate":{"$date":"2024-09-16T08:23:09.321Z"},"uniqueId":"d95ec596-d084-439c-a368-3a3fc41d315a","__v":0}
{"_id":{"$oid":"66e7f967656c0d07ce3171d7"},"name":"Check presence of app or pages folder in next.js project","heading":"Check presence of app or pages folder in next.js project","smartContent":{"content":"To check whether your Next.js app is using the **App Router** (introduced in Next.js 13) or the **Pages Router** (traditional routing in Next.js), you can do the following:\n\n1. **App Router (Next.js 13+)**:\n   - Check for the presence of an `app/` directory in the root of your project.\n   - If your project has an `app/` directory (e.g., `app/page.tsx` or `app/page.js`), it indicates that you are using the **App Router**.\n\n2. **Pages Router (Traditional)**:\n   - Check for the presence of a `pages/` directory in the root of your project.\n   - If you have a `pages/` directory (e.g., `pages/index.tsx` or `pages/index.js`), it means your project is using the **Pages Router**.\n\nYou might also be using a combination of both, as Next.js allows using both routers simultaneously for migration purposes.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"66c64d15-9097-49c2-9fef-ba2698f32d95","order":0,"createdDate":{"$date":"2024-09-16T09:24:55.161Z"},"updatedDate":{"$date":"2024-09-16T09:24:55.161Z"},"uniqueId":"b8d7f383-7d7e-4bbc-8a94-45f9f2397493","__v":0}
{"_id":{"$oid":"66e80cf5656c0d07ce3199cc"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The error occurs because you're trying to use `useState`, which is a React hook that can only be used in **Client Components**. By default, all components in the `app/` directory in Next.js 13+ are **Server Components** unless explicitly marked as **Client Components**.\n\nTo fix this, you need to mark the component (or its parent) where you're using `useState` as a **Client Component** by adding `\"use client\"` at the top of the file.\n\nHere’s how you can do it:\n\n1. Open your `./src/app/playground/page.tsx` file.\n\n2. At the very top of the file, add:\n   ```tsx\n   \"use client\";\n   ```\n\nNow, the component will be treated as a **Client Component**, allowing you to use `useState` and other client-side hooks.\n\nExample:\n\n```tsx\n// ./src/app/playground/page.tsx\n\n\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function Playground() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n\nThis will resolve the error and allow you to use client-side state management in your component.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"20238f82-0946-43a6-9cac-e5f829616c27","order":0,"createdDate":{"$date":"2024-09-16T10:48:21.461Z"},"updatedDate":{"$date":"2024-09-16T10:48:21.461Z"},"uniqueId":"97a5b316-df65-45ea-8427-1be1d73197da","__v":0}
{"_id":{"$oid":"66e81026656c0d07ce31c140"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In Next.js 13+, while the `app/` directory defaults to **Server Components**, you can still place regular React components (which may need to be **Client Components**) in various locations depending on your project structure. Here’s a general guide on where you can place your regular React components:\n\n### 1. **Inside the `app/` Directory**:\n   - **Use Client Components**: You can still place your regular React components inside the `app/` directory but mark them as **Client Components** by adding `\"use client\"` at the top of the file.\n   \n   Example:\n   ```\n   app/components/MyComponent.tsx\n   ```\n   ```tsx\n   \"use client\"; // Add this at the top for client-side behavior\n\n   import { useState } from \"react\";\n\n   export default function MyComponent() {\n     const [count, setCount] = useState(0);\n     return (\n       <div>\n         <button onClick={() => setCount(count + 1)}>Count: {count}</button>\n       </div>\n     );\n   }\n   ```\n\n### 2. **A `components/` Directory Outside `app/`**:\n   - You can also create a `components/` directory outside of the `app/` directory and place your regular React components there.\n   \n   Example:\n   ```\n   src/components/MyComponent.tsx\n   ```\n\n   - Then, in your `app/` directory or any other component, import them as needed.\n\n   Example:\n   ```tsx\n   // ./app/playground/page.tsx\n   \"use client\"; // If needed\n\n   import MyComponent from \"@/components/MyComponent\";\n\n   export default function Playground() {\n     return (\n       <div>\n         <MyComponent />\n       </div>\n     );\n   }\n   ```\n\n### 3. **Inside the `pages/` Directory** (If Still Using Pages Router):\n   - If you're still using the **Pages Router** (`pages/` directory), you can place regular React components inside the `pages/` directory, where client-side components are the default behavior.\n   \n   Example:\n   ```\n   pages/components/MyComponent.tsx\n   ```\n\n### General Best Practice:\n- For better code organization, it’s common to create a `components/` folder (or similar) inside `src/` or `app/` and store reusable components there. Just ensure that any component needing client-side functionality is marked with `\"use client\"` if it's inside the `app/` directory.\n\n### Example Project Structure:\n```\nsrc/\n├── app/\n│   ├── page.tsx\n│   ├── playground/\n│   │   └── page.tsx\n├── components/\n│   └── MyComponent.tsx\n```\n\nThis keeps your **Server** and **Client Components** organized and flexible for usage throughout your Next.js app.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"83f8355c-bc98-438d-9d47-c05e440354cd","order":0,"createdDate":{"$date":"2024-09-16T11:01:58.162Z"},"updatedDate":{"$date":"2024-09-16T11:01:58.162Z"},"uniqueId":"c1366873-6035-4bbd-8123-c004f2ef0179","__v":0}
{"_id":{"$oid":"66ebe192ede4b022127aa38d"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"The function `isExperimentalComponent` can be simplified and optimized for better readability and efficiency. Here’s a revised version:\n\n```typescript\nconst isExperimentalComponent = (details: ComponentDetails): boolean => {\n  if (!details) return false;\n\n  const isExperimental = details.experimentalComponentAsPerLearningImplementation;\n\n  if (isExperimental !== undefined) {\n    return isExperimental;\n  }\n\n  return (\n    details.module === \"Testing Purpose\" ||\n    details.module === \"Testing Purpose: Learning Hooks and Generics\"\n  );\n};\n```\n\n### Key Optimizations:\n1. **Direct Assignment Check**: Simplify checking `details.experimentalComponentAsPerLearningImplementation` by using a single assignment and checking if it's `undefined`. This avoids redundant checks for `true` and `false`.\n   \n2. **Remove Redundant Checks**: The original code explicitly checked for `true` and `false`, which is redundant. The simplified version assumes `undefined` means the value needs to be inferred based on the module.\n\n3. **Short-circuit Evaluation**: The return statement checks the module directly if `details.experimentalComponentAsPerLearningImplementation` is `undefined`, which is more efficient and easier to understand.\n\nThis optimized function will produce the same results but is cleaner and easier to maintain.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"19301122-5e2c-46f7-86c2-de9328feaa6c","order":0,"createdDate":{"$date":"2024-09-19T08:32:18.899Z"},"updatedDate":{"$date":"2024-09-19T08:32:18.899Z"},"uniqueId":"30551119-079e-41fe-aeff-361b3950fb8c","__v":0}
{"_id":{"$oid":"66ebe1cdede4b022127acb03"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"In the revised `isExperimentalComponent` function, several TypeScript terminologies and concepts are used. Here's a breakdown:\n\n1. **Function Declaration**: Defines a function in TypeScript. \n   ```typescript\n   const isExperimentalComponent = (details: ComponentDetails): boolean => { ... }\n   ```\n\n2. **Type Annotation**: Specifies the type of a parameter or return value. \n   - `details: ComponentDetails` indicates that `details` should be of type `ComponentDetails`.\n   - `: boolean` specifies that the function returns a boolean value.\n\n3. **Optional Chaining / Nullish Coalescing (not explicitly shown but relevant)**: TypeScript often uses optional chaining (`?.`) to handle `null` or `undefined` values gracefully. Although not used in this specific function, it's relevant in similar contexts.\n\n4. **Conditional Statements**: Utilizes conditional logic to determine the function’s behavior.\n   ```typescript\n   if (!details) return false;\n   ```\n\n5. **Undefined Check**: Checks if a value is `undefined`, which is crucial for determining whether a property is explicitly set or not.\n   ```typescript\n   const isExperimental = details.experimentalComponentAsPerLearningImplementation;\n   if (isExperimental !== undefined) {\n     return isExperimental;\n   }\n   ```\n\n6. **Logical OR (`||`) Operator**: Used to combine multiple conditions. In this context, it’s used to determine if the `module` property matches either of two strings.\n   ```typescript\n   return (\n     details.module === \"Testing Purpose\" ||\n     details.module === \"Testing Purpose: Learning Hooks and Generics\"\n   );\n   ```\n\n### Summary\n- **Function Declaration**: `const isExperimentalComponent`\n- **Type Annotation**: `(details: ComponentDetails): boolean`\n- **Undefined Check**: `isExperimental !== undefined`\n- **Logical OR**: `||`\n\nThese TypeScript concepts help ensure that the function behaves correctly and adheres to the expected types throughout its execution.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"546c9fdc-b562-4361-8752-53e342c75732","order":0,"createdDate":{"$date":"2024-09-19T08:33:17.296Z"},"updatedDate":{"$date":"2024-09-19T08:33:17.296Z"},"uniqueId":"c8c7959f-3e30-4b21-8765-d3f45007c4b0","__v":0}
{"_id":{"$oid":"66ed1bcd95e746089accdf97"},"name":"To Address PowerShell command issue: root.ps1 cannot be loaded because running scripts is disabled on this system.","heading":"To Address PowerShell command issue: root.ps1 cannot be loaded because running scripts is disabled on this system.","smartContent":{"content":"To address below issue\n\n```\n.\\root.ps1 : File D:\\GIT\\my-backup\\CMD123\\powershell-files\\root.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at\n\nhttps:/go.microsoft.com/fwlink/?LinkID=135170.\n\nAt line:1 char:1\n\n+ .\\root.ps1\n\n+ ~~~~~~~~~~\n\n    + CategoryInfo          : SecurityError: (:) [], PSSecurityException\n\n    + FullyQualifiedErrorId : UnauthorizedAccess\n```\n\n# Solution\n\nThe error message indicates your system's PowerShell execution policy is set to restrict running scripts. Here's how to address this and run your script:\n\n**Option 1: Set Execution Policy for the Current Session (Temporary)**\n\nThis allows you to run the script once without changing the system-wide policy.\n\n1. Open PowerShell **as Administrator**. This is crucial for changing execution policies.\n2. Type the following command and press Enter:\n\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n3. You'll be prompted to confirm the change. Type `Y` (Yes) and press Enter.\n4. Now, navigate to the directory containing your script (e.g., `D:\\GIT\\my-backup\\CMD123\\powershell-files`) and execute it again using `.\\root.ps1`.\n\n**Option 2: Set Execution Policy for All Users (Permanent)**\n\nThis allows any user with access to run scripts on the system. Be cautious with this option, especially in shared environments.\n\n1. Open PowerShell **as Administrator**.\n2. Type the following command and press Enter:\n\n```powershell\nSet-ExecutionPolicy RemoteSigned\n```\n\n3. You'll be prompted to confirm the change. Type `Y` (Yes) and press Enter.\n4. Now, navigate to the directory containing your script and execute it again using `.\\root.ps1`.\n\n**Important Note:**\n\nWhile setting the execution policy to `RemoteSigned` allows running scripts you create yourself, downloaded scripts from the internet will still require a trusted publisher signature for successful execution. This helps maintain security by preventing malicious scripts from running.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e108e1a0-7a44-4930-8b00-eb9762eeb7f1","order":0,"createdDate":{"$date":"2024-09-20T06:53:01.811Z"},"updatedDate":{"$date":"2024-09-20T06:53:01.811Z"},"uniqueId":"8a0c82fb-99fc-4509-bb55-7456cd0917f2","__v":0}
{"_id":{"$oid":"66ed1c4b95e746089accf376"},"name":"To load JSON data from a file and process it in your PowerShell script","heading":"To load JSON data from a file and process it in your PowerShell script","smartContent":{"content":"To load JSON data from a file and process it in your PowerShell script, you can use the following steps:\n\n1. **Load the JSON data:**\n   - Use `Get-Content` to read the contents of the JSON file:\n     ```powershell\n     $jsonData = Get-Content .\\data\\app-details.json\n     ```\n\n2. **Convert JSON to a PowerShell object:**\n   - Use `ConvertFrom-Json` to convert the JSON string into a PowerShell object:\n     ```powershell\n     $data = $jsonData | ConvertFrom-Json\n     ```\n\n3. **Process the data:**\n   - Access the data within the object using dot notation:\n     ```powershell\n     $data.name\n     $data.purpose\n     # ... other properties\n     ```\n   - Perform any desired operations on the data.\n\nHere's a complete example:\n\n```powershell\n# Load JSON data from the file\n$jsonData = Get-Content .\\data\\app-details.json\n\n# Convert JSON to a PowerShell object\n$data = $jsonData | ConvertFrom-Json\n\n# Access and process the data\nWrite-Host \"Application Name: $($data.name)\"\nWrite-Host \"Purpose: $($data.purpose)\"\n# ... other properties and operations\n```\n\n**To incorporate this into your `.\\root.ps1` script:**\n\n1. Place the above code at the beginning of your script.\n2. Modify the `.\\data\\app-details.json` path if necessary.\n3. Use the `$data` object to access and process the JSON data within your script.\n\n**Example:**\n\n```powershell\n# Load JSON data\n$jsonData = Get-Content .\\data\\app-details.json\n$data = $jsonData | ConvertFrom-Json\n\n# ... other code in your root.ps1 script\n# Use $data to access JSON data, e.g.,\nWrite-Host \"Application Name: $($data.name)\"\nWrite-Host \"Purpose: $($data.purpose)\"\n\n# ... rest of your script's logic\n```\n\nThis approach will allow you to load and process the JSON data from the `app-details.json` file within your `root.ps1` script.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"e108e1a0-7a44-4930-8b00-eb9762eeb7f1","order":0,"createdDate":{"$date":"2024-09-20T06:55:07.12Z"},"updatedDate":{"$date":"2024-09-20T06:55:07.12Z"},"uniqueId":"df2cdc51-89fd-4b78-8382-65b237f10c06","__v":0}
{"_id":{"$oid":"66ed93f995e746089acd8e60"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"Both `async/await` and the traditional `Promise`-based approach serve the same purpose of handling asynchronous operations, but they have different use cases and readability benefits. Here's a comparison to help you decide which approach is better for your scenario:\n\n### 1. **Readability**:\n   - **`async/await`**: \n     - Easier to read and understand because it uses synchronous-like code structure.\n     - Best for scenarios with multiple async operations in sequence, where code readability matters.\n     - More intuitive for handling try/catch for error handling.\n\n     Example:\n     ```javascript\n     try {\n       const response = await fetch(url);\n       const data = await response.json();\n       console.log(data);\n     } catch (error) {\n       console.error(error);\n     }\n     ```\n\n   - **Promise-based**:\n     - Can become harder to follow, especially when chaining multiple `.then()` and `.catch()`.\n     - Works better when you need finer control over async flows, such as executing parallel requests or when chaining is important.\n     - Might look cleaner when only a single `.then()` is involved.\n\n     Example:\n     ```javascript\n     fetch(url)\n       .then(response => response.json())\n       .then(data => console.log(data))\n       .catch(error => console.error(error));\n     ```\n\n### 2. **Error Handling**:\n   - **`async/await`**: \n     - Uses `try/catch` blocks, making error handling easier and more consistent across different parts of the code.\n     - Errors within async functions bubble up, making it easy to handle failures at multiple levels.\n   \n   - **Promise-based**: \n     - Error handling requires chaining `.catch()`, and it can be easy to forget in longer chains. If you need more granular control over where errors are caught in the chain, this is helpful.\n\n### 3. **Chaining/Parallel Execution**:\n   - **`async/await`**:\n     - If you need to wait for multiple promises to resolve simultaneously (parallel execution), you can use `Promise.all()` with `async/await`, but this adds some verbosity.\n\n     Example:\n     ```javascript\n     const [res1, res2] = await Promise.all([fetch(url1), fetch(url2)]);\n     ```\n\n   - **Promise-based**:\n     - Promise chaining makes it very natural to handle both sequential and parallel async tasks.\n     - If you have multiple operations that can happen in parallel, Promises allow you to chain them easily.\n\n     Example:\n     ```javascript\n     Promise.all([fetch(url1), fetch(url2)])\n       .then(([res1, res2]) => console.log(res1, res2));\n     ```\n\n### 4. **Error Propagation**:\n   - **`async/await`**:\n     - Errors are easier to propagate up to higher levels using `try/catch`.\n     - Can handle async logic where one failure stops the rest of the execution.\n\n   - **Promise-based**:\n     - Sometimes errors in one part of the chain can be accidentally \"caught\" and handled in the wrong `.catch()` block.\n     - More verbose for propagating errors manually.\n\n### 5. **Use Cases**:\n   - **`async/await`**:\n     - Ideal for sequential operations where readability is a priority.\n     - Easier to write for beginners and leads to cleaner code in many cases.\n     - Great for scenarios where you need error handling around individual asynchronous operations.\n\n   - **Promise-based**:\n     - Useful when you need fine-grained control over async flows (chaining and conditional operations).\n     - Ideal when you’re working with multiple promises in parallel.\n     - Good for libraries and utility functions that may need to return promises.\n\n### Conclusion:\n- Use **`async/await`** when readability and clarity are important, especially for sequential async operations or when you want simpler error handling with `try/catch`.\n- Use **Promise-based** approaches if you need to handle multiple async operations in parallel or if you want more control over how you chain and handle promises. It's also good for utility functions that need to return promises for flexibility.\n\nFor most modern JavaScript applications, **`async/await`** tends to be the preferred approach due to its readability and simplicity, but **Promises** still have their place in complex flow control scenarios.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"79940488-e7d6-4b1e-9c7f-10718c74c44d","order":0,"createdDate":{"$date":"2024-09-20T15:25:45.945Z"},"updatedDate":{"$date":"2024-09-20T15:25:45.945Z"},"uniqueId":"e51d8d42-bf21-4f01-b54d-3ff344db280a","__v":0}
{"_id":{"$oid":"66edc0b295e746089acdc7ae"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"I'd be glad to provide a comprehensive explanation of JavaScript's runtime environment, incorporating examples and addressing potential misconceptions:\n\n**JavaScript Runtime:**\n\n- **Core Execution Environment:** A JavaScript runtime is the environment where JavaScript code executes. It consists of:\n    - **Call Stack:** A LIFO (Last-In-First-Out) data structure that stores function calls and their associated context.\n    - **Web APIs:** APIs provided by the browser (e.g., DOM, timers, network requests) that handle asynchronous operations.\n    - **Event Loop:** A mechanism that continuously checks for tasks to be executed and processes them in a specific order.\n    - **Task Queue:** A FIFO (First-In-First-Out) queue that stores tasks waiting to be executed by the event loop.\n    - **Microtask Queue:** A queue for tasks that have higher priority than regular tasks (e.g., promises, `queueMicrotask`).\n\n**Call Stack:**\n\n- **Function Calls and Context:** When a function is called, its context (variables, arguments) is pushed onto the call stack.\n- **Function Execution and Return:** The function executes, and its return value is popped off the stack when it finishes.\n- **Nested Functions:** If a function calls another, the inner function's context is pushed onto the stack before the outer function finishes.\n\n**Example:**\n\n```javascript\nfunction greet(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\nfunction sayHello() {\n  greet(\"World\");\n  console.log(\"Goodbye!\");\n}\n\nsayHello();\n```\n\n**Web APIs:**\n\n- **Asynchronous Operations:** Web APIs handle tasks that might take time, such as fetching data from a server or updating the DOM.\n- **Callbacks and Events:** When an asynchronous operation completes, a callback function or event is triggered.\n- **Event Loop Integration:** The event loop monitors Web APIs for completed tasks and adds them to the task queue.\n\n**Example:**\n\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n**Event Loop:**\n\n- **Continuous Checking and Execution:** The event loop constantly checks the task queue for tasks.\n- **Prioritization:** Microtasks have higher priority than regular tasks.\n- **Execution and Removal:** When a task is executed, it is removed from the queue.\n\n**Example:**\n\n```javascript\nconsole.log(\"Before setTimeout\");\nsetTimeout(() => {\n  console.log(\"Inside setTimeout\");\n}, 1000);\nconsole.log(\"After setTimeout\");\n```\n\n**Task Queue:**\n\n- **Regular Tasks:** Stores tasks that are waiting to be executed by the event loop.\n- **FIFO Order:** Tasks are executed in the order they are added to the queue.\n\n**Microtask Queue:**\n\n- **Higher Priority Tasks:** Stores tasks that have higher priority than regular tasks.\n- **Promise Handlers and `queueMicrotask`:** Promise resolution handlers and tasks added with `queueMicrotask` are placed in the microtask queue.\n\n**Example:**\n\n```javascript\nPromise.resolve()\n  .then(() => console.log(\"Microtask 1\"))\n  .then(() => console.log(\"Microtask 2\"));\n\nsetTimeout(() => console.log(\"Regular task\"), 0);\n```\n\n**Key Points:**\n\n- The call stack is used for synchronous execution.\n- Web APIs handle asynchronous operations.\n- The event loop manages the execution of tasks from the task and microtask queues.\n- Microtasks have higher priority than regular tasks.\n- Understanding the JavaScript runtime is essential for writing efficient and non-blocking code.\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"c604345f-603c-41e4-a290-40df0d05f34f","order":0,"createdDate":{"$date":"2024-09-20T18:36:34.116Z"},"updatedDate":{"$date":"2024-09-20T18:36:34.116Z"},"uniqueId":"2310d84f-36d7-4e4c-8c9b-80ed3665e98e","__v":0}
{"_id":{"$oid":"66edca6395e746089acddc85"},"name":"Answer from a GitHub user","heading":"Answer from a GitHub user","smartContent":{"content":"# JavaScript\n\nThe content on JavaScript is divided into two parts:\n\n1. [**Basics**](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics)\n2. [**Advanced**](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced)\n\nEach of these parts will have following concepts in it:\n\n## Basics\n\n- [Hoisting](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#hoisting)\n- [Let vs Const vs Var](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#let-vs-const-vs-var)\n- [Scope](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#scope)\n- [Strict Mode](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#strict-mode)\n- [Data Types](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#data-types)\n- [Regular Function vs Arrow Function](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#regular-function-vs-arrow-functions)\n- [Arguments in a function](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#arguments-in-a-function)\n- [Event Listeners](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#event-listeners)\n- [Event Propagation](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#event-propagation)\n- [Event Delegation](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#event-delegation)\n- [DOM Manipulation](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#dom-manipulation)\n- [EVAL](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#eval)\n- [Template literal](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#template-literal) -[IIFE](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#iife)\n- [Error Handling - Try...catch](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#error-handling---try-catch)\n- [Memoization](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#memoization)\n\n## **Advanced**\n\n- [Mutability vs Immutability](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Basics#memoization)\n- [Callback and Callback hell](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#callback-and-callback-hell)\n- [Promises](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#promise)\n- [Async Await](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#async-await)\n- [Prototype / **proto**](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#prototype)\n- [Inheritence](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#inheritance)\n- [Constructor Function](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#constuctor-function)\n- [Classes](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#class)\n- [`this` and identifying it's value](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#this)\n- [Overwriting this -> call/bind/apply](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#this)\n- [Pure functions](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#pure-functions)\n- [Proxy](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#proxy)\n- [Symbol](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#symbol)\n- [Memory leaks](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#memory-leaks)\n- [Garbage collection](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#garbage-collection)\n- [Curring](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced#currying)\n- [Cascading](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced#cascading)\n- [Object freeze vs seal](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced#object-freeze-vs-seal)\n- [Object.defineProperty](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced#objectdefineproperty)\n- [Generator functions](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/JavaScript%20Advanced#generator-functions)\n\n## [Polyfill](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/Polyfills#polyfills)\n\n- [Promise](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/JavaScript/Polyfills#promise)\n- PromiseAll.\n- Call, Bind, Apply\n- ForEach, Map, Reduce\n\nYou will also find few `JavaScript` code that you can refer to get some context.","textOutputType":"markdown","textInputType":"TextArea"},"rating":1,"linkedQuestionsId":"b4915200-5048-4736-8b51-f25224e48a90","order":0,"createdDate":{"$date":"2024-09-20T19:17:55.986Z"},"updatedDate":{"$date":"2024-09-20T19:19:23.444Z"},"uniqueId":"19505bf3-b46b-40da-af17-41f74180ad44","__v":0}
{"_id":{"$oid":"66edcb8695e746089ace3125"},"name":"Answer from a GitHub user","heading":"Answer from a GitHub user","smartContent":{"content":"# React.\n\nIn React, we will be covering the following topics:\n\n1. [Why React?](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#why-react)\n2. [JSX vs JS](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#jsx-vs-js)\n3. [Lifecycle](https://ishwar-rimal.medium.com/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n4. [Hooks:](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#hooks)\n   - [useState](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#usestate)\n   - [useEffect](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#useeffect)\n   - [useMemo](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#usememo)\n   - [uesCallback](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#usecallback)\n   - [useRef](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#useref)\n5. [Basic SSR and behaviour of useEffect in SSR](https://ishwar-rimal.medium.com/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n6. [Pure Components](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#pure-components)\n7. [Higher Order Components](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#higher-order-component)\n8. [Render Props](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#render-props)\n9. [Handling Error](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#error-handling)\n10. [Virtual Dom](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#virtual-dom)\n11. [React Reconciliation, Fiber and Diffing](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#react-reconciliation-and-react-fiber)\n12. [Flux](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#flux) and [Redux](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#redux)\n13. [Middleware in redux](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#middlewares-in-redux)\n14. [useReducer](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#usereducer)\n15. [Context API](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#context-api)\n16. [Controlled vs Uncontrolled Components](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#controlled-vs-uncontrolled-components)\n17. [Built in React Components](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#built-in-react-components)\n18. [Strict Mode](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#usestrict-)\n19. [Fragment](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#fragment-)\n20. [Suspense](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#suspense-)\n21. [Profiler](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#profiler-)\n22. [Additional Concepts](https://ishwar-rimal.medium.com/react-concepts-a5cf39bdd5d)\n\nWatch this awesome video on what are react components/elements, render tree and reconciliation https://www.youtube.com/watch?v=7YhdqIR2Yzo","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"67dc09bf-9a54-4cd1-8f63-2535753c375f","order":0,"createdDate":{"$date":"2024-09-20T19:22:46.779Z"},"updatedDate":{"$date":"2024-09-20T19:22:46.779Z"},"uniqueId":"8db0a7f2-ff40-4196-9ef1-7c88f2a7c946","__v":0}
{"_id":{"$oid":"66edcc8f95e746089ace45bd"},"name":"List of consolidated Interview Questions","heading":"List of consolidated Interview Questions","smartContent":{"content":"# React\n\nReact is a JavaScript library for building user interfaces. It was developed by Facebook and released as an open-source project. React is primarily used for building single-page applications (SPAs) and mobile applications, although it can also be used for creating specific components within larger web applications.\n\n## Why React?\n\nReact has following advantage over traditional way of building web apps.\n\n1.  **Component based architecture**\n    - Modular code.\n    - Reusability.\n    - Easeir to test and maintain.\n2.  **JSX**\n    - Closely resembels HTML.\n    - Better way to handle UI Logic.\n3.  **Virtual DOM**\n    - Efficiently update the DOM.\n    - Minimise expensive dom manipulation by first updating the virtual DOM.\n4.  **Unidirection data flow**\n    - Data flows from parent to the children.\n5.  **State Management**\n    - State management for larger applicaiton is very difficult in traditional applications.\n    - Easier to manage the state of the applcation with React.\n6.  **Developer Ecosystem**\n    - Numerous tutorials available.\n    - Numerous libraries available.\n7.  **React Native**\n    - Use react skills to build mobile app using React Native.\n\n## JSX vs JS\n\nNot a valid comparison as JSX is only limited to React ecosystem while JS is a programming language supported by all the browser and JS Runtime like Nodejs.\n\nJSX is a syntax extension that simplifies the creation of user interfaces in React by allowing developers to write HTML-like code within their JavaScript files.\n\n**JSX (JavaScript XML):**\n\n1.  **Syntax:** JSX is a syntax extension for JavaScript that allows you to write HTML-like code within your JavaScript files.\n2.  **Readability:** JSX can make code more readable and intuitive, as it closely resembles the structure of the UI.\n3.  **Component Rendering:** JSX is used to define the UI components and their hierarchy in React. When you write JSX, it gets transpiled into JavaScript code that creates and updates the corresponding DOM elements.\n4.  **Integration with React:** JSX is the recommended way to define UI elements in React. It allows you to combine JavaScript logic and UI presentation in a single file.\n\n```javascript\nconst element = <h1>Hello, JSX!</h1>;\n```\n\n**JavaScript (JS):**\n\n1.  **Syntax:** JavaScript is a programming language that provides the core functionality for web development. It's used to handle logic, data manipulation, and interactions in a web application.\n2.  **Programming Logic:** JavaScript is used to implement the logic and behavior of your web application. This includes handling user input, making API requests, managing data, and more.\n3.  **Manipulating the DOM:** JavaScript is used to directly manipulate the Document Object Model (DOM) of a web page. It can be used to add, modify, or remove elements from the page in response to user actions or other events.\n4.  **Integration with JSX:** While JSX is used to define the structure of UI components, JavaScript is used to provide the functionality and behavior of those components. JSX and JavaScript are often used together within React components.\n\n```javascript\nconst name = \"JS\";\nconst greeting = \"Hello, \" + name + \"!\";\n```\n\n## [Lifecycle](https://ishwar-rimal.medium.com/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n\n## Hooks\n\nHooks are nothign but functions that allow you to access and use certain internal methods and features of React in functional components. Hooks provide a way to \"hook into\" React's core functionality without the need for class components.\n\n### useState\n\nThis hook allows functional components to manage state. It provides a way to declare state variables and their initial values, as well as methods to update those values.\n\n```javascript\nimport React, { useState } from \"react\";\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n\n### useEffect\n\nThis hook is used to perform a side effect when certain thig like mounting or state update happens for a component.\nWe use this hook to perform operations(side effect) such as data fetching, DOM Manipulation, etc once some operation happen.\nSyntax:\n\n```javascript\nimport React, { useEffect } from \"react\";\nfunction MyComponent() {\n  //some state declaration\n  useEffect(callback, dependencies);\n  //callback is a callback funciton\n  // dependencies are list of dependency variables\n}\n```\n\n**Note:** Dependencies are optional, if no dependency is provided, this effect will get triggered with every re render of component.\n\n**How is lifecycle handled by useEffect?**\n\n- _`ComponentDidMount`_\n\nuseEffect with or without dependencies are equivalent to `componentDidUpdate`. No matter what dependencies are, this will get triggerred at least once. If you want this effect to run just once, provide `[]` empty array as a dependency.\n\n- _`ComponentDidUpdate`_\n\nuseEffect with list of dependency is considered equivalent to `componentDidUpdate`. That is whenever the the dependency variable is updated, this effect gets triggered. (If dependency is omitted, the effect will run with every re render)\n\n- _`ComponentDidUnmount`_\n\nThe return function placed inside a useEffect is considered equivalient to `componentDidUnmount`. That is whenever the component gets unmounted (removed) from the DOM, this method get's triggered.\n\nThere is also an equivalent of `shouldComponentUpate` [readMore](https://github.com/ishwarrimal/frontend-interview-preps/tree/main/React/ReactInterview#purecomponents)\n\n```javascript\nimport React, { useState, useEffect } from \"react\";\nfunction DataFetching() {\n  const [students, setStudents] = useState([]);\n  useEffect(() => {\n    // Fetch data here and update state\n    fetch(\"https://api.example.com/data\")\n      .then((response) => response.json())\n      .then((data) => setData(data));\n    return () => {\n      //Is executed when the component umounts\n      console.log(\"Component is unmounted\");\n    };\n  }, []);\n  return (\n    <div>\n      <ul>\n        {students.map((student) => (\n          <li key={student.id}>{student.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n[Relevant content](https://ishwar-rimal.medium.com/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n\n### useMemo\n\n- Used to memoize a value.\n- Used as a **performance enhanement** by memoizing the result of expensive computation.\n- It prevents unnecessary recalculations of values that don't change between renders.\n\nSyntax:\n\n```javascript\nconst memoizedValue = useMemo(memoizationFunction, [dependencies]);\n```\n\nHere's a breakdown of how the `useMemo` hook works:\n\n1. You provide a function that computes a value. This function is known as the \"memoization function.\"\n2. The memoizationFunction returns the computed value.\n3. The `useMemo` hook takes this function as its first argument.\n4. The second argument to `useMemo` is an array of dependencies. These dependencies are variables that, when changed, will trigger a re-computation of the memoized value. If the dependencies don't change between renders, the memoized value remains the same.\n5. The `useMemo` hook returns the memoized value, which you can then use in your component.\n\nExample:\n\n```javascript\nimport React, { useState, useMemo } from \"react\";\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n  // Using useMemo to compute a value based on the count\n  const squaredCount = useMemo(() => {\n    console.log(\"Computing squared count\");\n    return count * count;\n  }, [count]); // Recompute only when count changes\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Squared Count: {squaredCount}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n```\n\n### useCallback\n\nSimilar to useMemo, useCallback is used to memoize a function.\n\n**Why do we need to memoize a function anyways?**\nFunctions defined within the component are **recreated** on each render. [Read more...](https://ishwar-rimal.medium.com/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n\n```javascript\nimport React, { useState, useCallback } from \"react\";\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n  // Using useCallback to memoize a callback function\n  const handleIncrement = useCallback(() => {\n    setCount((prevCount) => prevCount + 1);\n  }, []);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleIncrement}>Increment</button>\n    </div>\n  );\n}\n```\n\n### useRef\n\n- useRef is a quite interesting hook which usually is not utilized to it's full potential.\n- useRef is used to define a local variable in a component, but unlike useState, updating the useRef variable doesn't cause re render of the component.\n\n**Usage of useRef**\n\nThere are two usage of useRef\n\n1. Primarily it is used for accessing the underlying DOM nodes, managing focus, or performing a dom operation on any element.\n\n```javascript\nimport React, { useRef, useState } from \"react\";\nfunction FocusInput() {\n  const inputRef = useRef(null);\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" />\n      <button onClick={handleFocus}>Focus Input</button>\n    </div>\n  );\n}\n```\n\nIn the above example, we make use of `inputRef` to access the input element and prodivde focus on that.\n\n2. The second use case of useRef is to preserve value of something across renders:\n   When it comes to preserving a value that is not affected by the re-render, we sometimes think of global variables, as it is not affected by the re-render. But using `useRef` we can achieve the same.\n\n## Pure Components\n\nPure Components in react are similar to [Pure Functions](https://github.com/ishwarrimal/frontend-interview-preps/blob/main/JavaScript/JavaScript%20Advanced/readme.md#pure-functions) in JavaScript\n\n- Pure components re-renders only when the state or the props changes.\n\n- Does a shallow comparison of the props and state to determine whether an update is needed.\n\n- use `React.pureComponent` or `React.memo`\n\n```javascript\n//React.pureComponent\nimport React, { PureComponent } from \"react\";\nclass PureExample extends PureComponent {\n  render() {\n    // Component rendering logic\n  }\n}\n\n//React.memo\nimport React from \"react\";\nconst MemoizedExample = React.memo(function MemoizedExample(props) {\n  // Component rendering logic\n});\n```\n\n**Note:** React.memo is different from React.useMemo\n\n**React.memo** Is a HOC to wrap a functional component. It optimizes the rendering performance of a component by preventing unnecessary re-renders.\n\n- You can pass second parament to React.memo which is a funciton.\n\n- This function is commonly referred to as the \"areEqual\" function or the \"props comparison\" function.\n\n- If you don't provide this parameter, `React.memo` uses a default shallow equality comparison for props.\n\n```javascript\nReact.memo(component, areEqual);\n```\n\n- `areEqual` is similar to `shouldComponentUpdate` in class components.\n\n- The `areEqual` function takes two arguments: the previous props and the new props. It should return a boolean value indicating whether the component should re-render (`true`) or not (`false`).\n\n```javascript\nimport React from \"react\";\nfunction arePropsEqual(prevProps, nextProps) {\n  // Custom logic to compare props\n  return prevProps.id === nextProps.id;\n}\nconst MemoizedComponent = React.memo(function MyComponent(props) {\n  // Component rendering logic\n}, arePropsEqual);\n```\n\n## Higher Order Component\n\n- Higher-Order Component (HOC) is a design pattern used for enhancing the functionality or behavior of a component by wrapping it in another component.\n- Higher Order Component in react are similar to Higher Order Functions in JavaScript.\n- Higher-order functions are functions that can accept other functions as arguments or return functions as their results, similarly, Higher-order components are components that can accept other compoentnts as arguments or return components as their results.\n- Example of Higher Order Functions - Array.Map - Array.Reduce - etc\n  Example in react:\n\n```javascript\nimport React from \"react\";\n// Define a Higher-Order Component (HOC)\nconst withLogger = (WrappedComponent) => {\n  return function WithLogger(props) {\n    console.log(`Component ${WrappedComponent.name} is rendering.`);\n    return <WrappedComponent {...props} />;\n  };\n};\n// Functional component\n\nfunction Greeting1(props) {\n  return <div>Hello, {props.name}!</div>;\n}\n\nfunction Greeting2(props) {\n  return <div>Hey, {props.name}!</div>;\n}\n\n// Wrap the Greeting component with the withLogger HOC\n\nconst Greeting1WithLogger = withLogger(Greeting1);\nconst Greeting2WithLogger = withLogger(Greeting2);\n\nexport { Greeting1WithLogger, Greeting2WithLogger };\n```\n\nWe use HOC mostly when same logic is resued/required in more than one component.\n\nIn the above example, as you can see, the logic to `console log` is common for both the component, hence we use HOC for this.\n\nSome usage of HOC includes:\n\n1.  **Code Reuse**: You can use HOCs to extract common logic from multiple components into a single reusable HOC.\n\n2.  **State and Props Manipulation**: HOCs can modify or add props to the wrapped component based on some conditions or data from a data source like Redux or a context provider.\n\n3.  **Authentication and Authorization**: You can use HOCs to handle authentication and authorization logic, ensuring that only authorized users can access certain components or routes.\n\n4.  **Logging and Analytics**: HOCs can be used to log events or send analytics data whenever a component renders or performs a specific action.\n\n## Render Props\n\nAs the name suggests, when you pass `render` function as a `props` to a Component, you achieve render props.\n\n```javascript\n<MyComponent render={someRenderFunction} />\n```\n\n- Similar to HOC, this is also a design pattern that focuses on reusability of code.\n\n- A component after executing it's local logic, invokes the passed render function in the props to render a component.\n\n```javascript\n...\n\treturn  props.render(someState)\n}\n```\n\nExample:\n\n```javascript\nimport React from \"react\";\n// A functional component that takes a render function as a prop\nfunction Counter(props) {\n  const [count, setCount] = React.useState(0);\n  // Call the render function and pass the current count\n  return props.render(count, setCount);\n}\n// Usage of the Counter component\nfunction App() {\n  return (\n    <div>\n      <h1>Counter Example</h1>\n      <Counter\n        render={(count, setCount) => (\n          <div>\n            <p>Count: {count}</p>\n            <button onClick={() => setCount(count + 1)}>Increment</button>\n            <button onClick={() => setCount(count - 1)}>Decrement</button>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\nexport default App;\n```\n\nAs you can see in the above example, the logic to handle the increment and decrement is handled by the Counter component.\n\n**Difference between HOC and render props**\n\n- **HOC (Higher-Order Component)**:\n\n  - HOCs are functions that accept a component as an argument and return a new component with added or modified behavior.\n\n  - They are implemented as wrapper components that encapsulate the logic and state management.\n\n- **Render Props**:\n\n  - Render props involve passing a function as a prop to a component. This function is used by the component to render part of its UI.\n\n  - Render props are implemented by passing a function as a prop to a component, which the component then invokes.\n\n## Error Handling\n\nApart from using the regular `try...catch`, react provides inbuild methods to handle the error states.\nReact exposes two methods to handle the error state:\n\n1. componentDidCatch.\n2. getDerivedStateFromError.\n\nThing to note here is that these methods are supported only in a `class` based component and is not yet supported in `function` based component.\n\n- This implementation is also called as creating an **error boundary.**\n- This component can catch error that occur in any of the child component.\n- You can have other functional component wrapped in this class component.\n  Example:\n\n```javascript\nimport React, { Component } from \"react\";\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n  static getDerivedStateFromError(error) {\n    // Update state to indicate an error has occurred\n    return { hasError: true, error };\n  }\n  componentDidCatch(error, errorInfo) {\n    // Log the error or send it to an error tracking service\n    console.error(error, errorInfo);\n  }\n  render() {\n    if (this.state.hasError) {\n      // Render an error message or a fallback UI\n      return <div>Something went wrong.</div>;\n    }\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n```\n\nHere's a summary of the sequence:\n\n1. An error occurs within a component wrapped by an error boundary.\n2. React calls the static `getDerivedStateFromError` method of the error boundary component, passing the error as an argument. If this method returns an object with updated state (e.g., setting `hasError` to `true`), the component's state is updated.\n3. After state is updated, React calls the instance method `componentDidCatch` of the error boundary component, passing both the error and the error info as arguments.\n\nBoth methods serve distinct purposes:\n\n- `getDerivedStateFromError` is used for updating the component's state based on the error. It's a static method and should not have side effects. It's primarily used for setting a flag (e.g., `hasError`) in the state.\n\n- `componentDidCatch` is used for performing additional actions or side effects in response to the error. It can be used to log the error, send it to an error tracking service, or customize the rendering of an error message.\n\n**Why do we need to handle error in react?**\nIn React, When an error occurs and it's not handled gracefully, users may see a blank or broken page, leading to frustration and confusion.\n\n## Virtual DOM\n\n- Virtual DOM or VDOM is a representation of the actual DOM that React maintains to optimize the render and re render of the UI.\n\n- It's a concept and data structure that React uses to optimize the process of updating the actual DOM when changes occur in a web application.\n\n- When the update in any state or props happen, React first updates the Virtual DOM and then goes on updating the actual DOM.\n\n- This might seem like an extra work compared to updating the DOM directly, but when the changes happen in a batch, this way turns out to be efficient than updating the actual DOM.\n\n- We will diecuss more about how React does optimizes the UI re render in the following topic on React Reconciliation and React fiber.\n\n## React Reconciliation and React Fiber\n\n**What is react reconciler?**\nReact reconciler is a core process that React uses to efficiently update the UI when any change in state or props is encountered.\n\n**What is react fiber?**\nIn concrete terms, a fiber is a JavaScript object that contains information about a component, its input, and its output. This object is the internal representation of the Components, which contains of type, keys, child, sibling, etc, of the component.\nUsing this, React can efficiently identifies the change in DOM and achieve performance optimization.\n\n**When was react fiber introduced?**\nReact fiber was introduced in React v16, which was released on September 26, 2017.\n\n**What was used by reconciler before react fiber?**\nBefore react fiber, React used stack-based approach for reconciliation, was also called stack reconciler. This approach has **Limited Concurrency**, it use dot **Blocking Main Thread** and hence was slow.\n\n**How does React reconciliation work?**\n\n1. During the initial render, React creates a **Virtual DOM**. This is a replica of the actual DOM (This is not part of reconcilliation).\n2. When any **update** happens of the state or props, react re-renders the affected component and generates a new VDOM.\n3. React then compares the new VDOM with the older VDOM. React uses **Diffing Algorithm** to achieve this. (more on diffing algorithm here)\n4. React aims to find the minimum number of changes required to update the actual DOM to match the new virtual DOM.\n5. Once React has identified the difference, it efficiently updates the acutal DOM.\n\nThere are 2 phases in which all of these happens. Read about them [here](https://medium.com/@ishwar-rimal/execution-sequence-of-hooks-in-react-functional-components-b4a2ef69f9b0)\n\n## More on Diffing Algorithm:\n\n- Diffing algorithm has time complexity of O(n) compared to traditional O(n3).\n\n- The Diffing algorithem works on following assumptions:\n\n1.  **Tree Structure Assumption**: React assumes that the structure of the virtual DOM tree remains relatively stable between renders. This means that if a parent and child component have not changed, React can make the assumption that their children have not changed either, allowing it to skip unnecessary checks.\n\n2.  **Component Type Assumption**: React assumes that components of the same type represent the same logical element across renders. This is why it compares elements of the same type by their position in the tree and their props.\n\n3.  **Keyed Elements Assumption**: When rendering lists of elements, React assumes that elements within the list have a unique \"key\" prop that identifies them across renders. Using keys helps React determine which elements have been added, removed, or changed within a list efficiently.\n\n4.  **Depth-First Search**: React's diffing algorithm performs a depth-first traversal of the virtual DOM tree. It starts at the root and compares elements as it goes deeper into the tree. This approach helps React identify differences in the tree structure efficiently.\n\n5.  **Element Key Assumption**: React assumes that the \"key\" prop is stable across renders for the same element. If the key of an element changes between renders, React treats it as a new element, which can result in unnecessary updates.\n\n## Flux\n\n- Flux is an architectural pattern for managing the flow of data in a web applicaiton.\n- Flux is based on unidirection flow of data.\n- In a complex web application, the state of the app is stored in one single place called \"STORE\".\n- All the components of the application susbscribe to the data in the \"STORE\"\n- Follows the following sequence\n- User interacts with the UI.\n- It triggers an actions.\n- Actions notifies the \"STORE\" about the action.\n- Stores update their data and notify all the components about the update.\n- UI re-render based on the udpated data.\n\n## REDUX\n\n_Note: I assume that you know the syntax and usage of redux, if not please follow [this article](https://redux.js.org/introduction/examples)_\n\n- Redux is a state management library commonly used in React. It is based on flux architecure.\n- Redux is especially useful in complex React applications where multiple components need access to shared data.\n\n**Core Concepts of Redux (similar to that of flux):**\n\n1.  **Store:** The central piece of Redux is the store. It holds the entire state of your application in a single JavaScript object. Consider store as a global state, a source of truth for your application. (learn more aobut state [here](https://medium.com/@ishwar-rimal/what-the-hell-is-state-in-web-applications-f529aa4cf6e1) )\n\n2.  **Actions:** Actions are plain JavaScript objects that describe events or changes in your application. The job of action is to inform reducer that some action has been triggered and also pass some relavant data. They have a `type` property that indicates the type of action and can also carry additional data.\n\n3.  **Reducers:** Reducers are functions that specify how the application's state should change in response to actions. They take the current state and an action as input and return a new state. Reducers are pure functions, meaning they produce the same output for the same input and have no side effects.\n\n4.  **Dispatch:** To trigger a state change, you dispatch an action to the store. The store then forwards the action to the reducers, which calculate the new state based on the action's type and payload.\n\n5.  **Subscribe:** Your components subscribe to the store to listen for changes in the state. When the state changes, the subscribed components are notified, allowing them to update their views accordingly.\n\n**Why are Reducer pure funcitons?**\n\n1.  **Predictability**: This predictability is crucial in Redux because it ensures that given the same state and action, a reducer will consistently produce the same new state.\n2.  **Immutability:** Reducers typically return a new state object rather than modifying the existing one. This promotes immutability, a practice that helps prevent unintended side effects and makes it easier to track changes in the application's state over time.\n\n## Middlewares in redux\n\n**Common use of middleware -> Updating store asynchronously**\nSuppose on clicking a button, you want to make an API call and then update the store based on the response, you do the following:\n\n1. Dispatch action from the view for the click of button.\n2. This action doesn't immediately update the store, i.e. doens't reach reducer immeidately.\n3. You make use of middleware like `redux-thunk` to make the api call and call the reducer once you receive the response.\n\nStep 3 is an asychchronous process.\n\n- Middleware in general is a software layer or component that sits between different part of an application.\n- Middleware allows you to intercept, modify, or augment actions and state changes.\n- Middleware sits between the dispatching of an action and the moment it reaches the reducers, giving you the ability to add custom behavior to your Redux application.\n- **Thunk** middleware is commonly used in Redux applications to handle asynchronous actions.\n- The primary use of thunk middleware is to delay the dispatching of an action until a certain condition is met or an asynchronous operation is completed. It enables you to have more control over the flow of your Redux actions and handle complex asynchronous logic.\n\nExample:\n\n```javascript\nexport const FETCH_DATA_REQUEST = \"FETCH_DATA_REQUEST\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\nexport const FETCH_DATA_FAILURE = \"FETCH_DATA_FAILURE\";\n\n// Action creator with Redux Thunk\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_DATA_REQUEST });\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      dispatch({ type: FETCH_DATA_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_DATA_FAILURE, payload: error.message });\n    }\n  };\n};\n```\n\n## useReducer\n\nuseReducer is an inbuilt hook provided by `React` to handle the complex state management previously done using external library like `Redux`.\n\nIt is often used as an alternative to `useState` when you need to handle more advanced state management scenarios.\n\nHere's a table comparing `useReducer` and Redux across various aspects:\n\n| Aspect                   | `useReducer`                                  | Redux                                         |\n| ------------------------ | --------------------------------------------- | --------------------------------------------- |\n| **Type**                 | React built-in hook                           | External state management library             |\n| **Local vs. Global**     | Typically used for local component state      | Designed for global state management          |\n| **Use Case**             | Small to medium-sized apps, local state       | Large and complex apps, global state          |\n| **Setup**                | No external dependencies required             | Requires installing Redux and middleware      |\n| **Component Coupling**   | Tends to couple state logic with components   | Promotes decoupling of state and components   |\n| **State Access**         | State is local to the component               | State is globally accessible across app       |\n| **Asynchronous Actions** | Not built for handling async actions directly | Supports middleware for async action handling |\n| **Complexity**           | Simpler and lightweight                       | More structured, suited for complexity        |\n| **Boilerplate**          | Less boilerplate code required                | More boilerplate, but structured              |\n| **Development Tools**    | No built-in dev tools                         | Redux DevTools for state inspection           |\n\nExample:\n\n```javascript\nimport React, { useReducer } from \"react\";\n// Define a reducer function\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1 };\n    case \"DECREMENT\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nfunction Counter() {\n  // Initialize state using useReducer\n  const [state, dispatch] = useReducer(reducer, { count: 0 });\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: \"INCREMENT\" })}>Increment</button>\n      <button onClick={() => dispatch({ type: \"DECREMENT\" })}>Decrement</button>\n    </div>\n  );\n}\nexport default Counter;\n```\n\n[Read more about useReducer](https://react.dev/reference/react/useReducer)\n\n## Context API\n\n- Context API comes into picture in situations where a data needs to be passed from one component to it's children and further below on it's hierarchy.\n\n- `Props Drilling` is one of the naive way to achieve this, in which a component passes a data to it's child as a prop and that child passed it to it's child as it's prop and so on.\n\n```javascript\nfunction  SomeComponent(){\n\tconst [data,] = useState('Apple')\n\t//Data originates here\n\treturn (\n\t\t<Component1  data={data}>\n\t\t\t<Child  data={data}>\n\t\t\t\t<Child2  data={data}>\n\t\t\t\t//This component actually uses the data\n\t\t\t\t</Child2>\n\t\t\t</Child>\n\t\t</Component1 />\n\t)\n}\n```\n\n- Other way to achieve this is by using `redux`, in which you dispatch and subscribe to the central store from within a component.\n\n- `useContext` is a built in hook in react that helps you achieve this without having to use any other complex methods.\n\nKey features and components of the Context API include:\n\n1.  **`createContext`:** The `createContext` function is used to create a new context object. This context object has two components associated with it: `Provider` and `Consumer`.\n\n2.  **`Provider`:** The `Provider` component is used to wrap a portion of your component tree and makes the context data (state) available to all components within that tree. It accepts a `value` prop, which specifies the data that should be shared.\n\n3.  **`Consumer`:** The `Consumer` component allows you to access the context data within your components. You can use the `Consumer` component either as a render prop or as a function component with a context value.\n\n4.  **`useContext `:** Within `Consumer` you have to make use of `useContex` hook to access the passed data.\n\nExample:\n\n(Again, this is not a tutorial, so I assume you know the syntax. This is just a preperation guide for interview)\n\n```javascript\nimport React, { createContext, useContext, useState } from \"react\";\n// Create a new context\nconst MyContext = createContext();\n// Define a provider component\nfunction MyProvider({ children }) {\n  const [count, setCount] = useState(0);\n  const increment = () => {\n    setCount(count + 1);\n  };\n  return (\n    <MyContext.Provider value={{ count, increment }}>\n      {children}\n    </MyContext.Provider>\n  );\n}\n\n// Example component that uses context\nfunction Counter() {\n  const { count, increment } = useContext(MyContext);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\n// App component\nfunction App() {\n  return (\n    <MyProvider>\n      <Counter />\n    </MyProvider>\n  );\n}\n\nexport default App;\n```\n\n**Note** : By using `useReducer` and `Context API` you can eliminate the use of `Redux` to manage state even in a complex applications.\n\n## Controlled vs Uncontrolled Components.\n\n- There are no strict technical term for controlled or uncontrolled compoents, but it is highly recommendted to understand when a component becomes controlled and when it becomes uncontrolled.\n\n- When a component handles it's own local state, then it can be called as `uncontrolled component` and in the case when a parent component handles the state of it's child componenet, then the child component can be called as a `controlled component`\n\nControlled and uncontrolled components are usually easier to understand when managing form inputs in React.\n\n**Controlled Components:**\n\n- When you make use of `React's` internal implementation to handle the update in the state of the input, it becomes a controlled component.\n\n**Example:**\n\n```javascript\nimport React, { useState } from \"react\";\nfunction ControlledInput() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  return <input type=\"text\" value={inputValue} onChange={handleInputChange} />;\n}\n```\n\nBenefits: You can validate, manipulate, or perform actions based on the input value easily.\n\n**Uncontrolled Components:**\n\n- When the value of the input field is managed by the DOM itself, then it becomes uncontrolled component.\n- Uncontrolled components often use React `refs` to access the DOM element directly and read its value when needed.\n\n3.  **Example:**\n\n```javascript\nimport React, { useRef } from \"react\";\nfunction UncontrolledInput() {\n  const inputRef = useRef(null);\n  const handleButtonClick = () => {\n    alert(`Input value: ${inputRef.current.value}`);\n  };\n  return (\n    <>\n      <input type=\"text\" ref={inputRef} />\n      <button onClick={handleButtonClick}>Alert Value</button>\n    </>\n  );\n}\n```\n\nBenefit: Uncontrolled components can be simpler to set up for simple scenarios where you don't need to manage the input's value through React state. They can also be faster since there's no need to re-render the component on each input change.\n\n## Built-in React Components\n\nReact provides 4 built in components namely:\n\n1.  `<StrictMode />`\n\n2.  `<Profiler />`\n\n3.  `<Suspense />`\n\n4.  `<Fragment />`\n\nMore about these in the following section\n\n## `<UseStrict />`\n\n- Similar to `strict mode` in JavaScript, this component helps you find bugs early during development.\n- You have to wrap your component within `<UseStrict /> ` to enale strict mode.\n- There are 3 features enabled by UseStrict\n\n1.  `re-render` the component to make sure that there are no imupurities:\n\n    - React expects all functional component to be a pure functions.\n    - During th re-render it checks if the output of first and the second render are same or not, if not, it gives warning as it's not the expeted behaviour\n    - Read more [here](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development)\n\n2.  re-run Effects an extra time to find bugs caused by missing Effect cleanup.\n\n    - During the second setup, it makes sure that the cleanup of first effect has taken place, if not, it will throw warning.\n    - Read more [here](https://react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development)\n\n3.  Check for the use of any depricated API. [read more](https://react.dev/reference/react/StrictMode#fixing-deprecation-warnings-enabled-by-strict-mode)\n\nNOTE that this will be enabled only during development.\n\n## `<Fragment />`\n\n- Often used via `<>...</>` syntax, lets you group elements without a wrapper node.\n\n- As react supports returning only one element, at cases when there are more than one elements, it requires you to wrap the elements within some other element like div.\n\n- To avoid using `<div>` or any other such element as a wrapper, you can use Fragment.\n\n## `<Suspense />`\n\n- Lets you display an alternate UI (fallback) until its children have finished loading.\n\nExampl:\n\n```javascript\nimport { Suspense } from \"react\";\nimport Albums from \"./Albums.js\";\n\nexport default function ArtistPage({ artist }) {\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<Loading />}>\n        <Albums artistId={artist.id} />\n      </Suspense>\n    </>\n  );\n}\n\nfunction Loading() {\n  return <h2>🌀 Loading...</h2>;\n}\n```\n\nNote:\n\n`<Suspense />` is mostly used while lazy laoding the component.\n\n## `<Profiler />`\n\n- This is one of the most useful component for developers to measure the performance of a React tree programatically.\n\n- By default this is deisabled in Prod.\n\nSyntax:\n\n```javascript\n\nfunciton  onRender(id, phase, actualDuration, baseDuration, startTime, commitTime){\n\n}\n\n\n\n<Profiler  id=\"app\"  onRender={onRender}>\n\n<YourComponent  />\n\n</Profiler>\n\n```\n\nOn every render, the `onRender` function gets called with the follwowing parameters:\n\n- `id`: The string `id` prop of the `<Profiler>` tree that has just committed. This lets you identify which part of the tree was committed if you are using multiple profilers.\n\n- `phase`: `\"mount\"`, `\"update\"` or `\"nested-update\"`. This lets you know whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.\n\n- `actualDuration`: The number of milliseconds spent rendering the `<Profiler>` and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. [`memo`](https://react.dev/reference/react/memo) and [`useMemo`](https://react.dev/reference/react/useMemo)). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.\n\n- `baseDuration`: The number of milliseconds estimating how much time it would take to re-render the entire `<Profiler>` subtree without any optimizations. It is calculated by summing up the most recent render durations of each component in the tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization). Compare `actualDuration` against it to see if memoization is working.\n\n- `startTime`: A numeric timestamp for when React began rendering the current update.\n\n- `endTime`: A numeric timestamp for when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable.","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"67dc09bf-9a54-4cd1-8f63-2535753c375f","order":0,"createdDate":{"$date":"2024-09-20T19:27:11.501Z"},"updatedDate":{"$date":"2024-09-20T19:27:11.501Z"},"uniqueId":"af28e51b-a99c-44f8-96e6-2bc439abdb97","__v":0}
{"_id":{"$oid":"66edcef195e746089ace5abc"},"name":"JavaScript - Basics","heading":"JavaScript - Basics","smartContent":{"content":"# JavaScript - Basics\n\n[Table of Contents](#javascript---basics)\n\n- [Hoisting](#hoisting)\n- [Let vs Const vs Var](#let-vs-const-vs-var)\n- [Scope](#scope)\n- [Strict Mode](#strict-mode)\n- [Data Types](#data-types)\n  - [When to use Map and Set?](#when-to-use-map-and-set)\n- [Regular Function vs Arrow Functions](#regular-function-vs-arrow-functions)\n- [Arguments in a Function](#arguments-in-a-function)\n- [Event Listeners](#event-listeners)\n- [Event Propagation](#event-propagation)\n- [Event Delegation](#event-delegation)\n- [DOM Manipulation](#dom-manipulation)\n- [EVAL](#eval)\n- [Template Literal](#template-literal)\n- [IIFE](#iife)\n- [Error Handling - try catch](#error-handling---try-catch)\n- [Memoization](#memoization)\n\n[Go Back ↩](../README.md)\n\n## Hoisting\n\nHoisting is a concept in JavaScript where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is actually executed.\n\n1. **Variable Hoisting**\n   ```javascript\n   console.log(x);\n   var x = 10; // Prints undefined\n   ```\n   The code above is transformed as follows:\n   ```javascript\n   var x; //declaration is hoisted and initialized with undefined\n   console.log(x); //undefined\n   x = 10; //initialization remains in the same place\n   ```\n   In the case of `let` or `const`\n   ```javascript\n   console.log(y); //Uncaught ReferenceError: y is not defined\n   let y = 10;\n   ```\n   let and const are hoisted too, but they're not initialized with any value, hence you get ReferenceError. This is called **Temporal Dead Zone (TDZ)**\n2. **Function Hoisting**\n   ```javascript\n   console.log(add(1, 2)); //3\n   function add(x, y) {\n     console.log(x + y);\n   }\n   ```\n   When it comes to **function declaration** like the example above, it is declared and initialized and is hoisted.\n\n   Let's see for the case of **function expression**, where we assign a function to a variable:\n   \n   ```javascript\n   console.log(sub(1, 2)); //Uncaught TypeError: sub is not a function\n   var sub = function (x, y) {\n     console.log(x, y);\n   };\n   ```\n   In this case, the variable sub is initialized with function, but during hoisting, the value of sub is undefined, hence calling () on undefined gives an error.\n\n## Let vs Const vs Var\n\nLet and Const are introduced in ES6.\n\n1.  `var`:\n    - Function-scoped and globally-scoped variable declaration.\n    - Hoisted with both declaration and initialization, leading to potential unexpected behaviour.\n    - Can be re-declared within the same scope without errors.\n2.  `let`:\n    - Block-scoped variable declaration that allows reassignment.\n    - Hoisted with declaration only; accessing before declaration results in a ReferenceError due to the temporal dead zone.\n    - Cannot be re-declared within the same scope.\n3.  `const`:\n    - Block-scoped variable declaration that does not allow reassignment.\n    - Hoisted with declaration only; accessing before declaration results in a ReferenceError due to the temporal dead zone.\n    - Must be assigned a value at the time of declaration and cannot be reassigned afterwards.\n    - Similar to let, const can not be re-declared within the same scope.\n\n## Scope\n\nThe context in which variables are declared and accessed\n\n1.  **Global Scope**:\n    - Variables declared outside of any function or block;\n    - Accessible from anywhere in the code.\n2.  **Function Scope**:\n    - Variables declared within a function are accessible only within that function.\n3.  **Block Scope**:\n    - Introduced by `{}` blocks; variables declared inside a block are limited to that block's scope.\n    - `Let` and `Const` follow block scope.\n4.  **Scope Chain**:\n    - Nested functions search for variables in their own scope, then in the scope of their parent functions, creating a chain.\n5.  **Global Object Access**:\n    - Variables declared without `var`, `let`, or `const` become properties of the global object (e.g., `window` in browsers).\n\n## Strict Mode\n\nWhen you enable strict mode in your JavaScript code, the JavaScript interpreter becomes less forgiving and enforces a stricter set of rules. It was introduced in ES5.\n\n1.  Variables without var doesn't create a global variable\n2.  The value of this inside a regular function is `undefined` contrary to a global context.\n3.  Disallow `eval`\n4.  Do not allow undeclared variables\n\nTo add strict mode to your code, you need to add the below line at the beginning of your code.\n```javascript\n\"use strict\";\n```\n\n## Data Types\n\n1. **Primitive Types**\n   - Number, String, Boolean, null, undefined,\n   - Symbol, BigInt -> Introduced in ES6\n2. **Non Primitive / Reference Data Types**\n   - Object, Array, Function, Date, RegExp\n   - Set, Map -> Introduced in ES6\n\n```javascript\ntypeof 42; // \"number\"\ntypeof \"hello\"; // \"string\"\ntypeof true; // \"boolean\"\ntypeof undefined; // \"undefined\"\ntypeof null; // \"object\"\ntypeof Symbol(); // \"symbol\"\ntypeof BigInt(123); // \"bigint\"\ntypeof {}; // \"object\"\ntypeof []; // \"object\"\ntypeof function () {}; // \"function\"\ntypeof new Date(); // \"object\"\ntypeof /pattern/; // \"object\"\n\n// ES6 types\ntypeof new Map(); // \"object\"\ntypeof new Set(); // \"object\"\n```\n\n### When to use Map and Set?\n\n**Map**\n\n- Map is a key value pair just like Object, where the key can be of any type.\n- Order is preserved in Map, unlike Object.\n- No need to handle hasOwnProperty\n- Easy to iterate\n- Lookup is O(1)\n\n```javascript\n//Object\nvar x = {};\nx.10 = 'apple' //Uncaught SyntaxError: Unexpected number\n\n//Map\nvar y = new Map();\ny.set(10, 'apple'); //This is allowed\n```\n\n**Set**\n\n- Set is similar to an array with he only difference that this does not allow duplicate values.\n\n```javascript\n//Regular array\nvar x = [1, 1]; //This is allowed\n\n//Using Set\nvar y = new Set();\ny.add(1);\ny.add(1); //allowed but this overwrites the previous value\n```\n\n## Regular Function vs Arrow Functions\n\nThe arrow function was introduced in ES6.\n\n1.  **Syntax**:\n    - Regular Function: Declared using the `function` keyword followed by a name and parameters.\n    - Arrow Function: Introduced by `() =>` syntax, omitting the `function` keyword.\n2.  **`this` Binding**:\n    - Regular Function: Has its own `this` context, dynamically set at runtime.\n    - Arrow Function: Inherits `this` from the surrounding scope, creating a lexical `this`.\n3.  **Constructor**:\n    - Regular Function: Can be used as a constructor to create new objects with the `new` keyword.\n    - Arrow Function: Cannot be used as a constructor.\n4.  **Arguments Object**:\n    - Regular Function: Has its own `arguments` object containing all passed arguments.\n    - Arrow Function: Does not have its own `arguments` object; inherits from the enclosing scope.\n5.  **`return`**:\n    - Regular Function: Requires an explicit `return` statement for multi-line blocks.\n    - Arrow Function: Implicitly returns single expressions without the need for a `return` statement.\n6.  **No Prototype**:\n    - Arrow Function: This does not have its own `prototype` property, hence cannot be used as a prototype constructor.\n\n## Arguments in a Function\n\n1. **Parameters**\n   - Parameters are placeholders in the function declaration that define the expected input values.\n2. **Arguments**:\n   - Arguments are the actual values passed to a function when it is invoked.\n3. **Number of Arguments**:\n   - JavaScript functions can be called with any number of arguments, regardless of the number of parameters defined.\n4. **Default Values**:\n   - Function parameters can have default values assigned, which are used when the corresponding argument is not provided.\n   ```javascript\n   function addValues(x=1, y=1){console.log(x+y}\n   addValues() //2\n   ```\n5. **Arguments Object**:\n   - Functions have an `arguments` object that holds all passed arguments, even if they are not explicitly defined as parameters.\n   ```javascript\n   function addValues(){\n       let arg = [...arguments] // converting an array-like object to an array for the ease of use\n       return arg.reduce((val, acc) => val+acc)\n   }\n   addValues(1,2,3) // 6\n   ```\n   The `arguments` object is not an array but is an array-like object that holds all the arguments passed to a function, but it does not inherit array methods like `forEach`, `map`, or `filter`.\n6. **Rest Parameters**:\n   - Introduced in ES6, rest parameters allow functions to accept an arbitrary number of arguments as an array.\n   ```javascript\n   function addValues(...arg){\n       return arg.reduce((val, acc) => val+acc)\n   }\n   addValues(1,2,3) // 6\n   ```\n7. **Spread Operator**:\n   - The spread operator (`...`) can be used to pass an array's elements as separate arguments to a function.\n   ```javascript\n   function addValues(...arg){\n       return arg.reduce((val, acc) => val+acc)\n   }\n   let values = [1,2,3]\n   addValues(...values) // 6\n   ```\n   Note: This is just a trivial example to show the use of the spread operator.\n8. **Order Matters**:\n   - Arguments are matched to parameters based on their order, so the first argument corresponds to the first parameter, and so on.\n9. **Callback Functions**:\n   - Functions can accept other functions as arguments, allowing for powerful patterns like callbacks and higher-order functions.\n   ```javascript\n   function performOperation(x, y, cb) {\n     const result = cb(x, y);\n     console.log(result);\n   }\n   function add(x, y) {\n     return x + y;\n   }\n   performOperation(1, 2, add); // 3\n   ```\n\n## Event Listeners\n\nIn JavaScript, event listeners are functions that \"listen\" for specific events to occur on a DOM element (such as a button, input, or any HTML element).\n\n```javascript\nconst myBtn = document.getElementById(\"myButton\");\nmyBtn.addEventListener(\"click\", function () {\n  //do something\n});\n```\n\n## Event Propagation\n\nEvent Propagation refers to the order in which events are handled and propagated through the DOM hierarchy in JavaScript. Every (almost) event propagates.\nThere are two phases of event propagation:\n\n1. **Bubbling**\n\n- In this phase, the event starts at the target element and bubbles up through the DOM hierarchy to the outermost ancestor element.\n- This phase allows you to set up event listeners on the target element or its descendants to respond to events as they propagate upward. -> _evet delegation_\n\n2. **Capturing**\n\n- In this phase, the event is captured by the outermost ancestor element and is propagated downward through the DOM hierarchy towards the target element.\n  _Note:_ By Default, events always Bubble.\n  You can also explicitly set an event listener to capture events during the capturing phase by passing a third parameter (`true`) to the `addEventListener` method:\n\n```javascript\nele.addEventListener(\n  \"click\",\n  function () {\n    console.log(\"Ele clicked during capturing phase\");\n  },\n  true\n);\n```\n\n## Event Delegation\n\nSometimes you would want to add an event listener to the parent instead of the individual child element. You use event delegation for that.\n\n```javascript\n<ul id=\"list\">\n  <li>Item 1</li>\n  <li id=\"item2\">Item 2</li>\n  <li>Item 3</li>\n</ul>;\n\nconst list = document.getElementById(\"list\");\nlist.addEventListener(\"click\", function (event) {\n  if (event.target.id === \"item2\") {\n    console.log(\"Item 2 clicked:\");\n  }\n});\n```\n\nThe idea is to take advantage of event bubbling: when an event occurs on a child element, it bubbles up through its ancestors in the DOM tree, allowing a parent element to intercept and handle the event.\n\nEvent delegation is particularly useful in scenarios where new elements are dynamically added to the DOM or when working with lists, tables, or other structures with repetitive elements.\n\n## DOM Manipulation\n\nDOM (Document Object Model) manipulation involves programmatically changing the structure, content, or style of a web page using JavaScript.\nThis is the main purpose of JavaScript.\nConsider the code below\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>DOM Manipulation Example</title>\n  </head>\n  <body>\n    <h1 id=\"title\">Title 1</h1>\n    <button id=\"changeButton\">Change Title</button>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nLet's see a JS code that changes the title with a click of the button\n\n```javascript\n// Get references to the elements\nconst titleElement = document.getElementById(\"title\");\nconst changeButton = document.getElementById(\"changeButton\");\n\n// Add a click event listener to the button\nchangeButton.addEventListener(\"click\", function () {\n  // Update the text content of the title element\n  titleElement.textContent = \"New Title\";\n});\n```\n\n## EVAL\n\n`eval` is a built-in JavaScript function that allows you to evaluate and execute a string of JavaScript code in the current _scope_.\nExample:\n\n```javascript\nconst x = 10;\nconst y = 20;\nconst code = \"x + y\"; // A string containing JavaScript code\nconst result = eval(code); // Evaluate the code and store the result in 'result'\nconsole.log(result); // Output: 30\n```\n\n**Eval is Evil**\nHowever, it's important to note that using `eval` has some potential downsides and security concerns:\n\n1.  **Security Risk**: Using `eval` with untrusted or user-generated input can expose your application to security vulnerabilities, as arbitrary code could be executed.\n2.  **Performance Impact**: The use of `eval` can have performance implications, as the JavaScript engine can't optimize the code containing `eval` as effectively as regular code.\n3.  **Maintainability**: Code that heavily relies on `eval` can become difficult to read, debug, and maintain.\n    It's advised never to use eval.\n    **Are there any alternatives to eval?**\n    There are many alternatives to eval, one of the most practical alternatives is to use a function constructor.\n\n```javascript\nconst addFunction = new Function(\"x\", \"y\", \"return x + y;\");\nconst result = addFunction(10, 20); // Evaluates to 30\n```\n\n## Template Literal\n\nTemplate literals provide a more readable and convenient way to create complex strings by allowing you to embed variables directly into the string content without the need for string concatenation or escaping characters.\n\n- Introduced in ES6\n- More readable.\n- Easy to append concatenate strings.\n\n```javascript\nlet name = \"Ish\";\n//Before\nconsole.log(\"My name is\" + name);\n//After\nconsole.log(`My name is ${name}`);\n```\n\n- Easy to create HTML elements.\n\n```javascript\nlet name = \"Ish\";\n\n//before\nlet div = document.createElement(\"div\");\nlet p = document.createElement(\"p\");\np.innerText = \"My name is Ish\" + name;\ndiv.append(p);\ndocument.querySelector(\"body\").appendChild(div);\n\n//After\nconst myDiv = `<div><p>My name is ${name}</p></div>`;\ndocument.querySelector(\"body\").innerHTML = myDiv;\n```\n\n## IIFE\n\nIIFE stands for Immediately Invoked Function Expression.\nIt's a JavaScript design pattern that involves defining a function expression and immediately invoking it. IIFEs are often used to create a private scope for variables, prevent variable name clashes, and encapsulate code.\n\n```javascript\n(function () {\n  // Code inside the IIFE is enclosed within its scope\n  const message = \"Hello from the IIFE!\";\n  console.log(message);\n})();\n```\n\n- Prevents polluting global scope.\n- Used by popular libraries like jQuery, Underscore.js, etc.\n\n## Error Handling - try-catch\n\n- Detect, manage, and recover from unexpected or exceptional situations that may arise during the execution of a program.\n- The `try...catch` statement is used to catch and handle errors in JavaScript code.\n- It consists of a `try` block where you place the code that might generate an error.\n- If an error occurs within the `try` block, the control is transferred to the corresponding `catch` block.\n- The `catch` block contains code that runs when an error is caught. It usually includes error-handling logic.\n- The `catch` block takes an optional parameter, conventionally named `error`, which represents the error object associated with the caught error.\n- You can include an optional `finally` block after the `try` and `catch` blocks.\n- The code in the `finally` block runs regardless of whether an error occurred or not. It is often used for cleanup tasks.\n- Within the `catch` block, you can rethrow the error using the `throw` statement to let outer `try...catch` blocks handle the error further.\n\n```javascript\ntry {\n  //Some code that throws an error\n} catch (error) {\n  console.error(\"Error caught:\", error.name, error.message);\n}\n```\n\nYou can throw **custom errors** in JavaScript by using the `throw` statement.\nThe example below demonstrates a proper use case.\n\n```javascript\nfunction divide(a, b) {\n  if (b === 0) {\n    throw new Error(\"Division by zero is not allowed\");\n  }\n  return a / b;\n}\ntry {\n  const result = divide(10, 0);\n  console.log(result);\n} catch (error) {\n  console.error(\"An error occurred:\", error.message);\n}\n```\n\n## Memoization\n\n- Used to cache the already computed value.\n- For the next execution, if the value exists in the cache, if not, compute the value and store it in the cache.\n\n```javascript\nfunction  memoizeSquare(fn) {\n\tconst cache = {};\n\treturn  function(x) {\n\t\tif (x in cache) {\n\t\t\treturn cache[x];\n\t\t}\n\t\tconst result = fn(x);\n\t\tcache[x] = result;\n\t\treturn result;\n\t\t};\n\t}\n}\n\n// Create a memoized version of the square function\nconst memoizedSquare = memoizeSquare(function(x) {\n\tconsole.log('Calculating square of', x);\n\treturn x * x; }\n);\nconsole.log(memoizedSquare(5)); // Outputs: Calculating square of 5 \\n 25\nconsole.log(memoizedSquare(7)); // Outputs: Calculating square of 7 \\n 49\nconsole.log(memoizedSquare(5)); // Outputs: 25 (Cached result)\nconsole.log(memoizedSquare(10)); // Outputs: Calculating square of 10 \\n 100\n```\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b4915200-5048-4736-8b51-f25224e48a90","order":0,"createdDate":{"$date":"2024-09-20T19:37:21.304Z"},"updatedDate":{"$date":"2024-09-20T19:37:21.304Z"},"uniqueId":"f3e95ac1-2456-4f5f-bcfe-6c40a281673b","__v":0}
{"_id":{"$oid":"66edcf7495e746089ace7000"},"name":"JavaScript Advanced","heading":"JavaScript Advanced","smartContent":{"content":"# JavaScript Advanced\n\n[Table of Contents](#javascript-advanced)\n\n- [Mutability vs Immutability](#mutability-vs-immutability)\n  - [Immutable types](#immutable-types)\n  - [Mutable types](#mutable-types)\n- [Callback and Callback Hell](#callback-and-callback-hell)\n  - [Callback hell](#callback-hell)\n- [Promises](#promise)\n  - [Creating a Promise](#creating-a-promise)\n    - [Three phases:](#three-phases)\n    - [Three methods](#three-methods)\n  - [Chained Promise](#chained-promise)\n  - [Important Note](#important-note)\n  - [Other Major Promise methods:](#other-major-promise-methods)\n- [Async Await](#async-await)\n  - [Difference between async await and promise](#difference-between-async-await-and-promise)\n- [Prototype / proto](#prototype)\n- [Inheritance](#inheritance)\n- [Constructor Function](#constructor-function)\n  - [Achieving inheritance using constructor function](#achieving-inheritance-using-constructor-function)\n  - [But why did we even create the function `getName` in the prototype and not directly inside the Constructor?](#but-why-did-we-even-create-the-function-getname-in-the-prototype-and-not-directly-inside-the-constructor)\n  - [How does a constructor function work internally?](#how-does-a-constructor-function-work-internally)\n- [Classes](#class)\n- [`this` and identifying it's value](#this)\n  - [Overwriting this -> call/bind/apply](#this)\n- [Pure functions](#pure-functions)\n- [Proxy](#proxy)\n- [Symbol](#symbol)\n  - [Symbol.iterator](#symboliterator)\n- [Memory Leaks](#memory-leaks)\n- [Garbage collection](#garbage-collection)\n  - [Triggers](#triggers)\n- [Currying](#currying)\n- [Cascading](#cascading)\n- [Object freeze vs seal](#object-freeze-vs-seal)\n  - [`Object.freeze()`](#objectfreeze)\n  - [`Object.seal()`](#objectseal)\n- [Object.defineProperty](#objectdefineproperty)\n- [Generator Functions](#generator-functions)\n\n[Go Back ↩](../README.md)\n\n## Mutability vs Immutability\n\n**Mutability** : A _mutable_ value is one that can be changed without creating an entirely new value.  \n**Immutability** : An immutable value is one whose content cannot be changed without creating an entirely new value.  \n\nAll primitive types in JavaScript are immutable.\n\n### Immutable types\n\n1.  **String**:\n2.  **Number**:\n3.  **Boolean**:\n4.  **Undefined**:\n5.  **Null**:\n6.  **Symbol**:\n\nOnce a primitive value is created, it cannot be changed, although the variable that holds it may be reassigned another value.\n\nImmutable types are _pass by value_ meaning when you copy the value of a primitive data, it's value is stored in a new memory location.\n\n```javascript\nlet x = 10;\nlet y = x;\n```\n\nIn the above case, both x and y refer to a different memory location with value 10 in it.\n\n### Mutable types\n\n1. **Object**\n2. **Array**\n   \nIn mutable types, updating the variable actually updates the value.\n\n```javascript\nlet arr = [1, 2, 3];\narr.push(4); //This operation actually updates the value stored in the variable.\n```\n\nMutable types are _pass by reference_ meaning when you copy the value of a non primitive data, the reference(memory address) of the first variable is copied.\n\n```javascript\nlet arr = [1, 2, 3];\nlet arr1 = arr;\n```\n\nIn the above case, both arr and arr1 refer to the same memory location where `[1,2,3]` is stored.\nIf we update the value in any one of the variable, the other get's the updated value.\n\n```javascript\nlet arr = [1, 2, 3];\nlet arr1 = arr;\narr1.push(4);\nconsole.log(arr1);\nconsole.log(arr);\n```\n\nIn the above case, both will print `[1,2,3,4]`\n\nNote: Even functions are mutable (functions are basically object in JavaScript)\n\n## Callback and Callback Hell\n\n- A function that is passed as an argument to another function is called a callback.\n- Can be executed with or without arguments.\n- It allows other code to run in the meantime and prevents any blocking.\n- Mostly used to perform asynchronous work.\n\nHere's a simple example to illustrate the concept:\n\n```javascript\nfunction fetchData(callback) {\n  setTimeout(function () {\n    const data = { name: \"John\", age: 30 };\n    callback(data); // this calls the passed processData function\n  }, 1000); // Simulating an asynchronous operation\n}\n\nfunction processData(data) {\n  console.log(\"Processing data:\", data.name);\n}\n\nfetchData(processData);\n```\n\n### Callback hell\n\n- Multiple nested callbacks make the code difficult to handle.\n- Series of async operation depending on each other.\n- Also called 'pyramid of doom'\n\nExample:\n\n```javascript\nasyncFunction1(function (result1) {\n  asyncFunction2(result1, function (result2) {\n    asyncFunction3(result2, function (result3) {\n      // ... and so on\n    });\n  });\n});\n```\n\nThis causes multiple issues in terms of readability, error handling and scalability, hence we make use of another concept called `promise` to handle such situation.\n\n## Promise\n\n- A _promise_ is a proxy of value that is not necessarily known at the time of creation of the promise. (what is a proxy? Will discuss later)\n- It can be in 3 states: Pending, Fulfilled, and Rejected.\n- Promises can be chained.\n- It has 3 methods: `then`, `catch` and `finally`\n\n### Creating a Promise\n\n- Syntax: `new Promise(executorFunction)`\n- ExecutorFunction expects two parameters: `resolve` and `reject`\n- Resolve is used when the operation is successful.\n- Reject is used when the operation fails.\n\nA sample example:\n\n```javascript\nfunction executorFunction(resolve, reject) {\n  try {\n    //Do some async work (or sync)\n    setTimeout(() => {\n      const data = \"Apple\";\n      resolve(data);\n    }, 2000);\n  } catch (e) {\n    reject(e);\n  }\n}\n\nconst myPromise = new Promise(executorFunction);\n```\n\nUsage:\n\n```javascript\nmyPromise()\n  .then(data => {\n    console.log(\"Data:\", data);\n  })\n  .catch(error => {\n    console.error(\"Error:\", error.message);\n  });\n```\n\n#### Three phases:\n\n- Pending : Initial state, neither fulfilled nor rejected.\n- Fulfilled: Operation was completed successfully.\n- Rejected: Operation failed.\n\n#### Three methods\n\n- then : In case of resolved promise, control comes to then block.\n- catch : In case of a failed promise, control comes to the catch block.\n- finally : In every case, finally will always be executed at last.\n\n### Chained Promise\n\n```javascript\nmyPromise\n  .then(handleFulfilledA, handleRejectedA)\n  .then(handleFulfilledB, handleRejectedB)\n  .then(handleFulfilledC, handleRejectedC);\n```\n\n### Important Note\n\n- .then and .catch are both `thennable` meaning, they both return a new promise which can be chained.\n- If .then is a success, it goes to the next .then\n- If .then throws any error, it goes to the next .catch.\n- If .catch is a success, it goes to the next .then\n- If .catch throws any error, it goes to the next .catch\n- It follows this pattern till it reaches finally.\n- .finally is reached in both the case.\n\n### Other Major Promise methods:\n\n1. **Promise.all**: Waits for all promises to resolve or any to reject, returning an array of results.\n2. **Promise.allSettled**: Waits for all the promises despite their status (resolved or rejected) to get settled. Returns an array of objects that describes the status of each promise.\n3. **Promise.race**: Resolves or rejects with the value of the first promise to settle (either resolve or reject).\n4. **Promise.any**: Waits for the first promise to resolve, ignoring rejections until all fail.\n\nEven though promise is a better alternative to callbacks, in ES6, a new concept called `Async Await` was introduced.\n\n## Async Await\n\n1.  **Synchronous Look**: Provides a synchronous-like syntax for handling asynchronous operations.\n2.  **Awaiting Promise**: Pauses execution until a promise is resolved, then returns its value.\n3.  **Error Handling**: Simplifies error handling with try/catch blocks around asynchronous code.\n4.  **Sequential Logic**: Easily chain and await multiple async calls for sequential logic.\n5.  **Modern Alternative**: Offers cleaner code compared to nested callbacks or chaining `.then()`.\n\nExample:\n\n```javascript\nasync function fetchData() {\n  try {\n    const data = await fetchAPI();\n    const processedData = await process(data);\n    doSomething(data);\n  } catch (error) {\n    handleError(error);\n  }\n}\n```\n\n### Difference between async await and promise\n\nThere is a very subtle difference when it comes to the execution of these two concepts.\n\nWith async wait, the execution of a function stops when it witnesses the await statement and moves out of the function until the async process is completed.\nWhereas with promise, the execution continues in the same function, it just skips the promise statement until the async process is completed.\n\nExample:\n\n```javascript\n//With Promise\nfunction doSomething() {\n  console.log(1);\n  somePromise.then(x => console.log(2)).catch(); //Some promise that resolves with 2\n  console.log(3);\n}\ndoSomething();\nconsole.log(4);\n\n//Output\n1, 3, 4, 2;\n```\n\n```javascript\n//With Async Await\nasync function doSomething() {\n  console.log(1);\n  const resp = await somePromise(); //Promise resolves with\n  console.log(resp);\n  console.log(3);\n}\ndoSomething();\nconsole.log(4);\n//Output\n1, 4, 2, 3;\n```\n\n## Prototype\n\n- Prototypes are the mechanism by which JavaScript objects inherit features from one another.\n- Every object in JavaScript has a built-in property, which is called its **prototype**\n- The prototype is itself an object, so the prototype will have its own prototype, making what's called a **prototype chain**.\n- The chain ends when we reach a prototype that has `null` for its own prototype.  \n\nConsider the following simple example of creating an object with a method:\n```javascript\nconst person = {\n\tname: \"Ish\",\n\tgetName(){\n\t\tconsole.log(`My name is ${this.name}`)\n\t}\n}\nconsole.log(person.getName())\n//Output\nMy name is Ish\n```\n\nAs we can see, `getName` is a method inside person object, so person.getName() gives me the desired output.\nBut what if I do something like\n\n```javascript\nperson.toString();\n//Output\n(\"[object Object]\");\n```\n\nAs you can see, `toString()` on the object `person` is not throwing error, rather it's giving me a unwanted value.\nThis is possible because the method `toString()`belongs to the prototype of the object person.\n\nWhen you try to access a property of an object: if the property can't be found in the object itself, the prototype is searched for the property. If the property still can't be found, then the prototype's prototype is searched, and so on until either the property is found, or the end of the chain is reached, in which case `undefined` is returned.\n\nIf I try to access the prototype of the object person, I get following results:\n\n```javascript\n1.  {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}\n1.  constructor: ƒ Object()\n2.  hasOwnProperty: ƒ hasOwnProperty()\n3.  isPrototypeOf: ƒ isPrototypeOf()\n4.  propertyIsEnumerable: ƒ propertyIsEnumerable()\n5.  toLocaleString: ƒ toLocaleString()\n6.  toString: ƒ toString()\n7.  valueOf: ƒ valueOf()\n8.  __defineGetter__: ƒ __defineGetter__()\n9.  __defineSetter__: ƒ __defineSetter__()\n10.  __lookupGetter__: ƒ __lookupGetter__()\n11.  __lookupSetter__: ƒ __lookupSetter__()\n12.  __proto__: (...)\n13.  get __proto__: ƒ __proto__()\n14.  set __proto__: ƒ __proto__()\n```\n\nYou can view the prototype of any object using `person.__proto__` (which is deprecated, we can instead make use of Object.getPrototypeOf(person))\n\n**Prototype of a function**\n\n- Every function has a property called `prototype` .\n\n```javascript\nfunction fruit() {}\nconsole.log(fruit.prototype);\n//Output\n{\n  constructor: ƒ;\n}\n```\n\nAs we can see above, the `prototype` of a function is an object which has a key called `constructor`\n\n- Now let's check the value of `constructor`\n\n```javascript\nconsole.log(fruit.prototype.constructor);\n//Output\nƒ fruit(){}\n```\n\nAs we can see above, the `constructor` references to the same function called `fruit` (the original function)\n\nThe following holds true,\n\n```javascript\nfunction Person() {}\nconsole.log(Person.prototype.constructor === Person); // Outputs: true\nconst person = new Person();\nconsole.log(person.constructor === Person); // Outputs: true\n```\n\nHence the object created using constructor function has information about it's constructor.\n**Note**: We will discuss more about this while discussing constructor function\n\n**Shadowing properties:**\nOnly check the prototype if the property doesn't exist in the current object.\n\n**Setting a prototype**\n\n1. Object.create\n\n```javascript\nconst person = {\n  greet() {\n    console.log(\"Hello\");\n  },\n};\nconst me = Object.create(person);\nme.greet(); //Hello\n```\n\n2. Constructor (Will discuss more in detail later)\n\n## Inheritance\n\n- Inheritance in JavaScript refers to the mechanism by which objects can inherit properties and methods from other objects.\n- By now we're aware that JavaScript supports only Prototype Based Inheritance (ES6 introduced class, after which JS supports even class based inheritance).\n\n## Constructor Function\n\nConstructor Functions can be used to create objects and achieve inheritance (prototypical inheritance) as discussed above.\n\n```javascript\nfunction Person(name) {\n  this.name = name;\n}\nconst Ish = new Person(\"Ish\");\n```\n\n- Using the above syntax, we can create a new object using a `Person` constructor.\n- The newly created object has a property (in it's prototype) called constructor, which holds the information of the Function/Constructor which was used to create this object.\n\n```javascript\nconsole.log(Object.getPrototypeOf(Ish))\n//Output ->\n{constructor: ƒ}\n//which expands to\n1.  constructor: ƒ Person(name)\n2.  [[Prototype]]: Object\n```\n\nWe can check the constructor of the Ish using `Ish.constructor` which returns me `Person` constructor.\n\n```javascript\nconsole.log(Ish.constructor)\n//Output ->\nƒ Person(name){\n    this.name = name\n}\n```\n\n### Achieving inheritance using the constructor function\n\nLet's write a code to achieve this:\n\n```javascript\n// A base Constructor\nfunction Animal(name) {\n  this.name = name;\n}\n//Creating a function on the prototype of the constructor\nAnimal.prototype.getName = function () {\n  console.log(this.name);\n};\n\n//A new constructor which inherits Animal base constructor (cat is animal...right?)\nfunction Cat(type) {\n  this.type = type;\n  Animal.call(this, \"Catty\");\n}\n```\n\nWe did the basic stuff required to achieve inheritance (or did we?)\nlet's check few things below\n\n```javascript\nconst myCat = new Cat(\"Fluffy\");\nconsole.log(myCat.type); // Fluffy\nconsole.log(myCat.name); // Catty\n//Yaeeey\n\nconsole.log(myCat.getName()); //Uncaught TypeError: myCat.getName is not a function 🤷🏼‍♂️\n```\n\nAs we can see above, `myCat.type` is giving me correct type, and even `myCat.name` is giving me correct name, which it is getting from it's prototype.\nBut why is `getName` not a function?\n\nBecause even though we did `Animal.call()` inside Cat, it is still not inheriting the prototype of the `Animal` constructor.\nTo do that, we need to inherit even the prototype of the Animal.\n\n```javascript\nCat.prototype = Object.create(Animal.prototype);\n```\n\nUsing the above code, we are assigning the prototype of the Animal constructor to the prototype of `Cat` constructor.\n\nBut wait, we're not done yet. If you check the constructor of `myCat` it'll point to Animal, but we want it to be of the Cat.  \nOur last step is to assign the constructor back to the Cat prototype.\n\n```javascript\nCat.prototype.constructor = Cat\n```\n\nAnd now we've achieved proper inheritance.\n\n### But why did we even create the function `getName` in the prototype and not directly inside the Constructor?\n\nEvery object created using the Constructor Function gets a copy of all the properties present in the constructor. This may not be a good idea in some cases.\nLike it makes sense that every object get's a different name, but why a different `getName` function? We can just make use of the same function `reference` in each and every object isn't it?\nYes, we're doing the exact same thing.\n\n### How does a constructor function work internally?\n\nWhen you call a constructor function in JavaScript using the `new` keyword, following steps are taken internally to create a new object instance and initialize its properties:\n\n1.  A new empty object is created. This new object will become the instance of the constructor.\n2.  The constructor function is called with `this` set to the newly created object. This allows the constructor to initialize the object's properties and set up its initial state.\n3.  The newly created object's internal `[[Prototype]]` (or `.__proto__`) property is set to the prototype property of the constructor function. This establishes the prototype chain for inheritance.\n\n```javascript\nfunction MyNew(constructorFn) {\n  const obj = {}; //Step 1\n  constructorFn.call(obj); //Step 2\n  obj.__proto__ = constructorFn.prototype; //Step 3\n  return obj;\n}\n```\n\n**NOTE** If the constructor does not explicitly return an object, the newly created object is returned. If the constructor returns an object, that object takes precedence over the default object created in step 1.\n\nOverwhelmed? I can't simplify this more in text, maybe my [YouTube Video](https://youtu.be/p7ug90Rktuk) on the same will be helpful\n\n## Class\n\n- ES6 introduced class to JavaScript\n- You can make use of class to create an object.\n\n**Features**\n\n1. **Syntactic Sugar**: Classes are syntactic sugar over constructor functions and prototypes.\n2. **Constructor Method**: The `constructor` method initializes object properties when a new instance is created.\n3. **Instance Creation**: Objects are created using the `new` keyword followed by the class name.\n4. **`this` Context**: Inside class methods, `this` refers to the instance the method is called on.\n5. **Inheritance**: Classes can extend other classes using the `extends` keyword for inheritance.\n6. **`super` Keyword**: The `super` keyword is used to call methods from the parent class.\n7. **Constructor Property**: Instances have a `constructor` property pointing back to the class.\n\nSame example as above with classes:\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n  getName() {\n    console.log(this.name);\n  }\n}\n\nclass Cat extends Animal {\n  constructor(type) {\n    super(\"Catty\");\n    this.type = type;\n  }\n  getType() {\n    console.log(this.type);\n  }\n}\n\nconst myCat = new Cat(\"Fluffy\");\nconsole.log(myCat.type); // Fluffy\nconsole.log(myCat.name); // Catty\nconsole.log(myCat.getName()); //Catty\n```\n\n**Constructor Method**\nProperties declared inside the constructor method will be copied to every instance(object) that's created using the class.\n\n1.  Properties defined inside the constructor method using `this.propertyName` are unique to each instance created from the class.\n2.  When you create a new instance using the `new` keyword, the constructor is executed, and properties defined within the constructor are initialized for that specific instance.\n3.  Each instance has its own set of properties, and changes made to these properties on one instance do not affect other instances.\n\n**Non constructor methods**\n\n1.  When you create a class using the `class` syntax, the methods defined inside the class are added to the class's prototype.\n2.  When you create an instance of the class using the `new` keyword, the instance has an internal reference (`[[Prototype]]` or `.__proto__` depending on how you access it) to the class's prototype.\n3.  When you call a method on an instance, JavaScript looks up the prototype chain to find the method in the prototype. It doesn't copy the method to the instance itself.\n4.  This behavior is what allows for memory-efficient sharing of methods among instances.\n\n**NOTE** We achieved the same in Constructor Function by defining the methods in the prototype of the constructor rather than directly defining inside it.\n\n## `this`\n\n- `this` in JavaScript refers to the context within which a function is executed.\n- Value depends on how a function is called.\n\nHere are a few key points to understand about `this` in JavaScript:\n\n1.  **Global Context**: In the global context (outside of any function), \"this\" refers to the global object, which is often the \"window\" object in a browser environment or the \"global\" object in Node.js.\n\n```javascript\nconsole.log(this === window); // In a browser, true\n```\n\n2.  **Function Context**: In a regular function (not an arrow function), \"this\" is determined by how the function is called. It can be influenced by the object the function is a property of (the calling object) or by how the function is invoked using methods like \"call\", \"apply\", or \"bind\". By default `this` refers to the global window object in a regular function.\n\n```javascript\nlet name = \"Global Ish\";\nfunction myName() {\n  let name = \"Ish\";\n  console.log(this.name);\n}\nmyName(); //This will refer to the global name Global Ish.\n```\n\n3.  **Method Invocation**: When a function is called as a method of an object, \"this\" refers to the object that the method belongs to. In this case, \"this\" points to the object to the left of the dot when calling the method.\n\n```javascript\nlet name = \"Global Ish\";\nconst person = {\n  name: \"Ish\",\n  greet: function () {\n    console.log(`Hello, my name is ${this.name}`);\n  },\n};\nperson.greet(); // Hello, my name is Ish\nlet x = person.greet;\nx(); // Hello, my name is Global Ish\n```\n\n4.  **Constructor Functions**: When a function is used as a constructor using the \"new\" keyword, \"this\" refers to the newly created instance of the object.\n\n```javascript\nfunction Person(name) {\n  this.name = name;\n  this.greet = function () {\n    console.log(`Hello, my name is ${this.name}`);\n  };\n}\nconst person1 = new Person(\"Bob\");\nperson1.greet(); // \"this\" refers to the instance \"person1\"\n```\n\n5.  **Arrow Functions**: Arrow functions do not have their own \"this\" context; they inherit the \"this\" value from the surrounding code.\n\n```javascript\nlet name = \"Global Ish\";\nconst person = {\n  name: \"Ish\",\n  getName: () => {\n    console.log(`Hello, my name is ${this.name}`);\n  },\n};\nperson.getName(); // Hello, my name is Global Ish\n```\n\nThis might be a bit tricky to comprehend. It was very confusing for me.\n\nAs stated above, arrow function inherit the \"this\" value from the surrounding code. In this case, the surrounding code is person object, which in turn is in the global scope.\nRemember from the main definition: `this` in JavaScript refers to the context within which a function(not object) is executed\n\n6.  **Explicit Binding**: Functions like \"call\", \"apply\", and \"bind\" can be used to explicitly set the value of \"this\" for a function.\n\n```javascript\nfunction sayHi() {\n  console.log(`Hi, ${this.name}`);\n}\nconst user = { name: \"Ish\" };\nsayHi.call(user); // \"this\" refers to the \"user\" object\n```\n\n## Pure functions\n\n1.  **Output Deterministic**: Pure functions always produce the same output for the same input, making them predictable.\n2.  **No Side Effects**: Pure functions do not modify external state or have observable side effects.\n3.  **Caching Benefits**: Pure functions can be cached or memoized for performance optimization.\n4.  **Maintainable Code**: Using pure functions promotes cleaner, more maintainable code.\n\n```javascript\n// Pure function: Adds two numbers without side effects\nconst add = (a, b) => a + b;\n```\n\nBelow is an example of a function that's not pure\n\n```javascript\nlet total = 0;\nfunction addToTotal(value) {\n  total += value; // Modifies external state (side effect)\n}\naddToTotal(10); // Side effect: Modifies \"total\" variable\nconsole.log(total); // Outputs: 10\n```\n\nAs you can see above, every time you call the function `addToTotal` , it updates the external value, hence causing side effect.\n\n## Proxy\n\nA promise is a **proxy** of a value that is not yet received.\nProxy is a built-in object that allows you to intercept and customize the fundamental operations of another object, known as the target object.\n\n- **Creating a Proxy**: You can create a Proxy using the `Proxy` constructor by providing the target object and a handler object that defines the custom behavior for various operations.\n\n```javascript\n//A basic Proxy with no handler object\nconst target = {\n  name: \"Ish\",\n  age: 30,\n};\nconst person = new Proxy(target, {});\nconsole.log(person.name); //Ish\n```\n\n- **Handler Object**: The handler object is a collection of functions (known as \"traps\") that define how the Proxy should respond to different operations, such as `get`, `set`, `apply`, `construct`, and more.\n- **Interception of Operations**: When you interact with the Proxy, the corresponding trap in the handler object is invoked, allowing you to intercept and customize the behavior of the target object.\n\n```javascript\nconst  target  = {\n\tage:  30,\n};\nconst  person  =  new  Proxy(target, {\n\t//overwrite the get method of an object\n\tget(target, property) {\n\t\treturn  `I am ${target[property]}`;\n\t}\n})\nperson.name = \"Ish\"\nconsole.log(person.name); // I am Ish\n```\n\n- **Use Cases**: Proxies are useful for implementing features like **data validation**, logging, access control, and more.\n\n## Symbol\n\nIn JavaScript, a Symbol is a primitive data type introduced in ECMAScript 6 (ES6) that represents a unique and immutable value.\nSymbols are often used as keys for object properties to avoid naming conflicts and ensure that property names won't accidentally collide.\n\n1. **Uniqueness**: Each Symbol value is unique, even if the symbols have the same description. This uniqueness makes them useful for creating private or hidden object properties.\n2. **Hidden Properties**: Symbols can be used to define properties that are not easily accessible using iteration or reflection mechanisms like `for...in` loops or `Object.keys()`.\n\n### Symbol.iterator\n\nThe Symbol.iterator is a well-known symbol in JavaScript that allows you to define custom iteration behavior for objects. This symbol is used to implement the iterable protocol, which enables objects to be used with the `for...of` loop and other built-in iteration methods.\n\n```javascript\nconst range = {\n  start: 1,\n  end: 5,\n  [Symbol.iterator]() {\n    let current = this.start;\n    return {\n      next: () => {\n        if (current <= this.end) {\n          return {\n            value: current++,\n            done: false,\n          };\n        } else {\n          return {\n            done: true,\n          };\n        }\n      },\n    };\n  },\n};\n\nfor (const num of range) {\n  console.log(num);\n}\n//Output\n1;\n2;\n3;\n4;\n5;\n```\n\n## Memory Leaks\n\nMemory leaks in JavaScript can occur when references to objects are retained, preventing the JavaScript garbage collector from properly reclaiming memory that is no longer needed.\n\n1.  **Unintentional Global Variables**: Variables declared without the `var`, `let`, or `const` keywords (implicitly global variables) can cause memory leaks if they hold references to objects that should be garbage collected.\n2.  **Closures**: Closures that capture references to variables outside their scope can lead to memory leaks if the closures are not properly managed.\n3.  **Event Listeners**: Forgetting to remove event listeners when they are no longer needed can result in objects (such as DOM elements) being held in memory even after they are no longer reachable.\n4.  **Circular References**: Objects that reference each other in a circular manner can prevent the garbage collector from reclaiming memory.\n5.  **Timers and Intervals**: Not clearing or disposing of timers or intervals can cause objects associated with them to remain in memory.\n6.  **DOM References**: Keeping references to DOM elements that are no longer needed can lead to memory leaks, especially in single-page applications.\n\n## Garbage collection\n\n- Removing unreachable objects from memory to free up resources\n- GC happens automatically in JavaScript.\n\n**Mark and Sweep Algorithm**: The most common garbage collection algorithm used is the \"mark and sweep\" algorithm. It involves two main phases: marking and sweeping.\n\n- **Marking**: The garbage collector starts from a set of known root objects (e.g., global variables, function parameters) and traces references through the object graph, marking all **reachable** objects as \"in use.\"\n- **Sweeping**: Once marking is complete, the garbage collector sweeps through the memory, identifying and freeing memory occupied by objects that were not marked as reachable. These unreferenced objects are considered garbage and are eligible for collection.\n\n### Triggers\n\n1. Memory Pressure : When available memory is low.\n2. Allocation threshold: When the no of allocated objects exceed the set threshold.\n3. Time based: Based on some fixed time.\n\n## Currying\n\n- A function returning a function that can be called again.\n\n```javascript\n//Without currying\nfunction add(x, y, z) {\n  return x + y + z;\n}\nadd(1, 2, 3); // 6\n\n//With currying\nfunction add(x) {\n  return function (y) {\n    return function (z) {\n      return x + y + z;\n    };\n  };\n}\nadd(1)(2)(3);\n```\n\n## Cascading\n\n- A function returns it's context (this) using which any other method can be called again.\n- aka Method Chaining.\n- Cascading by definition means: **_pass (something) on to a succession of others._** And that's exactly what it does.\n- If you've used `jQuery` , you must be familiar with this kind of expressions: `$(\"#container\").fadeOut().html(\"Welcome, Sir\").fadeIn();`\n\n```javascript\nfetchData(\"api.example.com\").then().then().catch().finally();\n```\n\n## Object freeze vs seal\n\n- Both allows to control the mutability of the object.\n\n### `Object.freeze()`\n\n- **Purpose**: `Object.freeze()` is used to completely freeze an object, making it both non-extensible (no new properties can be added) and non-writable (existing properties cannot be modified).\n- **Extensibility**: The object becomes non-extensible, which means you cannot add new properties to it.\n- **Property Writability**: All existing properties become non-writable, meaning you cannot modify their values.\n- **Property Configurability**: All properties become non-configurable, meaning you cannot delete or reconfigure them.\n- **Effect on Nested Objects**: If the object contains nested objects, those nested objects are also deeply frozen.\n\n```javascript\nconst person = { name: \"Ish\" };\nObject.freeze(person);\n\nperson.age = 30; // Won't add the 'age' property\nperson.name = \"Rimal\"; // Won't modify the 'name' property\ndelete person.name; // Won't delete the 'name' property\n```\n\n### `Object.seal()`\n\n- **Purpose**: `Object.seal()` is used to seal an object, making it non-extensible and making existing properties non-configurable (can't be deleted or reconfigured).\n- **Extensibility**: The object becomes non-extensible, which means you cannot add new properties to it.\n- **Property Writability**: Existing properties can still be modified.\n- **Property Configurability**: Existing properties become non-configurable, meaning you cannot delete or reconfigure them.\n- **Effect on Nested Objects**: If the object contains nested objects, they are not affected and can still be modified.\n\n```javascript\nconst person = { name: \"Ish\" };\nObject.seal(person);\n\nperson.age = 30; // Won't add the 'age' property\nperson.name = \"Rimal\"; // Can modify the 'name' property\ndelete person.name; // Won't delete the 'name' property\n```\n\n| Operation | Freeze      | Seal        |\n| --------- | ----------- | ----------- |\n| Create    | Not Allowed | Not Allowed     |\n| Read      | Allowed     | Allowed     |\n| Update    | Not Allowed | Allowed |\n| Delete    | Not Allowed | Not Allowed |\n\n## Object.defineProperty\n\nDefine or modify properties of an object with more control.\nEvery property of an object can have 3 property attributes, which can be used to provide some property.\n\n1. **`writable`**:\n\n- Determines if a property's value can be changed using assignment.\n- If set to `true`, the value of the property can be modified.\n- If set to `false`, the value of the property cannot be modified after initialization.\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"readOnlyProp\", {\n  value: 42,\n  writable: false, // Cannot be changed after initialization\n});\n\nobj.readOnlyProp = 100; // No effect due to writable: false\n```\n\n2. **`enumerable`**:\n\n- Controls whether a property is included when looping through object properties using methods like `for...in`, `Object.keys()`, and others.\n- If set to `true`, the property is enumerable and will be included in iterations.\n- If set to `false`, the property is non-enumerable and won't be included in iterations.\n\n```javascript\nconst obj = { a: 1, b: 2 };\nObject.defineProperty(obj, \"hiddenProp\", {\n  value: 42,\n  enumerable: false, // Won't show up in iterations\n});\nfor (const prop in obj) {\n  console.log(prop); // Outputs: \"a\" and \"b\", not \"hiddenProp\"\n}\n```\n\n3. **`configurable`**:\n\n- Controls whether a property's attributes can be changed and whether the property can be deleted.\n- If set to `true`, the property's attributes (writable, enumerable, configurable) can be modified, and the property can be deleted.\n- If set to `false`, the property's attributes cannot be modified, and the property cannot be deleted.\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"configurableProp\", {\n  value: 42,\n  configurable: false, // Attributes cannot be modified, property cannot be deleted\n});\n\ndelete obj.configurableProp; // No effect due to configurable: false\n\nObject.defineProperty(obj, \"configurableProp\", {\n  enumerable: true,\n}); // Error due to non-configurable property\n```\n\n## Generator Functions\n\n- Return multiple times form a same function.\n- Generators can be paused and resumed.\n- It is denoted by an asterisk (`*`) after the `function` keyword.\n- It make use of the `yield` keyword to produce values.\n\nExample-\n\n```javascript\nfunction* numberGenerator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = numberGenerator();\n\nconsole.log(generator.next().value); // Outputs: 1\nconsole.log(generator.next().value); // Outputs: 2\nconsole.log(generator.next().value); // Outputs: 3\nconsole.log(generator.next().value); // Outputs: undefined\n```\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"b4915200-5048-4736-8b51-f25224e48a90","order":0,"createdDate":{"$date":"2024-09-20T19:39:32.06Z"},"updatedDate":{"$date":"2024-09-20T19:39:32.06Z"},"uniqueId":"4751197c-7dab-4ba4-afa5-934a57ff96de","__v":0}
{"_id":{"$oid":"670b6fee0b1426b50d34eb00"},"name":"Descriptive Answer","heading":"Descriptive Answer","smartContent":{"content":"To work with `.rest` files in Visual Studio Code, which are typically used to send HTTP requests, you should install the **\"REST Client\"** extension.\n\nHere’s how to do it:\n\n1. Open **VS Code**.\n2. Go to the **Extensions** view by clicking on the Extensions icon in the Activity Bar on the side of the window or pressing `Ctrl+Shift+X`.\n3. In the search bar, type **\"REST Client\"**.\n4. Install the extension published by **Huachao Mao**.\n\nOnce installed, you'll be able to write and run HTTP requests directly from `.rest` or `.http` files in VS Code. You can trigger the requests by clicking the \"Send Request\" button that appears above each request in the file.\n\n","textOutputType":"markdown","textInputType":"TextArea"},"rating":3,"linkedQuestionsId":"5a3bc9b4-b783-46b1-96a3-2de7d56f885e","order":0,"createdDate":{"$date":"2024-10-13T06:59:58.736Z"},"updatedDate":{"$date":"2024-10-13T06:59:58.736Z"},"uniqueId":"40f6ed88-cf1b-40e1-94f4-5b67f7b073cf","__v":0}
