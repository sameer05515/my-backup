{"_id":{"$oid":"64e873536b484a688e9936f4"},"content":"<p>My Office Tasks</p>","createdAt":{"$date":"2023-08-25T09:24:35.733Z"},"comments":[{"text":"<p>Add loader in UploadFile.jsx- Done</p><p><br></p><p>1) Trigger ETL button should be disable if Databrew project already exists for that category&nbsp;- done - mehul</p><p><strong>2) while uploading data add loader&nbsp;- premendra&nbsp;- Done</strong></p><p>3) modify spend pipeline add trigger databrew job first steps and get parameter like trasformerd data folder and data model folder&nbsp;</p><p>4) create s3 folder structure dynamically as per datacategorykey for upload datamodel/header and data parameter ( jbname , source data (transformed data --&gt;) , iceberg table name --&gt; datatype --&gt; config.json --&gt; taxonomy subset</p><p>5) modify databrew dataset creation logic in code as per aboove folder creation ---&gt; dataset creation on the basis of parameter</p><p>6) AI integration --&gt; coreation id and metadata need to be stored in db and when response back on dynamic paramete is aimock need to pass (design pending)&nbsp;-- Akshay</p><p>7) Create Dynamic structure of bucket folder -- ESG -1296</p><p>8) dynamic ETL pipeline - which runs on given parameter&nbsp;</p><p>9) DataBrew api or something where we get to know mapped status. --&gt; mehul</p>","_id":{"$oid":"64e8778856375d37eef0f850"},"createdAt":{"$date":"2023-08-25T09:42:32.903Z"},"nestedComments":[]},{"text":"<p><br></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1202\" rel=\"noopener noreferrer\" target=\"_blank\">[ESG-1202] Its accepting other languages as Attribute Name - JIRA (atlassian.net)</a></p><p><br></p><p><br></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1185\" rel=\"noopener noreferrer\" target=\"_blank\">ESG-1185</a></p><p><br></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1139\" rel=\"noopener noreferrer\" target=\"_blank\">ESG-1139</a></p><p><br></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1138\" rel=\"noopener noreferrer\" target=\"_blank\">ESG-1138</a></p>","_id":{"$oid":"64ec713fac1e0d7907d837a3"},"createdAt":{"$date":"2023-08-28T10:04:47.274Z"},"nestedComments":[]},{"text":"<p>Modify buckets path for data model and attributes-&nbsp;https://pdtzycus.atlassian.net/browse/ESG-1423</p>","_id":{"$oid":"64eea972b54c04da0ae7b155"},"createdAt":{"$date":"2023-08-30T02:29:06.387Z"},"nestedComments":[]},{"text":"<p>[01-Sep-2023] GSN- Requirements</p><p><br></p>","_id":{"$oid":"64f1f256dc01c24bad2af730"},"createdAt":{"$date":"2023-09-01T14:16:54.943Z"},"nestedComments":[]},{"text":"<p>01-Sep-2023</p><ol><li>GSN</li><li><br></li></ol><p><br></p>","_id":{"$oid":"64f8891c7a12f4ce592f111f"},"createdAt":{"$date":"2023-09-06T14:13:48.296Z"},"nestedComments":[]},{"text":"<p><br></p><p>ESG-1040 ESG-1058</p><p><br></p><p>ESG-827 to ESG-833</p><p><br></p><p>ESG-747-ESG-752</p><p><br></p><p>API Gateway</p><p><br></p><ol><li>&nbsp;We need to use KrakenD</li></ol><p>&nbsp;</p><p><br></p><p>2. Docker&nbsp;</p>","_id":{"$oid":"65040b28f6f63e3dc6073186"},"createdAt":{"$date":"2023-09-15T07:43:36.049Z"},"nestedComments":[]},{"text":"<p>Grooming Discussions with PMG team( in Sep 2023 month)</p>","_id":{"$oid":"650ab977557ae2d1a82a5254"},"createdAt":{"$date":"2023-09-20T09:20:55.973Z"},"nestedComments":[{"text":"<p><strong>Reporting- Grooming (By Pranjal Bansal)</strong></p><p><br></p><p>Related Stories:- </p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-154\" rel=\"noopener noreferrer\" target=\"_blank\">ESG-154</a>, <a href=\"https://pdtzycus.atlassian.net/browse/ESG-153\" rel=\"noopener noreferrer\" target=\"_blank\">ESG-153</a></p><p><br></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-4\" rel=\"noopener noreferrer\" target=\"_blank\">[ESG-4] ESG Forward: Reporting Config &amp; Execution - JIRA (atlassian.net)</a></p><p><br></p><p>Link for Figma:-</p>","createdAt":{"$date":"2023-09-20T09:22:27.309Z"},"_id":{"$oid":"650ab9d3557ae2d1a82a527b"}},{"text":"<p><strong>Organization Structure - Grooming ( By Partha Sarkar)</strong></p><p><br></p><p>Related Stories:-</p><p><br></p><p>Link for Figma:-</p>","createdAt":{"$date":"2023-09-20T09:24:38.182Z"},"_id":{"$oid":"650aba56557ae2d1a82a52cc"}},{"text":"<p><strong>Metric &amp; Initiatives Grooming - Grooming ( By Partha Sarkar)</strong></p><p><br></p><p><em>Related Stories:- </em></p><p>id in (\"ESG-130\",\"ESG-131\",\"ESG-132\",\"ESG-133\",\"ESG-744\",\"ESG-745\",\"ESG-747\",\"ESG-748\",\"ESG-749\",\"ESG-750\",\"ESG-751\",\"ESG-826\",\"ESG-827\",\"ESG-828\",\"ESG-829\",\"ESG-830\",\"ESG-831\",\"ESG-832\",\"ESG-833\") order by id asc</p><p><br></p><p>Goals - \"ESG-130\",\"ESG-131\",\"ESG-132\",\"ESG-133\",\"ESG-744\",\"ESG-745\"</p><p>Initiatives - \"ESG-827\",\"ESG-828\",\"ESG-830\",\"ESG-831\",\"ESG-832\",\"ESG-833\"</p><p><br></p><p><em>Link for Figma:-</em></p><p>&nbsp;</p><p>Goals: <a href=\"https://www.figma.com/proto/vSrZni4KLWxs9PdkMx9ghq/ESG-Part-2?type=design&amp;node-id=14703-136684&amp;t=KNBP87hwbV9JFDlD-0&amp;scaling=contain&amp;page-id=1%3A1252&amp;starting-point-node-id=14703%3A136684&amp;show-proto-sidebar=1\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.figma.com/proto/vSrZni4KLWxs9PdkMx9ghq/ESG-Part-2?type=design&amp;node-id=14703-136684&amp;t=KNBP87hwbV9JFDlD-0&amp;scaling=contain&amp;page-id=1%3A1252&amp;starting-point-node-id=14703%3A136684&amp;show-proto-sidebar=1</a></p><p>&nbsp;</p><p>Initiatives: <a href=\"https://www.figma.com/proto/vSrZni4KLWxs9PdkMx9ghq/ESG-Part-2?type=design&amp;node-id=14703-145027&amp;t=KNBP87hwbV9JFDlD-0&amp;scaling=contain&amp;page-id=1%3A1252&amp;starting-point-node-id=14703%3A145027&amp;show-proto-sidebar=1\" rel=\"noopener noreferrer\" target=\"_blank\">https://www.figma.com/proto/vSrZni4KLWxs9PdkMx9ghq/ESG-Part-2?type=design&amp;node-id=14703-145027&amp;t=KNBP87hwbV9JFDlD-0&amp;scaling=contain&amp;page-id=1%3A1252&amp;starting-point-node-id=14703%3A145027&amp;show-proto-sidebar=1</a></p><p><br></p><p><br></p><p><br></p><p>-----------</p><p><strong>Rashmi Response</strong></p><p><br></p><p>Hi Raveendran, Shrikant,</p><p><br></p><p>Premendra and myself think we can pickup up following Initiatives related user stories for this Sprint from backend perspective:&nbsp;</p><p><br></p><p>ESG-827&nbsp;</p><p>ESG-828&nbsp;</p><p>ESG-832\tpoint 8 to 18 we CANT pickup in this Sprint</p><p>ESG-833</p><p><br></p><p>Excluding : Send Reminder, View questionnaire, and details with respect to questions</p><p><br></p><p>&nbsp;</p><p><br></p><p>We cant pick following because:</p><p><br></p><p>&nbsp;</p><p><br></p><p>JIRA\tWhy NOT picking</p><p>ESG-745\tWe still don't have actual values to calculate progress</p><p>ESG-829\tPartha has marked it as yellow</p><p>ESG-830 questionnaire related, let us have a design in place</p><p>ESG-831\tLooks like this will be ESG page</p><p><br></p><p>-------------</p><p><strong>Rashmi Response to Partha</strong></p><p><br></p><p>Hi Partha,</p><p>Here are some questions for Initiatives related stories from myself and Premendra.</p><p>Kindly clarify</p><p>&nbsp;</p><p>ESG-827</p><p>Published - Please clarify if our understanding is correct :</p><p>status of initiative when user completes all steps and submits - meaning initiative is NOT a draft anymore.</p><p>Does a published initiative by default have status as Ongoing</p><p>&nbsp;</p><p>Add Stakeholder -&gt; is this stakeholder a contact added to initiative?</p><p>*****************************************************</p><p>ESG-828</p><p>&nbsp;</p><p>Unique ID:&nbsp;</p><p>Is this ID generated once the user saves atleast one draft ? or is it on load of the create Initiative page?</p><p>&nbsp;</p><p>User Groups &amp; Internal Contacts&nbsp;&nbsp;</p><p>where can we get this data from?</p><p>&nbsp;</p><p>When user adds a contact, what is the expected behavior?&nbsp;</p><p>should this contact be saved only for the initiative OR should it be saved as part of reference data from where we fetch user groups and contacts?</p><p>&nbsp;</p><p>*****************************************************</p><p>&nbsp;</p><p>ESG-832</p><p>&nbsp;</p><p>Total number of suppliers :&nbsp;</p><p>is this applicable only to supplier initiatives? what will be the values for internal initiatives?</p><p>&nbsp;</p><p>What is the difference btw total stakeholders &amp; list of all the stakeholders who are part of the initiative?</p><p>&nbsp;</p><p>Status of each frequency (Completed or Pending)&nbsp;</p><p>How can we get this info?</p><p><br></p><p>------------------------------------------</p><p><strong>Partha response on Rashmi Queries</strong></p><p><br></p><p>ESG 827: You understanding is correct.&nbsp;</p><p>ESG 828: It should get generated once user clicks on create initiative and land on General Details section, Unique ID should be visible at the general detail page only.&nbsp;</p><p>User group &amp; internal contact will come from ESG forward product, all the users &amp; groups created inside permission management module (Soham's team) should be shown in the contact selection page.&nbsp;</p><p>All the added contacts will get the questions for initiative which they have to respond to.&nbsp;</p><p>ESG 832: For Suppliers initiative it should show total number of suppliers (Not part of current scope), for internal initiative it should total number of stakeholders, which is equal to the total number of contacts who are receiving the questions for the initiative.&nbsp;</p><p>Total stakeholder is number of contacts. All stakeholders should show all the contacts who are part of the internal initiative.&nbsp;</p><p>Status is Completed &amp; pending only. If user submits the responses for the questions then it's completed otherwise it's pending.&nbsp;</p><p><br></p><p>-------------------------</p><p><strong>Raveendran Query to Partha</strong></p><p><br></p><p><span style=\"color: rgb(36, 36, 36);\">ESG-747&nbsp;--&gt;&nbsp;Could&nbsp;you&nbsp;please&nbsp;explain&nbsp;the&nbsp;landing&nbsp;page&nbsp;content&nbsp;for&nbsp;Linked&nbsp;Data&nbsp;Category&nbsp;with&nbsp;an&nbsp;example?&nbsp;</span></p><p><span style=\"color: rgb(36, 36, 36);\">The&nbsp;verbiage&nbsp;is&nbsp;a&nbsp;bit&nbsp;confusing&nbsp;\"Linked&nbsp;Data&nbsp;Category:&nbsp;For&nbsp;Data&nbsp;Category&nbsp;metrics,&nbsp;this&nbsp;column&nbsp;should&nbsp;contain&nbsp;the&nbsp;names&nbsp;of&nbsp;all&nbsp;linked&nbsp;data&nbsp;categories.&nbsp;If&nbsp;there&nbsp;are&nbsp;more&nbsp;than&nbsp;two&nbsp;linked&nbsp;data&nbsp;categories,&nbsp;only&nbsp;two&nbsp;should&nbsp;be&nbsp;displayed,&nbsp;along&nbsp;with&nbsp;a&nbsp;count.&nbsp;Clicking&nbsp;or&nbsp;hovering&nbsp;over&nbsp;the&nbsp;count&nbsp;should&nbsp;reveal&nbsp;all&nbsp;other&nbsp;linked&nbsp;data&nbsp;categories.&nbsp;For&nbsp;Derived&nbsp;Metrics,&nbsp;this&nbsp;field&nbsp;should&nbsp;be&nbsp;blank.\"</span></p><p><br></p><p><span style=\"color: rgb(36, 36, 36);\">ESG-748&nbsp;--&gt;&nbsp;What&nbsp;will&nbsp;be&nbsp;the&nbsp;source&nbsp;of&nbsp;\"Data&nbsp;Category&nbsp;Metric\"&nbsp;on&nbsp;the&nbsp;Create&nbsp;Formula&nbsp;Screen?&nbsp;What&nbsp;will&nbsp;be&nbsp;the&nbsp;selection&nbsp;Criteria?</span></p><p><br></p><p><span style=\"color: rgb(36, 36, 36);\">---------------------------</span></p>","createdAt":{"$date":"2023-09-20T09:27:28.45Z"},"_id":{"$oid":"650abb00557ae2d1a82a52f7"}},{"text":"<p><strong>Architecture Spike - Internal Discussion- By Raveendran</strong></p><p><br></p><p><span class=\"ql-cursor\">﻿</span>ESG-1040 ESG-1058</p><p><br></p><p>ESG-827 to ESG-833</p><p><br></p><p>ESG-747-ESG-752</p><p><br></p><p>API Gateway</p><p><br></p><ol><li>&nbsp;We need to use KrakenD</li></ol><p>&nbsp;</p><p><br></p><p>2. Docker</p>","createdAt":{"$date":"2023-09-20T09:28:32.04Z"},"_id":{"$oid":"650abb40557ae2d1a82a5324"}},{"text":"<p><strong>Materiality - Grooming -</strong> <strong><em>( By Partha Sarkar)</em></strong></p><p><br></p><p><em>Related Stories:-</em></p><p><br></p><p><em>Link for Figma:-</em></p><p><br></p>","createdAt":{"$date":"2023-09-20T09:38:44.975Z"},"_id":{"$oid":"650abda4557ae2d1a82a5381"}},{"text":"<p>Basic questions to be asked to PMG team during Grooming</p><p>What is user journey</p><p>Who are actors in this functionality</p><p><br></p>","createdAt":{"$date":"2023-09-20T09:46:10.032Z"},"_id":{"$oid":"650abf62557ae2d1a82a53b2"}}]},{"text":"<p><strong>Some Rememberable</strong></p><ul><li><span style=\"background-color: rgb(246, 250, 255); color: rgb(20, 28, 48);\">Procedure To Release Quarantine Message </span><a href=\"https://itishelpdesk.zycus.com/support/solutions/articles/11000109509#solutions/11000109509\" rel=\"noopener noreferrer\" target=\"_blank\">Procedure To Release Quarantine Message (zycus.com)</a></li></ul>","_id":{"$oid":"650bfa5e8e4988f779f45457"},"createdAt":{"$date":"2023-09-21T08:10:06.542Z"},"nestedComments":[]},{"text":"<p>Sprint 218 ( Sep 2nd Half- Oct 1st Half)<br><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1808\">https://pdtzycus.atlassian.net/browse/ESG-1808</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1818\">https://pdtzycus.atlassian.net/browse/ESG-1818</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-2261\">https://pdtzycus.atlassian.net/browse/ESG-2261</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-2088\">https://pdtzycus.atlassian.net/browse/ESG-2088</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-2087\">https://pdtzycus.atlassian.net/browse/ESG-2087</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-2084\">https://pdtzycus.atlassian.net/browse/ESG-2084</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1677\">https://pdtzycus.atlassian.net/browse/ESG-1677</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1676\">https://pdtzycus.atlassian.net/browse/ESG-1676</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1675\">https://pdtzycus.atlassian.net/browse/ESG-1675</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1674\">https://pdtzycus.atlassian.net/browse/ESG-1674</a></p><p><a href=\"https://pdtzycus.atlassian.net/browse/ESG-1065\">https://pdtzycus.atlassian.net/browse/ESG-1065</a></p>","_id":{"$oid":"6526559a58ab1c89ea32ea97"},"createdAt":{"$date":"2023-10-11T07:58:18.486Z"},"nestedComments":[]}],"__v":15}
{"_id":{"$oid":"64e8800956375d37eef0f858"},"content":"<p>Create Tweet Application</p>","createdAt":{"$date":"2023-08-25T10:18:49.25Z"},"comments":[{"text":"<p>## Tweet Application: First Phase: Requirements</p><p>Below points done and pushed to repo</p><p>* Create basic application to</p><p>* Add update tweet</p><p>* Add update comment</p><p>* Add update nested comment</p><p>* List all Tweets</p><p>* Add one sort button to sort tweets on createdAt</p><p>* <em>Add one button to move up/down to change order ( data or comment or nested comment will be sorted by order asc, created date asc)</em></p>","_id":{"$oid":"64e8803156375d37eef0f85b"},"createdAt":{"$date":"2023-08-25T10:19:29.035Z"},"nestedComments":[{"text":"Development for First Phase done. PR Merged.","createdAt":{"$date":"2023-08-25T10:44:08.442Z"},"_id":{"$oid":"64e885f856375d37eef0f8d2"}}]},{"text":"<p>## Tweet Application: First Phase: Bug Fix</p><p>* 1 -&gt; All text content saved in tweet, comment, nested comment goes in single line. new line character is not being preserved in UI. However data saved in DB is ok. -- Done</p><p>* 2.1 -&gt; Post create new comment, text not get cleared. --Done</p><p>* 2.2 -&gt; Post create new Nested comment, text not get cleared. -- Done</p><p>* 3 -&gt; increase size of text-area in EditableLabel.jsx to all width of screen or component. Also height to show all text --Done</p><p>* 4 -&gt; updated text of EditableLabel component is not being saved on first click of \"Update\" button -- Unresolved. Moved to TechDebt</p><p>* 5 -&gt; Comments and Nested comments get updated, even if textarea containing empty string. Add checks for empty strings same as in case of save comment and nested-comment -- Done</p><p>* 6 -&gt; Text of EditableLabel should be wrapped in view mode -- Done</p><p>* 7 -&gt; Add one changelog.md file to track what all things done in different iterations -- Done</p><p>* 8 -&gt; Make font of tweet, comment and nested text different. eg, tweet bold and some bigger, comment normal, nested comment smaller and italic -- Done</p><p>* 9 -&gt; set Times New Roman (serif) font family globally in Tweet application -- Done</p>","_id":{"$oid":"64e880f856375d37eef0f866"},"createdAt":{"$date":"2023-08-25T10:22:48.024Z"},"nestedComments":[{"text":"Deployment for First Phase: Bug Fix done. PR Merged.","createdAt":{"$date":"2023-08-25T17:06:16.135Z"},"_id":{"$oid":"64e8df8856375d37eef10095"}}]},{"text":"<p><strong>## Tweet Application: Second Phase: Requirements</strong></p><p>* 1 -&gt; Bug Fixes of First Phase. New Development freeze till all major Bug Fix Done for First Phase. -- Done</p><p>* 2 -&gt; Add buttons to save new Comment, remove onBlur event on text-area for comment -- Done!</p><p>* 3 -&gt; Add one property saveOnBlur(true or false) in EditableLabel.jsx component. If true, then on blur, data will be saved</p><p>* 4 -&gt; Make default sorting order for tweets to descending order, i.e., latest tweet should be displayed first. -- Done</p><p>* 5 -&gt; Add reduxjs-toolkit, refactor code accordingly</p><p>* 6 -&gt; Add private field in tweet</p><p>* 7 -&gt; filter tweet data for private, public or both</p><p>* 8 -&gt; create tags and attach tweets tags</p><p>* 9 -&gt; filter tweet list with given tag, which are present in tweet.</p><p>* 10 -&gt; Add order field in tweet, so that tweets can be sorted as per order.</p><p>* 11 -&gt; Add accordion for tweet. by default, all accordions will be collapsed. Also introduce one control to collapse all, expand all -- Done</p><p>* 12 -&gt; Add one copy link button for every tweet, comment and nestedComment</p><p>* 13 -&gt; increase size of text-area in Create new comment, tweet, nestedComment to all width of screen or component. Also height to show all text</p><p><br></p><p><strong>### New Bugs</strong></p><p>* 1 -&gt; If creating new comment, the text entered in other tweet's new comment text-area -- Done. Now extracted separate CreateComment component</p><p><br></p><p><strong>### Tech-Debt</strong></p><p>- 1 -&gt; updated text of EditableLabel component is not being saved on first click of \"Update\" button -- Seems resolved, once text area replaced with ReactQuill</p>","_id":{"$oid":"64e885b656375d37eef0f8c3"},"createdAt":{"$date":"2023-08-25T10:43:02.994Z"},"nestedComments":[{"text":"<p><em>For \"Add one copy link button for every tweet, comment and nestedComment\", below are actionables</em></p><p><em>- Add router for </em></p>","createdAt":{"$date":"2023-08-27T05:43:45.742Z"},"_id":{"$oid":"64eae291875f91ac9af5b8b1"}}]}],"__v":6}
{"_id":{"$oid":"64e9e9197447a15b18d4f598"},"content":"<p>Organize Life</p>","createdAt":{"$date":"2023-08-26T11:59:21.334Z"},"comments":[{"text":"<p>My Routine: -</p><p>- Sleep till 10:30 PM</p><p>- Post wakeup (Clean room, take coffee, bath, meditation) - allowed time 3 hours</p><p>- Pre office (cook food, eat, clean kitchen, fill water bottle) - allowed time 2 hours</p><p>- Pre office wrap up (office work) - 8 hours</p><p>- Post office wrap up (cook food, eat, clean kitchen, fill water bottle)- allowed time 2 hours</p><p>- Put updates of day in 4 segments (All activities, office updates, tomorrow's probable tasks in home and office) - 1 hour</p><p><br></p><p>Note: - daily updates will put in nested comment.</p>","_id":{"$oid":"64e9eb387447a15b18d4f59b"},"createdAt":{"$date":"2023-08-26T12:08:24.452Z"},"nestedComments":[]},{"text":"<p>My wish: -</p><p>- 31/05, long term</p><p>- Get knowledge about my projects, role &amp; responsibilities</p><p>- Prepare myself for team lead/architect/project manager/product owner role</p><p>- Be ready for my next interview</p>","_id":{"$oid":"64e9f9217447a15b18d4f66e"},"createdAt":{"$date":"2023-08-26T13:07:45.561Z"},"nestedComments":[]},{"text":"<p>Unload bad habits and negativity</p><p>- quit overthinking</p><p>- quit tobacco products</p><p>- quit procrastination, do work promptly</p>","_id":{"$oid":"64e9f9897447a15b18d4f685"},"createdAt":{"$date":"2023-08-26T13:09:29.304Z"},"nestedComments":[]}],"__v":3}
{"_id":{"$oid":"64ec0e2d762ec72c4482d7ac"},"content":"<p>IAP</p>","createdAt":{"$date":"2023-08-28T03:02:05.079Z"},"comments":[{"text":"<p>ReactJS</p>","_id":{"$oid":"64ec0e44762ec72c4482d7af"},"createdAt":{"$date":"2023-08-28T03:02:28.032Z"},"nestedComments":[{"text":"<p>ReactJS KT</p>","createdAt":{"$date":"2023-08-28T03:02:43.7Z"},"_id":{"$oid":"64ec0e53762ec72c4482d7bf"}}]},{"text":"<p>Tech Stack</p><ul><li>Keycloak</li></ul>","_id":{"$oid":"64ec6cc9ac1e0d7907d83746"},"createdAt":{"$date":"2023-08-28T09:45:45.406Z"},"nestedComments":[{"text":"<p><strong>Keycloak</strong></p><p><strong>-----------</strong></p><p><br></p>","createdAt":{"$date":"2023-08-28T09:46:21.35Z"},"_id":{"$oid":"64ec6cedac1e0d7907d8375a"}}]}],"__v":4}
{"_id":{"$oid":"64fa691b439cd72f08cef1c1"},"content":"<p>Life's Aim</p>","createdAt":{"$date":"2023-09-08T00:21:47.92Z"},"comments":[{"text":"<ol><li>Collect 500cr by 31/05/31</li><li>Reduce body weight up to 60 KG</li><li>Teeth cleaning</li><li>मन से उत्पन्न विकार का उपचार&nbsp;</li><li>Become Software Architect</li></ol>","_id":{"$oid":"64fa6991439cd72f08cef1c4"},"createdAt":{"$date":"2023-09-08T00:23:45.292Z"},"nestedComments":[{"text":"<p>1. Collect 500cr by 31/05/31</p><p><br></p>","createdAt":{"$date":"2023-09-10T06:32:20.417Z"},"_id":{"$oid":"64fd62f4c4f37eb6c74a5e13"}},{"text":"<p>2. Reduce body weight up to 60 KG</p><p><br></p>","createdAt":{"$date":"2023-09-10T06:32:45.305Z"},"_id":{"$oid":"64fd630dc4f37eb6c74a5e2d"}},{"text":"<p>3. Teeth cleaning</p><p><br></p>","createdAt":{"$date":"2023-09-10T06:33:08.056Z"},"_id":{"$oid":"64fd6324c4f37eb6c74a5e49"}},{"text":"<p>4. मन से उत्पन्न विकार का उपचार</p><p>श्रीभगवानुवाच |</p><p>असंशयं महाबाहो मनो दुर्निग्रहं चलम् |</p><p>अभ्यासेन तु कौन्तेय वैराग्येण च गृह्यते || 35||</p><p>अपि चेदसि पापेभ्य: सर्वेभ्य: पापकृत्तम: |</p><p>सर्वं ज्ञानप्लवेनैव वृजिनं सन्तरिष्यसि || 36||</p><ol><li>मोबाइल गेम्स खेलने का मन करे तो udemy का कोर्स देखेंगे।&nbsp;</li><li>तम्बाकू उत्पाद अथवा मद्य सेवन का सेवन का मन करे अथवा मन के चिंतित होने पर भी&nbsp;</li><li>आस पास के कामों की लिस्ट बनाएंगे और उसी में से एक काम को करने में मन को मोड देंगे।&nbsp;</li><li>ठंडा पानी पिएंगे।&nbsp;</li></ol>","createdAt":{"$date":"2023-09-10T06:33:34.334Z"},"_id":{"$oid":"64fd633ec4f37eb6c74a5e67"}},{"text":"<p>5. Become Software Architect</p><p>Becoming a Software Architect is a great career goal, and with your 13 years of experience as a senior Java software developer, you are well-positioned to make the transition. Here are some milestones and steps you can consider to achieve your goal:</p><p>1. <strong>**Self-Assessment**</strong>:</p><p>&nbsp;&nbsp;- Reflect on your current skills and knowledge. Identify your strengths and areas that need improvement.</p><p>2. <strong>**Learn about Software Architecture**</strong>:</p><p>&nbsp;&nbsp;- Start by reading books and online resources about software architecture. Some recommended books include \"Software Architecture in Practice\" by Len Bass, Paul Clements, and Rick Kazman, and \"Clean Architecture\" by Robert C. Martin.</p><p>3. <strong>**Formal Education**</strong>:</p><p>&nbsp;&nbsp;- Consider enrolling in formal education programs like a master's degree in software engineering or a related field. This can provide you with a solid foundation in architectural principles.</p><p>4. <strong>**Certifications**</strong>:</p><p>&nbsp;&nbsp;- Look into relevant certifications, such as AWS Certified Solutions Architect or Microsoft Certified: Azure Solutions Architect. These certifications can validate your architectural knowledge.</p><p>5. <strong>**Hands-on Experience**</strong>:</p><p>&nbsp;&nbsp;- Seek opportunities to work on projects with a focus on architecture. Volunteer for architecture-related tasks in your current role or take on side projects that allow you to design and implement architectural solutions.</p><p>6. <strong>**Mentorship**</strong>:</p><p>&nbsp;&nbsp;- Find a mentor who is an experienced software architect. They can provide guidance, share their experiences, and help you navigate the path to becoming an architect.</p><p>7. <strong>**Soft Skills Development**</strong>:</p><p>&nbsp;&nbsp;- Enhance your soft skills, including communication, leadership, and problem-solving. Architects often need to work closely with teams and stakeholders to make critical decisions.</p><p>8. <strong>**Stay Current**</strong>:</p><p>&nbsp;&nbsp;- The technology landscape is always evolving. Stay up-to-date with the latest trends and emerging technologies in software architecture.</p><p>9. <strong>**Networking**</strong>:</p><p>&nbsp;&nbsp;- Attend conferences, meetups, and online forums related to software architecture. Networking can help you learn from others and open up potential job opportunities.</p><p>10. <strong>**Build a Portfolio**</strong>:</p><p>&nbsp;&nbsp;- Document your architectural work and create a portfolio. This can be a valuable tool when applying for architect positions, as it demonstrates your practical experience.</p><p>11. <strong>**Apply for Architect Roles**</strong>:</p><p>&nbsp;&nbsp;- Start applying for software architect positions when you feel confident in your skills and experience. Be prepared for interviews that may include technical assessments and architectural discussions.</p><p>12. <strong>**Continuous Improvement**</strong>:</p><p>&nbsp;&nbsp;- Software architecture is a field that requires continuous learning and adaptation. Keep refining your skills and seeking feedback to become a better architect over time.</p><p>13. <strong>**Contribute to Open Source**</strong>:</p><p>&nbsp;&nbsp;- Participate in open-source projects related to architecture. This not only enhances your skills but also showcases your commitment to the field.</p><p>14. <strong>**Publish and Share**</strong>:</p><p>&nbsp;&nbsp;- Write articles, give presentations, or contribute to architecture-related blogs. Sharing your knowledge can establish you as an expert in the field.</p><p>15. <strong>**Seek Feedback**</strong>:</p><p>&nbsp;&nbsp;- Always seek feedback from peers, mentors, and colleagues. Constructive feedback is essential for growth.</p><p>16. <strong>**Leadership Roles**</strong>:</p><p>&nbsp;&nbsp;- As you gain more experience, consider taking on leadership roles within your organization, such as lead architect or chief architect.</p><p>Remember that the path to becoming a software architect may vary from person to person. It's important to set clear goals, stay dedicated, and keep learning throughout your journey. With your experience and determination, you can certainly achieve your goal of becoming a Software Architect.</p>","createdAt":{"$date":"2023-09-18T14:55:12.859Z"},"_id":{"$oid":"650864d05178a985f3995444"}}]}],"__v":6}
{"_id":{"$oid":"64fe849415ab0ee686d4356c"},"content":"<p>Create Task management application</p>","createdAt":{"$date":"2023-09-11T03:08:04.2Z"},"comments":[{"text":"<p>Create one application for below</p><ol><li>Add update delete TaskCategory</li><li>Add, update delete Task</li><li>Add update task history for days</li><li>Manage state for task ( Open, on-hold, in-progress, done)</li></ol><p><br></p>","_id":{"$oid":"64fe84bc15ab0ee686d43588"},"createdAt":{"$date":"2023-09-11T03:08:44.581Z"},"nestedComments":[]},{"text":"<p>Actionables</p><ol><li>CRUD for Task - Done</li><li>Update Task status</li><li>Link other tasks - Done</li><li>Create Subtasks</li></ol>","_id":{"$oid":"6525582044c310cb9aa3a5b0"},"createdAt":{"$date":"2023-10-10T13:56:48.666Z"},"nestedComments":[]},{"text":"<p>Thought process to plan a big goal/task which can be achieved in next 10 years (According to ChatGPT)</p><p>Planning and achieving a big goal that spans the next 10 years requires careful and strategic planning. Here are steps to help you plan and work towards your long-term goal:</p><p>1.<strong> **Clarify Your Goal:**</strong> Begin by defining your long-term goal clearly. What exactly do you want to achieve in the next 10 years? Make sure your goal is specific, measurable, achievable, relevant, and time-bound (SMART).</p><p>2.<strong> **Break It Down:**</strong> Divide your 10-year goal into smaller, manageable milestones. Create a timeline or roadmap that outlines what you need to accomplish at different points along the way. This will make the goal less overwhelming and more achievable.</p><p>3. <strong>**Set Short-Term Goals:**</strong> Alongside your milestones, set shorter-term goals for the next 1-3 years. These will serve as stepping stones towards your 10-year goal. Again, make these goals SMART.</p><p>4. <strong>**Plan and Prioritize:**</strong> Create a detailed plan for each milestone and short-term goal. Identify the specific tasks, resources, and skills needed to achieve them. Prioritize your actions based on their importance and impact.</p><p>5. <strong>**Allocate Resources:**</strong> Determine what resources you'll need (e.g., time, money, education) and how you will acquire or allocate them to support your goal.</p><p>6. <strong>**Continuous Learning:**</strong> Be prepared to learn and adapt along the way. Your long-term goal may require acquiring new knowledge and skills. Consider formal education, training, or self-study as necessary.</p><p>7. <strong>**Seek Support:**</strong> Share your goal with friends, family, or mentors who can provide encouragement, advice, and accountability. Consider joining relevant communities or networks to connect with like-minded individuals.</p><p>8. <strong>**Track Progress:**</strong> Regularly monitor your progress toward your milestones and short-term goals. Adjust your plan as needed and celebrate your achievements along the way.</p><p>9. <strong>**Stay Motivated:**</strong> Maintaining motivation over a 10-year period can be challenging. Find ways to keep yourself inspired, such as revisiting your reasons for pursuing the goal, visualizing success, or creating a vision board.</p><p>10. <strong>**Adapt to Changes:**</strong> Life is unpredictable, and circumstances may change over a decade. Be flexible and willing to adjust your plan if necessary, while keeping your long-term goal in mind.</p><p>11. <strong>**Review and Reflect:**</strong> Periodically review your progress and reflect on what's working and what isn't. Adjust your strategy and goals accordingly.</p><p>12. <strong>**Persistence:**</strong> Long-term goals often require persistence and resilience. Expect setbacks and challenges, but view them as opportunities to learn and grow.</p><p>13. <strong>**Celebrate Milestones:**</strong> When you reach significant milestones along the way, take time to celebrate your achievements. Recognize the progress you've made.</p><p>Remember that achieving a big goal over 10 years is a journey, not a sprint. Stay committed and focused, and with dedication and planning, you can make substantial progress towards your goal over the long term.</p>","_id":{"$oid":"6526141ddbc796e3cbfd5dd6"},"createdAt":{"$date":"2023-10-11T03:18:53.984Z"},"nestedComments":[]}],"__v":3}
{"_id":{"$oid":"64ffbe142b6ed1515a4a7d5b"},"content":"<p>New game for life</p>","createdAt":{"$date":"2023-09-12T01:25:40.434Z"},"comments":[{"text":"<ol><li>रात में ११ बजे तक सो जायेंगे और सुबह ५ बजे तक उठ जायेंगे&nbsp;।&nbsp;</li><li>दैनिक क्रिया करते हुए लक्ष्य प्राप्ति पर ध्यान लगाएंगे।&nbsp;&nbsp;</li><li>इन्द्रिय भोग और इन्द्रिय आसक्ति से निरंतर अभ्यास और वैराग्य के द्वारा ध्यान हटाएंगे।&nbsp;</li></ol>","_id":{"$oid":"64ffbe242b6ed1515a4a7d5e"},"createdAt":{"$date":"2023-09-12T01:25:56.695Z"},"nestedComments":[]},{"text":"<p>What are my priorities?</p><ol><li>Sharir<ol><li>Weight 60-65 KG</li><li>Teeth clean</li><li>Stress free mind</li></ol></li><li>Aajivika<ol><li>Earn at least 1.3L for family.</li><li>Collate all learnings.</li></ol></li><li>Parivar<ol><li>Take some time to support family.</li></ol></li><li>Bhawishya<ol><li>Gradually increase earnings to 31/05</li><li>Savings at least 5k in month in SIP</li><li>Work on resume, interview so that I could crack Technical Architect interview and later work effectively in same role.</li><li>Make buffer of 5L.</li></ol></li></ol>","_id":{"$oid":"652253f6bc6cabd0c9ddea1b"},"createdAt":{"$date":"2023-10-08T07:02:14.232Z"},"nestedComments":[]}],"__v":2}
{"_id":{"$oid":"6515ac794496d557e57aedba"},"content":"<p>Draggable Application</p>","createdAt":{"$date":"2023-09-28T16:40:25.004Z"},"comments":[{"text":"<p>Phase 1 development</p><p>-------------</p><ol><li>Create one react component to show given strings in label in card</li><li>Create other components having 2 horizontal divs. One div containing StringList component. Another div is empty initially. on drag any card from StringList to other div it should be added there.</li></ol><p><br></p>","_id":{"$oid":"6515acf24496d557e57aedbd"},"createdAt":{"$date":"2023-09-28T16:42:26.568Z"},"nestedComments":[]}],"__v":1}
{"_id":{"$oid":"6525534144c310cb9aa3a3bb"},"content":"<p>Login Flow</p>","createdAt":{"$date":"2023-10-10T13:36:01.762Z"},"comments":[{"text":"<ol><li>Create login page</li><li>Create login API</li><li>integrate basic login API to login page</li><li>Create Sign up page</li><li>On sign up get below details<ol><li>Name</li><li>Email id</li><li>user name</li><li>password</li><li>Mobile number</li></ol></li><li>Once sign up, create api for sign up and store data in db</li><li>On login, if valid credentials, send valid response</li><li>Later put JWT in picture. On successful login, send JWT token in response.</li><li>In other APIs, write one wrapper filter to check if valid session on basis of JWT token. if not redirect user to login sign up page</li></ol>","_id":{"$oid":"6525548a44c310cb9aa3a3be"},"createdAt":{"$date":"2023-10-10T13:41:30.143Z"},"nestedComments":[]},{"text":"<p>As per ChatGPT<br><br>Adding basic login authentication to a React project involves several steps. Here's a high-level overview of the process:</p><p>1. <strong>**Create a Backend for Authentication**:</strong><br>&nbsp; - You need a backend server to handle user authentication. Popular choices include Express.js for Node.js or Django for Python. Implement endpoints for user registration, login, and logout.</p><p>2. <strong>**User Database**:</strong><br>&nbsp; - Set up a database to store user information, including their usernames and hashed passwords. MongoDB, PostgreSQL, or MySQL are commonly used databases for this purpose.</p><p>3. <strong>**User Registration**:</strong><br>&nbsp; - Create a registration form in your React app to collect user details, such as username and password. Send a POST request to your backend to create a new user account.</p><p>4. <strong>**User Login**:</strong><br>&nbsp; - Implement a login form where users can enter their credentials (username and password). Send a POST request to your backend to verify the user's credentials.</p><p>5. <strong>**Token-Based Authentication**:</strong><br>&nbsp; - Use token-based authentication (e.g., JSON Web Tokens or JWT) to securely authenticate users. When a user successfully logs in, your backend should generate a token and send it back to the client.</p><p>6. <strong>**Store Tokens Securely**:</strong><br>&nbsp; - Store the token securely on the client-side. Common methods include using cookies, local storage, or session storage. Make sure to keep it safe from cross-site scripting (XSS) attacks.</p><p>7. <strong>**Protected Routes**:</strong><br>&nbsp; - Implement protected routes in your React app. Create a higher-order component (HOC) or use React Router to ensure that certain routes are only accessible to authenticated users. Redirect unauthenticated users to the login page.</p><p>8. <strong>**Logout**:</strong><br>&nbsp; - Create a logout feature that allows users to log out of their accounts. This typically involves destroying the token stored on the client and revoking it on the server.</p><p>9. <strong>**Error Handling**:</strong><br>&nbsp; - Implement error handling for authentication-related requests. Provide meaningful error messages to users when they enter incorrect credentials or encounter other issues.</p><p>10. <strong>**Session Management** (optional):</strong><br>&nbsp; &nbsp;- If needed, you can implement session management to handle user sessions and expiration of tokens.</p><p>11. <strong>**Password Reset** (optional):</strong><br>&nbsp; &nbsp;- If desired, create a \"forgot password\" feature that allows users to reset their passwords through email verification.</p><p>12. <strong>**Security Considerations**:</strong><br>&nbsp; &nbsp;- Ensure that your authentication system is secure against common vulnerabilities, such as SQL injection, cross-site scripting (XSS), and brute force attacks. Use libraries and best practices for password hashing and validation.</p><p>13. <strong>**Testing**:</strong><br>&nbsp; &nbsp;- Thoroughly test your authentication system to identify and fix any security vulnerabilities or issues.</p><p>14. <strong>**Documentation**:</strong><br>&nbsp; &nbsp;- Document your authentication system, especially if you're working on a team or open-source project.</p><p>Remember that user authentication is a critical aspect of your application's security, and it's essential to follow best practices to protect user data and privacy. Additionally, consider using established authentication libraries and frameworks to simplify the implementation and ensure security.</p>","_id":{"$oid":"6525598344c310cb9aa3a5dc"},"createdAt":{"$date":"2023-10-10T14:02:43.059Z"},"nestedComments":[]}],"__v":2}
{"_id":{"$oid":"654239247ee0ea2bc6b413c5"},"content":"<p>JAVA- Knowledge hub</p>","createdAt":{"$date":"2023-11-01T11:40:20.505Z"},"comments":[{"text":"<p><strong>Java Versions and Features</strong></p><p>On this page, we will frequently list the <strong>major feature changes in the latest Java release</strong>, sequentially. Though we have tried to cover as much information as possible, if you know something we have missed below, please let me know, and we will add that information.</p><h2><a href=\"https://howtodoinjava.com/java/java-21-new-features/\"><strong>Java 21 Features</strong></a><strong> [LTS]</strong></h2><p>Java 21 is set to be released on&nbsp;<i>19-Sep-2023</i>,&nbsp;as the next long-term support (LTS) release of Oracle’s standard Java implementation. Java 21 will have the following 15 features.</p><ol><li><a href=\"https://howtodoinjava.com/java/java-string-templates/\">String Templates</a> (Preview) [<a href=\"https://openjdk.org/jeps/430\">JEP-430</a>]</li><li><a href=\"https://howtodoinjava.com/java/sequenced-collections/\">Sequenced Collections</a> [<a href=\"https://openjdk.org/jeps/431\">JEP-431</a>]</li><li>Generational ZGC [<a href=\"https://openjdk.org/jeps/439\">JEP-439</a>]</li><li><a href=\"https://howtodoinjava.com/java/record-patterns-and-pattern-matching/\">Record Patterns</a> [<a href=\"https://openjdk.org/jeps/440\">JEP-440</a>]</li><li>Pattern Matching for switch [<a href=\"https://openjdk.org/jeps/441\">JEP-441</a>]</li><li>Foreign Function &amp; Memory API (Third Preview) [<a href=\"https://openjdk.org/jeps/442\">JEP-442</a>]</li><li>Unnamed Patterns and Variables (Preview) [<a href=\"https://openjdk.org/jeps/443\">JEP-443</a>]</li><li><a href=\"https://howtodoinjava.com/java/multi-threading/virtual-threads/\">Virtual Threads</a> [<a href=\"https://openjdk.org/jeps/444\">JEP-444</a>]</li><li><a href=\"https://howtodoinjava.com/java/java-unnamed-class-instance-method/\">Unnamed Classes and Instance Main Methods</a> (Preview) [<a href=\"https://openjdk.org/jeps/445\">JEP-445</a>]</li><li><a href=\"https://howtodoinjava.com/java/multi-threading/java-scoped-values/\">Scoped Values</a> (Preview) [<a href=\"https://openjdk.org/jeps/446\">JEP-446</a>]</li><li>Vector API (Sixth Incubator) [<a href=\"https://openjdk.org/jeps/448\">JEP-448</a>]</li><li>Deprecate the Windows 32-bit x86 Port for Removal [<a href=\"https://openjdk.org/jeps/449\">JEP-449</a>]</li><li>Prepare to Disallow the Dynamic Loading of Agents [<a href=\"https://openjdk.org/jeps/451\">JEP-451</a>]</li><li>Key Encapsulation Mechanism API [<a href=\"https://openjdk.org/jeps/452\">JEP-452</a>]</li><li><a href=\"https://howtodoinjava.com/java/multi-threading/structured-concurrency/\">Structured Concurrency</a> (Preview) [<a href=\"https://openjdk.org/jeps/453\">JEP-453</a>]</li></ol><h2><strong>Java 18 Features</strong></h2><p><strong>Java 18</strong> GA was released on <i>22&nbsp;March 2022</i>. It has&nbsp;nine new developer features, including a simple web server and another preview of pattern matching for&nbsp;switch.</p><p>The below-listed 14 JEPs are part of Java 18.</p><ol><li><a href=\"https://openjdk.org/jeps/400\">JEP-400</a>: UTF-8 by Default</li><li><a href=\"https://openjdk.org/jeps/408\">JEP-408</a>: Simple Web Server</li><li><a href=\"https://openjdk.org/jeps/408\">JEP-413</a>: Code Snippets in Java API Documentation</li><li><a href=\"https://openjdk.org/jeps/416\">JEP-416</a>: Reimplement Core Reflection with Method Handles</li><li><a href=\"https://openjdk.org/jeps/417\">JEP-417</a>: Vector API (Third Incubator)</li><li><a href=\"https://openjdk.org/jeps/418\">JEP-418</a>: Internet-Address Resolution SPI</li><li><a href=\"https://openjdk.org/jeps/419\">JEP-419</a>: Foreign Function &amp; Memory API (Second Incubator)</li><li><a href=\"https://openjdk.org/jeps/420\">JEP-420</a>: Pattern Matching for <i>switch</i> (Second Preview)</li><li><a href=\"https://openjdk.org/jeps/421\">JEP-421</a>: Deprecate Finalization for Removal</li></ol><h2><a href=\"https://howtodoinjava.com/java/new-features/\"><strong>Java 17 Features (LTS)</strong></a></h2><p><strong>Java 17</strong>&nbsp;was released on September 14, 2021. Java 17 is an LTS (<i><strong>Long Term Support</strong></i>) release, like Java 11 and Java 8. <a href=\"https://www.infoq.com/news/2021/09/spring-6-spring-boot-3-overhaul/\">Spring 6 and Spring boot 3</a>&nbsp;will have first-class support for Java 17. So it is a good idea to plan for upgrading to Java 17.</p><p>The below-listed 14 JEPs are part of Java 17.</p><ol><li>(<a href=\"https://openjdk.org/jeps/306\">JEP-306</a>) Restore Always-Strict Floating-Point Semantics</li><li>(<a href=\"https://openjdk.org/jeps/356\">JEP-356</a>) Enhanced Pseudo-Random Number Generators</li><li>(<a href=\"https://openjdk.org/jeps/382\">JEP-382</a>) New macOS Rendering Pipeline</li><li>(<a href=\"https://openjdk.org/jeps/391\">JEP-391</a>) macOS/AArch64 Port</li><li>(<a href=\"https://openjdk.org/jeps/398\">JEP-398</a>) Deprecate the Applet API for Removal</li><li>(<a href=\"https://openjdk.org/jeps/403\">JEP-403</a>) Strongly Encapsulate JDK Internals</li><li>(<a href=\"https://openjdk.org/jeps/406\">JEP-406</a>) Pattern Matching for switch (Preview)</li><li>(<a href=\"https://openjdk.org/jeps/407\">JEP-407</a>) Remove RMI Activation</li><li>(<a href=\"https://openjdk.org/jeps/409\">JEP-409</a>) Sealed Classes</li><li>(<a href=\"https://openjdk.org/jeps/410\">JEP-410</a>) Remove the Experimental AOT and JIT Compiler</li><li>(<a href=\"https://openjdk.org/jeps/411\">JEP-411</a>) Deprecate the Security Manager for Removal</li><li>(<a href=\"https://openjdk.org/jeps/412\">JEP-412</a>) Foreign Function &amp; Memory API (Incubator)</li><li>(<a href=\"https://openjdk.org/jeps/414\">JEP-414</a>) Vector API (Second Incubator)</li><li>(<a href=\"https://openjdk.org/jeps/415\">JEP-415</a>) Context-Specific Deserialization Filters</li></ol><h2><strong>Java 16 Features</strong></h2><p><strong>Java 16</strong> was released on 16 March 20121. It was largely a maintenance release, except it made the <i>Java Records</i> and <i>Pattern matching</i> the standard features of the Java language.</p><ol><li>JEP 338: Vector API (Incubator)</li><li>JEP 347: Enable C++14 Language Features</li><li>JEP 357: Migrate from Mercurial to Git</li><li>JEP 369: Migrate to GitHub</li><li>JEP 376: ZGC: Concurrent Thread-Stack Processing</li><li>JEP 380: Unix-Domain Socket Channels</li><li>JEP 386: Alpine Linux Port</li><li>JEP 387: Elastic Metaspace</li><li>JEP 388: Windows/AArch64 Port</li><li>JEP 389: Foreign Linker API (Incubator)</li><li>JEP 390: Warnings for Value-Based Classes</li><li>JEP 392: Packaging Tool</li><li>JEP 393: Foreign-Memory Access API (Third Incubator)</li><li>JEP 394: Pattern Matching for <i>instanceof</i></li><li>JEP 395: Records</li><li>JEP 396: Strongly Encapsulate JDK Internals by Default</li><li>JEP 397: Sealed Classes (Second Preview)</li></ol><h2><a href=\"https://howtodoinjava.com/java15/java-15-new-features/\"><strong>Java 15 Features</strong></a></h2><p>Java 15 was released on 15th Sep’2020. It continues to support various preview features in previous JDK releases; and has also introduced some new features.</p><ol><li><a href=\"https://howtodoinjava.com/java15/sealed-classes-interfaces/\">Sealed Classes and Interfaces</a> (Preview) (JEP 360)</li><li><a href=\"https://howtodoinjava.com/java15/java-eddsa-example/\">EdDSA Algorithm</a> (JEP 339)</li><li>Hidden Classes (JEP 371)</li><li><a href=\"https://howtodoinjava.com/java/basics/pattern-matching-instanceof/\">Pattern Matching for <i>instanceof</i></a> (Second Preview) (JEP 375)</li><li>Removed Nashorn JavaScript Engine (JEP 372)</li><li>Reimplement the Legacy DatagramSocket API (JEP 373)</li><li>Records (Second Preview) (JEP 384)</li><li>Text Blocks become a standard feature. (JEP 378)</li></ol><h2><a href=\"https://howtodoinjava.com/java14/java14-new-features/\"><strong>Java 14 Features</strong></a></h2><p><a href=\"https://howtodoinjava.com/java14/java14-new-features/\">Java 14</a> (released on March 17, 2020) is the latest version available for JDK. Let’s see the new features and improvements, it brings for developers and architects.</p><ol><li><a href=\"https://howtodoinjava.com/java/basics/pattern-matching-instanceof/\">JEP 305 – Pattern Matching for instanceof (Preview)</a></li><li><a href=\"https://howtodoinjava.com/java14/java-text-blocks/\">JEP 368 – Text Blocks (Second Preview)</a></li><li><a href=\"https://howtodoinjava.com/java14/helpful-nullpointerexception/\">JEP 358 – Helpful NullPointerExceptions</a></li><li><a href=\"https://howtodoinjava.com/java/java-record-type/\">JEP 359 – Records (Preview)</a></li><li><a href=\"https://howtodoinjava.com/java14/switch-expressions/\">JEP 361 – Switch Expressions (Standard)</a></li><li>JEP 343 – Packaging Tool (Incubator)</li><li>JEP 345 – NUMA-Aware Memory Allocation for G1</li><li>JEP 349 – JFR Event Streaming</li><li>JEP 352 – Non-Volatile Mapped Byte Buffers</li><li>JEP 363 – Remove the Concurrent Mark Sweep (CMS) Garbage Collector</li><li>JEP 367 – Remove the Pack200 Tools and API</li><li>JEP 370 – Foreign-Memory Access API (Incubator)</li></ol><h2><strong>Java 13 Features</strong></h2><p>Java 13 (released on September 17, 2019) had fewer developer-specific features. Let’s see the new features and improvements, it brought for developers and architects.</p><ol><li>JEP 355 – Text Blocks (Preview)</li><li>JEP 354 – Switch Expressions Enhancements (Preview)</li><li>JEP 353 – Reimplement the Legacy Socket API</li><li>JEP 350 – Dynamic CDS Archive</li><li>JEP 351 – ZGC: Uncommit Unused Memory</li><li><i>FileSystems.newFileSystem()</i> Method</li><li>DOM and SAX Factories with Namespace Support</li></ol><h2><a href=\"https://howtodoinjava.com/java12/new-features-enhancements/\"><strong>Java 12 Features</strong></a></h2><p><a href=\"https://howtodoinjava.com/java12/new-features-enhancements/\">Java 12</a> was released on March 19, 2019. Let’s see the new features and improvements, it brings for developers and architects.</p><ol><li>Collectors.teeing() in Stream API</li><li>String API Changes</li><li><i>Files.mismatch(Path, Path)</i></li><li>Compact Number Formatting</li><li>Support for Unicode 11</li><li>Switch Expressions (Preview)</li></ol><h2><a href=\"https://howtodoinjava.com/java11/features-enhancements/\"><strong>Java 11 Features (LTS)</strong></a></h2><p><a href=\"https://howtodoinjava.com/java11/features-enhancements/\">Java 11</a> (released on September 2018) includes many important and useful updates. Let’s see the new features and improvements, it brings for developers and architects.</p><ol><li>HTTP Client API</li><li>Launch Single-File Programs Without Compilation</li><li>String API Changes</li><li>Collection.toArray(IntFunction)</li><li>Files.readString() and Files.writeString()</li><li>Optional.isEmpty()</li></ol><h2><a href=\"https://howtodoinjava.com/java10/java10-features/\"><strong>Java 10 Features</strong></a></h2><p>After Java 9 release, Java 10 came very quickly. Unlike its previous release, Java 10 does not have that many exciting features, still, it has a <a href=\"https://howtodoinjava.com/java10/java10-features/\">few important updates</a> which will change the way you code, and other future Java versions.</p><ol><li><a href=\"https://howtodoinjava.com/java10/var-local-variable-type-inference/\">JEP 286: Local Variable Type Inference</a></li><li>JEP 322: Time-Based Release Versioning</li><li>JEP 304: Garbage-Collector Interface</li><li>JEP 307: Parallel Full GC for G1</li><li>JEP 316: Heap Allocation on Alternative Memory Devices</li><li>JEP 296: Consolidate the JDK Forest into a Single Repository</li><li>JEP 310: Application Class-Data Sharing</li><li>JEP 314: Additional Unicode Language-Tag Extensions</li><li>JEP 319: Root Certificates</li><li>JEP 317: Experimental Java-Based JIT Compiler</li><li>JEP 312: Thread-Local Handshakes</li><li>JEP 313: Remove the Native-Header Generation Tool</li><li>New Added APIs and Options</li><li>Removed APIs and Options</li></ol><h2><a href=\"https://howtodoinjava.com/java9/java9-new-features-enhancements/\"><strong>Java 9 Features</strong></a></h2><p>Java 9 was made available on September, 2017. The biggest change is the modularization i.e. Java modules.</p><p>Some important features/<a href=\"https://howtodoinjava.com/java9/java9-new-features-enhancements/\">changes in Java 9</a> are:</p><ol><li><a href=\"https://howtodoinjava.com/java9/java-9-modules-tutorial/\">Java platform module system</a></li><li><a href=\"https://howtodoinjava.com/java9/java9-private-interface-methods/\">Interface Private Methods</a></li><li>HTTP 2 Client</li><li>JShell – REPL Tool</li><li>Platform and JVM Logging</li><li>Process API Updates</li><li>Collection API Updates</li><li><a href=\"https://howtodoinjava.com/java9/stream-api-improvements/\">Improvements in Stream API</a></li><li>Multi-Release JAR Files</li><li>@Deprecated Tag Changes</li><li>Stack Walking</li><li>Java Docs Updates</li><li>Miscellaneous Other Features</li></ol><p>Please see the updated release info <a href=\"https://openjdk.org/projects/jdk9/\">here</a>.</p><h2><a href=\"https://howtodoinjava.com/java-8-tutorial/\"><strong>Java 8 Features</strong></a></h2><p><strong>Release Date</strong> : March 18, 2014</p><p>Code name culture is dropped. Included features were:</p><ol><li><a href=\"https://howtodoinjava.com/java8/lambda-expressions/\">Lambda expression</a> support in APIs</li><li><a href=\"https://howtodoinjava.com/java/stream/java-streams-by-examples/\">Stream API</a></li><li>Functional interface and default methods</li><li>Optionals</li><li>Nashorn – JavaScript runtime which allows developers to embed JavaScript code within applications</li><li>Annotation on Java Types</li><li><a href=\"https://howtodoinjava.com/java8/java-8-exact-airthmetic-operations-supported-in-math-class/\">Unsigned Integer Arithmetic</a></li><li>Repeating annotations</li><li><a href=\"https://howtodoinjava.com/java8/date-and-time-api-changes-in-java-8-lambda/\">New Date and Time API</a></li><li>Statically-linked JNI libraries</li><li>Launch JavaFX applications from jar files</li><li>Remove the permanent generation from GC</li></ol><h2><strong>Java SE 7 Features</strong></h2><p><strong>Release Date</strong> : July 28, 2011</p><p>This release was called “Dolphin”. Included features were:</p><ol><li>JVM support for dynamic languages</li><li>Compressed 64-bit pointers</li><li><a href=\"https://howtodoinjava.com/java/flow-control/switch-statement-in-java/\">Strings in switch</a></li><li><a href=\"https://howtodoinjava.com/java/try-with-resources/\">Automatic resource management in try-statement</a></li><li><a href=\"https://howtodoinjava.com/java/dimond-operator/\">The diamond operator</a></li><li>Simplified <i>varargs</i> method declaration</li><li>Binary integer literals</li><li><a href=\"https://howtodoinjava.com/java/underscores_formatted_literal/\">Underscores in numeric literals</a></li><li>Improved exception handling</li><li>ForkJoin Framework</li><li>NIO 2.0 has support for multiple file systems, file metadata and symbolic links</li><li><a href=\"https://howtodoinjava.com/java8/java-8-watchservice-api-tutorial/\">WatchService</a></li><li>Timsort is used to sort collections and arrays of objects instead of merge sort</li><li>APIs for the graphics features</li><li>Support for new network protocols, including SCTP and Sockets Direct Protocol</li></ol><h2><strong>Java SE 6 Features</strong></h2><p><strong>Release Date</strong> : December 11, 2006</p><p>This release was called “Mustang”. Sun dropped the “.0” from the version number and the version became Java SE 6. Included features were:</p><ol><li>Scripting Language Support</li><li>Performance improvements</li><li>JAX-WS</li><li>JDBC 4.0</li><li>Java Compiler API</li><li>JAXB 2.0 and StAX parser</li><li>Pluggable annotations</li><li>New GC algorithms</li></ol><h2><strong>J2SE 5 Features</strong></h2><p><strong>Release Date</strong> : September 30, 2004</p><p>This release was called “Tiger”. Most of the features, which are asked in java interviews, were added in this release.</p><p>The version was also called 5.0 rather than 1.5. Included features are listed down below:</p><ol><li><a href=\"https://howtodoinjava.com/java/generics/complete-java-generics-tutorial/\">Generics</a></li><li><a href=\"https://howtodoinjava.com/java/complete-java-annotations-tutorial/\">Annotations</a></li><li>Autoboxing/unboxing</li><li><a href=\"https://howtodoinjava.com/java/enum/enum-tutorial/\">Enumerations</a></li><li>Varargs</li><li><a href=\"https://howtodoinjava.com/java/flow-control/enhanced-for-each-loop-in-java/\">Enhanced for each loop</a></li><li><a href=\"https://howtodoinjava.com/java/basics/static-import-declarations-in-java/\">Static imports</a></li><li>New <a href=\"https://howtodoinjava.com/java/multi-threading/executor-service-example/\">concurrency utilities</a> in java.util.concurrent</li><li>Scanner class for parsing data from various input streams and buffers.</li></ol><h2><strong>J2SE 1.4 Features</strong></h2><p><strong>Release Date</strong> : February 6, 2002</p><p>This release was called “Merlin”. Included features were:</p><ol><li><a href=\"https://howtodoinjava.com/java/keywords/java-assert/\">assert</a> keyword</li><li><a href=\"https://howtodoinjava.com/java-regular-expression-tutorials/\">Regular expressions</a></li><li>Exception chaining</li><li>Internet Protocol version 6 (IPv6) support</li><li><a href=\"https://howtodoinjava.com/series/java-io/\">New I/O; NIO</a></li><li>Logging API</li><li>Image I/O API</li><li>Integrated XML parser and XSLT processor (JAXP)</li><li>Integrated security and cryptography extensions (JCE, JSSE, JAAS)</li><li>Java Web Start</li><li>Preferences API (java.util.prefs)</li></ol><h2><strong>J2SE 1.3 Features</strong></h2><p><strong>Release Date</strong> : May 8, 2000</p><p>This release was called “Kestrel”. Included features were:</p><ol><li>HotSpot JVM</li><li>Java Naming and Directory Interface (JNDI)</li><li>Java Platform Debugger Architecture (JPDA)</li><li>JavaSound</li><li>Synthetic proxy classes</li></ol><h2><strong>J2SE 1.2 Features</strong></h2><p><strong>Release Date</strong> : December 8, 1998</p><p>This release was called “Playground”. This was a major release in terms of the number of classes added (almost tripled the size). “J2SE” term was introduced to distinguish the code platform from J2EE and J2ME. Included features were:</p><ol><li>strictfp keyword</li><li>Swing graphical API</li><li>Sun’s JVM was equipped with a JIT compiler for the first time</li><li>Java plug-in</li><li><a href=\"https://howtodoinjava.com/interview-questions/useful-java-collection-interview-questions/\">Collections framework</a></li></ol><h2><strong>JDK 1 Features</strong></h2><p><strong>Release Date</strong> : January 23, 1996</p><p>This was the <a href=\"http://web.archive.org/web/20080205101616/http://www.sun.com/smi/Press/sunflash/1996-01/sunflash.960123.10561.xml\">initial release</a> and was originally called <strong>Oak</strong>. This had very unstable APIs and one java web browser named <strong>WebRunner</strong>.</p><p>The first stable version, JDK 1.0.2, was called Java 1.</p><p>On February 19, 1997, JDK 1.1 was released having a list of big features such as:</p><ol><li>AWT event model</li><li>Inner classes</li><li>JavaBeans</li><li>JDBC</li><li>RMI</li><li><a href=\"https://howtodoinjava.com/java/real-usage-examples-of-reflection-in-java/\">Reflection</a> supported Introspection only, no modification at runtime was possible.</li><li>JIT (Just In Time) compiler for Windows</li></ol><p>Again, feel free to suggest any <strong>java feature in any java version</strong> which I missed in the above lists.</p><p>Happy Learning !!</p>","_id":{"$oid":"655af602400374b5d0aab768"},"createdAt":{"$date":"2023-11-20T06:00:34.496Z"},"nestedComments":[]}],"__v":1}
{"_id":{"$oid":"6542395e7ee0ea2bc6b413c7"},"content":"<p>ReactJS- Knowledge hub</p>","createdAt":{"$date":"2023-11-01T11:41:18.558Z"},"comments":[],"__v":0}
{"_id":{"$oid":"654d9e12f69e3fa534571e56"},"content":"<p><strong>Important Links</strong></p>","createdAt":{"$date":"2023-11-10T03:05:54.162Z"},"comments":[{"text":"<ol><li>Agile Methodology<ol><li><a href=\"https://www.youtube.com/watch?v=EGVijzpdIaM\">Certified Scrum Master Bootcamp 2023 | Scrum Master Bootcamp 2023 | Simplilearn</a></li></ol></li><li>Java<ol><li><a href=\"https://www.youtube.com/watch?v=P7SI9mLwiqw\">Java 8 to 18: Most important changes in the Java Platform</a></li></ol></li></ol>","_id":{"$oid":"654d9e3df69e3fa534571e85"},"createdAt":{"$date":"2023-11-10T03:06:37.421Z"},"nestedComments":[]}],"__v":1}
{"_id":{"$oid":"6553221a716454e09943371c"},"content":"<p>Fair expectations from java candidates of various experience level</p>","createdAt":{"$date":"2023-11-14T07:30:34.771Z"},"comments":[{"text":"<p>The expectations from a candidate with 0-5 years of Java experience may vary based on their educational background, previous exposure to software development, and the complexity of the projects they've worked on. Here are some fair expectations for candidates within this experience range:</p><p>1. **Understanding of Java Basics:**<br>&nbsp; - Ability to write basic Java programs.<br>&nbsp; - Familiarity with core concepts like variables, data types, loops, and conditionals.</p><p>2. **Object-Oriented Programming (OOP):**<br>&nbsp; - Understanding of OOP principles like encapsulation, inheritance, and polymorphism.<br>&nbsp; - Ability to design and implement simple classes and relationships.</p><p>3. **Debugging and Troubleshooting:**<br>&nbsp; - Basic debugging skills using IDE tools.<br>&nbsp; - Ability to identify and fix common programming errors.</p><p>4. **Basic Knowledge of Data Structures:**<br>&nbsp; - Understanding of fundamental data structures like arrays, lists, and maps.</p><p>5. **Understanding of Java Libraries:**<br>&nbsp; - Familiarity with commonly used Java libraries and their functionalities.</p><p>6. **Understanding of Version Control:**<br>&nbsp; - Basic knowledge of version control systems like Git.</p><p>7. **Web Development Basics (if applicable):**<br>&nbsp; - Basic understanding of web technologies if the candidate is involved in web development, such as servlets, JSP, or Spring MVC.</p><p>8. **SQL and Database Basics:**<br>&nbsp; - Basic understanding of relational databases and ability to write simple SQL queries.</p><p>9. **Problem-Solving Skills:**<br>&nbsp; - Ability to solve simple programming problems and algorithms.</p><p>10. **Awareness of Best Practices:**<br>&nbsp; &nbsp;- Awareness of coding best practices and code readability.</p><p>11. **Communication and Team Collaboration:**<br>&nbsp; &nbsp;- Effective communication and collaboration skills within a team.</p><p>12. **Learning Agility:**<br>&nbsp; &nbsp;- Willingness to learn and adapt to new technologies and methodologies.</p><p>13. **Awareness of Development Tools:**<br>&nbsp; &nbsp;- Familiarity with commonly used development tools and IDEs.</p><p>14. **Understanding of Software Development Lifecycle:**<br>&nbsp; &nbsp;- Basic understanding of the software development lifecycle.</p><p>15. **Code Review and Collaboration:**<br>&nbsp; &nbsp;- Ability to participate in code reviews and collaborate with team members.</p><p>It's important to recognize that candidates with 0-5 years of experience are still in the early stages of their career. Therefore, providing mentorship, opportunities for learning, and a supportive environment can contribute to their growth and development as effective Java developers.</p>","_id":{"$oid":"65532235716454e09943371f"},"createdAt":{"$date":"2023-11-14T07:31:01.301Z"},"nestedComments":[]},{"text":"<p>For candidates with 6-10 years of Java experience, expectations tend to include a deeper understanding of Java, proficiency in various frameworks and tools, and the ability to contribute to complex projects. Here are fair expectations for candidates within this experience range:</p><p>1. **Advanced Java Knowledge:**<br>&nbsp; - Proficiency in advanced Java concepts, such as concurrency, multithreading, and advanced I/O.</p><p>2. **Expertise in Core Java:**<br>&nbsp; - Strong understanding and hands-on experience with core Java features and libraries.</p><p>3. **Solid Understanding of Java EE or Spring:**<br>&nbsp; - Experience with Java EE or Spring frameworks for building enterprise-level applications.</p><p>4. **Design Patterns:**<br>&nbsp; - Familiarity with and application of design patterns in software development.</p><p>5. **Database and ORM Proficiency:**<br>&nbsp; - Deep understanding of databases, SQL, and experience with Object-Relational Mapping (ORM) frameworks like Hibernate.</p><p>6. **Web Development Mastery (if applicable):**<br>&nbsp; - Proficiency in web development frameworks such as Spring MVC or expertise in servlets and JSP.</p><p>7. **Microservices Architecture:**<br>&nbsp; - Experience with building and maintaining microservices architectures using Java.</p><p>8. **Unit Testing and Test Automation:**<br>&nbsp; - Strong emphasis on writing unit tests and familiarity with test automation frameworks.</p><p>9. **Build Tools and CI/CD:**<br>&nbsp; - Experience with build tools like Maven or Gradle and continuous integration/continuous deployment (CI/CD) pipelines.</p><p>10. **API Design and Integration:**<br>&nbsp; &nbsp;- Proficient in designing and implementing APIs, as well as integrating with third-party APIs.</p><p>11. **Performance Optimization:**<br>&nbsp; &nbsp;- Ability to identify and optimize performance bottlenecks in Java applications.</p><p>12. **Security Best Practices:**<br>&nbsp; &nbsp;- Knowledge of secure coding practices and awareness of common security vulnerabilities.</p><p>13. **Advanced Frameworks:**<br>&nbsp; &nbsp;- Proficiency in advanced frameworks within the Java ecosystem, such as Spring Boot or Jakarta EE.</p><p>14. **Troubleshooting and Debugging:**<br>&nbsp; &nbsp;- Strong troubleshooting and debugging skills, including knowledge of profiling tools.</p><p>15. **Code Review and Mentoring:**<br>&nbsp; &nbsp;- Ability to conduct effective code reviews and provide mentorship to junior team members.</p><p>16. **Architectural Understanding:**<br>&nbsp; &nbsp;- Understanding of software architecture principles and ability to contribute to architectural decisions.</p><p>17. **Agile Methodologies:**<br>&nbsp; &nbsp;- Experience working in Agile development methodologies and contributing to Agile practices.</p><p>18. **Effective Communication:**<br>&nbsp; &nbsp;- Strong communication skills to collaborate with cross-functional teams and stakeholders.</p><p>19. **Project Management Awareness:**<br>&nbsp; &nbsp;- Understanding of project management principles and the ability to contribute to project planning.</p><p>20. **Continuous Learning:**<br>&nbsp; &nbsp;- A commitment to staying updated with the latest Java trends and technologies.</p><p>These expectations reflect the broader skill set and experience that candidates with 6-10 years of Java experience are likely to possess. However, it's essential to tailor expectations based on the specific needs and nature of the projects within your organization.</p>","_id":{"$oid":"6553224a716454e099433750"},"createdAt":{"$date":"2023-11-14T07:31:22.793Z"},"nestedComments":[]},{"text":"<p>For candidates with 11-20 years of Java experience, expectations are higher, encompassing not only advanced technical skills but also a strong understanding of software architecture, leadership, and the ability to make strategic contributions to projects and teams. Here are fair expectations for candidates within this experience range:</p><p>1. **Expert-Level Java Proficiency:**<br>&nbsp; - Mastery of Java language features, including the latest updates and enhancements.</p><p>2. **Architecture and Design:**<br>&nbsp; - Proven ability to design scalable and maintainable software architectures.</p><p>3. **Enterprise-level Experience:**<br>&nbsp; - Extensive experience in developing and maintaining large-scale enterprise applications.</p><p>4. **Mentorship and Leadership:**<br>&nbsp; - Ability to mentor junior developers and provide technical leadership within the team.</p><p>5. **Advanced Frameworks and Technologies:**<br>&nbsp; - Expertise in advanced Java frameworks, libraries, and associated technologies.</p><p>6. **Performance Engineering:**<br>&nbsp; - Deep knowledge and experience in optimizing application performance and resource utilization.</p><p>7. **Microservices and Cloud:**<br>&nbsp; - Expertise in designing, implementing, and deploying microservices-based architectures on cloud platforms.</p><p>8. **DevOps Practices:**<br>&nbsp; - Proficiency in DevOps practices, including infrastructure as code, automation, and continuous integration/continuous deployment (CI/CD).</p><p>9. **Security Expertise:**<br>&nbsp; - In-depth understanding of secure coding practices, encryption, and vulnerability assessments.</p><p>10. **Advanced Database Knowledge:**<br>&nbsp; &nbsp;- Mastery of database design, optimization, and familiarity with both relational and NoSQL databases.</p><p>11. **Full-Stack Development (if applicable):**<br>&nbsp; &nbsp;- Experience with both front-end and back-end development, including frameworks like Angular or React.</p><p>12. **Cross-Functional Collaboration:**<br>&nbsp; &nbsp;- Proven ability to collaborate effectively with cross-functional teams, including product managers and designers.</p><p>13. **Project Management and Delivery:**<br>&nbsp; &nbsp;- Experience in project management, including planning, estimation, and delivery of complex projects.</p><p>14. **Expert Troubleshooting:**<br>&nbsp; &nbsp;- Advanced troubleshooting and debugging skills, including the use of profiling and monitoring tools.</p><p>15. **Open Source Contributions:**<br>&nbsp; &nbsp;- Contributions to open-source projects or active involvement in the Java community.</p><p>16. **Innovation and Problem-Solving:**<br>&nbsp; &nbsp;- Demonstrated ability to innovate and solve complex technical challenges.</p><p>17. **Continuous Learning and Adaptability:**<br>&nbsp; &nbsp;- Commitment to staying abreast of emerging technologies and methodologies.</p><p>18. **Communication with Stakeholders:**<br>&nbsp; &nbsp;- Effective communication with stakeholders, including presenting technical concepts to non-technical audiences.</p><p>19. **Strategic Thinking:**<br>&nbsp; &nbsp;- Ability to contribute to strategic decisions and provide technical input for organizational goals.</p><p>20. **Industry Recognition:**<br>&nbsp; &nbsp;- Recognition within the industry, possibly through publications, conference presentations, or awards.</p><p>It's crucial to note that expectations for candidates with 11-20 years of experience extend beyond technical skills to include leadership, mentoring, and strategic contributions to the organization. Tailor expectations based on the specific needs and goals of your team and projects.</p>","_id":{"$oid":"65532261716454e099433783"},"createdAt":{"$date":"2023-11-14T07:31:45.554Z"},"nestedComments":[]},{"text":"<p>For candidates with 21-30 years of Java experience, expectations are significantly high, encompassing not only deep technical expertise but also leadership at the organizational level. Here are fair expectations for candidates within this experience range:</p><p>1. **Java Mastery:**<br>&nbsp; - Exceptional proficiency in Java, including advanced language features and deep understanding of the entire Java ecosystem.</p><p>2. **Architectural Leadership:**<br>&nbsp; - Proven ability to provide architectural leadership for large-scale, mission-critical systems.</p><p>3. **Strategic Technical Vision:**<br>&nbsp; - Development of a strategic technical vision for projects and the ability to align it with organizational goals.</p><p>4. **Technical Leadership:**<br>&nbsp; - Leadership in driving technical decisions, influencing organizational strategy, and mentoring other technical leaders.</p><p>5. **Enterprise-level Impact:**<br>&nbsp; - Demonstrated impact on the success of enterprise-level projects and systems.</p><p>6. **Innovation and Research:**<br>&nbsp; - Contributions to innovation within the industry, possibly through research or development of cutting-edge solutions.</p><p>7. **Collaboration with Executives:**<br>&nbsp; - Ability to effectively communicate with and influence executives, providing technical guidance for strategic business decisions.</p><p>8. **Thought Leadership:**<br>&nbsp; - Recognition as a thought leader within the Java community or the broader software development community.</p><p>9. **Governance and Standards:**<br>&nbsp; - Development and enforcement of coding standards, best practices, and governance policies.</p><p>10. **Mentorship of Leaders:**<br>&nbsp; &nbsp;- Mentorship of other technical leaders within the organization.</p><p>11. **Project and Program Management:**<br>&nbsp; &nbsp;- Involvement in project and program management, including oversight of multiple projects.</p><p>12. **DevOps and Automation:**<br>&nbsp; &nbsp;- Leadership in implementing DevOps practices, automation, and continuous improvement across the organization.</p><p>13. **Advanced Security Expertise:**<br>&nbsp; &nbsp;- Expertise in designing and implementing security strategies and mitigating advanced security threats.</p><p>14. **Cross-Disciplinary Collaboration:**<br>&nbsp; &nbsp;- Collaboration with leaders from other disciplines such as product management, UX, and data science.</p><p>15. **Regulatory Compliance:**<br>&nbsp; &nbsp;- Experience ensuring compliance with industry-specific regulations and standards.</p><p>16. **Technology Evaluation:**<br>&nbsp; &nbsp;- Evaluation and recommendation of emerging technologies for organizational adoption.</p><p>17. **Crisis Management:**<br>&nbsp; &nbsp;- Leadership in managing and resolving critical incidents and crises.</p><p>18. **Budgetary and Resource Management:**<br>&nbsp; &nbsp;- Involvement in budgetary and resource allocation decisions.</p><p>19. **Global Impact:**<br>&nbsp; &nbsp;- Contributions to projects with a global impact or that span multiple geographical regions.</p><p>20. **Leadership in Industry Forums:**<br>&nbsp; &nbsp;- Participation in industry forums, standards bodies, or advisory groups.</p><p>Expectations for candidates with 21-30 years of experience extend beyond technical skills to encompass strategic leadership, industry impact, and organizational influence. Tailor expectations based on the specific needs, goals, and complexity of your organization.</p>","_id":{"$oid":"65532273716454e0994337b8"},"createdAt":{"$date":"2023-11-14T07:32:03.606Z"},"nestedComments":[]},{"text":"<p>It's relatively uncommon for individuals to have 30-40 years of experience in Java, given that Java was officially released in 1995. However, if you are considering someone with extensive experience in software development and related technologies, here are some potential expectations:</p><p>1. **Historical Context:**<br>&nbsp; - Understanding of the evolution of software development, from early languages to contemporary practices.</p><p>2. **Vast Technical Expertise:**<br>&nbsp; - Profound expertise in Java and related technologies, with a deep understanding of language intricacies, frameworks, and libraries.</p><p>3. **Architectural Wisdom:**<br>&nbsp; - Proven ability to architect and design complex systems, with an understanding of how architectural decisions impact the entire software lifecycle.</p><p>4. **Mentorship and Leadership:**<br>&nbsp; - Mentorship and leadership experience, not only in a technical capacity but also in guiding the career development of others.</p><p>5. **Innovation and Adaptability:**<br>&nbsp; - A history of innovation, including adapting to and influencing changes in technology trends over the decades.</p><p>6. **Thought Leadership:**<br>&nbsp; - Recognition as a thought leader in the software development community, possibly through publications, speaking engagements, or industry contributions.</p><p>7. **Strategic Impact:**<br>&nbsp; - Strategic impact on the direction of organizations or large-scale projects.</p><p>8. **Governance and Standards:**<br>&nbsp; - Establishment and enforcement of coding standards, best practices, and governance policies.</p><p>9. **Cross-Disciplinary Collaboration:**<br>&nbsp; - Collaboration with leaders across various disciplines, contributing to product, business, and technology decisions.</p><p>10. **Global Influence:**<br>&nbsp; &nbsp;- Contributions to projects with a global impact or that span multiple geographical regions.</p><p>11. **Regulatory and Compliance Mastery:**<br>&nbsp; &nbsp;- Expertise in ensuring compliance with industry-specific regulations and standards.</p><p>12. **Crisis Management:**<br>&nbsp; &nbsp;- Proven ability to manage and resolve critical incidents and crises effectively.</p><p>13. **Advanced Security Expertise:**<br>&nbsp; &nbsp;- Expertise in designing and implementing advanced security strategies and mitigating sophisticated security threats.</p><p>14. **Involvement in Industry Forums:**<br>&nbsp; &nbsp;- Active participation in industry forums, standards bodies, or advisory groups.</p><p>15. **Legacy System Experience:**<br>&nbsp; &nbsp;- Experience in dealing with legacy systems and knowledge of strategies for maintaining and modernizing them.</p><p>16. **Knowledge Transfer:**<br>&nbsp; &nbsp;- A commitment to knowledge transfer, ensuring that accumulated wisdom is shared with the next generation of developers.</p><p>17. **Global Technology Impact:**<br>&nbsp; &nbsp;- Contributions to the broader technology industry, possibly through the development of influential technologies or frameworks.</p><p>18. **Teaching and Education:**<br>&nbsp; &nbsp;- Contribution to educational initiatives, potentially through teaching, writing educational materials, or creating learning resources.</p><p>19. **Futuristic Vision:**<br>&nbsp; &nbsp;- A visionary approach to technology trends, anticipating future challenges and opportunities.</p><p>20. **Legacy Building:**<br>&nbsp; &nbsp;- Building a lasting legacy, whether through the creation of successful products, influential teams, or enduring technological contributions.</p><p>Given the uniqueness of having 30-40 years of experience, expectations should be tailored to the individual's specific achievements and contributions. This level of experience brings a wealth of knowledge and a potential for profound impact in various aspects of the software development field.</p>","_id":{"$oid":"65532288716454e0994337ef"},"createdAt":{"$date":"2023-11-14T07:32:24.897Z"},"nestedComments":[]},{"text":"<p>It's extremely rare for individuals to have 41-60 years of experience in programming languages like Java, given the relatively recent advent of modern programming languages. However, if you are considering someone with extensive experience in software development, potentially spanning multiple programming languages over the decades, here are some broad expectations:</p><p>1. **Historical Context:**<br>&nbsp; - In-depth understanding of the historical evolution of software development, having witnessed the emergence of multiple programming paradigms and languages.</p><p>2. **Polyglot Programming:**<br>&nbsp; - Proficiency in multiple programming languages, potentially including languages that are not in common use today.</p><p>3. **Architectural Wisdom:**<br>&nbsp; - Proven ability to architect and design complex systems, with a deep understanding of how architectural decisions impact the entire software lifecycle.</p><p>4. **Innovation Across Eras:**<br>&nbsp; - Demonstrated ability to innovate and adapt to technological changes across different eras of computing.</p><p>5. **Thought Leadership:**<br>&nbsp; - Recognition as a thought leader in the software development community, potentially through publications, speaking engagements, or industry contributions.</p><p>6. **Leadership and Mentorship:**<br>&nbsp; - Extensive leadership and mentorship experience, not only in a technical capacity but also in guiding the career development of others.</p><p>7. **Strategic Impact:**<br>&nbsp; - Strategic impact on the direction of organizations or large-scale projects over an extended period.</p><p>8. **Governance and Standards:**<br>&nbsp; - Establishment and enforcement of coding standards, best practices, and governance policies.</p><p>9. **Cross-Disciplinary Collaboration:**<br>&nbsp; - Collaboration with leaders across various disciplines, contributing to product, business, and technology decisions.</p><p>10. **Global Influence:**<br>&nbsp; &nbsp;- Contributions to projects with a global impact or that span multiple geographical regions.</p><p>11. **Regulatory and Compliance Mastery:**<br>&nbsp; &nbsp;- Expertise in ensuring compliance with industry-specific regulations and standards.</p><p>12. **Crisis Management:**<br>&nbsp; &nbsp;- Proven ability to manage and resolve critical incidents and crises effectively.</p><p>13. **Security Mastery:**<br>&nbsp; &nbsp;- Advanced expertise in designing and implementing security strategies, with a deep understanding of evolving security threats.</p><p>14. **Involvement in Industry Forums:**<br>&nbsp; &nbsp;- Active participation in industry forums, standards bodies, or advisory groups.</p><p>15. **Legacy System Experience:**<br>&nbsp; &nbsp;- Experience in dealing with legacy systems and knowledge of strategies for maintaining and modernizing them.</p><p>16. **Knowledge Transfer:**<br>&nbsp; &nbsp;- A commitment to knowledge transfer, ensuring that accumulated wisdom is shared with the next generation of developers.</p><p>17. **Global Technology Impact:**<br>&nbsp; &nbsp;- Contributions to the broader technology industry, possibly through the development of influential technologies or frameworks.</p><p>18. **Teaching and Education:**<br>&nbsp; &nbsp;- Contribution to educational initiatives, potentially through teaching, writing educational materials, or creating learning resources.</p><p>19. **Futuristic Vision:**<br>&nbsp; &nbsp;- A visionary approach to technology trends, anticipating future challenges and opportunities.</p><p>20. **Legacy Building:**<br>&nbsp; &nbsp;- Building a lasting legacy, whether through the creation of successful products, influential teams, or enduring technological contributions.</p><p>Given the unparalleled nature of having 41-60 years of experience, expectations should be tailored to the individual's specific achievements and contributions. This level of experience brings a unique perspective and a wealth of knowledge that can have a profound impact on the software development field.</p>","_id":{"$oid":"6553229c716454e099433828"},"createdAt":{"$date":"2023-11-14T07:32:44.206Z"},"nestedComments":[]}],"__v":6}
